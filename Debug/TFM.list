
TFM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016158  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002594  080162e0  080162e0  000262e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018874  08018874  0003020c  2**0
                  CONTENTS
  4 .ARM          00000008  08018874  08018874  00028874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801887c  0801887c  0003020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801887c  0801887c  0002887c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018880  08018880  00028880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08018884  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006eb8  20000210  08018a90  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200070c8  08018a90  000370c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ffbf  00000000  00000000  00030235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054fa  00000000  00000000  000501f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  000556f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001548  00000000  00000000  00056db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cb2e  00000000  00000000  00058300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028035  00000000  00000000  00084e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de600  00000000  00000000  000ace63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018b463  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000768c  00000000  00000000  0018b4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000210 	.word	0x20000210
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080162c8 	.word	0x080162c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000214 	.word	0x20000214
 80001c4:	080162c8 	.word	0x080162c8

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_frsub>:
 8000bf4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	e002      	b.n	8000c00 <__addsf3>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_fsub>:
 8000bfc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c00 <__addsf3>:
 8000c00:	0042      	lsls	r2, r0, #1
 8000c02:	bf1f      	itttt	ne
 8000c04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c08:	ea92 0f03 	teqne	r2, r3
 8000c0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c14:	d06a      	beq.n	8000cec <__addsf3+0xec>
 8000c16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1e:	bfc1      	itttt	gt
 8000c20:	18d2      	addgt	r2, r2, r3
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	4048      	eorgt	r0, r1
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	bfb8      	it	lt
 8000c2a:	425b      	neglt	r3, r3
 8000c2c:	2b19      	cmp	r3, #25
 8000c2e:	bf88      	it	hi
 8000c30:	4770      	bxhi	lr
 8000c32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3e:	bf18      	it	ne
 8000c40:	4240      	negne	r0, r0
 8000c42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4e:	bf18      	it	ne
 8000c50:	4249      	negne	r1, r1
 8000c52:	ea92 0f03 	teq	r2, r3
 8000c56:	d03f      	beq.n	8000cd8 <__addsf3+0xd8>
 8000c58:	f1a2 0201 	sub.w	r2, r2, #1
 8000c5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c60:	eb10 000c 	adds.w	r0, r0, ip
 8000c64:	f1c3 0320 	rsb	r3, r3, #32
 8000c68:	fa01 f103 	lsl.w	r1, r1, r3
 8000c6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__addsf3+0x78>
 8000c72:	4249      	negs	r1, r1
 8000c74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c7c:	d313      	bcc.n	8000ca6 <__addsf3+0xa6>
 8000c7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c82:	d306      	bcc.n	8000c92 <__addsf3+0x92>
 8000c84:	0840      	lsrs	r0, r0, #1
 8000c86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8a:	f102 0201 	add.w	r2, r2, #1
 8000c8e:	2afe      	cmp	r2, #254	; 0xfe
 8000c90:	d251      	bcs.n	8000d36 <__addsf3+0x136>
 8000c92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9a:	bf08      	it	eq
 8000c9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ca0:	ea40 0003 	orr.w	r0, r0, r3
 8000ca4:	4770      	bx	lr
 8000ca6:	0049      	lsls	r1, r1, #1
 8000ca8:	eb40 0000 	adc.w	r0, r0, r0
 8000cac:	3a01      	subs	r2, #1
 8000cae:	bf28      	it	cs
 8000cb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb4:	d2ed      	bcs.n	8000c92 <__addsf3+0x92>
 8000cb6:	fab0 fc80 	clz	ip, r0
 8000cba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc6:	bfaa      	itet	ge
 8000cc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ccc:	4252      	neglt	r2, r2
 8000cce:	4318      	orrge	r0, r3
 8000cd0:	bfbc      	itt	lt
 8000cd2:	40d0      	lsrlt	r0, r2
 8000cd4:	4318      	orrlt	r0, r3
 8000cd6:	4770      	bx	lr
 8000cd8:	f092 0f00 	teq	r2, #0
 8000cdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ce0:	bf06      	itte	eq
 8000ce2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce6:	3201      	addeq	r2, #1
 8000ce8:	3b01      	subne	r3, #1
 8000cea:	e7b5      	b.n	8000c58 <__addsf3+0x58>
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d021      	beq.n	8000d40 <__addsf3+0x140>
 8000cfc:	ea92 0f03 	teq	r2, r3
 8000d00:	d004      	beq.n	8000d0c <__addsf3+0x10c>
 8000d02:	f092 0f00 	teq	r2, #0
 8000d06:	bf08      	it	eq
 8000d08:	4608      	moveq	r0, r1
 8000d0a:	4770      	bx	lr
 8000d0c:	ea90 0f01 	teq	r0, r1
 8000d10:	bf1c      	itt	ne
 8000d12:	2000      	movne	r0, #0
 8000d14:	4770      	bxne	lr
 8000d16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d1a:	d104      	bne.n	8000d26 <__addsf3+0x126>
 8000d1c:	0040      	lsls	r0, r0, #1
 8000d1e:	bf28      	it	cs
 8000d20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d2a:	bf3c      	itt	cc
 8000d2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d30:	4770      	bxcc	lr
 8000d32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3e:	4770      	bx	lr
 8000d40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d44:	bf16      	itet	ne
 8000d46:	4608      	movne	r0, r1
 8000d48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d4c:	4601      	movne	r1, r0
 8000d4e:	0242      	lsls	r2, r0, #9
 8000d50:	bf06      	itte	eq
 8000d52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d56:	ea90 0f01 	teqeq	r0, r1
 8000d5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_ui2f>:
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e004      	b.n	8000d70 <__aeabi_i2f+0x8>
 8000d66:	bf00      	nop

08000d68 <__aeabi_i2f>:
 8000d68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d6c:	bf48      	it	mi
 8000d6e:	4240      	negmi	r0, r0
 8000d70:	ea5f 0c00 	movs.w	ip, r0
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	e01c      	b.n	8000dbe <__aeabi_l2f+0x2a>

08000d84 <__aeabi_ul2f>:
 8000d84:	ea50 0201 	orrs.w	r2, r0, r1
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e00a      	b.n	8000da8 <__aeabi_l2f+0x14>
 8000d92:	bf00      	nop

08000d94 <__aeabi_l2f>:
 8000d94:	ea50 0201 	orrs.w	r2, r0, r1
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000da0:	d502      	bpl.n	8000da8 <__aeabi_l2f+0x14>
 8000da2:	4240      	negs	r0, r0
 8000da4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da8:	ea5f 0c01 	movs.w	ip, r1
 8000dac:	bf02      	ittt	eq
 8000dae:	4684      	moveq	ip, r0
 8000db0:	4601      	moveq	r1, r0
 8000db2:	2000      	moveq	r0, #0
 8000db4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db8:	bf08      	it	eq
 8000dba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dc2:	fabc f28c 	clz	r2, ip
 8000dc6:	3a08      	subs	r2, #8
 8000dc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dcc:	db10      	blt.n	8000df0 <__aeabi_l2f+0x5c>
 8000dce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd8:	f1c2 0220 	rsb	r2, r2, #32
 8000ddc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000de0:	fa20 f202 	lsr.w	r2, r0, r2
 8000de4:	eb43 0002 	adc.w	r0, r3, r2
 8000de8:	bf08      	it	eq
 8000dea:	f020 0001 	biceq.w	r0, r0, #1
 8000dee:	4770      	bx	lr
 8000df0:	f102 0220 	add.w	r2, r2, #32
 8000df4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df8:	f1c2 0220 	rsb	r2, r2, #32
 8000dfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e00:	fa21 f202 	lsr.w	r2, r1, r2
 8000e04:	eb43 0002 	adc.w	r0, r3, r2
 8000e08:	bf08      	it	eq
 8000e0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_fmul>:
 8000e10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e18:	bf1e      	ittt	ne
 8000e1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1e:	ea92 0f0c 	teqne	r2, ip
 8000e22:	ea93 0f0c 	teqne	r3, ip
 8000e26:	d06f      	beq.n	8000f08 <__aeabi_fmul+0xf8>
 8000e28:	441a      	add	r2, r3
 8000e2a:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2e:	0240      	lsls	r0, r0, #9
 8000e30:	bf18      	it	ne
 8000e32:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e36:	d01e      	beq.n	8000e76 <__aeabi_fmul+0x66>
 8000e38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e3c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e40:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e44:	fba0 3101 	umull	r3, r1, r0, r1
 8000e48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e4c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e50:	bf3e      	ittt	cc
 8000e52:	0049      	lslcc	r1, r1, #1
 8000e54:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e58:	005b      	lslcc	r3, r3, #1
 8000e5a:	ea40 0001 	orr.w	r0, r0, r1
 8000e5e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e62:	2afd      	cmp	r2, #253	; 0xfd
 8000e64:	d81d      	bhi.n	8000ea2 <__aeabi_fmul+0x92>
 8000e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e6e:	bf08      	it	eq
 8000e70:	f020 0001 	biceq.w	r0, r0, #1
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e7e:	bf08      	it	eq
 8000e80:	0249      	lsleq	r1, r1, #9
 8000e82:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e86:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8a:	3a7f      	subs	r2, #127	; 0x7f
 8000e8c:	bfc2      	ittt	gt
 8000e8e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e92:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e96:	4770      	bxgt	lr
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	3a01      	subs	r2, #1
 8000ea2:	dc5d      	bgt.n	8000f60 <__aeabi_fmul+0x150>
 8000ea4:	f112 0f19 	cmn.w	r2, #25
 8000ea8:	bfdc      	itt	le
 8000eaa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eae:	4770      	bxle	lr
 8000eb0:	f1c2 0200 	rsb	r2, r2, #0
 8000eb4:	0041      	lsls	r1, r0, #1
 8000eb6:	fa21 f102 	lsr.w	r1, r1, r2
 8000eba:	f1c2 0220 	rsb	r2, r2, #32
 8000ebe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ec6:	f140 0000 	adc.w	r0, r0, #0
 8000eca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ece:	bf08      	it	eq
 8000ed0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed4:	4770      	bx	lr
 8000ed6:	f092 0f00 	teq	r2, #0
 8000eda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ede:	bf02      	ittt	eq
 8000ee0:	0040      	lsleq	r0, r0, #1
 8000ee2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ee6:	3a01      	subeq	r2, #1
 8000ee8:	d0f9      	beq.n	8000ede <__aeabi_fmul+0xce>
 8000eea:	ea40 000c 	orr.w	r0, r0, ip
 8000eee:	f093 0f00 	teq	r3, #0
 8000ef2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef6:	bf02      	ittt	eq
 8000ef8:	0049      	lsleq	r1, r1, #1
 8000efa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000efe:	3b01      	subeq	r3, #1
 8000f00:	d0f9      	beq.n	8000ef6 <__aeabi_fmul+0xe6>
 8000f02:	ea41 010c 	orr.w	r1, r1, ip
 8000f06:	e78f      	b.n	8000e28 <__aeabi_fmul+0x18>
 8000f08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f0c:	ea92 0f0c 	teq	r2, ip
 8000f10:	bf18      	it	ne
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d00a      	beq.n	8000f2e <__aeabi_fmul+0x11e>
 8000f18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f1c:	bf18      	it	ne
 8000f1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f22:	d1d8      	bne.n	8000ed6 <__aeabi_fmul+0xc6>
 8000f24:	ea80 0001 	eor.w	r0, r0, r1
 8000f28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f2c:	4770      	bx	lr
 8000f2e:	f090 0f00 	teq	r0, #0
 8000f32:	bf17      	itett	ne
 8000f34:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f38:	4608      	moveq	r0, r1
 8000f3a:	f091 0f00 	teqne	r1, #0
 8000f3e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f42:	d014      	beq.n	8000f6e <__aeabi_fmul+0x15e>
 8000f44:	ea92 0f0c 	teq	r2, ip
 8000f48:	d101      	bne.n	8000f4e <__aeabi_fmul+0x13e>
 8000f4a:	0242      	lsls	r2, r0, #9
 8000f4c:	d10f      	bne.n	8000f6e <__aeabi_fmul+0x15e>
 8000f4e:	ea93 0f0c 	teq	r3, ip
 8000f52:	d103      	bne.n	8000f5c <__aeabi_fmul+0x14c>
 8000f54:	024b      	lsls	r3, r1, #9
 8000f56:	bf18      	it	ne
 8000f58:	4608      	movne	r0, r1
 8000f5a:	d108      	bne.n	8000f6e <__aeabi_fmul+0x15e>
 8000f5c:	ea80 0001 	eor.w	r0, r0, r1
 8000f60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f6c:	4770      	bx	lr
 8000f6e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f72:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f76:	4770      	bx	lr

08000f78 <__aeabi_fdiv>:
 8000f78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f80:	bf1e      	ittt	ne
 8000f82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f86:	ea92 0f0c 	teqne	r2, ip
 8000f8a:	ea93 0f0c 	teqne	r3, ip
 8000f8e:	d069      	beq.n	8001064 <__aeabi_fdiv+0xec>
 8000f90:	eba2 0203 	sub.w	r2, r2, r3
 8000f94:	ea80 0c01 	eor.w	ip, r0, r1
 8000f98:	0249      	lsls	r1, r1, #9
 8000f9a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f9e:	d037      	beq.n	8001010 <__aeabi_fdiv+0x98>
 8000fa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fa4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fa8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fb0:	428b      	cmp	r3, r1
 8000fb2:	bf38      	it	cc
 8000fb4:	005b      	lslcc	r3, r3, #1
 8000fb6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fbe:	428b      	cmp	r3, r1
 8000fc0:	bf24      	itt	cs
 8000fc2:	1a5b      	subcs	r3, r3, r1
 8000fc4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fc8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fcc:	bf24      	itt	cs
 8000fce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fd6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fda:	bf24      	itt	cs
 8000fdc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fe8:	bf24      	itt	cs
 8000fea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	bf18      	it	ne
 8000ff6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffa:	d1e0      	bne.n	8000fbe <__aeabi_fdiv+0x46>
 8000ffc:	2afd      	cmp	r2, #253	; 0xfd
 8000ffe:	f63f af50 	bhi.w	8000ea2 <__aeabi_fmul+0x92>
 8001002:	428b      	cmp	r3, r1
 8001004:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001008:	bf08      	it	eq
 800100a:	f020 0001 	biceq.w	r0, r0, #1
 800100e:	4770      	bx	lr
 8001010:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001014:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001018:	327f      	adds	r2, #127	; 0x7f
 800101a:	bfc2      	ittt	gt
 800101c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001020:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001024:	4770      	bxgt	lr
 8001026:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	3a01      	subs	r2, #1
 8001030:	e737      	b.n	8000ea2 <__aeabi_fmul+0x92>
 8001032:	f092 0f00 	teq	r2, #0
 8001036:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800103a:	bf02      	ittt	eq
 800103c:	0040      	lsleq	r0, r0, #1
 800103e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001042:	3a01      	subeq	r2, #1
 8001044:	d0f9      	beq.n	800103a <__aeabi_fdiv+0xc2>
 8001046:	ea40 000c 	orr.w	r0, r0, ip
 800104a:	f093 0f00 	teq	r3, #0
 800104e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001052:	bf02      	ittt	eq
 8001054:	0049      	lsleq	r1, r1, #1
 8001056:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800105a:	3b01      	subeq	r3, #1
 800105c:	d0f9      	beq.n	8001052 <__aeabi_fdiv+0xda>
 800105e:	ea41 010c 	orr.w	r1, r1, ip
 8001062:	e795      	b.n	8000f90 <__aeabi_fdiv+0x18>
 8001064:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001068:	ea92 0f0c 	teq	r2, ip
 800106c:	d108      	bne.n	8001080 <__aeabi_fdiv+0x108>
 800106e:	0242      	lsls	r2, r0, #9
 8001070:	f47f af7d 	bne.w	8000f6e <__aeabi_fmul+0x15e>
 8001074:	ea93 0f0c 	teq	r3, ip
 8001078:	f47f af70 	bne.w	8000f5c <__aeabi_fmul+0x14c>
 800107c:	4608      	mov	r0, r1
 800107e:	e776      	b.n	8000f6e <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	d104      	bne.n	8001090 <__aeabi_fdiv+0x118>
 8001086:	024b      	lsls	r3, r1, #9
 8001088:	f43f af4c 	beq.w	8000f24 <__aeabi_fmul+0x114>
 800108c:	4608      	mov	r0, r1
 800108e:	e76e      	b.n	8000f6e <__aeabi_fmul+0x15e>
 8001090:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001094:	bf18      	it	ne
 8001096:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800109a:	d1ca      	bne.n	8001032 <__aeabi_fdiv+0xba>
 800109c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010a0:	f47f af5c 	bne.w	8000f5c <__aeabi_fmul+0x14c>
 80010a4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010a8:	f47f af3c 	bne.w	8000f24 <__aeabi_fmul+0x114>
 80010ac:	e75f      	b.n	8000f6e <__aeabi_fmul+0x15e>
 80010ae:	bf00      	nop

080010b0 <__gesf2>:
 80010b0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80010b4:	e006      	b.n	80010c4 <__cmpsf2+0x4>
 80010b6:	bf00      	nop

080010b8 <__lesf2>:
 80010b8:	f04f 0c01 	mov.w	ip, #1
 80010bc:	e002      	b.n	80010c4 <__cmpsf2+0x4>
 80010be:	bf00      	nop

080010c0 <__cmpsf2>:
 80010c0:	f04f 0c01 	mov.w	ip, #1
 80010c4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	bf18      	it	ne
 80010d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010da:	d011      	beq.n	8001100 <__cmpsf2+0x40>
 80010dc:	b001      	add	sp, #4
 80010de:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010e2:	bf18      	it	ne
 80010e4:	ea90 0f01 	teqne	r0, r1
 80010e8:	bf58      	it	pl
 80010ea:	ebb2 0003 	subspl.w	r0, r2, r3
 80010ee:	bf88      	it	hi
 80010f0:	17c8      	asrhi	r0, r1, #31
 80010f2:	bf38      	it	cc
 80010f4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010f8:	bf18      	it	ne
 80010fa:	f040 0001 	orrne.w	r0, r0, #1
 80010fe:	4770      	bx	lr
 8001100:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001104:	d102      	bne.n	800110c <__cmpsf2+0x4c>
 8001106:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110a:	d105      	bne.n	8001118 <__cmpsf2+0x58>
 800110c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001110:	d1e4      	bne.n	80010dc <__cmpsf2+0x1c>
 8001112:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001116:	d0e1      	beq.n	80010dc <__cmpsf2+0x1c>
 8001118:	f85d 0b04 	ldr.w	r0, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <__aeabi_cfrcmple>:
 8001120:	4684      	mov	ip, r0
 8001122:	4608      	mov	r0, r1
 8001124:	4661      	mov	r1, ip
 8001126:	e7ff      	b.n	8001128 <__aeabi_cfcmpeq>

08001128 <__aeabi_cfcmpeq>:
 8001128:	b50f      	push	{r0, r1, r2, r3, lr}
 800112a:	f7ff ffc9 	bl	80010c0 <__cmpsf2>
 800112e:	2800      	cmp	r0, #0
 8001130:	bf48      	it	mi
 8001132:	f110 0f00 	cmnmi.w	r0, #0
 8001136:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001138 <__aeabi_fcmpeq>:
 8001138:	f84d ed08 	str.w	lr, [sp, #-8]!
 800113c:	f7ff fff4 	bl	8001128 <__aeabi_cfcmpeq>
 8001140:	bf0c      	ite	eq
 8001142:	2001      	moveq	r0, #1
 8001144:	2000      	movne	r0, #0
 8001146:	f85d fb08 	ldr.w	pc, [sp], #8
 800114a:	bf00      	nop

0800114c <__aeabi_fcmplt>:
 800114c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001150:	f7ff ffea 	bl	8001128 <__aeabi_cfcmpeq>
 8001154:	bf34      	ite	cc
 8001156:	2001      	movcc	r0, #1
 8001158:	2000      	movcs	r0, #0
 800115a:	f85d fb08 	ldr.w	pc, [sp], #8
 800115e:	bf00      	nop

08001160 <__aeabi_fcmple>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff ffe0 	bl	8001128 <__aeabi_cfcmpeq>
 8001168:	bf94      	ite	ls
 800116a:	2001      	movls	r0, #1
 800116c:	2000      	movhi	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmpge>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffd2 	bl	8001120 <__aeabi_cfrcmple>
 800117c:	bf94      	ite	ls
 800117e:	2001      	movls	r0, #1
 8001180:	2000      	movhi	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmpgt>:
 8001188:	f84d ed08 	str.w	lr, [sp, #-8]!
 800118c:	f7ff ffc8 	bl	8001120 <__aeabi_cfrcmple>
 8001190:	bf34      	ite	cc
 8001192:	2001      	movcc	r0, #1
 8001194:	2000      	movcs	r0, #0
 8001196:	f85d fb08 	ldr.w	pc, [sp], #8
 800119a:	bf00      	nop

0800119c <__aeabi_uldivmod>:
 800119c:	b953      	cbnz	r3, 80011b4 <__aeabi_uldivmod+0x18>
 800119e:	b94a      	cbnz	r2, 80011b4 <__aeabi_uldivmod+0x18>
 80011a0:	2900      	cmp	r1, #0
 80011a2:	bf08      	it	eq
 80011a4:	2800      	cmpeq	r0, #0
 80011a6:	bf1c      	itt	ne
 80011a8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80011ac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80011b0:	f000 b9ae 	b.w	8001510 <__aeabi_idiv0>
 80011b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011bc:	f000 f83e 	bl	800123c <__udivmoddi4>
 80011c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011c8:	b004      	add	sp, #16
 80011ca:	4770      	bx	lr

080011cc <__aeabi_d2lz>:
 80011cc:	b538      	push	{r3, r4, r5, lr}
 80011ce:	4605      	mov	r5, r0
 80011d0:	460c      	mov	r4, r1
 80011d2:	2200      	movs	r2, #0
 80011d4:	2300      	movs	r3, #0
 80011d6:	4628      	mov	r0, r5
 80011d8:	4621      	mov	r1, r4
 80011da:	f7ff fc35 	bl	8000a48 <__aeabi_dcmplt>
 80011de:	b928      	cbnz	r0, 80011ec <__aeabi_d2lz+0x20>
 80011e0:	4628      	mov	r0, r5
 80011e2:	4621      	mov	r1, r4
 80011e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e8:	f000 b80a 	b.w	8001200 <__aeabi_d2ulz>
 80011ec:	4628      	mov	r0, r5
 80011ee:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011f2:	f000 f805 	bl	8001200 <__aeabi_d2ulz>
 80011f6:	4240      	negs	r0, r0
 80011f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011fc:	bd38      	pop	{r3, r4, r5, pc}
 80011fe:	bf00      	nop

08001200 <__aeabi_d2ulz>:
 8001200:	b5d0      	push	{r4, r6, r7, lr}
 8001202:	2200      	movs	r2, #0
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <__aeabi_d2ulz+0x34>)
 8001206:	4606      	mov	r6, r0
 8001208:	460f      	mov	r7, r1
 800120a:	f7ff f9ab 	bl	8000564 <__aeabi_dmul>
 800120e:	f7ff fc81 	bl	8000b14 <__aeabi_d2uiz>
 8001212:	4604      	mov	r4, r0
 8001214:	f7ff f92c 	bl	8000470 <__aeabi_ui2d>
 8001218:	2200      	movs	r2, #0
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <__aeabi_d2ulz+0x38>)
 800121c:	f7ff f9a2 	bl	8000564 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4630      	mov	r0, r6
 8001226:	4639      	mov	r1, r7
 8001228:	f7fe ffe4 	bl	80001f4 <__aeabi_dsub>
 800122c:	f7ff fc72 	bl	8000b14 <__aeabi_d2uiz>
 8001230:	4621      	mov	r1, r4
 8001232:	bdd0      	pop	{r4, r6, r7, pc}
 8001234:	3df00000 	.word	0x3df00000
 8001238:	41f00000 	.word	0x41f00000

0800123c <__udivmoddi4>:
 800123c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001240:	9e08      	ldr	r6, [sp, #32]
 8001242:	460d      	mov	r5, r1
 8001244:	4604      	mov	r4, r0
 8001246:	4688      	mov	r8, r1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d14d      	bne.n	80012e8 <__udivmoddi4+0xac>
 800124c:	428a      	cmp	r2, r1
 800124e:	4694      	mov	ip, r2
 8001250:	d968      	bls.n	8001324 <__udivmoddi4+0xe8>
 8001252:	fab2 f282 	clz	r2, r2
 8001256:	b152      	cbz	r2, 800126e <__udivmoddi4+0x32>
 8001258:	fa01 f302 	lsl.w	r3, r1, r2
 800125c:	f1c2 0120 	rsb	r1, r2, #32
 8001260:	fa20 f101 	lsr.w	r1, r0, r1
 8001264:	fa0c fc02 	lsl.w	ip, ip, r2
 8001268:	ea41 0803 	orr.w	r8, r1, r3
 800126c:	4094      	lsls	r4, r2
 800126e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001272:	fbb8 f7f1 	udiv	r7, r8, r1
 8001276:	fa1f fe8c 	uxth.w	lr, ip
 800127a:	fb01 8817 	mls	r8, r1, r7, r8
 800127e:	fb07 f00e 	mul.w	r0, r7, lr
 8001282:	0c23      	lsrs	r3, r4, #16
 8001284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001288:	4298      	cmp	r0, r3
 800128a:	d90a      	bls.n	80012a2 <__udivmoddi4+0x66>
 800128c:	eb1c 0303 	adds.w	r3, ip, r3
 8001290:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8001294:	f080 811e 	bcs.w	80014d4 <__udivmoddi4+0x298>
 8001298:	4298      	cmp	r0, r3
 800129a:	f240 811b 	bls.w	80014d4 <__udivmoddi4+0x298>
 800129e:	3f02      	subs	r7, #2
 80012a0:	4463      	add	r3, ip
 80012a2:	1a1b      	subs	r3, r3, r0
 80012a4:	fbb3 f0f1 	udiv	r0, r3, r1
 80012a8:	fb01 3310 	mls	r3, r1, r0, r3
 80012ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80012b0:	b2a4      	uxth	r4, r4
 80012b2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012b6:	45a6      	cmp	lr, r4
 80012b8:	d90a      	bls.n	80012d0 <__udivmoddi4+0x94>
 80012ba:	eb1c 0404 	adds.w	r4, ip, r4
 80012be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80012c2:	f080 8109 	bcs.w	80014d8 <__udivmoddi4+0x29c>
 80012c6:	45a6      	cmp	lr, r4
 80012c8:	f240 8106 	bls.w	80014d8 <__udivmoddi4+0x29c>
 80012cc:	4464      	add	r4, ip
 80012ce:	3802      	subs	r0, #2
 80012d0:	2100      	movs	r1, #0
 80012d2:	eba4 040e 	sub.w	r4, r4, lr
 80012d6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80012da:	b11e      	cbz	r6, 80012e4 <__udivmoddi4+0xa8>
 80012dc:	2300      	movs	r3, #0
 80012de:	40d4      	lsrs	r4, r2
 80012e0:	e9c6 4300 	strd	r4, r3, [r6]
 80012e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e8:	428b      	cmp	r3, r1
 80012ea:	d908      	bls.n	80012fe <__udivmoddi4+0xc2>
 80012ec:	2e00      	cmp	r6, #0
 80012ee:	f000 80ee 	beq.w	80014ce <__udivmoddi4+0x292>
 80012f2:	2100      	movs	r1, #0
 80012f4:	e9c6 0500 	strd	r0, r5, [r6]
 80012f8:	4608      	mov	r0, r1
 80012fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012fe:	fab3 f183 	clz	r1, r3
 8001302:	2900      	cmp	r1, #0
 8001304:	d14a      	bne.n	800139c <__udivmoddi4+0x160>
 8001306:	42ab      	cmp	r3, r5
 8001308:	d302      	bcc.n	8001310 <__udivmoddi4+0xd4>
 800130a:	4282      	cmp	r2, r0
 800130c:	f200 80fc 	bhi.w	8001508 <__udivmoddi4+0x2cc>
 8001310:	1a84      	subs	r4, r0, r2
 8001312:	eb65 0303 	sbc.w	r3, r5, r3
 8001316:	2001      	movs	r0, #1
 8001318:	4698      	mov	r8, r3
 800131a:	2e00      	cmp	r6, #0
 800131c:	d0e2      	beq.n	80012e4 <__udivmoddi4+0xa8>
 800131e:	e9c6 4800 	strd	r4, r8, [r6]
 8001322:	e7df      	b.n	80012e4 <__udivmoddi4+0xa8>
 8001324:	b902      	cbnz	r2, 8001328 <__udivmoddi4+0xec>
 8001326:	deff      	udf	#255	; 0xff
 8001328:	fab2 f282 	clz	r2, r2
 800132c:	2a00      	cmp	r2, #0
 800132e:	f040 8091 	bne.w	8001454 <__udivmoddi4+0x218>
 8001332:	eba1 000c 	sub.w	r0, r1, ip
 8001336:	2101      	movs	r1, #1
 8001338:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800133c:	fa1f fe8c 	uxth.w	lr, ip
 8001340:	fbb0 f3f7 	udiv	r3, r0, r7
 8001344:	fb07 0013 	mls	r0, r7, r3, r0
 8001348:	0c25      	lsrs	r5, r4, #16
 800134a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800134e:	fb0e f003 	mul.w	r0, lr, r3
 8001352:	42a8      	cmp	r0, r5
 8001354:	d908      	bls.n	8001368 <__udivmoddi4+0x12c>
 8001356:	eb1c 0505 	adds.w	r5, ip, r5
 800135a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800135e:	d202      	bcs.n	8001366 <__udivmoddi4+0x12a>
 8001360:	42a8      	cmp	r0, r5
 8001362:	f200 80ce 	bhi.w	8001502 <__udivmoddi4+0x2c6>
 8001366:	4643      	mov	r3, r8
 8001368:	1a2d      	subs	r5, r5, r0
 800136a:	fbb5 f0f7 	udiv	r0, r5, r7
 800136e:	fb07 5510 	mls	r5, r7, r0, r5
 8001372:	fb0e fe00 	mul.w	lr, lr, r0
 8001376:	b2a4      	uxth	r4, r4
 8001378:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800137c:	45a6      	cmp	lr, r4
 800137e:	d908      	bls.n	8001392 <__udivmoddi4+0x156>
 8001380:	eb1c 0404 	adds.w	r4, ip, r4
 8001384:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001388:	d202      	bcs.n	8001390 <__udivmoddi4+0x154>
 800138a:	45a6      	cmp	lr, r4
 800138c:	f200 80b6 	bhi.w	80014fc <__udivmoddi4+0x2c0>
 8001390:	4628      	mov	r0, r5
 8001392:	eba4 040e 	sub.w	r4, r4, lr
 8001396:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800139a:	e79e      	b.n	80012da <__udivmoddi4+0x9e>
 800139c:	f1c1 0720 	rsb	r7, r1, #32
 80013a0:	408b      	lsls	r3, r1
 80013a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80013a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80013aa:	fa25 fa07 	lsr.w	sl, r5, r7
 80013ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013b2:	fbba f8f9 	udiv	r8, sl, r9
 80013b6:	fa20 f307 	lsr.w	r3, r0, r7
 80013ba:	fb09 aa18 	mls	sl, r9, r8, sl
 80013be:	408d      	lsls	r5, r1
 80013c0:	fa1f fe8c 	uxth.w	lr, ip
 80013c4:	431d      	orrs	r5, r3
 80013c6:	fa00 f301 	lsl.w	r3, r0, r1
 80013ca:	fb08 f00e 	mul.w	r0, r8, lr
 80013ce:	0c2c      	lsrs	r4, r5, #16
 80013d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013d4:	42a0      	cmp	r0, r4
 80013d6:	fa02 f201 	lsl.w	r2, r2, r1
 80013da:	d90b      	bls.n	80013f4 <__udivmoddi4+0x1b8>
 80013dc:	eb1c 0404 	adds.w	r4, ip, r4
 80013e0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80013e4:	f080 8088 	bcs.w	80014f8 <__udivmoddi4+0x2bc>
 80013e8:	42a0      	cmp	r0, r4
 80013ea:	f240 8085 	bls.w	80014f8 <__udivmoddi4+0x2bc>
 80013ee:	f1a8 0802 	sub.w	r8, r8, #2
 80013f2:	4464      	add	r4, ip
 80013f4:	1a24      	subs	r4, r4, r0
 80013f6:	fbb4 f0f9 	udiv	r0, r4, r9
 80013fa:	fb09 4410 	mls	r4, r9, r0, r4
 80013fe:	fb00 fe0e 	mul.w	lr, r0, lr
 8001402:	b2ad      	uxth	r5, r5
 8001404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001408:	45a6      	cmp	lr, r4
 800140a:	d908      	bls.n	800141e <__udivmoddi4+0x1e2>
 800140c:	eb1c 0404 	adds.w	r4, ip, r4
 8001410:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001414:	d26c      	bcs.n	80014f0 <__udivmoddi4+0x2b4>
 8001416:	45a6      	cmp	lr, r4
 8001418:	d96a      	bls.n	80014f0 <__udivmoddi4+0x2b4>
 800141a:	3802      	subs	r0, #2
 800141c:	4464      	add	r4, ip
 800141e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001422:	fba0 9502 	umull	r9, r5, r0, r2
 8001426:	eba4 040e 	sub.w	r4, r4, lr
 800142a:	42ac      	cmp	r4, r5
 800142c:	46c8      	mov	r8, r9
 800142e:	46ae      	mov	lr, r5
 8001430:	d356      	bcc.n	80014e0 <__udivmoddi4+0x2a4>
 8001432:	d053      	beq.n	80014dc <__udivmoddi4+0x2a0>
 8001434:	2e00      	cmp	r6, #0
 8001436:	d069      	beq.n	800150c <__udivmoddi4+0x2d0>
 8001438:	ebb3 0208 	subs.w	r2, r3, r8
 800143c:	eb64 040e 	sbc.w	r4, r4, lr
 8001440:	fa22 f301 	lsr.w	r3, r2, r1
 8001444:	fa04 f707 	lsl.w	r7, r4, r7
 8001448:	431f      	orrs	r7, r3
 800144a:	40cc      	lsrs	r4, r1
 800144c:	e9c6 7400 	strd	r7, r4, [r6]
 8001450:	2100      	movs	r1, #0
 8001452:	e747      	b.n	80012e4 <__udivmoddi4+0xa8>
 8001454:	fa0c fc02 	lsl.w	ip, ip, r2
 8001458:	f1c2 0120 	rsb	r1, r2, #32
 800145c:	fa25 f301 	lsr.w	r3, r5, r1
 8001460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001464:	fa20 f101 	lsr.w	r1, r0, r1
 8001468:	4095      	lsls	r5, r2
 800146a:	430d      	orrs	r5, r1
 800146c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001470:	fb07 3311 	mls	r3, r7, r1, r3
 8001474:	fa1f fe8c 	uxth.w	lr, ip
 8001478:	0c28      	lsrs	r0, r5, #16
 800147a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800147e:	fb01 f30e 	mul.w	r3, r1, lr
 8001482:	4283      	cmp	r3, r0
 8001484:	fa04 f402 	lsl.w	r4, r4, r2
 8001488:	d908      	bls.n	800149c <__udivmoddi4+0x260>
 800148a:	eb1c 0000 	adds.w	r0, ip, r0
 800148e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8001492:	d22f      	bcs.n	80014f4 <__udivmoddi4+0x2b8>
 8001494:	4283      	cmp	r3, r0
 8001496:	d92d      	bls.n	80014f4 <__udivmoddi4+0x2b8>
 8001498:	3902      	subs	r1, #2
 800149a:	4460      	add	r0, ip
 800149c:	1ac0      	subs	r0, r0, r3
 800149e:	fbb0 f3f7 	udiv	r3, r0, r7
 80014a2:	fb07 0013 	mls	r0, r7, r3, r0
 80014a6:	b2ad      	uxth	r5, r5
 80014a8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80014ac:	fb03 f00e 	mul.w	r0, r3, lr
 80014b0:	42a8      	cmp	r0, r5
 80014b2:	d908      	bls.n	80014c6 <__udivmoddi4+0x28a>
 80014b4:	eb1c 0505 	adds.w	r5, ip, r5
 80014b8:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80014bc:	d216      	bcs.n	80014ec <__udivmoddi4+0x2b0>
 80014be:	42a8      	cmp	r0, r5
 80014c0:	d914      	bls.n	80014ec <__udivmoddi4+0x2b0>
 80014c2:	3b02      	subs	r3, #2
 80014c4:	4465      	add	r5, ip
 80014c6:	1a28      	subs	r0, r5, r0
 80014c8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80014cc:	e738      	b.n	8001340 <__udivmoddi4+0x104>
 80014ce:	4631      	mov	r1, r6
 80014d0:	4630      	mov	r0, r6
 80014d2:	e707      	b.n	80012e4 <__udivmoddi4+0xa8>
 80014d4:	462f      	mov	r7, r5
 80014d6:	e6e4      	b.n	80012a2 <__udivmoddi4+0x66>
 80014d8:	4618      	mov	r0, r3
 80014da:	e6f9      	b.n	80012d0 <__udivmoddi4+0x94>
 80014dc:	454b      	cmp	r3, r9
 80014de:	d2a9      	bcs.n	8001434 <__udivmoddi4+0x1f8>
 80014e0:	ebb9 0802 	subs.w	r8, r9, r2
 80014e4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80014e8:	3801      	subs	r0, #1
 80014ea:	e7a3      	b.n	8001434 <__udivmoddi4+0x1f8>
 80014ec:	4643      	mov	r3, r8
 80014ee:	e7ea      	b.n	80014c6 <__udivmoddi4+0x28a>
 80014f0:	4628      	mov	r0, r5
 80014f2:	e794      	b.n	800141e <__udivmoddi4+0x1e2>
 80014f4:	4641      	mov	r1, r8
 80014f6:	e7d1      	b.n	800149c <__udivmoddi4+0x260>
 80014f8:	46d0      	mov	r8, sl
 80014fa:	e77b      	b.n	80013f4 <__udivmoddi4+0x1b8>
 80014fc:	4464      	add	r4, ip
 80014fe:	3802      	subs	r0, #2
 8001500:	e747      	b.n	8001392 <__udivmoddi4+0x156>
 8001502:	3b02      	subs	r3, #2
 8001504:	4465      	add	r5, ip
 8001506:	e72f      	b.n	8001368 <__udivmoddi4+0x12c>
 8001508:	4608      	mov	r0, r1
 800150a:	e706      	b.n	800131a <__udivmoddi4+0xde>
 800150c:	4631      	mov	r1, r6
 800150e:	e6e9      	b.n	80012e4 <__udivmoddi4+0xa8>

08001510 <__aeabi_idiv0>:
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop

08001514 <WG_IDN>:
static errorWaveGenerator WG_INIT(char *bufOut, uint16_t *lenOut, void *cb_arg);
static void resetOwnVars(void);

/* Private user code ---------------------------------------------------------*/

static errorWaveGenerator WG_IDN(char *bufOut, uint16_t *lenOut) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af04      	add	r7, sp, #16
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
	 The response will show the following information:

	 <company name>, <model number>, <serial number>, <firmware revision> */

	/* Get unique ID*/
	uint32_t (*uID_1) = (uint32_t*) 0x1FFF7A10;
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <WG_IDN+0x48>)
 8001520:	617b      	str	r3, [r7, #20]
	uint32_t (*uID_2) = (uint32_t*) 0x1FFF7A14;
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <WG_IDN+0x4c>)
 8001524:	613b      	str	r3, [r7, #16]
	uint32_t (*uID_3) = (uint32_t*) 0x1FFF7A18;
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <WG_IDN+0x50>)
 8001528:	60fb      	str	r3, [r7, #12]

	*lenOut =
			sprintf(bufOut,
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	6819      	ldr	r1, [r3, #0]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2003      	movs	r0, #3
 8001538:	9002      	str	r0, [sp, #8]
 800153a:	2000      	movs	r0, #0
 800153c:	9001      	str	r0, [sp, #4]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	460b      	mov	r3, r1
 8001542:	4909      	ldr	r1, [pc, #36]	; (8001568 <WG_IDN+0x54>)
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f011 f90b 	bl	8012760 <siprintf>
 800154a:	4603      	mov	r3, r0
	*lenOut =
 800154c:	b29a      	uxth	r2, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	801a      	strh	r2, [r3, #0]
					"Company\t= NONE\nPN\t= STM32-F207ZG\nSN\t= %08X%08X%08X\nFW\t= %d.%d",
					(unsigned int) *uID_3, (unsigned int) *uID_2,
					(unsigned int) *uID_1, (int) FW_VERSION,
					(int) FW_SUBVERSION);

	return NO_ERROR;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	1fff7a10 	.word	0x1fff7a10
 8001560:	1fff7a14 	.word	0x1fff7a14
 8001564:	1fff7a18 	.word	0x1fff7a18
 8001568:	080162e0 	.word	0x080162e0

0800156c <WG_TST>:

static errorWaveGenerator WG_TST(char *bufOut, uint16_t *lenOut, void *cb_arg) {
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]

	uint16_t dataIn = 0, dataOut = 2000;
 8001578:	2300      	movs	r3, #0
 800157a:	83fb      	strh	r3, [r7, #30]
 800157c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001580:	83bb      	strh	r3, [r7, #28]
	ptrHWparams ptrHWp;
	memcpy(&ptrHWp, cb_arg, sizeof(ptrHWp));
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	2208      	movs	r2, #8
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4618      	mov	r0, r3
 800158c:	f010 fa48 	bl	8011a20 <memcpy>

	/* Set arbitrary voltage to test the loop-back*/
	HAL_DAC_SetValue(ptrHWp.ptrHdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dataOut);
 8001590:	6978      	ldr	r0, [r7, #20]
 8001592:	8bbb      	ldrh	r3, [r7, #28]
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	f001 fee4 	bl	8003364 <HAL_DAC_SetValue>
	HAL_DAC_Start(ptrHWp.ptrHdac, DAC_CHANNEL_1);
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f001 fe72 	bl	800328a <HAL_DAC_Start>

	/* Measure the loop-back */
	HAL_ADC_Start(ptrHWp.ptrHadc1);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 f9d5 	bl	8002958 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(ptrHWp.ptrHadc1, 1);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	2101      	movs	r1, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f001 fab2 	bl	8002b1c <HAL_ADC_PollForConversion>
	dataIn = HAL_ADC_GetValue(ptrHWp.ptrHadc1);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f001 fb32 	bl	8002c24 <HAL_ADC_GetValue>
 80015c0:	4603      	mov	r3, r0
 80015c2:	83fb      	strh	r3, [r7, #30]
	HAL_ADC_Stop(ptrHWp.ptrHadc1);
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f001 fa76 	bl	8002ab8 <HAL_ADC_Stop>

	/* Stops the stimulus */
	HAL_DAC_SetValue(ptrHWp.ptrHdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80015cc:	6978      	ldr	r0, [r7, #20]
 80015ce:	2300      	movs	r3, #0
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	f001 fec6 	bl	8003364 <HAL_DAC_SetValue>
	HAL_DAC_Start(ptrHWp.ptrHdac, DAC_CHANNEL_1);
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f001 fe54 	bl	800328a <HAL_DAC_Start>
	HAL_DAC_Stop(ptrHWp.ptrHdac, DAC_CHANNEL_1);
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 fea0 	bl	800332c <HAL_DAC_Stop>

	float error =
			dataOut > dataIn ?
					((float) (dataOut - dataIn) / (float) dataOut) * 100.0 :
 80015ec:	8bba      	ldrh	r2, [r7, #28]
 80015ee:	8bfb      	ldrh	r3, [r7, #30]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d916      	bls.n	8001622 <WG_TST+0xb6>
 80015f4:	8bba      	ldrh	r2, [r7, #28]
 80015f6:	8bfb      	ldrh	r3, [r7, #30]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fbb4 	bl	8000d68 <__aeabi_i2f>
 8001600:	4604      	mov	r4, r0
 8001602:	8bbb      	ldrh	r3, [r7, #28]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fbab 	bl	8000d60 <__aeabi_ui2f>
 800160a:	4603      	mov	r3, r0
 800160c:	4619      	mov	r1, r3
 800160e:	4620      	mov	r0, r4
 8001610:	f7ff fcb2 	bl	8000f78 <__aeabi_fdiv>
 8001614:	4603      	mov	r3, r0
 8001616:	4917      	ldr	r1, [pc, #92]	; (8001674 <WG_TST+0x108>)
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fbf9 	bl	8000e10 <__aeabi_fmul>
 800161e:	4603      	mov	r3, r0
 8001620:	e015      	b.n	800164e <WG_TST+0xe2>
					((float) (dataIn - dataOut) / (float) dataOut) * 100.0;
 8001622:	8bfa      	ldrh	r2, [r7, #30]
 8001624:	8bbb      	ldrh	r3, [r7, #28]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fb9d 	bl	8000d68 <__aeabi_i2f>
 800162e:	4604      	mov	r4, r0
 8001630:	8bbb      	ldrh	r3, [r7, #28]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fb94 	bl	8000d60 <__aeabi_ui2f>
 8001638:	4603      	mov	r3, r0
 800163a:	4619      	mov	r1, r3
 800163c:	4620      	mov	r0, r4
 800163e:	f7ff fc9b 	bl	8000f78 <__aeabi_fdiv>
 8001642:	4603      	mov	r3, r0
					((float) (dataOut - dataIn) / (float) dataOut) * 100.0 :
 8001644:	490b      	ldr	r1, [pc, #44]	; (8001674 <WG_TST+0x108>)
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fbe2 	bl	8000e10 <__aeabi_fmul>
 800164c:	4603      	mov	r3, r0
	float error =
 800164e:	61bb      	str	r3, [r7, #24]

	*lenOut = sprintf(bufOut, "DAC-ADC loopback has %.3f%% of error", error);
 8001650:	69b8      	ldr	r0, [r7, #24]
 8001652:	f7fe ff2f 	bl	80004b4 <__aeabi_f2d>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4907      	ldr	r1, [pc, #28]	; (8001678 <WG_TST+0x10c>)
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f011 f87f 	bl	8012760 <siprintf>
 8001662:	4603      	mov	r3, r0
 8001664:	b29a      	uxth	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	801a      	strh	r2, [r3, #0]

	return NO_ERROR;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3724      	adds	r7, #36	; 0x24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd90      	pop	{r4, r7, pc}
 8001674:	42c80000 	.word	0x42c80000
 8001678:	08016320 	.word	0x08016320

0800167c <WG_ABOR>:

static errorWaveGenerator WG_ABOR(char *bufOut, uint16_t *lenOut, void *cb_arg) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]

	setTestStart(false);
 8001688:	2000      	movs	r0, #0
 800168a:	f000 fcfb 	bl	8002084 <setTestStart>

	ptrHWparams ptrHWp;
	memcpy(&ptrHWp, cb_arg, sizeof(ptrHWp));
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	2208      	movs	r2, #8
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4618      	mov	r0, r3
 8001698:	f010 f9c2 	bl	8011a20 <memcpy>

	/* Stops the stimulus and the measurements */
	HAL_DAC_SetValue(ptrHWp.ptrHdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 800169c:	6978      	ldr	r0, [r7, #20]
 800169e:	2300      	movs	r3, #0
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	f001 fe5e 	bl	8003364 <HAL_DAC_SetValue>
	HAL_DAC_Start(ptrHWp.ptrHdac, DAC_CHANNEL_1);
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 fdec 	bl	800328a <HAL_DAC_Start>
	HAL_DAC_Stop(ptrHWp.ptrHdac, DAC_CHANNEL_1);
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f001 fe38 	bl	800332c <HAL_DAC_Stop>
	HAL_ADC_Stop(ptrHWp.ptrHadc1);
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4618      	mov	r0, r3
 80016c0:	f001 f9fa 	bl	8002ab8 <HAL_ADC_Stop>

	*lenOut =
			flagEndTest ?
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <WG_ABOR+0x7c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
	*lenOut =
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <WG_ABOR+0x5e>
					sprintf(bufOut, "Test end") :
 80016cc:	490b      	ldr	r1, [pc, #44]	; (80016fc <WG_ABOR+0x80>)
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f011 f846 	bl	8012760 <siprintf>
 80016d4:	4603      	mov	r3, r0
	*lenOut =
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	e005      	b.n	80016e6 <WG_ABOR+0x6a>
					sprintf(bufOut, "Test terminated manually");
 80016da:	4909      	ldr	r1, [pc, #36]	; (8001700 <WG_ABOR+0x84>)
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f011 f83f 	bl	8012760 <siprintf>
 80016e2:	4603      	mov	r3, r0
	*lenOut =
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	8013      	strh	r3, [r2, #0]

	resetOwnVars();
 80016ea:	f000 f8ff 	bl	80018ec <resetOwnVars>

	return NO_ERROR;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000236 	.word	0x20000236
 80016fc:	08016348 	.word	0x08016348
 8001700:	08016354 	.word	0x08016354

08001704 <WG_INIT>:

static errorWaveGenerator WG_INIT(char *bufOut, uint16_t *lenOut, void *cb_arg) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]

	resetOwnVars();
 8001710:	f000 f8ec 	bl	80018ec <resetOwnVars>

	ptrHWparams ptrHWp;
	memcpy(&ptrHWp, cb_arg, sizeof(ptrHWp));
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2208      	movs	r2, #8
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4618      	mov	r0, r3
 800171e:	f010 f97f 	bl	8011a20 <memcpy>
	HAL_ADC_Start(ptrHWp.ptrHadc1);
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4618      	mov	r0, r3
 8001726:	f001 f917 	bl	8002958 <HAL_ADC_Start>

	*lenOut = sprintf(bufOut, "Test initialized");
 800172a:	4908      	ldr	r1, [pc, #32]	; (800174c <WG_INIT+0x48>)
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f011 f817 	bl	8012760 <siprintf>
 8001732:	4603      	mov	r3, r0
 8001734:	b29a      	uxth	r2, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	801a      	strh	r2, [r3, #0]

	setTestStart(true);
 800173a:	2001      	movs	r0, #1
 800173c:	f000 fca2 	bl	8002084 <setTestStart>

	return NO_ERROR;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	08016370 	.word	0x08016370

08001750 <WG_UPD>:

static errorWaveGenerator WG_UPD(char *bufOut, uint16_t *lenOut) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]

	*lenOut =
			flagEndTest ?
 800175a:	4b29      	ldr	r3, [pc, #164]	; (8001800 <WG_UPD+0xb0>)
 800175c:	781b      	ldrb	r3, [r3, #0]
	*lenOut =
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <WG_UPD+0x26>
					sprintf(bufOut, "END %lu ", actualFreq) :
 8001762:	4b28      	ldr	r3, [pc, #160]	; (8001804 <WG_UPD+0xb4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	4927      	ldr	r1, [pc, #156]	; (8001808 <WG_UPD+0xb8>)
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f010 fff8 	bl	8012760 <siprintf>
 8001770:	4603      	mov	r3, r0
	*lenOut =
 8001772:	b29b      	uxth	r3, r3
 8001774:	e008      	b.n	8001788 <WG_UPD+0x38>
					sprintf(bufOut, "RUN %lu ", actualFreq);
 8001776:	4b23      	ldr	r3, [pc, #140]	; (8001804 <WG_UPD+0xb4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	4923      	ldr	r1, [pc, #140]	; (800180c <WG_UPD+0xbc>)
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f010 ffee 	bl	8012760 <siprintf>
 8001784:	4603      	mov	r3, r0
	*lenOut =
 8001786:	b29b      	uxth	r3, r3
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	8013      	strh	r3, [r2, #0]

	uint8_t auxLen = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	737b      	strb	r3, [r7, #13]

	for (uint16_t findex = 0; findex < sizeof(buffSamples); findex++) {
 8001790:	2300      	movs	r3, #0
 8001792:	81fb      	strh	r3, [r7, #14]
 8001794:	e02a      	b.n	80017ec <WG_UPD+0x9c>
		auxLen = sprintf(bufOut, "%.3f ",
				buffSamples[findex] > 0.0 ? buffSamples[findex] : 0.0);
 8001796:	89fb      	ldrh	r3, [r7, #14]
 8001798:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <WG_UPD+0xc0>)
 800179a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		auxLen = sprintf(bufOut, "%.3f ",
 800179e:	f04f 0100 	mov.w	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fcf0 	bl	8001188 <__aeabi_fcmpgt>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d009      	beq.n	80017c2 <WG_UPD+0x72>
				buffSamples[findex] > 0.0 ? buffSamples[findex] : 0.0);
 80017ae:	89fb      	ldrh	r3, [r7, #14]
 80017b0:	4a17      	ldr	r2, [pc, #92]	; (8001810 <WG_UPD+0xc0>)
 80017b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		auxLen = sprintf(bufOut, "%.3f ",
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fe7c 	bl	80004b4 <__aeabi_f2d>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	e003      	b.n	80017ca <WG_UPD+0x7a>
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	4912      	ldr	r1, [pc, #72]	; (8001814 <WG_UPD+0xc4>)
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f010 ffc7 	bl	8012760 <siprintf>
 80017d2:	4603      	mov	r3, r0
 80017d4:	737b      	strb	r3, [r7, #13]
		*lenOut += auxLen;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	881a      	ldrh	r2, [r3, #0]
 80017da:	7b7b      	ldrb	r3, [r7, #13]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	4413      	add	r3, r2
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	801a      	strh	r2, [r3, #0]
	for (uint16_t findex = 0; findex < sizeof(buffSamples); findex++) {
 80017e6:	89fb      	ldrh	r3, [r7, #14]
 80017e8:	3301      	adds	r3, #1
 80017ea:	81fb      	strh	r3, [r7, #14]
 80017ec:	89fb      	ldrh	r3, [r7, #14]
 80017ee:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 80017f2:	d3d0      	bcc.n	8001796 <WG_UPD+0x46>
	}

	return NO_ERROR;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000236 	.word	0x20000236
 8001804:	2000022c 	.word	0x2000022c
 8001808:	08016384 	.word	0x08016384
 800180c:	08016390 	.word	0x08016390
 8001810:	2000024c 	.word	0x2000024c
 8001814:	0801639c 	.word	0x0801639c

08001818 <WG_Process_Data>:

void WG_Process_Data(char *bufIn, uint16_t lenIn, char *bufOut,
		uint16_t *lenOut, void *cb_arg) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	460b      	mov	r3, r1
 8001826:	817b      	strh	r3, [r7, #10]

	/* Provides the basic device information */
	if (strcmp(bufIn + 4, "*IDN?") == 0) {
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	3304      	adds	r3, #4
 800182c:	4929      	ldr	r1, [pc, #164]	; (80018d4 <WG_Process_Data+0xbc>)
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fcca 	bl	80001c8 <strcmp>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d104      	bne.n	8001844 <WG_Process_Data+0x2c>
		WG_IDN(bufOut, lenOut);
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fe69 	bl	8001514 <WG_IDN>
	/* Default case */
	else {
		*lenOut = sprintf(bufOut, "No valid command has sent");
	}

}
 8001842:	e042      	b.n	80018ca <WG_Process_Data+0xb2>
	else if (strcmp(bufIn + 4, "*TST?") == 0) {
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3304      	adds	r3, #4
 8001848:	4923      	ldr	r1, [pc, #140]	; (80018d8 <WG_Process_Data+0xc0>)
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fcbc 	bl	80001c8 <strcmp>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d105      	bne.n	8001862 <WG_Process_Data+0x4a>
		WG_TST(bufOut, lenOut, cb_arg);
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	6839      	ldr	r1, [r7, #0]
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fe86 	bl	800156c <WG_TST>
}
 8001860:	e033      	b.n	80018ca <WG_Process_Data+0xb2>
	else if (strcmp(bufIn + 4, "ABOR") == 0) {
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3304      	adds	r3, #4
 8001866:	491d      	ldr	r1, [pc, #116]	; (80018dc <WG_Process_Data+0xc4>)
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fcad 	bl	80001c8 <strcmp>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d105      	bne.n	8001880 <WG_Process_Data+0x68>
		WG_ABOR(bufOut, lenOut, cb_arg);
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	6839      	ldr	r1, [r7, #0]
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff feff 	bl	800167c <WG_ABOR>
}
 800187e:	e024      	b.n	80018ca <WG_Process_Data+0xb2>
	else if (strcmp(bufIn + 4, "INIT") == 0) {
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3304      	adds	r3, #4
 8001884:	4916      	ldr	r1, [pc, #88]	; (80018e0 <WG_Process_Data+0xc8>)
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fc9e 	bl	80001c8 <strcmp>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d105      	bne.n	800189e <WG_Process_Data+0x86>
		WG_INIT(bufOut, lenOut, cb_arg);
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	6839      	ldr	r1, [r7, #0]
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ff34 	bl	8001704 <WG_INIT>
}
 800189c:	e015      	b.n	80018ca <WG_Process_Data+0xb2>
	else if (strcmp(bufIn + 4, "UPD") == 0) {
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3304      	adds	r3, #4
 80018a2:	4910      	ldr	r1, [pc, #64]	; (80018e4 <WG_Process_Data+0xcc>)
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fc8f 	bl	80001c8 <strcmp>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d104      	bne.n	80018ba <WG_Process_Data+0xa2>
		WG_UPD(bufOut, lenOut);
 80018b0:	6839      	ldr	r1, [r7, #0]
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ff4c 	bl	8001750 <WG_UPD>
}
 80018b8:	e007      	b.n	80018ca <WG_Process_Data+0xb2>
		*lenOut = sprintf(bufOut, "No valid command has sent");
 80018ba:	490b      	ldr	r1, [pc, #44]	; (80018e8 <WG_Process_Data+0xd0>)
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f010 ff4f 	bl	8012760 <siprintf>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	801a      	strh	r2, [r3, #0]
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	080163a4 	.word	0x080163a4
 80018d8:	080163ac 	.word	0x080163ac
 80018dc:	080163b4 	.word	0x080163b4
 80018e0:	080163bc 	.word	0x080163bc
 80018e4:	080163c4 	.word	0x080163c4
 80018e8:	080163c8 	.word	0x080163c8

080018ec <resetOwnVars>:

static void resetOwnVars(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	actualFreq = 30;
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <resetOwnVars+0x68>)
 80018f2:	221e      	movs	r2, #30
 80018f4:	601a      	str	r2, [r3, #0]
	actualAmp = 3.0;
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <resetOwnVars+0x6c>)
 80018f8:	4a18      	ldr	r2, [pc, #96]	; (800195c <resetOwnVars+0x70>)
 80018fa:	601a      	str	r2, [r3, #0]
	flagFrecRetries = false;
 80018fc:	4b18      	ldr	r3, [pc, #96]	; (8001960 <resetOwnVars+0x74>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
	cntFrecRetries = 0;
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <resetOwnVars+0x78>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
	flagEndTest = false;
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <resetOwnVars+0x7c>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
	ADCprescaler = 1000000 / (actualFreq * SAMPLES_PERIOD);
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <resetOwnVars+0x68>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	461a      	mov	r2, r3
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <resetOwnVars+0x80>)
 800191e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001922:	b29a      	uxth	r2, r3
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <resetOwnVars+0x84>)
 8001926:	801a      	strh	r2, [r3, #0]
	ADCcount = 0;
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <resetOwnVars+0x88>)
 800192a:	2200      	movs	r2, #0
 800192c:	801a      	strh	r2, [r3, #0]
	mIdx.safeMem = 0;
 800192e:	4912      	ldr	r1, [pc, #72]	; (8001978 <resetOwnVars+0x8c>)
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e9c1 2300 	strd	r2, r3, [r1]
	sIdx = 0;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <resetOwnVars+0x90>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
	memset(buffSamples, 0, sizeof(buffSamples));
 8001942:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8001946:	2100      	movs	r1, #0
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <resetOwnVars+0x94>)
 800194a:	f010 f877 	bl	8011a3c <memset>
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2000022c 	.word	0x2000022c
 8001958:	20000230 	.word	0x20000230
 800195c:	40400000 	.word	0x40400000
 8001960:	20000234 	.word	0x20000234
 8001964:	20000235 	.word	0x20000235
 8001968:	20000236 	.word	0x20000236
 800196c:	000f4240 	.word	0x000f4240
 8001970:	20000238 	.word	0x20000238
 8001974:	2000023a 	.word	0x2000023a
 8001978:	20000240 	.word	0x20000240
 800197c:	20000248 	.word	0x20000248
 8001980:	2000024c 	.word	0x2000024c
 8001984:	00000000 	.word	0x00000000

08001988 <WG_Update_Test_Step>:

void WG_Update_Test_Step(void) {
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

	/* if it's needed to repeat the frequency for the feedback */
	if (flagFrecRetries) {
 800198c:	4b4e      	ldr	r3, [pc, #312]	; (8001ac8 <WG_Update_Test_Step+0x140>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <WG_Update_Test_Step+0x18>
		cntFrecRetries++;
 8001994:	4b4d      	ldr	r3, [pc, #308]	; (8001acc <WG_Update_Test_Step+0x144>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b4b      	ldr	r3, [pc, #300]	; (8001acc <WG_Update_Test_Step+0x144>)
 800199e:	701a      	strb	r2, [r3, #0]
	}

	/* Normal step advance or 10 seconds of retries in the same frequency */
	if ((!flagFrecRetries) || (cntFrecRetries > 9)) {
 80019a0:	4b49      	ldr	r3, [pc, #292]	; (8001ac8 <WG_Update_Test_Step+0x140>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	f083 0301 	eor.w	r3, r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d104      	bne.n	80019b8 <WG_Update_Test_Step+0x30>
 80019ae:	4b47      	ldr	r3, [pc, #284]	; (8001acc <WG_Update_Test_Step+0x144>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b09      	cmp	r3, #9
 80019b4:	f240 8081 	bls.w	8001aba <WG_Update_Test_Step+0x132>

		/* if the previous frequency is just 10KHz the test was end */
		if (actualFreq == 100000) {
 80019b8:	4b45      	ldr	r3, [pc, #276]	; (8001ad0 <WG_Update_Test_Step+0x148>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a45      	ldr	r2, [pc, #276]	; (8001ad4 <WG_Update_Test_Step+0x14c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d106      	bne.n	80019d0 <WG_Update_Test_Step+0x48>

			/* Notify the end of the test*/
			flagEndTest = true;
 80019c2:	4b45      	ldr	r3, [pc, #276]	; (8001ad8 <WG_Update_Test_Step+0x150>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]

			/* Stops timers call-backs */
			setTestStart(false);
 80019c8:	2000      	movs	r0, #0
 80019ca:	f000 fb5b 	bl	8002084 <setTestStart>
			if (actualFreq > 100000)
				actualFreq = 100000;
		}

	}
}
 80019ce:	e074      	b.n	8001aba <WG_Update_Test_Step+0x132>
			cntFrecRetries = 0;
 80019d0:	4b3e      	ldr	r3, [pc, #248]	; (8001acc <WG_Update_Test_Step+0x144>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
			flagFrecRetries = false;
 80019d6:	4b3c      	ldr	r3, [pc, #240]	; (8001ac8 <WG_Update_Test_Step+0x140>)
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
			actualFreq = (actualFreq * 1.05);
 80019dc:	4b3c      	ldr	r3, [pc, #240]	; (8001ad0 <WG_Update_Test_Step+0x148>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fd45 	bl	8000470 <__aeabi_ui2d>
 80019e6:	a336      	add	r3, pc, #216	; (adr r3, 8001ac0 <WG_Update_Test_Step+0x138>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fdba 	bl	8000564 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff f88c 	bl	8000b14 <__aeabi_d2uiz>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4a34      	ldr	r2, [pc, #208]	; (8001ad0 <WG_Update_Test_Step+0x148>)
 8001a00:	6013      	str	r3, [r2, #0]
			ADCprescaler = 1000000 / (actualFreq * SAMPLES_PERIOD);
 8001a02:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <WG_Update_Test_Step+0x148>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b32      	ldr	r3, [pc, #200]	; (8001adc <WG_Update_Test_Step+0x154>)
 8001a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <WG_Update_Test_Step+0x158>)
 8001a1a:	801a      	strh	r2, [r3, #0]
			memset(buffSamples, 0, sizeof(buffSamples));
 8001a1c:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8001a20:	2100      	movs	r1, #0
 8001a22:	4830      	ldr	r0, [pc, #192]	; (8001ae4 <WG_Update_Test_Step+0x15c>)
 8001a24:	f010 f80a 	bl	8011a3c <memset>
			mIdx.safeMem = 0;
 8001a28:	492f      	ldr	r1, [pc, #188]	; (8001ae8 <WG_Update_Test_Step+0x160>)
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9c1 2300 	strd	r2, r3, [r1]
			sIdx = 0; /* The máx index achieved in 10 seconds is 10^7, the máx number of uint32 is ~4*10^9 */
 8001a36:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <WG_Update_Test_Step+0x164>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
			if (actualFreq < 50) {
 8001a3c:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <WG_Update_Test_Step+0x148>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b31      	cmp	r3, #49	; 0x31
 8001a42:	d803      	bhi.n	8001a4c <WG_Update_Test_Step+0xc4>
				actualAmp = 3.0;
 8001a44:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <WG_Update_Test_Step+0x168>)
 8001a46:	4a2b      	ldr	r2, [pc, #172]	; (8001af4 <WG_Update_Test_Step+0x16c>)
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e02e      	b.n	8001aaa <WG_Update_Test_Step+0x122>
				actualAmp = 3.0 / sqrt(1 + pow(actualFreq / 50.0, 2));
 8001a4c:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <WG_Update_Test_Step+0x148>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd0d 	bl	8000470 <__aeabi_ui2d>
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <WG_Update_Test_Step+0x170>)
 8001a5c:	f7fe feac 	bl	80007b8 <__aeabi_ddiv>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a70:	f00e f964 	bl	800fd3c <pow>
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	4b20      	ldr	r3, [pc, #128]	; (8001afc <WG_Update_Test_Step+0x174>)
 8001a7a:	f7fe fbbd 	bl	80001f8 <__adddf3>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f00e f9c1 	bl	800fe0c <sqrt>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	f04f 0000 	mov.w	r0, #0
 8001a92:	491b      	ldr	r1, [pc, #108]	; (8001b00 <WG_Update_Test_Step+0x178>)
 8001a94:	f7fe fe90 	bl	80007b8 <__aeabi_ddiv>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f7ff f858 	bl	8000b54 <__aeabi_d2f>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <WG_Update_Test_Step+0x168>)
 8001aa8:	6013      	str	r3, [r2, #0]
			if (actualFreq > 100000)
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <WG_Update_Test_Step+0x148>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <WG_Update_Test_Step+0x14c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d902      	bls.n	8001aba <WG_Update_Test_Step+0x132>
				actualFreq = 100000;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <WG_Update_Test_Step+0x148>)
 8001ab6:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <WG_Update_Test_Step+0x14c>)
 8001ab8:	601a      	str	r2, [r3, #0]
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	cccccccd 	.word	0xcccccccd
 8001ac4:	3ff0cccc 	.word	0x3ff0cccc
 8001ac8:	20000234 	.word	0x20000234
 8001acc:	20000235 	.word	0x20000235
 8001ad0:	2000022c 	.word	0x2000022c
 8001ad4:	000186a0 	.word	0x000186a0
 8001ad8:	20000236 	.word	0x20000236
 8001adc:	000f4240 	.word	0x000f4240
 8001ae0:	20000238 	.word	0x20000238
 8001ae4:	2000024c 	.word	0x2000024c
 8001ae8:	20000240 	.word	0x20000240
 8001aec:	20000248 	.word	0x20000248
 8001af0:	20000230 	.word	0x20000230
 8001af4:	40400000 	.word	0x40400000
 8001af8:	40490000 	.word	0x40490000
 8001afc:	3ff00000 	.word	0x3ff00000
 8001b00:	40080000 	.word	0x40080000

08001b04 <WG_Get_Frequency>:

uint32_t WG_Get_Frequency(void) {
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
	return actualFreq;
 8001b08:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <WG_Get_Frequency+0x10>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	2000022c 	.word	0x2000022c

08001b18 <WG_Get_Amplitude>:

float WG_Get_Amplitude(void) {
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
	return actualAmp;
 8001b1c:	4b02      	ldr	r3, [pc, #8]	; (8001b28 <WG_Get_Amplitude+0x10>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	20000230 	.word	0x20000230

08001b2c <WG_Get_ADC_Prescaler>:

uint16_t WG_Get_ADC_Prescaler(void) {
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
	return ADCprescaler;
 8001b30:	4b02      	ldr	r3, [pc, #8]	; (8001b3c <WG_Get_ADC_Prescaler+0x10>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	20000238 	.word	0x20000238

08001b40 <WG_Store_Sample>:

void WG_Store_Sample(float sample) {
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	buffSamples[mIdx.ii++] = sample;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <WG_Store_Sample+0x28>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	b2d1      	uxtb	r1, r2
 8001b50:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <WG_Store_Sample+0x28>)
 8001b52:	7011      	strb	r1, [r2, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <WG_Store_Sample+0x2c>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	20000240 	.word	0x20000240
 8001b6c:	2000024c 	.word	0x2000024c

08001b70 <WG_Get_Index_of_Sample>:

uint32_t WG_Get_Index_of_Sample(void) {
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
	return sIdx;
 8001b74:	4b02      	ldr	r3, [pc, #8]	; (8001b80 <WG_Get_Index_of_Sample+0x10>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	20000248 	.word	0x20000248

08001b84 <WG_Get_ADC_Sample_Count>:

uint32_t WG_Get_ADC_Sample_Count(void) {
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
	return ADCcount;
 8001b88:	4b02      	ldr	r3, [pc, #8]	; (8001b94 <WG_Get_ADC_Sample_Count+0x10>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	2000023a 	.word	0x2000023a

08001b98 <WG_Set_ADC_Sample_Count>:

void WG_Set_ADC_Sample_Count(uint32_t setADCcount) {
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	ADCcount = setADCcount;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <WG_Set_ADC_Sample_Count+0x1c>)
 8001ba6:	801a      	strh	r2, [r3, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	2000023a 	.word	0x2000023a

08001bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bbe:	f000 fe25 	bl	800280c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bc2:	f000 f821 	bl	8001c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bc6:	f000 f97d 	bl	8001ec4 <MX_GPIO_Init>
  MX_LWIP_Init();
 8001bca:	f004 f9ad 	bl	8005f28 <MX_LWIP_Init>
  MX_ADC1_Init();
 8001bce:	f000 f863 	bl	8001c98 <MX_ADC1_Init>
  MX_DAC_Init();
 8001bd2:	f000 f8b3 	bl	8001d3c <MX_DAC_Init>
  MX_TIM2_Init();
 8001bd6:	f000 f8db 	bl	8001d90 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bda:	f000 f927 	bl	8001e2c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	countSamples = 0;
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <main+0x44>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	801a      	strh	r2, [r3, #0]

	ptrHWparams ptrHWp;
	ptrHWp.ptrHadc1 = &hadc1;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <main+0x48>)
 8001be6:	603b      	str	r3, [r7, #0]
	ptrHWp.ptrHdac = &hdac;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <main+0x4c>)
 8001bea:	607b      	str	r3, [r7, #4]

	udpServer_init((void*) &ptrHWp);
 8001bec:	463b      	mov	r3, r7
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f004 f930 	bl	8005e54 <udpServer_init>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		MX_LWIP_Process();
 8001bf4:	f004 faca 	bl	800618c <MX_LWIP_Process>
 8001bf8:	e7fc      	b.n	8001bf4 <main+0x3c>
 8001bfa:	bf00      	nop
 8001bfc:	20000734 	.word	0x20000734
 8001c00:	20000648 	.word	0x20000648
 8001c04:	20000690 	.word	0x20000690

08001c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b092      	sub	sp, #72	; 0x48
 8001c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c0e:	f107 0318 	add.w	r3, r7, #24
 8001c12:	2230      	movs	r2, #48	; 0x30
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f00f ff10 	bl	8011a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
 8001c28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c32:	2310      	movs	r3, #16
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c36:	2302      	movs	r3, #2
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001c3e:	2310      	movs	r3, #16
 8001c40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001c42:	23f0      	movs	r3, #240	; 0xf0
 8001c44:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c46:	2302      	movs	r3, #2
 8001c48:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c4e:	f107 0318 	add.w	r3, r7, #24
 8001c52:	4618      	mov	r0, r3
 8001c54:	f002 ff3e 	bl	8004ad4 <HAL_RCC_OscConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001c5e:	f000 fb23 	bl	80022a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c62:	230f      	movs	r3, #15
 8001c64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c66:	2302      	movs	r3, #2
 8001c68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2103      	movs	r1, #3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 f976 	bl	8004f70 <HAL_RCC_ClockConfig>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001c8a:	f000 fb0d 	bl	80022a8 <Error_Handler>
  }
}
 8001c8e:	bf00      	nop
 8001c90:	3748      	adds	r7, #72	; 0x48
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001caa:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cac:	4a21      	ldr	r2, [pc, #132]	; (8001d34 <MX_ADC1_Init+0x9c>)
 8001cae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cd0:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cd6:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cd8:	4a17      	ldr	r2, [pc, #92]	; (8001d38 <MX_ADC1_Init+0xa0>)
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cf6:	480e      	ldr	r0, [pc, #56]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cf8:	f000 fdea 	bl	80028d0 <HAL_ADC_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001d02:	f000 fad1 	bl	80022a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d06:	2305      	movs	r3, #5
 8001d08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d12:	463b      	mov	r3, r7
 8001d14:	4619      	mov	r1, r3
 8001d16:	4806      	ldr	r0, [pc, #24]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001d18:	f000 ff90 	bl	8002c3c <HAL_ADC_ConfigChannel>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001d22:	f000 fac1 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000648 	.word	0x20000648
 8001d34:	40012000 	.word	0x40012000
 8001d38:	0f000001 	.word	0x0f000001

08001d3c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d42:	463b      	mov	r3, r7
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <MX_DAC_Init+0x4c>)
 8001d4c:	4a0f      	ldr	r2, [pc, #60]	; (8001d8c <MX_DAC_Init+0x50>)
 8001d4e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001d50:	480d      	ldr	r0, [pc, #52]	; (8001d88 <MX_DAC_Init+0x4c>)
 8001d52:	f001 fa78 	bl	8003246 <HAL_DAC_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001d5c:	f000 faa4 	bl	80022a8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d68:	463b      	mov	r3, r7
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4806      	ldr	r0, [pc, #24]	; (8001d88 <MX_DAC_Init+0x4c>)
 8001d70:	f001 fb1c 	bl	80033ac <HAL_DAC_ConfigChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001d7a:	f000 fa95 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000690 	.word	0x20000690
 8001d8c:	40007400 	.word	0x40007400

08001d90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da4:	463b      	mov	r3, r7
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001dae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001db2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10422;
 8001db4:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001db6:	f642 02b6 	movw	r2, #10422	; 0x28b6
 8001dba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11512;
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001dc4:	f642 42f8 	movw	r2, #11512	; 0x2cf8
 8001dc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dd6:	4814      	ldr	r0, [pc, #80]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001dd8:	f003 fb1e 	bl	8005418 <HAL_TIM_Base_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001de2:	f000 fa61 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	4619      	mov	r1, r3
 8001df2:	480d      	ldr	r0, [pc, #52]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001df4:	f003 fd04 	bl	8005800 <HAL_TIM_ConfigClockSource>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001dfe:	f000 fa53 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4806      	ldr	r0, [pc, #24]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001e10:	f003 ff12 	bl	8005c38 <HAL_TIMEx_MasterConfigSynchronization>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e1a:	f000 fa45 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200006a4 	.word	0x200006a4

08001e2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e32:	f107 0308 	add.w	r3, r7, #8
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e40:	463b      	mov	r3, r7
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e48:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <MX_TIM3_Init+0x90>)
 8001e4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <MX_TIM3_Init+0x94>)
 8001e4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <MX_TIM3_Init+0x90>)
 8001e50:	2205      	movs	r2, #5
 8001e52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <MX_TIM3_Init+0x90>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19;
 8001e5a:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <MX_TIM3_Init+0x90>)
 8001e5c:	2213      	movs	r2, #19
 8001e5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e60:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <MX_TIM3_Init+0x90>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <MX_TIM3_Init+0x90>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e6c:	4813      	ldr	r0, [pc, #76]	; (8001ebc <MX_TIM3_Init+0x90>)
 8001e6e:	f003 fad3 	bl	8005418 <HAL_TIM_Base_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001e78:	f000 fa16 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e82:	f107 0308 	add.w	r3, r7, #8
 8001e86:	4619      	mov	r1, r3
 8001e88:	480c      	ldr	r0, [pc, #48]	; (8001ebc <MX_TIM3_Init+0x90>)
 8001e8a:	f003 fcb9 	bl	8005800 <HAL_TIM_ConfigClockSource>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001e94:	f000 fa08 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_TIM3_Init+0x90>)
 8001ea6:	f003 fec7 	bl	8005c38 <HAL_TIMEx_MasterConfigSynchronization>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001eb0:	f000 f9fa 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	200006ec 	.word	0x200006ec
 8001ec0:	40000400 	.word	0x40000400

08001ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	; 0x30
 8001ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	4b63      	ldr	r3, [pc, #396]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a62      	ldr	r2, [pc, #392]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b60      	ldr	r3, [pc, #384]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	4b5c      	ldr	r3, [pc, #368]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a5b      	ldr	r2, [pc, #364]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b59      	ldr	r3, [pc, #356]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	4b55      	ldr	r3, [pc, #340]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a54      	ldr	r2, [pc, #336]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b52      	ldr	r3, [pc, #328]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b4e      	ldr	r3, [pc, #312]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a4d      	ldr	r2, [pc, #308]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b4b      	ldr	r3, [pc, #300]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a46      	ldr	r2, [pc, #280]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f54:	f043 0308 	orr.w	r3, r3, #8
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b44      	ldr	r3, [pc, #272]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	4b40      	ldr	r3, [pc, #256]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a3f      	ldr	r2, [pc, #252]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b3d      	ldr	r3, [pc, #244]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	f244 0181 	movw	r1, #16513	; 0x4081
 8001f88:	4839      	ldr	r0, [pc, #228]	; (8002070 <MX_GPIO_Init+0x1ac>)
 8001f8a:	f002 fd71 	bl	8004a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2140      	movs	r1, #64	; 0x40
 8001f92:	4838      	ldr	r0, [pc, #224]	; (8002074 <MX_GPIO_Init+0x1b0>)
 8001f94:	f002 fd6c 	bl	8004a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001f98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	4619      	mov	r1, r3
 8001fae:	4832      	ldr	r0, [pc, #200]	; (8002078 <MX_GPIO_Init+0x1b4>)
 8001fb0:	f002 fbc0 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001fb4:	f244 0381 	movw	r3, #16513	; 0x4081
 8001fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4828      	ldr	r0, [pc, #160]	; (8002070 <MX_GPIO_Init+0x1ac>)
 8001fce:	f002 fbb1 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001fd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fe4:	2307      	movs	r3, #7
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4619      	mov	r1, r3
 8001fee:	4823      	ldr	r0, [pc, #140]	; (800207c <MX_GPIO_Init+0x1b8>)
 8001ff0:	f002 fba0 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ff4:	2340      	movs	r3, #64	; 0x40
 8001ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	2300      	movs	r3, #0
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	481a      	ldr	r0, [pc, #104]	; (8002074 <MX_GPIO_Init+0x1b0>)
 800200c:	f002 fb92 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800201c:	f107 031c 	add.w	r3, r7, #28
 8002020:	4619      	mov	r1, r3
 8002022:	4814      	ldr	r0, [pc, #80]	; (8002074 <MX_GPIO_Init+0x1b0>)
 8002024:	f002 fb86 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002028:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800202c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002036:	2303      	movs	r3, #3
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800203a:	230a      	movs	r3, #10
 800203c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	4619      	mov	r1, r3
 8002044:	480e      	ldr	r0, [pc, #56]	; (8002080 <MX_GPIO_Init+0x1bc>)
 8002046:	f002 fb75 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800204a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800204e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002058:	f107 031c 	add.w	r3, r7, #28
 800205c:	4619      	mov	r1, r3
 800205e:	4808      	ldr	r0, [pc, #32]	; (8002080 <MX_GPIO_Init+0x1bc>)
 8002060:	f002 fb68 	bl	8004734 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002064:	bf00      	nop
 8002066:	3730      	adds	r7, #48	; 0x30
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800
 8002070:	40020400 	.word	0x40020400
 8002074:	40021800 	.word	0x40021800
 8002078:	40020800 	.word	0x40020800
 800207c:	40020c00 	.word	0x40020c00
 8002080:	40020000 	.word	0x40020000

08002084 <setTestStart>:

/* USER CODE BEGIN 4 */

void setTestStart(bool start) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
	start ? HAL_TIM_Base_Start_IT(&htim2) : HAL_TIM_Base_Stop_IT(&htim2);
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <setTestStart+0x18>
 8002094:	480a      	ldr	r0, [pc, #40]	; (80020c0 <setTestStart+0x3c>)
 8002096:	f003 fa0f 	bl	80054b8 <HAL_TIM_Base_Start_IT>
 800209a:	e002      	b.n	80020a2 <setTestStart+0x1e>
 800209c:	4808      	ldr	r0, [pc, #32]	; (80020c0 <setTestStart+0x3c>)
 800209e:	f003 fa79 	bl	8005594 <HAL_TIM_Base_Stop_IT>
	start ? HAL_TIM_Base_Start_IT(&htim3) : HAL_TIM_Base_Stop_IT(&htim3);
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <setTestStart+0x2c>
 80020a8:	4806      	ldr	r0, [pc, #24]	; (80020c4 <setTestStart+0x40>)
 80020aa:	f003 fa05 	bl	80054b8 <HAL_TIM_Base_Start_IT>
}
 80020ae:	e002      	b.n	80020b6 <setTestStart+0x32>
	start ? HAL_TIM_Base_Start_IT(&htim3) : HAL_TIM_Base_Stop_IT(&htim3);
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <setTestStart+0x40>)
 80020b2:	f003 fa6f 	bl	8005594 <HAL_TIM_Base_Stop_IT>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200006a4 	.word	0x200006a4
 80020c4:	200006ec 	.word	0x200006ec

080020c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a6c      	ldr	r2, [pc, #432]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d102      	bne.n	80020e2 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
 80020dc:	f000 fbb8 	bl	8002850 <HAL_IncTick>

		}

	}
  /* USER CODE END Callback 1 */
}
 80020e0:	e0bc      	b.n	800225c <HAL_TIM_PeriodElapsedCallback+0x194>
	else if (htim->Instance == TIM2) {
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ea:	d107      	bne.n	80020fc <HAL_TIM_PeriodElapsedCallback+0x34>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80020ec:	2101      	movs	r1, #1
 80020ee:	4867      	ldr	r0, [pc, #412]	; (800228c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80020f0:	f002 fcd6 	bl	8004aa0 <HAL_GPIO_TogglePin>
		WG.UpdateTestStep();
 80020f4:	4b66      	ldr	r3, [pc, #408]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4798      	blx	r3
}
 80020fa:	e0af      	b.n	800225c <HAL_TIM_PeriodElapsedCallback+0x194>
	else if (htim->Instance == TIM3) {
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a64      	ldr	r2, [pc, #400]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002102:	4293      	cmp	r3, r2
 8002104:	f040 80aa 	bne.w	800225c <HAL_TIM_PeriodElapsedCallback+0x194>
								+ ((WG.getAmp() / 2.0)
 8002108:	4b61      	ldr	r3, [pc, #388]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4798      	blx	r3
 800210e:	4603      	mov	r3, r0
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe f9cf 	bl	80004b4 <__aeabi_f2d>
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800211e:	f7fe fb4b 	bl	80007b8 <__aeabi_ddiv>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4614      	mov	r4, r2
 8002128:	461d      	mov	r5, r3
														* ((float) WG.getFreq())
 800212a:	4b59      	ldr	r3, [pc, #356]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4798      	blx	r3
 8002130:	4603      	mov	r3, r0
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fe14 	bl	8000d60 <__aeabi_ui2f>
 8002138:	4603      	mov	r3, r0
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f9ba 	bl	80004b4 <__aeabi_f2d>
 8002140:	a349      	add	r3, pc, #292	; (adr r3, 8002268 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002146:	f7fe fa0d 	bl	8000564 <__aeabi_dmul>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4690      	mov	r8, r2
 8002150:	4699      	mov	r9, r3
														* ((float) WG.getIndexofSample())
 8002152:	4b4f      	ldr	r3, [pc, #316]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	4798      	blx	r3
 8002158:	4603      	mov	r3, r0
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fe00 	bl	8000d60 <__aeabi_ui2f>
 8002160:	4603      	mov	r3, r0
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe f9a6 	bl	80004b4 <__aeabi_f2d>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4640      	mov	r0, r8
 800216e:	4649      	mov	r1, r9
 8002170:	f7fe f9f8 	bl	8000564 <__aeabi_dmul>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
										* (cos(
 800217c:	a33c      	add	r3, pc, #240	; (adr r3, 8002270 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fe fb19 	bl	80007b8 <__aeabi_ddiv>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f00d fd8f 	bl	800fcb0 <cos>
														/ 1000000.0) + 1)))));
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	4b40      	ldr	r3, [pc, #256]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002198:	f7fe f82e 	bl	80001f8 <__adddf3>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
										* (cos(
 80021a0:	4620      	mov	r0, r4
 80021a2:	4629      	mov	r1, r5
 80021a4:	f7fe f9de 	bl	8000564 <__aeabi_dmul>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
								+ ((WG.getAmp() / 2.0)
 80021b0:	a331      	add	r3, pc, #196	; (adr r3, 8002278 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80021b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b6:	f7fe f81f 	bl	80001f8 <__adddf3>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
						* (OFFSET_UP
 80021c2:	a32f      	add	r3, pc, #188	; (adr r3, 8002280 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80021c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c8:	f7fe f9cc 	bl	8000564 <__aeabi_dmul>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	f7fe fc9e 	bl	8000b14 <__aeabi_d2uiz>
 80021d8:	4603      	mov	r3, r0
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	482f      	ldr	r0, [pc, #188]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80021e0:	f001 f8c0 	bl	8003364 <HAL_DAC_SetValue>
		HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80021e4:	2100      	movs	r1, #0
 80021e6:	482d      	ldr	r0, [pc, #180]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80021e8:	f001 f84f 	bl	800328a <HAL_DAC_Start>
		uint32_t sampleCount = WG.getADCSampleCount();
 80021ec:	4b28      	ldr	r3, [pc, #160]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	4798      	blx	r3
 80021f2:	60f8      	str	r0, [r7, #12]
		if(sampleCount >= WG.getADCPres() ){
 80021f4:	4b26      	ldr	r3, [pc, #152]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	4798      	blx	r3
 80021fa:	4603      	mov	r3, r0
 80021fc:	461a      	mov	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4293      	cmp	r3, r2
 8002202:	d324      	bcc.n	800224e <HAL_TIM_PeriodElapsedCallback+0x186>
			WG.storeSample((HAL_ADC_GetValue(&hadc1)/DAC_CTE_CONV)-OFFSET_UP);
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002206:	695c      	ldr	r4, [r3, #20]
 8002208:	4825      	ldr	r0, [pc, #148]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800220a:	f000 fd0b 	bl	8002c24 <HAL_ADC_GetValue>
 800220e:	4603      	mov	r3, r0
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe fda5 	bl	8000d60 <__aeabi_ui2f>
 8002216:	4603      	mov	r3, r0
 8002218:	4922      	ldr	r1, [pc, #136]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe feac 	bl	8000f78 <__aeabi_fdiv>
 8002220:	4603      	mov	r3, r0
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe f946 	bl	80004b4 <__aeabi_f2d>
 8002228:	a313      	add	r3, pc, #76	; (adr r3, 8002278 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800222a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222e:	f7fd ffe1 	bl	80001f4 <__aeabi_dsub>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	f7fe fc8b 	bl	8000b54 <__aeabi_d2f>
 800223e:	4603      	mov	r3, r0
 8002240:	4618      	mov	r0, r3
 8002242:	47a0      	blx	r4
			WG.setADCSampleCount(0);
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	2000      	movs	r0, #0
 800224a:	4798      	blx	r3
}
 800224c:	e006      	b.n	800225c <HAL_TIM_PeriodElapsedCallback+0x194>
			sampleCount++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3301      	adds	r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
			WG.setADCSampleCount(sampleCount);
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	4798      	blx	r3
}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002266:	bf00      	nop
 8002268:	54442d18 	.word	0x54442d18
 800226c:	401921fb 	.word	0x401921fb
 8002270:	00000000 	.word	0x00000000
 8002274:	412e8480 	.word	0x412e8480
 8002278:	9999999a 	.word	0x9999999a
 800227c:	3fb99999 	.word	0x3fb99999
 8002280:	e0000000 	.word	0xe0000000
 8002284:	409363a2 	.word	0x409363a2
 8002288:	40010000 	.word	0x40010000
 800228c:	40020400 	.word	0x40020400
 8002290:	20000000 	.word	0x20000000
 8002294:	40000400 	.word	0x40000400
 8002298:	3ff00000 	.word	0x3ff00000
 800229c:	20000690 	.word	0x20000690
 80022a0:	20000648 	.word	0x20000648
 80022a4:	449b1d17 	.word	0x449b1d17

080022a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ac:	b672      	cpsid	i
}
 80022ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022b0:	e7fe      	b.n	80022b0 <Error_Handler+0x8>
	...

080022b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <HAL_MspInit+0x48>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <HAL_MspInit+0x48>)
 80022c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <HAL_MspInit+0x48>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	603b      	str	r3, [r7, #0]
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_MspInit+0x48>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a07      	ldr	r2, [pc, #28]	; (80022fc <HAL_MspInit+0x48>)
 80022e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_MspInit+0x48>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	40023800 	.word	0x40023800

08002300 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a17      	ldr	r2, [pc, #92]	; (800237c <HAL_ADC_MspInit+0x7c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d127      	bne.n	8002372 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <HAL_ADC_MspInit+0x80>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a15      	ldr	r2, [pc, #84]	; (8002380 <HAL_ADC_MspInit+0x80>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b13      	ldr	r3, [pc, #76]	; (8002380 <HAL_ADC_MspInit+0x80>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <HAL_ADC_MspInit+0x80>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <HAL_ADC_MspInit+0x80>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_ADC_MspInit+0x80>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800235a:	2320      	movs	r3, #32
 800235c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800235e:	2303      	movs	r3, #3
 8002360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	4805      	ldr	r0, [pc, #20]	; (8002384 <HAL_ADC_MspInit+0x84>)
 800236e:	f002 f9e1 	bl	8004734 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002372:	bf00      	nop
 8002374:	3728      	adds	r7, #40	; 0x28
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40012000 	.word	0x40012000
 8002380:	40023800 	.word	0x40023800
 8002384:	40020000 	.word	0x40020000

08002388 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a17      	ldr	r2, [pc, #92]	; (8002404 <HAL_DAC_MspInit+0x7c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d127      	bne.n	80023fa <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	4b16      	ldr	r3, [pc, #88]	; (8002408 <HAL_DAC_MspInit+0x80>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a15      	ldr	r2, [pc, #84]	; (8002408 <HAL_DAC_MspInit+0x80>)
 80023b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_DAC_MspInit+0x80>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <HAL_DAC_MspInit+0x80>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <HAL_DAC_MspInit+0x80>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <HAL_DAC_MspInit+0x80>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023e2:	2310      	movs	r3, #16
 80023e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023e6:	2303      	movs	r3, #3
 80023e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4619      	mov	r1, r3
 80023f4:	4805      	ldr	r0, [pc, #20]	; (800240c <HAL_DAC_MspInit+0x84>)
 80023f6:	f002 f99d 	bl	8004734 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80023fa:	bf00      	nop
 80023fc:	3728      	adds	r7, #40	; 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40007400 	.word	0x40007400
 8002408:	40023800 	.word	0x40023800
 800240c:	40020000 	.word	0x40020000

08002410 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002420:	d116      	bne.n	8002450 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_TIM_Base_MspInit+0x80>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	4a19      	ldr	r2, [pc, #100]	; (8002490 <HAL_TIM_Base_MspInit+0x80>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6413      	str	r3, [r2, #64]	; 0x40
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <HAL_TIM_Base_MspInit+0x80>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2101      	movs	r1, #1
 8002442:	201c      	movs	r0, #28
 8002444:	f000 fed5 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002448:	201c      	movs	r0, #28
 800244a:	f000 feee 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800244e:	e01a      	b.n	8002486 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0f      	ldr	r2, [pc, #60]	; (8002494 <HAL_TIM_Base_MspInit+0x84>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d115      	bne.n	8002486 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_TIM_Base_MspInit+0x80>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <HAL_TIM_Base_MspInit+0x80>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	6413      	str	r3, [r2, #64]	; 0x40
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_TIM_Base_MspInit+0x80>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8002476:	2200      	movs	r2, #0
 8002478:	2102      	movs	r1, #2
 800247a:	201d      	movs	r0, #29
 800247c:	f000 feb9 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002480:	201d      	movs	r0, #29
 8002482:	f000 fed2 	bl	800322a <HAL_NVIC_EnableIRQ>
}
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800
 8002494:	40000400 	.word	0x40000400

08002498 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08c      	sub	sp, #48	; 0x30
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80024a8:	2300      	movs	r3, #0
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	4b2f      	ldr	r3, [pc, #188]	; (800256c <HAL_InitTick+0xd4>)
 80024ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b0:	4a2e      	ldr	r2, [pc, #184]	; (800256c <HAL_InitTick+0xd4>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6453      	str	r3, [r2, #68]	; 0x44
 80024b8:	4b2c      	ldr	r3, [pc, #176]	; (800256c <HAL_InitTick+0xd4>)
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024c4:	f107 020c 	add.w	r2, r7, #12
 80024c8:	f107 0310 	add.w	r3, r7, #16
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 ff72 	bl	80053b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80024d4:	f002 ff4e 	bl	8005374 <HAL_RCC_GetPCLK2Freq>
 80024d8:	4603      	mov	r3, r0
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e0:	4a23      	ldr	r2, [pc, #140]	; (8002570 <HAL_InitTick+0xd8>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	0c9b      	lsrs	r3, r3, #18
 80024e8:	3b01      	subs	r3, #1
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80024ec:	4b21      	ldr	r3, [pc, #132]	; (8002574 <HAL_InitTick+0xdc>)
 80024ee:	4a22      	ldr	r2, [pc, #136]	; (8002578 <HAL_InitTick+0xe0>)
 80024f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80024f2:	4b20      	ldr	r3, [pc, #128]	; (8002574 <HAL_InitTick+0xdc>)
 80024f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80024fa:	4a1e      	ldr	r2, [pc, #120]	; (8002574 <HAL_InitTick+0xdc>)
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002500:	4b1c      	ldr	r3, [pc, #112]	; (8002574 <HAL_InitTick+0xdc>)
 8002502:	2200      	movs	r2, #0
 8002504:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002506:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_InitTick+0xdc>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <HAL_InitTick+0xdc>)
 800250e:	2200      	movs	r2, #0
 8002510:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002512:	4818      	ldr	r0, [pc, #96]	; (8002574 <HAL_InitTick+0xdc>)
 8002514:	f002 ff80 	bl	8005418 <HAL_TIM_Base_Init>
 8002518:	4603      	mov	r3, r0
 800251a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800251e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002522:	2b00      	cmp	r3, #0
 8002524:	d11b      	bne.n	800255e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002526:	4813      	ldr	r0, [pc, #76]	; (8002574 <HAL_InitTick+0xdc>)
 8002528:	f002 ffc6 	bl	80054b8 <HAL_TIM_Base_Start_IT>
 800252c:	4603      	mov	r3, r0
 800252e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002532:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002536:	2b00      	cmp	r3, #0
 8002538:	d111      	bne.n	800255e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800253a:	2019      	movs	r0, #25
 800253c:	f000 fe75 	bl	800322a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b0f      	cmp	r3, #15
 8002544:	d808      	bhi.n	8002558 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002546:	2200      	movs	r2, #0
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	2019      	movs	r0, #25
 800254c:	f000 fe51 	bl	80031f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002550:	4a0a      	ldr	r2, [pc, #40]	; (800257c <HAL_InitTick+0xe4>)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e002      	b.n	800255e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800255e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002562:	4618      	mov	r0, r3
 8002564:	3730      	adds	r7, #48	; 0x30
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800
 8002570:	431bde83 	.word	0x431bde83
 8002574:	20000738 	.word	0x20000738
 8002578:	40010000 	.word	0x40010000
 800257c:	20000028 	.word	0x20000028

08002580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002584:	e7fe      	b.n	8002584 <NMI_Handler+0x4>

08002586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800258a:	e7fe      	b.n	800258a <HardFault_Handler+0x4>

0800258c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002590:	e7fe      	b.n	8002590 <MemManage_Handler+0x4>

08002592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002596:	e7fe      	b.n	8002596 <BusFault_Handler+0x4>

08002598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800259c:	e7fe      	b.n	800259c <UsageFault_Handler+0x4>

0800259e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
	...

080025d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80025d6:	f003 f80b 	bl	80055f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000738 	.word	0x20000738

080025e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <TIM2_IRQHandler+0x10>)
 80025ea:	f003 f801 	bl	80055f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200006a4 	.word	0x200006a4

080025f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <TIM3_IRQHandler+0x10>)
 80025fe:	f002 fff7 	bl	80055f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	200006ec 	.word	0x200006ec

0800260c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <ETH_IRQHandler+0x10>)
 8002612:	f001 fae2 	bl	8003bda <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20003874 	.word	0x20003874

08002620 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return 1;
 8002624:	2301      	movs	r3, #1
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
	...

08002630 <_kill>:

int _kill(int pid, int sig)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <_kill+0x20>)
 800263c:	2216      	movs	r2, #22
 800263e:	601a      	str	r2, [r3, #0]
  return -1;
 8002640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	200070b8 	.word	0x200070b8

08002654 <_exit>:

void _exit (int status)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800265c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ffe5 	bl	8002630 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002666:	e7fe      	b.n	8002666 <_exit+0x12>

08002668 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	e00a      	b.n	8002690 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800267a:	f3af 8000 	nop.w
 800267e:	4601      	mov	r1, r0
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	60ba      	str	r2, [r7, #8]
 8002686:	b2ca      	uxtb	r2, r1
 8002688:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	3301      	adds	r3, #1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	429a      	cmp	r2, r3
 8002696:	dbf0      	blt.n	800267a <_read+0x12>
  }

  return len;
 8002698:	687b      	ldr	r3, [r7, #4]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e009      	b.n	80026c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	60ba      	str	r2, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3301      	adds	r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	dbf1      	blt.n	80026b4 <_write+0x12>
  }
  return len;
 80026d0:	687b      	ldr	r3, [r7, #4]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <_close>:

int _close(int file)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002700:	605a      	str	r2, [r3, #4]
  return 0;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <_isatty>:

int _isatty(int file)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002716:	2301      	movs	r3, #1
}
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002722:	b480      	push	{r7}
 8002724:	b085      	sub	sp, #20
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
	...

0800273c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002744:	4a14      	ldr	r2, [pc, #80]	; (8002798 <_sbrk+0x5c>)
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <_sbrk+0x60>)
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002750:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <_sbrk+0x64>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <_sbrk+0x64>)
 800275a:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <_sbrk+0x68>)
 800275c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <_sbrk+0x64>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	429a      	cmp	r2, r3
 800276a:	d205      	bcs.n	8002778 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <_sbrk+0x6c>)
 800276e:	220c      	movs	r2, #12
 8002770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002776:	e009      	b.n	800278c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <_sbrk+0x64>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <_sbrk+0x64>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	4a06      	ldr	r2, [pc, #24]	; (80027a0 <_sbrk+0x64>)
 8002788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800278a:	68fb      	ldr	r3, [r7, #12]
}
 800278c:	4618      	mov	r0, r3
 800278e:	371c      	adds	r7, #28
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20020000 	.word	0x20020000
 800279c:	00000400 	.word	0x00000400
 80027a0:	20000780 	.word	0x20000780
 80027a4:	200070c8 	.word	0x200070c8
 80027a8:	200070b8 	.word	0x200070b8

080027ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027bc:	480d      	ldr	r0, [pc, #52]	; (80027f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027be:	490e      	ldr	r1, [pc, #56]	; (80027f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027c0:	4a0e      	ldr	r2, [pc, #56]	; (80027fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c4:	e002      	b.n	80027cc <LoopCopyDataInit>

080027c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ca:	3304      	adds	r3, #4

080027cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d0:	d3f9      	bcc.n	80027c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d2:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027d4:	4c0b      	ldr	r4, [pc, #44]	; (8002804 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d8:	e001      	b.n	80027de <LoopFillZerobss>

080027da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027dc:	3204      	adds	r2, #4

080027de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e0:	d3fb      	bcc.n	80027da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027e2:	f7ff ffe3 	bl	80027ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027e6:	f00f f8e7 	bl	80119b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ea:	f7ff f9e5 	bl	8001bb8 <main>
  bx  lr
 80027ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80027fc:	08018884 	.word	0x08018884
  ldr r2, =_sbss
 8002800:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002804:	200070c8 	.word	0x200070c8

08002808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002808:	e7fe      	b.n	8002808 <ADC_IRQHandler>
	...

0800280c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <HAL_Init+0x40>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0d      	ldr	r2, [pc, #52]	; (800284c <HAL_Init+0x40>)
 8002816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800281a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_Init+0x40>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0a      	ldr	r2, [pc, #40]	; (800284c <HAL_Init+0x40>)
 8002822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002826:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <HAL_Init+0x40>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a07      	ldr	r2, [pc, #28]	; (800284c <HAL_Init+0x40>)
 800282e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002834:	2003      	movs	r0, #3
 8002836:	f000 fcd1 	bl	80031dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800283a:	200f      	movs	r0, #15
 800283c:	f7ff fe2c 	bl	8002498 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002840:	f7ff fd38 	bl	80022b4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023c00 	.word	0x40023c00

08002850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_IncTick+0x1c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_IncTick+0x20>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4413      	add	r3, r2
 8002860:	4a03      	ldr	r2, [pc, #12]	; (8002870 <HAL_IncTick+0x20>)
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	2000002c 	.word	0x2000002c
 8002870:	20000784 	.word	0x20000784

08002874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return uwTick;
 8002878:	4b02      	ldr	r3, [pc, #8]	; (8002884 <HAL_GetTick+0x10>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	20000784 	.word	0x20000784

08002888 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002890:	f7ff fff0 	bl	8002874 <HAL_GetTick>
 8002894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028a0:	d005      	beq.n	80028ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_Delay+0x44>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ae:	bf00      	nop
 80028b0:	f7ff ffe0 	bl	8002874 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d8f7      	bhi.n	80028b0 <HAL_Delay+0x28>
  {
  }
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	2000002c 	.word	0x2000002c

080028d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e033      	b.n	800294e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d109      	bne.n	8002902 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff fd06 	bl	8002300 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b00      	cmp	r3, #0
 800290c:	d118      	bne.n	8002940 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002916:	f023 0302 	bic.w	r3, r3, #2
 800291a:	f043 0202 	orr.w	r2, r3, #2
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 faaa 	bl	8002e7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f023 0303 	bic.w	r3, r3, #3
 8002936:	f043 0201 	orr.w	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	641a      	str	r2, [r3, #64]	; 0x40
 800293e:	e001      	b.n	8002944 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800294c:	7bfb      	ldrb	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_ADC_Start+0x1a>
 800296e:	2302      	movs	r3, #2
 8002970:	e095      	b.n	8002a9e <HAL_ADC_Start+0x146>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b01      	cmp	r3, #1
 8002986:	d018      	beq.n	80029ba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002998:	4b43      	ldr	r3, [pc, #268]	; (8002aa8 <HAL_ADC_Start+0x150>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a43      	ldr	r2, [pc, #268]	; (8002aac <HAL_ADC_Start+0x154>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0c9a      	lsrs	r2, r3, #18
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 80029ac:	e002      	b.n	80029b4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f9      	bne.n	80029ae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d15d      	bne.n	8002a84 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a06:	d106      	bne.n	8002a16 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0c:	f023 0206 	bic.w	r2, r3, #6
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	645a      	str	r2, [r3, #68]	; 0x44
 8002a14:	e002      	b.n	8002a1c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a2c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_ADC_Start+0x158>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10f      	bne.n	8002a5a <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d129      	bne.n	8002a9c <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	e020      	b.n	8002a9c <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <HAL_ADC_Start+0x15c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d11b      	bne.n	8002a9c <HAL_ADC_Start+0x144>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d114      	bne.n	8002a9c <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	e00b      	b.n	8002a9c <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f043 0210 	orr.w	r2, r3, #16
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	f043 0201 	orr.w	r2, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	20000024 	.word	0x20000024
 8002aac:	431bde83 	.word	0x431bde83
 8002ab0:	40012300 	.word	0x40012300
 8002ab4:	40012000 	.word	0x40012000

08002ab8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_ADC_Stop+0x16>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e021      	b.n	8002b12 <HAL_ADC_Stop+0x5a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0201 	bic.w	r2, r2, #1
 8002ae4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d109      	bne.n	8002b08 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	f043 0201 	orr.w	r2, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b38:	d113      	bne.n	8002b62 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b48:	d10b      	bne.n	8002b62 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f043 0220 	orr.w	r2, r3, #32
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e05c      	b.n	8002c1c <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002b62:	f7ff fe87 	bl	8002874 <HAL_GetTick>
 8002b66:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b68:	e01a      	b.n	8002ba0 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b70:	d016      	beq.n	8002ba0 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d007      	beq.n	8002b88 <HAL_ADC_PollForConversion+0x6c>
 8002b78:	f7ff fe7c 	bl	8002874 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d20b      	bcs.n	8002ba0 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f043 0204 	orr.w	r2, r3, #4
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e03d      	b.n	8002c1c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d1dd      	bne.n	8002b6a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f06f 0212 	mvn.w	r2, #18
 8002bb6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F2, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d123      	bne.n	8002c1a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d11f      	bne.n	8002c1a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d006      	beq.n	8002bf6 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d111      	bne.n	8002c1a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d105      	bne.n	8002c1a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1c>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e103      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x224>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b09      	cmp	r3, #9
 8002c66:	d925      	bls.n	8002cb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68d9      	ldr	r1, [r3, #12]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3b1e      	subs	r3, #30
 8002c7e:	2207      	movs	r2, #7
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43da      	mvns	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	400a      	ands	r2, r1
 8002c8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68d9      	ldr	r1, [r3, #12]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	4403      	add	r3, r0
 8002ca6:	3b1e      	subs	r3, #30
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	e022      	b.n	8002cfa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6919      	ldr	r1, [r3, #16]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	4413      	add	r3, r2
 8002cc8:	2207      	movs	r2, #7
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	400a      	ands	r2, r1
 8002cd6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6919      	ldr	r1, [r3, #16]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4618      	mov	r0, r3
 8002cea:	4603      	mov	r3, r0
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4403      	add	r3, r0
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b06      	cmp	r3, #6
 8002d00:	d824      	bhi.n	8002d4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	3b05      	subs	r3, #5
 8002d14:	221f      	movs	r2, #31
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	400a      	ands	r2, r1
 8002d22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	4618      	mov	r0, r3
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3b05      	subs	r3, #5
 8002d3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	635a      	str	r2, [r3, #52]	; 0x34
 8002d4a:	e04c      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b0c      	cmp	r3, #12
 8002d52:	d824      	bhi.n	8002d9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	3b23      	subs	r3, #35	; 0x23
 8002d66:	221f      	movs	r2, #31
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43da      	mvns	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	400a      	ands	r2, r1
 8002d74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	4618      	mov	r0, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3b23      	subs	r3, #35	; 0x23
 8002d90:	fa00 f203 	lsl.w	r2, r0, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d9c:	e023      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	3b41      	subs	r3, #65	; 0x41
 8002db0:	221f      	movs	r2, #31
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43da      	mvns	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	4618      	mov	r0, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3b41      	subs	r3, #65	; 0x41
 8002dda:	fa00 f203 	lsl.w	r2, r0, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a20      	ldr	r2, [pc, #128]	; (8002e6c <HAL_ADC_ConfigChannel+0x230>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d109      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x1c8>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b12      	cmp	r3, #18
 8002df6:	d105      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002df8:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <HAL_ADC_ConfigChannel+0x234>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <HAL_ADC_ConfigChannel+0x234>)
 8002dfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e02:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <HAL_ADC_ConfigChannel+0x230>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d123      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x21a>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b10      	cmp	r3, #16
 8002e14:	d003      	beq.n	8002e1e <HAL_ADC_ConfigChannel+0x1e2>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b11      	cmp	r3, #17
 8002e1c:	d11b      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002e1e:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <HAL_ADC_ConfigChannel+0x234>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4a13      	ldr	r2, [pc, #76]	; (8002e70 <HAL_ADC_ConfigChannel+0x234>)
 8002e24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e28:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b10      	cmp	r3, #16
 8002e30:	d111      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e32:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <HAL_ADC_ConfigChannel+0x238>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a10      	ldr	r2, [pc, #64]	; (8002e78 <HAL_ADC_ConfigChannel+0x23c>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	0c9a      	lsrs	r2, r3, #18
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002e48:	e002      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f9      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40012000 	.word	0x40012000
 8002e70:	40012300 	.word	0x40012300
 8002e74:	20000024 	.word	0x20000024
 8002e78:	431bde83 	.word	0x431bde83

08002e7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002e84:	4b7e      	ldr	r3, [pc, #504]	; (8003080 <ADC_Init+0x204>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4a7d      	ldr	r2, [pc, #500]	; (8003080 <ADC_Init+0x204>)
 8002e8a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e8e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002e90:	4b7b      	ldr	r3, [pc, #492]	; (8003080 <ADC_Init+0x204>)
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4979      	ldr	r1, [pc, #484]	; (8003080 <ADC_Init+0x204>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6859      	ldr	r1, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	021a      	lsls	r2, r3, #8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ed0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ef2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6899      	ldr	r1, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0a:	4a5e      	ldr	r2, [pc, #376]	; (8003084 <ADC_Init+0x208>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d022      	beq.n	8002f56 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6899      	ldr	r1, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6899      	ldr	r1, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	e00f      	b.n	8002f76 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0202 	bic.w	r2, r2, #2
 8002f84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6899      	ldr	r1, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7e1b      	ldrb	r3, [r3, #24]
 8002f90:	005a      	lsls	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d027      	beq.n	8002ff4 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002fc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002fce:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	fa92 f2a2 	rbit	r2, r2
 8002fd6:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	fab2 f282 	clz	r2, r2
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	fa03 f102 	lsl.w	r1, r3, r2
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	e007      	b.n	8003004 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003002:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003012:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	3b01      	subs	r3, #1
 8003020:	051a      	lsls	r2, r3, #20
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003038:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6899      	ldr	r1, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003046:	025a      	lsls	r2, r3, #9
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800305e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6899      	ldr	r1, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	029a      	lsls	r2, r3, #10
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	609a      	str	r2, [r3, #8]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40012300 	.word	0x40012300
 8003084:	0f000001 	.word	0x0f000001

08003088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a4:	4013      	ands	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ba:	4a04      	ldr	r2, [pc, #16]	; (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	60d3      	str	r3, [r2, #12]
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <__NVIC_GetPriorityGrouping+0x18>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	f003 0307 	and.w	r3, r3, #7
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	db0b      	blt.n	8003116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	f003 021f 	and.w	r2, r3, #31
 8003104:	4906      	ldr	r1, [pc, #24]	; (8003120 <__NVIC_EnableIRQ+0x34>)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	2001      	movs	r0, #1
 800310e:	fa00 f202 	lsl.w	r2, r0, r2
 8003112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr
 8003120:	e000e100 	.word	0xe000e100

08003124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	6039      	str	r1, [r7, #0]
 800312e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003134:	2b00      	cmp	r3, #0
 8003136:	db0a      	blt.n	800314e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	490c      	ldr	r1, [pc, #48]	; (8003170 <__NVIC_SetPriority+0x4c>)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	0112      	lsls	r2, r2, #4
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	440b      	add	r3, r1
 8003148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800314c:	e00a      	b.n	8003164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4908      	ldr	r1, [pc, #32]	; (8003174 <__NVIC_SetPriority+0x50>)
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	3b04      	subs	r3, #4
 800315c:	0112      	lsls	r2, r2, #4
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	440b      	add	r3, r1
 8003162:	761a      	strb	r2, [r3, #24]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000e100 	.word	0xe000e100
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003178:	b480      	push	{r7}
 800317a:	b089      	sub	sp, #36	; 0x24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f1c3 0307 	rsb	r3, r3, #7
 8003192:	2b04      	cmp	r3, #4
 8003194:	bf28      	it	cs
 8003196:	2304      	movcs	r3, #4
 8003198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3304      	adds	r3, #4
 800319e:	2b06      	cmp	r3, #6
 80031a0:	d902      	bls.n	80031a8 <NVIC_EncodePriority+0x30>
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3b03      	subs	r3, #3
 80031a6:	e000      	b.n	80031aa <NVIC_EncodePriority+0x32>
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43da      	mvns	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	401a      	ands	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	43d9      	mvns	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	4313      	orrs	r3, r2
         );
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3724      	adds	r7, #36	; 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff ff4f 	bl	8003088 <__NVIC_SetPriorityGrouping>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b086      	sub	sp, #24
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	4603      	mov	r3, r0
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003204:	f7ff ff64 	bl	80030d0 <__NVIC_GetPriorityGrouping>
 8003208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	6978      	ldr	r0, [r7, #20]
 8003210:	f7ff ffb2 	bl	8003178 <NVIC_EncodePriority>
 8003214:	4602      	mov	r2, r0
 8003216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff81 	bl	8003124 <__NVIC_SetPriority>
}
 8003222:	bf00      	nop
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff57 	bl	80030ec <__NVIC_EnableIRQ>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e014      	b.n	8003282 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	791b      	ldrb	r3, [r3, #4]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d105      	bne.n	800326e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff f88d 	bl	8002388 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2202      	movs	r2, #2
 8003272:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	795b      	ldrb	r3, [r3, #5]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_DAC_Start+0x16>
 800329c:	2302      	movs	r3, #2
 800329e:	e040      	b.n	8003322 <HAL_DAC_Start+0x98>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2202      	movs	r2, #2
 80032aa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6819      	ldr	r1, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2201      	movs	r2, #1
 80032ba:	409a      	lsls	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10f      	bne.n	80032ea <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80032d4:	2b3c      	cmp	r3, #60	; 0x3c
 80032d6:	d11d      	bne.n	8003314 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	e014      	b.n	8003314 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	213c      	movs	r1, #60	; 0x3c
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	429a      	cmp	r2, r3
 8003302:	d107      	bne.n	8003314 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0202 	orr.w	r2, r2, #2
 8003312:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6819      	ldr	r1, [r3, #0]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2201      	movs	r2, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43da      	mvns	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	400a      	ands	r2, r1
 8003350:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d105      	bne.n	800338e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4413      	add	r3, r2
 8003388:	3308      	adds	r3, #8
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	e004      	b.n	8003398 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4413      	add	r3, r2
 8003394:	3314      	adds	r3, #20
 8003396:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	461a      	mov	r2, r3
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	795b      	ldrb	r3, [r3, #5]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_DAC_ConfigChannel+0x18>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e03c      	b.n	800343e <HAL_DAC_ConfigChannel+0x92>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2202      	movs	r2, #2
 80033ce:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	f640 72fe 	movw	r2, #4094	; 0xffe
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4013      	ands	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6819      	ldr	r1, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	22c0      	movs	r2, #192	; 0xc0
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43da      	mvns	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	400a      	ands	r2, r1
 800342e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8003458:	4ba3      	ldr	r3, [pc, #652]	; (80036e8 <HAL_ETH_Init+0x2a0>)
 800345a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003460:	2300      	movs	r3, #0
 8003462:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e173      	b.n	8003756 <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f002 fe8e 	bl	80061a4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003488:	2300      	movs	r3, #0
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	4b97      	ldr	r3, [pc, #604]	; (80036ec <HAL_ETH_Init+0x2a4>)
 800348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003490:	4a96      	ldr	r2, [pc, #600]	; (80036ec <HAL_ETH_Init+0x2a4>)
 8003492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003496:	6453      	str	r3, [r2, #68]	; 0x44
 8003498:	4b94      	ldr	r3, [pc, #592]	; (80036ec <HAL_ETH_Init+0x2a4>)
 800349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80034a4:	4b92      	ldr	r3, [pc, #584]	; (80036f0 <HAL_ETH_Init+0x2a8>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	4a91      	ldr	r2, [pc, #580]	; (80036f0 <HAL_ETH_Init+0x2a8>)
 80034aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034ae:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80034b0:	4b8f      	ldr	r3, [pc, #572]	; (80036f0 <HAL_ETH_Init+0x2a8>)
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	498d      	ldr	r1, [pc, #564]	; (80036f0 <HAL_ETH_Init+0x2a8>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034d6:	f7ff f9cd 	bl	8002874 <HAL_GetTick>
 80034da:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80034dc:	e011      	b.n	8003502 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 80034de:	f7ff f9c9 	bl	8002874 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80034ec:	d909      	bls.n	8003502 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2203      	movs	r2, #3
 80034f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e129      	b.n	8003756 <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1e4      	bne.n	80034de <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f023 031c 	bic.w	r3, r3, #28
 8003522:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003524:	f001 ff1c 	bl	8005360 <HAL_RCC_GetHCLKFreq>
 8003528:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	4a71      	ldr	r2, [pc, #452]	; (80036f4 <HAL_ETH_Init+0x2ac>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d908      	bls.n	8003544 <HAL_ETH_Init+0xfc>
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	4a70      	ldr	r2, [pc, #448]	; (80036f8 <HAL_ETH_Init+0x2b0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d804      	bhi.n	8003544 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f043 0308 	orr.w	r3, r3, #8
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	e01a      	b.n	800357a <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	4a6c      	ldr	r2, [pc, #432]	; (80036f8 <HAL_ETH_Init+0x2b0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d908      	bls.n	800355e <HAL_ETH_Init+0x116>
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	4a66      	ldr	r2, [pc, #408]	; (80036e8 <HAL_ETH_Init+0x2a0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d204      	bcs.n	800355e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f043 030c 	orr.w	r3, r3, #12
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	e00d      	b.n	800357a <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	4a61      	ldr	r2, [pc, #388]	; (80036e8 <HAL_ETH_Init+0x2a0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d303      	bcc.n	800356e <HAL_ETH_Init+0x126>
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	4a64      	ldr	r2, [pc, #400]	; (80036fc <HAL_ETH_Init+0x2b4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d904      	bls.n	8003578 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	f043 0304 	orr.w	r3, r3, #4
 8003574:	61fb      	str	r3, [r7, #28]
 8003576:	e000      	b.n	800357a <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003578:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003582:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003586:	2100      	movs	r1, #0
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fc0d 	bl	8003da8 <HAL_ETH_WritePHYRegister>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00b      	beq.n	80035ac <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003598:	6939      	ldr	r1, [r7, #16]
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fdc2 	bl	8004124 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0d4      	b.n	8003756 <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80035ac:	20ff      	movs	r0, #255	; 0xff
 80035ae:	f7ff f96b 	bl	8002888 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80a2 	beq.w	8003700 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80035bc:	f7ff f95a 	bl	8002874 <HAL_GetTick>
 80035c0:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80035c2:	f107 030c 	add.w	r3, r7, #12
 80035c6:	461a      	mov	r2, r3
 80035c8:	2101      	movs	r1, #1
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fb84 	bl	8003cd8 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 80035d0:	f7ff f950 	bl	8002874 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	; 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d90f      	bls.n	8003602 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80035e6:	6939      	ldr	r1, [r7, #16]
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fd9b 	bl	8004124 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e0a9      	b.n	8003756 <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0da      	beq.n	80035c2 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800360c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003610:	2100      	movs	r1, #0
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fbc8 	bl	8003da8 <HAL_ETH_WritePHYRegister>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003622:	6939      	ldr	r1, [r7, #16]
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fd7d 	bl	8004124 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e08f      	b.n	8003756 <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8003636:	f7ff f91d 	bl	8002874 <HAL_GetTick>
 800363a:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800363c:	f107 030c 	add.w	r3, r7, #12
 8003640:	461a      	mov	r2, r3
 8003642:	2101      	movs	r1, #1
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fb47 	bl	8003cd8 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800364a:	f7ff f913 	bl	8002874 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f241 3288 	movw	r2, #5000	; 0x1388
 8003658:	4293      	cmp	r3, r2
 800365a:	d90f      	bls.n	800367c <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003660:	6939      	ldr	r1, [r7, #16]
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fd5e 	bl	8004124 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e06c      	b.n	8003756 <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0da      	beq.n	800363c <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003686:	f107 030c 	add.w	r3, r7, #12
 800368a:	461a      	mov	r2, r3
 800368c:	2110      	movs	r1, #16
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fb22 	bl	8003cd8 <HAL_ETH_ReadPHYRegister>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800369e:	6939      	ldr	r1, [r7, #16]
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fd3f 	bl	8004124 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e051      	b.n	8003756 <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d004      	beq.n	80036c6 <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036c2:	60da      	str	r2, [r3, #12]
 80036c4:	e002      	b.n	80036cc <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	609a      	str	r2, [r3, #8]
 80036dc:	e032      	b.n	8003744 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036e4:	609a      	str	r2, [r3, #8]
 80036e6:	e02d      	b.n	8003744 <HAL_ETH_Init+0x2fc>
 80036e8:	03938700 	.word	0x03938700
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40013800 	.word	0x40013800
 80036f4:	01312cff 	.word	0x01312cff
 80036f8:	02160ebf 	.word	0x02160ebf
 80036fc:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	08db      	lsrs	r3, r3, #3
 8003706:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003710:	4313      	orrs	r3, r2
 8003712:	b29b      	uxth	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	2100      	movs	r1, #0
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fb45 	bl	8003da8 <HAL_ETH_WritePHYRegister>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00b      	beq.n	800373c <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003728:	6939      	ldr	r1, [r7, #16]
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fcfa 	bl	8004124 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e00c      	b.n	8003756 <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800373c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003740:	f7ff f8a2 	bl	8002888 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003744:	6939      	ldr	r1, [r7, #16]
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fcec 	bl	8004124 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3720      	adds	r7, #32
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop

08003760 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_ETH_DMATxDescListInit+0x20>
 800377c:	2302      	movs	r3, #2
 800377e:	e051      	b.n	8003824 <HAL_ETH_DMATxDescListInit+0xc4>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	e030      	b.n	80037fe <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	015b      	lsls	r3, r3, #5
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	4413      	add	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037ac:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80037b4:	fb02 f303 	mul.w	r3, r2, r3
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	4413      	add	r3, r2
 80037bc:	461a      	mov	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d105      	bne.n	80037d6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	3b01      	subs	r3, #1
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d208      	bcs.n	80037f2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	3301      	adds	r3, #1
 80037e4:	015b      	lsls	r3, r3, #5
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	4413      	add	r3, r2
 80037ea:	461a      	mov	r2, r3
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	60da      	str	r2, [r3, #12]
 80037f0:	e002      	b.n	80037f8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3301      	adds	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d3ca      	bcc.n	800379c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003810:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr

0800382e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800382e:	b480      	push	{r7}
 8003830:	b087      	sub	sp, #28
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
 800383a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_ETH_DMARxDescListInit+0x20>
 800384a:	2302      	movs	r3, #2
 800384c:	e055      	b.n	80038fa <HAL_ETH_DMARxDescListInit+0xcc>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	e034      	b.n	80038d4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	015b      	lsls	r3, r3, #5
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	4413      	add	r3, r2
 8003872:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800387a:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003882:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	461a      	mov	r2, r3
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d105      	bne.n	80038ac <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d208      	bcs.n	80038c8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	3301      	adds	r3, #1
 80038ba:	015b      	lsls	r3, r3, #5
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	4413      	add	r3, r2
 80038c0:	461a      	mov	r2, r3
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	60da      	str	r2, [r3, #12]
 80038c6:	e002      	b.n	80038ce <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	3301      	adds	r3, #1
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d3c6      	bcc.n	800386a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038e6:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr

08003904 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	2300      	movs	r3, #0
 8003918:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_ETH_TransmitFrame+0x24>
 8003924:	2302      	movs	r3, #2
 8003926:	e0cc      	b.n	8003ac2 <HAL_ETH_TransmitFrame+0x1be>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e0b7      	b.n	8003ac2 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	da09      	bge.n	8003970 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2212      	movs	r2, #18
 8003960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0a8      	b.n	8003ac2 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003976:	4293      	cmp	r3, r2
 8003978:	d915      	bls.n	80039a6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	4a53      	ldr	r2, [pc, #332]	; (8003acc <HAL_ETH_TransmitFrame+0x1c8>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	0a9b      	lsrs	r3, r3, #10
 8003984:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	4b50      	ldr	r3, [pc, #320]	; (8003acc <HAL_ETH_TransmitFrame+0x1c8>)
 800398a:	fba3 1302 	umull	r1, r3, r3, r2
 800398e:	0a9b      	lsrs	r3, r3, #10
 8003990:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	3301      	adds	r3, #1
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	e001      	b.n	80039aa <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 80039a6:	2301      	movs	r3, #1
 80039a8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d11c      	bne.n	80039ea <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80039be:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80039ca:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80039da:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	461a      	mov	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80039e8:	e04b      	b.n	8003a82 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	e044      	b.n	8003a7a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039fe:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d107      	bne.n	8003a16 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a14:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003a1e:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d116      	bne.n	8003a58 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003a38:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	4a24      	ldr	r2, [pc, #144]	; (8003ad0 <HAL_ETH_TransmitFrame+0x1cc>)
 8003a3e:	fb03 f202 	mul.w	r2, r3, r2
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	4413      	add	r3, r2
 8003a46:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003a4a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003a56:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a66:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	3301      	adds	r3, #1
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d3b6      	bcc.n	80039f0 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00d      	beq.n	8003ab0 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aaa:	461a      	mov	r2, r3
 8003aac:	2300      	movs	r3, #0
 8003aae:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	ac02b00b 	.word	0xac02b00b
 8003ad0:	fffffa0c 	.word	0xfffffa0c

08003ad4 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_ETH_GetReceivedFrame+0x1a>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e070      	b.n	8003bd0 <HAL_ETH_GetReceivedFrame+0xfc>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2202      	movs	r2, #2
 8003afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	db5a      	blt.n	8003bbe <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d030      	beq.n	8003b78 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d103      	bne.n	8003b30 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	631a      	str	r2, [r3, #48]	; 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	0c1b      	lsrs	r3, r3, #16
 8003b40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003b44:	3b04      	subs	r3, #4
 8003b46:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	e02b      	b.n	8003bd0 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d010      	beq.n	8003ba8 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	629a      	str	r2, [r3, #40]	; 0x28
 8003ba6:	e00a      	b.n	8003bbe <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr

08003bda <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b40      	cmp	r3, #64	; 0x40
 8003bf2:	d112      	bne.n	8003c1a <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f85d 	bl	8003cb4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c02:	461a      	mov	r2, r3
 8003c04:	2340      	movs	r3, #64	; 0x40
 8003c06:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c18:	e01a      	b.n	8003c50 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d111      	bne.n	8003c50 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f838 	bl	8003ca2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c58:	461a      	mov	r2, r3
 8003c5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c5e:	6153      	str	r3, [r2, #20]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c72:	d112      	bne.n	8003c9a <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f826 	bl	8003cc6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c82:	461a      	mov	r2, r3
 8003c84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c88:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b82      	cmp	r3, #130	; 0x82
 8003cf8:	d101      	bne.n	8003cfe <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e050      	b.n	8003da0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2282      	movs	r2, #130	; 0x82
 8003d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f003 031c 	and.w	r3, r3, #28
 8003d14:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8a1b      	ldrh	r3, [r3, #16]
 8003d1a:	02db      	lsls	r3, r3, #11
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003d24:	897b      	ldrh	r3, [r7, #10]
 8003d26:	019b      	lsls	r3, r3, #6
 8003d28:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f023 0302 	bic.w	r3, r3, #2
 8003d38:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d4a:	f7fe fd93 	bl	8002874 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003d50:	e015      	b.n	8003d7e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003d52:	f7fe fd8f 	bl	8002874 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d60:	d309      	bcc.n	8003d76 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e014      	b.n	8003da0 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e4      	bne.n	8003d52 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	460b      	mov	r3, r1
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b42      	cmp	r3, #66	; 0x42
 8003dc8:	d101      	bne.n	8003dce <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e04e      	b.n	8003e6c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2242      	movs	r2, #66	; 0x42
 8003dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f003 031c 	and.w	r3, r3, #28
 8003de4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8a1b      	ldrh	r3, [r3, #16]
 8003dea:	02db      	lsls	r3, r3, #11
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003df4:	897b      	ldrh	r3, [r7, #10]
 8003df6:	019b      	lsls	r3, r3, #6
 8003df8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f043 0302 	orr.w	r3, r3, #2
 8003e08:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e24:	f7fe fd26 	bl	8002874 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003e2a:	e015      	b.n	8003e58 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003e2c:	f7fe fd22 	bl	8002874 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e3a:	d309      	bcc.n	8003e50 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e00d      	b.n	8003e6c <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e4      	bne.n	8003e2c <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_ETH_Start+0x16>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e01f      	b.n	8003eca <HAL_ETH_Start+0x56>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fb3e 	bl	800451c <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fb75 	bl	8004590 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fc00 	bl	80046ac <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 fba9 	bl	8004604 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fbd0 	bl	8004658 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_ETH_Stop+0x16>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e01f      	b.n	8003f28 <HAL_ETH_Stop+0x56>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 fb98 	bl	800462e <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fbbf 	bl	8004682 <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fb60 	bl	80045ca <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fbce 	bl	80046ac <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fb20 	bl	8004556 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_ETH_ConfigMAC+0x1c>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e0e4      	b.n	8004116 <HAL_ETH_ConfigMAC+0x1e6>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80b1 	beq.w	80040c6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4b6c      	ldr	r3, [pc, #432]	; (8004120 <HAL_ETH_ConfigMAC+0x1f0>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8003f7c:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8003f82:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8003f88:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8003f8e:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8003f94:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8003f9a:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8003fa0:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8003fa6:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8003fac:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8003fb2:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 8003fb8:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8003fbe:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fd6:	2001      	movs	r0, #1
 8003fd8:	f7fe fc56 	bl	8002888 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8003fec:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003ff2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003ff8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8003ffe:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8004004:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800400a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8004016:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8004018:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004022:	2001      	movs	r0, #1
 8004024:	f7fe fc30 	bl	8002888 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004038:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004042:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004052:	4013      	ands	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004060:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8004066:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800406c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8004072:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8004078:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004090:	2001      	movs	r0, #1
 8004092:	f7fe fbf9 	bl	8002888 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80040b6:	2001      	movs	r0, #1
 80040b8:	f7fe fbe6 	bl	8002888 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	61da      	str	r2, [r3, #28]
 80040c4:	e01e      	b.n	8004104 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80040d4:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80040f6:	2001      	movs	r0, #1
 80040f8:	f7fe fbc6 	bl	8002888 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	ff20810f 	.word	0xff20810f

08004124 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b0b0      	sub	sp, #192	; 0xc0
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d007      	beq.n	800414a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004140:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004148:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800414a:	2300      	movs	r3, #0
 800414c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800414e:	2300      	movs	r3, #0
 8004150:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004152:	2300      	movs	r3, #0
 8004154:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004156:	2300      	movs	r3, #0
 8004158:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800415a:	2300      	movs	r3, #0
 800415c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800415e:	2300      	movs	r3, #0
 8004160:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d103      	bne.n	8004172 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800416a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800416e:	663b      	str	r3, [r7, #96]	; 0x60
 8004170:	e001      	b.n	8004176 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004172:	2300      	movs	r3, #0
 8004174:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800417a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800417c:	2300      	movs	r3, #0
 800417e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004180:	2300      	movs	r3, #0
 8004182:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004184:	2300      	movs	r3, #0
 8004186:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004188:	2300      	movs	r3, #0
 800418a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800418c:	2300      	movs	r3, #0
 800418e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004190:	2340      	movs	r3, #64	; 0x40
 8004192:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004194:	2300      	movs	r3, #0
 8004196:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800419a:	2300      	movs	r3, #0
 800419c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80041a0:	2300      	movs	r3, #0
 80041a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80041a6:	2300      	movs	r3, #0
 80041a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80041ac:	2300      	movs	r3, #0
 80041ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80041ca:	2300      	movs	r3, #0
 80041cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80041d0:	2300      	movs	r3, #0
 80041d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80041d6:	2300      	movs	r3, #0
 80041d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80041dc:	2300      	movs	r3, #0
 80041de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80041e2:	2300      	movs	r3, #0
 80041e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80041f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041fc:	4baa      	ldr	r3, [pc, #680]	; (80044a8 <ETH_MACDMAConfig+0x384>)
 80041fe:	4013      	ands	r3, r2
 8004200:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8004204:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8004206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8004208:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 800420a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 800420c:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 800420e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8004210:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8004216:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8004218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 800421a:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 800421c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 800421e:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8004224:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8004226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8004228:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 800422a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 800422c:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 800422e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8004230:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8004232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8004234:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8004236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8004238:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 800423a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800424c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004258:	2001      	movs	r0, #1
 800425a:	f7fe fb15 	bl	8002888 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004266:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8004268:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800426a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800426c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800426e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004270:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8004272:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004276:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004278:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 800427c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800427e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004282:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004284:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004288:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800428c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004294:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8004296:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80042a2:	2001      	movs	r0, #1
 80042a4:	f7fe faf0 	bl	8002888 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042b0:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042ba:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80042c4:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80042d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042d4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80042d8:	4013      	ands	r3, r2
 80042da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80042de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042e2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80042e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80042e8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80042ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80042ee:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 80042f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80042f4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80042f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 80042fa:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 80042fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004300:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8004302:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004314:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004320:	2001      	movs	r0, #1
 8004322:	f7fe fab1 	bl	8002888 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800432e:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8004330:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 8004334:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800434a:	2001      	movs	r0, #1
 800434c:	f7fe fa9c 	bl	8002888 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004358:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800435a:	2300      	movs	r3, #0
 800435c:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800435e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004362:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004364:	2300      	movs	r3, #0
 8004366:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8004368:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800436c:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800436e:	2300      	movs	r3, #0
 8004370:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004376:	2300      	movs	r3, #0
 8004378:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800437a:	2300      	movs	r3, #0
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800437e:	2304      	movs	r3, #4
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800438c:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800438e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004392:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004398:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80043a2:	2300      	movs	r3, #0
 80043a4:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80043b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043b8:	4b3c      	ldr	r3, [pc, #240]	; (80044ac <ETH_MACDMAConfig+0x388>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80043c0:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 80043c2:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80043c4:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 80043c6:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 80043c8:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 80043ca:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 80043cc:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 80043ce:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 80043d0:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 80043d2:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 80043d4:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 80043d6:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 80043d8:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 80043dc:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 80043e0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80043e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f4:	461a      	mov	r2, r3
 80043f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043fa:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800440a:	2001      	movs	r0, #1
 800440c:	f7fe fa3c 	bl	8002888 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004418:	461a      	mov	r2, r3
 800441a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800441e:	6193      	str	r3, [r2, #24]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8004420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8004424:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 8004428:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 800442a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800442c:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 800442e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 8004430:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8004432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004434:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 8004436:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8004438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 800443a:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004444:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004448:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004458:	2001      	movs	r0, #1
 800445a:	f7fe fa15 	bl	8002888 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004466:	461a      	mov	r2, r3
 8004468:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800446c:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d10d      	bne.n	8004492 <ETH_MACDMAConfig+0x36e>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800448c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004490:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	461a      	mov	r2, r3
 8004498:	2100      	movs	r1, #0
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f808 	bl	80044b0 <ETH_MACAddressConfig>
}
 80044a0:	bf00      	nop
 80044a2:	37c0      	adds	r7, #192	; 0xc0
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	ff20810f 	.word	0xff20810f
 80044ac:	f8de3f23 	.word	0xf8de3f23

080044b0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3305      	adds	r3, #5
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	021b      	lsls	r3, r3, #8
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	3204      	adds	r2, #4
 80044c8:	7812      	ldrb	r2, [r2, #0]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	4b10      	ldr	r3, [pc, #64]	; (8004514 <ETH_MACAddressConfig+0x64>)
 80044d2:	4413      	add	r3, r2
 80044d4:	461a      	mov	r2, r3
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3303      	adds	r3, #3
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	061a      	lsls	r2, r3, #24
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3302      	adds	r3, #2
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	041b      	lsls	r3, r3, #16
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3301      	adds	r3, #1
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	4313      	orrs	r3, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	7812      	ldrb	r2, [r2, #0]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <ETH_MACAddressConfig+0x68>)
 8004502:	4413      	add	r3, r2
 8004504:	461a      	mov	r2, r3
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	6013      	str	r3, [r2, #0]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr
 8004514:	40028040 	.word	0x40028040
 8004518:	40028044 	.word	0x40028044

0800451c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0208 	orr.w	r2, r2, #8
 8004536:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004540:	2001      	movs	r0, #1
 8004542:	f000 f8d9 	bl	80046f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	601a      	str	r2, [r3, #0]
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0208 	bic.w	r2, r2, #8
 8004570:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800457a:	2001      	movs	r0, #1
 800457c:	f000 f8bc 	bl	80046f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	601a      	str	r2, [r3, #0]
}
 8004588:	bf00      	nop
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0204 	orr.w	r2, r2, #4
 80045aa:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80045b4:	2001      	movs	r0, #1
 80045b6:	f000 f89f 	bl	80046f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	601a      	str	r2, [r3, #0]
}
 80045c2:	bf00      	nop
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0204 	bic.w	r2, r2, #4
 80045e4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80045ee:	2001      	movs	r0, #1
 80045f0:	f000 f882 	bl	80046f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	601a      	str	r2, [r3, #0]
}
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800461e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004622:	6193      	str	r3, [r2, #24]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr

0800462e <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004648:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800464c:	6193      	str	r3, [r2, #24]
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr

08004658 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	f043 0302 	orr.w	r3, r3, #2
 8004672:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004676:	6193      	str	r3, [r2, #24]
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr

08004682 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6812      	ldr	r2, [r2, #0]
 8004698:	f023 0302 	bic.w	r3, r3, #2
 800469c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046a0:	6193      	str	r3, [r2, #24]
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr

080046ac <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6812      	ldr	r2, [r2, #0]
 80046c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046ce:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80046dc:	2001      	movs	r0, #1
 80046de:	f000 f80b 	bl	80046f8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046ec:	6193      	str	r3, [r2, #24]
}
 80046ee:	bf00      	nop
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004700:	4b0a      	ldr	r3, [pc, #40]	; (800472c <ETH_Delay+0x34>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a0a      	ldr	r2, [pc, #40]	; (8004730 <ETH_Delay+0x38>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	0a5b      	lsrs	r3, r3, #9
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	fb02 f303 	mul.w	r3, r2, r3
 8004712:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004714:	bf00      	nop
  }
  while (Delay --);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	1e5a      	subs	r2, r3, #1
 800471a:	60fa      	str	r2, [r7, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f9      	bne.n	8004714 <ETH_Delay+0x1c>
}
 8004720:	bf00      	nop
 8004722:	bf00      	nop
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr
 800472c:	20000024 	.word	0x20000024
 8004730:	10624dd3 	.word	0x10624dd3

08004734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004742:	e16f      	b.n	8004a24 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	2101      	movs	r1, #1
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	fa01 f303 	lsl.w	r3, r1, r3
 8004750:	4013      	ands	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 8161 	beq.w	8004a1e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	2b01      	cmp	r3, #1
 8004766:	d005      	beq.n	8004774 <HAL_GPIO_Init+0x40>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 0303 	and.w	r3, r3, #3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d130      	bne.n	80047d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	2203      	movs	r2, #3
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	43db      	mvns	r3, r3
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4013      	ands	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047aa:	2201      	movs	r2, #1
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43db      	mvns	r3, r3
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4013      	ands	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	f003 0201 	and.w	r2, r3, #1
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d017      	beq.n	8004812 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	2203      	movs	r2, #3
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	43db      	mvns	r3, r3
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4013      	ands	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d123      	bne.n	8004866 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	08da      	lsrs	r2, r3, #3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3208      	adds	r2, #8
 8004826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800482a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	220f      	movs	r2, #15
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4013      	ands	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	08da      	lsrs	r2, r3, #3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3208      	adds	r2, #8
 8004860:	6939      	ldr	r1, [r7, #16]
 8004862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	2203      	movs	r2, #3
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43db      	mvns	r3, r3
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4013      	ands	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f003 0203 	and.w	r2, r3, #3
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 80bb 	beq.w	8004a1e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048a8:	2300      	movs	r3, #0
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	4b64      	ldr	r3, [pc, #400]	; (8004a40 <HAL_GPIO_Init+0x30c>)
 80048ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b0:	4a63      	ldr	r2, [pc, #396]	; (8004a40 <HAL_GPIO_Init+0x30c>)
 80048b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048b6:	6453      	str	r3, [r2, #68]	; 0x44
 80048b8:	4b61      	ldr	r3, [pc, #388]	; (8004a40 <HAL_GPIO_Init+0x30c>)
 80048ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80048c4:	4a5f      	ldr	r2, [pc, #380]	; (8004a44 <HAL_GPIO_Init+0x310>)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	089b      	lsrs	r3, r3, #2
 80048ca:	3302      	adds	r3, #2
 80048cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	220f      	movs	r2, #15
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	43db      	mvns	r3, r3
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4013      	ands	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a57      	ldr	r2, [pc, #348]	; (8004a48 <HAL_GPIO_Init+0x314>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d031      	beq.n	8004954 <HAL_GPIO_Init+0x220>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a56      	ldr	r2, [pc, #344]	; (8004a4c <HAL_GPIO_Init+0x318>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d02b      	beq.n	8004950 <HAL_GPIO_Init+0x21c>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a55      	ldr	r2, [pc, #340]	; (8004a50 <HAL_GPIO_Init+0x31c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d025      	beq.n	800494c <HAL_GPIO_Init+0x218>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a54      	ldr	r2, [pc, #336]	; (8004a54 <HAL_GPIO_Init+0x320>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d01f      	beq.n	8004948 <HAL_GPIO_Init+0x214>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a53      	ldr	r2, [pc, #332]	; (8004a58 <HAL_GPIO_Init+0x324>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d019      	beq.n	8004944 <HAL_GPIO_Init+0x210>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a52      	ldr	r2, [pc, #328]	; (8004a5c <HAL_GPIO_Init+0x328>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d013      	beq.n	8004940 <HAL_GPIO_Init+0x20c>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a51      	ldr	r2, [pc, #324]	; (8004a60 <HAL_GPIO_Init+0x32c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00d      	beq.n	800493c <HAL_GPIO_Init+0x208>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a50      	ldr	r2, [pc, #320]	; (8004a64 <HAL_GPIO_Init+0x330>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d007      	beq.n	8004938 <HAL_GPIO_Init+0x204>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a4f      	ldr	r2, [pc, #316]	; (8004a68 <HAL_GPIO_Init+0x334>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d101      	bne.n	8004934 <HAL_GPIO_Init+0x200>
 8004930:	2308      	movs	r3, #8
 8004932:	e010      	b.n	8004956 <HAL_GPIO_Init+0x222>
 8004934:	2309      	movs	r3, #9
 8004936:	e00e      	b.n	8004956 <HAL_GPIO_Init+0x222>
 8004938:	2307      	movs	r3, #7
 800493a:	e00c      	b.n	8004956 <HAL_GPIO_Init+0x222>
 800493c:	2306      	movs	r3, #6
 800493e:	e00a      	b.n	8004956 <HAL_GPIO_Init+0x222>
 8004940:	2305      	movs	r3, #5
 8004942:	e008      	b.n	8004956 <HAL_GPIO_Init+0x222>
 8004944:	2304      	movs	r3, #4
 8004946:	e006      	b.n	8004956 <HAL_GPIO_Init+0x222>
 8004948:	2303      	movs	r3, #3
 800494a:	e004      	b.n	8004956 <HAL_GPIO_Init+0x222>
 800494c:	2302      	movs	r3, #2
 800494e:	e002      	b.n	8004956 <HAL_GPIO_Init+0x222>
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <HAL_GPIO_Init+0x222>
 8004954:	2300      	movs	r3, #0
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	f002 0203 	and.w	r2, r2, #3
 800495c:	0092      	lsls	r2, r2, #2
 800495e:	4093      	lsls	r3, r2
 8004960:	461a      	mov	r2, r3
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004968:	4936      	ldr	r1, [pc, #216]	; (8004a44 <HAL_GPIO_Init+0x310>)
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	089b      	lsrs	r3, r3, #2
 800496e:	3302      	adds	r3, #2
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004976:	4b3d      	ldr	r3, [pc, #244]	; (8004a6c <HAL_GPIO_Init+0x338>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	43db      	mvns	r3, r3
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4013      	ands	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800499a:	4a34      	ldr	r2, [pc, #208]	; (8004a6c <HAL_GPIO_Init+0x338>)
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80049a0:	4b32      	ldr	r3, [pc, #200]	; (8004a6c <HAL_GPIO_Init+0x338>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	43db      	mvns	r3, r3
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4013      	ands	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80049c4:	4a29      	ldr	r2, [pc, #164]	; (8004a6c <HAL_GPIO_Init+0x338>)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049ca:	4b28      	ldr	r3, [pc, #160]	; (8004a6c <HAL_GPIO_Init+0x338>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	43db      	mvns	r3, r3
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4013      	ands	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80049ee:	4a1f      	ldr	r2, [pc, #124]	; (8004a6c <HAL_GPIO_Init+0x338>)
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049f4:	4b1d      	ldr	r3, [pc, #116]	; (8004a6c <HAL_GPIO_Init+0x338>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	43db      	mvns	r3, r3
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	4013      	ands	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004a18:	4a14      	ldr	r2, [pc, #80]	; (8004a6c <HAL_GPIO_Init+0x338>)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	3301      	adds	r3, #1
 8004a22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f47f ae88 	bne.w	8004744 <HAL_GPIO_Init+0x10>
  }
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr
 8004a40:	40023800 	.word	0x40023800
 8004a44:	40013800 	.word	0x40013800
 8004a48:	40020000 	.word	0x40020000
 8004a4c:	40020400 	.word	0x40020400
 8004a50:	40020800 	.word	0x40020800
 8004a54:	40020c00 	.word	0x40020c00
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	40021400 	.word	0x40021400
 8004a60:	40021800 	.word	0x40021800
 8004a64:	40021c00 	.word	0x40021c00
 8004a68:	40022000 	.word	0x40022000
 8004a6c:	40013c00 	.word	0x40013c00

08004a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	807b      	strh	r3, [r7, #2]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a80:	787b      	ldrb	r3, [r7, #1]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a86:	887a      	ldrh	r2, [r7, #2]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a8c:	e003      	b.n	8004a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a8e:	887b      	ldrh	r3, [r7, #2]
 8004a90:	041a      	lsls	r2, r3, #16
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	619a      	str	r2, [r3, #24]
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ab2:	887a      	ldrh	r2, [r7, #2]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	041a      	lsls	r2, r3, #16
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	43d9      	mvns	r1, r3
 8004abe:	887b      	ldrh	r3, [r7, #2]
 8004ac0:	400b      	ands	r3, r1
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	619a      	str	r2, [r3, #24]
}
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr
	...

08004ad4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08a      	sub	sp, #40	; 0x28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e236      	b.n	8004f54 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d050      	beq.n	8004b94 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004af2:	4b9e      	ldr	r3, [pc, #632]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d00c      	beq.n	8004b18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004afe:	4b9b      	ldr	r3, [pc, #620]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d112      	bne.n	8004b30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b0a:	4b98      	ldr	r3, [pc, #608]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b16:	d10b      	bne.n	8004b30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b18:	4b94      	ldr	r3, [pc, #592]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d036      	beq.n	8004b92 <HAL_RCC_OscConfig+0xbe>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d132      	bne.n	8004b92 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e211      	b.n	8004f54 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	4b8e      	ldr	r3, [pc, #568]	; (8004d70 <HAL_RCC_OscConfig+0x29c>)
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d013      	beq.n	8004b6a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b42:	f7fd fe97 	bl	8002874 <HAL_GetTick>
 8004b46:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b48:	e008      	b.n	8004b5c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b4a:	f7fd fe93 	bl	8002874 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b64      	cmp	r3, #100	; 0x64
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e1fb      	b.n	8004f54 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5c:	4b83      	ldr	r3, [pc, #524]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0f0      	beq.n	8004b4a <HAL_RCC_OscConfig+0x76>
 8004b68:	e014      	b.n	8004b94 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6a:	f7fd fe83 	bl	8002874 <HAL_GetTick>
 8004b6e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b72:	f7fd fe7f 	bl	8002874 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b64      	cmp	r3, #100	; 0x64
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e1e7      	b.n	8004f54 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b84:	4b79      	ldr	r3, [pc, #484]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f0      	bne.n	8004b72 <HAL_RCC_OscConfig+0x9e>
 8004b90:	e000      	b.n	8004b94 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b92:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d077      	beq.n	8004c90 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ba0:	4b72      	ldr	r3, [pc, #456]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 030c 	and.w	r3, r3, #12
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00b      	beq.n	8004bc4 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bac:	4b6f      	ldr	r3, [pc, #444]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d126      	bne.n	8004c06 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bb8:	4b6c      	ldr	r3, [pc, #432]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d120      	bne.n	8004c06 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bc4:	4b69      	ldr	r3, [pc, #420]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_RCC_OscConfig+0x108>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e1bb      	b.n	8004f54 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bdc:	4b63      	ldr	r3, [pc, #396]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	21f8      	movs	r1, #248	; 0xf8
 8004bea:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bec:	69b9      	ldr	r1, [r7, #24]
 8004bee:	fa91 f1a1 	rbit	r1, r1
 8004bf2:	6179      	str	r1, [r7, #20]
  return result;
 8004bf4:	6979      	ldr	r1, [r7, #20]
 8004bf6:	fab1 f181 	clz	r1, r1
 8004bfa:	b2c9      	uxtb	r1, r1
 8004bfc:	408b      	lsls	r3, r1
 8004bfe:	495b      	ldr	r1, [pc, #364]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c04:	e044      	b.n	8004c90 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d02a      	beq.n	8004c64 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c0e:	4b59      	ldr	r3, [pc, #356]	; (8004d74 <HAL_RCC_OscConfig+0x2a0>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c14:	f7fd fe2e 	bl	8002874 <HAL_GetTick>
 8004c18:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c1c:	f7fd fe2a 	bl	8002874 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e192      	b.n	8004f54 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2e:	4b4f      	ldr	r3, [pc, #316]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3a:	4b4c      	ldr	r3, [pc, #304]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	21f8      	movs	r1, #248	; 0xf8
 8004c48:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4a:	6939      	ldr	r1, [r7, #16]
 8004c4c:	fa91 f1a1 	rbit	r1, r1
 8004c50:	60f9      	str	r1, [r7, #12]
  return result;
 8004c52:	68f9      	ldr	r1, [r7, #12]
 8004c54:	fab1 f181 	clz	r1, r1
 8004c58:	b2c9      	uxtb	r1, r1
 8004c5a:	408b      	lsls	r3, r1
 8004c5c:	4943      	ldr	r1, [pc, #268]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	600b      	str	r3, [r1, #0]
 8004c62:	e015      	b.n	8004c90 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c64:	4b43      	ldr	r3, [pc, #268]	; (8004d74 <HAL_RCC_OscConfig+0x2a0>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6a:	f7fd fe03 	bl	8002874 <HAL_GetTick>
 8004c6e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c72:	f7fd fdff 	bl	8002874 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e167      	b.n	8004f54 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c84:	4b39      	ldr	r3, [pc, #228]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1f0      	bne.n	8004c72 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d030      	beq.n	8004cfe <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d016      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ca4:	4b34      	ldr	r3, [pc, #208]	; (8004d78 <HAL_RCC_OscConfig+0x2a4>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004caa:	f7fd fde3 	bl	8002874 <HAL_GetTick>
 8004cae:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cb2:	f7fd fddf 	bl	8002874 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e147      	b.n	8004f54 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc4:	4b29      	ldr	r3, [pc, #164]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0f0      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x1de>
 8004cd0:	e015      	b.n	8004cfe <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cd2:	4b29      	ldr	r3, [pc, #164]	; (8004d78 <HAL_RCC_OscConfig+0x2a4>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd8:	f7fd fdcc 	bl	8002874 <HAL_GetTick>
 8004cdc:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ce0:	f7fd fdc8 	bl	8002874 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e130      	b.n	8004f54 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf2:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 8087 	beq.w	8004e1a <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d12:	4b16      	ldr	r3, [pc, #88]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d110      	bne.n	8004d40 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	4a11      	ldr	r2, [pc, #68]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d2e:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <HAL_RCC_OscConfig+0x298>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d36:	60bb      	str	r3, [r7, #8]
 8004d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d40:	4b0e      	ldr	r3, [pc, #56]	; (8004d7c <HAL_RCC_OscConfig+0x2a8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a0d      	ldr	r2, [pc, #52]	; (8004d7c <HAL_RCC_OscConfig+0x2a8>)
 8004d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d4a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <HAL_RCC_OscConfig+0x2a8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d122      	bne.n	8004d9e <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d58:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <HAL_RCC_OscConfig+0x2a8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a07      	ldr	r2, [pc, #28]	; (8004d7c <HAL_RCC_OscConfig+0x2a8>)
 8004d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d64:	f7fd fd86 	bl	8002874 <HAL_GetTick>
 8004d68:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d6a:	e012      	b.n	8004d92 <HAL_RCC_OscConfig+0x2be>
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	40023802 	.word	0x40023802
 8004d74:	42470000 	.word	0x42470000
 8004d78:	42470e80 	.word	0x42470e80
 8004d7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d80:	f7fd fd78 	bl	8002874 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e0e0      	b.n	8004f54 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d92:	4b72      	ldr	r3, [pc, #456]	; (8004f5c <HAL_RCC_OscConfig+0x488>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f0      	beq.n	8004d80 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	4b6f      	ldr	r3, [pc, #444]	; (8004f60 <HAL_RCC_OscConfig+0x48c>)
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d015      	beq.n	8004ddc <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db0:	f7fd fd60 	bl	8002874 <HAL_GetTick>
 8004db4:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db6:	e00a      	b.n	8004dce <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004db8:	f7fd fd5c 	bl	8002874 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e0c2      	b.n	8004f54 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dce:	4b65      	ldr	r3, [pc, #404]	; (8004f64 <HAL_RCC_OscConfig+0x490>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0ee      	beq.n	8004db8 <HAL_RCC_OscConfig+0x2e4>
 8004dda:	e014      	b.n	8004e06 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ddc:	f7fd fd4a 	bl	8002874 <HAL_GetTick>
 8004de0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004de2:	e00a      	b.n	8004dfa <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de4:	f7fd fd46 	bl	8002874 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e0ac      	b.n	8004f54 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dfa:	4b5a      	ldr	r3, [pc, #360]	; (8004f64 <HAL_RCC_OscConfig+0x490>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1ee      	bne.n	8004de4 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d105      	bne.n	8004e1a <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e0e:	4b55      	ldr	r3, [pc, #340]	; (8004f64 <HAL_RCC_OscConfig+0x490>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	4a54      	ldr	r2, [pc, #336]	; (8004f64 <HAL_RCC_OscConfig+0x490>)
 8004e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 8097 	beq.w	8004f52 <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e24:	4b4f      	ldr	r3, [pc, #316]	; (8004f64 <HAL_RCC_OscConfig+0x490>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 030c 	and.w	r3, r3, #12
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d061      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d146      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e38:	4b4b      	ldr	r3, [pc, #300]	; (8004f68 <HAL_RCC_OscConfig+0x494>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3e:	f7fd fd19 	bl	8002874 <HAL_GetTick>
 8004e42:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e44:	e008      	b.n	8004e58 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e46:	f7fd fd15 	bl	8002874 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b64      	cmp	r3, #100	; 0x64
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e07d      	b.n	8004f54 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e58:	4b42      	ldr	r3, [pc, #264]	; (8004f64 <HAL_RCC_OscConfig+0x490>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1f0      	bne.n	8004e46 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e64:	4b3f      	ldr	r3, [pc, #252]	; (8004f64 <HAL_RCC_OscConfig+0x490>)
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	4b40      	ldr	r3, [pc, #256]	; (8004f6c <HAL_RCC_OscConfig+0x498>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	69d1      	ldr	r1, [r2, #28]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6a12      	ldr	r2, [r2, #32]
 8004e74:	4311      	orrs	r1, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e7a:	0192      	lsls	r2, r2, #6
 8004e7c:	4311      	orrs	r1, r2
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e82:	0612      	lsls	r2, r2, #24
 8004e84:	4311      	orrs	r1, r2
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004e8a:	0852      	lsrs	r2, r2, #1
 8004e8c:	3a01      	subs	r2, #1
 8004e8e:	0412      	lsls	r2, r2, #16
 8004e90:	430a      	orrs	r2, r1
 8004e92:	4934      	ldr	r1, [pc, #208]	; (8004f64 <HAL_RCC_OscConfig+0x490>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e98:	4b33      	ldr	r3, [pc, #204]	; (8004f68 <HAL_RCC_OscConfig+0x494>)
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9e:	f7fd fce9 	bl	8002874 <HAL_GetTick>
 8004ea2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea6:	f7fd fce5 	bl	8002874 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b64      	cmp	r3, #100	; 0x64
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e04d      	b.n	8004f54 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb8:	4b2a      	ldr	r3, [pc, #168]	; (8004f64 <HAL_RCC_OscConfig+0x490>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0f0      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x3d2>
 8004ec4:	e045      	b.n	8004f52 <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ec6:	4b28      	ldr	r3, [pc, #160]	; (8004f68 <HAL_RCC_OscConfig+0x494>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ecc:	f7fd fcd2 	bl	8002874 <HAL_GetTick>
 8004ed0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed4:	f7fd fcce 	bl	8002874 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b64      	cmp	r3, #100	; 0x64
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e036      	b.n	8004f54 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee6:	4b1f      	ldr	r3, [pc, #124]	; (8004f64 <HAL_RCC_OscConfig+0x490>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f0      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x400>
 8004ef2:	e02e      	b.n	8004f52 <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d101      	bne.n	8004f00 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e029      	b.n	8004f54 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8004f00:	4b18      	ldr	r3, [pc, #96]	; (8004f64 <HAL_RCC_OscConfig+0x490>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d11c      	bne.n	8004f4e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d115      	bne.n	8004f4e <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	099b      	lsrs	r3, r3, #6
 8004f26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d10d      	bne.n	8004f4e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d106      	bne.n	8004f4e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d001      	beq.n	8004f52 <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3728      	adds	r7, #40	; 0x28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40007000 	.word	0x40007000
 8004f60:	40023870 	.word	0x40023870
 8004f64:	40023800 	.word	0x40023800
 8004f68:	42470060 	.word	0x42470060
 8004f6c:	f0bc8000 	.word	0xf0bc8000

08004f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e0d2      	b.n	800512a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f84:	4b6b      	ldr	r3, [pc, #428]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 030f 	and.w	r3, r3, #15
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d90c      	bls.n	8004fac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f92:	4b68      	ldr	r3, [pc, #416]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9a:	4b66      	ldr	r3, [pc, #408]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e0be      	b.n	800512a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d020      	beq.n	8004ffa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fc4:	4b5c      	ldr	r3, [pc, #368]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	4a5b      	ldr	r2, [pc, #364]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8004fca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8004fdc:	4b56      	ldr	r3, [pc, #344]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	4a55      	ldr	r2, [pc, #340]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8004fe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fe6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fe8:	4b53      	ldr	r3, [pc, #332]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	4950      	ldr	r1, [pc, #320]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d040      	beq.n	8005088 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d107      	bne.n	800501e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800500e:	4b4a      	ldr	r3, [pc, #296]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d115      	bne.n	8005046 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e085      	b.n	800512a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d107      	bne.n	8005036 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005026:	4b44      	ldr	r3, [pc, #272]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d109      	bne.n	8005046 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e079      	b.n	800512a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005036:	4b40      	ldr	r3, [pc, #256]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e071      	b.n	800512a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005046:	4b3c      	ldr	r3, [pc, #240]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f023 0203 	bic.w	r2, r3, #3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	4939      	ldr	r1, [pc, #228]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8005054:	4313      	orrs	r3, r2
 8005056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005058:	f7fd fc0c 	bl	8002874 <HAL_GetTick>
 800505c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505e:	e00a      	b.n	8005076 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005060:	f7fd fc08 	bl	8002874 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	f241 3288 	movw	r2, #5000	; 0x1388
 800506e:	4293      	cmp	r3, r2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e059      	b.n	800512a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005076:	4b30      	ldr	r3, [pc, #192]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 020c 	and.w	r2, r3, #12
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	429a      	cmp	r2, r3
 8005086:	d1eb      	bne.n	8005060 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005088:	4b2a      	ldr	r3, [pc, #168]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 030f 	and.w	r3, r3, #15
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d20c      	bcs.n	80050b0 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005096:	4b27      	ldr	r3, [pc, #156]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800509e:	4b25      	ldr	r3, [pc, #148]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d001      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e03c      	b.n	800512a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d008      	beq.n	80050ce <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050bc:	4b1e      	ldr	r3, [pc, #120]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	491b      	ldr	r1, [pc, #108]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d009      	beq.n	80050ee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050da:	4b17      	ldr	r3, [pc, #92]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4913      	ldr	r1, [pc, #76]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80050ee:	f000 f82b 	bl	8005148 <HAL_RCC_GetSysClockFreq>
 80050f2:	4601      	mov	r1, r0
 80050f4:	4b10      	ldr	r3, [pc, #64]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050fc:	22f0      	movs	r2, #240	; 0xf0
 80050fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	fa92 f2a2 	rbit	r2, r2
 8005106:	60fa      	str	r2, [r7, #12]
  return result;
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	fab2 f282 	clz	r2, r2
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	40d3      	lsrs	r3, r2
 8005112:	4a0a      	ldr	r2, [pc, #40]	; (800513c <HAL_RCC_ClockConfig+0x1cc>)
 8005114:	5cd3      	ldrb	r3, [r2, r3]
 8005116:	fa21 f303 	lsr.w	r3, r1, r3
 800511a:	4a09      	ldr	r2, [pc, #36]	; (8005140 <HAL_RCC_ClockConfig+0x1d0>)
 800511c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800511e:	4b09      	ldr	r3, [pc, #36]	; (8005144 <HAL_RCC_ClockConfig+0x1d4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f7fd f9b8 	bl	8002498 <HAL_InitTick>

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40023c00 	.word	0x40023c00
 8005138:	40023800 	.word	0x40023800
 800513c:	0801809c 	.word	0x0801809c
 8005140:	20000024 	.word	0x20000024
 8005144:	20000028 	.word	0x20000028

08005148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800514c:	b094      	sub	sp, #80	; 0x50
 800514e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	647b      	str	r3, [r7, #68]	; 0x44
 8005154:	2300      	movs	r3, #0
 8005156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005158:	2300      	movs	r3, #0
 800515a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005160:	4b7c      	ldr	r3, [pc, #496]	; (8005354 <HAL_RCC_GetSysClockFreq+0x20c>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 030c 	and.w	r3, r3, #12
 8005168:	2b08      	cmp	r3, #8
 800516a:	d00d      	beq.n	8005188 <HAL_RCC_GetSysClockFreq+0x40>
 800516c:	2b08      	cmp	r3, #8
 800516e:	f200 80e7 	bhi.w	8005340 <HAL_RCC_GetSysClockFreq+0x1f8>
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <HAL_RCC_GetSysClockFreq+0x34>
 8005176:	2b04      	cmp	r3, #4
 8005178:	d003      	beq.n	8005182 <HAL_RCC_GetSysClockFreq+0x3a>
 800517a:	e0e1      	b.n	8005340 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800517c:	4b76      	ldr	r3, [pc, #472]	; (8005358 <HAL_RCC_GetSysClockFreq+0x210>)
 800517e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005180:	e0e1      	b.n	8005346 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005182:	4b76      	ldr	r3, [pc, #472]	; (800535c <HAL_RCC_GetSysClockFreq+0x214>)
 8005184:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005186:	e0de      	b.n	8005346 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005188:	4b72      	ldr	r3, [pc, #456]	; (8005354 <HAL_RCC_GetSysClockFreq+0x20c>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005190:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005192:	4b70      	ldr	r3, [pc, #448]	; (8005354 <HAL_RCC_GetSysClockFreq+0x20c>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d065      	beq.n	800526a <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800519e:	4b6d      	ldr	r3, [pc, #436]	; (8005354 <HAL_RCC_GetSysClockFreq+0x20c>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	099b      	lsrs	r3, r3, #6
 80051a4:	2200      	movs	r2, #0
 80051a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80051a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b0:	633b      	str	r3, [r7, #48]	; 0x30
 80051b2:	2300      	movs	r3, #0
 80051b4:	637b      	str	r3, [r7, #52]	; 0x34
 80051b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051ba:	4622      	mov	r2, r4
 80051bc:	462b      	mov	r3, r5
 80051be:	f04f 0000 	mov.w	r0, #0
 80051c2:	f04f 0100 	mov.w	r1, #0
 80051c6:	0159      	lsls	r1, r3, #5
 80051c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051cc:	0150      	lsls	r0, r2, #5
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4621      	mov	r1, r4
 80051d4:	1a51      	subs	r1, r2, r1
 80051d6:	6139      	str	r1, [r7, #16]
 80051d8:	4629      	mov	r1, r5
 80051da:	eb63 0301 	sbc.w	r3, r3, r1
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051ec:	4659      	mov	r1, fp
 80051ee:	018b      	lsls	r3, r1, #6
 80051f0:	4651      	mov	r1, sl
 80051f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051f6:	4651      	mov	r1, sl
 80051f8:	018a      	lsls	r2, r1, #6
 80051fa:	46d4      	mov	ip, sl
 80051fc:	ebb2 080c 	subs.w	r8, r2, ip
 8005200:	4659      	mov	r1, fp
 8005202:	eb63 0901 	sbc.w	r9, r3, r1
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800521a:	4690      	mov	r8, r2
 800521c:	4699      	mov	r9, r3
 800521e:	4623      	mov	r3, r4
 8005220:	eb18 0303 	adds.w	r3, r8, r3
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	462b      	mov	r3, r5
 8005228:	eb49 0303 	adc.w	r3, r9, r3
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	f04f 0300 	mov.w	r3, #0
 8005236:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800523a:	4629      	mov	r1, r5
 800523c:	024b      	lsls	r3, r1, #9
 800523e:	4620      	mov	r0, r4
 8005240:	4629      	mov	r1, r5
 8005242:	4604      	mov	r4, r0
 8005244:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8005248:	4601      	mov	r1, r0
 800524a:	024a      	lsls	r2, r1, #9
 800524c:	4610      	mov	r0, r2
 800524e:	4619      	mov	r1, r3
 8005250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005252:	2200      	movs	r2, #0
 8005254:	62bb      	str	r3, [r7, #40]	; 0x28
 8005256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005258:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800525c:	f7fb ff9e 	bl	800119c <__aeabi_uldivmod>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4613      	mov	r3, r2
 8005266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005268:	e05c      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800526a:	4b3a      	ldr	r3, [pc, #232]	; (8005354 <HAL_RCC_GetSysClockFreq+0x20c>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	099b      	lsrs	r3, r3, #6
 8005270:	2200      	movs	r2, #0
 8005272:	4618      	mov	r0, r3
 8005274:	4611      	mov	r1, r2
 8005276:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800527a:	623b      	str	r3, [r7, #32]
 800527c:	2300      	movs	r3, #0
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
 8005280:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005284:	4642      	mov	r2, r8
 8005286:	464b      	mov	r3, r9
 8005288:	f04f 0000 	mov.w	r0, #0
 800528c:	f04f 0100 	mov.w	r1, #0
 8005290:	0159      	lsls	r1, r3, #5
 8005292:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005296:	0150      	lsls	r0, r2, #5
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	46c4      	mov	ip, r8
 800529e:	ebb2 0a0c 	subs.w	sl, r2, ip
 80052a2:	4640      	mov	r0, r8
 80052a4:	4649      	mov	r1, r9
 80052a6:	468c      	mov	ip, r1
 80052a8:	eb63 0b0c 	sbc.w	fp, r3, ip
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052c0:	ebb2 040a 	subs.w	r4, r2, sl
 80052c4:	eb63 050b 	sbc.w	r5, r3, fp
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	00eb      	lsls	r3, r5, #3
 80052d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052d6:	00e2      	lsls	r2, r4, #3
 80052d8:	4614      	mov	r4, r2
 80052da:	461d      	mov	r5, r3
 80052dc:	4603      	mov	r3, r0
 80052de:	18e3      	adds	r3, r4, r3
 80052e0:	603b      	str	r3, [r7, #0]
 80052e2:	460b      	mov	r3, r1
 80052e4:	eb45 0303 	adc.w	r3, r5, r3
 80052e8:	607b      	str	r3, [r7, #4]
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052f6:	4629      	mov	r1, r5
 80052f8:	028b      	lsls	r3, r1, #10
 80052fa:	4620      	mov	r0, r4
 80052fc:	4629      	mov	r1, r5
 80052fe:	4604      	mov	r4, r0
 8005300:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8005304:	4601      	mov	r1, r0
 8005306:	028a      	lsls	r2, r1, #10
 8005308:	4610      	mov	r0, r2
 800530a:	4619      	mov	r1, r3
 800530c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800530e:	2200      	movs	r2, #0
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	61fa      	str	r2, [r7, #28]
 8005314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005318:	f7fb ff40 	bl	800119c <__aeabi_uldivmod>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4613      	mov	r3, r2
 8005322:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005324:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <HAL_RCC_GetSysClockFreq+0x20c>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	0c1b      	lsrs	r3, r3, #16
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	3301      	adds	r3, #1
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005334:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005338:	fbb2 f3f3 	udiv	r3, r2, r3
 800533c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800533e:	e002      	b.n	8005346 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005340:	4b05      	ldr	r3, [pc, #20]	; (8005358 <HAL_RCC_GetSysClockFreq+0x210>)
 8005342:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005348:	4618      	mov	r0, r3
 800534a:	3750      	adds	r7, #80	; 0x50
 800534c:	46bd      	mov	sp, r7
 800534e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005352:	bf00      	nop
 8005354:	40023800 	.word	0x40023800
 8005358:	00f42400 	.word	0x00f42400
 800535c:	007a1200 	.word	0x007a1200

08005360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005364:	4b02      	ldr	r3, [pc, #8]	; (8005370 <HAL_RCC_GetHCLKFreq+0x10>)
 8005366:	681b      	ldr	r3, [r3, #0]
}
 8005368:	4618      	mov	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr
 8005370:	20000024 	.word	0x20000024

08005374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800537a:	f7ff fff1 	bl	8005360 <HAL_RCC_GetHCLKFreq>
 800537e:	4601      	mov	r1, r0
 8005380:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005388:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800538c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	fa92 f2a2 	rbit	r2, r2
 8005394:	603a      	str	r2, [r7, #0]
  return result;
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	fab2 f282 	clz	r2, r2
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	40d3      	lsrs	r3, r2
 80053a0:	4a04      	ldr	r2, [pc, #16]	; (80053b4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80053a2:	5cd3      	ldrb	r3, [r2, r3]
 80053a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40023800 	.word	0x40023800
 80053b4:	080180ac 	.word	0x080180ac

080053b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	220f      	movs	r2, #15
 80053c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053c8:	4b11      	ldr	r3, [pc, #68]	; (8005410 <HAL_RCC_GetClockConfig+0x58>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 0203 	and.w	r2, r3, #3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80053d4:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <HAL_RCC_GetClockConfig+0x58>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053e0:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <HAL_RCC_GetClockConfig+0x58>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80053ec:	4b08      	ldr	r3, [pc, #32]	; (8005410 <HAL_RCC_GetClockConfig+0x58>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	08db      	lsrs	r3, r3, #3
 80053f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053fa:	4b06      	ldr	r3, [pc, #24]	; (8005414 <HAL_RCC_GetClockConfig+0x5c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 020f 	and.w	r2, r3, #15
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	601a      	str	r2, [r3, #0]
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr
 8005410:	40023800 	.word	0x40023800
 8005414:	40023c00 	.word	0x40023c00

08005418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e041      	b.n	80054ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fc ffe6 	bl	8002410 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3304      	adds	r3, #4
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f000 faba 	bl	80059d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d001      	beq.n	80054d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e04e      	b.n	800556e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a22      	ldr	r2, [pc, #136]	; (8005578 <HAL_TIM_Base_Start_IT+0xc0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d022      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x80>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fa:	d01d      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x80>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a1e      	ldr	r2, [pc, #120]	; (800557c <HAL_TIM_Base_Start_IT+0xc4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d018      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x80>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1d      	ldr	r2, [pc, #116]	; (8005580 <HAL_TIM_Base_Start_IT+0xc8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d013      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x80>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1b      	ldr	r2, [pc, #108]	; (8005584 <HAL_TIM_Base_Start_IT+0xcc>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00e      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x80>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1a      	ldr	r2, [pc, #104]	; (8005588 <HAL_TIM_Base_Start_IT+0xd0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d009      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x80>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a18      	ldr	r2, [pc, #96]	; (800558c <HAL_TIM_Base_Start_IT+0xd4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d004      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x80>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a17      	ldr	r2, [pc, #92]	; (8005590 <HAL_TIM_Base_Start_IT+0xd8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d111      	bne.n	800555c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b06      	cmp	r3, #6
 8005548:	d010      	beq.n	800556c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0201 	orr.w	r2, r2, #1
 8005558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555a:	e007      	b.n	800556c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr
 8005578:	40010000 	.word	0x40010000
 800557c:	40000400 	.word	0x40000400
 8005580:	40000800 	.word	0x40000800
 8005584:	40000c00 	.word	0x40000c00
 8005588:	40010400 	.word	0x40010400
 800558c:	40014000 	.word	0x40014000
 8005590:	40001800 	.word	0x40001800

08005594 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0201 	bic.w	r2, r2, #1
 80055aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6a1a      	ldr	r2, [r3, #32]
 80055b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80055b6:	4013      	ands	r3, r2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10f      	bne.n	80055dc <HAL_TIM_Base_Stop_IT+0x48>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6a1a      	ldr	r2, [r3, #32]
 80055c2:	f240 4344 	movw	r3, #1092	; 0x444
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d107      	bne.n	80055dc <HAL_TIM_Base_Stop_IT+0x48>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0201 	bic.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr

080055f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b02      	cmp	r3, #2
 8005604:	d122      	bne.n	800564c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b02      	cmp	r3, #2
 8005612:	d11b      	bne.n	800564c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f06f 0202 	mvn.w	r2, #2
 800561c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f9b1 	bl	800599a <HAL_TIM_IC_CaptureCallback>
 8005638:	e005      	b.n	8005646 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9a4 	bl	8005988 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f9b3 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b04      	cmp	r3, #4
 8005658:	d122      	bne.n	80056a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b04      	cmp	r3, #4
 8005666:	d11b      	bne.n	80056a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0204 	mvn.w	r2, #4
 8005670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2202      	movs	r2, #2
 8005676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f987 	bl	800599a <HAL_TIM_IC_CaptureCallback>
 800568c:	e005      	b.n	800569a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f97a 	bl	8005988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f989 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b08      	cmp	r3, #8
 80056ac:	d122      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d11b      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0208 	mvn.w	r2, #8
 80056c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2204      	movs	r2, #4
 80056ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f95d 	bl	800599a <HAL_TIM_IC_CaptureCallback>
 80056e0:	e005      	b.n	80056ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f950 	bl	8005988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f95f 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	2b10      	cmp	r3, #16
 8005700:	d122      	bne.n	8005748 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b10      	cmp	r3, #16
 800570e:	d11b      	bne.n	8005748 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0210 	mvn.w	r2, #16
 8005718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2208      	movs	r2, #8
 800571e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f933 	bl	800599a <HAL_TIM_IC_CaptureCallback>
 8005734:	e005      	b.n	8005742 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f926 	bl	8005988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f935 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b01      	cmp	r3, #1
 8005754:	d10e      	bne.n	8005774 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b01      	cmp	r3, #1
 8005762:	d107      	bne.n	8005774 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0201 	mvn.w	r2, #1
 800576c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7fc fcaa 	bl	80020c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577e:	2b80      	cmp	r3, #128	; 0x80
 8005780:	d10e      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578c:	2b80      	cmp	r3, #128	; 0x80
 800578e:	d107      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 facf 	bl	8005d3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b40      	cmp	r3, #64	; 0x40
 80057ac:	d10e      	bne.n	80057cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b8:	2b40      	cmp	r3, #64	; 0x40
 80057ba:	d107      	bne.n	80057cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f8f9 	bl	80059be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b20      	cmp	r3, #32
 80057d8:	d10e      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d107      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0220 	mvn.w	r2, #32
 80057f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fa9a 	bl	8005d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057f8:	bf00      	nop
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_TIM_ConfigClockSource+0x18>
 8005814:	2302      	movs	r3, #2
 8005816:	e0b3      	b.n	8005980 <HAL_TIM_ConfigClockSource+0x180>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005836:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800583e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005850:	d03e      	beq.n	80058d0 <HAL_TIM_ConfigClockSource+0xd0>
 8005852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005856:	f200 8087 	bhi.w	8005968 <HAL_TIM_ConfigClockSource+0x168>
 800585a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800585e:	f000 8085 	beq.w	800596c <HAL_TIM_ConfigClockSource+0x16c>
 8005862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005866:	d87f      	bhi.n	8005968 <HAL_TIM_ConfigClockSource+0x168>
 8005868:	2b70      	cmp	r3, #112	; 0x70
 800586a:	d01a      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0xa2>
 800586c:	2b70      	cmp	r3, #112	; 0x70
 800586e:	d87b      	bhi.n	8005968 <HAL_TIM_ConfigClockSource+0x168>
 8005870:	2b60      	cmp	r3, #96	; 0x60
 8005872:	d050      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0x116>
 8005874:	2b60      	cmp	r3, #96	; 0x60
 8005876:	d877      	bhi.n	8005968 <HAL_TIM_ConfigClockSource+0x168>
 8005878:	2b50      	cmp	r3, #80	; 0x50
 800587a:	d03c      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0xf6>
 800587c:	2b50      	cmp	r3, #80	; 0x50
 800587e:	d873      	bhi.n	8005968 <HAL_TIM_ConfigClockSource+0x168>
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	d058      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0x136>
 8005884:	2b40      	cmp	r3, #64	; 0x40
 8005886:	d86f      	bhi.n	8005968 <HAL_TIM_ConfigClockSource+0x168>
 8005888:	2b30      	cmp	r3, #48	; 0x30
 800588a:	d064      	beq.n	8005956 <HAL_TIM_ConfigClockSource+0x156>
 800588c:	2b30      	cmp	r3, #48	; 0x30
 800588e:	d86b      	bhi.n	8005968 <HAL_TIM_ConfigClockSource+0x168>
 8005890:	2b20      	cmp	r3, #32
 8005892:	d060      	beq.n	8005956 <HAL_TIM_ConfigClockSource+0x156>
 8005894:	2b20      	cmp	r3, #32
 8005896:	d867      	bhi.n	8005968 <HAL_TIM_ConfigClockSource+0x168>
 8005898:	2b00      	cmp	r3, #0
 800589a:	d05c      	beq.n	8005956 <HAL_TIM_ConfigClockSource+0x156>
 800589c:	2b10      	cmp	r3, #16
 800589e:	d05a      	beq.n	8005956 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80058a0:	e062      	b.n	8005968 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6899      	ldr	r1, [r3, #8]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f000 f9a2 	bl	8005bfa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	609a      	str	r2, [r3, #8]
      break;
 80058ce:	e04e      	b.n	800596e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	6899      	ldr	r1, [r3, #8]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f000 f98b 	bl	8005bfa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058f2:	609a      	str	r2, [r3, #8]
      break;
 80058f4:	e03b      	b.n	800596e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6859      	ldr	r1, [r3, #4]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	461a      	mov	r2, r3
 8005904:	f000 f902 	bl	8005b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2150      	movs	r1, #80	; 0x50
 800590e:	4618      	mov	r0, r3
 8005910:	f000 f959 	bl	8005bc6 <TIM_ITRx_SetConfig>
      break;
 8005914:	e02b      	b.n	800596e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	6859      	ldr	r1, [r3, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	461a      	mov	r2, r3
 8005924:	f000 f920 	bl	8005b68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2160      	movs	r1, #96	; 0x60
 800592e:	4618      	mov	r0, r3
 8005930:	f000 f949 	bl	8005bc6 <TIM_ITRx_SetConfig>
      break;
 8005934:	e01b      	b.n	800596e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	6859      	ldr	r1, [r3, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	461a      	mov	r2, r3
 8005944:	f000 f8e2 	bl	8005b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2140      	movs	r1, #64	; 0x40
 800594e:	4618      	mov	r0, r3
 8005950:	f000 f939 	bl	8005bc6 <TIM_ITRx_SetConfig>
      break;
 8005954:	e00b      	b.n	800596e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4619      	mov	r1, r3
 8005960:	4610      	mov	r0, r2
 8005962:	f000 f930 	bl	8005bc6 <TIM_ITRx_SetConfig>
        break;
 8005966:	e002      	b.n	800596e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005968:	bf00      	nop
 800596a:	e000      	b.n	800596e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800596c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr

0800599a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr

080059ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bc80      	pop	{r7}
 80059bc:	4770      	bx	lr

080059be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bc80      	pop	{r7}
 80059ce:	4770      	bx	lr

080059d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a3f      	ldr	r2, [pc, #252]	; (8005ae0 <TIM_Base_SetConfig+0x110>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d013      	beq.n	8005a10 <TIM_Base_SetConfig+0x40>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ee:	d00f      	beq.n	8005a10 <TIM_Base_SetConfig+0x40>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a3c      	ldr	r2, [pc, #240]	; (8005ae4 <TIM_Base_SetConfig+0x114>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d00b      	beq.n	8005a10 <TIM_Base_SetConfig+0x40>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a3b      	ldr	r2, [pc, #236]	; (8005ae8 <TIM_Base_SetConfig+0x118>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d007      	beq.n	8005a10 <TIM_Base_SetConfig+0x40>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a3a      	ldr	r2, [pc, #232]	; (8005aec <TIM_Base_SetConfig+0x11c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d003      	beq.n	8005a10 <TIM_Base_SetConfig+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a39      	ldr	r2, [pc, #228]	; (8005af0 <TIM_Base_SetConfig+0x120>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d108      	bne.n	8005a22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a2e      	ldr	r2, [pc, #184]	; (8005ae0 <TIM_Base_SetConfig+0x110>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d02b      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a30:	d027      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a2b      	ldr	r2, [pc, #172]	; (8005ae4 <TIM_Base_SetConfig+0x114>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d023      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ae8 <TIM_Base_SetConfig+0x118>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d01f      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a29      	ldr	r2, [pc, #164]	; (8005aec <TIM_Base_SetConfig+0x11c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d01b      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a28      	ldr	r2, [pc, #160]	; (8005af0 <TIM_Base_SetConfig+0x120>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d017      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a27      	ldr	r2, [pc, #156]	; (8005af4 <TIM_Base_SetConfig+0x124>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d013      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a26      	ldr	r2, [pc, #152]	; (8005af8 <TIM_Base_SetConfig+0x128>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00f      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a25      	ldr	r2, [pc, #148]	; (8005afc <TIM_Base_SetConfig+0x12c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00b      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a24      	ldr	r2, [pc, #144]	; (8005b00 <TIM_Base_SetConfig+0x130>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d007      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a23      	ldr	r2, [pc, #140]	; (8005b04 <TIM_Base_SetConfig+0x134>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d003      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a22      	ldr	r2, [pc, #136]	; (8005b08 <TIM_Base_SetConfig+0x138>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d108      	bne.n	8005a94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a09      	ldr	r2, [pc, #36]	; (8005ae0 <TIM_Base_SetConfig+0x110>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d003      	beq.n	8005ac8 <TIM_Base_SetConfig+0xf8>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a0b      	ldr	r2, [pc, #44]	; (8005af0 <TIM_Base_SetConfig+0x120>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d103      	bne.n	8005ad0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	615a      	str	r2, [r3, #20]
}
 8005ad6:	bf00      	nop
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr
 8005ae0:	40010000 	.word	0x40010000
 8005ae4:	40000400 	.word	0x40000400
 8005ae8:	40000800 	.word	0x40000800
 8005aec:	40000c00 	.word	0x40000c00
 8005af0:	40010400 	.word	0x40010400
 8005af4:	40014000 	.word	0x40014000
 8005af8:	40014400 	.word	0x40014400
 8005afc:	40014800 	.word	0x40014800
 8005b00:	40001800 	.word	0x40001800
 8005b04:	40001c00 	.word	0x40001c00
 8005b08:	40002000 	.word	0x40002000

08005b0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f023 0201 	bic.w	r2, r3, #1
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f023 030a 	bic.w	r3, r3, #10
 8005b48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	621a      	str	r2, [r3, #32]
}
 8005b5e:	bf00      	nop
 8005b60:	371c      	adds	r7, #28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr

08005b68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	f023 0210 	bic.w	r2, r3, #16
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	031b      	lsls	r3, r3, #12
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ba4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	621a      	str	r2, [r3, #32]
}
 8005bbc:	bf00      	nop
 8005bbe:	371c      	adds	r7, #28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	4770      	bx	lr

08005bc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b085      	sub	sp, #20
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f043 0307 	orr.w	r3, r3, #7
 8005be8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	609a      	str	r2, [r3, #8]
}
 8005bf0:	bf00      	nop
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr

08005bfa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b087      	sub	sp, #28
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	021a      	lsls	r2, r3, #8
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	609a      	str	r2, [r3, #8]
}
 8005c2e:	bf00      	nop
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bc80      	pop	{r7}
 8005c36:	4770      	bx	lr

08005c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d101      	bne.n	8005c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e05a      	b.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a20      	ldr	r2, [pc, #128]	; (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d022      	beq.n	8005cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9c:	d01d      	beq.n	8005cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1c      	ldr	r2, [pc, #112]	; (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d018      	beq.n	8005cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1a      	ldr	r2, [pc, #104]	; (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d013      	beq.n	8005cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a19      	ldr	r2, [pc, #100]	; (8005d1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00e      	beq.n	8005cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a17      	ldr	r2, [pc, #92]	; (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d009      	beq.n	8005cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a16      	ldr	r2, [pc, #88]	; (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d004      	beq.n	8005cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a14      	ldr	r2, [pc, #80]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d10c      	bne.n	8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ce0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr
 8005d10:	40010000 	.word	0x40010000
 8005d14:	40000400 	.word	0x40000400
 8005d18:	40000800 	.word	0x40000800
 8005d1c:	40000c00 	.word	0x40000c00
 8005d20:	40010400 	.word	0x40010400
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40001800 	.word	0x40001800

08005d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bc80      	pop	{r7}
 8005d3c:	4770      	bx	lr

08005d3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr

08005d50 <udp_receive_callback>:
uint8_t GATEWAY_ADDRESS[4];

/* USER CODE BEGIN 2 */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port) {
 8005d50:	b5b0      	push	{r4, r5, r7, lr}
 8005d52:	f5ad 6dcc 	sub.w	sp, sp, #1632	; 0x660
 8005d56:	af02      	add	r7, sp, #8
 8005d58:	f507 64cb 	add.w	r4, r7, #1624	; 0x658
 8005d5c:	f2a4 644c 	subw	r4, r4, #1612	; 0x64c
 8005d60:	6020      	str	r0, [r4, #0]
 8005d62:	f507 60cb 	add.w	r0, r7, #1624	; 0x658
 8005d66:	f5a0 60ca 	sub.w	r0, r0, #1616	; 0x650
 8005d6a:	6001      	str	r1, [r0, #0]
 8005d6c:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 8005d70:	f2a1 6154 	subw	r1, r1, #1620	; 0x654
 8005d74:	600a      	str	r2, [r1, #0]
 8005d76:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 8005d7a:	f5a2 62cb 	sub.w	r2, r2, #1624	; 0x658
 8005d7e:	6013      	str	r3, [r2, #0]

	/* Get the IP of the Client */
	//char *remoteIP = ipaddr_ntoa(addr);

	char bufOut[1600];
	uint16_t lenOut = sizeof(bufOut);
 8005d80:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005d84:	f2a3 6346 	subw	r3, r3, #1606	; 0x646
 8005d88:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005d8c:	801a      	strh	r2, [r3, #0]

	WG.ProcessData(p->payload, p->len, bufOut, &lenOut, arg);
 8005d8e:	4b30      	ldr	r3, [pc, #192]	; (8005e50 <udp_receive_callback+0x100>)
 8005d90:	681c      	ldr	r4, [r3, #0]
 8005d92:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005d96:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6858      	ldr	r0, [r3, #4]
 8005d9e:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005da2:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	8959      	ldrh	r1, [r3, #10]
 8005daa:	f107 0512 	add.w	r5, r7, #18
 8005dae:	f107 0214 	add.w	r2, r7, #20
 8005db2:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005db6:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	462b      	mov	r3, r5
 8005dc0:	47a0      	blx	r4

	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT, lenOut, PBUF_RAM);
 8005dc2:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005dc6:	f2a3 6346 	subw	r3, r3, #1606	; 0x646
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	4619      	mov	r1, r3
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	f001 fbe7 	bl	80075a4 <pbuf_alloc>
 8005dd6:	f8c7 0654 	str.w	r0, [r7, #1620]	; 0x654

	/* copy the data into the buffer  */
	pbuf_take(txBuf, bufOut, lenOut);
 8005dda:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005dde:	f2a3 6346 	subw	r3, r3, #1606	; 0x646
 8005de2:	881a      	ldrh	r2, [r3, #0]
 8005de4:	f107 0314 	add.w	r3, r7, #20
 8005de8:	4619      	mov	r1, r3
 8005dea:	f8d7 0654 	ldr.w	r0, [r7, #1620]	; 0x654
 8005dee:	f002 f9c9 	bl	8008184 <pbuf_take>

	/* Connect to the remote client */
	udp_connect(upcb, addr, port);
 8005df2:	f8b7 2668 	ldrh.w	r2, [r7, #1640]	; 0x668
 8005df6:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005dfa:	f5a3 61cb 	sub.w	r1, r3, #1624	; 0x658
 8005dfe:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005e02:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 8005e06:	6809      	ldr	r1, [r1, #0]
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	f007 fb03 	bl	800d414 <udp_connect>

	/* Send a Reply to the Client */
	udp_send(upcb, txBuf);
 8005e0e:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005e12:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 8005e16:	f8d7 1654 	ldr.w	r1, [r7, #1620]	; 0x654
 8005e1a:	6818      	ldr	r0, [r3, #0]
 8005e1c:	f007 f95c 	bl	800d0d8 <udp_send>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb);
 8005e20:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005e24:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	f007 fb49 	bl	800d4c0 <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 8005e2e:	f8d7 0654 	ldr.w	r0, [r7, #1620]	; 0x654
 8005e32:	f001 ff2f 	bl	8007c94 <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p);
 8005e36:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005e3a:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	f001 ff28 	bl	8007c94 <pbuf_free>
}
 8005e44:	bf00      	nop
 8005e46:	f507 67cb 	add.w	r7, r7, #1624	; 0x658
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000000 	.word	0x20000000

08005e54 <udpServer_init>:

void udpServer_init(void *rec_arg) {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
	// UDP Control Block structure
	struct udp_pcb *upcb;
	err_t err;

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8005e5c:	f007 fb8a 	bl	800d574 <udp_new>
 8005e60:	6178      	str	r0, [r7, #20]

	/* 2. Bind the upcb to the local port */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005e62:	4b2f      	ldr	r3, [pc, #188]	; (8005f20 <udpServer_init+0xcc>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	061a      	lsls	r2, r3, #24
 8005e68:	4b2d      	ldr	r3, [pc, #180]	; (8005f20 <udpServer_init+0xcc>)
 8005e6a:	785b      	ldrb	r3, [r3, #1]
 8005e6c:	041b      	lsls	r3, r3, #16
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	4b2b      	ldr	r3, [pc, #172]	; (8005f20 <udpServer_init+0xcc>)
 8005e72:	789b      	ldrb	r3, [r3, #2]
 8005e74:	021b      	lsls	r3, r3, #8
 8005e76:	4313      	orrs	r3, r2
 8005e78:	4a29      	ldr	r2, [pc, #164]	; (8005f20 <udpServer_init+0xcc>)
 8005e7a:	78d2      	ldrb	r2, [r2, #3]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	061a      	lsls	r2, r3, #24
 8005e80:	4b27      	ldr	r3, [pc, #156]	; (8005f20 <udpServer_init+0xcc>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	0619      	lsls	r1, r3, #24
 8005e86:	4b26      	ldr	r3, [pc, #152]	; (8005f20 <udpServer_init+0xcc>)
 8005e88:	785b      	ldrb	r3, [r3, #1]
 8005e8a:	041b      	lsls	r3, r3, #16
 8005e8c:	4319      	orrs	r1, r3
 8005e8e:	4b24      	ldr	r3, [pc, #144]	; (8005f20 <udpServer_init+0xcc>)
 8005e90:	789b      	ldrb	r3, [r3, #2]
 8005e92:	021b      	lsls	r3, r3, #8
 8005e94:	430b      	orrs	r3, r1
 8005e96:	4922      	ldr	r1, [pc, #136]	; (8005f20 <udpServer_init+0xcc>)
 8005e98:	78c9      	ldrb	r1, [r1, #3]
 8005e9a:	430b      	orrs	r3, r1
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	4b1e      	ldr	r3, [pc, #120]	; (8005f20 <udpServer_init+0xcc>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	0619      	lsls	r1, r3, #24
 8005eaa:	4b1d      	ldr	r3, [pc, #116]	; (8005f20 <udpServer_init+0xcc>)
 8005eac:	785b      	ldrb	r3, [r3, #1]
 8005eae:	041b      	lsls	r3, r3, #16
 8005eb0:	4319      	orrs	r1, r3
 8005eb2:	4b1b      	ldr	r3, [pc, #108]	; (8005f20 <udpServer_init+0xcc>)
 8005eb4:	789b      	ldrb	r3, [r3, #2]
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	430b      	orrs	r3, r1
 8005eba:	4919      	ldr	r1, [pc, #100]	; (8005f20 <udpServer_init+0xcc>)
 8005ebc:	78c9      	ldrb	r1, [r1, #3]
 8005ebe:	430b      	orrs	r3, r1
 8005ec0:	0a1b      	lsrs	r3, r3, #8
 8005ec2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <udpServer_init+0xcc>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	0619      	lsls	r1, r3, #24
 8005ece:	4b14      	ldr	r3, [pc, #80]	; (8005f20 <udpServer_init+0xcc>)
 8005ed0:	785b      	ldrb	r3, [r3, #1]
 8005ed2:	041b      	lsls	r3, r3, #16
 8005ed4:	4319      	orrs	r1, r3
 8005ed6:	4b12      	ldr	r3, [pc, #72]	; (8005f20 <udpServer_init+0xcc>)
 8005ed8:	789b      	ldrb	r3, [r3, #2]
 8005eda:	021b      	lsls	r3, r3, #8
 8005edc:	430b      	orrs	r3, r1
 8005ede:	4910      	ldr	r1, [pc, #64]	; (8005f20 <udpServer_init+0xcc>)
 8005ee0:	78c9      	ldrb	r1, [r1, #3]
 8005ee2:	430b      	orrs	r3, r1
 8005ee4:	0e1b      	lsrs	r3, r3, #24
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]

	err = udp_bind(upcb, &myIPADDR, 7);  // 7 is the server UDP port
 8005eea:	f107 030c 	add.w	r3, r7, #12
 8005eee:	2207      	movs	r2, #7
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	6978      	ldr	r0, [r7, #20]
 8005ef4:	f007 fa1e 	bl	800d334 <udp_bind>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	74fb      	strb	r3, [r7, #19]

	/* 3. Set a receive callback for the upcb */
	if (err == ERR_OK) {
 8005efc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d105      	bne.n	8005f10 <udpServer_init+0xbc>
		udp_recv(upcb, udp_receive_callback, rec_arg);
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	4907      	ldr	r1, [pc, #28]	; (8005f24 <udpServer_init+0xd0>)
 8005f08:	6978      	ldr	r0, [r7, #20]
 8005f0a:	f007 faef 	bl	800d4ec <udp_recv>
	} else {
		udp_remove(upcb);
	}
}
 8005f0e:	e002      	b.n	8005f16 <udpServer_init+0xc2>
		udp_remove(upcb);
 8005f10:	6978      	ldr	r0, [r7, #20]
 8005f12:	f007 fafd 	bl	800d510 <udp_remove>
}
 8005f16:	bf00      	nop
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	200007c8 	.word	0x200007c8
 8005f24:	08005d51 	.word	0x08005d51

08005f28 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 16;
 8005f2e:	4b8d      	ldr	r3, [pc, #564]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005f30:	2210      	movs	r2, #16
 8005f32:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8005f34:	4b8b      	ldr	r3, [pc, #556]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8005f3a:	4b8a      	ldr	r3, [pc, #552]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 16;
 8005f40:	4b88      	ldr	r3, [pc, #544]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005f42:	2210      	movs	r2, #16
 8005f44:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005f46:	4b88      	ldr	r3, [pc, #544]	; (8006168 <MX_LWIP_Init+0x240>)
 8005f48:	22ff      	movs	r2, #255	; 0xff
 8005f4a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005f4c:	4b86      	ldr	r3, [pc, #536]	; (8006168 <MX_LWIP_Init+0x240>)
 8005f4e:	22ff      	movs	r2, #255	; 0xff
 8005f50:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005f52:	4b85      	ldr	r3, [pc, #532]	; (8006168 <MX_LWIP_Init+0x240>)
 8005f54:	22ff      	movs	r2, #255	; 0xff
 8005f56:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005f58:	4b83      	ldr	r3, [pc, #524]	; (8006168 <MX_LWIP_Init+0x240>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 16;
 8005f5e:	4b83      	ldr	r3, [pc, #524]	; (800616c <MX_LWIP_Init+0x244>)
 8005f60:	2210      	movs	r2, #16
 8005f62:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8005f64:	4b81      	ldr	r3, [pc, #516]	; (800616c <MX_LWIP_Init+0x244>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005f6a:	4b80      	ldr	r3, [pc, #512]	; (800616c <MX_LWIP_Init+0x244>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005f70:	4b7e      	ldr	r3, [pc, #504]	; (800616c <MX_LWIP_Init+0x244>)
 8005f72:	2201      	movs	r2, #1
 8005f74:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8005f76:	f000 fce1 	bl	800693c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005f7a:	4b7a      	ldr	r3, [pc, #488]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	061a      	lsls	r2, r3, #24
 8005f80:	4b78      	ldr	r3, [pc, #480]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	041b      	lsls	r3, r3, #16
 8005f86:	431a      	orrs	r2, r3
 8005f88:	4b76      	ldr	r3, [pc, #472]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005f8a:	789b      	ldrb	r3, [r3, #2]
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	4a74      	ldr	r2, [pc, #464]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005f92:	78d2      	ldrb	r2, [r2, #3]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	061a      	lsls	r2, r3, #24
 8005f98:	4b72      	ldr	r3, [pc, #456]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	0619      	lsls	r1, r3, #24
 8005f9e:	4b71      	ldr	r3, [pc, #452]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005fa0:	785b      	ldrb	r3, [r3, #1]
 8005fa2:	041b      	lsls	r3, r3, #16
 8005fa4:	4319      	orrs	r1, r3
 8005fa6:	4b6f      	ldr	r3, [pc, #444]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005fa8:	789b      	ldrb	r3, [r3, #2]
 8005faa:	021b      	lsls	r3, r3, #8
 8005fac:	430b      	orrs	r3, r1
 8005fae:	496d      	ldr	r1, [pc, #436]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005fb0:	78c9      	ldrb	r1, [r1, #3]
 8005fb2:	430b      	orrs	r3, r1
 8005fb4:	021b      	lsls	r3, r3, #8
 8005fb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	4b69      	ldr	r3, [pc, #420]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	0619      	lsls	r1, r3, #24
 8005fc2:	4b68      	ldr	r3, [pc, #416]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005fc4:	785b      	ldrb	r3, [r3, #1]
 8005fc6:	041b      	lsls	r3, r3, #16
 8005fc8:	4319      	orrs	r1, r3
 8005fca:	4b66      	ldr	r3, [pc, #408]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005fcc:	789b      	ldrb	r3, [r3, #2]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	430b      	orrs	r3, r1
 8005fd2:	4964      	ldr	r1, [pc, #400]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005fd4:	78c9      	ldrb	r1, [r1, #3]
 8005fd6:	430b      	orrs	r3, r1
 8005fd8:	0a1b      	lsrs	r3, r3, #8
 8005fda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	4b60      	ldr	r3, [pc, #384]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	0619      	lsls	r1, r3, #24
 8005fe6:	4b5f      	ldr	r3, [pc, #380]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005fe8:	785b      	ldrb	r3, [r3, #1]
 8005fea:	041b      	lsls	r3, r3, #16
 8005fec:	4319      	orrs	r1, r3
 8005fee:	4b5d      	ldr	r3, [pc, #372]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005ff0:	789b      	ldrb	r3, [r3, #2]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	430b      	orrs	r3, r1
 8005ff6:	495b      	ldr	r1, [pc, #364]	; (8006164 <MX_LWIP_Init+0x23c>)
 8005ff8:	78c9      	ldrb	r1, [r1, #3]
 8005ffa:	430b      	orrs	r3, r1
 8005ffc:	0e1b      	lsrs	r3, r3, #24
 8005ffe:	4313      	orrs	r3, r2
 8006000:	4a5b      	ldr	r2, [pc, #364]	; (8006170 <MX_LWIP_Init+0x248>)
 8006002:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006004:	4b58      	ldr	r3, [pc, #352]	; (8006168 <MX_LWIP_Init+0x240>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	061a      	lsls	r2, r3, #24
 800600a:	4b57      	ldr	r3, [pc, #348]	; (8006168 <MX_LWIP_Init+0x240>)
 800600c:	785b      	ldrb	r3, [r3, #1]
 800600e:	041b      	lsls	r3, r3, #16
 8006010:	431a      	orrs	r2, r3
 8006012:	4b55      	ldr	r3, [pc, #340]	; (8006168 <MX_LWIP_Init+0x240>)
 8006014:	789b      	ldrb	r3, [r3, #2]
 8006016:	021b      	lsls	r3, r3, #8
 8006018:	4313      	orrs	r3, r2
 800601a:	4a53      	ldr	r2, [pc, #332]	; (8006168 <MX_LWIP_Init+0x240>)
 800601c:	78d2      	ldrb	r2, [r2, #3]
 800601e:	4313      	orrs	r3, r2
 8006020:	061a      	lsls	r2, r3, #24
 8006022:	4b51      	ldr	r3, [pc, #324]	; (8006168 <MX_LWIP_Init+0x240>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	0619      	lsls	r1, r3, #24
 8006028:	4b4f      	ldr	r3, [pc, #316]	; (8006168 <MX_LWIP_Init+0x240>)
 800602a:	785b      	ldrb	r3, [r3, #1]
 800602c:	041b      	lsls	r3, r3, #16
 800602e:	4319      	orrs	r1, r3
 8006030:	4b4d      	ldr	r3, [pc, #308]	; (8006168 <MX_LWIP_Init+0x240>)
 8006032:	789b      	ldrb	r3, [r3, #2]
 8006034:	021b      	lsls	r3, r3, #8
 8006036:	430b      	orrs	r3, r1
 8006038:	494b      	ldr	r1, [pc, #300]	; (8006168 <MX_LWIP_Init+0x240>)
 800603a:	78c9      	ldrb	r1, [r1, #3]
 800603c:	430b      	orrs	r3, r1
 800603e:	021b      	lsls	r3, r3, #8
 8006040:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006044:	431a      	orrs	r2, r3
 8006046:	4b48      	ldr	r3, [pc, #288]	; (8006168 <MX_LWIP_Init+0x240>)
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	0619      	lsls	r1, r3, #24
 800604c:	4b46      	ldr	r3, [pc, #280]	; (8006168 <MX_LWIP_Init+0x240>)
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	041b      	lsls	r3, r3, #16
 8006052:	4319      	orrs	r1, r3
 8006054:	4b44      	ldr	r3, [pc, #272]	; (8006168 <MX_LWIP_Init+0x240>)
 8006056:	789b      	ldrb	r3, [r3, #2]
 8006058:	021b      	lsls	r3, r3, #8
 800605a:	430b      	orrs	r3, r1
 800605c:	4942      	ldr	r1, [pc, #264]	; (8006168 <MX_LWIP_Init+0x240>)
 800605e:	78c9      	ldrb	r1, [r1, #3]
 8006060:	430b      	orrs	r3, r1
 8006062:	0a1b      	lsrs	r3, r3, #8
 8006064:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006068:	431a      	orrs	r2, r3
 800606a:	4b3f      	ldr	r3, [pc, #252]	; (8006168 <MX_LWIP_Init+0x240>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	0619      	lsls	r1, r3, #24
 8006070:	4b3d      	ldr	r3, [pc, #244]	; (8006168 <MX_LWIP_Init+0x240>)
 8006072:	785b      	ldrb	r3, [r3, #1]
 8006074:	041b      	lsls	r3, r3, #16
 8006076:	4319      	orrs	r1, r3
 8006078:	4b3b      	ldr	r3, [pc, #236]	; (8006168 <MX_LWIP_Init+0x240>)
 800607a:	789b      	ldrb	r3, [r3, #2]
 800607c:	021b      	lsls	r3, r3, #8
 800607e:	430b      	orrs	r3, r1
 8006080:	4939      	ldr	r1, [pc, #228]	; (8006168 <MX_LWIP_Init+0x240>)
 8006082:	78c9      	ldrb	r1, [r1, #3]
 8006084:	430b      	orrs	r3, r1
 8006086:	0e1b      	lsrs	r3, r3, #24
 8006088:	4313      	orrs	r3, r2
 800608a:	4a3a      	ldr	r2, [pc, #232]	; (8006174 <MX_LWIP_Init+0x24c>)
 800608c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800608e:	4b37      	ldr	r3, [pc, #220]	; (800616c <MX_LWIP_Init+0x244>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	061a      	lsls	r2, r3, #24
 8006094:	4b35      	ldr	r3, [pc, #212]	; (800616c <MX_LWIP_Init+0x244>)
 8006096:	785b      	ldrb	r3, [r3, #1]
 8006098:	041b      	lsls	r3, r3, #16
 800609a:	431a      	orrs	r2, r3
 800609c:	4b33      	ldr	r3, [pc, #204]	; (800616c <MX_LWIP_Init+0x244>)
 800609e:	789b      	ldrb	r3, [r3, #2]
 80060a0:	021b      	lsls	r3, r3, #8
 80060a2:	4313      	orrs	r3, r2
 80060a4:	4a31      	ldr	r2, [pc, #196]	; (800616c <MX_LWIP_Init+0x244>)
 80060a6:	78d2      	ldrb	r2, [r2, #3]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	061a      	lsls	r2, r3, #24
 80060ac:	4b2f      	ldr	r3, [pc, #188]	; (800616c <MX_LWIP_Init+0x244>)
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	0619      	lsls	r1, r3, #24
 80060b2:	4b2e      	ldr	r3, [pc, #184]	; (800616c <MX_LWIP_Init+0x244>)
 80060b4:	785b      	ldrb	r3, [r3, #1]
 80060b6:	041b      	lsls	r3, r3, #16
 80060b8:	4319      	orrs	r1, r3
 80060ba:	4b2c      	ldr	r3, [pc, #176]	; (800616c <MX_LWIP_Init+0x244>)
 80060bc:	789b      	ldrb	r3, [r3, #2]
 80060be:	021b      	lsls	r3, r3, #8
 80060c0:	430b      	orrs	r3, r1
 80060c2:	492a      	ldr	r1, [pc, #168]	; (800616c <MX_LWIP_Init+0x244>)
 80060c4:	78c9      	ldrb	r1, [r1, #3]
 80060c6:	430b      	orrs	r3, r1
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060ce:	431a      	orrs	r2, r3
 80060d0:	4b26      	ldr	r3, [pc, #152]	; (800616c <MX_LWIP_Init+0x244>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	0619      	lsls	r1, r3, #24
 80060d6:	4b25      	ldr	r3, [pc, #148]	; (800616c <MX_LWIP_Init+0x244>)
 80060d8:	785b      	ldrb	r3, [r3, #1]
 80060da:	041b      	lsls	r3, r3, #16
 80060dc:	4319      	orrs	r1, r3
 80060de:	4b23      	ldr	r3, [pc, #140]	; (800616c <MX_LWIP_Init+0x244>)
 80060e0:	789b      	ldrb	r3, [r3, #2]
 80060e2:	021b      	lsls	r3, r3, #8
 80060e4:	430b      	orrs	r3, r1
 80060e6:	4921      	ldr	r1, [pc, #132]	; (800616c <MX_LWIP_Init+0x244>)
 80060e8:	78c9      	ldrb	r1, [r1, #3]
 80060ea:	430b      	orrs	r3, r1
 80060ec:	0a1b      	lsrs	r3, r3, #8
 80060ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80060f2:	431a      	orrs	r2, r3
 80060f4:	4b1d      	ldr	r3, [pc, #116]	; (800616c <MX_LWIP_Init+0x244>)
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	0619      	lsls	r1, r3, #24
 80060fa:	4b1c      	ldr	r3, [pc, #112]	; (800616c <MX_LWIP_Init+0x244>)
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	041b      	lsls	r3, r3, #16
 8006100:	4319      	orrs	r1, r3
 8006102:	4b1a      	ldr	r3, [pc, #104]	; (800616c <MX_LWIP_Init+0x244>)
 8006104:	789b      	ldrb	r3, [r3, #2]
 8006106:	021b      	lsls	r3, r3, #8
 8006108:	430b      	orrs	r3, r1
 800610a:	4918      	ldr	r1, [pc, #96]	; (800616c <MX_LWIP_Init+0x244>)
 800610c:	78c9      	ldrb	r1, [r1, #3]
 800610e:	430b      	orrs	r3, r1
 8006110:	0e1b      	lsrs	r3, r3, #24
 8006112:	4313      	orrs	r3, r2
 8006114:	4a18      	ldr	r2, [pc, #96]	; (8006178 <MX_LWIP_Init+0x250>)
 8006116:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8006118:	4b18      	ldr	r3, [pc, #96]	; (800617c <MX_LWIP_Init+0x254>)
 800611a:	9302      	str	r3, [sp, #8]
 800611c:	4b18      	ldr	r3, [pc, #96]	; (8006180 <MX_LWIP_Init+0x258>)
 800611e:	9301      	str	r3, [sp, #4]
 8006120:	2300      	movs	r3, #0
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	4b14      	ldr	r3, [pc, #80]	; (8006178 <MX_LWIP_Init+0x250>)
 8006126:	4a13      	ldr	r2, [pc, #76]	; (8006174 <MX_LWIP_Init+0x24c>)
 8006128:	4911      	ldr	r1, [pc, #68]	; (8006170 <MX_LWIP_Init+0x248>)
 800612a:	4816      	ldr	r0, [pc, #88]	; (8006184 <MX_LWIP_Init+0x25c>)
 800612c:	f001 f8a4 	bl	8007278 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006130:	4814      	ldr	r0, [pc, #80]	; (8006184 <MX_LWIP_Init+0x25c>)
 8006132:	f001 f983 	bl	800743c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006136:	4b13      	ldr	r3, [pc, #76]	; (8006184 <MX_LWIP_Init+0x25c>)
 8006138:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800613c:	089b      	lsrs	r3, r3, #2
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d003      	beq.n	8006150 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006148:	480e      	ldr	r0, [pc, #56]	; (8006184 <MX_LWIP_Init+0x25c>)
 800614a:	f001 f985 	bl	8007458 <netif_set_up>
 800614e:	e002      	b.n	8006156 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006150:	480c      	ldr	r0, [pc, #48]	; (8006184 <MX_LWIP_Init+0x25c>)
 8006152:	f001 f9c5 	bl	80074e0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8006156:	490c      	ldr	r1, [pc, #48]	; (8006188 <MX_LWIP_Init+0x260>)
 8006158:	480a      	ldr	r0, [pc, #40]	; (8006184 <MX_LWIP_Init+0x25c>)
 800615a:	f001 f9e3 	bl	8007524 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800615e:	bf00      	nop
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	200007c8 	.word	0x200007c8
 8006168:	200007cc 	.word	0x200007cc
 800616c:	200007d0 	.word	0x200007d0
 8006170:	200007bc 	.word	0x200007bc
 8006174:	200007c0 	.word	0x200007c0
 8006178:	200007c4 	.word	0x200007c4
 800617c:	0800fa99 	.word	0x0800fa99
 8006180:	0800677d 	.word	0x0800677d
 8006184:	20000788 	.word	0x20000788
 8006188:	080067e9 	.word	0x080067e9

0800618c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8006190:	4803      	ldr	r0, [pc, #12]	; (80061a0 <MX_LWIP_Process+0x14>)
 8006192:	f000 fad3 	bl	800673c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8006196:	f006 fdb5 	bl	800cd04 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800619a:	bf00      	nop
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000788 	.word	0x20000788

080061a4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08e      	sub	sp, #56	; 0x38
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	605a      	str	r2, [r3, #4]
 80061b6:	609a      	str	r2, [r3, #8]
 80061b8:	60da      	str	r2, [r3, #12]
 80061ba:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a59      	ldr	r2, [pc, #356]	; (8006328 <HAL_ETH_MspInit+0x184>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	f040 80ac 	bne.w	8006320 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80061c8:	2300      	movs	r3, #0
 80061ca:	623b      	str	r3, [r7, #32]
 80061cc:	4b57      	ldr	r3, [pc, #348]	; (800632c <HAL_ETH_MspInit+0x188>)
 80061ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d0:	4a56      	ldr	r2, [pc, #344]	; (800632c <HAL_ETH_MspInit+0x188>)
 80061d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061d6:	6313      	str	r3, [r2, #48]	; 0x30
 80061d8:	4b54      	ldr	r3, [pc, #336]	; (800632c <HAL_ETH_MspInit+0x188>)
 80061da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e0:	623b      	str	r3, [r7, #32]
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	2300      	movs	r3, #0
 80061e6:	61fb      	str	r3, [r7, #28]
 80061e8:	4b50      	ldr	r3, [pc, #320]	; (800632c <HAL_ETH_MspInit+0x188>)
 80061ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ec:	4a4f      	ldr	r2, [pc, #316]	; (800632c <HAL_ETH_MspInit+0x188>)
 80061ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061f2:	6313      	str	r3, [r2, #48]	; 0x30
 80061f4:	4b4d      	ldr	r3, [pc, #308]	; (800632c <HAL_ETH_MspInit+0x188>)
 80061f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061fc:	61fb      	str	r3, [r7, #28]
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	2300      	movs	r3, #0
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	4b49      	ldr	r3, [pc, #292]	; (800632c <HAL_ETH_MspInit+0x188>)
 8006206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006208:	4a48      	ldr	r2, [pc, #288]	; (800632c <HAL_ETH_MspInit+0x188>)
 800620a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800620e:	6313      	str	r3, [r2, #48]	; 0x30
 8006210:	4b46      	ldr	r3, [pc, #280]	; (800632c <HAL_ETH_MspInit+0x188>)
 8006212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006218:	61bb      	str	r3, [r7, #24]
 800621a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	4b42      	ldr	r3, [pc, #264]	; (800632c <HAL_ETH_MspInit+0x188>)
 8006222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006224:	4a41      	ldr	r2, [pc, #260]	; (800632c <HAL_ETH_MspInit+0x188>)
 8006226:	f043 0304 	orr.w	r3, r3, #4
 800622a:	6313      	str	r3, [r2, #48]	; 0x30
 800622c:	4b3f      	ldr	r3, [pc, #252]	; (800632c <HAL_ETH_MspInit+0x188>)
 800622e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006238:	2300      	movs	r3, #0
 800623a:	613b      	str	r3, [r7, #16]
 800623c:	4b3b      	ldr	r3, [pc, #236]	; (800632c <HAL_ETH_MspInit+0x188>)
 800623e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006240:	4a3a      	ldr	r2, [pc, #232]	; (800632c <HAL_ETH_MspInit+0x188>)
 8006242:	f043 0301 	orr.w	r3, r3, #1
 8006246:	6313      	str	r3, [r2, #48]	; 0x30
 8006248:	4b38      	ldr	r3, [pc, #224]	; (800632c <HAL_ETH_MspInit+0x188>)
 800624a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	613b      	str	r3, [r7, #16]
 8006252:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	4b34      	ldr	r3, [pc, #208]	; (800632c <HAL_ETH_MspInit+0x188>)
 800625a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625c:	4a33      	ldr	r2, [pc, #204]	; (800632c <HAL_ETH_MspInit+0x188>)
 800625e:	f043 0302 	orr.w	r3, r3, #2
 8006262:	6313      	str	r3, [r2, #48]	; 0x30
 8006264:	4b31      	ldr	r3, [pc, #196]	; (800632c <HAL_ETH_MspInit+0x188>)
 8006266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006270:	2300      	movs	r3, #0
 8006272:	60bb      	str	r3, [r7, #8]
 8006274:	4b2d      	ldr	r3, [pc, #180]	; (800632c <HAL_ETH_MspInit+0x188>)
 8006276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006278:	4a2c      	ldr	r2, [pc, #176]	; (800632c <HAL_ETH_MspInit+0x188>)
 800627a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800627e:	6313      	str	r3, [r2, #48]	; 0x30
 8006280:	4b2a      	ldr	r3, [pc, #168]	; (800632c <HAL_ETH_MspInit+0x188>)
 8006282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006288:	60bb      	str	r3, [r7, #8]
 800628a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800628c:	2332      	movs	r3, #50	; 0x32
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006290:	2302      	movs	r3, #2
 8006292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006294:	2300      	movs	r3, #0
 8006296:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006298:	2303      	movs	r3, #3
 800629a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800629c:	230b      	movs	r3, #11
 800629e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062a4:	4619      	mov	r1, r3
 80062a6:	4822      	ldr	r0, [pc, #136]	; (8006330 <HAL_ETH_MspInit+0x18c>)
 80062a8:	f7fe fa44 	bl	8004734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80062ac:	2386      	movs	r3, #134	; 0x86
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b0:	2302      	movs	r3, #2
 80062b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b4:	2300      	movs	r3, #0
 80062b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062b8:	2303      	movs	r3, #3
 80062ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80062bc:	230b      	movs	r3, #11
 80062be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062c4:	4619      	mov	r1, r3
 80062c6:	481b      	ldr	r0, [pc, #108]	; (8006334 <HAL_ETH_MspInit+0x190>)
 80062c8:	f7fe fa34 	bl	8004734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80062cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062d2:	2302      	movs	r3, #2
 80062d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062da:	2303      	movs	r3, #3
 80062dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80062de:	230b      	movs	r3, #11
 80062e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80062e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062e6:	4619      	mov	r1, r3
 80062e8:	4813      	ldr	r0, [pc, #76]	; (8006338 <HAL_ETH_MspInit+0x194>)
 80062ea:	f7fe fa23 	bl	8004734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80062ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062f4:	2302      	movs	r3, #2
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062f8:	2300      	movs	r3, #0
 80062fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062fc:	2303      	movs	r3, #3
 80062fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006300:	230b      	movs	r3, #11
 8006302:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006308:	4619      	mov	r1, r3
 800630a:	480c      	ldr	r0, [pc, #48]	; (800633c <HAL_ETH_MspInit+0x198>)
 800630c:	f7fe fa12 	bl	8004734 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8006310:	2200      	movs	r2, #0
 8006312:	2100      	movs	r1, #0
 8006314:	203d      	movs	r0, #61	; 0x3d
 8006316:	f7fc ff6c 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800631a:	203d      	movs	r0, #61	; 0x3d
 800631c:	f7fc ff85 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006320:	bf00      	nop
 8006322:	3738      	adds	r7, #56	; 0x38
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	40028000 	.word	0x40028000
 800632c:	40023800 	.word	0x40023800
 8006330:	40020800 	.word	0x40020800
 8006334:	40020000 	.word	0x40020000
 8006338:	40020400 	.word	0x40020400
 800633c:	40021800 	.word	0x40021800

08006340 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006348:	2300      	movs	r3, #0
 800634a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800634c:	4b4d      	ldr	r3, [pc, #308]	; (8006484 <low_level_init+0x144>)
 800634e:	4a4e      	ldr	r2, [pc, #312]	; (8006488 <low_level_init+0x148>)
 8006350:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006352:	4b4c      	ldr	r3, [pc, #304]	; (8006484 <low_level_init+0x144>)
 8006354:	2201      	movs	r2, #1
 8006356:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8006358:	4b4a      	ldr	r3, [pc, #296]	; (8006484 <low_level_init+0x144>)
 800635a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800635e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006360:	4b48      	ldr	r3, [pc, #288]	; (8006484 <low_level_init+0x144>)
 8006362:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006366:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006368:	4b46      	ldr	r3, [pc, #280]	; (8006484 <low_level_init+0x144>)
 800636a:	2200      	movs	r2, #0
 800636c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x56;
 800636e:	2356      	movs	r3, #86	; 0x56
 8006370:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0xCD;
 8006372:	23cd      	movs	r3, #205	; 0xcd
 8006374:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x43;
 8006376:	2343      	movs	r3, #67	; 0x43
 8006378:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x54;
 800637a:	2354      	movs	r3, #84	; 0x54
 800637c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x4F;
 800637e:	234f      	movs	r3, #79	; 0x4f
 8006380:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x52;
 8006382:	2352      	movs	r3, #82	; 0x52
 8006384:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006386:	4a3f      	ldr	r2, [pc, #252]	; (8006484 <low_level_init+0x144>)
 8006388:	f107 0308 	add.w	r3, r7, #8
 800638c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800638e:	4b3d      	ldr	r3, [pc, #244]	; (8006484 <low_level_init+0x144>)
 8006390:	2200      	movs	r2, #0
 8006392:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006394:	4b3b      	ldr	r3, [pc, #236]	; (8006484 <low_level_init+0x144>)
 8006396:	2200      	movs	r2, #0
 8006398:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800639a:	4b3a      	ldr	r3, [pc, #232]	; (8006484 <low_level_init+0x144>)
 800639c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80063a0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80063a2:	4838      	ldr	r0, [pc, #224]	; (8006484 <low_level_init+0x144>)
 80063a4:	f7fd f850 	bl	8003448 <HAL_ETH_Init>
 80063a8:	4603      	mov	r3, r0
 80063aa:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d108      	bne.n	80063c4 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80063b8:	f043 0304 	orr.w	r3, r3, #4
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80063c4:	2304      	movs	r3, #4
 80063c6:	4a31      	ldr	r2, [pc, #196]	; (800648c <low_level_init+0x14c>)
 80063c8:	4931      	ldr	r1, [pc, #196]	; (8006490 <low_level_init+0x150>)
 80063ca:	482e      	ldr	r0, [pc, #184]	; (8006484 <low_level_init+0x144>)
 80063cc:	f7fd f9c8 	bl	8003760 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80063d0:	2304      	movs	r3, #4
 80063d2:	4a30      	ldr	r2, [pc, #192]	; (8006494 <low_level_init+0x154>)
 80063d4:	4930      	ldr	r1, [pc, #192]	; (8006498 <low_level_init+0x158>)
 80063d6:	482b      	ldr	r0, [pc, #172]	; (8006484 <low_level_init+0x144>)
 80063d8:	f7fd fa29 	bl	800382e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2206      	movs	r2, #6
 80063e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80063e4:	4b27      	ldr	r3, [pc, #156]	; (8006484 <low_level_init+0x144>)
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	781a      	ldrb	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80063f0:	4b24      	ldr	r3, [pc, #144]	; (8006484 <low_level_init+0x144>)
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	785a      	ldrb	r2, [r3, #1]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80063fc:	4b21      	ldr	r3, [pc, #132]	; (8006484 <low_level_init+0x144>)
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	789a      	ldrb	r2, [r3, #2]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006408:	4b1e      	ldr	r3, [pc, #120]	; (8006484 <low_level_init+0x144>)
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	78da      	ldrb	r2, [r3, #3]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006414:	4b1b      	ldr	r3, [pc, #108]	; (8006484 <low_level_init+0x144>)
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	791a      	ldrb	r2, [r3, #4]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006420:	4b18      	ldr	r3, [pc, #96]	; (8006484 <low_level_init+0x144>)
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	795a      	ldrb	r2, [r3, #5]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006432:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800643a:	f043 030a 	orr.w	r3, r3, #10
 800643e:	b2da      	uxtb	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006446:	480f      	ldr	r0, [pc, #60]	; (8006484 <low_level_init+0x144>)
 8006448:	f7fd fd14 	bl	8003e74 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800644c:	f107 0310 	add.w	r3, r7, #16
 8006450:	461a      	mov	r2, r3
 8006452:	211d      	movs	r1, #29
 8006454:	480b      	ldr	r0, [pc, #44]	; (8006484 <low_level_init+0x144>)
 8006456:	f7fd fc3f 	bl	8003cd8 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f043 030b 	orr.w	r3, r3, #11
 8006460:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	461a      	mov	r2, r3
 8006466:	211d      	movs	r1, #29
 8006468:	4806      	ldr	r0, [pc, #24]	; (8006484 <low_level_init+0x144>)
 800646a:	f7fd fc9d 	bl	8003da8 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800646e:	f107 0310 	add.w	r3, r7, #16
 8006472:	461a      	mov	r2, r3
 8006474:	211d      	movs	r1, #29
 8006476:	4803      	ldr	r0, [pc, #12]	; (8006484 <low_level_init+0x144>)
 8006478:	f7fd fc2e 	bl	8003cd8 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800647c:	bf00      	nop
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	20003874 	.word	0x20003874
 8006488:	40028000 	.word	0x40028000
 800648c:	200020a4 	.word	0x200020a4
 8006490:	20000854 	.word	0x20000854
 8006494:	200008d4 	.word	0x200008d4
 8006498:	200007d4 	.word	0x200007d4

0800649c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08a      	sub	sp, #40	; 0x28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80064a6:	4b4b      	ldr	r3, [pc, #300]	; (80065d4 <low_level_output+0x138>)
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80064ae:	2300      	movs	r3, #0
 80064b0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80064b2:	2300      	movs	r3, #0
 80064b4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80064ba:	2300      	movs	r3, #0
 80064bc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80064be:	4b45      	ldr	r3, [pc, #276]	; (80065d4 <low_level_output+0x138>)
 80064c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	623b      	str	r3, [r7, #32]
 80064cc:	e05a      	b.n	8006584 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	da03      	bge.n	80064de <low_level_output+0x42>
      {
        errval = ERR_USE;
 80064d6:	23f8      	movs	r3, #248	; 0xf8
 80064d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80064dc:	e05c      	b.n	8006598 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	895b      	ldrh	r3, [r3, #10]
 80064e2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80064e8:	e02f      	b.n	800654a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	18d0      	adds	r0, r2, r3
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	18d1      	adds	r1, r2, r3
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80064fe:	3304      	adds	r3, #4
 8006500:	461a      	mov	r2, r3
 8006502:	f00b fa8d 	bl	8011a20 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	da03      	bge.n	800651c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006514:	23f8      	movs	r3, #248	; 0xf8
 8006516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800651a:	e03d      	b.n	8006598 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800652c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006538:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006544:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	4413      	add	r3, r2
 8006550:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006554:	4293      	cmp	r3, r2
 8006556:	d8c8      	bhi.n	80064ea <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006558:	69fa      	ldr	r2, [r7, #28]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	18d0      	adds	r0, r2, r3
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	4413      	add	r3, r2
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4619      	mov	r1, r3
 800656a:	f00b fa59 	bl	8011a20 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4413      	add	r3, r2
 8006574:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	623b      	str	r3, [r7, #32]
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1a1      	bne.n	80064ce <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800658a:	6979      	ldr	r1, [r7, #20]
 800658c:	4811      	ldr	r0, [pc, #68]	; (80065d4 <low_level_output+0x138>)
 800658e:	f7fd f9b9 	bl	8003904 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006598:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <low_level_output+0x138>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00d      	beq.n	80065c6 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80065aa:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <low_level_output+0x138>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065b2:	461a      	mov	r2, r3
 80065b4:	2320      	movs	r3, #32
 80065b6:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80065b8:	4b06      	ldr	r3, [pc, #24]	; (80065d4 <low_level_output+0x138>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065c0:	461a      	mov	r2, r3
 80065c2:	2300      	movs	r3, #0
 80065c4:	6053      	str	r3, [r2, #4]
  }
  return errval;
 80065c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3728      	adds	r7, #40	; 0x28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20003874 	.word	0x20003874

080065d8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08c      	sub	sp, #48	; 0x30
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80065e0:	2300      	movs	r3, #0
 80065e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80065e4:	2300      	movs	r3, #0
 80065e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80065f0:	2300      	movs	r3, #0
 80065f2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80065f8:	2300      	movs	r3, #0
 80065fa:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80065fc:	484e      	ldr	r0, [pc, #312]	; (8006738 <low_level_input+0x160>)
 80065fe:	f7fd fa69 	bl	8003ad4 <HAL_ETH_GetReceivedFrame>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <low_level_input+0x34>

    return NULL;
 8006608:	2300      	movs	r3, #0
 800660a:	e090      	b.n	800672e <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800660c:	4b4a      	ldr	r3, [pc, #296]	; (8006738 <low_level_input+0x160>)
 800660e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006610:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006612:	4b49      	ldr	r3, [pc, #292]	; (8006738 <low_level_input+0x160>)
 8006614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006616:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8006618:	89fb      	ldrh	r3, [r7, #14]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d006      	beq.n	800662c <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800661e:	89fb      	ldrh	r3, [r7, #14]
 8006620:	2203      	movs	r2, #3
 8006622:	4619      	mov	r1, r3
 8006624:	2004      	movs	r0, #4
 8006626:	f000 ffbd 	bl	80075a4 <pbuf_alloc>
 800662a:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	2b00      	cmp	r3, #0
 8006630:	d04b      	beq.n	80066ca <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006632:	4b41      	ldr	r3, [pc, #260]	; (8006738 <low_level_input+0x160>)
 8006634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006636:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006638:	2300      	movs	r3, #0
 800663a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006640:	e040      	b.n	80066c4 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	895b      	ldrh	r3, [r3, #10]
 8006646:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006648:	2300      	movs	r3, #0
 800664a:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800664c:	e021      	b.n	8006692 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	18d0      	adds	r0, r2, r3
 8006656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	18d1      	adds	r1, r2, r3
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006662:	3304      	adds	r3, #4
 8006664:	461a      	mov	r2, r3
 8006666:	f00b f9db 	bl	8011a20 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	4413      	add	r3, r2
 800667c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006680:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800668c:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800668e:	2300      	movs	r3, #0
 8006690:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	4413      	add	r3, r2
 8006698:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800669c:	4293      	cmp	r3, r2
 800669e:	d8d6      	bhi.n	800664e <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	18d0      	adds	r0, r2, r3
 80066a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	4413      	add	r3, r2
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	4619      	mov	r1, r3
 80066b2:	f00b f9b5 	bl	8011a20 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	4413      	add	r3, r2
 80066bc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80066be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1bb      	bne.n	8006642 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80066ca:	4b1b      	ldr	r3, [pc, #108]	; (8006738 <low_level_input+0x160>)
 80066cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ce:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80066d0:	2300      	movs	r3, #0
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	e00b      	b.n	80066ee <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	3301      	adds	r3, #1
 80066ec:	613b      	str	r3, [r7, #16]
 80066ee:	4b12      	ldr	r3, [pc, #72]	; (8006738 <low_level_input+0x160>)
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d3ee      	bcc.n	80066d6 <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80066f8:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <low_level_input+0x160>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80066fe:	4b0e      	ldr	r3, [pc, #56]	; (8006738 <low_level_input+0x160>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00d      	beq.n	800672c <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8006710:	4b09      	ldr	r3, [pc, #36]	; (8006738 <low_level_input+0x160>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006718:	461a      	mov	r2, r3
 800671a:	2380      	movs	r3, #128	; 0x80
 800671c:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800671e:	4b06      	ldr	r3, [pc, #24]	; (8006738 <low_level_input+0x160>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006726:	461a      	mov	r2, r3
 8006728:	2300      	movs	r3, #0
 800672a:	6093      	str	r3, [r2, #8]
  }
  return p;
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800672e:	4618      	mov	r0, r3
 8006730:	3730      	adds	r7, #48	; 0x30
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20003874 	.word	0x20003874

0800673c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff ff47 	bl	80065d8 <low_level_input>
 800674a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d010      	beq.n	8006774 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	6879      	ldr	r1, [r7, #4]
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	4798      	blx	r3
 800675c:	4603      	mov	r3, r0
 800675e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8006760:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d006      	beq.n	8006776 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f001 fa93 	bl	8007c94 <pbuf_free>
    p = NULL;
 800676e:	2300      	movs	r3, #0
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	e000      	b.n	8006776 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8006774:	bf00      	nop
  }
}
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d106      	bne.n	8006798 <ethernetif_init+0x1c>
 800678a:	4b0e      	ldr	r3, [pc, #56]	; (80067c4 <ethernetif_init+0x48>)
 800678c:	f240 221a 	movw	r2, #538	; 0x21a
 8006790:	490d      	ldr	r1, [pc, #52]	; (80067c8 <ethernetif_init+0x4c>)
 8006792:	480e      	ldr	r0, [pc, #56]	; (80067cc <ethernetif_init+0x50>)
 8006794:	f00b ffc8 	bl	8012728 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2273      	movs	r2, #115	; 0x73
 800679c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2274      	movs	r2, #116	; 0x74
 80067a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a09      	ldr	r2, [pc, #36]	; (80067d0 <ethernetif_init+0x54>)
 80067ac:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a08      	ldr	r2, [pc, #32]	; (80067d4 <ethernetif_init+0x58>)
 80067b2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff fdc3 	bl	8006340 <low_level_init>

  return ERR_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	080163e4 	.word	0x080163e4
 80067c8:	08016400 	.word	0x08016400
 80067cc:	08016410 	.word	0x08016410
 80067d0:	0800de75 	.word	0x0800de75
 80067d4:	0800649d 	.word	0x0800649d

080067d8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80067dc:	f7fc f84a 	bl	8002874 <HAL_GetTick>
 80067e0:	4603      	mov	r3, r0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80067f0:	2300      	movs	r3, #0
 80067f2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80067fe:	089b      	lsrs	r3, r3, #2
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d05d      	beq.n	80068c6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800680a:	4b34      	ldr	r3, [pc, #208]	; (80068dc <ethernetif_update_config+0xf4>)
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d03f      	beq.n	8006892 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006812:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006816:	2100      	movs	r1, #0
 8006818:	4830      	ldr	r0, [pc, #192]	; (80068dc <ethernetif_update_config+0xf4>)
 800681a:	f7fd fac5 	bl	8003da8 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800681e:	f7fc f829 	bl	8002874 <HAL_GetTick>
 8006822:	4603      	mov	r3, r0
 8006824:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006826:	f107 0308 	add.w	r3, r7, #8
 800682a:	461a      	mov	r2, r3
 800682c:	2101      	movs	r1, #1
 800682e:	482b      	ldr	r0, [pc, #172]	; (80068dc <ethernetif_update_config+0xf4>)
 8006830:	f7fd fa52 	bl	8003cd8 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006834:	f7fc f81e 	bl	8002874 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006842:	d828      	bhi.n	8006896 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f003 0320 	and.w	r3, r3, #32
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0eb      	beq.n	8006826 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800684e:	f107 0308 	add.w	r3, r7, #8
 8006852:	461a      	mov	r2, r3
 8006854:	2110      	movs	r1, #16
 8006856:	4821      	ldr	r0, [pc, #132]	; (80068dc <ethernetif_update_config+0xf4>)
 8006858:	f7fd fa3e 	bl	8003cd8 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f003 0304 	and.w	r3, r3, #4
 8006862:	2b00      	cmp	r3, #0
 8006864:	d004      	beq.n	8006870 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006866:	4b1d      	ldr	r3, [pc, #116]	; (80068dc <ethernetif_update_config+0xf4>)
 8006868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800686c:	60da      	str	r2, [r3, #12]
 800686e:	e002      	b.n	8006876 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006870:	4b1a      	ldr	r3, [pc, #104]	; (80068dc <ethernetif_update_config+0xf4>)
 8006872:	2200      	movs	r2, #0
 8006874:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006880:	4b16      	ldr	r3, [pc, #88]	; (80068dc <ethernetif_update_config+0xf4>)
 8006882:	2200      	movs	r2, #0
 8006884:	609a      	str	r2, [r3, #8]
 8006886:	e016      	b.n	80068b6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006888:	4b14      	ldr	r3, [pc, #80]	; (80068dc <ethernetif_update_config+0xf4>)
 800688a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800688e:	609a      	str	r2, [r3, #8]
 8006890:	e011      	b.n	80068b6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006892:	bf00      	nop
 8006894:	e000      	b.n	8006898 <ethernetif_update_config+0xb0>
          goto error;
 8006896:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006898:	4b10      	ldr	r3, [pc, #64]	; (80068dc <ethernetif_update_config+0xf4>)
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	08db      	lsrs	r3, r3, #3
 800689e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80068a0:	4b0e      	ldr	r3, [pc, #56]	; (80068dc <ethernetif_update_config+0xf4>)
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	085b      	lsrs	r3, r3, #1
 80068a6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80068a8:	4313      	orrs	r3, r2
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	461a      	mov	r2, r3
 80068ae:	2100      	movs	r1, #0
 80068b0:	480a      	ldr	r0, [pc, #40]	; (80068dc <ethernetif_update_config+0xf4>)
 80068b2:	f7fd fa79 	bl	8003da8 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80068b6:	2100      	movs	r1, #0
 80068b8:	4808      	ldr	r0, [pc, #32]	; (80068dc <ethernetif_update_config+0xf4>)
 80068ba:	f7fd fb39 	bl	8003f30 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80068be:	4807      	ldr	r0, [pc, #28]	; (80068dc <ethernetif_update_config+0xf4>)
 80068c0:	f7fd fad8 	bl	8003e74 <HAL_ETH_Start>
 80068c4:	e002      	b.n	80068cc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80068c6:	4805      	ldr	r0, [pc, #20]	; (80068dc <ethernetif_update_config+0xf4>)
 80068c8:	f7fd fb03 	bl	8003ed2 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f807 	bl	80068e0 <ethernetif_notify_conn_changed>
}
 80068d2:	bf00      	nop
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	20003874 	.word	0x20003874

080068e0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bc80      	pop	{r7}
 80068f0:	4770      	bx	lr

080068f2 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	4603      	mov	r3, r0
 80068fa:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80068fc:	88fb      	ldrh	r3, [r7, #6]
 80068fe:	ba5b      	rev16	r3, r3
 8006900:	b29b      	uxth	r3, r3
}
 8006902:	4618      	mov	r0, r3
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr

0800690c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	061a      	lsls	r2, r3, #24
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	021b      	lsls	r3, r3, #8
 800691c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006920:	431a      	orrs	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	0a1b      	lsrs	r3, r3, #8
 8006926:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800692a:	431a      	orrs	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	0e1b      	lsrs	r3, r3, #24
 8006930:	4313      	orrs	r3, r2
}
 8006932:	4618      	mov	r0, r3
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	bc80      	pop	{r7}
 800693a:	4770      	bx	lr

0800693c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006942:	2300      	movs	r3, #0
 8006944:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8006946:	f001 fcaf 	bl	80082a8 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800694a:	f000 f8a7 	bl	8006a9c <mem_init>
  memp_init();
 800694e:	f000 fba5 	bl	800709c <memp_init>
  pbuf_init();
  netif_init();
 8006952:	f000 fc8b 	bl	800726c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006956:	f006 fa27 	bl	800cda8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800695a:	f001 fcab 	bl	80082b4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800695e:	f006 f905 	bl	800cb6c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006962:	bf00      	nop
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
	...

0800696c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006974:	4b40      	ldr	r3, [pc, #256]	; (8006a78 <plug_holes+0x10c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	429a      	cmp	r2, r3
 800697c:	d206      	bcs.n	800698c <plug_holes+0x20>
 800697e:	4b3f      	ldr	r3, [pc, #252]	; (8006a7c <plug_holes+0x110>)
 8006980:	f240 125d 	movw	r2, #349	; 0x15d
 8006984:	493e      	ldr	r1, [pc, #248]	; (8006a80 <plug_holes+0x114>)
 8006986:	483f      	ldr	r0, [pc, #252]	; (8006a84 <plug_holes+0x118>)
 8006988:	f00b fece 	bl	8012728 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800698c:	4b3e      	ldr	r3, [pc, #248]	; (8006a88 <plug_holes+0x11c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	429a      	cmp	r2, r3
 8006994:	d306      	bcc.n	80069a4 <plug_holes+0x38>
 8006996:	4b39      	ldr	r3, [pc, #228]	; (8006a7c <plug_holes+0x110>)
 8006998:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800699c:	493b      	ldr	r1, [pc, #236]	; (8006a8c <plug_holes+0x120>)
 800699e:	4839      	ldr	r0, [pc, #228]	; (8006a84 <plug_holes+0x118>)
 80069a0:	f00b fec2 	bl	8012728 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	791b      	ldrb	r3, [r3, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d006      	beq.n	80069ba <plug_holes+0x4e>
 80069ac:	4b33      	ldr	r3, [pc, #204]	; (8006a7c <plug_holes+0x110>)
 80069ae:	f240 125f 	movw	r2, #351	; 0x15f
 80069b2:	4937      	ldr	r1, [pc, #220]	; (8006a90 <plug_holes+0x124>)
 80069b4:	4833      	ldr	r0, [pc, #204]	; (8006a84 <plug_holes+0x118>)
 80069b6:	f00b feb7 	bl	8012728 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80069c2:	d906      	bls.n	80069d2 <plug_holes+0x66>
 80069c4:	4b2d      	ldr	r3, [pc, #180]	; (8006a7c <plug_holes+0x110>)
 80069c6:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80069ca:	4932      	ldr	r1, [pc, #200]	; (8006a94 <plug_holes+0x128>)
 80069cc:	482d      	ldr	r0, [pc, #180]	; (8006a84 <plug_holes+0x118>)
 80069ce:	f00b feab 	bl	8012728 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 80069d2:	4b29      	ldr	r3, [pc, #164]	; (8006a78 <plug_holes+0x10c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	8812      	ldrh	r2, [r2, #0]
 80069da:	4413      	add	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d01f      	beq.n	8006a26 <plug_holes+0xba>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	791b      	ldrb	r3, [r3, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d11b      	bne.n	8006a26 <plug_holes+0xba>
 80069ee:	4b26      	ldr	r3, [pc, #152]	; (8006a88 <plug_holes+0x11c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d016      	beq.n	8006a26 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80069f8:	4b27      	ldr	r3, [pc, #156]	; (8006a98 <plug_holes+0x12c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d102      	bne.n	8006a08 <plug_holes+0x9c>
      lfree = mem;
 8006a02:	4a25      	ldr	r2, [pc, #148]	; (8006a98 <plug_holes+0x12c>)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	881a      	ldrh	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8006a10:	4b19      	ldr	r3, [pc, #100]	; (8006a78 <plug_holes+0x10c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	1ad1      	subs	r1, r2, r3
 8006a18:	4b17      	ldr	r3, [pc, #92]	; (8006a78 <plug_holes+0x10c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	8812      	ldrh	r2, [r2, #0]
 8006a20:	4413      	add	r3, r2
 8006a22:	b28a      	uxth	r2, r1
 8006a24:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8006a26:	4b14      	ldr	r3, [pc, #80]	; (8006a78 <plug_holes+0x10c>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	8852      	ldrh	r2, [r2, #2]
 8006a2e:	4413      	add	r3, r2
 8006a30:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d01a      	beq.n	8006a70 <plug_holes+0x104>
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	791b      	ldrb	r3, [r3, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d116      	bne.n	8006a70 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006a42:	4b15      	ldr	r3, [pc, #84]	; (8006a98 <plug_holes+0x12c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d102      	bne.n	8006a52 <plug_holes+0xe6>
      lfree = pmem;
 8006a4c:	4a12      	ldr	r2, [pc, #72]	; (8006a98 <plug_holes+0x12c>)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	881a      	ldrh	r2, [r3, #0]
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8006a5a:	4b07      	ldr	r3, [pc, #28]	; (8006a78 <plug_holes+0x10c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	1ad1      	subs	r1, r2, r3
 8006a62:	4b05      	ldr	r3, [pc, #20]	; (8006a78 <plug_holes+0x10c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	8812      	ldrh	r2, [r2, #0]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	b28a      	uxth	r2, r1
 8006a6e:	805a      	strh	r2, [r3, #2]
  }
}
 8006a70:	bf00      	nop
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	20003f28 	.word	0x20003f28
 8006a7c:	08016438 	.word	0x08016438
 8006a80:	08016468 	.word	0x08016468
 8006a84:	08016480 	.word	0x08016480
 8006a88:	20003f2c 	.word	0x20003f2c
 8006a8c:	080164a8 	.word	0x080164a8
 8006a90:	080164c4 	.word	0x080164c4
 8006a94:	080164e0 	.word	0x080164e0
 8006a98:	20003f30 	.word	0x20003f30

08006a9c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006aa2:	4b1b      	ldr	r3, [pc, #108]	; (8006b10 <mem_init+0x74>)
 8006aa4:	3303      	adds	r3, #3
 8006aa6:	f023 0303 	bic.w	r3, r3, #3
 8006aaa:	461a      	mov	r2, r3
 8006aac:	4b19      	ldr	r3, [pc, #100]	; (8006b14 <mem_init+0x78>)
 8006aae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006ab0:	4b18      	ldr	r3, [pc, #96]	; (8006b14 <mem_init+0x78>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006abc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8006aca:	4b12      	ldr	r3, [pc, #72]	; (8006b14 <mem_init+0x78>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8006ad2:	4a11      	ldr	r2, [pc, #68]	; (8006b18 <mem_init+0x7c>)
 8006ad4:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006ad6:	4b10      	ldr	r3, [pc, #64]	; (8006b18 <mem_init+0x7c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2201      	movs	r2, #1
 8006adc:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006ade:	4b0e      	ldr	r3, [pc, #56]	; (8006b18 <mem_init+0x7c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006ae6:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006ae8:	4b0b      	ldr	r3, [pc, #44]	; (8006b18 <mem_init+0x7c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006af0:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006af2:	4b08      	ldr	r3, [pc, #32]	; (8006b14 <mem_init+0x78>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a09      	ldr	r2, [pc, #36]	; (8006b1c <mem_init+0x80>)
 8006af8:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8006afa:	4b09      	ldr	r3, [pc, #36]	; (8006b20 <mem_init+0x84>)
 8006afc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006b00:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bc80      	pop	{r7}
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	200038d4 	.word	0x200038d4
 8006b14:	20003f28 	.word	0x20003f28
 8006b18:	20003f2c 	.word	0x20003f2c
 8006b1c:	20003f30 	.word	0x20003f30
 8006b20:	20006e84 	.word	0x20006e84

08006b24 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d05d      	beq.n	8006bee <mem_free+0xca>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f003 0303 	and.w	r3, r3, #3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d006      	beq.n	8006b4a <mem_free+0x26>
 8006b3c:	4b2e      	ldr	r3, [pc, #184]	; (8006bf8 <mem_free+0xd4>)
 8006b3e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8006b42:	492e      	ldr	r1, [pc, #184]	; (8006bfc <mem_free+0xd8>)
 8006b44:	482e      	ldr	r0, [pc, #184]	; (8006c00 <mem_free+0xdc>)
 8006b46:	f00b fdef 	bl	8012728 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006b4a:	4b2e      	ldr	r3, [pc, #184]	; (8006c04 <mem_free+0xe0>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d304      	bcc.n	8006b5e <mem_free+0x3a>
 8006b54:	4b2c      	ldr	r3, [pc, #176]	; (8006c08 <mem_free+0xe4>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d306      	bcc.n	8006b6c <mem_free+0x48>
 8006b5e:	4b26      	ldr	r3, [pc, #152]	; (8006bf8 <mem_free+0xd4>)
 8006b60:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8006b64:	4929      	ldr	r1, [pc, #164]	; (8006c0c <mem_free+0xe8>)
 8006b66:	4826      	ldr	r0, [pc, #152]	; (8006c00 <mem_free+0xdc>)
 8006b68:	f00b fdde 	bl	8012728 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006b6c:	4b25      	ldr	r3, [pc, #148]	; (8006c04 <mem_free+0xe0>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d304      	bcc.n	8006b80 <mem_free+0x5c>
 8006b76:	4b24      	ldr	r3, [pc, #144]	; (8006c08 <mem_free+0xe4>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d308      	bcc.n	8006b92 <mem_free+0x6e>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8006b80:	4b23      	ldr	r3, [pc, #140]	; (8006c10 <mem_free+0xec>)
 8006b82:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8006b86:	3301      	adds	r3, #1
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	4b21      	ldr	r3, [pc, #132]	; (8006c10 <mem_free+0xec>)
 8006b8c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return;
 8006b90:	e02e      	b.n	8006bf0 <mem_free+0xcc>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3b08      	subs	r3, #8
 8006b96:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	791b      	ldrb	r3, [r3, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d106      	bne.n	8006bae <mem_free+0x8a>
 8006ba0:	4b15      	ldr	r3, [pc, #84]	; (8006bf8 <mem_free+0xd4>)
 8006ba2:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8006ba6:	491b      	ldr	r1, [pc, #108]	; (8006c14 <mem_free+0xf0>)
 8006ba8:	4815      	ldr	r0, [pc, #84]	; (8006c00 <mem_free+0xdc>)
 8006baa:	f00b fdbd 	bl	8012728 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006bb4:	4b18      	ldr	r3, [pc, #96]	; (8006c18 <mem_free+0xf4>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d202      	bcs.n	8006bc4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006bbe:	4a16      	ldr	r2, [pc, #88]	; (8006c18 <mem_free+0xf4>)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8006bc4:	4b12      	ldr	r3, [pc, #72]	; (8006c10 <mem_free+0xec>)
 8006bc6:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006bca:	4b0e      	ldr	r3, [pc, #56]	; (8006c04 <mem_free+0xe0>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68f9      	ldr	r1, [r7, #12]
 8006bd0:	1acb      	subs	r3, r1, r3
 8006bd2:	b299      	uxth	r1, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	1acb      	subs	r3, r1, r3
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	4413      	add	r3, r2
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <mem_free+0xec>)
 8006be2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f7ff fec0 	bl	800696c <plug_holes>
 8006bec:	e000      	b.n	8006bf0 <mem_free+0xcc>
    return;
 8006bee:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	08016438 	.word	0x08016438
 8006bfc:	0801650c 	.word	0x0801650c
 8006c00:	08016480 	.word	0x08016480
 8006c04:	20003f28 	.word	0x20003f28
 8006c08:	20003f2c 	.word	0x20003f2c
 8006c0c:	08016530 	.word	0x08016530
 8006c10:	20006e84 	.word	0x20006e84
 8006c14:	08016548 	.word	0x08016548
 8006c18:	20003f30 	.word	0x20003f30

08006c1c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8006c28:	887b      	ldrh	r3, [r7, #2]
 8006c2a:	3303      	adds	r3, #3
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	f023 0303 	bic.w	r3, r3, #3
 8006c32:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8006c34:	887b      	ldrh	r3, [r7, #2]
 8006c36:	2b0b      	cmp	r3, #11
 8006c38:	d801      	bhi.n	8006c3e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006c3a:	230c      	movs	r3, #12
 8006c3c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8006c3e:	887b      	ldrh	r3, [r7, #2]
 8006c40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006c44:	d901      	bls.n	8006c4a <mem_trim+0x2e>
    return NULL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	e0d1      	b.n	8006dee <mem_trim+0x1d2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006c4a:	4b6b      	ldr	r3, [pc, #428]	; (8006df8 <mem_trim+0x1dc>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d304      	bcc.n	8006c5e <mem_trim+0x42>
 8006c54:	4b69      	ldr	r3, [pc, #420]	; (8006dfc <mem_trim+0x1e0>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d306      	bcc.n	8006c6c <mem_trim+0x50>
 8006c5e:	4b68      	ldr	r3, [pc, #416]	; (8006e00 <mem_trim+0x1e4>)
 8006c60:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006c64:	4967      	ldr	r1, [pc, #412]	; (8006e04 <mem_trim+0x1e8>)
 8006c66:	4868      	ldr	r0, [pc, #416]	; (8006e08 <mem_trim+0x1ec>)
 8006c68:	f00b fd5e 	bl	8012728 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006c6c:	4b62      	ldr	r3, [pc, #392]	; (8006df8 <mem_trim+0x1dc>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d304      	bcc.n	8006c80 <mem_trim+0x64>
 8006c76:	4b61      	ldr	r3, [pc, #388]	; (8006dfc <mem_trim+0x1e0>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d309      	bcc.n	8006c94 <mem_trim+0x78>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8006c80:	4b62      	ldr	r3, [pc, #392]	; (8006e0c <mem_trim+0x1f0>)
 8006c82:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8006c86:	3301      	adds	r3, #1
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	4b60      	ldr	r3, [pc, #384]	; (8006e0c <mem_trim+0x1f0>)
 8006c8c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	e0ac      	b.n	8006dee <mem_trim+0x1d2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	3b08      	subs	r3, #8
 8006c98:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8006c9a:	4b57      	ldr	r3, [pc, #348]	; (8006df8 <mem_trim+0x1dc>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	881a      	ldrh	r2, [r3, #0]
 8006ca8:	8a7b      	ldrh	r3, [r7, #18]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	3b08      	subs	r3, #8
 8006cb0:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006cb2:	887a      	ldrh	r2, [r7, #2]
 8006cb4:	8a3b      	ldrh	r3, [r7, #16]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d906      	bls.n	8006cc8 <mem_trim+0xac>
 8006cba:	4b51      	ldr	r3, [pc, #324]	; (8006e00 <mem_trim+0x1e4>)
 8006cbc:	f240 2206 	movw	r2, #518	; 0x206
 8006cc0:	4953      	ldr	r1, [pc, #332]	; (8006e10 <mem_trim+0x1f4>)
 8006cc2:	4851      	ldr	r0, [pc, #324]	; (8006e08 <mem_trim+0x1ec>)
 8006cc4:	f00b fd30 	bl	8012728 <iprintf>
  if (newsize > size) {
 8006cc8:	887a      	ldrh	r2, [r7, #2]
 8006cca:	8a3b      	ldrh	r3, [r7, #16]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d901      	bls.n	8006cd4 <mem_trim+0xb8>
    /* not supported */
    return NULL;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	e08c      	b.n	8006dee <mem_trim+0x1d2>
  }
  if (newsize == size) {
 8006cd4:	887a      	ldrh	r2, [r7, #2]
 8006cd6:	8a3b      	ldrh	r3, [r7, #16]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d101      	bne.n	8006ce0 <mem_trim+0xc4>
    /* No change in size, simply return */
    return rmem;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	e086      	b.n	8006dee <mem_trim+0x1d2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8006ce0:	4b45      	ldr	r3, [pc, #276]	; (8006df8 <mem_trim+0x1dc>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	8812      	ldrh	r2, [r2, #0]
 8006ce8:	4413      	add	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	791b      	ldrb	r3, [r3, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d13d      	bne.n	8006d70 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006cfa:	8a7a      	ldrh	r2, [r7, #18]
 8006cfc:	887b      	ldrh	r3, [r7, #2]
 8006cfe:	4413      	add	r3, r2
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	3308      	adds	r3, #8
 8006d04:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8006d06:	4b43      	ldr	r3, [pc, #268]	; (8006e14 <mem_trim+0x1f8>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d105      	bne.n	8006d1c <mem_trim+0x100>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8006d10:	4b39      	ldr	r3, [pc, #228]	; (8006df8 <mem_trim+0x1dc>)
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	897b      	ldrh	r3, [r7, #10]
 8006d16:	4413      	add	r3, r2
 8006d18:	4a3e      	ldr	r2, [pc, #248]	; (8006e14 <mem_trim+0x1f8>)
 8006d1a:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8006d1c:	4b36      	ldr	r3, [pc, #216]	; (8006df8 <mem_trim+0x1dc>)
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	897b      	ldrh	r3, [r7, #10]
 8006d22:	4413      	add	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	893a      	ldrh	r2, [r7, #8]
 8006d30:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8a7a      	ldrh	r2, [r7, #18]
 8006d36:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	897a      	ldrh	r2, [r7, #10]
 8006d3c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006d46:	d006      	beq.n	8006d56 <mem_trim+0x13a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006d48:	4b2b      	ldr	r3, [pc, #172]	; (8006df8 <mem_trim+0x1dc>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	8812      	ldrh	r2, [r2, #0]
 8006d50:	4413      	add	r3, r2
 8006d52:	897a      	ldrh	r2, [r7, #10]
 8006d54:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8006d56:	4b2d      	ldr	r3, [pc, #180]	; (8006e0c <mem_trim+0x1f0>)
 8006d58:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006d5c:	8879      	ldrh	r1, [r7, #2]
 8006d5e:	8a3b      	ldrh	r3, [r7, #16]
 8006d60:	1acb      	subs	r3, r1, r3
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	4413      	add	r3, r2
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	4b28      	ldr	r3, [pc, #160]	; (8006e0c <mem_trim+0x1f0>)
 8006d6a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8006d6e:	e03d      	b.n	8006dec <mem_trim+0x1d0>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006d70:	887b      	ldrh	r3, [r7, #2]
 8006d72:	f103 0214 	add.w	r2, r3, #20
 8006d76:	8a3b      	ldrh	r3, [r7, #16]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d837      	bhi.n	8006dec <mem_trim+0x1d0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006d7c:	8a7a      	ldrh	r2, [r7, #18]
 8006d7e:	887b      	ldrh	r3, [r7, #2]
 8006d80:	4413      	add	r3, r2
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	3308      	adds	r3, #8
 8006d86:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8006d88:	4b1b      	ldr	r3, [pc, #108]	; (8006df8 <mem_trim+0x1dc>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	897b      	ldrh	r3, [r7, #10]
 8006d8e:	4413      	add	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8006d92:	4b20      	ldr	r3, [pc, #128]	; (8006e14 <mem_trim+0x1f8>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d202      	bcs.n	8006da2 <mem_trim+0x186>
      lfree = mem2;
 8006d9c:	4a1d      	ldr	r2, [pc, #116]	; (8006e14 <mem_trim+0x1f8>)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	881a      	ldrh	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8a7a      	ldrh	r2, [r7, #18]
 8006db4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	897a      	ldrh	r2, [r7, #10]
 8006dba:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006dc4:	d006      	beq.n	8006dd4 <mem_trim+0x1b8>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <mem_trim+0x1dc>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	8812      	ldrh	r2, [r2, #0]
 8006dce:	4413      	add	r3, r2
 8006dd0:	897a      	ldrh	r2, [r7, #10]
 8006dd2:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8006dd4:	4b0d      	ldr	r3, [pc, #52]	; (8006e0c <mem_trim+0x1f0>)
 8006dd6:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006dda:	8879      	ldrh	r1, [r7, #2]
 8006ddc:	8a3b      	ldrh	r3, [r7, #16]
 8006dde:	1acb      	subs	r3, r1, r3
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	4413      	add	r3, r2
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	4b09      	ldr	r3, [pc, #36]	; (8006e0c <mem_trim+0x1f0>)
 8006de8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006dec:	687b      	ldr	r3, [r7, #4]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20003f28 	.word	0x20003f28
 8006dfc:	20003f2c 	.word	0x20003f2c
 8006e00:	08016438 	.word	0x08016438
 8006e04:	0801655c 	.word	0x0801655c
 8006e08:	08016480 	.word	0x08016480
 8006e0c:	20006e84 	.word	0x20006e84
 8006e10:	08016574 	.word	0x08016574
 8006e14:	20003f30 	.word	0x20003f30

08006e18 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b088      	sub	sp, #32
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8006e22:	88fb      	ldrh	r3, [r7, #6]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <mem_malloc+0x14>
    return NULL;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	e0eb      	b.n	8007004 <mem_malloc+0x1ec>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8006e2c:	88fb      	ldrh	r3, [r7, #6]
 8006e2e:	3303      	adds	r3, #3
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	f023 0303 	bic.w	r3, r3, #3
 8006e36:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8006e38:	88fb      	ldrh	r3, [r7, #6]
 8006e3a:	2b0b      	cmp	r3, #11
 8006e3c:	d801      	bhi.n	8006e42 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006e3e:	230c      	movs	r3, #12
 8006e40:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8006e42:	88fb      	ldrh	r3, [r7, #6]
 8006e44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006e48:	d901      	bls.n	8006e4e <mem_malloc+0x36>
    return NULL;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	e0da      	b.n	8007004 <mem_malloc+0x1ec>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8006e4e:	4b6f      	ldr	r3, [pc, #444]	; (800700c <mem_malloc+0x1f4>)
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4b6f      	ldr	r3, [pc, #444]	; (8007010 <mem_malloc+0x1f8>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	83fb      	strh	r3, [r7, #30]
 8006e5a:	e0c3      	b.n	8006fe4 <mem_malloc+0x1cc>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8006e5c:	4b6c      	ldr	r3, [pc, #432]	; (8007010 <mem_malloc+0x1f8>)
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	8bfb      	ldrh	r3, [r7, #30]
 8006e62:	4413      	add	r3, r2
 8006e64:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	791b      	ldrb	r3, [r3, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f040 80b4 	bne.w	8006fd8 <mem_malloc+0x1c0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	461a      	mov	r2, r3
 8006e76:	8bfb      	ldrh	r3, [r7, #30]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	f1a3 0208 	sub.w	r2, r3, #8
 8006e7e:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8006e80:	429a      	cmp	r2, r3
 8006e82:	f0c0 80a9 	bcc.w	8006fd8 <mem_malloc+0x1c0>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	8bfb      	ldrh	r3, [r7, #30]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	f1a3 0208 	sub.w	r2, r3, #8
 8006e94:	88fb      	ldrh	r3, [r7, #6]
 8006e96:	3314      	adds	r3, #20
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d332      	bcc.n	8006f02 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8006e9c:	8bfa      	ldrh	r2, [r7, #30]
 8006e9e:	88fb      	ldrh	r3, [r7, #6]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8006ea8:	4b59      	ldr	r3, [pc, #356]	; (8007010 <mem_malloc+0x1f8>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	8a7b      	ldrh	r3, [r7, #18]
 8006eae:	4413      	add	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	881a      	ldrh	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8bfa      	ldrh	r2, [r7, #30]
 8006ec4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	8a7a      	ldrh	r2, [r7, #18]
 8006eca:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006eda:	d006      	beq.n	8006eea <mem_malloc+0xd2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006edc:	4b4c      	ldr	r3, [pc, #304]	; (8007010 <mem_malloc+0x1f8>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	8812      	ldrh	r2, [r2, #0]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	8a7a      	ldrh	r2, [r7, #18]
 8006ee8:	805a      	strh	r2, [r3, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8006eea:	4b4a      	ldr	r3, [pc, #296]	; (8007014 <mem_malloc+0x1fc>)
 8006eec:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006ef0:	88fb      	ldrh	r3, [r7, #6]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	4b46      	ldr	r3, [pc, #280]	; (8007014 <mem_malloc+0x1fc>)
 8006efc:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8006f00:	e013      	b.n	8006f2a <mem_malloc+0x112>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2201      	movs	r2, #1
 8006f06:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 8006f08:	4b42      	ldr	r3, [pc, #264]	; (8007014 <mem_malloc+0x1fc>)
 8006f0a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	8819      	ldrh	r1, [r3, #0]
 8006f12:	4b3f      	ldr	r3, [pc, #252]	; (8007010 <mem_malloc+0x1f8>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6978      	ldr	r0, [r7, #20]
 8006f18:	1ac3      	subs	r3, r0, r3
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	1acb      	subs	r3, r1, r3
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	4413      	add	r3, r2
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	4b3b      	ldr	r3, [pc, #236]	; (8007014 <mem_malloc+0x1fc>)
 8006f26:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006f2a:	4b38      	ldr	r3, [pc, #224]	; (800700c <mem_malloc+0x1f4>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d127      	bne.n	8006f84 <mem_malloc+0x16c>
          struct mem *cur = lfree;
 8006f34:	4b35      	ldr	r3, [pc, #212]	; (800700c <mem_malloc+0x1f4>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006f3a:	e005      	b.n	8006f48 <mem_malloc+0x130>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8006f3c:	4b34      	ldr	r3, [pc, #208]	; (8007010 <mem_malloc+0x1f8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	8812      	ldrh	r2, [r2, #0]
 8006f44:	4413      	add	r3, r2
 8006f46:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	791b      	ldrb	r3, [r3, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d004      	beq.n	8006f5a <mem_malloc+0x142>
 8006f50:	4b31      	ldr	r3, [pc, #196]	; (8007018 <mem_malloc+0x200>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d1f0      	bne.n	8006f3c <mem_malloc+0x124>
          }
          lfree = cur;
 8006f5a:	4a2c      	ldr	r2, [pc, #176]	; (800700c <mem_malloc+0x1f4>)
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006f60:	4b2a      	ldr	r3, [pc, #168]	; (800700c <mem_malloc+0x1f4>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	4b2c      	ldr	r3, [pc, #176]	; (8007018 <mem_malloc+0x200>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d00b      	beq.n	8006f84 <mem_malloc+0x16c>
 8006f6c:	4b27      	ldr	r3, [pc, #156]	; (800700c <mem_malloc+0x1f4>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	791b      	ldrb	r3, [r3, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d006      	beq.n	8006f84 <mem_malloc+0x16c>
 8006f76:	4b29      	ldr	r3, [pc, #164]	; (800701c <mem_malloc+0x204>)
 8006f78:	f240 22cf 	movw	r2, #719	; 0x2cf
 8006f7c:	4928      	ldr	r1, [pc, #160]	; (8007020 <mem_malloc+0x208>)
 8006f7e:	4829      	ldr	r0, [pc, #164]	; (8007024 <mem_malloc+0x20c>)
 8006f80:	f00b fbd2 	bl	8012728 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006f84:	88fa      	ldrh	r2, [r7, #6]
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	4413      	add	r3, r2
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	4a22      	ldr	r2, [pc, #136]	; (8007018 <mem_malloc+0x200>)
 8006f8e:	6812      	ldr	r2, [r2, #0]
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d906      	bls.n	8006fa2 <mem_malloc+0x18a>
 8006f94:	4b21      	ldr	r3, [pc, #132]	; (800701c <mem_malloc+0x204>)
 8006f96:	f240 22d3 	movw	r2, #723	; 0x2d3
 8006f9a:	4923      	ldr	r1, [pc, #140]	; (8007028 <mem_malloc+0x210>)
 8006f9c:	4821      	ldr	r0, [pc, #132]	; (8007024 <mem_malloc+0x20c>)
 8006f9e:	f00b fbc3 	bl	8012728 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f003 0303 	and.w	r3, r3, #3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d006      	beq.n	8006fba <mem_malloc+0x1a2>
 8006fac:	4b1b      	ldr	r3, [pc, #108]	; (800701c <mem_malloc+0x204>)
 8006fae:	f240 22d5 	movw	r2, #725	; 0x2d5
 8006fb2:	491e      	ldr	r1, [pc, #120]	; (800702c <mem_malloc+0x214>)
 8006fb4:	481b      	ldr	r0, [pc, #108]	; (8007024 <mem_malloc+0x20c>)
 8006fb6:	f00b fbb7 	bl	8012728 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d006      	beq.n	8006fd2 <mem_malloc+0x1ba>
 8006fc4:	4b15      	ldr	r3, [pc, #84]	; (800701c <mem_malloc+0x204>)
 8006fc6:	f240 22d7 	movw	r2, #727	; 0x2d7
 8006fca:	4919      	ldr	r1, [pc, #100]	; (8007030 <mem_malloc+0x218>)
 8006fcc:	4815      	ldr	r0, [pc, #84]	; (8007024 <mem_malloc+0x20c>)
 8006fce:	f00b fbab 	bl	8012728 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	e015      	b.n	8007004 <mem_malloc+0x1ec>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8006fd8:	4b0d      	ldr	r3, [pc, #52]	; (8007010 <mem_malloc+0x1f8>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	8bfb      	ldrh	r3, [r7, #30]
 8006fde:	4413      	add	r3, r2
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8006fe4:	8bfa      	ldrh	r2, [r7, #30]
 8006fe6:	88fb      	ldrh	r3, [r7, #6]
 8006fe8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006fec:	429a      	cmp	r2, r3
 8006fee:	f4ff af35 	bcc.w	8006e5c <mem_malloc+0x44>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
 8006ff2:	4b08      	ldr	r3, [pc, #32]	; (8007014 <mem_malloc+0x1fc>)
 8006ff4:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	4b05      	ldr	r3, [pc, #20]	; (8007014 <mem_malloc+0x1fc>)
 8006ffe:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3720      	adds	r7, #32
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20003f30 	.word	0x20003f30
 8007010:	20003f28 	.word	0x20003f28
 8007014:	20006e84 	.word	0x20006e84
 8007018:	20003f2c 	.word	0x20003f2c
 800701c:	08016438 	.word	0x08016438
 8007020:	08016594 	.word	0x08016594
 8007024:	08016480 	.word	0x08016480
 8007028:	080165b0 	.word	0x080165b0
 800702c:	080165e0 	.word	0x080165e0
 8007030:	08016610 	.word	0x08016610

08007034 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	3303      	adds	r3, #3
 800704a:	f023 0303 	bic.w	r3, r3, #3
 800704e:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	e011      	b.n	800707a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	889b      	ldrh	r3, [r3, #4]
 800706c:	461a      	mov	r2, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	4413      	add	r3, r2
 8007072:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	3301      	adds	r3, #1
 8007078:	60fb      	str	r3, [r7, #12]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	88db      	ldrh	r3, [r3, #6]
 800707e:	461a      	mov	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4293      	cmp	r3, r2
 8007084:	dbe7      	blt.n	8007056 <memp_init_pool+0x22>
      + MEMP_SANITY_REGION_AFTER_ALIGNED
#endif
    );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	88d2      	ldrh	r2, [r2, #6]
 800708e:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007090:	bf00      	nop
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	bc80      	pop	{r7}
 8007098:	4770      	bx	lr
	...

0800709c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80070a2:	2300      	movs	r3, #0
 80070a4:	80fb      	strh	r3, [r7, #6]
 80070a6:	e014      	b.n	80070d2 <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 80070a8:	88fb      	ldrh	r3, [r7, #6]
 80070aa:	4a0e      	ldr	r2, [pc, #56]	; (80070e4 <memp_init+0x48>)
 80070ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7ff ffbf 	bl	8007034 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 80070b6:	88fb      	ldrh	r3, [r7, #6]
 80070b8:	4a0a      	ldr	r2, [pc, #40]	; (80070e4 <memp_init+0x48>)
 80070ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80070be:	88fb      	ldrh	r3, [r7, #6]
 80070c0:	6812      	ldr	r2, [r2, #0]
 80070c2:	4909      	ldr	r1, [pc, #36]	; (80070e8 <memp_init+0x4c>)
 80070c4:	332c      	adds	r3, #44	; 0x2c
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	440b      	add	r3, r1
 80070ca:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80070cc:	88fb      	ldrh	r3, [r7, #6]
 80070ce:	3301      	adds	r3, #1
 80070d0:	80fb      	strh	r3, [r7, #6]
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d9e7      	bls.n	80070a8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80070d8:	bf00      	nop
 80070da:	bf00      	nop
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	08018144 	.word	0x08018144
 80070e8:	20006e84 	.word	0x20006e84

080070ec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d026      	beq.n	8007150 <do_memp_malloc_pool+0x64>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	6812      	ldr	r2, [r2, #0]
 800710a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f003 0303 	and.w	r3, r3, #3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d006      	beq.n	8007124 <do_memp_malloc_pool+0x38>
 8007116:	4b14      	ldr	r3, [pc, #80]	; (8007168 <do_memp_malloc_pool+0x7c>)
 8007118:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800711c:	4913      	ldr	r1, [pc, #76]	; (800716c <do_memp_malloc_pool+0x80>)
 800711e:	4814      	ldr	r0, [pc, #80]	; (8007170 <do_memp_malloc_pool+0x84>)
 8007120:	f00b fb02 	bl	8012728 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	889a      	ldrh	r2, [r3, #4]
 800712a:	3201      	adds	r2, #1
 800712c:	b292      	uxth	r2, r2
 800712e:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	889a      	ldrh	r2, [r3, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	88db      	ldrh	r3, [r3, #6]
 800713c:	429a      	cmp	r2, r3
 800713e:	d905      	bls.n	800714c <do_memp_malloc_pool+0x60>
      desc->stats->max = desc->stats->used;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	8892      	ldrh	r2, [r2, #4]
 800714a:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	e006      	b.n	800715e <do_memp_malloc_pool+0x72>
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
#if MEMP_STATS
    desc->stats->err++;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	881a      	ldrh	r2, [r3, #0]
 8007156:	3201      	adds	r2, #1
 8007158:	b292      	uxth	r2, r2
 800715a:	801a      	strh	r2, [r3, #0]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	08016634 	.word	0x08016634
 800716c:	08016664 	.word	0x08016664
 8007170:	08016688 	.word	0x08016688

08007174 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800717e:	79fb      	ldrb	r3, [r7, #7]
 8007180:	2b08      	cmp	r3, #8
 8007182:	d908      	bls.n	8007196 <memp_malloc+0x22>
 8007184:	4b0a      	ldr	r3, [pc, #40]	; (80071b0 <memp_malloc+0x3c>)
 8007186:	f240 1287 	movw	r2, #391	; 0x187
 800718a:	490a      	ldr	r1, [pc, #40]	; (80071b4 <memp_malloc+0x40>)
 800718c:	480a      	ldr	r0, [pc, #40]	; (80071b8 <memp_malloc+0x44>)
 800718e:	f00b facb 	bl	8012728 <iprintf>
 8007192:	2300      	movs	r3, #0
 8007194:	e008      	b.n	80071a8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	4a08      	ldr	r2, [pc, #32]	; (80071bc <memp_malloc+0x48>)
 800719a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800719e:	4618      	mov	r0, r3
 80071a0:	f7ff ffa4 	bl	80070ec <do_memp_malloc_pool>
 80071a4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80071a6:	68fb      	ldr	r3, [r7, #12]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	08016634 	.word	0x08016634
 80071b4:	080166c4 	.word	0x080166c4
 80071b8:	08016688 	.word	0x08016688
 80071bc:	08018144 	.word	0x08018144

080071c0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	f003 0303 	and.w	r3, r3, #3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d006      	beq.n	80071e2 <do_memp_free_pool+0x22>
 80071d4:	4b0d      	ldr	r3, [pc, #52]	; (800720c <do_memp_free_pool+0x4c>)
 80071d6:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80071da:	490d      	ldr	r1, [pc, #52]	; (8007210 <do_memp_free_pool+0x50>)
 80071dc:	480d      	ldr	r0, [pc, #52]	; (8007214 <do_memp_free_pool+0x54>)
 80071de:	f00b faa3 	bl	8012728 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	60fb      	str	r3, [r7, #12]
  memp_overflow_check_element_overflow(memp, desc);
  memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	889a      	ldrh	r2, [r3, #4]
 80071ec:	3a01      	subs	r2, #1
 80071ee:	b292      	uxth	r2, r2
 80071f0:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007204:	bf00      	nop
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	08016634 	.word	0x08016634
 8007210:	080166e4 	.word	0x080166e4
 8007214:	08016688 	.word	0x08016688

08007218 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	4603      	mov	r3, r0
 8007220:	6039      	str	r1, [r7, #0]
 8007222:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007224:	79fb      	ldrb	r3, [r7, #7]
 8007226:	2b08      	cmp	r3, #8
 8007228:	d907      	bls.n	800723a <memp_free+0x22>
 800722a:	4b0c      	ldr	r3, [pc, #48]	; (800725c <memp_free+0x44>)
 800722c:	f240 12db 	movw	r2, #475	; 0x1db
 8007230:	490b      	ldr	r1, [pc, #44]	; (8007260 <memp_free+0x48>)
 8007232:	480c      	ldr	r0, [pc, #48]	; (8007264 <memp_free+0x4c>)
 8007234:	f00b fa78 	bl	8012728 <iprintf>
 8007238:	e00c      	b.n	8007254 <memp_free+0x3c>

  if (mem == NULL) {
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d008      	beq.n	8007252 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007240:	79fb      	ldrb	r3, [r7, #7]
 8007242:	4a09      	ldr	r2, [pc, #36]	; (8007268 <memp_free+0x50>)
 8007244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff ffb8 	bl	80071c0 <do_memp_free_pool>
 8007250:	e000      	b.n	8007254 <memp_free+0x3c>
    return;
 8007252:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	08016634 	.word	0x08016634
 8007260:	08016704 	.word	0x08016704
 8007264:	08016688 	.word	0x08016688
 8007268:	08018144 	.word	0x08018144

0800726c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800726c:	b480      	push	{r7}
 800726e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007270:	bf00      	nop
 8007272:	46bd      	mov	sp, r7
 8007274:	bc80      	pop	{r7}
 8007276:	4770      	bx	lr

08007278 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d105      	bne.n	8007298 <netif_add+0x20>
 800728c:	4b21      	ldr	r3, [pc, #132]	; (8007314 <netif_add+0x9c>)
 800728e:	22fb      	movs	r2, #251	; 0xfb
 8007290:	4921      	ldr	r1, [pc, #132]	; (8007318 <netif_add+0xa0>)
 8007292:	4822      	ldr	r0, [pc, #136]	; (800731c <netif_add+0xa4>)
 8007294:	f00b fa48 	bl	8012728 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2203      	movs	r2, #3
 80072b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 80072c6:	4b16      	ldr	r3, [pc, #88]	; (8007320 <netif_add+0xa8>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	b2d1      	uxtb	r1, r2
 80072ce:	4a14      	ldr	r2, [pc, #80]	; (8007320 <netif_add+0xa8>)
 80072d0:	7011      	strb	r1, [r2, #0]
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6a3a      	ldr	r2, [r7, #32]
 80072dc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	68b9      	ldr	r1, [r7, #8]
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 f81f 	bl	8007328 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	4798      	blx	r3
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <netif_add+0x82>
    return NULL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	e007      	b.n	800730a <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80072fa:	4b0a      	ldr	r3, [pc, #40]	; (8007324 <netif_add+0xac>)
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007302:	4a08      	ldr	r2, [pc, #32]	; (8007324 <netif_add+0xac>)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8007308:	68fb      	ldr	r3, [r7, #12]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	08016720 	.word	0x08016720
 8007318:	08016754 	.word	0x08016754
 800731c:	0801676c 	.word	0x0801676c
 8007320:	20006e80 	.word	0x20006e80
 8007324:	20006e78 	.word	0x20006e78

08007328 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
 8007334:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <netif_set_addr+0x1c>
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10c      	bne.n	800735e <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8007344:	68b9      	ldr	r1, [r7, #8]
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 f81a 	bl	8007380 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 f861 	bl	8007416 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 f84a 	bl	80073f0 <netif_set_gw>
 800735c:	e00c      	b.n	8007378 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 f858 	bl	8007416 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 f841 	bl	80073f0 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800736e:	68b9      	ldr	r1, [r7, #8]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 f805 	bl	8007380 <netif_set_ipaddr>
  }
}
 8007376:	bf00      	nop
 8007378:	bf00      	nop
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <netif_set_ipaddr+0x18>
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60fb      	str	r3, [r7, #12]
 8007396:	e002      	b.n	800739e <netif_set_ipaddr+0x1e>
 8007398:	4b14      	ldr	r3, [pc, #80]	; (80073ec <netif_set_ipaddr+0x6c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	3304      	adds	r3, #4
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d01c      	beq.n	80073e4 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	3304      	adds	r3, #4
 80073ae:	f107 020c 	add.w	r2, r7, #12
 80073b2:	4611      	mov	r1, r2
 80073b4:	4618      	mov	r0, r3
 80073b6:	f002 f93b 	bl	8009630 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3304      	adds	r3, #4
 80073be:	f107 020c 	add.w	r2, r7, #12
 80073c2:	4611      	mov	r1, r2
 80073c4:	4618      	mov	r0, r3
 80073c6:	f006 f8ed 	bl	800d5a4 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d002      	beq.n	80073d6 <netif_set_ipaddr+0x56>
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	e000      	b.n	80073d8 <netif_set_ipaddr+0x58>
 80073d6:	2300      	movs	r3, #0
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80073dc:	2101      	movs	r1, #1
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f85d 	bl	800749e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80073e4:	bf00      	nop
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	080181a8 	.word	0x080181a8

080073f0 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <netif_set_gw+0x16>
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	e000      	b.n	8007408 <netif_set_gw+0x18>
 8007406:	2300      	movs	r3, #0
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	bc80      	pop	{r7}
 8007414:	4770      	bx	lr

08007416 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <netif_set_netmask+0x16>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	e000      	b.n	800742e <netif_set_netmask+0x18>
 800742c:	2300      	movs	r3, #0
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8007432:	bf00      	nop
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	bc80      	pop	{r7}
 800743a:	4770      	bx	lr

0800743c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007444:	4a03      	ldr	r2, [pc, #12]	; (8007454 <netif_set_default+0x18>)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	bc80      	pop	{r7}
 8007452:	4770      	bx	lr
 8007454:	20006e7c 	.word	0x20006e7c

08007458 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d113      	bne.n	8007496 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007474:	f043 0301 	orr.w	r3, r3, #1
 8007478:	b2da      	uxtb	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007486:	f003 0304 	and.w	r3, r3, #4
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800748e:	2103      	movs	r1, #3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f804 	bl	800749e <netif_issue_reports>
    }
  }
}
 8007496:	bf00      	nop
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b082      	sub	sp, #8
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	460b      	mov	r3, r1
 80074a8:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80074aa:	78fb      	ldrb	r3, [r7, #3]
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d011      	beq.n	80074d8 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3304      	adds	r3, #4
 80074b8:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00c      	beq.n	80074d8 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80074c4:	f003 0308 	and.w	r3, r3, #8
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d005      	beq.n	80074d8 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	3304      	adds	r3, #4
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f006 ffda 	bl	800e48c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80074d8:	bf00      	nop
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d012      	beq.n	800751c <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80074fc:	f023 0301 	bic.w	r3, r3, #1
 8007500:	b2da      	uxtb	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800750e:	f003 0308 	and.w	r3, r3, #8
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f006 fb3c 	bl	800db94 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800751c:	bf00      	nop
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  if (netif) {
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	61da      	str	r2, [r3, #28]
  }
}
 800753a:	bf00      	nop
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	bc80      	pop	{r7}
 8007542:	4770      	bx	lr

08007544 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800754a:	4b0e      	ldr	r3, [pc, #56]	; (8007584 <pbuf_free_ooseq+0x40>)
 800754c:	2200      	movs	r2, #0
 800754e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007550:	4b0d      	ldr	r3, [pc, #52]	; (8007588 <pbuf_free_ooseq+0x44>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	607b      	str	r3, [r7, #4]
 8007556:	e00f      	b.n	8007578 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800755c:	2b00      	cmp	r3, #0
 800755e:	d008      	beq.n	8007572 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007564:	4618      	mov	r0, r3
 8007566:	f001 fd76 	bl	8009056 <tcp_segs_free>
      pcb->ooseq = NULL;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8007570:	e005      	b.n	800757e <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	607b      	str	r3, [r7, #4]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1ec      	bne.n	8007558 <pbuf_free_ooseq+0x14>
    }
  }
}
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20006e81 	.word	0x20006e81
 8007588:	20006f68 	.word	0x20006f68

0800758c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800758c:	b480      	push	{r7}
 800758e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007590:	4b03      	ldr	r3, [pc, #12]	; (80075a0 <pbuf_pool_is_empty+0x14>)
 8007592:	2201      	movs	r2, #1
 8007594:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007596:	bf00      	nop
 8007598:	46bd      	mov	sp, r7
 800759a:	bc80      	pop	{r7}
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	20006e81 	.word	0x20006e81

080075a4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	4603      	mov	r3, r0
 80075ac:	71fb      	strb	r3, [r7, #7]
 80075ae:	460b      	mov	r3, r1
 80075b0:	80bb      	strh	r3, [r7, #4]
 80075b2:	4613      	mov	r3, r2
 80075b4:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 80075b6:	79fb      	ldrb	r3, [r7, #7]
 80075b8:	2b04      	cmp	r3, #4
 80075ba:	d81c      	bhi.n	80075f6 <pbuf_alloc+0x52>
 80075bc:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <pbuf_alloc+0x20>)
 80075be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c2:	bf00      	nop
 80075c4:	080075d9 	.word	0x080075d9
 80075c8:	080075df 	.word	0x080075df
 80075cc:	080075e5 	.word	0x080075e5
 80075d0:	080075eb 	.word	0x080075eb
 80075d4:	080075f1 	.word	0x080075f1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80075d8:	2336      	movs	r3, #54	; 0x36
 80075da:	82fb      	strh	r3, [r7, #22]
    break;
 80075dc:	e014      	b.n	8007608 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80075de:	2322      	movs	r3, #34	; 0x22
 80075e0:	82fb      	strh	r3, [r7, #22]
    break;
 80075e2:	e011      	b.n	8007608 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80075e4:	230e      	movs	r3, #14
 80075e6:	82fb      	strh	r3, [r7, #22]
    break;
 80075e8:	e00e      	b.n	8007608 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80075ea:	2300      	movs	r3, #0
 80075ec:	82fb      	strh	r3, [r7, #22]
    break;
 80075ee:	e00b      	b.n	8007608 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	82fb      	strh	r3, [r7, #22]
    break;
 80075f4:	e008      	b.n	8007608 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80075f6:	4ba1      	ldr	r3, [pc, #644]	; (800787c <pbuf_alloc+0x2d8>)
 80075f8:	f44f 728b 	mov.w	r2, #278	; 0x116
 80075fc:	49a0      	ldr	r1, [pc, #640]	; (8007880 <pbuf_alloc+0x2dc>)
 80075fe:	48a1      	ldr	r0, [pc, #644]	; (8007884 <pbuf_alloc+0x2e0>)
 8007600:	f00b f892 	bl	8012728 <iprintf>
    return NULL;
 8007604:	2300      	movs	r3, #0
 8007606:	e15c      	b.n	80078c2 <pbuf_alloc+0x31e>
  }

  switch (type) {
 8007608:	79bb      	ldrb	r3, [r7, #6]
 800760a:	2b03      	cmp	r3, #3
 800760c:	d00d      	beq.n	800762a <pbuf_alloc+0x86>
 800760e:	2b03      	cmp	r3, #3
 8007610:	f300 8146 	bgt.w	80078a0 <pbuf_alloc+0x2fc>
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 80d0 	beq.w	80077ba <pbuf_alloc+0x216>
 800761a:	2b00      	cmp	r3, #0
 800761c:	f2c0 8140 	blt.w	80078a0 <pbuf_alloc+0x2fc>
 8007620:	3b01      	subs	r3, #1
 8007622:	2b01      	cmp	r3, #1
 8007624:	f200 813c 	bhi.w	80078a0 <pbuf_alloc+0x2fc>
 8007628:	e10d      	b.n	8007846 <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800762a:	2008      	movs	r0, #8
 800762c:	f7ff fda2 	bl	8007174 <memp_malloc>
 8007630:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d103      	bne.n	8007640 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8007638:	f7ff ffa8 	bl	800758c <pbuf_pool_is_empty>
      return NULL;
 800763c:	2300      	movs	r3, #0
 800763e:	e140      	b.n	80078c2 <pbuf_alloc+0x31e>
    }
    p->type = type;
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	79ba      	ldrb	r2, [r7, #6]
 8007644:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800764c:	8afb      	ldrh	r3, [r7, #22]
 800764e:	3310      	adds	r3, #16
 8007650:	69fa      	ldr	r2, [r7, #28]
 8007652:	4413      	add	r3, r2
 8007654:	3303      	adds	r3, #3
 8007656:	f023 0303 	bic.w	r3, r3, #3
 800765a:	461a      	mov	r2, r3
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f003 0303 	and.w	r3, r3, #3
 8007668:	2b00      	cmp	r3, #0
 800766a:	d006      	beq.n	800767a <pbuf_alloc+0xd6>
 800766c:	4b83      	ldr	r3, [pc, #524]	; (800787c <pbuf_alloc+0x2d8>)
 800766e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007672:	4985      	ldr	r1, [pc, #532]	; (8007888 <pbuf_alloc+0x2e4>)
 8007674:	4883      	ldr	r0, [pc, #524]	; (8007884 <pbuf_alloc+0x2e0>)
 8007676:	f00b f857 	bl	8012728 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	88ba      	ldrh	r2, [r7, #4]
 800767e:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8007680:	8afb      	ldrh	r3, [r7, #22]
 8007682:	3303      	adds	r3, #3
 8007684:	f023 0303 	bic.w	r3, r3, #3
 8007688:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800768c:	88bb      	ldrh	r3, [r7, #4]
 800768e:	4293      	cmp	r3, r2
 8007690:	bf28      	it	cs
 8007692:	4613      	movcs	r3, r2
 8007694:	b29a      	uxth	r2, r3
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	69fa      	ldr	r2, [r7, #28]
 80076a0:	8952      	ldrh	r2, [r2, #10]
 80076a2:	441a      	add	r2, r3
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d906      	bls.n	80076bc <pbuf_alloc+0x118>
 80076ae:	4b73      	ldr	r3, [pc, #460]	; (800787c <pbuf_alloc+0x2d8>)
 80076b0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80076b4:	4975      	ldr	r1, [pc, #468]	; (800788c <pbuf_alloc+0x2e8>)
 80076b6:	4873      	ldr	r0, [pc, #460]	; (8007884 <pbuf_alloc+0x2e0>)
 80076b8:	f00b f836 	bl	8012728 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80076bc:	8afb      	ldrh	r3, [r7, #22]
 80076be:	3303      	adds	r3, #3
 80076c0:	f023 0303 	bic.w	r3, r3, #3
 80076c4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80076c8:	d106      	bne.n	80076d8 <pbuf_alloc+0x134>
 80076ca:	4b6c      	ldr	r3, [pc, #432]	; (800787c <pbuf_alloc+0x2d8>)
 80076cc:	f240 1231 	movw	r2, #305	; 0x131
 80076d0:	496f      	ldr	r1, [pc, #444]	; (8007890 <pbuf_alloc+0x2ec>)
 80076d2:	486c      	ldr	r0, [pc, #432]	; (8007884 <pbuf_alloc+0x2e0>)
 80076d4:	f00b f828 	bl	8012728 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	2201      	movs	r2, #1
 80076dc:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 80076e2:	88bb      	ldrh	r3, [r7, #4]
 80076e4:	69fa      	ldr	r2, [r7, #28]
 80076e6:	8952      	ldrh	r2, [r2, #10]
 80076e8:	1a9b      	subs	r3, r3, r2
 80076ea:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 80076ec:	e061      	b.n	80077b2 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80076ee:	2008      	movs	r0, #8
 80076f0:	f7ff fd40 	bl	8007174 <memp_malloc>
 80076f4:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d106      	bne.n	800770a <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 80076fc:	f7ff ff46 	bl	800758c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8007700:	69f8      	ldr	r0, [r7, #28]
 8007702:	f000 fac7 	bl	8007c94 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8007706:	2300      	movs	r3, #0
 8007708:	e0db      	b.n	80078c2 <pbuf_alloc+0x31e>
      }
      q->type = type;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	79ba      	ldrb	r2, [r7, #6]
 800770e:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007728:	4293      	cmp	r3, r2
 800772a:	dd06      	ble.n	800773a <pbuf_alloc+0x196>
 800772c:	4b53      	ldr	r3, [pc, #332]	; (800787c <pbuf_alloc+0x2d8>)
 800772e:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8007732:	4958      	ldr	r1, [pc, #352]	; (8007894 <pbuf_alloc+0x2f0>)
 8007734:	4853      	ldr	r0, [pc, #332]	; (8007884 <pbuf_alloc+0x2e0>)
 8007736:	f00a fff7 	bl	8012728 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	b29a      	uxth	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	b29b      	uxth	r3, r3
 8007746:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800774a:	bf28      	it	cs
 800774c:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8007750:	b29a      	uxth	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f103 0210 	add.w	r2, r3, #16
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f003 0303 	and.w	r3, r3, #3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d006      	beq.n	800777a <pbuf_alloc+0x1d6>
 800776c:	4b43      	ldr	r3, [pc, #268]	; (800787c <pbuf_alloc+0x2d8>)
 800776e:	f240 1251 	movw	r2, #337	; 0x151
 8007772:	4949      	ldr	r1, [pc, #292]	; (8007898 <pbuf_alloc+0x2f4>)
 8007774:	4843      	ldr	r0, [pc, #268]	; (8007884 <pbuf_alloc+0x2e0>)
 8007776:	f00a ffd7 	bl	8012728 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	69fa      	ldr	r2, [r7, #28]
 8007780:	8952      	ldrh	r2, [r2, #10]
 8007782:	441a      	add	r2, r3
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800778a:	429a      	cmp	r2, r3
 800778c:	d906      	bls.n	800779c <pbuf_alloc+0x1f8>
 800778e:	4b3b      	ldr	r3, [pc, #236]	; (800787c <pbuf_alloc+0x2d8>)
 8007790:	f240 1253 	movw	r2, #339	; 0x153
 8007794:	493d      	ldr	r1, [pc, #244]	; (800788c <pbuf_alloc+0x2e8>)
 8007796:	483b      	ldr	r0, [pc, #236]	; (8007884 <pbuf_alloc+0x2e0>)
 8007798:	f00a ffc6 	bl	8012728 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2201      	movs	r2, #1
 80077a0:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	895b      	ldrh	r3, [r3, #10]
 80077a6:	461a      	mov	r2, r3
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	1a9b      	subs	r3, r3, r2
 80077ac:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	dc9a      	bgt.n	80076ee <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 80077b8:	e07c      	b.n	80078b4 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80077ba:	8afb      	ldrh	r3, [r7, #22]
 80077bc:	3313      	adds	r3, #19
 80077be:	b29b      	uxth	r3, r3
 80077c0:	f023 0303 	bic.w	r3, r3, #3
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	88bb      	ldrh	r3, [r7, #4]
 80077c8:	3303      	adds	r3, #3
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	f023 0303 	bic.w	r3, r3, #3
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	4413      	add	r3, r2
 80077d4:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80077d6:	897a      	ldrh	r2, [r7, #10]
 80077d8:	88bb      	ldrh	r3, [r7, #4]
 80077da:	3303      	adds	r3, #3
 80077dc:	f023 0303 	bic.w	r3, r3, #3
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d201      	bcs.n	80077e8 <pbuf_alloc+0x244>
        return NULL;
 80077e4:	2300      	movs	r3, #0
 80077e6:	e06c      	b.n	80078c2 <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 80077e8:	897b      	ldrh	r3, [r7, #10]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7ff fb14 	bl	8006e18 <mem_malloc>
 80077f0:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <pbuf_alloc+0x258>
      return NULL;
 80077f8:	2300      	movs	r3, #0
 80077fa:	e062      	b.n	80078c2 <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80077fc:	8afb      	ldrh	r3, [r7, #22]
 80077fe:	3310      	adds	r3, #16
 8007800:	69fa      	ldr	r2, [r7, #28]
 8007802:	4413      	add	r3, r2
 8007804:	3303      	adds	r3, #3
 8007806:	f023 0303 	bic.w	r3, r3, #3
 800780a:	461a      	mov	r2, r3
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	88ba      	ldrh	r2, [r7, #4]
 8007814:	811a      	strh	r2, [r3, #8]
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	891a      	ldrh	r2, [r3, #8]
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
    p->type = type;
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	79ba      	ldrb	r2, [r7, #6]
 8007828:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f003 0303 	and.w	r3, r3, #3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d03d      	beq.n	80078b2 <pbuf_alloc+0x30e>
 8007836:	4b11      	ldr	r3, [pc, #68]	; (800787c <pbuf_alloc+0x2d8>)
 8007838:	f44f 72bb 	mov.w	r2, #374	; 0x176
 800783c:	4917      	ldr	r1, [pc, #92]	; (800789c <pbuf_alloc+0x2f8>)
 800783e:	4811      	ldr	r0, [pc, #68]	; (8007884 <pbuf_alloc+0x2e0>)
 8007840:	f00a ff72 	bl	8012728 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8007844:	e035      	b.n	80078b2 <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007846:	2007      	movs	r0, #7
 8007848:	f7ff fc94 	bl	8007174 <memp_malloc>
 800784c:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8007854:	2300      	movs	r3, #0
 8007856:	e034      	b.n	80078c2 <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	2200      	movs	r2, #0
 800785c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	88ba      	ldrh	r2, [r7, #4]
 8007862:	811a      	strh	r2, [r3, #8]
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	891a      	ldrh	r2, [r3, #8]
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	2200      	movs	r2, #0
 8007870:	601a      	str	r2, [r3, #0]
    p->type = type;
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	79ba      	ldrb	r2, [r7, #6]
 8007876:	731a      	strb	r2, [r3, #12]
    break;
 8007878:	e01c      	b.n	80078b4 <pbuf_alloc+0x310>
 800787a:	bf00      	nop
 800787c:	08016794 	.word	0x08016794
 8007880:	080167c4 	.word	0x080167c4
 8007884:	080167e0 	.word	0x080167e0
 8007888:	08016808 	.word	0x08016808
 800788c:	08016838 	.word	0x08016838
 8007890:	0801686c 	.word	0x0801686c
 8007894:	080168a0 	.word	0x080168a0
 8007898:	080168b4 	.word	0x080168b4
 800789c:	080168e4 	.word	0x080168e4
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80078a0:	4b0a      	ldr	r3, [pc, #40]	; (80078cc <pbuf_alloc+0x328>)
 80078a2:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80078a6:	490a      	ldr	r1, [pc, #40]	; (80078d0 <pbuf_alloc+0x32c>)
 80078a8:	480a      	ldr	r0, [pc, #40]	; (80078d4 <pbuf_alloc+0x330>)
 80078aa:	f00a ff3d 	bl	8012728 <iprintf>
    return NULL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	e007      	b.n	80078c2 <pbuf_alloc+0x31e>
    break;
 80078b2:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	2201      	movs	r2, #1
 80078b8:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	2200      	movs	r2, #0
 80078be:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80078c0:	69fb      	ldr	r3, [r7, #28]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3720      	adds	r7, #32
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	08016794 	.word	0x08016794
 80078d0:	08016910 	.word	0x08016910
 80078d4:	080167e0 	.word	0x080167e0

080078d8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	603b      	str	r3, [r7, #0]
 80078e0:	4603      	mov	r3, r0
 80078e2:	71fb      	strb	r3, [r7, #7]
 80078e4:	460b      	mov	r3, r1
 80078e6:	80bb      	strh	r3, [r7, #4]
 80078e8:	4613      	mov	r3, r2
 80078ea:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 80078ec:	79fb      	ldrb	r3, [r7, #7]
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d81b      	bhi.n	800792a <pbuf_alloced_custom+0x52>
 80078f2:	a201      	add	r2, pc, #4	; (adr r2, 80078f8 <pbuf_alloced_custom+0x20>)
 80078f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f8:	0800790d 	.word	0x0800790d
 80078fc:	08007913 	.word	0x08007913
 8007900:	08007919 	.word	0x08007919
 8007904:	0800791f 	.word	0x0800791f
 8007908:	08007925 	.word	0x08007925
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800790c:	2336      	movs	r3, #54	; 0x36
 800790e:	81fb      	strh	r3, [r7, #14]
    break;
 8007910:	e014      	b.n	800793c <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8007912:	2322      	movs	r3, #34	; 0x22
 8007914:	81fb      	strh	r3, [r7, #14]
    break;
 8007916:	e011      	b.n	800793c <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8007918:	230e      	movs	r3, #14
 800791a:	81fb      	strh	r3, [r7, #14]
    break;
 800791c:	e00e      	b.n	800793c <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800791e:	2300      	movs	r3, #0
 8007920:	81fb      	strh	r3, [r7, #14]
    break;
 8007922:	e00b      	b.n	800793c <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	81fb      	strh	r3, [r7, #14]
    break;
 8007928:	e008      	b.n	800793c <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800792a:	4b1d      	ldr	r3, [pc, #116]	; (80079a0 <pbuf_alloced_custom+0xc8>)
 800792c:	f240 12c5 	movw	r2, #453	; 0x1c5
 8007930:	491c      	ldr	r1, [pc, #112]	; (80079a4 <pbuf_alloced_custom+0xcc>)
 8007932:	481d      	ldr	r0, [pc, #116]	; (80079a8 <pbuf_alloced_custom+0xd0>)
 8007934:	f00a fef8 	bl	8012728 <iprintf>
    return NULL;
 8007938:	2300      	movs	r3, #0
 800793a:	e02d      	b.n	8007998 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800793c:	89fb      	ldrh	r3, [r7, #14]
 800793e:	3303      	adds	r3, #3
 8007940:	f023 0203 	bic.w	r2, r3, #3
 8007944:	88bb      	ldrh	r3, [r7, #4]
 8007946:	441a      	add	r2, r3
 8007948:	8bbb      	ldrh	r3, [r7, #28]
 800794a:	429a      	cmp	r2, r3
 800794c:	d901      	bls.n	8007952 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800794e:	2300      	movs	r3, #0
 8007950:	e022      	b.n	8007998 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d008      	beq.n	8007970 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800795e:	89fb      	ldrh	r3, [r7, #14]
 8007960:	3303      	adds	r3, #3
 8007962:	f023 0303 	bic.w	r3, r3, #3
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	441a      	add	r2, r3
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	605a      	str	r2, [r3, #4]
 800796e:	e002      	b.n	8007976 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2200      	movs	r2, #0
 8007974:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2202      	movs	r2, #2
 800797a:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	88ba      	ldrh	r2, [r7, #4]
 8007980:	811a      	strh	r2, [r3, #8]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	891a      	ldrh	r2, [r3, #8]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	79ba      	ldrb	r2, [r7, #6]
 800798e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2201      	movs	r2, #1
 8007994:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8007996:	683b      	ldr	r3, [r7, #0]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	08016794 	.word	0x08016794
 80079a4:	0801692c 	.word	0x0801692c
 80079a8:	080167e0 	.word	0x080167e0

080079ac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d106      	bne.n	80079cc <pbuf_realloc+0x20>
 80079be:	4b4b      	ldr	r3, [pc, #300]	; (8007aec <pbuf_realloc+0x140>)
 80079c0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80079c4:	494a      	ldr	r1, [pc, #296]	; (8007af0 <pbuf_realloc+0x144>)
 80079c6:	484b      	ldr	r0, [pc, #300]	; (8007af4 <pbuf_realloc+0x148>)
 80079c8:	f00a feae 	bl	8012728 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	7b1b      	ldrb	r3, [r3, #12]
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d012      	beq.n	80079fa <pbuf_realloc+0x4e>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	7b1b      	ldrb	r3, [r3, #12]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d00e      	beq.n	80079fa <pbuf_realloc+0x4e>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	7b1b      	ldrb	r3, [r3, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00a      	beq.n	80079fa <pbuf_realloc+0x4e>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	7b1b      	ldrb	r3, [r3, #12]
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d006      	beq.n	80079fa <pbuf_realloc+0x4e>
 80079ec:	4b3f      	ldr	r3, [pc, #252]	; (8007aec <pbuf_realloc+0x140>)
 80079ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80079f2:	4941      	ldr	r1, [pc, #260]	; (8007af8 <pbuf_realloc+0x14c>)
 80079f4:	483f      	ldr	r0, [pc, #252]	; (8007af4 <pbuf_realloc+0x148>)
 80079f6:	f00a fe97 	bl	8012728 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	891b      	ldrh	r3, [r3, #8]
 80079fe:	887a      	ldrh	r2, [r7, #2]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d26e      	bcs.n	8007ae2 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8007a04:	887b      	ldrh	r3, [r7, #2]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	8912      	ldrh	r2, [r2, #8]
 8007a0a:	1a9b      	subs	r3, r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007a0e:	887b      	ldrh	r3, [r7, #2]
 8007a10:	827b      	strh	r3, [r7, #18]
  q = p;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007a16:	e025      	b.n	8007a64 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	895b      	ldrh	r3, [r3, #10]
 8007a1c:	8a7a      	ldrh	r2, [r7, #18]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	dd06      	ble.n	8007a3a <pbuf_realloc+0x8e>
 8007a2c:	4b2f      	ldr	r3, [pc, #188]	; (8007aec <pbuf_realloc+0x140>)
 8007a2e:	f240 220b 	movw	r2, #523	; 0x20b
 8007a32:	4932      	ldr	r1, [pc, #200]	; (8007afc <pbuf_realloc+0x150>)
 8007a34:	482f      	ldr	r0, [pc, #188]	; (8007af4 <pbuf_realloc+0x148>)
 8007a36:	f00a fe77 	bl	8012728 <iprintf>
    q->tot_len += (u16_t)grow;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	891a      	ldrh	r2, [r3, #8]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	4413      	add	r3, r2
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d106      	bne.n	8007a64 <pbuf_realloc+0xb8>
 8007a56:	4b25      	ldr	r3, [pc, #148]	; (8007aec <pbuf_realloc+0x140>)
 8007a58:	f240 220f 	movw	r2, #527	; 0x20f
 8007a5c:	4928      	ldr	r1, [pc, #160]	; (8007b00 <pbuf_realloc+0x154>)
 8007a5e:	4825      	ldr	r0, [pc, #148]	; (8007af4 <pbuf_realloc+0x148>)
 8007a60:	f00a fe62 	bl	8012728 <iprintf>
  while (rem_len > q->len) {
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	895b      	ldrh	r3, [r3, #10]
 8007a68:	8a7a      	ldrh	r2, [r7, #18]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d8d4      	bhi.n	8007a18 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	7b1b      	ldrb	r3, [r3, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d121      	bne.n	8007aba <pbuf_realloc+0x10e>
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	895b      	ldrh	r3, [r3, #10]
 8007a7a:	8a7a      	ldrh	r2, [r7, #18]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d01c      	beq.n	8007aba <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	7b5b      	ldrb	r3, [r3, #13]
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d116      	bne.n	8007aba <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	8a7b      	ldrh	r3, [r7, #18]
 8007a98:	4413      	add	r3, r2
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6978      	ldr	r0, [r7, #20]
 8007aa0:	f7ff f8bc 	bl	8006c1c <mem_trim>
 8007aa4:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d106      	bne.n	8007aba <pbuf_realloc+0x10e>
 8007aac:	4b0f      	ldr	r3, [pc, #60]	; (8007aec <pbuf_realloc+0x140>)
 8007aae:	f240 221d 	movw	r2, #541	; 0x21d
 8007ab2:	4914      	ldr	r1, [pc, #80]	; (8007b04 <pbuf_realloc+0x158>)
 8007ab4:	480f      	ldr	r0, [pc, #60]	; (8007af4 <pbuf_realloc+0x148>)
 8007ab6:	f00a fe37 	bl	8012728 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	8a7a      	ldrh	r2, [r7, #18]
 8007abe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	895a      	ldrh	r2, [r3, #10]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d004      	beq.n	8007ada <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 f8dd 	bl	8007c94 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2200      	movs	r2, #0
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	e000      	b.n	8007ae4 <pbuf_realloc+0x138>
    return;
 8007ae2:	bf00      	nop

}
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	08016794 	.word	0x08016794
 8007af0:	08016950 	.word	0x08016950
 8007af4:	080167e0 	.word	0x080167e0
 8007af8:	08016968 	.word	0x08016968
 8007afc:	08016984 	.word	0x08016984
 8007b00:	08016998 	.word	0x08016998
 8007b04:	080169b0 	.word	0x080169b0

08007b08 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	807b      	strh	r3, [r7, #2]
 8007b14:	4613      	mov	r3, r2
 8007b16:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d106      	bne.n	8007b2c <pbuf_header_impl+0x24>
 8007b1e:	4b46      	ldr	r3, [pc, #280]	; (8007c38 <pbuf_header_impl+0x130>)
 8007b20:	f240 223f 	movw	r2, #575	; 0x23f
 8007b24:	4945      	ldr	r1, [pc, #276]	; (8007c3c <pbuf_header_impl+0x134>)
 8007b26:	4846      	ldr	r0, [pc, #280]	; (8007c40 <pbuf_header_impl+0x138>)
 8007b28:	f00a fdfe 	bl	8012728 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8007b2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <pbuf_header_impl+0x32>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <pbuf_header_impl+0x36>
    return 0;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	e078      	b.n	8007c30 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8007b3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	da10      	bge.n	8007b68 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8007b46:	887b      	ldrh	r3, [r7, #2]
 8007b48:	425b      	negs	r3, r3
 8007b4a:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	895b      	ldrh	r3, [r3, #10]
 8007b50:	89fa      	ldrh	r2, [r7, #14]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d90a      	bls.n	8007b6c <pbuf_header_impl+0x64>
 8007b56:	4b38      	ldr	r3, [pc, #224]	; (8007c38 <pbuf_header_impl+0x130>)
 8007b58:	f240 2247 	movw	r2, #583	; 0x247
 8007b5c:	4939      	ldr	r1, [pc, #228]	; (8007c44 <pbuf_header_impl+0x13c>)
 8007b5e:	4838      	ldr	r0, [pc, #224]	; (8007c40 <pbuf_header_impl+0x138>)
 8007b60:	f00a fde2 	bl	8012728 <iprintf>
 8007b64:	2301      	movs	r3, #1
 8007b66:	e063      	b.n	8007c30 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8007b68:	887b      	ldrh	r3, [r7, #2]
 8007b6a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	7b1b      	ldrb	r3, [r3, #12]
 8007b70:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8007b78:	89bb      	ldrh	r3, [r7, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d002      	beq.n	8007b84 <pbuf_header_impl+0x7c>
 8007b7e:	89bb      	ldrh	r3, [r7, #12]
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d112      	bne.n	8007baa <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b8c:	425b      	negs	r3, r3
 8007b8e:	441a      	add	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3310      	adds	r3, #16
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d238      	bcs.n	8007c12 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e042      	b.n	8007c30 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8007baa:	89bb      	ldrh	r3, [r7, #12]
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d002      	beq.n	8007bb6 <pbuf_header_impl+0xae>
 8007bb0:	89bb      	ldrh	r3, [r7, #12]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d124      	bne.n	8007c00 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8007bb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	da0d      	bge.n	8007bda <pbuf_header_impl+0xd2>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	895b      	ldrh	r3, [r3, #10]
 8007bc2:	89fa      	ldrh	r2, [r7, #14]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d808      	bhi.n	8007bda <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007bd0:	425b      	negs	r3, r3
 8007bd2:	441a      	add	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	605a      	str	r2, [r3, #4]
 8007bd8:	e011      	b.n	8007bfe <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8007bda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	dd0b      	ble.n	8007bfa <pbuf_header_impl+0xf2>
 8007be2:	787b      	ldrb	r3, [r7, #1]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d008      	beq.n	8007bfa <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007bf0:	425b      	negs	r3, r3
 8007bf2:	441a      	add	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	605a      	str	r2, [r3, #4]
 8007bf8:	e001      	b.n	8007bfe <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e018      	b.n	8007c30 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8007bfe:	e008      	b.n	8007c12 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8007c00:	4b0d      	ldr	r3, [pc, #52]	; (8007c38 <pbuf_header_impl+0x130>)
 8007c02:	f240 2277 	movw	r2, #631	; 0x277
 8007c06:	4910      	ldr	r1, [pc, #64]	; (8007c48 <pbuf_header_impl+0x140>)
 8007c08:	480d      	ldr	r0, [pc, #52]	; (8007c40 <pbuf_header_impl+0x138>)
 8007c0a:	f00a fd8d 	bl	8012728 <iprintf>
    return 1;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e00e      	b.n	8007c30 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	895a      	ldrh	r2, [r3, #10]
 8007c16:	887b      	ldrh	r3, [r7, #2]
 8007c18:	4413      	add	r3, r2
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	891a      	ldrh	r2, [r3, #8]
 8007c24:	887b      	ldrh	r3, [r7, #2]
 8007c26:	4413      	add	r3, r2
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	08016794 	.word	0x08016794
 8007c3c:	080169cc 	.word	0x080169cc
 8007c40:	080167e0 	.word	0x080167e0
 8007c44:	080169d8 	.word	0x080169d8
 8007c48:	080169f8 	.word	0x080169f8

08007c4c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	460b      	mov	r3, r1
 8007c56:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8007c58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7ff ff51 	bl	8007b08 <pbuf_header_impl>
 8007c66:	4603      	mov	r3, r0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8007c7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007c80:	2201      	movs	r2, #1
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff ff3f 	bl	8007b08 <pbuf_header_impl>
 8007c8a:	4603      	mov	r3, r0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10b      	bne.n	8007cba <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d106      	bne.n	8007cb6 <pbuf_free+0x22>
 8007ca8:	4b3e      	ldr	r3, [pc, #248]	; (8007da4 <pbuf_free+0x110>)
 8007caa:	f240 22d2 	movw	r2, #722	; 0x2d2
 8007cae:	493e      	ldr	r1, [pc, #248]	; (8007da8 <pbuf_free+0x114>)
 8007cb0:	483e      	ldr	r0, [pc, #248]	; (8007dac <pbuf_free+0x118>)
 8007cb2:	f00a fd39 	bl	8012728 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	e070      	b.n	8007d9c <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	7b1b      	ldrb	r3, [r3, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d012      	beq.n	8007ce8 <pbuf_free+0x54>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	7b1b      	ldrb	r3, [r3, #12]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d00e      	beq.n	8007ce8 <pbuf_free+0x54>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	7b1b      	ldrb	r3, [r3, #12]
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d00a      	beq.n	8007ce8 <pbuf_free+0x54>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	7b1b      	ldrb	r3, [r3, #12]
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d006      	beq.n	8007ce8 <pbuf_free+0x54>
 8007cda:	4b32      	ldr	r3, [pc, #200]	; (8007da4 <pbuf_free+0x110>)
 8007cdc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007ce0:	4933      	ldr	r1, [pc, #204]	; (8007db0 <pbuf_free+0x11c>)
 8007ce2:	4832      	ldr	r0, [pc, #200]	; (8007dac <pbuf_free+0x118>)
 8007ce4:	f00a fd20 	bl	8012728 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007cec:	e052      	b.n	8007d94 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	89db      	ldrh	r3, [r3, #14]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d106      	bne.n	8007d04 <pbuf_free+0x70>
 8007cf6:	4b2b      	ldr	r3, [pc, #172]	; (8007da4 <pbuf_free+0x110>)
 8007cf8:	f240 22eb 	movw	r2, #747	; 0x2eb
 8007cfc:	492d      	ldr	r1, [pc, #180]	; (8007db4 <pbuf_free+0x120>)
 8007cfe:	482b      	ldr	r0, [pc, #172]	; (8007dac <pbuf_free+0x118>)
 8007d00:	f00a fd12 	bl	8012728 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	89db      	ldrh	r3, [r3, #14]
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	81da      	strh	r2, [r3, #14]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	89db      	ldrh	r3, [r3, #14]
 8007d14:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007d16:	8abb      	ldrh	r3, [r7, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d139      	bne.n	8007d90 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	7b1b      	ldrb	r3, [r3, #12]
 8007d26:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	7b5b      	ldrb	r3, [r3, #13]
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d011      	beq.n	8007d58 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d106      	bne.n	8007d4e <pbuf_free+0xba>
 8007d40:	4b18      	ldr	r3, [pc, #96]	; (8007da4 <pbuf_free+0x110>)
 8007d42:	f240 22f9 	movw	r2, #761	; 0x2f9
 8007d46:	491c      	ldr	r1, [pc, #112]	; (8007db8 <pbuf_free+0x124>)
 8007d48:	4818      	ldr	r0, [pc, #96]	; (8007dac <pbuf_free+0x118>)
 8007d4a:	f00a fced 	bl	8012728 <iprintf>
        pc->custom_free_function(p);
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	4798      	blx	r3
 8007d56:	e015      	b.n	8007d84 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8007d58:	89fb      	ldrh	r3, [r7, #14]
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d104      	bne.n	8007d68 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	2008      	movs	r0, #8
 8007d62:	f7ff fa59 	bl	8007218 <memp_free>
 8007d66:	e00d      	b.n	8007d84 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8007d68:	89fb      	ldrh	r3, [r7, #14]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d002      	beq.n	8007d74 <pbuf_free+0xe0>
 8007d6e:	89fb      	ldrh	r3, [r7, #14]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d104      	bne.n	8007d7e <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8007d74:	6879      	ldr	r1, [r7, #4]
 8007d76:	2007      	movs	r0, #7
 8007d78:	f7ff fa4e 	bl	8007218 <memp_free>
 8007d7c:	e002      	b.n	8007d84 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7fe fed0 	bl	8006b24 <mem_free>
        }
      }
      count++;
 8007d84:	7dfb      	ldrb	r3, [r7, #23]
 8007d86:	3301      	adds	r3, #1
 8007d88:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	607b      	str	r3, [r7, #4]
 8007d8e:	e001      	b.n	8007d94 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8007d90:	2300      	movs	r3, #0
 8007d92:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1a9      	bne.n	8007cee <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3718      	adds	r7, #24
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	08016794 	.word	0x08016794
 8007da8:	080169cc 	.word	0x080169cc
 8007dac:	080167e0 	.word	0x080167e0
 8007db0:	08016a08 	.word	0x08016a08
 8007db4:	08016a20 	.word	0x08016a20
 8007db8:	08016a38 	.word	0x08016a38

08007dbc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007dc8:	e005      	b.n	8007dd6 <pbuf_clen+0x1a>
    ++len;
 8007dca:	89fb      	ldrh	r3, [r7, #14]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1f6      	bne.n	8007dca <pbuf_clen+0xe>
  }
  return len;
 8007ddc:	89fb      	ldrh	r3, [r7, #14]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bc80      	pop	{r7}
 8007de6:	4770      	bx	lr

08007de8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d010      	beq.n	8007e18 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	89db      	ldrh	r3, [r3, #14]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	89db      	ldrh	r3, [r3, #14]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d106      	bne.n	8007e18 <pbuf_ref+0x30>
 8007e0a:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <pbuf_ref+0x38>)
 8007e0c:	f240 3239 	movw	r2, #825	; 0x339
 8007e10:	4904      	ldr	r1, [pc, #16]	; (8007e24 <pbuf_ref+0x3c>)
 8007e12:	4805      	ldr	r0, [pc, #20]	; (8007e28 <pbuf_ref+0x40>)
 8007e14:	f00a fc88 	bl	8012728 <iprintf>
  }
}
 8007e18:	bf00      	nop
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	08016794 	.word	0x08016794
 8007e24:	08016a5c 	.word	0x08016a5c
 8007e28:	080167e0 	.word	0x080167e0

08007e2c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <pbuf_cat+0x16>
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d107      	bne.n	8007e52 <pbuf_cat+0x26>
 8007e42:	4b20      	ldr	r3, [pc, #128]	; (8007ec4 <pbuf_cat+0x98>)
 8007e44:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8007e48:	491f      	ldr	r1, [pc, #124]	; (8007ec8 <pbuf_cat+0x9c>)
 8007e4a:	4820      	ldr	r0, [pc, #128]	; (8007ecc <pbuf_cat+0xa0>)
 8007e4c:	f00a fc6c 	bl	8012728 <iprintf>
 8007e50:	e034      	b.n	8007ebc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	e00a      	b.n	8007e6e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	891a      	ldrh	r2, [r3, #8]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	891b      	ldrh	r3, [r3, #8]
 8007e60:	4413      	add	r3, r2
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	60fb      	str	r3, [r7, #12]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1f0      	bne.n	8007e58 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	891a      	ldrh	r2, [r3, #8]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	895b      	ldrh	r3, [r3, #10]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d006      	beq.n	8007e90 <pbuf_cat+0x64>
 8007e82:	4b10      	ldr	r3, [pc, #64]	; (8007ec4 <pbuf_cat+0x98>)
 8007e84:	f240 3255 	movw	r2, #853	; 0x355
 8007e88:	4911      	ldr	r1, [pc, #68]	; (8007ed0 <pbuf_cat+0xa4>)
 8007e8a:	4810      	ldr	r0, [pc, #64]	; (8007ecc <pbuf_cat+0xa0>)
 8007e8c:	f00a fc4c 	bl	8012728 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d006      	beq.n	8007ea6 <pbuf_cat+0x7a>
 8007e98:	4b0a      	ldr	r3, [pc, #40]	; (8007ec4 <pbuf_cat+0x98>)
 8007e9a:	f240 3256 	movw	r2, #854	; 0x356
 8007e9e:	490d      	ldr	r1, [pc, #52]	; (8007ed4 <pbuf_cat+0xa8>)
 8007ea0:	480a      	ldr	r0, [pc, #40]	; (8007ecc <pbuf_cat+0xa0>)
 8007ea2:	f00a fc41 	bl	8012728 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	891a      	ldrh	r2, [r3, #8]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	891b      	ldrh	r3, [r3, #8]
 8007eae:	4413      	add	r3, r2
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	08016794 	.word	0x08016794
 8007ec8:	08016a70 	.word	0x08016a70
 8007ecc:	080167e0 	.word	0x080167e0
 8007ed0:	08016aa8 	.word	0x08016aa8
 8007ed4:	08016ad8 	.word	0x08016ad8

08007ed8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7ff ffa1 	bl	8007e2c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007eea:	6838      	ldr	r0, [r7, #0]
 8007eec:	f7ff ff7c 	bl	8007de8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8007f02:	2300      	movs	r3, #0
 8007f04:	81fb      	strh	r3, [r7, #14]
 8007f06:	2300      	movs	r3, #0
 8007f08:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d008      	beq.n	8007f22 <pbuf_copy+0x2a>
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <pbuf_copy+0x2a>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	891a      	ldrh	r2, [r3, #8]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	891b      	ldrh	r3, [r3, #8]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d209      	bcs.n	8007f36 <pbuf_copy+0x3e>
 8007f22:	4b54      	ldr	r3, [pc, #336]	; (8008074 <pbuf_copy+0x17c>)
 8007f24:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8007f28:	4953      	ldr	r1, [pc, #332]	; (8008078 <pbuf_copy+0x180>)
 8007f2a:	4854      	ldr	r0, [pc, #336]	; (800807c <pbuf_copy+0x184>)
 8007f2c:	f00a fbfc 	bl	8012728 <iprintf>
 8007f30:	f06f 030f 	mvn.w	r3, #15
 8007f34:	e099      	b.n	800806a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	895b      	ldrh	r3, [r3, #10]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	89fb      	ldrh	r3, [r7, #14]
 8007f3e:	1ad2      	subs	r2, r2, r3
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	895b      	ldrh	r3, [r3, #10]
 8007f44:	4619      	mov	r1, r3
 8007f46:	89bb      	ldrh	r3, [r7, #12]
 8007f48:	1acb      	subs	r3, r1, r3
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	db05      	blt.n	8007f5a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	895a      	ldrh	r2, [r3, #10]
 8007f52:	89bb      	ldrh	r3, [r7, #12]
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	817b      	strh	r3, [r7, #10]
 8007f58:	e004      	b.n	8007f64 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	895a      	ldrh	r2, [r3, #10]
 8007f5e:	89fb      	ldrh	r3, [r7, #14]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	89fb      	ldrh	r3, [r7, #14]
 8007f6a:	18d0      	adds	r0, r2, r3
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	89bb      	ldrh	r3, [r7, #12]
 8007f72:	4413      	add	r3, r2
 8007f74:	897a      	ldrh	r2, [r7, #10]
 8007f76:	4619      	mov	r1, r3
 8007f78:	f009 fd52 	bl	8011a20 <memcpy>
    offset_to += len;
 8007f7c:	89fa      	ldrh	r2, [r7, #14]
 8007f7e:	897b      	ldrh	r3, [r7, #10]
 8007f80:	4413      	add	r3, r2
 8007f82:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8007f84:	89ba      	ldrh	r2, [r7, #12]
 8007f86:	897b      	ldrh	r3, [r7, #10]
 8007f88:	4413      	add	r3, r2
 8007f8a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	895b      	ldrh	r3, [r3, #10]
 8007f90:	89fa      	ldrh	r2, [r7, #14]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d906      	bls.n	8007fa4 <pbuf_copy+0xac>
 8007f96:	4b37      	ldr	r3, [pc, #220]	; (8008074 <pbuf_copy+0x17c>)
 8007f98:	f240 32cd 	movw	r2, #973	; 0x3cd
 8007f9c:	4938      	ldr	r1, [pc, #224]	; (8008080 <pbuf_copy+0x188>)
 8007f9e:	4837      	ldr	r0, [pc, #220]	; (800807c <pbuf_copy+0x184>)
 8007fa0:	f00a fbc2 	bl	8012728 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	895b      	ldrh	r3, [r3, #10]
 8007fa8:	89ba      	ldrh	r2, [r7, #12]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d906      	bls.n	8007fbc <pbuf_copy+0xc4>
 8007fae:	4b31      	ldr	r3, [pc, #196]	; (8008074 <pbuf_copy+0x17c>)
 8007fb0:	f240 32ce 	movw	r2, #974	; 0x3ce
 8007fb4:	4933      	ldr	r1, [pc, #204]	; (8008084 <pbuf_copy+0x18c>)
 8007fb6:	4831      	ldr	r0, [pc, #196]	; (800807c <pbuf_copy+0x184>)
 8007fb8:	f00a fbb6 	bl	8012728 <iprintf>
    if (offset_from >= p_from->len) {
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	895b      	ldrh	r3, [r3, #10]
 8007fc0:	89ba      	ldrh	r2, [r7, #12]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d304      	bcc.n	8007fd0 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	895b      	ldrh	r3, [r3, #10]
 8007fd4:	89fa      	ldrh	r2, [r7, #14]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d114      	bne.n	8008004 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10c      	bne.n	8008004 <pbuf_copy+0x10c>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d009      	beq.n	8008004 <pbuf_copy+0x10c>
 8007ff0:	4b20      	ldr	r3, [pc, #128]	; (8008074 <pbuf_copy+0x17c>)
 8007ff2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8007ff6:	4924      	ldr	r1, [pc, #144]	; (8008088 <pbuf_copy+0x190>)
 8007ff8:	4820      	ldr	r0, [pc, #128]	; (800807c <pbuf_copy+0x184>)
 8007ffa:	f00a fb95 	bl	8012728 <iprintf>
 8007ffe:	f06f 030f 	mvn.w	r3, #15
 8008002:	e032      	b.n	800806a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d013      	beq.n	8008032 <pbuf_copy+0x13a>
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	895a      	ldrh	r2, [r3, #10]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	891b      	ldrh	r3, [r3, #8]
 8008012:	429a      	cmp	r2, r3
 8008014:	d10d      	bne.n	8008032 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d009      	beq.n	8008032 <pbuf_copy+0x13a>
 800801e:	4b15      	ldr	r3, [pc, #84]	; (8008074 <pbuf_copy+0x17c>)
 8008020:	f240 32dd 	movw	r2, #989	; 0x3dd
 8008024:	4919      	ldr	r1, [pc, #100]	; (800808c <pbuf_copy+0x194>)
 8008026:	4815      	ldr	r0, [pc, #84]	; (800807c <pbuf_copy+0x184>)
 8008028:	f00a fb7e 	bl	8012728 <iprintf>
 800802c:	f06f 0305 	mvn.w	r3, #5
 8008030:	e01b      	b.n	800806a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d013      	beq.n	8008060 <pbuf_copy+0x168>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	895a      	ldrh	r2, [r3, #10]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	891b      	ldrh	r3, [r3, #8]
 8008040:	429a      	cmp	r2, r3
 8008042:	d10d      	bne.n	8008060 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d009      	beq.n	8008060 <pbuf_copy+0x168>
 800804c:	4b09      	ldr	r3, [pc, #36]	; (8008074 <pbuf_copy+0x17c>)
 800804e:	f240 32e2 	movw	r2, #994	; 0x3e2
 8008052:	490e      	ldr	r1, [pc, #56]	; (800808c <pbuf_copy+0x194>)
 8008054:	4809      	ldr	r0, [pc, #36]	; (800807c <pbuf_copy+0x184>)
 8008056:	f00a fb67 	bl	8012728 <iprintf>
 800805a:	f06f 0305 	mvn.w	r3, #5
 800805e:	e004      	b.n	800806a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	f47f af67 	bne.w	8007f36 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	08016794 	.word	0x08016794
 8008078:	08016b24 	.word	0x08016b24
 800807c:	080167e0 	.word	0x080167e0
 8008080:	08016b54 	.word	0x08016b54
 8008084:	08016b6c 	.word	0x08016b6c
 8008088:	08016b88 	.word	0x08016b88
 800808c:	08016b98 	.word	0x08016b98

08008090 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	4611      	mov	r1, r2
 800809c:	461a      	mov	r2, r3
 800809e:	460b      	mov	r3, r1
 80080a0:	80fb      	strh	r3, [r7, #6]
 80080a2:	4613      	mov	r3, r2
 80080a4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80080a6:	2300      	movs	r3, #0
 80080a8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d108      	bne.n	80080c2 <pbuf_copy_partial+0x32>
 80080b0:	4b30      	ldr	r3, [pc, #192]	; (8008174 <pbuf_copy_partial+0xe4>)
 80080b2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80080b6:	4930      	ldr	r1, [pc, #192]	; (8008178 <pbuf_copy_partial+0xe8>)
 80080b8:	4830      	ldr	r0, [pc, #192]	; (800817c <pbuf_copy_partial+0xec>)
 80080ba:	f00a fb35 	bl	8012728 <iprintf>
 80080be:	2300      	movs	r3, #0
 80080c0:	e054      	b.n	800816c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d108      	bne.n	80080da <pbuf_copy_partial+0x4a>
 80080c8:	4b2a      	ldr	r3, [pc, #168]	; (8008174 <pbuf_copy_partial+0xe4>)
 80080ca:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80080ce:	492c      	ldr	r1, [pc, #176]	; (8008180 <pbuf_copy_partial+0xf0>)
 80080d0:	482a      	ldr	r0, [pc, #168]	; (800817c <pbuf_copy_partial+0xec>)
 80080d2:	f00a fb29 	bl	8012728 <iprintf>
 80080d6:	2300      	movs	r3, #0
 80080d8:	e048      	b.n	800816c <pbuf_copy_partial+0xdc>

  left = 0;
 80080da:	2300      	movs	r3, #0
 80080dc:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <pbuf_copy_partial+0x5a>
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <pbuf_copy_partial+0x5e>
    return 0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	e03e      	b.n	800816c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	61fb      	str	r3, [r7, #28]
 80080f2:	e034      	b.n	800815e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 80080f4:	88bb      	ldrh	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <pbuf_copy_partial+0x80>
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	895b      	ldrh	r3, [r3, #10]
 80080fe:	88ba      	ldrh	r2, [r7, #4]
 8008100:	429a      	cmp	r2, r3
 8008102:	d305      	bcc.n	8008110 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	895b      	ldrh	r3, [r3, #10]
 8008108:	88ba      	ldrh	r2, [r7, #4]
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	80bb      	strh	r3, [r7, #4]
 800810e:	e023      	b.n	8008158 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	895a      	ldrh	r2, [r3, #10]
 8008114:	88bb      	ldrh	r3, [r7, #4]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800811a:	8b3a      	ldrh	r2, [r7, #24]
 800811c:	88fb      	ldrh	r3, [r7, #6]
 800811e:	429a      	cmp	r2, r3
 8008120:	d901      	bls.n	8008126 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8008122:	88fb      	ldrh	r3, [r7, #6]
 8008124:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8008126:	8b7b      	ldrh	r3, [r7, #26]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	18d0      	adds	r0, r2, r3
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	88bb      	ldrh	r3, [r7, #4]
 8008132:	4413      	add	r3, r2
 8008134:	8b3a      	ldrh	r2, [r7, #24]
 8008136:	4619      	mov	r1, r3
 8008138:	f009 fc72 	bl	8011a20 <memcpy>
      copied_total += buf_copy_len;
 800813c:	8afa      	ldrh	r2, [r7, #22]
 800813e:	8b3b      	ldrh	r3, [r7, #24]
 8008140:	4413      	add	r3, r2
 8008142:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8008144:	8b7a      	ldrh	r2, [r7, #26]
 8008146:	8b3b      	ldrh	r3, [r7, #24]
 8008148:	4413      	add	r3, r2
 800814a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800814c:	88fa      	ldrh	r2, [r7, #6]
 800814e:	8b3b      	ldrh	r3, [r7, #24]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008154:	2300      	movs	r3, #0
 8008156:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	61fb      	str	r3, [r7, #28]
 800815e:	88fb      	ldrh	r3, [r7, #6]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d002      	beq.n	800816a <pbuf_copy_partial+0xda>
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1c4      	bne.n	80080f4 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800816a:	8afb      	ldrh	r3, [r7, #22]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3720      	adds	r7, #32
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	08016794 	.word	0x08016794
 8008178:	08016bc4 	.word	0x08016bc4
 800817c:	080167e0 	.word	0x080167e0
 8008180:	08016be4 	.word	0x08016be4

08008184 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	4613      	mov	r3, r2
 8008190:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 8008192:	88fb      	ldrh	r3, [r7, #6]
 8008194:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d109      	bne.n	80081b4 <pbuf_take+0x30>
 80081a0:	4b3a      	ldr	r3, [pc, #232]	; (800828c <pbuf_take+0x108>)
 80081a2:	f240 4284 	movw	r2, #1156	; 0x484
 80081a6:	493a      	ldr	r1, [pc, #232]	; (8008290 <pbuf_take+0x10c>)
 80081a8:	483a      	ldr	r0, [pc, #232]	; (8008294 <pbuf_take+0x110>)
 80081aa:	f00a fabd 	bl	8012728 <iprintf>
 80081ae:	f06f 030f 	mvn.w	r3, #15
 80081b2:	e066      	b.n	8008282 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d109      	bne.n	80081ce <pbuf_take+0x4a>
 80081ba:	4b34      	ldr	r3, [pc, #208]	; (800828c <pbuf_take+0x108>)
 80081bc:	f240 4285 	movw	r2, #1157	; 0x485
 80081c0:	4935      	ldr	r1, [pc, #212]	; (8008298 <pbuf_take+0x114>)
 80081c2:	4834      	ldr	r0, [pc, #208]	; (8008294 <pbuf_take+0x110>)
 80081c4:	f00a fab0 	bl	8012728 <iprintf>
 80081c8:	f06f 030f 	mvn.w	r3, #15
 80081cc:	e059      	b.n	8008282 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	891b      	ldrh	r3, [r3, #8]
 80081d2:	88fa      	ldrh	r2, [r7, #6]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d909      	bls.n	80081ec <pbuf_take+0x68>
 80081d8:	4b2c      	ldr	r3, [pc, #176]	; (800828c <pbuf_take+0x108>)
 80081da:	f240 4286 	movw	r2, #1158	; 0x486
 80081de:	492f      	ldr	r1, [pc, #188]	; (800829c <pbuf_take+0x118>)
 80081e0:	482c      	ldr	r0, [pc, #176]	; (8008294 <pbuf_take+0x110>)
 80081e2:	f00a faa1 	bl	8012728 <iprintf>
 80081e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081ea:	e04a      	b.n	8008282 <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d007      	beq.n	8008202 <pbuf_take+0x7e>
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d004      	beq.n	8008202 <pbuf_take+0x7e>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	891b      	ldrh	r3, [r3, #8]
 80081fc:	88fa      	ldrh	r2, [r7, #6]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d902      	bls.n	8008208 <pbuf_take+0x84>
    return ERR_ARG;
 8008202:	f06f 030f 	mvn.w	r3, #15
 8008206:	e03c      	b.n	8008282 <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	61fb      	str	r3, [r7, #28]
 800820c:	e027      	b.n	800825e <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d106      	bne.n	8008222 <pbuf_take+0x9e>
 8008214:	4b1d      	ldr	r3, [pc, #116]	; (800828c <pbuf_take+0x108>)
 8008216:	f240 428e 	movw	r2, #1166	; 0x48e
 800821a:	4921      	ldr	r1, [pc, #132]	; (80082a0 <pbuf_take+0x11c>)
 800821c:	481d      	ldr	r0, [pc, #116]	; (8008294 <pbuf_take+0x110>)
 800821e:	f00a fa83 	bl	8012728 <iprintf>
    buf_copy_len = total_copy_len;
 8008222:	8b3b      	ldrh	r3, [r7, #24]
 8008224:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	895b      	ldrh	r3, [r3, #10]
 800822a:	8b7a      	ldrh	r2, [r7, #26]
 800822c:	429a      	cmp	r2, r3
 800822e:	d902      	bls.n	8008236 <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	895b      	ldrh	r3, [r3, #10]
 8008234:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	6858      	ldr	r0, [r3, #4]
 800823a:	8afb      	ldrh	r3, [r7, #22]
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	4413      	add	r3, r2
 8008240:	8b7a      	ldrh	r2, [r7, #26]
 8008242:	4619      	mov	r1, r3
 8008244:	f009 fbec 	bl	8011a20 <memcpy>
    total_copy_len -= buf_copy_len;
 8008248:	8b3a      	ldrh	r2, [r7, #24]
 800824a:	8b7b      	ldrh	r3, [r7, #26]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 8008250:	8afa      	ldrh	r2, [r7, #22]
 8008252:	8b7b      	ldrh	r3, [r7, #26]
 8008254:	4413      	add	r3, r2
 8008256:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	61fb      	str	r3, [r7, #28]
 800825e:	8b3b      	ldrh	r3, [r7, #24]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1d4      	bne.n	800820e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8008264:	8b3b      	ldrh	r3, [r7, #24]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d103      	bne.n	8008272 <pbuf_take+0xee>
 800826a:	8afa      	ldrh	r2, [r7, #22]
 800826c:	88fb      	ldrh	r3, [r7, #6]
 800826e:	429a      	cmp	r2, r3
 8008270:	d006      	beq.n	8008280 <pbuf_take+0xfc>
 8008272:	4b06      	ldr	r3, [pc, #24]	; (800828c <pbuf_take+0x108>)
 8008274:	f240 4299 	movw	r2, #1177	; 0x499
 8008278:	490a      	ldr	r1, [pc, #40]	; (80082a4 <pbuf_take+0x120>)
 800827a:	4806      	ldr	r0, [pc, #24]	; (8008294 <pbuf_take+0x110>)
 800827c:	f00a fa54 	bl	8012728 <iprintf>
  return ERR_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3720      	adds	r7, #32
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	08016794 	.word	0x08016794
 8008290:	08016c08 	.word	0x08016c08
 8008294:	080167e0 	.word	0x080167e0
 8008298:	08016c20 	.word	0x08016c20
 800829c:	08016c3c 	.word	0x08016c3c
 80082a0:	08016c5c 	.word	0x08016c5c
 80082a4:	08016c74 	.word	0x08016c74

080082a8 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 80082a8:	b480      	push	{r7}
 80082aa:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 80082ac:	bf00      	nop
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bc80      	pop	{r7}
 80082b2:	4770      	bx	lr

080082b4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80082b4:	b480      	push	{r7}
 80082b6:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80082b8:	bf00      	nop
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bc80      	pop	{r7}
 80082be:	4770      	bx	lr

080082c0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80082c4:	f000 fdfa 	bl	8008ebc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80082c8:	4b07      	ldr	r3, [pc, #28]	; (80082e8 <tcp_tmr+0x28>)
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	3301      	adds	r3, #1
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <tcp_tmr+0x28>)
 80082d2:	701a      	strb	r2, [r3, #0]
 80082d4:	4b04      	ldr	r3, [pc, #16]	; (80082e8 <tcp_tmr+0x28>)
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80082e0:	f000 fb2a 	bl	8008938 <tcp_slowtmr>
  }
}
 80082e4:	bf00      	nop
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	20006f71 	.word	0x20006f71

080082ec <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	60fb      	str	r3, [r7, #12]
 80082fa:	e00a      	b.n	8008312 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	429a      	cmp	r2, r3
 8008304:	d102      	bne.n	800830c <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	60fb      	str	r3, [r7, #12]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1f1      	bne.n	80082fc <tcp_remove_listener+0x10>
      }
   }
}
 8008318:	bf00      	nop
 800831a:	bf00      	nop
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	bc80      	pop	{r7}
 8008322:	4770      	bx	lr

08008324 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d105      	bne.n	800833e <tcp_listen_closed+0x1a>
 8008332:	4b13      	ldr	r3, [pc, #76]	; (8008380 <tcp_listen_closed+0x5c>)
 8008334:	22c0      	movs	r2, #192	; 0xc0
 8008336:	4913      	ldr	r1, [pc, #76]	; (8008384 <tcp_listen_closed+0x60>)
 8008338:	4813      	ldr	r0, [pc, #76]	; (8008388 <tcp_listen_closed+0x64>)
 800833a:	f00a f9f5 	bl	8012728 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	7d1b      	ldrb	r3, [r3, #20]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d005      	beq.n	8008352 <tcp_listen_closed+0x2e>
 8008346:	4b0e      	ldr	r3, [pc, #56]	; (8008380 <tcp_listen_closed+0x5c>)
 8008348:	22c1      	movs	r2, #193	; 0xc1
 800834a:	4910      	ldr	r1, [pc, #64]	; (800838c <tcp_listen_closed+0x68>)
 800834c:	480e      	ldr	r0, [pc, #56]	; (8008388 <tcp_listen_closed+0x64>)
 800834e:	f00a f9eb 	bl	8012728 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008352:	2301      	movs	r3, #1
 8008354:	60fb      	str	r3, [r7, #12]
 8008356:	e00b      	b.n	8008370 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8008358:	4a0d      	ldr	r2, [pc, #52]	; (8008390 <tcp_listen_closed+0x6c>)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6879      	ldr	r1, [r7, #4]
 8008364:	4618      	mov	r0, r3
 8008366:	f7ff ffc1 	bl	80082ec <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3301      	adds	r3, #1
 800836e:	60fb      	str	r3, [r7, #12]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b03      	cmp	r3, #3
 8008374:	d9f0      	bls.n	8008358 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008376:	bf00      	nop
 8008378:	bf00      	nop
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	08016d18 	.word	0x08016d18
 8008384:	08016d48 	.word	0x08016d48
 8008388:	08016d54 	.word	0x08016d54
 800838c:	08016d7c 	.word	0x08016d7c
 8008390:	08018180 	.word	0x08018180

08008394 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008394:	b5b0      	push	{r4, r5, r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af02      	add	r7, sp, #8
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80083a0:	78fb      	ldrb	r3, [r7, #3]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d075      	beq.n	8008492 <tcp_close_shutdown+0xfe>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	7d1b      	ldrb	r3, [r3, #20]
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	d003      	beq.n	80083b6 <tcp_close_shutdown+0x22>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	7d1b      	ldrb	r3, [r3, #20]
 80083b2:	2b07      	cmp	r3, #7
 80083b4:	d16d      	bne.n	8008492 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d104      	bne.n	80083c8 <tcp_close_shutdown+0x34>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80083c6:	d064      	beq.n	8008492 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	7e9b      	ldrb	r3, [r3, #26]
 80083cc:	f003 0310 	and.w	r3, r3, #16
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d106      	bne.n	80083e2 <tcp_close_shutdown+0x4e>
 80083d4:	4b5b      	ldr	r3, [pc, #364]	; (8008544 <tcp_close_shutdown+0x1b0>)
 80083d6:	f240 120f 	movw	r2, #271	; 0x10f
 80083da:	495b      	ldr	r1, [pc, #364]	; (8008548 <tcp_close_shutdown+0x1b4>)
 80083dc:	485b      	ldr	r0, [pc, #364]	; (800854c <tcp_close_shutdown+0x1b8>)
 80083de:	f00a f9a3 	bl	8012728 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80083ea:	687c      	ldr	r4, [r7, #4]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	1d1d      	adds	r5, r3, #4
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	8adb      	ldrh	r3, [r3, #22]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	8b12      	ldrh	r2, [r2, #24]
 80083f8:	9201      	str	r2, [sp, #4]
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	462b      	mov	r3, r5
 80083fe:	4622      	mov	r2, r4
 8008400:	f004 f918 	bl	800c634 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fff9 	bl	80093fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800840a:	4b51      	ldr	r3, [pc, #324]	; (8008550 <tcp_close_shutdown+0x1bc>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	429a      	cmp	r2, r3
 8008412:	d105      	bne.n	8008420 <tcp_close_shutdown+0x8c>
 8008414:	4b4e      	ldr	r3, [pc, #312]	; (8008550 <tcp_close_shutdown+0x1bc>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	4a4d      	ldr	r2, [pc, #308]	; (8008550 <tcp_close_shutdown+0x1bc>)
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	e013      	b.n	8008448 <tcp_close_shutdown+0xb4>
 8008420:	4b4b      	ldr	r3, [pc, #300]	; (8008550 <tcp_close_shutdown+0x1bc>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	e00c      	b.n	8008442 <tcp_close_shutdown+0xae>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	429a      	cmp	r2, r3
 8008430:	d104      	bne.n	800843c <tcp_close_shutdown+0xa8>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68da      	ldr	r2, [r3, #12]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	60da      	str	r2, [r3, #12]
 800843a:	e005      	b.n	8008448 <tcp_close_shutdown+0xb4>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	60fb      	str	r3, [r7, #12]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1ef      	bne.n	8008428 <tcp_close_shutdown+0x94>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	60da      	str	r2, [r3, #12]
 800844e:	4b41      	ldr	r3, [pc, #260]	; (8008554 <tcp_close_shutdown+0x1c0>)
 8008450:	2201      	movs	r2, #1
 8008452:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	7d1b      	ldrb	r3, [r3, #20]
 8008458:	2b04      	cmp	r3, #4
 800845a:	d10c      	bne.n	8008476 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	220a      	movs	r2, #10
 8008460:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008462:	4b3d      	ldr	r3, [pc, #244]	; (8008558 <tcp_close_shutdown+0x1c4>)
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	60da      	str	r2, [r3, #12]
 800846a:	4a3b      	ldr	r2, [pc, #236]	; (8008558 <tcp_close_shutdown+0x1c4>)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	f004 fb46 	bl	800cb00 <tcp_timer_needed>
 8008474:	e00b      	b.n	800848e <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8008476:	4b39      	ldr	r3, [pc, #228]	; (800855c <tcp_close_shutdown+0x1c8>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	429a      	cmp	r2, r3
 800847e:	d102      	bne.n	8008486 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8008480:	f003 fb7c 	bl	800bb7c <tcp_trigger_input_pcb_close>
 8008484:	e003      	b.n	800848e <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8008486:	6879      	ldr	r1, [r7, #4]
 8008488:	2001      	movs	r0, #1
 800848a:	f7fe fec5 	bl	8007218 <memp_free>
        }
      }
      return ERR_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	e053      	b.n	800853a <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	7d1b      	ldrb	r3, [r3, #20]
 8008496:	2b02      	cmp	r3, #2
 8008498:	d03d      	beq.n	8008516 <tcp_close_shutdown+0x182>
 800849a:	2b02      	cmp	r3, #2
 800849c:	dc47      	bgt.n	800852e <tcp_close_shutdown+0x19a>
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <tcp_close_shutdown+0x114>
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d02b      	beq.n	80084fe <tcp_close_shutdown+0x16a>
 80084a6:	e042      	b.n	800852e <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	8adb      	ldrh	r3, [r3, #22]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d021      	beq.n	80084f4 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80084b0:	4b2b      	ldr	r3, [pc, #172]	; (8008560 <tcp_close_shutdown+0x1cc>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d105      	bne.n	80084c6 <tcp_close_shutdown+0x132>
 80084ba:	4b29      	ldr	r3, [pc, #164]	; (8008560 <tcp_close_shutdown+0x1cc>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	4a27      	ldr	r2, [pc, #156]	; (8008560 <tcp_close_shutdown+0x1cc>)
 80084c2:	6013      	str	r3, [r2, #0]
 80084c4:	e013      	b.n	80084ee <tcp_close_shutdown+0x15a>
 80084c6:	4b26      	ldr	r3, [pc, #152]	; (8008560 <tcp_close_shutdown+0x1cc>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60bb      	str	r3, [r7, #8]
 80084cc:	e00c      	b.n	80084e8 <tcp_close_shutdown+0x154>
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d104      	bne.n	80084e2 <tcp_close_shutdown+0x14e>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68da      	ldr	r2, [r3, #12]
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	60da      	str	r2, [r3, #12]
 80084e0:	e005      	b.n	80084ee <tcp_close_shutdown+0x15a>
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	60bb      	str	r3, [r7, #8]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1ef      	bne.n	80084ce <tcp_close_shutdown+0x13a>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 80084f4:	6879      	ldr	r1, [r7, #4]
 80084f6:	2001      	movs	r0, #1
 80084f8:	f7fe fe8e 	bl	8007218 <memp_free>
    break;
 80084fc:	e01c      	b.n	8008538 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff ff10 	bl	8008324 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008504:	6879      	ldr	r1, [r7, #4]
 8008506:	4817      	ldr	r0, [pc, #92]	; (8008564 <tcp_close_shutdown+0x1d0>)
 8008508:	f000 ffba 	bl	8009480 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800850c:	6879      	ldr	r1, [r7, #4]
 800850e:	2002      	movs	r0, #2
 8008510:	f7fe fe82 	bl	8007218 <memp_free>
    break;
 8008514:	e010      	b.n	8008538 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	480d      	ldr	r0, [pc, #52]	; (8008550 <tcp_close_shutdown+0x1bc>)
 800851a:	f000 ffb1 	bl	8009480 <tcp_pcb_remove>
 800851e:	4b0d      	ldr	r3, [pc, #52]	; (8008554 <tcp_close_shutdown+0x1c0>)
 8008520:	2201      	movs	r2, #1
 8008522:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8008524:	6879      	ldr	r1, [r7, #4]
 8008526:	2001      	movs	r0, #1
 8008528:	f7fe fe76 	bl	8007218 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800852c:	e004      	b.n	8008538 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f81a 	bl	8008568 <tcp_close_shutdown_fin>
 8008534:	4603      	mov	r3, r0
 8008536:	e000      	b.n	800853a <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bdb0      	pop	{r4, r5, r7, pc}
 8008542:	bf00      	nop
 8008544:	08016d18 	.word	0x08016d18
 8008548:	08016d94 	.word	0x08016d94
 800854c:	08016d54 	.word	0x08016d54
 8008550:	20006f68 	.word	0x20006f68
 8008554:	20006f70 	.word	0x20006f70
 8008558:	20006f6c 	.word	0x20006f6c
 800855c:	20006fa8 	.word	0x20006fa8
 8008560:	20006f60 	.word	0x20006f60
 8008564:	20006f64 	.word	0x20006f64

08008568 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d106      	bne.n	8008584 <tcp_close_shutdown_fin+0x1c>
 8008576:	4b2e      	ldr	r3, [pc, #184]	; (8008630 <tcp_close_shutdown_fin+0xc8>)
 8008578:	f240 124d 	movw	r2, #333	; 0x14d
 800857c:	492d      	ldr	r1, [pc, #180]	; (8008634 <tcp_close_shutdown_fin+0xcc>)
 800857e:	482e      	ldr	r0, [pc, #184]	; (8008638 <tcp_close_shutdown_fin+0xd0>)
 8008580:	f00a f8d2 	bl	8012728 <iprintf>

  switch (pcb->state) {
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	7d1b      	ldrb	r3, [r3, #20]
 8008588:	2b07      	cmp	r3, #7
 800858a:	d020      	beq.n	80085ce <tcp_close_shutdown_fin+0x66>
 800858c:	2b07      	cmp	r3, #7
 800858e:	dc2b      	bgt.n	80085e8 <tcp_close_shutdown_fin+0x80>
 8008590:	2b03      	cmp	r3, #3
 8008592:	d002      	beq.n	800859a <tcp_close_shutdown_fin+0x32>
 8008594:	2b04      	cmp	r3, #4
 8008596:	d00d      	beq.n	80085b4 <tcp_close_shutdown_fin+0x4c>
 8008598:	e026      	b.n	80085e8 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f003 fb78 	bl	800bc90 <tcp_send_fin>
 80085a0:	4603      	mov	r3, r0
 80085a2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80085a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d11f      	bne.n	80085ec <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2205      	movs	r2, #5
 80085b0:	751a      	strb	r2, [r3, #20]
    }
    break;
 80085b2:	e01b      	b.n	80085ec <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f003 fb6b 	bl	800bc90 <tcp_send_fin>
 80085ba:	4603      	mov	r3, r0
 80085bc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80085be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d114      	bne.n	80085f0 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2205      	movs	r2, #5
 80085ca:	751a      	strb	r2, [r3, #20]
    }
    break;
 80085cc:	e010      	b.n	80085f0 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f003 fb5e 	bl	800bc90 <tcp_send_fin>
 80085d4:	4603      	mov	r3, r0
 80085d6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80085d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d109      	bne.n	80085f4 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2209      	movs	r2, #9
 80085e4:	751a      	strb	r2, [r3, #20]
    }
    break;
 80085e6:	e005      	b.n	80085f4 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	e01c      	b.n	8008626 <tcp_close_shutdown_fin+0xbe>
    break;
 80085ec:	bf00      	nop
 80085ee:	e002      	b.n	80085f6 <tcp_close_shutdown_fin+0x8e>
    break;
 80085f0:	bf00      	nop
 80085f2:	e000      	b.n	80085f6 <tcp_close_shutdown_fin+0x8e>
    break;
 80085f4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80085f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d103      	bne.n	8008606 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f003 fd8a 	bl	800c118 <tcp_output>
 8008604:	e00d      	b.n	8008622 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800860a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800860e:	d108      	bne.n	8008622 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	7e9b      	ldrb	r3, [r3, #26]
 8008614:	f043 0308 	orr.w	r3, r3, #8
 8008618:	b2da      	uxtb	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	e001      	b.n	8008626 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008622:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	08016d18 	.word	0x08016d18
 8008634:	08016d48 	.word	0x08016d48
 8008638:	08016d54 	.word	0x08016d54

0800863c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	7d1b      	ldrb	r3, [r3, #20]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d006      	beq.n	800865a <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	7e9b      	ldrb	r3, [r3, #26]
 8008650:	f043 0310 	orr.w	r3, r3, #16
 8008654:	b2da      	uxtb	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800865a:	2101      	movs	r1, #1
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f7ff fe99 	bl	8008394 <tcp_close_shutdown>
 8008662:	4603      	mov	r3, r0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08c      	sub	sp, #48	; 0x30
 8008670:	af02      	add	r7, sp, #8
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	7d1b      	ldrb	r3, [r3, #20]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d106      	bne.n	800868c <tcp_abandon+0x20>
 800867e:	4b4d      	ldr	r3, [pc, #308]	; (80087b4 <tcp_abandon+0x148>)
 8008680:	f240 12df 	movw	r2, #479	; 0x1df
 8008684:	494c      	ldr	r1, [pc, #304]	; (80087b8 <tcp_abandon+0x14c>)
 8008686:	484d      	ldr	r0, [pc, #308]	; (80087bc <tcp_abandon+0x150>)
 8008688:	f00a f84e 	bl	8012728 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	7d1b      	ldrb	r3, [r3, #20]
 8008690:	2b0a      	cmp	r3, #10
 8008692:	d108      	bne.n	80086a6 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008694:	6879      	ldr	r1, [r7, #4]
 8008696:	484a      	ldr	r0, [pc, #296]	; (80087c0 <tcp_abandon+0x154>)
 8008698:	f000 fef2 	bl	8009480 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800869c:	6879      	ldr	r1, [r7, #4]
 800869e:	2001      	movs	r0, #1
 80086a0:	f7fe fdba 	bl	8007218 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80086a4:	e081      	b.n	80087aa <tcp_abandon+0x13e>
    int send_rst = 0;
 80086a6:	2300      	movs	r3, #0
 80086a8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80086aa:	2300      	movs	r3, #0
 80086ac:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086b2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b8:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086c0:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	7d1b      	ldrb	r3, [r3, #20]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d126      	bne.n	800871e <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	8adb      	ldrh	r3, [r3, #22]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d02e      	beq.n	8008736 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80086d8:	4b3a      	ldr	r3, [pc, #232]	; (80087c4 <tcp_abandon+0x158>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d105      	bne.n	80086ee <tcp_abandon+0x82>
 80086e2:	4b38      	ldr	r3, [pc, #224]	; (80087c4 <tcp_abandon+0x158>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	4a36      	ldr	r2, [pc, #216]	; (80087c4 <tcp_abandon+0x158>)
 80086ea:	6013      	str	r3, [r2, #0]
 80086ec:	e013      	b.n	8008716 <tcp_abandon+0xaa>
 80086ee:	4b35      	ldr	r3, [pc, #212]	; (80087c4 <tcp_abandon+0x158>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	61fb      	str	r3, [r7, #28]
 80086f4:	e00c      	b.n	8008710 <tcp_abandon+0xa4>
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d104      	bne.n	800870a <tcp_abandon+0x9e>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68da      	ldr	r2, [r3, #12]
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	60da      	str	r2, [r3, #12]
 8008708:	e005      	b.n	8008716 <tcp_abandon+0xaa>
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	61fb      	str	r3, [r7, #28]
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1ef      	bne.n	80086f6 <tcp_abandon+0x8a>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	60da      	str	r2, [r3, #12]
 800871c:	e00b      	b.n	8008736 <tcp_abandon+0xca>
      send_rst = reset;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	8adb      	ldrh	r3, [r3, #22]
 8008726:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008728:	6879      	ldr	r1, [r7, #4]
 800872a:	4827      	ldr	r0, [pc, #156]	; (80087c8 <tcp_abandon+0x15c>)
 800872c:	f000 fea8 	bl	8009480 <tcp_pcb_remove>
 8008730:	4b26      	ldr	r3, [pc, #152]	; (80087cc <tcp_abandon+0x160>)
 8008732:	2201      	movs	r2, #1
 8008734:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800873a:	2b00      	cmp	r3, #0
 800873c:	d004      	beq.n	8008748 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008742:	4618      	mov	r0, r3
 8008744:	f000 fc87 	bl	8009056 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800874c:	2b00      	cmp	r3, #0
 800874e:	d004      	beq.n	800875a <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008754:	4618      	mov	r0, r3
 8008756:	f000 fc7e 	bl	8009056 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800875e:	2b00      	cmp	r3, #0
 8008760:	d004      	beq.n	800876c <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008766:	4618      	mov	r0, r3
 8008768:	f000 fc75 	bl	8009056 <tcp_segs_free>
    if (send_rst) {
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00c      	beq.n	800878c <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	1d19      	adds	r1, r3, #4
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	8b1b      	ldrh	r3, [r3, #24]
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	460b      	mov	r3, r1
 8008784:	6979      	ldr	r1, [r7, #20]
 8008786:	69b8      	ldr	r0, [r7, #24]
 8008788:	f003 ff54 	bl	800c634 <tcp_rst>
    last_state = pcb->state;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	7d1b      	ldrb	r3, [r3, #20]
 8008790:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8008792:	6879      	ldr	r1, [r7, #4]
 8008794:	2001      	movs	r0, #1
 8008796:	f7fe fd3f 	bl	8007218 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d004      	beq.n	80087aa <tcp_abandon+0x13e>
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f06f 010c 	mvn.w	r1, #12
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	4798      	blx	r3
}
 80087aa:	bf00      	nop
 80087ac:	3728      	adds	r7, #40	; 0x28
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	08016d18 	.word	0x08016d18
 80087b8:	08016db0 	.word	0x08016db0
 80087bc:	08016d54 	.word	0x08016d54
 80087c0:	20006f6c 	.word	0x20006f6c
 80087c4:	20006f60 	.word	0x20006f60
 80087c8:	20006f68 	.word	0x20006f68
 80087cc:	20006f70 	.word	0x20006f70

080087d0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80087d8:	2101      	movs	r1, #1
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff ff46 	bl	800866c <tcp_abandon>
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80087f8:	4413      	add	r3, r2
 80087fa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008804:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008808:	bf28      	it	cs
 800880a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800880e:	b292      	uxth	r2, r2
 8008810:	4413      	add	r3, r2
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	db08      	blt.n	800882c <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	e020      	b.n	800886e <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	dd03      	ble.n	8008842 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008840:	e014      	b.n	800886c <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008854:	d306      	bcc.n	8008864 <tcp_update_rcv_ann_wnd+0x7c>
 8008856:	4b08      	ldr	r3, [pc, #32]	; (8008878 <tcp_update_rcv_ann_wnd+0x90>)
 8008858:	f44f 7242 	mov.w	r2, #776	; 0x308
 800885c:	4907      	ldr	r1, [pc, #28]	; (800887c <tcp_update_rcv_ann_wnd+0x94>)
 800885e:	4808      	ldr	r0, [pc, #32]	; (8008880 <tcp_update_rcv_ann_wnd+0x98>)
 8008860:	f009 ff62 	bl	8012728 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	b29a      	uxth	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800886c:	2300      	movs	r3, #0
  }
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	08016d18 	.word	0x08016d18
 800887c:	08016e30 	.word	0x08016e30
 8008880:	08016d54 	.word	0x08016d54

08008884 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	460b      	mov	r3, r1
 800888e:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	7d1b      	ldrb	r3, [r3, #20]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d106      	bne.n	80088a6 <tcp_recved+0x22>
 8008898:	4b23      	ldr	r3, [pc, #140]	; (8008928 <tcp_recved+0xa4>)
 800889a:	f240 321f 	movw	r2, #799	; 0x31f
 800889e:	4923      	ldr	r1, [pc, #140]	; (800892c <tcp_recved+0xa8>)
 80088a0:	4823      	ldr	r0, [pc, #140]	; (8008930 <tcp_recved+0xac>)
 80088a2:	f009 ff41 	bl	8012728 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80088aa:	887b      	ldrh	r3, [r7, #2]
 80088ac:	4413      	add	r3, r2
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088b8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80088bc:	d904      	bls.n	80088c8 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80088c4:	851a      	strh	r2, [r3, #40]	; 0x28
 80088c6:	e017      	b.n	80088f8 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d113      	bne.n	80088f8 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	7d1b      	ldrb	r3, [r3, #20]
 80088d4:	2b07      	cmp	r3, #7
 80088d6:	d003      	beq.n	80088e0 <tcp_recved+0x5c>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	7d1b      	ldrb	r3, [r3, #20]
 80088dc:	2b09      	cmp	r3, #9
 80088de:	d104      	bne.n	80088ea <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80088e6:	851a      	strh	r2, [r3, #40]	; 0x28
 80088e8:	e006      	b.n	80088f8 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80088ea:	4b0f      	ldr	r3, [pc, #60]	; (8008928 <tcp_recved+0xa4>)
 80088ec:	f240 322d 	movw	r2, #813	; 0x32d
 80088f0:	4910      	ldr	r1, [pc, #64]	; (8008934 <tcp_recved+0xb0>)
 80088f2:	480f      	ldr	r0, [pc, #60]	; (8008930 <tcp_recved+0xac>)
 80088f4:	f009 ff18 	bl	8012728 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff ff75 	bl	80087e8 <tcp_update_rcv_ann_wnd>
 80088fe:	4603      	mov	r3, r0
 8008900:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008908:	db09      	blt.n	800891e <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	7e9b      	ldrb	r3, [r3, #26]
 800890e:	f043 0302 	orr.w	r3, r3, #2
 8008912:	b2da      	uxtb	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f003 fbfd 	bl	800c118 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800891e:	bf00      	nop
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	08016d18 	.word	0x08016d18
 800892c:	08016e4c 	.word	0x08016e4c
 8008930:	08016d54 	.word	0x08016d54
 8008934:	08016e74 	.word	0x08016e74

08008938 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008938:	b5b0      	push	{r4, r5, r7, lr}
 800893a:	b08c      	sub	sp, #48	; 0x30
 800893c:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8008942:	4b97      	ldr	r3, [pc, #604]	; (8008ba0 <tcp_slowtmr+0x268>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	3301      	adds	r3, #1
 8008948:	4a95      	ldr	r2, [pc, #596]	; (8008ba0 <tcp_slowtmr+0x268>)
 800894a:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800894c:	4b95      	ldr	r3, [pc, #596]	; (8008ba4 <tcp_slowtmr+0x26c>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	3301      	adds	r3, #1
 8008952:	b2da      	uxtb	r2, r3
 8008954:	4b93      	ldr	r3, [pc, #588]	; (8008ba4 <tcp_slowtmr+0x26c>)
 8008956:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008958:	2300      	movs	r3, #0
 800895a:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800895c:	4b92      	ldr	r3, [pc, #584]	; (8008ba8 <tcp_slowtmr+0x270>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008962:	e227      	b.n	8008db4 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	7d1b      	ldrb	r3, [r3, #20]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d106      	bne.n	800897a <tcp_slowtmr+0x42>
 800896c:	4b8f      	ldr	r3, [pc, #572]	; (8008bac <tcp_slowtmr+0x274>)
 800896e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8008972:	498f      	ldr	r1, [pc, #572]	; (8008bb0 <tcp_slowtmr+0x278>)
 8008974:	488f      	ldr	r0, [pc, #572]	; (8008bb4 <tcp_slowtmr+0x27c>)
 8008976:	f009 fed7 	bl	8012728 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	7d1b      	ldrb	r3, [r3, #20]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d106      	bne.n	8008990 <tcp_slowtmr+0x58>
 8008982:	4b8a      	ldr	r3, [pc, #552]	; (8008bac <tcp_slowtmr+0x274>)
 8008984:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8008988:	498b      	ldr	r1, [pc, #556]	; (8008bb8 <tcp_slowtmr+0x280>)
 800898a:	488a      	ldr	r0, [pc, #552]	; (8008bb4 <tcp_slowtmr+0x27c>)
 800898c:	f009 fecc 	bl	8012728 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	7d1b      	ldrb	r3, [r3, #20]
 8008994:	2b0a      	cmp	r3, #10
 8008996:	d106      	bne.n	80089a6 <tcp_slowtmr+0x6e>
 8008998:	4b84      	ldr	r3, [pc, #528]	; (8008bac <tcp_slowtmr+0x274>)
 800899a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800899e:	4987      	ldr	r1, [pc, #540]	; (8008bbc <tcp_slowtmr+0x284>)
 80089a0:	4884      	ldr	r0, [pc, #528]	; (8008bb4 <tcp_slowtmr+0x27c>)
 80089a2:	f009 fec1 	bl	8012728 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80089a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a8:	7f5a      	ldrb	r2, [r3, #29]
 80089aa:	4b7e      	ldr	r3, [pc, #504]	; (8008ba4 <tcp_slowtmr+0x26c>)
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d103      	bne.n	80089ba <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 80089b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 80089b8:	e1fc      	b.n	8008db4 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 80089ba:	4b7a      	ldr	r3, [pc, #488]	; (8008ba4 <tcp_slowtmr+0x26c>)
 80089bc:	781a      	ldrb	r2, [r3, #0]
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c0:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 80089c2:	2300      	movs	r3, #0
 80089c4:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	7d1b      	ldrb	r3, [r3, #20]
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d108      	bne.n	80089e4 <tcp_slowtmr+0xac>
 80089d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089d8:	2b05      	cmp	r3, #5
 80089da:	d903      	bls.n	80089e4 <tcp_slowtmr+0xac>
      ++pcb_remove;
 80089dc:	7ffb      	ldrb	r3, [r7, #31]
 80089de:	3301      	adds	r3, #1
 80089e0:	77fb      	strb	r3, [r7, #31]
 80089e2:	e0a2      	b.n	8008b2a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089ea:	2b0b      	cmp	r3, #11
 80089ec:	d903      	bls.n	80089f6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80089ee:	7ffb      	ldrb	r3, [r7, #31]
 80089f0:	3301      	adds	r3, #1
 80089f2:	77fb      	strb	r3, [r7, #31]
 80089f4:	e099      	b.n	8008b2a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d032      	beq.n	8008a66 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008a06:	3b01      	subs	r3, #1
 8008a08:	4a6d      	ldr	r2, [pc, #436]	; (8008bc0 <tcp_slowtmr+0x288>)
 8008a0a:	5cd3      	ldrb	r3, [r2, r3]
 8008a0c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8008a14:	7cfa      	ldrb	r2, [r7, #19]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d907      	bls.n	8008a2a <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8008a20:	3301      	adds	r3, #1
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8008a30:	7cfa      	ldrb	r2, [r7, #19]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d879      	bhi.n	8008b2a <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8008a36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a38:	f003 ff98 	bl	800c96c <tcp_zero_window_probe>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d173      	bne.n	8008b2a <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8008a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008a50:	2b06      	cmp	r3, #6
 8008a52:	d86a      	bhi.n	8008b2a <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8008a64:	e061      	b.n	8008b2a <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	db08      	blt.n	8008a82 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	3301      	adds	r3, #1
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	b21a      	sxth	r2, r3
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8008a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d04f      	beq.n	8008b2a <tcp_slowtmr+0x1f2>
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008a96:	429a      	cmp	r2, r3
 8008a98:	db47      	blt.n	8008b2a <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	7d1b      	ldrb	r3, [r3, #20]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d018      	beq.n	8008ad4 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008aa8:	2b0c      	cmp	r3, #12
 8008aaa:	bf28      	it	cs
 8008aac:	230c      	movcs	r3, #12
 8008aae:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008ab6:	10db      	asrs	r3, r3, #3
 8008ab8:	b21b      	sxth	r3, r3
 8008aba:	461a      	mov	r2, r3
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008ac2:	4413      	add	r3, r2
 8008ac4:	7dfa      	ldrb	r2, [r7, #23]
 8008ac6:	493f      	ldr	r1, [pc, #252]	; (8008bc4 <tcp_slowtmr+0x28c>)
 8008ac8:	5c8a      	ldrb	r2, [r1, r2]
 8008aca:	4093      	lsls	r3, r2
 8008acc:	b21a      	sxth	r2, r3
 8008ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	bf28      	it	cs
 8008aea:	4613      	movcs	r3, r2
 8008aec:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8008aee:	8abb      	ldrh	r3, [r7, #20]
 8008af0:	085b      	lsrs	r3, r3, #1
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d206      	bcs.n	8008b1a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b10:	005b      	lsls	r3, r3, #1
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8008b24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b26:	f003 fe05 	bl	800c734 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	7d1b      	ldrb	r3, [r3, #20]
 8008b2e:	2b06      	cmp	r3, #6
 8008b30:	d10f      	bne.n	8008b52 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	7e9b      	ldrb	r3, [r3, #26]
 8008b36:	f003 0310 	and.w	r3, r3, #16
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d009      	beq.n	8008b52 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b3e:	4b18      	ldr	r3, [pc, #96]	; (8008ba0 <tcp_slowtmr+0x268>)
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	2b28      	cmp	r3, #40	; 0x28
 8008b4a:	d902      	bls.n	8008b52 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008b4c:	7ffb      	ldrb	r3, [r7, #31]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	7a1b      	ldrb	r3, [r3, #8]
 8008b56:	f003 0308 	and.w	r3, r3, #8
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d05d      	beq.n	8008c1a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	d003      	beq.n	8008b6e <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8008b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b68:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8008b6a:	2b07      	cmp	r3, #7
 8008b6c:	d155      	bne.n	8008c1a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b6e:	4b0c      	ldr	r3, [pc, #48]	; (8008ba0 <tcp_slowtmr+0x268>)
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b7e:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8008b82:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8008b86:	4910      	ldr	r1, [pc, #64]	; (8008bc8 <tcp_slowtmr+0x290>)
 8008b88:	fba1 1303 	umull	r1, r3, r1, r3
 8008b8c:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d91c      	bls.n	8008bcc <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008b92:	7ffb      	ldrb	r3, [r7, #31]
 8008b94:	3301      	adds	r3, #1
 8008b96:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8008b98:	7fbb      	ldrb	r3, [r7, #30]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	77bb      	strb	r3, [r7, #30]
 8008b9e:	e03c      	b.n	8008c1a <tcp_slowtmr+0x2e2>
 8008ba0:	20006f5c 	.word	0x20006f5c
 8008ba4:	20006f72 	.word	0x20006f72
 8008ba8:	20006f68 	.word	0x20006f68
 8008bac:	08016d18 	.word	0x08016d18
 8008bb0:	08016ec8 	.word	0x08016ec8
 8008bb4:	08016d54 	.word	0x08016d54
 8008bb8:	08016ef4 	.word	0x08016ef4
 8008bbc:	08016f20 	.word	0x08016f20
 8008bc0:	08018178 	.word	0x08018178
 8008bc4:	08018168 	.word	0x08018168
 8008bc8:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bcc:	4b97      	ldr	r3, [pc, #604]	; (8008e2c <tcp_slowtmr+0x4f4>)
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	6a1b      	ldr	r3, [r3, #32]
 8008bd4:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bde:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8008be2:	4618      	mov	r0, r3
 8008be4:	4b92      	ldr	r3, [pc, #584]	; (8008e30 <tcp_slowtmr+0x4f8>)
 8008be6:	fb00 f303 	mul.w	r3, r0, r3
 8008bea:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8008bec:	4991      	ldr	r1, [pc, #580]	; (8008e34 <tcp_slowtmr+0x4fc>)
 8008bee:	fba1 1303 	umull	r1, r3, r1, r3
 8008bf2:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d910      	bls.n	8008c1a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8008bf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bfa:	f003 fe6f 	bl	800c8dc <tcp_keepalive>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8008c02:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d107      	bne.n	8008c1a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8008c10:	3301      	adds	r3, #1
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c16:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d016      	beq.n	8008c50 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8008c22:	4b82      	ldr	r3, [pc, #520]	; (8008e2c <tcp_slowtmr+0x4f4>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	1ad2      	subs	r2, r2, r3
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008c32:	4619      	mov	r1, r3
 8008c34:	460b      	mov	r3, r1
 8008c36:	005b      	lsls	r3, r3, #1
 8008c38:	440b      	add	r3, r1
 8008c3a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d307      	bcc.n	8008c50 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8008c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c44:	4618      	mov	r0, r3
 8008c46:	f000 fa06 	bl	8009056 <tcp_segs_free>
      pcb->ooseq = NULL;
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	7d1b      	ldrb	r3, [r3, #20]
 8008c54:	2b03      	cmp	r3, #3
 8008c56:	d109      	bne.n	8008c6c <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c58:	4b74      	ldr	r3, [pc, #464]	; (8008e2c <tcp_slowtmr+0x4f4>)
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	2b28      	cmp	r3, #40	; 0x28
 8008c64:	d902      	bls.n	8008c6c <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008c66:	7ffb      	ldrb	r3, [r7, #31]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6e:	7d1b      	ldrb	r3, [r3, #20]
 8008c70:	2b09      	cmp	r3, #9
 8008c72:	d109      	bne.n	8008c88 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008c74:	4b6d      	ldr	r3, [pc, #436]	; (8008e2c <tcp_slowtmr+0x4f4>)
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	2bf0      	cmp	r3, #240	; 0xf0
 8008c80:	d902      	bls.n	8008c88 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8008c82:	7ffb      	ldrb	r3, [r7, #31]
 8008c84:	3301      	adds	r3, #1
 8008c86:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008c88:	7ffb      	ldrb	r3, [r7, #31]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d05d      	beq.n	8008d4a <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c94:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008c96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c98:	f000 fbb0 	bl	80093fc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d010      	beq.n	8008cc4 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008ca2:	4b65      	ldr	r3, [pc, #404]	; (8008e38 <tcp_slowtmr+0x500>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d106      	bne.n	8008cba <tcp_slowtmr+0x382>
 8008cac:	4b63      	ldr	r3, [pc, #396]	; (8008e3c <tcp_slowtmr+0x504>)
 8008cae:	f240 4289 	movw	r2, #1161	; 0x489
 8008cb2:	4963      	ldr	r1, [pc, #396]	; (8008e40 <tcp_slowtmr+0x508>)
 8008cb4:	4863      	ldr	r0, [pc, #396]	; (8008e44 <tcp_slowtmr+0x50c>)
 8008cb6:	f009 fd37 	bl	8012728 <iprintf>
        prev->next = pcb->next;
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	60da      	str	r2, [r3, #12]
 8008cc2:	e00f      	b.n	8008ce4 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008cc4:	4b5c      	ldr	r3, [pc, #368]	; (8008e38 <tcp_slowtmr+0x500>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d006      	beq.n	8008cdc <tcp_slowtmr+0x3a4>
 8008cce:	4b5b      	ldr	r3, [pc, #364]	; (8008e3c <tcp_slowtmr+0x504>)
 8008cd0:	f240 428d 	movw	r2, #1165	; 0x48d
 8008cd4:	495c      	ldr	r1, [pc, #368]	; (8008e48 <tcp_slowtmr+0x510>)
 8008cd6:	485b      	ldr	r0, [pc, #364]	; (8008e44 <tcp_slowtmr+0x50c>)
 8008cd8:	f009 fd26 	bl	8012728 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	4a55      	ldr	r2, [pc, #340]	; (8008e38 <tcp_slowtmr+0x500>)
 8008ce2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008ce4:	7fbb      	ldrb	r3, [r7, #30]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d010      	beq.n	8008d0c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008cf2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf6:	1d1d      	adds	r5, r3, #4
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	8adb      	ldrh	r3, [r3, #22]
 8008cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cfe:	8b12      	ldrh	r2, [r2, #24]
 8008d00:	9201      	str	r2, [sp, #4]
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	462b      	mov	r3, r5
 8008d06:	4622      	mov	r2, r4
 8008d08:	f003 fc94 	bl	800c634 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d14:	7d1b      	ldrb	r3, [r3, #20]
 8008d16:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8008d22:	6839      	ldr	r1, [r7, #0]
 8008d24:	2001      	movs	r0, #1
 8008d26:	f7fe fa77 	bl	8007218 <memp_free>

      tcp_active_pcbs_changed = 0;
 8008d2a:	4b48      	ldr	r3, [pc, #288]	; (8008e4c <tcp_slowtmr+0x514>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d004      	beq.n	8008d40 <tcp_slowtmr+0x408>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f06f 010c 	mvn.w	r1, #12
 8008d3c:	68b8      	ldr	r0, [r7, #8]
 8008d3e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008d40:	4b42      	ldr	r3, [pc, #264]	; (8008e4c <tcp_slowtmr+0x514>)
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d035      	beq.n	8008db4 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8008d48:	e606      	b.n	8008958 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	7edb      	ldrb	r3, [r3, #27]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	6a3b      	ldr	r3, [r7, #32]
 8008d5e:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8008d60:	6a3b      	ldr	r3, [r7, #32]
 8008d62:	7eda      	ldrb	r2, [r3, #27]
 8008d64:	6a3b      	ldr	r3, [r7, #32]
 8008d66:	7f1b      	ldrb	r3, [r3, #28]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d323      	bcc.n	8008db4 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008d72:	4b36      	ldr	r3, [pc, #216]	; (8008e4c <tcp_slowtmr+0x514>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00a      	beq.n	8008d98 <tcp_slowtmr+0x460>
 8008d82:	6a3b      	ldr	r3, [r7, #32]
 8008d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d88:	6a3a      	ldr	r2, [r7, #32]
 8008d8a:	6912      	ldr	r2, [r2, #16]
 8008d8c:	6a39      	ldr	r1, [r7, #32]
 8008d8e:	4610      	mov	r0, r2
 8008d90:	4798      	blx	r3
 8008d92:	4603      	mov	r3, r0
 8008d94:	777b      	strb	r3, [r7, #29]
 8008d96:	e001      	b.n	8008d9c <tcp_slowtmr+0x464>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8008d9c:	4b2b      	ldr	r3, [pc, #172]	; (8008e4c <tcp_slowtmr+0x514>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d000      	beq.n	8008da6 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8008da4:	e5d8      	b.n	8008958 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008da6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d102      	bne.n	8008db4 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8008dae:	6a38      	ldr	r0, [r7, #32]
 8008db0:	f003 f9b2 	bl	800c118 <tcp_output>
  while (pcb != NULL) {
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f47f add4 	bne.w	8008964 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8008dc0:	4b23      	ldr	r3, [pc, #140]	; (8008e50 <tcp_slowtmr+0x518>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8008dc6:	e068      	b.n	8008e9a <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	7d1b      	ldrb	r3, [r3, #20]
 8008dcc:	2b0a      	cmp	r3, #10
 8008dce:	d006      	beq.n	8008dde <tcp_slowtmr+0x4a6>
 8008dd0:	4b1a      	ldr	r3, [pc, #104]	; (8008e3c <tcp_slowtmr+0x504>)
 8008dd2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8008dd6:	491f      	ldr	r1, [pc, #124]	; (8008e54 <tcp_slowtmr+0x51c>)
 8008dd8:	481a      	ldr	r0, [pc, #104]	; (8008e44 <tcp_slowtmr+0x50c>)
 8008dda:	f009 fca5 	bl	8012728 <iprintf>
    pcb_remove = 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008de2:	4b12      	ldr	r3, [pc, #72]	; (8008e2c <tcp_slowtmr+0x4f4>)
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	2bf0      	cmp	r3, #240	; 0xf0
 8008dee:	d902      	bls.n	8008df6 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8008df0:	7ffb      	ldrb	r3, [r7, #31]
 8008df2:	3301      	adds	r3, #1
 8008df4:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008df6:	7ffb      	ldrb	r3, [r7, #31]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d049      	beq.n	8008e90 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dfe:	f000 fafd 	bl	80093fc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008e02:	6a3b      	ldr	r3, [r7, #32]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d029      	beq.n	8008e5c <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008e08:	4b11      	ldr	r3, [pc, #68]	; (8008e50 <tcp_slowtmr+0x518>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d106      	bne.n	8008e20 <tcp_slowtmr+0x4e8>
 8008e12:	4b0a      	ldr	r3, [pc, #40]	; (8008e3c <tcp_slowtmr+0x504>)
 8008e14:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8008e18:	490f      	ldr	r1, [pc, #60]	; (8008e58 <tcp_slowtmr+0x520>)
 8008e1a:	480a      	ldr	r0, [pc, #40]	; (8008e44 <tcp_slowtmr+0x50c>)
 8008e1c:	f009 fc84 	bl	8012728 <iprintf>
        prev->next = pcb->next;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	68da      	ldr	r2, [r3, #12]
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	60da      	str	r2, [r3, #12]
 8008e28:	e028      	b.n	8008e7c <tcp_slowtmr+0x544>
 8008e2a:	bf00      	nop
 8008e2c:	20006f5c 	.word	0x20006f5c
 8008e30:	000124f8 	.word	0x000124f8
 8008e34:	10624dd3 	.word	0x10624dd3
 8008e38:	20006f68 	.word	0x20006f68
 8008e3c:	08016d18 	.word	0x08016d18
 8008e40:	08016f50 	.word	0x08016f50
 8008e44:	08016d54 	.word	0x08016d54
 8008e48:	08016f7c 	.word	0x08016f7c
 8008e4c:	20006f70 	.word	0x20006f70
 8008e50:	20006f6c 	.word	0x20006f6c
 8008e54:	08016fa8 	.word	0x08016fa8
 8008e58:	08016fd8 	.word	0x08016fd8
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008e5c:	4b13      	ldr	r3, [pc, #76]	; (8008eac <tcp_slowtmr+0x574>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d006      	beq.n	8008e74 <tcp_slowtmr+0x53c>
 8008e66:	4b12      	ldr	r3, [pc, #72]	; (8008eb0 <tcp_slowtmr+0x578>)
 8008e68:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8008e6c:	4911      	ldr	r1, [pc, #68]	; (8008eb4 <tcp_slowtmr+0x57c>)
 8008e6e:	4812      	ldr	r0, [pc, #72]	; (8008eb8 <tcp_slowtmr+0x580>)
 8008e70:	f009 fc5a 	bl	8012728 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	4a0c      	ldr	r2, [pc, #48]	; (8008eac <tcp_slowtmr+0x574>)
 8008e7a:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7e:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8008e86:	69b9      	ldr	r1, [r7, #24]
 8008e88:	2001      	movs	r0, #1
 8008e8a:	f7fe f9c5 	bl	8007218 <memp_free>
 8008e8e:	e004      	b.n	8008e9a <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d193      	bne.n	8008dc8 <tcp_slowtmr+0x490>
    }
  }
}
 8008ea0:	bf00      	nop
 8008ea2:	bf00      	nop
 8008ea4:	3728      	adds	r7, #40	; 0x28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	20006f6c 	.word	0x20006f6c
 8008eb0:	08016d18 	.word	0x08016d18
 8008eb4:	08017000 	.word	0x08017000
 8008eb8:	08016d54 	.word	0x08016d54

08008ebc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008ec2:	4b2d      	ldr	r3, [pc, #180]	; (8008f78 <tcp_fasttmr+0xbc>)
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	4b2b      	ldr	r3, [pc, #172]	; (8008f78 <tcp_fasttmr+0xbc>)
 8008ecc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008ece:	4b2b      	ldr	r3, [pc, #172]	; (8008f7c <tcp_fasttmr+0xc0>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008ed4:	e048      	b.n	8008f68 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	7f5a      	ldrb	r2, [r3, #29]
 8008eda:	4b27      	ldr	r3, [pc, #156]	; (8008f78 <tcp_fasttmr+0xbc>)
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d03f      	beq.n	8008f62 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008ee2:	4b25      	ldr	r3, [pc, #148]	; (8008f78 <tcp_fasttmr+0xbc>)
 8008ee4:	781a      	ldrb	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	7e9b      	ldrb	r3, [r3, #26]
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d010      	beq.n	8008f18 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	7e9b      	ldrb	r3, [r3, #26]
 8008efa:	f043 0302 	orr.w	r3, r3, #2
 8008efe:	b2da      	uxtb	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f003 f907 	bl	800c118 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	7e9b      	ldrb	r3, [r3, #26]
 8008f0e:	f023 0303 	bic.w	r3, r3, #3
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	7e9b      	ldrb	r3, [r3, #26]
 8008f1c:	f003 0308 	and.w	r3, r3, #8
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d009      	beq.n	8008f38 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	7e9b      	ldrb	r3, [r3, #26]
 8008f28:	f023 0308 	bic.w	r3, r3, #8
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7ff fb18 	bl	8008568 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00a      	beq.n	8008f5c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008f46:	4b0e      	ldr	r3, [pc, #56]	; (8008f80 <tcp_fasttmr+0xc4>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f819 	bl	8008f84 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008f52:	4b0b      	ldr	r3, [pc, #44]	; (8008f80 <tcp_fasttmr+0xc4>)
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d000      	beq.n	8008f5c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008f5a:	e7b8      	b.n	8008ece <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	607b      	str	r3, [r7, #4]
 8008f60:	e002      	b.n	8008f68 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1b3      	bne.n	8008ed6 <tcp_fasttmr+0x1a>
    }
  }
}
 8008f6e:	bf00      	nop
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	20006f72 	.word	0x20006f72
 8008f7c:	20006f68 	.word	0x20006f68
 8008f80:	20006f70 	.word	0x20006f70

08008f84 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008f84:	b590      	push	{r4, r7, lr}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f90:	7b5b      	ldrb	r3, [r3, #13]
 8008f92:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f98:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00b      	beq.n	8008fc2 <tcp_process_refused_data+0x3e>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6918      	ldr	r0, [r3, #16]
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	6879      	ldr	r1, [r7, #4]
 8008fba:	47a0      	blx	r4
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73fb      	strb	r3, [r7, #15]
 8008fc0:	e007      	b.n	8008fd2 <tcp_process_refused_data+0x4e>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	6879      	ldr	r1, [r7, #4]
 8008fc8:	2000      	movs	r0, #0
 8008fca:	f000 f88d 	bl	80090e8 <tcp_recv_null>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d12a      	bne.n	8009030 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	f003 0320 	and.w	r3, r3, #32
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d033      	beq.n	800904c <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fe8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008fec:	d005      	beq.n	8008ffa <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <tcp_process_refused_data+0x98>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6918      	ldr	r0, [r3, #16]
 800900e:	2300      	movs	r3, #0
 8009010:	2200      	movs	r2, #0
 8009012:	6879      	ldr	r1, [r7, #4]
 8009014:	47a0      	blx	r4
 8009016:	4603      	mov	r3, r0
 8009018:	73fb      	strb	r3, [r7, #15]
 800901a:	e001      	b.n	8009020 <tcp_process_refused_data+0x9c>
 800901c:	2300      	movs	r3, #0
 800901e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009024:	f113 0f0d 	cmn.w	r3, #13
 8009028:	d110      	bne.n	800904c <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800902a:	f06f 030c 	mvn.w	r3, #12
 800902e:	e00e      	b.n	800904e <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8009030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009034:	f113 0f0d 	cmn.w	r3, #13
 8009038:	d102      	bne.n	8009040 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800903a:	f06f 030c 	mvn.w	r3, #12
 800903e:	e006      	b.n	800904e <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8009046:	f06f 0304 	mvn.w	r3, #4
 800904a:	e000      	b.n	800904e <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	bd90      	pop	{r4, r7, pc}

08009056 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b084      	sub	sp, #16
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800905e:	e007      	b.n	8009070 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f80a 	bl	8009080 <tcp_seg_free>
    seg = next;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1f4      	bne.n	8009060 <tcp_segs_free+0xa>
  }
}
 8009076:	bf00      	nop
 8009078:	bf00      	nop
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00c      	beq.n	80090a8 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d004      	beq.n	80090a0 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	4618      	mov	r0, r3
 800909c:	f7fe fdfa 	bl	8007c94 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80090a0:	6879      	ldr	r1, [r7, #4]
 80090a2:	2003      	movs	r0, #3
 80090a4:	f7fe f8b8 	bl	8007218 <memp_free>
  }
}
 80090a8:	bf00      	nop
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80090b8:	2003      	movs	r0, #3
 80090ba:	f7fe f85b 	bl	8007174 <memp_malloc>
 80090be:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d101      	bne.n	80090ca <tcp_seg_copy+0x1a>
    return NULL;
 80090c6:	2300      	movs	r3, #0
 80090c8:	e00a      	b.n	80090e0 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80090ca:	2210      	movs	r2, #16
 80090cc:	6879      	ldr	r1, [r7, #4]
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f008 fca6 	bl	8011a20 <memcpy>
  pbuf_ref(cseg->p);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fe fe85 	bl	8007de8 <pbuf_ref>
  return cseg;
 80090de:	68fb      	ldr	r3, [r7, #12]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
 80090f4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d009      	beq.n	8009110 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	891b      	ldrh	r3, [r3, #8]
 8009100:	4619      	mov	r1, r3
 8009102:	68b8      	ldr	r0, [r7, #8]
 8009104:	f7ff fbbe 	bl	8008884 <tcp_recved>
    pbuf_free(p);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7fe fdc3 	bl	8007c94 <pbuf_free>
 800910e:	e008      	b.n	8009122 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8009110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d104      	bne.n	8009122 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8009118:	68b8      	ldr	r0, [r7, #8]
 800911a:	f7ff fa8f 	bl	800863c <tcp_close>
 800911e:	4603      	mov	r3, r0
 8009120:	e000      	b.n	8009124 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	4603      	mov	r3, r0
 8009134:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800913a:	2b00      	cmp	r3, #0
 800913c:	db01      	blt.n	8009142 <tcp_kill_prio+0x16>
 800913e:	79fb      	ldrb	r3, [r7, #7]
 8009140:	e000      	b.n	8009144 <tcp_kill_prio+0x18>
 8009142:	237f      	movs	r3, #127	; 0x7f
 8009144:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800914a:	2300      	movs	r3, #0
 800914c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800914e:	4b16      	ldr	r3, [pc, #88]	; (80091a8 <tcp_kill_prio+0x7c>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	617b      	str	r3, [r7, #20]
 8009154:	e01a      	b.n	800918c <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	7d5b      	ldrb	r3, [r3, #21]
 800915a:	7afa      	ldrb	r2, [r7, #11]
 800915c:	429a      	cmp	r2, r3
 800915e:	d312      	bcc.n	8009186 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009160:	4b12      	ldr	r3, [pc, #72]	; (80091ac <tcp_kill_prio+0x80>)
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	6a1b      	ldr	r3, [r3, #32]
 8009168:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	429a      	cmp	r2, r3
 800916e:	d80a      	bhi.n	8009186 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8009170:	4b0e      	ldr	r3, [pc, #56]	; (80091ac <tcp_kill_prio+0x80>)
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	7d5b      	ldrb	r3, [r3, #21]
 8009184:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	617b      	str	r3, [r7, #20]
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1e1      	bne.n	8009156 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009198:	6938      	ldr	r0, [r7, #16]
 800919a:	f7ff fb19 	bl	80087d0 <tcp_abort>
  }
}
 800919e:	bf00      	nop
 80091a0:	3718      	adds	r7, #24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	20006f68 	.word	0x20006f68
 80091ac:	20006f5c 	.word	0x20006f5c

080091b0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80091ba:	79fb      	ldrb	r3, [r7, #7]
 80091bc:	2b08      	cmp	r3, #8
 80091be:	d009      	beq.n	80091d4 <tcp_kill_state+0x24>
 80091c0:	79fb      	ldrb	r3, [r7, #7]
 80091c2:	2b09      	cmp	r3, #9
 80091c4:	d006      	beq.n	80091d4 <tcp_kill_state+0x24>
 80091c6:	4b1a      	ldr	r3, [pc, #104]	; (8009230 <tcp_kill_state+0x80>)
 80091c8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80091cc:	4919      	ldr	r1, [pc, #100]	; (8009234 <tcp_kill_state+0x84>)
 80091ce:	481a      	ldr	r0, [pc, #104]	; (8009238 <tcp_kill_state+0x88>)
 80091d0:	f009 faaa 	bl	8012728 <iprintf>

  inactivity = 0;
 80091d4:	2300      	movs	r3, #0
 80091d6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80091d8:	2300      	movs	r3, #0
 80091da:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80091dc:	4b17      	ldr	r3, [pc, #92]	; (800923c <tcp_kill_state+0x8c>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	617b      	str	r3, [r7, #20]
 80091e2:	e017      	b.n	8009214 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	7d1b      	ldrb	r3, [r3, #20]
 80091e8:	79fa      	ldrb	r2, [r7, #7]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d10f      	bne.n	800920e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80091ee:	4b14      	ldr	r3, [pc, #80]	; (8009240 <tcp_kill_state+0x90>)
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d807      	bhi.n	800920e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80091fe:	4b10      	ldr	r3, [pc, #64]	; (8009240 <tcp_kill_state+0x90>)
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	617b      	str	r3, [r7, #20]
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1e4      	bne.n	80091e4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d003      	beq.n	8009228 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009220:	2100      	movs	r1, #0
 8009222:	6938      	ldr	r0, [r7, #16]
 8009224:	f7ff fa22 	bl	800866c <tcp_abandon>
  }
}
 8009228:	bf00      	nop
 800922a:	3718      	adds	r7, #24
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	08016d18 	.word	0x08016d18
 8009234:	08017028 	.word	0x08017028
 8009238:	08016d54 	.word	0x08016d54
 800923c:	20006f68 	.word	0x20006f68
 8009240:	20006f5c 	.word	0x20006f5c

08009244 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009252:	4b12      	ldr	r3, [pc, #72]	; (800929c <tcp_kill_timewait+0x58>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	e012      	b.n	8009280 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800925a:	4b11      	ldr	r3, [pc, #68]	; (80092a0 <tcp_kill_timewait+0x5c>)
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	429a      	cmp	r2, r3
 8009268:	d807      	bhi.n	800927a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800926a:	4b0d      	ldr	r3, [pc, #52]	; (80092a0 <tcp_kill_timewait+0x5c>)
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	60fb      	str	r3, [r7, #12]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1e9      	bne.n	800925a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800928c:	68b8      	ldr	r0, [r7, #8]
 800928e:	f7ff fa9f 	bl	80087d0 <tcp_abort>
  }
}
 8009292:	bf00      	nop
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20006f6c 	.word	0x20006f6c
 80092a0:	20006f5c 	.word	0x20006f5c

080092a4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	4603      	mov	r3, r0
 80092ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80092ae:	2001      	movs	r0, #1
 80092b0:	f7fd ff60 	bl	8007174 <memp_malloc>
 80092b4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d14c      	bne.n	8009356 <tcp_alloc+0xb2>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80092bc:	f7ff ffc2 	bl	8009244 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80092c0:	2001      	movs	r0, #1
 80092c2:	f7fd ff57 	bl	8007174 <memp_malloc>
 80092c6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d139      	bne.n	8009342 <tcp_alloc+0x9e>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80092ce:	2009      	movs	r0, #9
 80092d0:	f7ff ff6e 	bl	80091b0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80092d4:	2001      	movs	r0, #1
 80092d6:	f7fd ff4d 	bl	8007174 <memp_malloc>
 80092da:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d125      	bne.n	800932e <tcp_alloc+0x8a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80092e2:	2008      	movs	r0, #8
 80092e4:	f7ff ff64 	bl	80091b0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80092e8:	2001      	movs	r0, #1
 80092ea:	f7fd ff43 	bl	8007174 <memp_malloc>
 80092ee:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d111      	bne.n	800931a <tcp_alloc+0x76>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80092f6:	79fb      	ldrb	r3, [r7, #7]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7ff ff17 	bl	800912c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80092fe:	2001      	movs	r0, #1
 8009300:	f7fd ff38 	bl	8007174 <memp_malloc>
 8009304:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d006      	beq.n	800931a <tcp_alloc+0x76>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800930c:	4b36      	ldr	r3, [pc, #216]	; (80093e8 <tcp_alloc+0x144>)
 800930e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009312:	881a      	ldrh	r2, [r3, #0]
 8009314:	3a01      	subs	r2, #1
 8009316:	b292      	uxth	r2, r2
 8009318:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d006      	beq.n	800932e <tcp_alloc+0x8a>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8009320:	4b31      	ldr	r3, [pc, #196]	; (80093e8 <tcp_alloc+0x144>)
 8009322:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009326:	881a      	ldrh	r2, [r3, #0]
 8009328:	3a01      	subs	r2, #1
 800932a:	b292      	uxth	r2, r2
 800932c:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d006      	beq.n	8009342 <tcp_alloc+0x9e>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8009334:	4b2c      	ldr	r3, [pc, #176]	; (80093e8 <tcp_alloc+0x144>)
 8009336:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800933a:	881a      	ldrh	r2, [r3, #0]
 800933c:	3a01      	subs	r2, #1
 800933e:	b292      	uxth	r2, r2
 8009340:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d006      	beq.n	8009356 <tcp_alloc+0xb2>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8009348:	4b27      	ldr	r3, [pc, #156]	; (80093e8 <tcp_alloc+0x144>)
 800934a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800934e:	881a      	ldrh	r2, [r3, #0]
 8009350:	3a01      	subs	r2, #1
 8009352:	b292      	uxth	r2, r2
 8009354:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d03f      	beq.n	80093dc <tcp_alloc+0x138>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800935c:	2298      	movs	r2, #152	; 0x98
 800935e:	2100      	movs	r1, #0
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f008 fb6b 	bl	8011a3c <memset>
    pcb->prio = prio;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	79fa      	ldrb	r2, [r7, #7]
 800936a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009372:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800937c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	22ff      	movs	r2, #255	; 0xff
 800938a:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009392:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2206      	movs	r2, #6
 8009398:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2206      	movs	r2, #6
 80093a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093a8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2201      	movs	r2, #1
 80093ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80093b2:	4b0e      	ldr	r3, [pc, #56]	; (80093ec <tcp_alloc+0x148>)
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80093ba:	4b0d      	ldr	r3, [pc, #52]	; (80093f0 <tcp_alloc+0x14c>)
 80093bc:	781a      	ldrb	r2, [r3, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80093c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	4a09      	ldr	r2, [pc, #36]	; (80093f4 <tcp_alloc+0x150>)
 80093d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	4a08      	ldr	r2, [pc, #32]	; (80093f8 <tcp_alloc+0x154>)
 80093d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80093dc:	68fb      	ldr	r3, [r7, #12]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20006e84 	.word	0x20006e84
 80093ec:	20006f5c 	.word	0x20006f5c
 80093f0:	20006f72 	.word	0x20006f72
 80093f4:	080090e9 	.word	0x080090e9
 80093f8:	006ddd00 	.word	0x006ddd00

080093fc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	7d1b      	ldrb	r3, [r3, #20]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d034      	beq.n	8009476 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009410:	2b0a      	cmp	r3, #10
 8009412:	d030      	beq.n	8009476 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8009418:	2b01      	cmp	r3, #1
 800941a:	d02c      	beq.n	8009476 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009420:	2b00      	cmp	r3, #0
 8009422:	d007      	beq.n	8009434 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009428:	4618      	mov	r0, r3
 800942a:	f7fe fc33 	bl	8007c94 <pbuf_free>
      pcb->refused_data = NULL;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009438:	4618      	mov	r0, r3
 800943a:	f7ff fe0c 	bl	8009056 <tcp_segs_free>
    pcb->ooseq = NULL;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800944a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009450:	4618      	mov	r0, r3
 8009452:	f7ff fe00 	bl	8009056 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff fdfb 	bl	8009056 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	669a      	str	r2, [r3, #104]	; 0x68
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8009476:	bf00      	nop
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
	...

08009480 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	429a      	cmp	r2, r3
 8009492:	d105      	bne.n	80094a0 <tcp_pcb_remove+0x20>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68da      	ldr	r2, [r3, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	e013      	b.n	80094c8 <tcp_pcb_remove+0x48>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	60fb      	str	r3, [r7, #12]
 80094a6:	e00c      	b.n	80094c2 <tcp_pcb_remove+0x42>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d104      	bne.n	80094bc <tcp_pcb_remove+0x3c>
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	68da      	ldr	r2, [r3, #12]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	60da      	str	r2, [r3, #12]
 80094ba:	e005      	b.n	80094c8 <tcp_pcb_remove+0x48>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	60fb      	str	r3, [r7, #12]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1ef      	bne.n	80094a8 <tcp_pcb_remove+0x28>
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2200      	movs	r2, #0
 80094cc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80094ce:	6838      	ldr	r0, [r7, #0]
 80094d0:	f7ff ff94 	bl	80093fc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	7d1b      	ldrb	r3, [r3, #20]
 80094d8:	2b0a      	cmp	r3, #10
 80094da:	d013      	beq.n	8009504 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d00f      	beq.n	8009504 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	7e9b      	ldrb	r3, [r3, #26]
 80094e8:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d009      	beq.n	8009504 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	7e9b      	ldrb	r3, [r3, #26]
 80094f4:	f043 0302 	orr.w	r3, r3, #2
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80094fe:	6838      	ldr	r0, [r7, #0]
 8009500:	f002 fe0a 	bl	800c118 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	7d1b      	ldrb	r3, [r3, #20]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d020      	beq.n	800954e <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009510:	2b00      	cmp	r3, #0
 8009512:	d006      	beq.n	8009522 <tcp_pcb_remove+0xa2>
 8009514:	4b13      	ldr	r3, [pc, #76]	; (8009564 <tcp_pcb_remove+0xe4>)
 8009516:	f240 7253 	movw	r2, #1875	; 0x753
 800951a:	4913      	ldr	r1, [pc, #76]	; (8009568 <tcp_pcb_remove+0xe8>)
 800951c:	4813      	ldr	r0, [pc, #76]	; (800956c <tcp_pcb_remove+0xec>)
 800951e:	f009 f903 	bl	8012728 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d006      	beq.n	8009538 <tcp_pcb_remove+0xb8>
 800952a:	4b0e      	ldr	r3, [pc, #56]	; (8009564 <tcp_pcb_remove+0xe4>)
 800952c:	f240 7254 	movw	r2, #1876	; 0x754
 8009530:	490f      	ldr	r1, [pc, #60]	; (8009570 <tcp_pcb_remove+0xf0>)
 8009532:	480e      	ldr	r0, [pc, #56]	; (800956c <tcp_pcb_remove+0xec>)
 8009534:	f009 f8f8 	bl	8012728 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953c:	2b00      	cmp	r3, #0
 800953e:	d006      	beq.n	800954e <tcp_pcb_remove+0xce>
 8009540:	4b08      	ldr	r3, [pc, #32]	; (8009564 <tcp_pcb_remove+0xe4>)
 8009542:	f240 7256 	movw	r2, #1878	; 0x756
 8009546:	490b      	ldr	r1, [pc, #44]	; (8009574 <tcp_pcb_remove+0xf4>)
 8009548:	4808      	ldr	r0, [pc, #32]	; (800956c <tcp_pcb_remove+0xec>)
 800954a:	f009 f8ed 	bl	8012728 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	2200      	movs	r2, #0
 8009552:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	2200      	movs	r2, #0
 8009558:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800955a:	bf00      	nop
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	08016d18 	.word	0x08016d18
 8009568:	080170d0 	.word	0x080170d0
 800956c:	08016d54 	.word	0x08016d54
 8009570:	080170e8 	.word	0x080170e8
 8009574:	08017104 	.word	0x08017104

08009578 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009580:	4b06      	ldr	r3, [pc, #24]	; (800959c <tcp_next_iss+0x24>)
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	4b06      	ldr	r3, [pc, #24]	; (80095a0 <tcp_next_iss+0x28>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4413      	add	r3, r2
 800958a:	4a04      	ldr	r2, [pc, #16]	; (800959c <tcp_next_iss+0x24>)
 800958c:	6013      	str	r3, [r2, #0]
  return iss;
 800958e:	4b03      	ldr	r3, [pc, #12]	; (800959c <tcp_next_iss+0x24>)
 8009590:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009592:	4618      	mov	r0, r3
 8009594:	370c      	adds	r7, #12
 8009596:	46bd      	mov	sp, r7
 8009598:	bc80      	pop	{r7}
 800959a:	4770      	bx	lr
 800959c:	20000030 	.word	0x20000030
 80095a0:	20006f5c 	.word	0x20006f5c

080095a4 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	4603      	mov	r3, r0
 80095ac:	6039      	str	r1, [r7, #0]
 80095ae:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 80095b0:	6838      	ldr	r0, [r7, #0]
 80095b2:	f005 f949 	bl	800e848 <ip4_route>
 80095b6:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d101      	bne.n	80095c2 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 80095be:	88fb      	ldrh	r3, [r7, #6]
 80095c0:	e010      	b.n	80095e4 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80095c6:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80095c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d008      	beq.n	80095e2 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80095d0:	897b      	ldrh	r3, [r7, #10]
 80095d2:	3b28      	subs	r3, #40	; 0x28
 80095d4:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80095d6:	893a      	ldrh	r2, [r7, #8]
 80095d8:	88fb      	ldrh	r3, [r7, #6]
 80095da:	4293      	cmp	r3, r2
 80095dc:	bf28      	it	cs
 80095de:	4613      	movcs	r3, r2
 80095e0:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 80095e2:	88fb      	ldrh	r3, [r7, #6]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80095fa:	e011      	b.n	8009620 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	429a      	cmp	r2, r3
 8009606:	d108      	bne.n	800961a <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f7ff f8de 	bl	80087d0 <tcp_abort>
      pcb = next;
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	60fb      	str	r3, [r7, #12]
 8009618:	e002      	b.n	8009620 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1ea      	bne.n	80095fc <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8009626:	bf00      	nop
 8009628:	bf00      	nop
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d02c      	beq.n	800969a <tcp_netif_ip_addr_changed+0x6a>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d028      	beq.n	800969a <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009648:	4b16      	ldr	r3, [pc, #88]	; (80096a4 <tcp_netif_ip_addr_changed+0x74>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4619      	mov	r1, r3
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7ff ffcc 	bl	80095ec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009654:	4b14      	ldr	r3, [pc, #80]	; (80096a8 <tcp_netif_ip_addr_changed+0x78>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7ff ffc6 	bl	80095ec <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d019      	beq.n	800969a <tcp_netif_ip_addr_changed+0x6a>
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d015      	beq.n	800969a <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800966e:	4b0f      	ldr	r3, [pc, #60]	; (80096ac <tcp_netif_ip_addr_changed+0x7c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	60fb      	str	r3, [r7, #12]
 8009674:	e00e      	b.n	8009694 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	429a      	cmp	r2, r3
 8009686:	d103      	bne.n	8009690 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	60fb      	str	r3, [r7, #12]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1ed      	bne.n	8009676 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800969a:	bf00      	nop
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20006f68 	.word	0x20006f68
 80096a8:	20006f60 	.word	0x20006f60
 80096ac:	20006f64 	.word	0x20006f64

080096b0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80096b0:	b590      	push	{r4, r7, lr}
 80096b2:	b08b      	sub	sp, #44	; 0x2c
 80096b4:	af02      	add	r7, sp, #8
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 80096ba:	4b96      	ldr	r3, [pc, #600]	; (8009914 <tcp_input+0x264>)
 80096bc:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 80096c0:	3301      	adds	r3, #1
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	4b93      	ldr	r3, [pc, #588]	; (8009914 <tcp_input+0x264>)
 80096c6:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	4a92      	ldr	r2, [pc, #584]	; (8009918 <tcp_input+0x268>)
 80096d0:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	895b      	ldrh	r3, [r3, #10]
 80096d6:	2b13      	cmp	r3, #19
 80096d8:	d808      	bhi.n	80096ec <tcp_input+0x3c>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 80096da:	4b8e      	ldr	r3, [pc, #568]	; (8009914 <tcp_input+0x264>)
 80096dc:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80096e0:	3301      	adds	r3, #1
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	4b8b      	ldr	r3, [pc, #556]	; (8009914 <tcp_input+0x264>)
 80096e6:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 80096ea:	e3db      	b.n	8009ea4 <tcp_input+0x7f4>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80096ec:	4b8b      	ldr	r3, [pc, #556]	; (800991c <tcp_input+0x26c>)
 80096ee:	695b      	ldr	r3, [r3, #20]
 80096f0:	4a8a      	ldr	r2, [pc, #552]	; (800991c <tcp_input+0x26c>)
 80096f2:	6812      	ldr	r2, [r2, #0]
 80096f4:	4611      	mov	r1, r2
 80096f6:	4618      	mov	r0, r3
 80096f8:	f005 fb8c 	bl	800ee14 <ip4_addr_isbroadcast_u32>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d105      	bne.n	800970e <tcp_input+0x5e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009702:	4b86      	ldr	r3, [pc, #536]	; (800991c <tcp_input+0x26c>)
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800970a:	2be0      	cmp	r3, #224	; 0xe0
 800970c:	d108      	bne.n	8009720 <tcp_input+0x70>
    TCP_STATS_INC(tcp.proterr);
 800970e:	4b81      	ldr	r3, [pc, #516]	; (8009914 <tcp_input+0x264>)
 8009710:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8009714:	3301      	adds	r3, #1
 8009716:	b29a      	uxth	r2, r3
 8009718:	4b7e      	ldr	r3, [pc, #504]	; (8009914 <tcp_input+0x264>)
 800971a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    goto dropped;
 800971e:	e3c1      	b.n	8009ea4 <tcp_input+0x7f4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8009720:	4b7d      	ldr	r3, [pc, #500]	; (8009918 <tcp_input+0x268>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	899b      	ldrh	r3, [r3, #12]
 8009726:	b29b      	uxth	r3, r3
 8009728:	4618      	mov	r0, r3
 800972a:	f7fd f8e2 	bl	80068f2 <lwip_htons>
 800972e:	4603      	mov	r3, r0
 8009730:	0b1b      	lsrs	r3, r3, #12
 8009732:	b29b      	uxth	r3, r3
 8009734:	b2db      	uxtb	r3, r3
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800973a:	7cbb      	ldrb	r3, [r7, #18]
 800973c:	2b13      	cmp	r3, #19
 800973e:	d905      	bls.n	800974c <tcp_input+0x9c>
 8009740:	7cbb      	ldrb	r3, [r7, #18]
 8009742:	b29a      	uxth	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	891b      	ldrh	r3, [r3, #8]
 8009748:	429a      	cmp	r2, r3
 800974a:	d908      	bls.n	800975e <tcp_input+0xae>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 800974c:	4b71      	ldr	r3, [pc, #452]	; (8009914 <tcp_input+0x264>)
 800974e:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8009752:	3301      	adds	r3, #1
 8009754:	b29a      	uxth	r2, r3
 8009756:	4b6f      	ldr	r3, [pc, #444]	; (8009914 <tcp_input+0x264>)
 8009758:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 800975c:	e3a2      	b.n	8009ea4 <tcp_input+0x7f4>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800975e:	7cbb      	ldrb	r3, [r7, #18]
 8009760:	b29b      	uxth	r3, r3
 8009762:	3b14      	subs	r3, #20
 8009764:	b29a      	uxth	r2, r3
 8009766:	4b6e      	ldr	r3, [pc, #440]	; (8009920 <tcp_input+0x270>)
 8009768:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800976a:	4b6e      	ldr	r3, [pc, #440]	; (8009924 <tcp_input+0x274>)
 800976c:	2200      	movs	r2, #0
 800976e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	895a      	ldrh	r2, [r3, #10]
 8009774:	7cbb      	ldrb	r3, [r7, #18]
 8009776:	b29b      	uxth	r3, r3
 8009778:	429a      	cmp	r2, r3
 800977a:	d30d      	bcc.n	8009798 <tcp_input+0xe8>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800977c:	4b68      	ldr	r3, [pc, #416]	; (8009920 <tcp_input+0x270>)
 800977e:	881a      	ldrh	r2, [r3, #0]
 8009780:	4b69      	ldr	r3, [pc, #420]	; (8009928 <tcp_input+0x278>)
 8009782:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8009784:	7cbb      	ldrb	r3, [r7, #18]
 8009786:	b29b      	uxth	r3, r3
 8009788:	425b      	negs	r3, r3
 800978a:	b29b      	uxth	r3, r3
 800978c:	b21b      	sxth	r3, r3
 800978e:	4619      	mov	r1, r3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7fe fa5b 	bl	8007c4c <pbuf_header>
 8009796:	e05d      	b.n	8009854 <tcp_input+0x1a4>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d105      	bne.n	80097ac <tcp_input+0xfc>
 80097a0:	4b62      	ldr	r3, [pc, #392]	; (800992c <tcp_input+0x27c>)
 80097a2:	22b2      	movs	r2, #178	; 0xb2
 80097a4:	4962      	ldr	r1, [pc, #392]	; (8009930 <tcp_input+0x280>)
 80097a6:	4863      	ldr	r0, [pc, #396]	; (8009934 <tcp_input+0x284>)
 80097a8:	f008 ffbe 	bl	8012728 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 80097ac:	f06f 0113 	mvn.w	r1, #19
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7fe fa4b 	bl	8007c4c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	895a      	ldrh	r2, [r3, #10]
 80097ba:	4b5b      	ldr	r3, [pc, #364]	; (8009928 <tcp_input+0x278>)
 80097bc:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80097be:	4b58      	ldr	r3, [pc, #352]	; (8009920 <tcp_input+0x270>)
 80097c0:	881a      	ldrh	r2, [r3, #0]
 80097c2:	4b59      	ldr	r3, [pc, #356]	; (8009928 <tcp_input+0x278>)
 80097c4:	881b      	ldrh	r3, [r3, #0]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80097ca:	4b57      	ldr	r3, [pc, #348]	; (8009928 <tcp_input+0x278>)
 80097cc:	881b      	ldrh	r3, [r3, #0]
 80097ce:	425b      	negs	r3, r3
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	b21b      	sxth	r3, r3
 80097d4:	4619      	mov	r1, r3
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7fe fa38 	bl	8007c4c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	895b      	ldrh	r3, [r3, #10]
 80097e2:	8a3a      	ldrh	r2, [r7, #16]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d908      	bls.n	80097fa <tcp_input+0x14a>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 80097e8:	4b4a      	ldr	r3, [pc, #296]	; (8009914 <tcp_input+0x264>)
 80097ea:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80097ee:	3301      	adds	r3, #1
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	4b48      	ldr	r3, [pc, #288]	; (8009914 <tcp_input+0x264>)
 80097f4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 80097f8:	e354      	b.n	8009ea4 <tcp_input+0x7f4>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	4a48      	ldr	r2, [pc, #288]	; (8009924 <tcp_input+0x274>)
 8009802:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	8a3b      	ldrh	r3, [r7, #16]
 800980a:	425b      	negs	r3, r3
 800980c:	b29b      	uxth	r3, r3
 800980e:	b21b      	sxth	r3, r3
 8009810:	4619      	mov	r1, r3
 8009812:	4610      	mov	r0, r2
 8009814:	f7fe fa1a 	bl	8007c4c <pbuf_header>
    p->tot_len -= opt2len;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	891a      	ldrh	r2, [r3, #8]
 800981c:	8a3b      	ldrh	r3, [r7, #16]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	b29a      	uxth	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	895b      	ldrh	r3, [r3, #10]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d005      	beq.n	800983a <tcp_input+0x18a>
 800982e:	4b3f      	ldr	r3, [pc, #252]	; (800992c <tcp_input+0x27c>)
 8009830:	22cf      	movs	r2, #207	; 0xcf
 8009832:	4941      	ldr	r1, [pc, #260]	; (8009938 <tcp_input+0x288>)
 8009834:	483f      	ldr	r0, [pc, #252]	; (8009934 <tcp_input+0x284>)
 8009836:	f008 ff77 	bl	8012728 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	891a      	ldrh	r2, [r3, #8]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	891b      	ldrh	r3, [r3, #8]
 8009844:	429a      	cmp	r2, r3
 8009846:	d005      	beq.n	8009854 <tcp_input+0x1a4>
 8009848:	4b38      	ldr	r3, [pc, #224]	; (800992c <tcp_input+0x27c>)
 800984a:	22d0      	movs	r2, #208	; 0xd0
 800984c:	493b      	ldr	r1, [pc, #236]	; (800993c <tcp_input+0x28c>)
 800984e:	4839      	ldr	r0, [pc, #228]	; (8009934 <tcp_input+0x284>)
 8009850:	f008 ff6a 	bl	8012728 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009854:	4b30      	ldr	r3, [pc, #192]	; (8009918 <tcp_input+0x268>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	881b      	ldrh	r3, [r3, #0]
 800985a:	b29b      	uxth	r3, r3
 800985c:	4a2e      	ldr	r2, [pc, #184]	; (8009918 <tcp_input+0x268>)
 800985e:	6814      	ldr	r4, [r2, #0]
 8009860:	4618      	mov	r0, r3
 8009862:	f7fd f846 	bl	80068f2 <lwip_htons>
 8009866:	4603      	mov	r3, r0
 8009868:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800986a:	4b2b      	ldr	r3, [pc, #172]	; (8009918 <tcp_input+0x268>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	885b      	ldrh	r3, [r3, #2]
 8009870:	b29b      	uxth	r3, r3
 8009872:	4a29      	ldr	r2, [pc, #164]	; (8009918 <tcp_input+0x268>)
 8009874:	6814      	ldr	r4, [r2, #0]
 8009876:	4618      	mov	r0, r3
 8009878:	f7fd f83b 	bl	80068f2 <lwip_htons>
 800987c:	4603      	mov	r3, r0
 800987e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009880:	4b25      	ldr	r3, [pc, #148]	; (8009918 <tcp_input+0x268>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	4a24      	ldr	r2, [pc, #144]	; (8009918 <tcp_input+0x268>)
 8009888:	6814      	ldr	r4, [r2, #0]
 800988a:	4618      	mov	r0, r3
 800988c:	f7fd f83e 	bl	800690c <lwip_htonl>
 8009890:	4603      	mov	r3, r0
 8009892:	6063      	str	r3, [r4, #4]
 8009894:	6863      	ldr	r3, [r4, #4]
 8009896:	4a2a      	ldr	r2, [pc, #168]	; (8009940 <tcp_input+0x290>)
 8009898:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800989a:	4b1f      	ldr	r3, [pc, #124]	; (8009918 <tcp_input+0x268>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	4a1d      	ldr	r2, [pc, #116]	; (8009918 <tcp_input+0x268>)
 80098a2:	6814      	ldr	r4, [r2, #0]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fd f831 	bl	800690c <lwip_htonl>
 80098aa:	4603      	mov	r3, r0
 80098ac:	60a3      	str	r3, [r4, #8]
 80098ae:	68a3      	ldr	r3, [r4, #8]
 80098b0:	4a24      	ldr	r2, [pc, #144]	; (8009944 <tcp_input+0x294>)
 80098b2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80098b4:	4b18      	ldr	r3, [pc, #96]	; (8009918 <tcp_input+0x268>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	89db      	ldrh	r3, [r3, #14]
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	4a16      	ldr	r2, [pc, #88]	; (8009918 <tcp_input+0x268>)
 80098be:	6814      	ldr	r4, [r2, #0]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fd f816 	bl	80068f2 <lwip_htons>
 80098c6:	4603      	mov	r3, r0
 80098c8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80098ca:	4b13      	ldr	r3, [pc, #76]	; (8009918 <tcp_input+0x268>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	899b      	ldrh	r3, [r3, #12]
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fd f80d 	bl	80068f2 <lwip_htons>
 80098d8:	4603      	mov	r3, r0
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	4b19      	ldr	r3, [pc, #100]	; (8009948 <tcp_input+0x298>)
 80098e4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	891a      	ldrh	r2, [r3, #8]
 80098ea:	4b17      	ldr	r3, [pc, #92]	; (8009948 <tcp_input+0x298>)
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	f003 0303 	and.w	r3, r3, #3
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	bf14      	ite	ne
 80098f6:	2301      	movne	r3, #1
 80098f8:	2300      	moveq	r3, #0
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	4413      	add	r3, r2
 8009900:	b29a      	uxth	r2, r3
 8009902:	4b12      	ldr	r3, [pc, #72]	; (800994c <tcp_input+0x29c>)
 8009904:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009906:	2300      	movs	r3, #0
 8009908:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800990a:	4b11      	ldr	r3, [pc, #68]	; (8009950 <tcp_input+0x2a0>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	61fb      	str	r3, [r7, #28]
 8009910:	e08d      	b.n	8009a2e <tcp_input+0x37e>
 8009912:	bf00      	nop
 8009914:	20006e84 	.word	0x20006e84
 8009918:	20006f84 	.word	0x20006f84
 800991c:	200038bc 	.word	0x200038bc
 8009920:	20006f88 	.word	0x20006f88
 8009924:	20006f8c 	.word	0x20006f8c
 8009928:	20006f8a 	.word	0x20006f8a
 800992c:	0801711c 	.word	0x0801711c
 8009930:	08017150 	.word	0x08017150
 8009934:	08017160 	.word	0x08017160
 8009938:	08017188 	.word	0x08017188
 800993c:	08017194 	.word	0x08017194
 8009940:	20006f94 	.word	0x20006f94
 8009944:	20006f98 	.word	0x20006f98
 8009948:	20006fa0 	.word	0x20006fa0
 800994c:	20006f9e 	.word	0x20006f9e
 8009950:	20006f68 	.word	0x20006f68
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	7d1b      	ldrb	r3, [r3, #20]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d105      	bne.n	8009968 <tcp_input+0x2b8>
 800995c:	4b77      	ldr	r3, [pc, #476]	; (8009b3c <tcp_input+0x48c>)
 800995e:	22e2      	movs	r2, #226	; 0xe2
 8009960:	4977      	ldr	r1, [pc, #476]	; (8009b40 <tcp_input+0x490>)
 8009962:	4878      	ldr	r0, [pc, #480]	; (8009b44 <tcp_input+0x494>)
 8009964:	f008 fee0 	bl	8012728 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	7d1b      	ldrb	r3, [r3, #20]
 800996c:	2b0a      	cmp	r3, #10
 800996e:	d105      	bne.n	800997c <tcp_input+0x2cc>
 8009970:	4b72      	ldr	r3, [pc, #456]	; (8009b3c <tcp_input+0x48c>)
 8009972:	22e3      	movs	r2, #227	; 0xe3
 8009974:	4974      	ldr	r1, [pc, #464]	; (8009b48 <tcp_input+0x498>)
 8009976:	4873      	ldr	r0, [pc, #460]	; (8009b44 <tcp_input+0x494>)
 8009978:	f008 fed6 	bl	8012728 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	7d1b      	ldrb	r3, [r3, #20]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d105      	bne.n	8009990 <tcp_input+0x2e0>
 8009984:	4b6d      	ldr	r3, [pc, #436]	; (8009b3c <tcp_input+0x48c>)
 8009986:	22e4      	movs	r2, #228	; 0xe4
 8009988:	4970      	ldr	r1, [pc, #448]	; (8009b4c <tcp_input+0x49c>)
 800998a:	486e      	ldr	r0, [pc, #440]	; (8009b44 <tcp_input+0x494>)
 800998c:	f008 fecc 	bl	8012728 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	8b1a      	ldrh	r2, [r3, #24]
 8009994:	4b6e      	ldr	r3, [pc, #440]	; (8009b50 <tcp_input+0x4a0>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	881b      	ldrh	r3, [r3, #0]
 800999a:	b29b      	uxth	r3, r3
 800999c:	429a      	cmp	r2, r3
 800999e:	d141      	bne.n	8009a24 <tcp_input+0x374>
        pcb->local_port == tcphdr->dest &&
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	8ada      	ldrh	r2, [r3, #22]
 80099a4:	4b6a      	ldr	r3, [pc, #424]	; (8009b50 <tcp_input+0x4a0>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	885b      	ldrh	r3, [r3, #2]
 80099aa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d139      	bne.n	8009a24 <tcp_input+0x374>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	4b67      	ldr	r3, [pc, #412]	; (8009b54 <tcp_input+0x4a4>)
 80099b6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d133      	bne.n	8009a24 <tcp_input+0x374>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	4b64      	ldr	r3, [pc, #400]	; (8009b54 <tcp_input+0x4a4>)
 80099c2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d12d      	bne.n	8009a24 <tcp_input+0x374>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80099c8:	69fb      	ldr	r3, [r7, #28]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	69fa      	ldr	r2, [r7, #28]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d105      	bne.n	80099de <tcp_input+0x32e>
 80099d2:	4b5a      	ldr	r3, [pc, #360]	; (8009b3c <tcp_input+0x48c>)
 80099d4:	22ec      	movs	r2, #236	; 0xec
 80099d6:	4960      	ldr	r1, [pc, #384]	; (8009b58 <tcp_input+0x4a8>)
 80099d8:	485a      	ldr	r0, [pc, #360]	; (8009b44 <tcp_input+0x494>)
 80099da:	f008 fea5 	bl	8012728 <iprintf>
      if (prev != NULL) {
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00b      	beq.n	80099fc <tcp_input+0x34c>
        prev->next = pcb->next;
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	68da      	ldr	r2, [r3, #12]
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80099ec:	4b5b      	ldr	r3, [pc, #364]	; (8009b5c <tcp_input+0x4ac>)
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80099f4:	4a59      	ldr	r2, [pc, #356]	; (8009b5c <tcp_input+0x4ac>)
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	6013      	str	r3, [r2, #0]
 80099fa:	e007      	b.n	8009a0c <tcp_input+0x35c>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 80099fc:	4b58      	ldr	r3, [pc, #352]	; (8009b60 <tcp_input+0x4b0>)
 80099fe:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8009a02:	3301      	adds	r3, #1
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	4b56      	ldr	r3, [pc, #344]	; (8009b60 <tcp_input+0x4b0>)
 8009a08:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	69fa      	ldr	r2, [r7, #28]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d10f      	bne.n	8009a36 <tcp_input+0x386>
 8009a16:	4b49      	ldr	r3, [pc, #292]	; (8009b3c <tcp_input+0x48c>)
 8009a18:	22f4      	movs	r2, #244	; 0xf4
 8009a1a:	4952      	ldr	r1, [pc, #328]	; (8009b64 <tcp_input+0x4b4>)
 8009a1c:	4849      	ldr	r0, [pc, #292]	; (8009b44 <tcp_input+0x494>)
 8009a1e:	f008 fe83 	bl	8012728 <iprintf>
      break;
 8009a22:	e008      	b.n	8009a36 <tcp_input+0x386>
    }
    prev = pcb;
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	61fb      	str	r3, [r7, #28]
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d18f      	bne.n	8009954 <tcp_input+0x2a4>
 8009a34:	e000      	b.n	8009a38 <tcp_input+0x388>
      break;
 8009a36:	bf00      	nop
  }

  if (pcb == NULL) {
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f040 809a 	bne.w	8009b74 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a40:	4b49      	ldr	r3, [pc, #292]	; (8009b68 <tcp_input+0x4b8>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	61fb      	str	r3, [r7, #28]
 8009a46:	e02f      	b.n	8009aa8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	7d1b      	ldrb	r3, [r3, #20]
 8009a4c:	2b0a      	cmp	r3, #10
 8009a4e:	d005      	beq.n	8009a5c <tcp_input+0x3ac>
 8009a50:	4b3a      	ldr	r3, [pc, #232]	; (8009b3c <tcp_input+0x48c>)
 8009a52:	22fe      	movs	r2, #254	; 0xfe
 8009a54:	4945      	ldr	r1, [pc, #276]	; (8009b6c <tcp_input+0x4bc>)
 8009a56:	483b      	ldr	r0, [pc, #236]	; (8009b44 <tcp_input+0x494>)
 8009a58:	f008 fe66 	bl	8012728 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	8b1a      	ldrh	r2, [r3, #24]
 8009a60:	4b3b      	ldr	r3, [pc, #236]	; (8009b50 <tcp_input+0x4a0>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d11a      	bne.n	8009aa2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	8ada      	ldrh	r2, [r3, #22]
 8009a70:	4b37      	ldr	r3, [pc, #220]	; (8009b50 <tcp_input+0x4a0>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	885b      	ldrh	r3, [r3, #2]
 8009a76:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d112      	bne.n	8009aa2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	685a      	ldr	r2, [r3, #4]
 8009a80:	4b34      	ldr	r3, [pc, #208]	; (8009b54 <tcp_input+0x4a4>)
 8009a82:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d10c      	bne.n	8009aa2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	4b31      	ldr	r3, [pc, #196]	; (8009b54 <tcp_input+0x4a4>)
 8009a8e:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d106      	bne.n	8009aa2 <tcp_input+0x3f2>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8009a94:	69f8      	ldr	r0, [r7, #28]
 8009a96:	f000 fb45 	bl	800a124 <tcp_timewait_input>
        pbuf_free(p);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f7fe f8fa 	bl	8007c94 <pbuf_free>
        return;
 8009aa0:	e20d      	b.n	8009ebe <tcp_input+0x80e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	61fb      	str	r3, [r7, #28]
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1cc      	bne.n	8009a48 <tcp_input+0x398>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009ab2:	4b2f      	ldr	r3, [pc, #188]	; (8009b70 <tcp_input+0x4c0>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	617b      	str	r3, [r7, #20]
 8009ab8:	e019      	b.n	8009aee <tcp_input+0x43e>
      if (lpcb->local_port == tcphdr->dest) {
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	8ada      	ldrh	r2, [r3, #22]
 8009abe:	4b24      	ldr	r3, [pc, #144]	; (8009b50 <tcp_input+0x4a0>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	885b      	ldrh	r3, [r3, #2]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d10c      	bne.n	8009ae4 <tcp_input+0x434>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	4b21      	ldr	r3, [pc, #132]	; (8009b54 <tcp_input+0x4a4>)
 8009ad0:	695b      	ldr	r3, [r3, #20]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d00f      	beq.n	8009af6 <tcp_input+0x446>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d00d      	beq.n	8009af8 <tcp_input+0x448>
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d009      	beq.n	8009af8 <tcp_input+0x448>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	617b      	str	r3, [r7, #20]
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1e2      	bne.n	8009aba <tcp_input+0x40a>
 8009af4:	e000      	b.n	8009af8 <tcp_input+0x448>
            break;
 8009af6:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d03a      	beq.n	8009b74 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00b      	beq.n	8009b1c <tcp_input+0x46c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	68da      	ldr	r2, [r3, #12]
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009b0c:	4b18      	ldr	r3, [pc, #96]	; (8009b70 <tcp_input+0x4c0>)
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009b14:	4a16      	ldr	r2, [pc, #88]	; (8009b70 <tcp_input+0x4c0>)
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	6013      	str	r3, [r2, #0]
 8009b1a:	e007      	b.n	8009b2c <tcp_input+0x47c>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8009b1c:	4b10      	ldr	r3, [pc, #64]	; (8009b60 <tcp_input+0x4b0>)
 8009b1e:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8009b22:	3301      	adds	r3, #1
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	4b0e      	ldr	r3, [pc, #56]	; (8009b60 <tcp_input+0x4b0>)
 8009b28:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8009b2c:	6978      	ldr	r0, [r7, #20]
 8009b2e:	f000 fa0f 	bl	8009f50 <tcp_listen_input>
      pbuf_free(p);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7fe f8ae 	bl	8007c94 <pbuf_free>
      return;
 8009b38:	e1c1      	b.n	8009ebe <tcp_input+0x80e>
 8009b3a:	bf00      	nop
 8009b3c:	0801711c 	.word	0x0801711c
 8009b40:	080171b4 	.word	0x080171b4
 8009b44:	08017160 	.word	0x08017160
 8009b48:	080171dc 	.word	0x080171dc
 8009b4c:	08017208 	.word	0x08017208
 8009b50:	20006f84 	.word	0x20006f84
 8009b54:	200038bc 	.word	0x200038bc
 8009b58:	08017230 	.word	0x08017230
 8009b5c:	20006f68 	.word	0x20006f68
 8009b60:	20006e84 	.word	0x20006e84
 8009b64:	0801725c 	.word	0x0801725c
 8009b68:	20006f6c 	.word	0x20006f6c
 8009b6c:	08017288 	.word	0x08017288
 8009b70:	20006f64 	.word	0x20006f64
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f000 815e 	beq.w	8009e38 <tcp_input+0x788>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009b7c:	4b97      	ldr	r3, [pc, #604]	; (8009ddc <tcp_input+0x72c>)
 8009b7e:	2200      	movs	r2, #0
 8009b80:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	891a      	ldrh	r2, [r3, #8]
 8009b86:	4b95      	ldr	r3, [pc, #596]	; (8009ddc <tcp_input+0x72c>)
 8009b88:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009b8a:	4a94      	ldr	r2, [pc, #592]	; (8009ddc <tcp_input+0x72c>)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009b90:	4b93      	ldr	r3, [pc, #588]	; (8009de0 <tcp_input+0x730>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a91      	ldr	r2, [pc, #580]	; (8009ddc <tcp_input+0x72c>)
 8009b96:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009b98:	4b92      	ldr	r3, [pc, #584]	; (8009de4 <tcp_input+0x734>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009b9e:	4b92      	ldr	r3, [pc, #584]	; (8009de8 <tcp_input+0x738>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009ba4:	4b91      	ldr	r3, [pc, #580]	; (8009dec <tcp_input+0x73c>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009baa:	4b91      	ldr	r3, [pc, #580]	; (8009df0 <tcp_input+0x740>)
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	f003 0308 	and.w	r3, r3, #8
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d006      	beq.n	8009bc4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	7b5b      	ldrb	r3, [r3, #13]
 8009bba:	f043 0301 	orr.w	r3, r3, #1
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d01e      	beq.n	8009c0a <tcp_input+0x55a>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009bcc:	69f8      	ldr	r0, [r7, #28]
 8009bce:	f7ff f9d9 	bl	8008f84 <tcp_process_refused_data>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	f113 0f0d 	cmn.w	r3, #13
 8009bd8:	d007      	beq.n	8009bea <tcp_input+0x53a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d013      	beq.n	8009c0a <tcp_input+0x55a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009be2:	4b84      	ldr	r3, [pc, #528]	; (8009df4 <tcp_input+0x744>)
 8009be4:	881b      	ldrh	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00f      	beq.n	8009c0a <tcp_input+0x55a>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d102      	bne.n	8009bf8 <tcp_input+0x548>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009bf2:	69f8      	ldr	r0, [r7, #28]
 8009bf4:	f002 fa34 	bl	800c060 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8009bf8:	4b7f      	ldr	r3, [pc, #508]	; (8009df8 <tcp_input+0x748>)
 8009bfa:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8009bfe:	3301      	adds	r3, #1
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	4b7d      	ldr	r3, [pc, #500]	; (8009df8 <tcp_input+0x748>)
 8009c04:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009c08:	e103      	b.n	8009e12 <tcp_input+0x762>
      }
    }
    tcp_input_pcb = pcb;
 8009c0a:	4a7c      	ldr	r2, [pc, #496]	; (8009dfc <tcp_input+0x74c>)
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009c10:	69f8      	ldr	r0, [r7, #28]
 8009c12:	f000 faef 	bl	800a1f4 <tcp_process>
 8009c16:	4603      	mov	r3, r0
 8009c18:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009c1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c1e:	f113 0f0d 	cmn.w	r3, #13
 8009c22:	f000 80d0 	beq.w	8009dc6 <tcp_input+0x716>
      if (recv_flags & TF_RESET) {
 8009c26:	4b70      	ldr	r3, [pc, #448]	; (8009de8 <tcp_input+0x738>)
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	f003 0308 	and.w	r3, r3, #8
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d016      	beq.n	8009c60 <tcp_input+0x5b0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d008      	beq.n	8009c4e <tcp_input+0x59e>
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c42:	69fa      	ldr	r2, [r7, #28]
 8009c44:	6912      	ldr	r2, [r2, #16]
 8009c46:	f06f 010d 	mvn.w	r1, #13
 8009c4a:	4610      	mov	r0, r2
 8009c4c:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009c4e:	69f9      	ldr	r1, [r7, #28]
 8009c50:	486b      	ldr	r0, [pc, #428]	; (8009e00 <tcp_input+0x750>)
 8009c52:	f7ff fc15 	bl	8009480 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8009c56:	69f9      	ldr	r1, [r7, #28]
 8009c58:	2001      	movs	r0, #1
 8009c5a:	f7fd fadd 	bl	8007218 <memp_free>
 8009c5e:	e0d8      	b.n	8009e12 <tcp_input+0x762>
      } else {
        err = ERR_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009c64:	4b61      	ldr	r3, [pc, #388]	; (8009dec <tcp_input+0x73c>)
 8009c66:	881b      	ldrh	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d01b      	beq.n	8009ca4 <tcp_input+0x5f4>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009c6c:	4b5f      	ldr	r3, [pc, #380]	; (8009dec <tcp_input+0x73c>)
 8009c6e:	881b      	ldrh	r3, [r3, #0]
 8009c70:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d009      	beq.n	8009c8e <tcp_input+0x5de>
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c7e:	69fa      	ldr	r2, [r7, #28]
 8009c80:	6910      	ldr	r0, [r2, #16]
 8009c82:	89fa      	ldrh	r2, [r7, #14]
 8009c84:	69f9      	ldr	r1, [r7, #28]
 8009c86:	4798      	blx	r3
 8009c88:	4603      	mov	r3, r0
 8009c8a:	74fb      	strb	r3, [r7, #19]
 8009c8c:	e001      	b.n	8009c92 <tcp_input+0x5e2>
 8009c8e:	2300      	movs	r3, #0
 8009c90:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009c92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c96:	f113 0f0d 	cmn.w	r3, #13
 8009c9a:	f000 8096 	beq.w	8009dca <tcp_input+0x71a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009c9e:	4b53      	ldr	r3, [pc, #332]	; (8009dec <tcp_input+0x73c>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009ca4:	69f8      	ldr	r0, [r7, #28]
 8009ca6:	f000 f921 	bl	8009eec <tcp_input_delayed_close>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f040 808e 	bne.w	8009dce <tcp_input+0x71e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009cb2:	4b4c      	ldr	r3, [pc, #304]	; (8009de4 <tcp_input+0x734>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d041      	beq.n	8009d3e <tcp_input+0x68e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d006      	beq.n	8009cd0 <tcp_input+0x620>
 8009cc2:	4b50      	ldr	r3, [pc, #320]	; (8009e04 <tcp_input+0x754>)
 8009cc4:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8009cc8:	494f      	ldr	r1, [pc, #316]	; (8009e08 <tcp_input+0x758>)
 8009cca:	4850      	ldr	r0, [pc, #320]	; (8009e0c <tcp_input+0x75c>)
 8009ccc:	f008 fd2c 	bl	8012728 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	7e9b      	ldrb	r3, [r3, #26]
 8009cd4:	f003 0310 	and.w	r3, r3, #16
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d008      	beq.n	8009cee <tcp_input+0x63e>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009cdc:	4b41      	ldr	r3, [pc, #260]	; (8009de4 <tcp_input+0x734>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fd ffd7 	bl	8007c94 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009ce6:	69f8      	ldr	r0, [r7, #28]
 8009ce8:	f7fe fd72 	bl	80087d0 <tcp_abort>
            goto aborted;
 8009cec:	e091      	b.n	8009e12 <tcp_input+0x762>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00c      	beq.n	8009d12 <tcp_input+0x662>
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	6918      	ldr	r0, [r3, #16]
 8009d02:	4b38      	ldr	r3, [pc, #224]	; (8009de4 <tcp_input+0x734>)
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	2300      	movs	r3, #0
 8009d08:	69f9      	ldr	r1, [r7, #28]
 8009d0a:	47a0      	blx	r4
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	74fb      	strb	r3, [r7, #19]
 8009d10:	e008      	b.n	8009d24 <tcp_input+0x674>
 8009d12:	4b34      	ldr	r3, [pc, #208]	; (8009de4 <tcp_input+0x734>)
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	2300      	movs	r3, #0
 8009d18:	69f9      	ldr	r1, [r7, #28]
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	f7ff f9e4 	bl	80090e8 <tcp_recv_null>
 8009d20:	4603      	mov	r3, r0
 8009d22:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009d24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009d28:	f113 0f0d 	cmn.w	r3, #13
 8009d2c:	d051      	beq.n	8009dd2 <tcp_input+0x722>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009d2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <tcp_input+0x68e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009d36:	4b2b      	ldr	r3, [pc, #172]	; (8009de4 <tcp_input+0x734>)
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009d3e:	4b2a      	ldr	r3, [pc, #168]	; (8009de8 <tcp_input+0x738>)
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	f003 0320 	and.w	r3, r3, #32
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d030      	beq.n	8009dac <tcp_input+0x6fc>
          if (pcb->refused_data != NULL) {
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d009      	beq.n	8009d66 <tcp_input+0x6b6>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d56:	7b5a      	ldrb	r2, [r3, #13]
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d5c:	f042 0220 	orr.w	r2, r2, #32
 8009d60:	b2d2      	uxtb	r2, r2
 8009d62:	735a      	strb	r2, [r3, #13]
 8009d64:	e022      	b.n	8009dac <tcp_input+0x6fc>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d6a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009d6e:	d005      	beq.n	8009d7c <tcp_input+0x6cc>
              pcb->rcv_wnd++;
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d74:	3301      	adds	r3, #1
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00b      	beq.n	8009d9e <tcp_input+0x6ee>
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	6918      	ldr	r0, [r3, #16]
 8009d90:	2300      	movs	r3, #0
 8009d92:	2200      	movs	r2, #0
 8009d94:	69f9      	ldr	r1, [r7, #28]
 8009d96:	47a0      	blx	r4
 8009d98:	4603      	mov	r3, r0
 8009d9a:	74fb      	strb	r3, [r7, #19]
 8009d9c:	e001      	b.n	8009da2 <tcp_input+0x6f2>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009da2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009da6:	f113 0f0d 	cmn.w	r3, #13
 8009daa:	d014      	beq.n	8009dd6 <tcp_input+0x726>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009dac:	4b13      	ldr	r3, [pc, #76]	; (8009dfc <tcp_input+0x74c>)
 8009dae:	2200      	movs	r2, #0
 8009db0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009db2:	69f8      	ldr	r0, [r7, #28]
 8009db4:	f000 f89a 	bl	8009eec <tcp_input_delayed_close>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d128      	bne.n	8009e10 <tcp_input+0x760>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009dbe:	69f8      	ldr	r0, [r7, #28]
 8009dc0:	f002 f9aa 	bl	800c118 <tcp_output>
 8009dc4:	e025      	b.n	8009e12 <tcp_input+0x762>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009dc6:	bf00      	nop
 8009dc8:	e023      	b.n	8009e12 <tcp_input+0x762>
              goto aborted;
 8009dca:	bf00      	nop
 8009dcc:	e021      	b.n	8009e12 <tcp_input+0x762>
          goto aborted;
 8009dce:	bf00      	nop
 8009dd0:	e01f      	b.n	8009e12 <tcp_input+0x762>
            goto aborted;
 8009dd2:	bf00      	nop
 8009dd4:	e01d      	b.n	8009e12 <tcp_input+0x762>
              goto aborted;
 8009dd6:	bf00      	nop
 8009dd8:	e01b      	b.n	8009e12 <tcp_input+0x762>
 8009dda:	bf00      	nop
 8009ddc:	20006f74 	.word	0x20006f74
 8009de0:	20006f84 	.word	0x20006f84
 8009de4:	20006fa4 	.word	0x20006fa4
 8009de8:	20006fa1 	.word	0x20006fa1
 8009dec:	20006f9c 	.word	0x20006f9c
 8009df0:	20006fa0 	.word	0x20006fa0
 8009df4:	20006f9e 	.word	0x20006f9e
 8009df8:	20006e84 	.word	0x20006e84
 8009dfc:	20006fa8 	.word	0x20006fa8
 8009e00:	20006f68 	.word	0x20006f68
 8009e04:	0801711c 	.word	0x0801711c
 8009e08:	080172b8 	.word	0x080172b8
 8009e0c:	08017160 	.word	0x08017160
          goto aborted;
 8009e10:	bf00      	nop
    tcp_input_pcb = NULL;
 8009e12:	4b2c      	ldr	r3, [pc, #176]	; (8009ec4 <tcp_input+0x814>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009e18:	4b2b      	ldr	r3, [pc, #172]	; (8009ec8 <tcp_input+0x818>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8009e1e:	4b2b      	ldr	r3, [pc, #172]	; (8009ecc <tcp_input+0x81c>)
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d04a      	beq.n	8009ebc <tcp_input+0x80c>
    {
      pbuf_free(inseg.p);
 8009e26:	4b29      	ldr	r3, [pc, #164]	; (8009ecc <tcp_input+0x81c>)
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fd ff32 	bl	8007c94 <pbuf_free>
      inseg.p = NULL;
 8009e30:	4b26      	ldr	r3, [pc, #152]	; (8009ecc <tcp_input+0x81c>)
 8009e32:	2200      	movs	r2, #0
 8009e34:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009e36:	e041      	b.n	8009ebc <tcp_input+0x80c>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009e38:	4b25      	ldr	r3, [pc, #148]	; (8009ed0 <tcp_input+0x820>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	899b      	ldrh	r3, [r3, #12]
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7fc fd56 	bl	80068f2 <lwip_htons>
 8009e46:	4603      	mov	r3, r0
 8009e48:	f003 0304 	and.w	r3, r3, #4
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d125      	bne.n	8009e9c <tcp_input+0x7ec>
      TCP_STATS_INC(tcp.proterr);
 8009e50:	4b20      	ldr	r3, [pc, #128]	; (8009ed4 <tcp_input+0x824>)
 8009e52:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8009e56:	3301      	adds	r3, #1
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	4b1e      	ldr	r3, [pc, #120]	; (8009ed4 <tcp_input+0x824>)
 8009e5c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 8009e60:	4b1c      	ldr	r3, [pc, #112]	; (8009ed4 <tcp_input+0x824>)
 8009e62:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8009e66:	3301      	adds	r3, #1
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	4b1a      	ldr	r3, [pc, #104]	; (8009ed4 <tcp_input+0x824>)
 8009e6c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e70:	4b19      	ldr	r3, [pc, #100]	; (8009ed8 <tcp_input+0x828>)
 8009e72:	6818      	ldr	r0, [r3, #0]
 8009e74:	4b19      	ldr	r3, [pc, #100]	; (8009edc <tcp_input+0x82c>)
 8009e76:	881b      	ldrh	r3, [r3, #0]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	4b19      	ldr	r3, [pc, #100]	; (8009ee0 <tcp_input+0x830>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e80:	4b13      	ldr	r3, [pc, #76]	; (8009ed0 <tcp_input+0x820>)
 8009e82:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e84:	885b      	ldrh	r3, [r3, #2]
 8009e86:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e88:	4a11      	ldr	r2, [pc, #68]	; (8009ed0 <tcp_input+0x820>)
 8009e8a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e8c:	8812      	ldrh	r2, [r2, #0]
 8009e8e:	b292      	uxth	r2, r2
 8009e90:	9201      	str	r2, [sp, #4]
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	4b13      	ldr	r3, [pc, #76]	; (8009ee4 <tcp_input+0x834>)
 8009e96:	4a14      	ldr	r2, [pc, #80]	; (8009ee8 <tcp_input+0x838>)
 8009e98:	f002 fbcc 	bl	800c634 <tcp_rst>
    pbuf_free(p);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7fd fef9 	bl	8007c94 <pbuf_free>
  return;
 8009ea2:	e00b      	b.n	8009ebc <tcp_input+0x80c>
dropped:
  TCP_STATS_INC(tcp.drop);
 8009ea4:	4b0b      	ldr	r3, [pc, #44]	; (8009ed4 <tcp_input+0x824>)
 8009ea6:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8009eaa:	3301      	adds	r3, #1
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <tcp_input+0x824>)
 8009eb0:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f7fd feed 	bl	8007c94 <pbuf_free>
 8009eba:	e000      	b.n	8009ebe <tcp_input+0x80e>
  return;
 8009ebc:	bf00      	nop
}
 8009ebe:	3724      	adds	r7, #36	; 0x24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd90      	pop	{r4, r7, pc}
 8009ec4:	20006fa8 	.word	0x20006fa8
 8009ec8:	20006fa4 	.word	0x20006fa4
 8009ecc:	20006f74 	.word	0x20006f74
 8009ed0:	20006f84 	.word	0x20006f84
 8009ed4:	20006e84 	.word	0x20006e84
 8009ed8:	20006f98 	.word	0x20006f98
 8009edc:	20006f9e 	.word	0x20006f9e
 8009ee0:	20006f94 	.word	0x20006f94
 8009ee4:	200038cc 	.word	0x200038cc
 8009ee8:	200038d0 	.word	0x200038d0

08009eec <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8009ef4:	4b14      	ldr	r3, [pc, #80]	; (8009f48 <tcp_input_delayed_close+0x5c>)
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	f003 0310 	and.w	r3, r3, #16
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d01d      	beq.n	8009f3c <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	7e9b      	ldrb	r3, [r3, #26]
 8009f04:	f003 0310 	and.w	r3, r3, #16
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10d      	bne.n	8009f28 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d008      	beq.n	8009f28 <tcp_input_delayed_close+0x3c>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	6912      	ldr	r2, [r2, #16]
 8009f20:	f06f 010e 	mvn.w	r1, #14
 8009f24:	4610      	mov	r0, r2
 8009f26:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009f28:	6879      	ldr	r1, [r7, #4]
 8009f2a:	4808      	ldr	r0, [pc, #32]	; (8009f4c <tcp_input_delayed_close+0x60>)
 8009f2c:	f7ff faa8 	bl	8009480 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8009f30:	6879      	ldr	r1, [r7, #4]
 8009f32:	2001      	movs	r0, #1
 8009f34:	f7fd f970 	bl	8007218 <memp_free>
    return 1;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e000      	b.n	8009f3e <tcp_input_delayed_close+0x52>
  }
  return 0;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	20006fa1 	.word	0x20006fa1
 8009f4c:	20006f68 	.word	0x20006f68

08009f50 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b088      	sub	sp, #32
 8009f54:	af02      	add	r7, sp, #8
 8009f56:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009f58:	4b67      	ldr	r3, [pc, #412]	; (800a0f8 <tcp_listen_input+0x1a8>)
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f040 80c3 	bne.w	800a0ec <tcp_listen_input+0x19c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009f66:	4b64      	ldr	r3, [pc, #400]	; (800a0f8 <tcp_listen_input+0x1a8>)
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	f003 0310 	and.w	r3, r3, #16
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d016      	beq.n	8009fa0 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f72:	4b62      	ldr	r3, [pc, #392]	; (800a0fc <tcp_listen_input+0x1ac>)
 8009f74:	6818      	ldr	r0, [r3, #0]
 8009f76:	4b62      	ldr	r3, [pc, #392]	; (800a100 <tcp_listen_input+0x1b0>)
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	4b61      	ldr	r3, [pc, #388]	; (800a104 <tcp_listen_input+0x1b4>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009f82:	4b61      	ldr	r3, [pc, #388]	; (800a108 <tcp_listen_input+0x1b8>)
 8009f84:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f86:	885b      	ldrh	r3, [r3, #2]
 8009f88:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009f8a:	4a5f      	ldr	r2, [pc, #380]	; (800a108 <tcp_listen_input+0x1b8>)
 8009f8c:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f8e:	8812      	ldrh	r2, [r2, #0]
 8009f90:	b292      	uxth	r2, r2
 8009f92:	9201      	str	r2, [sp, #4]
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	4b5d      	ldr	r3, [pc, #372]	; (800a10c <tcp_listen_input+0x1bc>)
 8009f98:	4a5d      	ldr	r2, [pc, #372]	; (800a110 <tcp_listen_input+0x1c0>)
 8009f9a:	f002 fb4b 	bl	800c634 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009f9e:	e0a7      	b.n	800a0f0 <tcp_listen_input+0x1a0>
  } else if (flags & TCP_SYN) {
 8009fa0:	4b55      	ldr	r3, [pc, #340]	; (800a0f8 <tcp_listen_input+0x1a8>)
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	f003 0302 	and.w	r3, r3, #2
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f000 80a1 	beq.w	800a0f0 <tcp_listen_input+0x1a0>
    npcb = tcp_alloc(pcb->prio);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	7d5b      	ldrb	r3, [r3, #21]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7ff f976 	bl	80092a4 <tcp_alloc>
 8009fb8:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d119      	bne.n	8009ff4 <tcp_listen_input+0xa4>
      TCP_STATS_INC(tcp.memerr);
 8009fc0:	4b54      	ldr	r3, [pc, #336]	; (800a114 <tcp_listen_input+0x1c4>)
 8009fc2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	4b52      	ldr	r3, [pc, #328]	; (800a114 <tcp_listen_input+0x1c4>)
 8009fcc:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d00a      	beq.n	8009fee <tcp_listen_input+0x9e>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	6910      	ldr	r0, [r2, #16]
 8009fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	4798      	blx	r3
 8009fe8:	4603      	mov	r3, r0
 8009fea:	73bb      	strb	r3, [r7, #14]
      return;
 8009fec:	e081      	b.n	800a0f2 <tcp_listen_input+0x1a2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009fee:	23f0      	movs	r3, #240	; 0xf0
 8009ff0:	73bb      	strb	r3, [r7, #14]
      return;
 8009ff2:	e07e      	b.n	800a0f2 <tcp_listen_input+0x1a2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009ff4:	4b48      	ldr	r3, [pc, #288]	; (800a118 <tcp_listen_input+0x1c8>)
 8009ff6:	695a      	ldr	r2, [r3, #20]
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009ffc:	4b46      	ldr	r3, [pc, #280]	; (800a118 <tcp_listen_input+0x1c8>)
 8009ffe:	691a      	ldr	r2, [r3, #16]
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	8ada      	ldrh	r2, [r3, #22]
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a00c:	4b3e      	ldr	r3, [pc, #248]	; (800a108 <tcp_listen_input+0x1b8>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	b29a      	uxth	r2, r3
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	2203      	movs	r2, #3
 800a01c:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a01e:	4b39      	ldr	r3, [pc, #228]	; (800a104 <tcp_listen_input+0x1b4>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	1c5a      	adds	r2, r3, #1
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a030:	6978      	ldr	r0, [r7, #20]
 800a032:	f7ff faa1 	bl	8009578 <tcp_next_iss>
 800a036:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	693a      	ldr	r2, [r7, #16]
 800a042:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a050:	4b2c      	ldr	r3, [pc, #176]	; (800a104 <tcp_listen_input+0x1b4>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	1e5a      	subs	r2, r3, #1
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	691a      	ldr	r2, [r3, #16]
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	7a1b      	ldrb	r3, [r3, #8]
 800a06c:	f003 030c 	and.w	r3, r3, #12
 800a070:	b2da      	uxtb	r2, r3
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a076:	4b29      	ldr	r3, [pc, #164]	; (800a11c <tcp_listen_input+0x1cc>)
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	60da      	str	r2, [r3, #12]
 800a07e:	4a27      	ldr	r2, [pc, #156]	; (800a11c <tcp_listen_input+0x1cc>)
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	6013      	str	r3, [r2, #0]
 800a084:	f002 fd3c 	bl	800cb00 <tcp_timer_needed>
 800a088:	4b25      	ldr	r3, [pc, #148]	; (800a120 <tcp_listen_input+0x1d0>)
 800a08a:	2201      	movs	r2, #1
 800a08c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a08e:	6978      	ldr	r0, [r7, #20]
 800a090:	f001 fd0e 	bl	800bab0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a094:	4b1c      	ldr	r3, [pc, #112]	; (800a108 <tcp_listen_input+0x1b8>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	89db      	ldrh	r3, [r3, #14]
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	f7ff fa73 	bl	80095a4 <tcp_eff_send_mss_impl>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a0c6:	2112      	movs	r1, #18
 800a0c8:	6978      	ldr	r0, [r7, #20]
 800a0ca:	f001 feb3 	bl	800be34 <tcp_enqueue_flags>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a0d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d004      	beq.n	800a0e4 <tcp_listen_input+0x194>
      tcp_abandon(npcb, 0);
 800a0da:	2100      	movs	r1, #0
 800a0dc:	6978      	ldr	r0, [r7, #20]
 800a0de:	f7fe fac5 	bl	800866c <tcp_abandon>
      return;
 800a0e2:	e006      	b.n	800a0f2 <tcp_listen_input+0x1a2>
    tcp_output(npcb);
 800a0e4:	6978      	ldr	r0, [r7, #20]
 800a0e6:	f002 f817 	bl	800c118 <tcp_output>
  return;
 800a0ea:	e001      	b.n	800a0f0 <tcp_listen_input+0x1a0>
    return;
 800a0ec:	bf00      	nop
 800a0ee:	e000      	b.n	800a0f2 <tcp_listen_input+0x1a2>
  return;
 800a0f0:	bf00      	nop
}
 800a0f2:	3718      	adds	r7, #24
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	20006fa0 	.word	0x20006fa0
 800a0fc:	20006f98 	.word	0x20006f98
 800a100:	20006f9e 	.word	0x20006f9e
 800a104:	20006f94 	.word	0x20006f94
 800a108:	20006f84 	.word	0x20006f84
 800a10c:	200038cc 	.word	0x200038cc
 800a110:	200038d0 	.word	0x200038d0
 800a114:	20006e84 	.word	0x20006e84
 800a118:	200038bc 	.word	0x200038bc
 800a11c:	20006f68 	.word	0x20006f68
 800a120:	20006f70 	.word	0x20006f70

0800a124 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af02      	add	r7, sp, #8
 800a12a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a12c:	4b29      	ldr	r3, [pc, #164]	; (800a1d4 <tcp_timewait_input+0xb0>)
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	f003 0304 	and.w	r3, r3, #4
 800a134:	2b00      	cmp	r3, #0
 800a136:	d146      	bne.n	800a1c6 <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a138:	4b26      	ldr	r3, [pc, #152]	; (800a1d4 <tcp_timewait_input+0xb0>)
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	f003 0302 	and.w	r3, r3, #2
 800a140:	2b00      	cmp	r3, #0
 800a142:	d027      	beq.n	800a194 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a144:	4b24      	ldr	r3, [pc, #144]	; (800a1d8 <tcp_timewait_input+0xb4>)
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14c:	1ad3      	subs	r3, r2, r3
 800a14e:	2b00      	cmp	r3, #0
 800a150:	db2a      	blt.n	800a1a8 <tcp_timewait_input+0x84>
 800a152:	4b21      	ldr	r3, [pc, #132]	; (800a1d8 <tcp_timewait_input+0xb4>)
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15a:	6879      	ldr	r1, [r7, #4]
 800a15c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a15e:	440b      	add	r3, r1
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	2b00      	cmp	r3, #0
 800a164:	dc20      	bgt.n	800a1a8 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a166:	4b1d      	ldr	r3, [pc, #116]	; (800a1dc <tcp_timewait_input+0xb8>)
 800a168:	6818      	ldr	r0, [r3, #0]
 800a16a:	4b1d      	ldr	r3, [pc, #116]	; (800a1e0 <tcp_timewait_input+0xbc>)
 800a16c:	881b      	ldrh	r3, [r3, #0]
 800a16e:	461a      	mov	r2, r3
 800a170:	4b19      	ldr	r3, [pc, #100]	; (800a1d8 <tcp_timewait_input+0xb4>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a176:	4b1b      	ldr	r3, [pc, #108]	; (800a1e4 <tcp_timewait_input+0xc0>)
 800a178:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a17a:	885b      	ldrh	r3, [r3, #2]
 800a17c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a17e:	4a19      	ldr	r2, [pc, #100]	; (800a1e4 <tcp_timewait_input+0xc0>)
 800a180:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a182:	8812      	ldrh	r2, [r2, #0]
 800a184:	b292      	uxth	r2, r2
 800a186:	9201      	str	r2, [sp, #4]
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	4b17      	ldr	r3, [pc, #92]	; (800a1e8 <tcp_timewait_input+0xc4>)
 800a18c:	4a17      	ldr	r2, [pc, #92]	; (800a1ec <tcp_timewait_input+0xc8>)
 800a18e:	f002 fa51 	bl	800c634 <tcp_rst>
      return;
 800a192:	e01b      	b.n	800a1cc <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 800a194:	4b0f      	ldr	r3, [pc, #60]	; (800a1d4 <tcp_timewait_input+0xb0>)
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	f003 0301 	and.w	r3, r3, #1
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d003      	beq.n	800a1a8 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a1a0:	4b13      	ldr	r3, [pc, #76]	; (800a1f0 <tcp_timewait_input+0xcc>)
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a1a8:	4b0d      	ldr	r3, [pc, #52]	; (800a1e0 <tcp_timewait_input+0xbc>)
 800a1aa:	881b      	ldrh	r3, [r3, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00c      	beq.n	800a1ca <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	7e9b      	ldrb	r3, [r3, #26]
 800a1b4:	f043 0302 	orr.w	r3, r3, #2
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f001 ffaa 	bl	800c118 <tcp_output>
  }
  return;
 800a1c4:	e001      	b.n	800a1ca <tcp_timewait_input+0xa6>
    return;
 800a1c6:	bf00      	nop
 800a1c8:	e000      	b.n	800a1cc <tcp_timewait_input+0xa8>
  return;
 800a1ca:	bf00      	nop
}
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20006fa0 	.word	0x20006fa0
 800a1d8:	20006f94 	.word	0x20006f94
 800a1dc:	20006f98 	.word	0x20006f98
 800a1e0:	20006f9e 	.word	0x20006f9e
 800a1e4:	20006f84 	.word	0x20006f84
 800a1e8:	200038cc 	.word	0x200038cc
 800a1ec:	200038d0 	.word	0x200038d0
 800a1f0:	20006f5c 	.word	0x20006f5c

0800a1f4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b08a      	sub	sp, #40	; 0x28
 800a1f8:	af02      	add	r7, sp, #8
 800a1fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a200:	2300      	movs	r3, #0
 800a202:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a204:	4b93      	ldr	r3, [pc, #588]	; (800a454 <tcp_process+0x260>)
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	f003 0304 	and.w	r3, r3, #4
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d04e      	beq.n	800a2ae <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	7d1b      	ldrb	r3, [r3, #20]
 800a214:	2b02      	cmp	r3, #2
 800a216:	d108      	bne.n	800a22a <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a21c:	4b8e      	ldr	r3, [pc, #568]	; (800a458 <tcp_process+0x264>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	429a      	cmp	r2, r3
 800a222:	d123      	bne.n	800a26c <tcp_process+0x78>
        acceptable = 1;
 800a224:	2301      	movs	r3, #1
 800a226:	76fb      	strb	r3, [r7, #27]
 800a228:	e020      	b.n	800a26c <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a22e:	4b8b      	ldr	r3, [pc, #556]	; (800a45c <tcp_process+0x268>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	429a      	cmp	r2, r3
 800a234:	d102      	bne.n	800a23c <tcp_process+0x48>
        acceptable = 1;
 800a236:	2301      	movs	r3, #1
 800a238:	76fb      	strb	r3, [r7, #27]
 800a23a:	e017      	b.n	800a26c <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a23c:	4b87      	ldr	r3, [pc, #540]	; (800a45c <tcp_process+0x268>)
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	2b00      	cmp	r3, #0
 800a248:	db10      	blt.n	800a26c <tcp_process+0x78>
 800a24a:	4b84      	ldr	r3, [pc, #528]	; (800a45c <tcp_process+0x268>)
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a252:	6879      	ldr	r1, [r7, #4]
 800a254:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a256:	440b      	add	r3, r1
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	dc06      	bgt.n	800a26c <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	7e9b      	ldrb	r3, [r3, #26]
 800a262:	f043 0302 	orr.w	r3, r3, #2
 800a266:	b2da      	uxtb	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a26c:	7efb      	ldrb	r3, [r7, #27]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d01b      	beq.n	800a2aa <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	7d1b      	ldrb	r3, [r3, #20]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d106      	bne.n	800a288 <tcp_process+0x94>
 800a27a:	4b79      	ldr	r3, [pc, #484]	; (800a460 <tcp_process+0x26c>)
 800a27c:	f240 22e7 	movw	r2, #743	; 0x2e7
 800a280:	4978      	ldr	r1, [pc, #480]	; (800a464 <tcp_process+0x270>)
 800a282:	4879      	ldr	r0, [pc, #484]	; (800a468 <tcp_process+0x274>)
 800a284:	f008 fa50 	bl	8012728 <iprintf>
      recv_flags |= TF_RESET;
 800a288:	4b78      	ldr	r3, [pc, #480]	; (800a46c <tcp_process+0x278>)
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	f043 0308 	orr.w	r3, r3, #8
 800a290:	b2da      	uxtb	r2, r3
 800a292:	4b76      	ldr	r3, [pc, #472]	; (800a46c <tcp_process+0x278>)
 800a294:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	7e9b      	ldrb	r3, [r3, #26]
 800a29a:	f023 0301 	bic.w	r3, r3, #1
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800a2a4:	f06f 030d 	mvn.w	r3, #13
 800a2a8:	e348      	b.n	800a93c <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	e346      	b.n	800a93c <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a2ae:	4b69      	ldr	r3, [pc, #420]	; (800a454 <tcp_process+0x260>)
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	f003 0302 	and.w	r3, r3, #2
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d010      	beq.n	800a2dc <tcp_process+0xe8>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	7d1b      	ldrb	r3, [r3, #20]
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d00c      	beq.n	800a2dc <tcp_process+0xe8>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	7d1b      	ldrb	r3, [r3, #20]
 800a2c6:	2b03      	cmp	r3, #3
 800a2c8:	d008      	beq.n	800a2dc <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	7e9b      	ldrb	r3, [r3, #26]
 800a2ce:	f043 0302 	orr.w	r3, r3, #2
 800a2d2:	b2da      	uxtb	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	e32f      	b.n	800a93c <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	7e9b      	ldrb	r3, [r3, #26]
 800a2e0:	f003 0310 	and.w	r3, r3, #16
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d103      	bne.n	800a2f0 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a2e8:	4b61      	ldr	r3, [pc, #388]	; (800a470 <tcp_process+0x27c>)
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f001 fbd9 	bl	800bab0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	7d1b      	ldrb	r3, [r3, #20]
 800a302:	3b02      	subs	r3, #2
 800a304:	2b07      	cmp	r3, #7
 800a306:	f200 8309 	bhi.w	800a91c <tcp_process+0x728>
 800a30a:	a201      	add	r2, pc, #4	; (adr r2, 800a310 <tcp_process+0x11c>)
 800a30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a310:	0800a331 	.word	0x0800a331
 800a314:	0800a527 	.word	0x0800a527
 800a318:	0800a67f 	.word	0x0800a67f
 800a31c:	0800a6a9 	.word	0x0800a6a9
 800a320:	0800a7cb 	.word	0x0800a7cb
 800a324:	0800a67f 	.word	0x0800a67f
 800a328:	0800a857 	.word	0x0800a857
 800a32c:	0800a8e7 	.word	0x0800a8e7
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a330:	4b48      	ldr	r3, [pc, #288]	; (800a454 <tcp_process+0x260>)
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	f003 0310 	and.w	r3, r3, #16
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f000 80ca 	beq.w	800a4d2 <tcp_process+0x2de>
 800a33e:	4b45      	ldr	r3, [pc, #276]	; (800a454 <tcp_process+0x260>)
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	f003 0302 	and.w	r3, r3, #2
 800a346:	2b00      	cmp	r3, #0
 800a348:	f000 80c3 	beq.w	800a4d2 <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a350:	1c5a      	adds	r2, r3, #1
 800a352:	4b41      	ldr	r3, [pc, #260]	; (800a458 <tcp_process+0x264>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	429a      	cmp	r2, r3
 800a358:	f040 80bb 	bne.w	800a4d2 <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 800a35c:	4b3f      	ldr	r3, [pc, #252]	; (800a45c <tcp_process+0x268>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	1c5a      	adds	r2, r3, #1
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800a36e:	4b3a      	ldr	r3, [pc, #232]	; (800a458 <tcp_process+0x264>)
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800a376:	4b3f      	ldr	r3, [pc, #252]	; (800a474 <tcp_process+0x280>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	89db      	ldrh	r3, [r3, #14]
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a390:	4b32      	ldr	r3, [pc, #200]	; (800a45c <tcp_process+0x268>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	1e5a      	subs	r2, r3, #1
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2204      	movs	r2, #4
 800a39e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	4610      	mov	r0, r2
 800a3ac:	f7ff f8fa 	bl	80095a4 <tcp_eff_send_mss_impl>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a3bc:	005b      	lsls	r3, r3, #1
 800a3be:	f241 121c 	movw	r2, #4380	; 0x111c
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	bf38      	it	cc
 800a3c6:	461a      	movcc	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	bf28      	it	cs
 800a3d2:	4613      	movcs	r3, r2
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d106      	bne.n	800a3f4 <tcp_process+0x200>
 800a3e6:	4b1e      	ldr	r3, [pc, #120]	; (800a460 <tcp_process+0x26c>)
 800a3e8:	f240 321a 	movw	r2, #794	; 0x31a
 800a3ec:	4922      	ldr	r1, [pc, #136]	; (800a478 <tcp_process+0x284>)
 800a3ee:	481e      	ldr	r0, [pc, #120]	; (800a468 <tcp_process+0x274>)
 800a3f0:	f008 f99a 	bl	8012728 <iprintf>
      --pcb->snd_queuelen;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a408:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d111      	bne.n	800a434 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a414:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d106      	bne.n	800a42a <tcp_process+0x236>
 800a41c:	4b10      	ldr	r3, [pc, #64]	; (800a460 <tcp_process+0x26c>)
 800a41e:	f240 3222 	movw	r2, #802	; 0x322
 800a422:	4916      	ldr	r1, [pc, #88]	; (800a47c <tcp_process+0x288>)
 800a424:	4810      	ldr	r0, [pc, #64]	; (800a468 <tcp_process+0x274>)
 800a426:	f008 f97f 	bl	8012728 <iprintf>
        pcb->unsent = rseg->next;
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	669a      	str	r2, [r3, #104]	; 0x68
 800a432:	e003      	b.n	800a43c <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800a43c:	69f8      	ldr	r0, [r7, #28]
 800a43e:	f7fe fe1f 	bl	8009080 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a446:	2b00      	cmp	r3, #0
 800a448:	d11a      	bne.n	800a480 <tcp_process+0x28c>
        pcb->rtime = -1;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a450:	861a      	strh	r2, [r3, #48]	; 0x30
 800a452:	e01c      	b.n	800a48e <tcp_process+0x29a>
 800a454:	20006fa0 	.word	0x20006fa0
 800a458:	20006f98 	.word	0x20006f98
 800a45c:	20006f94 	.word	0x20006f94
 800a460:	0801711c 	.word	0x0801711c
 800a464:	080172d4 	.word	0x080172d4
 800a468:	08017160 	.word	0x08017160
 800a46c:	20006fa1 	.word	0x20006fa1
 800a470:	20006f5c 	.word	0x20006f5c
 800a474:	20006f84 	.word	0x20006f84
 800a478:	080172f4 	.word	0x080172f4
 800a47c:	0801730c 	.word	0x0801730c
      } else {
        pcb->rtime = 0;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00a      	beq.n	800a4ae <tcp_process+0x2ba>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	6910      	ldr	r0, [r2, #16]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	6879      	ldr	r1, [r7, #4]
 800a4a6:	4798      	blx	r3
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	76bb      	strb	r3, [r7, #26]
 800a4ac:	e001      	b.n	800a4b2 <tcp_process+0x2be>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800a4b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a4b6:	f113 0f0d 	cmn.w	r3, #13
 800a4ba:	d102      	bne.n	800a4c2 <tcp_process+0x2ce>
        return ERR_ABRT;
 800a4bc:	f06f 030c 	mvn.w	r3, #12
 800a4c0:	e23c      	b.n	800a93c <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	7e9b      	ldrb	r3, [r3, #26]
 800a4c6:	f043 0302 	orr.w	r3, r3, #2
 800a4ca:	b2da      	uxtb	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800a4d0:	e226      	b.n	800a920 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 800a4d2:	4b93      	ldr	r3, [pc, #588]	; (800a720 <tcp_process+0x52c>)
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	f003 0310 	and.w	r3, r3, #16
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	f000 8220 	beq.w	800a920 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4e0:	4b90      	ldr	r3, [pc, #576]	; (800a724 <tcp_process+0x530>)
 800a4e2:	6818      	ldr	r0, [r3, #0]
 800a4e4:	4b90      	ldr	r3, [pc, #576]	; (800a728 <tcp_process+0x534>)
 800a4e6:	881b      	ldrh	r3, [r3, #0]
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	4b90      	ldr	r3, [pc, #576]	; (800a72c <tcp_process+0x538>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a4f0:	4b8f      	ldr	r3, [pc, #572]	; (800a730 <tcp_process+0x53c>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4f4:	885b      	ldrh	r3, [r3, #2]
 800a4f6:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a4f8:	4a8d      	ldr	r2, [pc, #564]	; (800a730 <tcp_process+0x53c>)
 800a4fa:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4fc:	8812      	ldrh	r2, [r2, #0]
 800a4fe:	b292      	uxth	r2, r2
 800a500:	9201      	str	r2, [sp, #4]
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	4b8b      	ldr	r3, [pc, #556]	; (800a734 <tcp_process+0x540>)
 800a506:	4a8c      	ldr	r2, [pc, #560]	; (800a738 <tcp_process+0x544>)
 800a508:	f002 f894 	bl	800c634 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a512:	2b05      	cmp	r3, #5
 800a514:	f200 8204 	bhi.w	800a920 <tcp_process+0x72c>
        pcb->rtime = 0;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f002 f908 	bl	800c734 <tcp_rexmit_rto>
    break;
 800a524:	e1fc      	b.n	800a920 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800a526:	4b7e      	ldr	r3, [pc, #504]	; (800a720 <tcp_process+0x52c>)
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	f003 0310 	and.w	r3, r3, #16
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f000 8091 	beq.w	800a656 <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800a534:	4b7b      	ldr	r3, [pc, #492]	; (800a724 <tcp_process+0x530>)
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	3b01      	subs	r3, #1
 800a540:	2b00      	cmp	r3, #0
 800a542:	db71      	blt.n	800a628 <tcp_process+0x434>
 800a544:	4b77      	ldr	r3, [pc, #476]	; (800a724 <tcp_process+0x530>)
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	2b00      	cmp	r3, #0
 800a550:	dc6a      	bgt.n	800a628 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2204      	movs	r2, #4
 800a556:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00b      	beq.n	800a578 <tcp_process+0x384>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a564:	699b      	ldr	r3, [r3, #24]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d106      	bne.n	800a578 <tcp_process+0x384>
 800a56a:	4b74      	ldr	r3, [pc, #464]	; (800a73c <tcp_process+0x548>)
 800a56c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a570:	4973      	ldr	r1, [pc, #460]	; (800a740 <tcp_process+0x54c>)
 800a572:	4874      	ldr	r0, [pc, #464]	; (800a744 <tcp_process+0x550>)
 800a574:	f008 f8d8 	bl	8012728 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d102      	bne.n	800a586 <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800a580:	23fa      	movs	r3, #250	; 0xfa
 800a582:	76bb      	strb	r3, [r7, #26]
 800a584:	e011      	b.n	800a5aa <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a58a:	699b      	ldr	r3, [r3, #24]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00a      	beq.n	800a5a6 <tcp_process+0x3b2>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a594:	699b      	ldr	r3, [r3, #24]
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	6910      	ldr	r0, [r2, #16]
 800a59a:	2200      	movs	r2, #0
 800a59c:	6879      	ldr	r1, [r7, #4]
 800a59e:	4798      	blx	r3
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	76bb      	strb	r3, [r7, #26]
 800a5a4:	e001      	b.n	800a5aa <tcp_process+0x3b6>
 800a5a6:	23f0      	movs	r3, #240	; 0xf0
 800a5a8:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800a5aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00a      	beq.n	800a5c8 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800a5b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a5b6:	f113 0f0d 	cmn.w	r3, #13
 800a5ba:	d002      	beq.n	800a5c2 <tcp_process+0x3ce>
            tcp_abort(pcb);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7fe f907 	bl	80087d0 <tcp_abort>
          }
          return ERR_ABRT;
 800a5c2:	f06f 030c 	mvn.w	r3, #12
 800a5c6:	e1b9      	b.n	800a93c <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 fa3d 	bl	800aa48 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800a5ce:	4b5e      	ldr	r3, [pc, #376]	; (800a748 <tcp_process+0x554>)
 800a5d0:	881b      	ldrh	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d005      	beq.n	800a5e2 <tcp_process+0x3ee>
          recv_acked--;
 800a5d6:	4b5c      	ldr	r3, [pc, #368]	; (800a748 <tcp_process+0x554>)
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	4b5a      	ldr	r3, [pc, #360]	; (800a748 <tcp_process+0x554>)
 800a5e0:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5e6:	005b      	lsls	r3, r3, #1
 800a5e8:	f241 121c 	movw	r2, #4380	; 0x111c
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	bf38      	it	cc
 800a5f0:	461a      	movcc	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	bf28      	it	cs
 800a5fc:	4613      	movcs	r3, r2
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800a606:	4b51      	ldr	r3, [pc, #324]	; (800a74c <tcp_process+0x558>)
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	f003 0320 	and.w	r3, r3, #32
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d034      	beq.n	800a67c <tcp_process+0x488>
          tcp_ack_now(pcb);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	7e9b      	ldrb	r3, [r3, #26]
 800a616:	f043 0302 	orr.w	r3, r3, #2
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2207      	movs	r2, #7
 800a624:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800a626:	e029      	b.n	800a67c <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a628:	4b3e      	ldr	r3, [pc, #248]	; (800a724 <tcp_process+0x530>)
 800a62a:	6818      	ldr	r0, [r3, #0]
 800a62c:	4b3e      	ldr	r3, [pc, #248]	; (800a728 <tcp_process+0x534>)
 800a62e:	881b      	ldrh	r3, [r3, #0]
 800a630:	461a      	mov	r2, r3
 800a632:	4b3e      	ldr	r3, [pc, #248]	; (800a72c <tcp_process+0x538>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a638:	4b3d      	ldr	r3, [pc, #244]	; (800a730 <tcp_process+0x53c>)
 800a63a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a63c:	885b      	ldrh	r3, [r3, #2]
 800a63e:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a640:	4a3b      	ldr	r2, [pc, #236]	; (800a730 <tcp_process+0x53c>)
 800a642:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a644:	8812      	ldrh	r2, [r2, #0]
 800a646:	b292      	uxth	r2, r2
 800a648:	9201      	str	r2, [sp, #4]
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	4b39      	ldr	r3, [pc, #228]	; (800a734 <tcp_process+0x540>)
 800a64e:	4a3a      	ldr	r2, [pc, #232]	; (800a738 <tcp_process+0x544>)
 800a650:	f001 fff0 	bl	800c634 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800a654:	e166      	b.n	800a924 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a656:	4b32      	ldr	r3, [pc, #200]	; (800a720 <tcp_process+0x52c>)
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	f003 0302 	and.w	r3, r3, #2
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f000 8160 	beq.w	800a924 <tcp_process+0x730>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	1e5a      	subs	r2, r3, #1
 800a66a:	4b30      	ldr	r3, [pc, #192]	; (800a72c <tcp_process+0x538>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	429a      	cmp	r2, r3
 800a670:	f040 8158 	bne.w	800a924 <tcp_process+0x730>
      tcp_rexmit(pcb);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f002 f893 	bl	800c7a0 <tcp_rexmit>
    break;
 800a67a:	e153      	b.n	800a924 <tcp_process+0x730>
 800a67c:	e152      	b.n	800a924 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f9e2 	bl	800aa48 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a684:	4b31      	ldr	r3, [pc, #196]	; (800a74c <tcp_process+0x558>)
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	f003 0320 	and.w	r3, r3, #32
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 814b 	beq.w	800a928 <tcp_process+0x734>
      tcp_ack_now(pcb);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	7e9b      	ldrb	r3, [r3, #26]
 800a696:	f043 0302 	orr.w	r3, r3, #2
 800a69a:	b2da      	uxtb	r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2207      	movs	r2, #7
 800a6a4:	751a      	strb	r2, [r3, #20]
    }
    break;
 800a6a6:	e13f      	b.n	800a928 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 f9cd 	bl	800aa48 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800a6ae:	4b27      	ldr	r3, [pc, #156]	; (800a74c <tcp_process+0x558>)
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	f003 0320 	and.w	r3, r3, #32
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d070      	beq.n	800a79c <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a6ba:	4b19      	ldr	r3, [pc, #100]	; (800a720 <tcp_process+0x52c>)
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	f003 0310 	and.w	r3, r3, #16
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d05f      	beq.n	800a786 <tcp_process+0x592>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6ca:	4b16      	ldr	r3, [pc, #88]	; (800a724 <tcp_process+0x530>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d159      	bne.n	800a786 <tcp_process+0x592>
          pcb->unsent == NULL) {
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d155      	bne.n	800a786 <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	7e9b      	ldrb	r3, [r3, #26]
 800a6de:	f043 0302 	orr.w	r3, r3, #2
 800a6e2:	b2da      	uxtb	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7fe fe87 	bl	80093fc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a6ee:	4b18      	ldr	r3, [pc, #96]	; (800a750 <tcp_process+0x55c>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d105      	bne.n	800a704 <tcp_process+0x510>
 800a6f8:	4b15      	ldr	r3, [pc, #84]	; (800a750 <tcp_process+0x55c>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	4a14      	ldr	r2, [pc, #80]	; (800a750 <tcp_process+0x55c>)
 800a700:	6013      	str	r3, [r2, #0]
 800a702:	e02d      	b.n	800a760 <tcp_process+0x56c>
 800a704:	4b12      	ldr	r3, [pc, #72]	; (800a750 <tcp_process+0x55c>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	617b      	str	r3, [r7, #20]
 800a70a:	e026      	b.n	800a75a <tcp_process+0x566>
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	429a      	cmp	r2, r3
 800a714:	d11e      	bne.n	800a754 <tcp_process+0x560>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	68da      	ldr	r2, [r3, #12]
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	60da      	str	r2, [r3, #12]
 800a71e:	e01f      	b.n	800a760 <tcp_process+0x56c>
 800a720:	20006fa0 	.word	0x20006fa0
 800a724:	20006f98 	.word	0x20006f98
 800a728:	20006f9e 	.word	0x20006f9e
 800a72c:	20006f94 	.word	0x20006f94
 800a730:	20006f84 	.word	0x20006f84
 800a734:	200038cc 	.word	0x200038cc
 800a738:	200038d0 	.word	0x200038d0
 800a73c:	0801711c 	.word	0x0801711c
 800a740:	08017320 	.word	0x08017320
 800a744:	08017160 	.word	0x08017160
 800a748:	20006f9c 	.word	0x20006f9c
 800a74c:	20006fa1 	.word	0x20006fa1
 800a750:	20006f68 	.word	0x20006f68
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	617b      	str	r3, [r7, #20]
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1d5      	bne.n	800a70c <tcp_process+0x518>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	60da      	str	r2, [r3, #12]
 800a766:	4b77      	ldr	r3, [pc, #476]	; (800a944 <tcp_process+0x750>)
 800a768:	2201      	movs	r2, #1
 800a76a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	220a      	movs	r2, #10
 800a770:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a772:	4b75      	ldr	r3, [pc, #468]	; (800a948 <tcp_process+0x754>)
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	60da      	str	r2, [r3, #12]
 800a77a:	4a73      	ldr	r2, [pc, #460]	; (800a948 <tcp_process+0x754>)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6013      	str	r3, [r2, #0]
 800a780:	f002 f9be 	bl	800cb00 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800a784:	e0d2      	b.n	800a92c <tcp_process+0x738>
        tcp_ack_now(pcb);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	7e9b      	ldrb	r3, [r3, #26]
 800a78a:	f043 0302 	orr.w	r3, r3, #2
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2208      	movs	r2, #8
 800a798:	751a      	strb	r2, [r3, #20]
    break;
 800a79a:	e0c7      	b.n	800a92c <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a79c:	4b6b      	ldr	r3, [pc, #428]	; (800a94c <tcp_process+0x758>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	f003 0310 	and.w	r3, r3, #16
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f000 80c1 	beq.w	800a92c <tcp_process+0x738>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a7ae:	4b68      	ldr	r3, [pc, #416]	; (800a950 <tcp_process+0x75c>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	f040 80ba 	bne.w	800a92c <tcp_process+0x738>
               pcb->unsent == NULL) {
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f040 80b5 	bne.w	800a92c <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2206      	movs	r2, #6
 800a7c6:	751a      	strb	r2, [r3, #20]
    break;
 800a7c8:	e0b0      	b.n	800a92c <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f93c 	bl	800aa48 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800a7d0:	4b60      	ldr	r3, [pc, #384]	; (800a954 <tcp_process+0x760>)
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	f003 0320 	and.w	r3, r3, #32
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 80a9 	beq.w	800a930 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	7e9b      	ldrb	r3, [r3, #26]
 800a7e2:	f043 0302 	orr.w	r3, r3, #2
 800a7e6:	b2da      	uxtb	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7fe fe05 	bl	80093fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a7f2:	4b59      	ldr	r3, [pc, #356]	; (800a958 <tcp_process+0x764>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d105      	bne.n	800a808 <tcp_process+0x614>
 800a7fc:	4b56      	ldr	r3, [pc, #344]	; (800a958 <tcp_process+0x764>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	4a55      	ldr	r2, [pc, #340]	; (800a958 <tcp_process+0x764>)
 800a804:	6013      	str	r3, [r2, #0]
 800a806:	e013      	b.n	800a830 <tcp_process+0x63c>
 800a808:	4b53      	ldr	r3, [pc, #332]	; (800a958 <tcp_process+0x764>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	613b      	str	r3, [r7, #16]
 800a80e:	e00c      	b.n	800a82a <tcp_process+0x636>
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	429a      	cmp	r2, r3
 800a818:	d104      	bne.n	800a824 <tcp_process+0x630>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	68da      	ldr	r2, [r3, #12]
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	60da      	str	r2, [r3, #12]
 800a822:	e005      	b.n	800a830 <tcp_process+0x63c>
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	613b      	str	r3, [r7, #16]
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1ef      	bne.n	800a810 <tcp_process+0x61c>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	60da      	str	r2, [r3, #12]
 800a836:	4b43      	ldr	r3, [pc, #268]	; (800a944 <tcp_process+0x750>)
 800a838:	2201      	movs	r2, #1
 800a83a:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	220a      	movs	r2, #10
 800a840:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800a842:	4b41      	ldr	r3, [pc, #260]	; (800a948 <tcp_process+0x754>)
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	60da      	str	r2, [r3, #12]
 800a84a:	4a3f      	ldr	r2, [pc, #252]	; (800a948 <tcp_process+0x754>)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6013      	str	r3, [r2, #0]
 800a850:	f002 f956 	bl	800cb00 <tcp_timer_needed>
    }
    break;
 800a854:	e06c      	b.n	800a930 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f8f6 	bl	800aa48 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a85c:	4b3b      	ldr	r3, [pc, #236]	; (800a94c <tcp_process+0x758>)
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	f003 0310 	and.w	r3, r3, #16
 800a864:	2b00      	cmp	r3, #0
 800a866:	d065      	beq.n	800a934 <tcp_process+0x740>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a86c:	4b38      	ldr	r3, [pc, #224]	; (800a950 <tcp_process+0x75c>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	429a      	cmp	r2, r3
 800a872:	d15f      	bne.n	800a934 <tcp_process+0x740>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d15b      	bne.n	800a934 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f7fe fdbd 	bl	80093fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a882:	4b35      	ldr	r3, [pc, #212]	; (800a958 <tcp_process+0x764>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d105      	bne.n	800a898 <tcp_process+0x6a4>
 800a88c:	4b32      	ldr	r3, [pc, #200]	; (800a958 <tcp_process+0x764>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	4a31      	ldr	r2, [pc, #196]	; (800a958 <tcp_process+0x764>)
 800a894:	6013      	str	r3, [r2, #0]
 800a896:	e013      	b.n	800a8c0 <tcp_process+0x6cc>
 800a898:	4b2f      	ldr	r3, [pc, #188]	; (800a958 <tcp_process+0x764>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	60fb      	str	r3, [r7, #12]
 800a89e:	e00c      	b.n	800a8ba <tcp_process+0x6c6>
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d104      	bne.n	800a8b4 <tcp_process+0x6c0>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	68da      	ldr	r2, [r3, #12]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	60da      	str	r2, [r3, #12]
 800a8b2:	e005      	b.n	800a8c0 <tcp_process+0x6cc>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	60fb      	str	r3, [r7, #12]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d1ef      	bne.n	800a8a0 <tcp_process+0x6ac>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	60da      	str	r2, [r3, #12]
 800a8c6:	4b1f      	ldr	r3, [pc, #124]	; (800a944 <tcp_process+0x750>)
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	220a      	movs	r2, #10
 800a8d0:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800a8d2:	4b1d      	ldr	r3, [pc, #116]	; (800a948 <tcp_process+0x754>)
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	60da      	str	r2, [r3, #12]
 800a8da:	4a1b      	ldr	r2, [pc, #108]	; (800a948 <tcp_process+0x754>)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6013      	str	r3, [r2, #0]
 800a8e0:	f002 f90e 	bl	800cb00 <tcp_timer_needed>
    }
    break;
 800a8e4:	e026      	b.n	800a934 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f8ae 	bl	800aa48 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a8ec:	4b17      	ldr	r3, [pc, #92]	; (800a94c <tcp_process+0x758>)
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	f003 0310 	and.w	r3, r3, #16
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d01f      	beq.n	800a938 <tcp_process+0x744>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a8fc:	4b14      	ldr	r3, [pc, #80]	; (800a950 <tcp_process+0x75c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	429a      	cmp	r2, r3
 800a902:	d119      	bne.n	800a938 <tcp_process+0x744>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d115      	bne.n	800a938 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800a90c:	4b11      	ldr	r3, [pc, #68]	; (800a954 <tcp_process+0x760>)
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	f043 0310 	orr.w	r3, r3, #16
 800a914:	b2da      	uxtb	r2, r3
 800a916:	4b0f      	ldr	r3, [pc, #60]	; (800a954 <tcp_process+0x760>)
 800a918:	701a      	strb	r2, [r3, #0]
    }
    break;
 800a91a:	e00d      	b.n	800a938 <tcp_process+0x744>
  default:
    break;
 800a91c:	bf00      	nop
 800a91e:	e00c      	b.n	800a93a <tcp_process+0x746>
    break;
 800a920:	bf00      	nop
 800a922:	e00a      	b.n	800a93a <tcp_process+0x746>
    break;
 800a924:	bf00      	nop
 800a926:	e008      	b.n	800a93a <tcp_process+0x746>
    break;
 800a928:	bf00      	nop
 800a92a:	e006      	b.n	800a93a <tcp_process+0x746>
    break;
 800a92c:	bf00      	nop
 800a92e:	e004      	b.n	800a93a <tcp_process+0x746>
    break;
 800a930:	bf00      	nop
 800a932:	e002      	b.n	800a93a <tcp_process+0x746>
    break;
 800a934:	bf00      	nop
 800a936:	e000      	b.n	800a93a <tcp_process+0x746>
    break;
 800a938:	bf00      	nop
  }
  return ERR_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3720      	adds	r7, #32
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	20006f70 	.word	0x20006f70
 800a948:	20006f6c 	.word	0x20006f6c
 800a94c:	20006fa0 	.word	0x20006fa0
 800a950:	20006f98 	.word	0x20006f98
 800a954:	20006fa1 	.word	0x20006fa1
 800a958:	20006f68 	.word	0x20006f68

0800a95c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a95c:	b590      	push	{r4, r7, lr}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	899b      	ldrh	r3, [r3, #12]
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fb ffbf 	bl	80068f2 <lwip_htons>
 800a974:	4603      	mov	r3, r0
 800a976:	f003 0301 	and.w	r3, r3, #1
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d027      	beq.n	800a9ce <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a97e:	6838      	ldr	r0, [r7, #0]
 800a980:	f7fe fb69 	bl	8009056 <tcp_segs_free>
    next = NULL;
 800a984:	2300      	movs	r3, #0
 800a986:	603b      	str	r3, [r7, #0]
 800a988:	e055      	b.n	800aa36 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	899b      	ldrh	r3, [r3, #12]
 800a990:	b29b      	uxth	r3, r3
 800a992:	4618      	mov	r0, r3
 800a994:	f7fb ffad 	bl	80068f2 <lwip_htons>
 800a998:	4603      	mov	r3, r0
 800a99a:	f003 0301 	and.w	r3, r3, #1
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00d      	beq.n	800a9be <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	899b      	ldrh	r3, [r3, #12]
 800a9a8:	b29c      	uxth	r4, r3
 800a9aa:	2001      	movs	r0, #1
 800a9ac:	f7fb ffa1 	bl	80068f2 <lwip_htons>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	4322      	orrs	r2, r4
 800a9ba:	b292      	uxth	r2, r2
 800a9bc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	f7fe fb59 	bl	8009080 <tcp_seg_free>
    while (next &&
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00e      	beq.n	800a9f2 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	891b      	ldrh	r3, [r3, #8]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	4b1a      	ldr	r3, [pc, #104]	; (800aa44 <tcp_oos_insert_segment+0xe8>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	441a      	add	r2, r3
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	6839      	ldr	r1, [r7, #0]
 800a9e8:	8909      	ldrh	r1, [r1, #8]
 800a9ea:	440b      	add	r3, r1
 800a9ec:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	dacb      	bge.n	800a98a <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d01e      	beq.n	800aa36 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	891b      	ldrh	r3, [r3, #8]
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	4b11      	ldr	r3, [pc, #68]	; (800aa44 <tcp_oos_insert_segment+0xe8>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	441a      	add	r2, r3
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	dd12      	ble.n	800aa36 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	4b0a      	ldr	r3, [pc, #40]	; (800aa44 <tcp_oos_insert_segment+0xe8>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	b29a      	uxth	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	685a      	ldr	r2, [r3, #4]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	891b      	ldrh	r3, [r3, #8]
 800aa2e:	4619      	mov	r1, r3
 800aa30:	4610      	mov	r0, r2
 800aa32:	f7fc ffbb 	bl	80079ac <pbuf_realloc>
    }
  }
  cseg->next = next;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	683a      	ldr	r2, [r7, #0]
 800aa3a:	601a      	str	r2, [r3, #0]
}
 800aa3c:	bf00      	nop
 800aa3e:	3714      	adds	r7, #20
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd90      	pop	{r4, r7, pc}
 800aa44:	20006f94 	.word	0x20006f94

0800aa48 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800aa48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa4a:	b08d      	sub	sp, #52	; 0x34
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	7d1b      	ldrb	r3, [r3, #20]
 800aa58:	2b03      	cmp	r3, #3
 800aa5a:	d806      	bhi.n	800aa6a <tcp_receive+0x22>
 800aa5c:	4b98      	ldr	r3, [pc, #608]	; (800acc0 <tcp_receive+0x278>)
 800aa5e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800aa62:	4998      	ldr	r1, [pc, #608]	; (800acc4 <tcp_receive+0x27c>)
 800aa64:	4898      	ldr	r0, [pc, #608]	; (800acc8 <tcp_receive+0x280>)
 800aa66:	f007 fe5f 	bl	8012728 <iprintf>

  if (flags & TCP_ACK) {
 800aa6a:	4b98      	ldr	r3, [pc, #608]	; (800accc <tcp_receive+0x284>)
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	f003 0310 	and.w	r3, r3, #16
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f000 82c1 	beq.w	800affa <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa7e:	461a      	mov	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa84:	4413      	add	r3, r2
 800aa86:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa8c:	4b90      	ldr	r3, [pc, #576]	; (800acd0 <tcp_receive+0x288>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	1ad3      	subs	r3, r2, r3
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	db1b      	blt.n	800aace <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa9a:	4b8d      	ldr	r3, [pc, #564]	; (800acd0 <tcp_receive+0x288>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d106      	bne.n	800aab0 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aaa6:	4b8b      	ldr	r3, [pc, #556]	; (800acd4 <tcp_receive+0x28c>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	1ad3      	subs	r3, r2, r3
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	db0e      	blt.n	800aace <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aab4:	4b87      	ldr	r3, [pc, #540]	; (800acd4 <tcp_receive+0x28c>)
 800aab6:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d141      	bne.n	800ab40 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800aabc:	4b86      	ldr	r3, [pc, #536]	; (800acd8 <tcp_receive+0x290>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	89db      	ldrh	r3, [r3, #14]
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d938      	bls.n	800ab40 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800aace:	4b82      	ldr	r3, [pc, #520]	; (800acd8 <tcp_receive+0x290>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	89db      	ldrh	r3, [r3, #14]
 800aad4:	b29a      	uxth	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d205      	bcs.n	800aaf8 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800aaf8:	4b75      	ldr	r3, [pc, #468]	; (800acd0 <tcp_receive+0x288>)
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800ab00:	4b74      	ldr	r3, [pc, #464]	; (800acd4 <tcp_receive+0x28c>)
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10d      	bne.n	800ab2e <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d111      	bne.n	800ab40 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800ab2c:	e008      	b.n	800ab40 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d003      	beq.n	800ab40 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ab40:	4b64      	ldr	r3, [pc, #400]	; (800acd4 <tcp_receive+0x28c>)
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab48:	1ad3      	subs	r3, r2, r3
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	dc53      	bgt.n	800abf6 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800ab4e:	4b63      	ldr	r3, [pc, #396]	; (800acdc <tcp_receive+0x294>)
 800ab50:	881b      	ldrh	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d146      	bne.n	800abe4 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800ab60:	4413      	add	r3, r2
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d13d      	bne.n	800abe4 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	db38      	blt.n	800abe4 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab76:	4b57      	ldr	r3, [pc, #348]	; (800acd4 <tcp_receive+0x28c>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d132      	bne.n	800abe4 <tcp_receive+0x19c>
              found_dupack = 1;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ab88:	2bff      	cmp	r3, #255	; 0xff
 800ab8a:	d007      	beq.n	800ab9c <tcp_receive+0x154>
                ++pcb->dupacks;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ab92:	3301      	adds	r3, #1
 800ab94:	b2da      	uxtb	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aba2:	2b03      	cmp	r3, #3
 800aba4:	d916      	bls.n	800abd4 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abb0:	4413      	add	r3, r2
 800abb2:	b29a      	uxth	r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800abba:	429a      	cmp	r2, r3
 800abbc:	d912      	bls.n	800abe4 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abc8:	4413      	add	r3, r2
 800abca:	b29a      	uxth	r2, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800abd2:	e007      	b.n	800abe4 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800abda:	2b03      	cmp	r3, #3
 800abdc:	d102      	bne.n	800abe4 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f001 fe2e 	bl	800c840 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f040 816a 	bne.w	800aec0 <tcp_receive+0x478>
        pcb->dupacks = 0;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800abf4:	e164      	b.n	800aec0 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800abf6:	4b37      	ldr	r3, [pc, #220]	; (800acd4 <tcp_receive+0x28c>)
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abfe:	1ad3      	subs	r3, r2, r3
 800ac00:	3b01      	subs	r3, #1
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f2c0 8108 	blt.w	800ae18 <tcp_receive+0x3d0>
 800ac08:	4b32      	ldr	r3, [pc, #200]	; (800acd4 <tcp_receive+0x28c>)
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f300 8100 	bgt.w	800ae18 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	7e9b      	ldrb	r3, [r3, #26]
 800ac1c:	f003 0304 	and.w	r3, r3, #4
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00c      	beq.n	800ac3e <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	7e9b      	ldrb	r3, [r3, #26]
 800ac28:	f023 0304 	bic.w	r3, r3, #4
 800ac2c:	b2da      	uxtb	r2, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ac4c:	10db      	asrs	r3, r3, #3
 800ac4e:	b21b      	sxth	r3, r3
 800ac50:	b29a      	uxth	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	4413      	add	r3, r2
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	b21a      	sxth	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ac6e:	4b19      	ldr	r3, [pc, #100]	; (800acd4 <tcp_receive+0x28c>)
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	7d1b      	ldrb	r3, [r3, #20]
 800ac7a:	2b03      	cmp	r3, #3
 800ac7c:	f240 8095 	bls.w	800adaa <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d227      	bcs.n	800ace0 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac9a:	4413      	add	r3, r2
 800ac9c:	b29a      	uxth	r2, r3
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aca4:	429a      	cmp	r2, r3
 800aca6:	f240 8080 	bls.w	800adaa <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800acb4:	4413      	add	r3, r2
 800acb6:	b29a      	uxth	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800acbe:	e074      	b.n	800adaa <tcp_receive+0x362>
 800acc0:	0801711c 	.word	0x0801711c
 800acc4:	08017340 	.word	0x08017340
 800acc8:	08017160 	.word	0x08017160
 800accc:	20006fa0 	.word	0x20006fa0
 800acd0:	20006f94 	.word	0x20006f94
 800acd4:	20006f98 	.word	0x20006f98
 800acd8:	20006f84 	.word	0x20006f84
 800acdc:	20006f9e 	.word	0x20006f9e
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800acea:	4619      	mov	r1, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800acf0:	fb01 f303 	mul.w	r3, r1, r3
 800acf4:	6879      	ldr	r1, [r7, #4]
 800acf6:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800acfa:	fb93 f3f1 	sdiv	r3, r3, r1
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	4413      	add	r3, r2
 800ad02:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ad0a:	8a7a      	ldrh	r2, [r7, #18]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d94c      	bls.n	800adaa <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	8a7a      	ldrh	r2, [r7, #18]
 800ad14:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800ad18:	e047      	b.n	800adaa <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800ad30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7fd f841 	bl	8007dbc <pbuf_clen>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	429c      	cmp	r4, r3
 800ad3e:	d206      	bcs.n	800ad4e <tcp_receive+0x306>
 800ad40:	4b70      	ldr	r3, [pc, #448]	; (800af04 <tcp_receive+0x4bc>)
 800ad42:	f240 429e 	movw	r2, #1182	; 0x49e
 800ad46:	4970      	ldr	r1, [pc, #448]	; (800af08 <tcp_receive+0x4c0>)
 800ad48:	4870      	ldr	r0, [pc, #448]	; (800af0c <tcp_receive+0x4c4>)
 800ad4a:	f007 fced 	bl	8012728 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800ad4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fd f832 	bl	8007dbc <pbuf_clen>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ad62:	1a9b      	subs	r3, r3, r2
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800ad6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6e:	891a      	ldrh	r2, [r3, #8]
 800ad70:	4b67      	ldr	r3, [pc, #412]	; (800af10 <tcp_receive+0x4c8>)
 800ad72:	881b      	ldrh	r3, [r3, #0]
 800ad74:	4413      	add	r3, r2
 800ad76:	b29a      	uxth	r2, r3
 800ad78:	4b65      	ldr	r3, [pc, #404]	; (800af10 <tcp_receive+0x4c8>)
 800ad7a:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800ad7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad7e:	f7fe f97f 	bl	8009080 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00e      	beq.n	800adaa <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10a      	bne.n	800adaa <tcp_receive+0x362>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d106      	bne.n	800adaa <tcp_receive+0x362>
 800ad9c:	4b59      	ldr	r3, [pc, #356]	; (800af04 <tcp_receive+0x4bc>)
 800ad9e:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800ada2:	495c      	ldr	r1, [pc, #368]	; (800af14 <tcp_receive+0x4cc>)
 800ada4:	4859      	ldr	r0, [pc, #356]	; (800af0c <tcp_receive+0x4c4>)
 800ada6:	f007 fcbf 	bl	8012728 <iprintf>
      while (pcb->unacked != NULL &&
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d022      	beq.n	800adf8 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fb fda6 	bl	800690c <lwip_htonl>
 800adc0:	4604      	mov	r4, r0
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adc6:	891b      	ldrh	r3, [r3, #8]
 800adc8:	461d      	mov	r5, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	899b      	ldrh	r3, [r3, #12]
 800add2:	b29b      	uxth	r3, r3
 800add4:	4618      	mov	r0, r3
 800add6:	f7fb fd8c 	bl	80068f2 <lwip_htons>
 800adda:	4603      	mov	r3, r0
 800addc:	f003 0303 	and.w	r3, r3, #3
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d001      	beq.n	800ade8 <tcp_receive+0x3a0>
 800ade4:	2301      	movs	r3, #1
 800ade6:	e000      	b.n	800adea <tcp_receive+0x3a2>
 800ade8:	2300      	movs	r3, #0
 800adea:	442b      	add	r3, r5
 800adec:	18e2      	adds	r2, r4, r3
 800adee:	4b4a      	ldr	r3, [pc, #296]	; (800af18 <tcp_receive+0x4d0>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	dd90      	ble.n	800ad1a <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d104      	bne.n	800ae0a <tcp_receive+0x3c2>
        pcb->rtime = -1;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae06:	861a      	strh	r2, [r3, #48]	; 0x30
 800ae08:	e002      	b.n	800ae10 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	76da      	strb	r2, [r3, #27]
 800ae16:	e002      	b.n	800ae1e <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f001 f921 	bl	800c060 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800ae1e:	e04f      	b.n	800aec0 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d103      	bne.n	800ae40 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800ae46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fc ffb6 	bl	8007dbc <pbuf_clen>
 800ae50:	4603      	mov	r3, r0
 800ae52:	429c      	cmp	r4, r3
 800ae54:	d206      	bcs.n	800ae64 <tcp_receive+0x41c>
 800ae56:	4b2b      	ldr	r3, [pc, #172]	; (800af04 <tcp_receive+0x4bc>)
 800ae58:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ae5c:	492a      	ldr	r1, [pc, #168]	; (800af08 <tcp_receive+0x4c0>)
 800ae5e:	482b      	ldr	r0, [pc, #172]	; (800af0c <tcp_receive+0x4c4>)
 800ae60:	f007 fc62 	bl	8012728 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800ae64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7fc ffa7 	bl	8007dbc <pbuf_clen>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	461a      	mov	r2, r3
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ae78:	1a9b      	subs	r3, r3, r2
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800ae82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae84:	891a      	ldrh	r2, [r3, #8]
 800ae86:	4b22      	ldr	r3, [pc, #136]	; (800af10 <tcp_receive+0x4c8>)
 800ae88:	881b      	ldrh	r3, [r3, #0]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	b29a      	uxth	r2, r3
 800ae8e:	4b20      	ldr	r3, [pc, #128]	; (800af10 <tcp_receive+0x4c8>)
 800ae90:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800ae92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae94:	f7fe f8f4 	bl	8009080 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d00e      	beq.n	800aec0 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d10a      	bne.n	800aec0 <tcp_receive+0x478>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d106      	bne.n	800aec0 <tcp_receive+0x478>
 800aeb2:	4b14      	ldr	r3, [pc, #80]	; (800af04 <tcp_receive+0x4bc>)
 800aeb4:	f240 42dc 	movw	r2, #1244	; 0x4dc
 800aeb8:	4916      	ldr	r1, [pc, #88]	; (800af14 <tcp_receive+0x4cc>)
 800aeba:	4814      	ldr	r0, [pc, #80]	; (800af0c <tcp_receive+0x4c4>)
 800aebc:	f007 fc34 	bl	8012728 <iprintf>
    while (pcb->unsent != NULL &&
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d037      	beq.n	800af38 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800aec8:	4b13      	ldr	r3, [pc, #76]	; (800af18 <tcp_receive+0x4d0>)
 800aeca:	681c      	ldr	r4, [r3, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7fb fd19 	bl	800690c <lwip_htonl>
 800aeda:	4605      	mov	r5, r0
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aee0:	891b      	ldrh	r3, [r3, #8]
 800aee2:	461e      	mov	r6, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	899b      	ldrh	r3, [r3, #12]
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fb fcff 	bl	80068f2 <lwip_htons>
 800aef4:	4603      	mov	r3, r0
 800aef6:	f003 0303 	and.w	r3, r3, #3
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d00e      	beq.n	800af1c <tcp_receive+0x4d4>
 800aefe:	2301      	movs	r3, #1
 800af00:	e00d      	b.n	800af1e <tcp_receive+0x4d6>
 800af02:	bf00      	nop
 800af04:	0801711c 	.word	0x0801711c
 800af08:	0801735c 	.word	0x0801735c
 800af0c:	08017160 	.word	0x08017160
 800af10:	20006f9c 	.word	0x20006f9c
 800af14:	08017384 	.word	0x08017384
 800af18:	20006f98 	.word	0x20006f98
 800af1c:	2300      	movs	r3, #0
 800af1e:	4433      	add	r3, r6
 800af20:	442b      	add	r3, r5
 800af22:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800af24:	2b00      	cmp	r3, #0
 800af26:	db07      	blt.n	800af38 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800af28:	4b8d      	ldr	r3, [pc, #564]	; (800b160 <tcp_receive+0x718>)
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af30:	1ad3      	subs	r3, r2, r3
 800af32:	2b00      	cmp	r3, #0
 800af34:	f77f af74 	ble.w	800ae20 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800af3e:	4b89      	ldr	r3, [pc, #548]	; (800b164 <tcp_receive+0x71c>)
 800af40:	881b      	ldrh	r3, [r3, #0]
 800af42:	4413      	add	r3, r2
 800af44:	b29a      	uxth	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af50:	2b00      	cmp	r3, #0
 800af52:	d052      	beq.n	800affa <tcp_receive+0x5b2>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af58:	4b81      	ldr	r3, [pc, #516]	; (800b160 <tcp_receive+0x718>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	1ad3      	subs	r3, r2, r3
 800af5e:	2b00      	cmp	r3, #0
 800af60:	da4b      	bge.n	800affa <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800af62:	4b81      	ldr	r3, [pc, #516]	; (800b168 <tcp_receive+0x720>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	b29a      	uxth	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	b29b      	uxth	r3, r3
 800af72:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800af74:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800af7c:	10db      	asrs	r3, r3, #3
 800af7e:	b21b      	sxth	r3, r3
 800af80:	b29b      	uxth	r3, r3
 800af82:	1ad3      	subs	r3, r2, r3
 800af84:	b29b      	uxth	r3, r3
 800af86:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800af8e:	b29a      	uxth	r2, r3
 800af90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af92:	4413      	add	r3, r2
 800af94:	b29b      	uxth	r3, r3
 800af96:	b21a      	sxth	r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800af9c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	da03      	bge.n	800afac <tcp_receive+0x564>
        m = -m;
 800afa4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800afa6:	425b      	negs	r3, r3
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800afac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800afb4:	109b      	asrs	r3, r3, #2
 800afb6:	b21b      	sxth	r3, r3
 800afb8:	b29b      	uxth	r3, r3
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800afca:	4413      	add	r3, r2
 800afcc:	b29b      	uxth	r3, r3
 800afce:	b21a      	sxth	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800afda:	10db      	asrs	r3, r3, #3
 800afdc:	b21b      	sxth	r3, r3
 800afde:	b29a      	uxth	r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	4413      	add	r3, r2
 800afea:	b29b      	uxth	r3, r3
 800afec:	b21a      	sxth	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800affa:	4b5c      	ldr	r3, [pc, #368]	; (800b16c <tcp_receive+0x724>)
 800affc:	881b      	ldrh	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	f000 84f1 	beq.w	800b9e6 <tcp_receive+0xf9e>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	7d1b      	ldrb	r3, [r3, #20]
 800b008:	2b06      	cmp	r3, #6
 800b00a:	f200 84ec 	bhi.w	800b9e6 <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b012:	4b57      	ldr	r3, [pc, #348]	; (800b170 <tcp_receive+0x728>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	1ad3      	subs	r3, r2, r3
 800b018:	3b01      	subs	r3, #1
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f2c0 80b8 	blt.w	800b190 <tcp_receive+0x748>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b024:	4b51      	ldr	r3, [pc, #324]	; (800b16c <tcp_receive+0x724>)
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	4619      	mov	r1, r3
 800b02a:	4b51      	ldr	r3, [pc, #324]	; (800b170 <tcp_receive+0x728>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	440b      	add	r3, r1
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	3301      	adds	r3, #1
 800b034:	2b00      	cmp	r3, #0
 800b036:	f300 80ab 	bgt.w	800b190 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b03a:	4b4e      	ldr	r3, [pc, #312]	; (800b174 <tcp_receive+0x72c>)
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b044:	4b4a      	ldr	r3, [pc, #296]	; (800b170 <tcp_receive+0x728>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b04c:	4b49      	ldr	r3, [pc, #292]	; (800b174 <tcp_receive+0x72c>)
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d106      	bne.n	800b062 <tcp_receive+0x61a>
 800b054:	4b48      	ldr	r3, [pc, #288]	; (800b178 <tcp_receive+0x730>)
 800b056:	f240 523c 	movw	r2, #1340	; 0x53c
 800b05a:	4948      	ldr	r1, [pc, #288]	; (800b17c <tcp_receive+0x734>)
 800b05c:	4848      	ldr	r0, [pc, #288]	; (800b180 <tcp_receive+0x738>)
 800b05e:	f007 fb63 	bl	8012728 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800b062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b064:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b068:	4293      	cmp	r3, r2
 800b06a:	dd06      	ble.n	800b07a <tcp_receive+0x632>
 800b06c:	4b42      	ldr	r3, [pc, #264]	; (800b178 <tcp_receive+0x730>)
 800b06e:	f240 523d 	movw	r2, #1341	; 0x53d
 800b072:	4944      	ldr	r1, [pc, #272]	; (800b184 <tcp_receive+0x73c>)
 800b074:	4842      	ldr	r0, [pc, #264]	; (800b180 <tcp_receive+0x738>)
 800b076:	f007 fb57 	bl	8012728 <iprintf>
      if (inseg.p->len < off) {
 800b07a:	4b3e      	ldr	r3, [pc, #248]	; (800b174 <tcp_receive+0x72c>)
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	895b      	ldrh	r3, [r3, #10]
 800b080:	461a      	mov	r2, r3
 800b082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b084:	4293      	cmp	r3, r2
 800b086:	dd3e      	ble.n	800b106 <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b088:	4b3a      	ldr	r3, [pc, #232]	; (800b174 <tcp_receive+0x72c>)
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	891b      	ldrh	r3, [r3, #8]
 800b08e:	461a      	mov	r2, r3
 800b090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b092:	4293      	cmp	r3, r2
 800b094:	dd06      	ble.n	800b0a4 <tcp_receive+0x65c>
 800b096:	4b38      	ldr	r3, [pc, #224]	; (800b178 <tcp_receive+0x730>)
 800b098:	f240 523f 	movw	r2, #1343	; 0x53f
 800b09c:	493a      	ldr	r1, [pc, #232]	; (800b188 <tcp_receive+0x740>)
 800b09e:	4838      	ldr	r0, [pc, #224]	; (800b180 <tcp_receive+0x738>)
 800b0a0:	f007 fb42 	bl	8012728 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b0a4:	4b33      	ldr	r3, [pc, #204]	; (800b174 <tcp_receive+0x72c>)
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	891a      	ldrh	r2, [r3, #8]
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800b0b2:	e00e      	b.n	800b0d2 <tcp_receive+0x68a>
          off -= p->len;
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	895b      	ldrh	r3, [r3, #10]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	1a9b      	subs	r3, r3, r2
 800b0be:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	8a3a      	ldrh	r2, [r7, #16]
 800b0c4:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	895b      	ldrh	r3, [r3, #10]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	dcea      	bgt.n	800b0b4 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800b0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	425b      	negs	r3, r3
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	b21b      	sxth	r3, r3
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	69b8      	ldr	r0, [r7, #24]
 800b0ec:	f7fc fdae 	bl	8007c4c <pbuf_header>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d01c      	beq.n	800b130 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800b0f6:	4b20      	ldr	r3, [pc, #128]	; (800b178 <tcp_receive+0x730>)
 800b0f8:	f240 524c 	movw	r2, #1356	; 0x54c
 800b0fc:	4923      	ldr	r1, [pc, #140]	; (800b18c <tcp_receive+0x744>)
 800b0fe:	4820      	ldr	r0, [pc, #128]	; (800b180 <tcp_receive+0x738>)
 800b100:	f007 fb12 	bl	8012728 <iprintf>
 800b104:	e014      	b.n	800b130 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800b106:	4b1b      	ldr	r3, [pc, #108]	; (800b174 <tcp_receive+0x72c>)
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b10c:	b292      	uxth	r2, r2
 800b10e:	4252      	negs	r2, r2
 800b110:	b292      	uxth	r2, r2
 800b112:	b212      	sxth	r2, r2
 800b114:	4611      	mov	r1, r2
 800b116:	4618      	mov	r0, r3
 800b118:	f7fc fd98 	bl	8007c4c <pbuf_header>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d006      	beq.n	800b130 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800b122:	4b15      	ldr	r3, [pc, #84]	; (800b178 <tcp_receive+0x730>)
 800b124:	f240 5251 	movw	r2, #1361	; 0x551
 800b128:	4918      	ldr	r1, [pc, #96]	; (800b18c <tcp_receive+0x744>)
 800b12a:	4815      	ldr	r0, [pc, #84]	; (800b180 <tcp_receive+0x738>)
 800b12c:	f007 fafc 	bl	8012728 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800b130:	4b10      	ldr	r3, [pc, #64]	; (800b174 <tcp_receive+0x72c>)
 800b132:	891a      	ldrh	r2, [r3, #8]
 800b134:	4b0e      	ldr	r3, [pc, #56]	; (800b170 <tcp_receive+0x728>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	b299      	uxth	r1, r3
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13e:	b29b      	uxth	r3, r3
 800b140:	1acb      	subs	r3, r1, r3
 800b142:	b29b      	uxth	r3, r3
 800b144:	4413      	add	r3, r2
 800b146:	b29a      	uxth	r2, r3
 800b148:	4b0a      	ldr	r3, [pc, #40]	; (800b174 <tcp_receive+0x72c>)
 800b14a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b150:	4a07      	ldr	r2, [pc, #28]	; (800b170 <tcp_receive+0x728>)
 800b152:	6013      	str	r3, [r2, #0]
 800b154:	4b07      	ldr	r3, [pc, #28]	; (800b174 <tcp_receive+0x72c>)
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	4a05      	ldr	r2, [pc, #20]	; (800b170 <tcp_receive+0x728>)
 800b15a:	6812      	ldr	r2, [r2, #0]
 800b15c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b15e:	e025      	b.n	800b1ac <tcp_receive+0x764>
 800b160:	20006f98 	.word	0x20006f98
 800b164:	20006f9c 	.word	0x20006f9c
 800b168:	20006f5c 	.word	0x20006f5c
 800b16c:	20006f9e 	.word	0x20006f9e
 800b170:	20006f94 	.word	0x20006f94
 800b174:	20006f74 	.word	0x20006f74
 800b178:	0801711c 	.word	0x0801711c
 800b17c:	080173a4 	.word	0x080173a4
 800b180:	08017160 	.word	0x08017160
 800b184:	080173b4 	.word	0x080173b4
 800b188:	080173c4 	.word	0x080173c4
 800b18c:	080173d4 	.word	0x080173d4
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b190:	4b87      	ldr	r3, [pc, #540]	; (800b3b0 <tcp_receive+0x968>)
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b198:	1ad3      	subs	r3, r2, r3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	da06      	bge.n	800b1ac <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	7e9b      	ldrb	r3, [r3, #26]
 800b1a2:	f043 0302 	orr.w	r3, r3, #2
 800b1a6:	b2da      	uxtb	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b1ac:	4b80      	ldr	r3, [pc, #512]	; (800b3b0 <tcp_receive+0x968>)
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	f2c0 8410 	blt.w	800b9dc <tcp_receive+0xf94>
 800b1bc:	4b7c      	ldr	r3, [pc, #496]	; (800b3b0 <tcp_receive+0x968>)
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c4:	6879      	ldr	r1, [r7, #4]
 800b1c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b1c8:	440b      	add	r3, r1
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f300 8404 	bgt.w	800b9dc <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1d8:	4b75      	ldr	r3, [pc, #468]	; (800b3b0 <tcp_receive+0x968>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	f040 8287 	bne.w	800b6f0 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b1e2:	4b74      	ldr	r3, [pc, #464]	; (800b3b4 <tcp_receive+0x96c>)
 800b1e4:	891c      	ldrh	r4, [r3, #8]
 800b1e6:	4b73      	ldr	r3, [pc, #460]	; (800b3b4 <tcp_receive+0x96c>)
 800b1e8:	68db      	ldr	r3, [r3, #12]
 800b1ea:	899b      	ldrh	r3, [r3, #12]
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fb fb7f 	bl	80068f2 <lwip_htons>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	f003 0303 	and.w	r3, r3, #3
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d001      	beq.n	800b202 <tcp_receive+0x7ba>
 800b1fe:	2301      	movs	r3, #1
 800b200:	e000      	b.n	800b204 <tcp_receive+0x7bc>
 800b202:	2300      	movs	r3, #0
 800b204:	4423      	add	r3, r4
 800b206:	b29a      	uxth	r2, r3
 800b208:	4b6b      	ldr	r3, [pc, #428]	; (800b3b8 <tcp_receive+0x970>)
 800b20a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b210:	4b69      	ldr	r3, [pc, #420]	; (800b3b8 <tcp_receive+0x970>)
 800b212:	881b      	ldrh	r3, [r3, #0]
 800b214:	429a      	cmp	r2, r3
 800b216:	d26e      	bcs.n	800b2f6 <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b218:	4b66      	ldr	r3, [pc, #408]	; (800b3b4 <tcp_receive+0x96c>)
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	899b      	ldrh	r3, [r3, #12]
 800b21e:	b29b      	uxth	r3, r3
 800b220:	4618      	mov	r0, r3
 800b222:	f7fb fb66 	bl	80068f2 <lwip_htons>
 800b226:	4603      	mov	r3, r0
 800b228:	f003 0301 	and.w	r3, r3, #1
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d01b      	beq.n	800b268 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b230:	4b60      	ldr	r3, [pc, #384]	; (800b3b4 <tcp_receive+0x96c>)
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	899b      	ldrh	r3, [r3, #12]
 800b236:	b29b      	uxth	r3, r3
 800b238:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b23c:	b29c      	uxth	r4, r3
 800b23e:	4b5d      	ldr	r3, [pc, #372]	; (800b3b4 <tcp_receive+0x96c>)
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	899b      	ldrh	r3, [r3, #12]
 800b244:	b29b      	uxth	r3, r3
 800b246:	4618      	mov	r0, r3
 800b248:	f7fb fb53 	bl	80068f2 <lwip_htons>
 800b24c:	4603      	mov	r3, r0
 800b24e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b252:	b29b      	uxth	r3, r3
 800b254:	4618      	mov	r0, r3
 800b256:	f7fb fb4c 	bl	80068f2 <lwip_htons>
 800b25a:	4603      	mov	r3, r0
 800b25c:	461a      	mov	r2, r3
 800b25e:	4b55      	ldr	r3, [pc, #340]	; (800b3b4 <tcp_receive+0x96c>)
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	4322      	orrs	r2, r4
 800b264:	b292      	uxth	r2, r2
 800b266:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b26c:	4b51      	ldr	r3, [pc, #324]	; (800b3b4 <tcp_receive+0x96c>)
 800b26e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b270:	4b50      	ldr	r3, [pc, #320]	; (800b3b4 <tcp_receive+0x96c>)
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	899b      	ldrh	r3, [r3, #12]
 800b276:	b29b      	uxth	r3, r3
 800b278:	4618      	mov	r0, r3
 800b27a:	f7fb fb3a 	bl	80068f2 <lwip_htons>
 800b27e:	4603      	mov	r3, r0
 800b280:	f003 0302 	and.w	r3, r3, #2
 800b284:	2b00      	cmp	r3, #0
 800b286:	d005      	beq.n	800b294 <tcp_receive+0x84c>
            inseg.len -= 1;
 800b288:	4b4a      	ldr	r3, [pc, #296]	; (800b3b4 <tcp_receive+0x96c>)
 800b28a:	891b      	ldrh	r3, [r3, #8]
 800b28c:	3b01      	subs	r3, #1
 800b28e:	b29a      	uxth	r2, r3
 800b290:	4b48      	ldr	r3, [pc, #288]	; (800b3b4 <tcp_receive+0x96c>)
 800b292:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b294:	4b47      	ldr	r3, [pc, #284]	; (800b3b4 <tcp_receive+0x96c>)
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	4a46      	ldr	r2, [pc, #280]	; (800b3b4 <tcp_receive+0x96c>)
 800b29a:	8912      	ldrh	r2, [r2, #8]
 800b29c:	4611      	mov	r1, r2
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7fc fb84 	bl	80079ac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b2a4:	4b43      	ldr	r3, [pc, #268]	; (800b3b4 <tcp_receive+0x96c>)
 800b2a6:	891c      	ldrh	r4, [r3, #8]
 800b2a8:	4b42      	ldr	r3, [pc, #264]	; (800b3b4 <tcp_receive+0x96c>)
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	899b      	ldrh	r3, [r3, #12]
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7fb fb1e 	bl	80068f2 <lwip_htons>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	f003 0303 	and.w	r3, r3, #3
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d001      	beq.n	800b2c4 <tcp_receive+0x87c>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e000      	b.n	800b2c6 <tcp_receive+0x87e>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	4423      	add	r3, r4
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	4b3b      	ldr	r3, [pc, #236]	; (800b3b8 <tcp_receive+0x970>)
 800b2cc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b2ce:	4b3a      	ldr	r3, [pc, #232]	; (800b3b8 <tcp_receive+0x970>)
 800b2d0:	881b      	ldrh	r3, [r3, #0]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	4b36      	ldr	r3, [pc, #216]	; (800b3b0 <tcp_receive+0x968>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	441a      	add	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2de:	6879      	ldr	r1, [r7, #4]
 800b2e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b2e2:	440b      	add	r3, r1
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d006      	beq.n	800b2f6 <tcp_receive+0x8ae>
 800b2e8:	4b34      	ldr	r3, [pc, #208]	; (800b3bc <tcp_receive+0x974>)
 800b2ea:	f240 527e 	movw	r2, #1406	; 0x57e
 800b2ee:	4934      	ldr	r1, [pc, #208]	; (800b3c0 <tcp_receive+0x978>)
 800b2f0:	4834      	ldr	r0, [pc, #208]	; (800b3c4 <tcp_receive+0x97c>)
 800b2f2:	f007 fa19 	bl	8012728 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f000 80e1 	beq.w	800b4c2 <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b300:	4b2c      	ldr	r3, [pc, #176]	; (800b3b4 <tcp_receive+0x96c>)
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	899b      	ldrh	r3, [r3, #12]
 800b306:	b29b      	uxth	r3, r3
 800b308:	4618      	mov	r0, r3
 800b30a:	f7fb faf2 	bl	80068f2 <lwip_htons>
 800b30e:	4603      	mov	r3, r0
 800b310:	f003 0301 	and.w	r3, r3, #1
 800b314:	2b00      	cmp	r3, #0
 800b316:	d010      	beq.n	800b33a <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b318:	e00a      	b.n	800b330 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b31e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800b32a:	68b8      	ldr	r0, [r7, #8]
 800b32c:	f7fd fea8 	bl	8009080 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b334:	2b00      	cmp	r3, #0
 800b336:	d1f0      	bne.n	800b31a <tcp_receive+0x8d2>
 800b338:	e0c3      	b.n	800b4c2 <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b33e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b340:	e04f      	b.n	800b3e2 <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	899b      	ldrh	r3, [r3, #12]
 800b348:	b29b      	uxth	r3, r3
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fb fad1 	bl	80068f2 <lwip_htons>
 800b350:	4603      	mov	r3, r0
 800b352:	f003 0301 	and.w	r3, r3, #1
 800b356:	2b00      	cmp	r3, #0
 800b358:	d03b      	beq.n	800b3d2 <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b35a:	4b16      	ldr	r3, [pc, #88]	; (800b3b4 <tcp_receive+0x96c>)
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	899b      	ldrh	r3, [r3, #12]
 800b360:	b29b      	uxth	r3, r3
 800b362:	4618      	mov	r0, r3
 800b364:	f7fb fac5 	bl	80068f2 <lwip_htons>
 800b368:	4603      	mov	r3, r0
 800b36a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d12f      	bne.n	800b3d2 <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b372:	4b10      	ldr	r3, [pc, #64]	; (800b3b4 <tcp_receive+0x96c>)
 800b374:	68db      	ldr	r3, [r3, #12]
 800b376:	899b      	ldrh	r3, [r3, #12]
 800b378:	b29c      	uxth	r4, r3
 800b37a:	2001      	movs	r0, #1
 800b37c:	f7fb fab9 	bl	80068f2 <lwip_htons>
 800b380:	4603      	mov	r3, r0
 800b382:	461a      	mov	r2, r3
 800b384:	4b0b      	ldr	r3, [pc, #44]	; (800b3b4 <tcp_receive+0x96c>)
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	4322      	orrs	r2, r4
 800b38a:	b292      	uxth	r2, r2
 800b38c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b38e:	4b09      	ldr	r3, [pc, #36]	; (800b3b4 <tcp_receive+0x96c>)
 800b390:	891c      	ldrh	r4, [r3, #8]
 800b392:	4b08      	ldr	r3, [pc, #32]	; (800b3b4 <tcp_receive+0x96c>)
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	899b      	ldrh	r3, [r3, #12]
 800b398:	b29b      	uxth	r3, r3
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fb faa9 	bl	80068f2 <lwip_htons>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	f003 0303 	and.w	r3, r3, #3
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00e      	beq.n	800b3c8 <tcp_receive+0x980>
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e00d      	b.n	800b3ca <tcp_receive+0x982>
 800b3ae:	bf00      	nop
 800b3b0:	20006f94 	.word	0x20006f94
 800b3b4:	20006f74 	.word	0x20006f74
 800b3b8:	20006f9e 	.word	0x20006f9e
 800b3bc:	0801711c 	.word	0x0801711c
 800b3c0:	080173e8 	.word	0x080173e8
 800b3c4:	08017160 	.word	0x08017160
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	4423      	add	r3, r4
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	4b95      	ldr	r3, [pc, #596]	; (800b624 <tcp_receive+0xbdc>)
 800b3d0:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800b3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d4:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800b3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800b3dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3de:	f7fd fe4f 	bl	8009080 <tcp_seg_free>
            while (next &&
 800b3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00e      	beq.n	800b406 <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b3e8:	4b8e      	ldr	r3, [pc, #568]	; (800b624 <tcp_receive+0xbdc>)
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	4b8e      	ldr	r3, [pc, #568]	; (800b628 <tcp_receive+0xbe0>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	441a      	add	r2, r3
 800b3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3fc:	8909      	ldrh	r1, [r1, #8]
 800b3fe:	440b      	add	r3, r1
 800b400:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b402:	2b00      	cmp	r3, #0
 800b404:	da9d      	bge.n	800b342 <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d057      	beq.n	800b4bc <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 800b40c:	4b85      	ldr	r3, [pc, #532]	; (800b624 <tcp_receive+0xbdc>)
 800b40e:	881b      	ldrh	r3, [r3, #0]
 800b410:	461a      	mov	r2, r3
 800b412:	4b85      	ldr	r3, [pc, #532]	; (800b628 <tcp_receive+0xbe0>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	441a      	add	r2, r3
 800b418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b420:	2b00      	cmp	r3, #0
 800b422:	dd4b      	ble.n	800b4bc <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	4b7e      	ldr	r3, [pc, #504]	; (800b628 <tcp_receive+0xbe0>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	b29b      	uxth	r3, r3
 800b432:	1ad3      	subs	r3, r2, r3
 800b434:	b29a      	uxth	r2, r3
 800b436:	4b7d      	ldr	r3, [pc, #500]	; (800b62c <tcp_receive+0xbe4>)
 800b438:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b43a:	4b7c      	ldr	r3, [pc, #496]	; (800b62c <tcp_receive+0xbe4>)
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	899b      	ldrh	r3, [r3, #12]
 800b440:	b29b      	uxth	r3, r3
 800b442:	4618      	mov	r0, r3
 800b444:	f7fb fa55 	bl	80068f2 <lwip_htons>
 800b448:	4603      	mov	r3, r0
 800b44a:	f003 0302 	and.w	r3, r3, #2
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d005      	beq.n	800b45e <tcp_receive+0xa16>
                inseg.len -= 1;
 800b452:	4b76      	ldr	r3, [pc, #472]	; (800b62c <tcp_receive+0xbe4>)
 800b454:	891b      	ldrh	r3, [r3, #8]
 800b456:	3b01      	subs	r3, #1
 800b458:	b29a      	uxth	r2, r3
 800b45a:	4b74      	ldr	r3, [pc, #464]	; (800b62c <tcp_receive+0xbe4>)
 800b45c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b45e:	4b73      	ldr	r3, [pc, #460]	; (800b62c <tcp_receive+0xbe4>)
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	4a72      	ldr	r2, [pc, #456]	; (800b62c <tcp_receive+0xbe4>)
 800b464:	8912      	ldrh	r2, [r2, #8]
 800b466:	4611      	mov	r1, r2
 800b468:	4618      	mov	r0, r3
 800b46a:	f7fc fa9f 	bl	80079ac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b46e:	4b6f      	ldr	r3, [pc, #444]	; (800b62c <tcp_receive+0xbe4>)
 800b470:	891c      	ldrh	r4, [r3, #8]
 800b472:	4b6e      	ldr	r3, [pc, #440]	; (800b62c <tcp_receive+0xbe4>)
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	899b      	ldrh	r3, [r3, #12]
 800b478:	b29b      	uxth	r3, r3
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fb fa39 	bl	80068f2 <lwip_htons>
 800b480:	4603      	mov	r3, r0
 800b482:	f003 0303 	and.w	r3, r3, #3
 800b486:	2b00      	cmp	r3, #0
 800b488:	d001      	beq.n	800b48e <tcp_receive+0xa46>
 800b48a:	2301      	movs	r3, #1
 800b48c:	e000      	b.n	800b490 <tcp_receive+0xa48>
 800b48e:	2300      	movs	r3, #0
 800b490:	4423      	add	r3, r4
 800b492:	b29a      	uxth	r2, r3
 800b494:	4b63      	ldr	r3, [pc, #396]	; (800b624 <tcp_receive+0xbdc>)
 800b496:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b498:	4b62      	ldr	r3, [pc, #392]	; (800b624 <tcp_receive+0xbdc>)
 800b49a:	881b      	ldrh	r3, [r3, #0]
 800b49c:	461a      	mov	r2, r3
 800b49e:	4b62      	ldr	r3, [pc, #392]	; (800b628 <tcp_receive+0xbe0>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	441a      	add	r2, r3
 800b4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d006      	beq.n	800b4bc <tcp_receive+0xa74>
 800b4ae:	4b60      	ldr	r3, [pc, #384]	; (800b630 <tcp_receive+0xbe8>)
 800b4b0:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800b4b4:	495f      	ldr	r1, [pc, #380]	; (800b634 <tcp_receive+0xbec>)
 800b4b6:	4860      	ldr	r0, [pc, #384]	; (800b638 <tcp_receive+0xbf0>)
 800b4b8:	f007 f936 	bl	8012728 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4c0:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b4c2:	4b58      	ldr	r3, [pc, #352]	; (800b624 <tcp_receive+0xbdc>)
 800b4c4:	881b      	ldrh	r3, [r3, #0]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	4b57      	ldr	r3, [pc, #348]	; (800b628 <tcp_receive+0xbe0>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	441a      	add	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b4d6:	4b53      	ldr	r3, [pc, #332]	; (800b624 <tcp_receive+0xbdc>)
 800b4d8:	881b      	ldrh	r3, [r3, #0]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d206      	bcs.n	800b4ec <tcp_receive+0xaa4>
 800b4de:	4b54      	ldr	r3, [pc, #336]	; (800b630 <tcp_receive+0xbe8>)
 800b4e0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b4e4:	4955      	ldr	r1, [pc, #340]	; (800b63c <tcp_receive+0xbf4>)
 800b4e6:	4854      	ldr	r0, [pc, #336]	; (800b638 <tcp_receive+0xbf0>)
 800b4e8:	f007 f91e 	bl	8012728 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b4f0:	4b4c      	ldr	r3, [pc, #304]	; (800b624 <tcp_receive+0xbdc>)
 800b4f2:	881b      	ldrh	r3, [r3, #0]
 800b4f4:	1ad3      	subs	r3, r2, r3
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f7fd f973 	bl	80087e8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b502:	4b4a      	ldr	r3, [pc, #296]	; (800b62c <tcp_receive+0xbe4>)
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	891b      	ldrh	r3, [r3, #8]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d006      	beq.n	800b51a <tcp_receive+0xad2>
          recv_data = inseg.p;
 800b50c:	4b47      	ldr	r3, [pc, #284]	; (800b62c <tcp_receive+0xbe4>)
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	4a4b      	ldr	r2, [pc, #300]	; (800b640 <tcp_receive+0xbf8>)
 800b512:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b514:	4b45      	ldr	r3, [pc, #276]	; (800b62c <tcp_receive+0xbe4>)
 800b516:	2200      	movs	r2, #0
 800b518:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b51a:	4b44      	ldr	r3, [pc, #272]	; (800b62c <tcp_receive+0xbe4>)
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	899b      	ldrh	r3, [r3, #12]
 800b520:	b29b      	uxth	r3, r3
 800b522:	4618      	mov	r0, r3
 800b524:	f7fb f9e5 	bl	80068f2 <lwip_htons>
 800b528:	4603      	mov	r3, r0
 800b52a:	f003 0301 	and.w	r3, r3, #1
 800b52e:	2b00      	cmp	r3, #0
 800b530:	f000 80b4 	beq.w	800b69c <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b534:	4b43      	ldr	r3, [pc, #268]	; (800b644 <tcp_receive+0xbfc>)
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	f043 0320 	orr.w	r3, r3, #32
 800b53c:	b2da      	uxtb	r2, r3
 800b53e:	4b41      	ldr	r3, [pc, #260]	; (800b644 <tcp_receive+0xbfc>)
 800b540:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b542:	e0ab      	b.n	800b69c <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b548:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	4a35      	ldr	r2, [pc, #212]	; (800b628 <tcp_receive+0xbe0>)
 800b554:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	891b      	ldrh	r3, [r3, #8]
 800b55a:	461c      	mov	r4, r3
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	899b      	ldrh	r3, [r3, #12]
 800b562:	b29b      	uxth	r3, r3
 800b564:	4618      	mov	r0, r3
 800b566:	f7fb f9c4 	bl	80068f2 <lwip_htons>
 800b56a:	4603      	mov	r3, r0
 800b56c:	f003 0303 	and.w	r3, r3, #3
 800b570:	2b00      	cmp	r3, #0
 800b572:	d001      	beq.n	800b578 <tcp_receive+0xb30>
 800b574:	2301      	movs	r3, #1
 800b576:	e000      	b.n	800b57a <tcp_receive+0xb32>
 800b578:	2300      	movs	r3, #0
 800b57a:	191a      	adds	r2, r3, r4
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b580:	441a      	add	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b58a:	461c      	mov	r4, r3
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	891b      	ldrh	r3, [r3, #8]
 800b590:	461d      	mov	r5, r3
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	899b      	ldrh	r3, [r3, #12]
 800b598:	b29b      	uxth	r3, r3
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fb f9a9 	bl	80068f2 <lwip_htons>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	f003 0303 	and.w	r3, r3, #3
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d001      	beq.n	800b5ae <tcp_receive+0xb66>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e000      	b.n	800b5b0 <tcp_receive+0xb68>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	442b      	add	r3, r5
 800b5b2:	429c      	cmp	r4, r3
 800b5b4:	d206      	bcs.n	800b5c4 <tcp_receive+0xb7c>
 800b5b6:	4b1e      	ldr	r3, [pc, #120]	; (800b630 <tcp_receive+0xbe8>)
 800b5b8:	f240 52dd 	movw	r2, #1501	; 0x5dd
 800b5bc:	4922      	ldr	r1, [pc, #136]	; (800b648 <tcp_receive+0xc00>)
 800b5be:	481e      	ldr	r0, [pc, #120]	; (800b638 <tcp_receive+0xbf0>)
 800b5c0:	f007 f8b2 	bl	8012728 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	891b      	ldrh	r3, [r3, #8]
 800b5c8:	461c      	mov	r4, r3
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	899b      	ldrh	r3, [r3, #12]
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fb f98d 	bl	80068f2 <lwip_htons>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	f003 0303 	and.w	r3, r3, #3
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <tcp_receive+0xb9e>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e000      	b.n	800b5e8 <tcp_receive+0xba0>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	1919      	adds	r1, r3, r4
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b5ee:	b28b      	uxth	r3, r1
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f7fd f8f5 	bl	80087e8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	891b      	ldrh	r3, [r3, #8]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d028      	beq.n	800b65a <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b608:	4b0d      	ldr	r3, [pc, #52]	; (800b640 <tcp_receive+0xbf8>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d01d      	beq.n	800b64c <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 800b610:	4b0b      	ldr	r3, [pc, #44]	; (800b640 <tcp_receive+0xbf8>)
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	4619      	mov	r1, r3
 800b61a:	4610      	mov	r0, r2
 800b61c:	f7fc fc06 	bl	8007e2c <pbuf_cat>
 800b620:	e018      	b.n	800b654 <tcp_receive+0xc0c>
 800b622:	bf00      	nop
 800b624:	20006f9e 	.word	0x20006f9e
 800b628:	20006f94 	.word	0x20006f94
 800b62c:	20006f74 	.word	0x20006f74
 800b630:	0801711c 	.word	0x0801711c
 800b634:	08017420 	.word	0x08017420
 800b638:	08017160 	.word	0x08017160
 800b63c:	0801745c 	.word	0x0801745c
 800b640:	20006fa4 	.word	0x20006fa4
 800b644:	20006fa1 	.word	0x20006fa1
 800b648:	0801747c 	.word	0x0801747c
            } else {
              recv_data = cseg->p;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	4a71      	ldr	r2, [pc, #452]	; (800b818 <tcp_receive+0xdd0>)
 800b652:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	899b      	ldrh	r3, [r3, #12]
 800b660:	b29b      	uxth	r3, r3
 800b662:	4618      	mov	r0, r3
 800b664:	f7fb f945 	bl	80068f2 <lwip_htons>
 800b668:	4603      	mov	r3, r0
 800b66a:	f003 0301 	and.w	r3, r3, #1
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00d      	beq.n	800b68e <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b672:	4b6a      	ldr	r3, [pc, #424]	; (800b81c <tcp_receive+0xdd4>)
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	f043 0320 	orr.w	r3, r3, #32
 800b67a:	b2da      	uxtb	r2, r3
 800b67c:	4b67      	ldr	r3, [pc, #412]	; (800b81c <tcp_receive+0xdd4>)
 800b67e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	7d1b      	ldrb	r3, [r3, #20]
 800b684:	2b04      	cmp	r3, #4
 800b686:	d102      	bne.n	800b68e <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2207      	movs	r2, #7
 800b68c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f7fd fcf2 	bl	8009080 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d008      	beq.n	800b6b6 <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	685a      	ldr	r2, [r3, #4]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	f43f af47 	beq.w	800b544 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	7e9b      	ldrb	r3, [r3, #26]
 800b6ba:	f003 0301 	and.w	r3, r3, #1
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00e      	beq.n	800b6e0 <tcp_receive+0xc98>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	7e9b      	ldrb	r3, [r3, #26]
 800b6c6:	f023 0301 	bic.w	r3, r3, #1
 800b6ca:	b2da      	uxtb	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	769a      	strb	r2, [r3, #26]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	7e9b      	ldrb	r3, [r3, #26]
 800b6d4:	f043 0302 	orr.w	r3, r3, #2
 800b6d8:	b2da      	uxtb	r2, r3
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b6de:	e181      	b.n	800b9e4 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	7e9b      	ldrb	r3, [r3, #26]
 800b6e4:	f043 0301 	orr.w	r3, r3, #1
 800b6e8:	b2da      	uxtb	r2, r3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b6ee:	e179      	b.n	800b9e4 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 fcb5 	bl	800c060 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d106      	bne.n	800b70c <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b6fe:	4848      	ldr	r0, [pc, #288]	; (800b820 <tcp_receive+0xdd8>)
 800b700:	f7fd fcd6 	bl	80090b0 <tcp_seg_copy>
 800b704:	4602      	mov	r2, r0
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800b70a:	e16b      	b.n	800b9e4 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800b70c:	2300      	movs	r3, #0
 800b70e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b714:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b716:	e150      	b.n	800b9ba <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 800b718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	685a      	ldr	r2, [r3, #4]
 800b71e:	4b41      	ldr	r3, [pc, #260]	; (800b824 <tcp_receive+0xddc>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	429a      	cmp	r2, r3
 800b724:	d11d      	bne.n	800b762 <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b726:	4b3e      	ldr	r3, [pc, #248]	; (800b820 <tcp_receive+0xdd8>)
 800b728:	891a      	ldrh	r2, [r3, #8]
 800b72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b72c:	891b      	ldrh	r3, [r3, #8]
 800b72e:	429a      	cmp	r2, r3
 800b730:	f240 8148 	bls.w	800b9c4 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800b734:	483a      	ldr	r0, [pc, #232]	; (800b820 <tcp_receive+0xdd8>)
 800b736:	f7fd fcbb 	bl	80090b0 <tcp_seg_copy>
 800b73a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f000 8142 	beq.w	800b9c8 <tcp_receive+0xf80>
                  if (prev != NULL) {
 800b744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b746:	2b00      	cmp	r3, #0
 800b748:	d003      	beq.n	800b752 <tcp_receive+0xd0a>
                    prev->next = cseg;
 800b74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	601a      	str	r2, [r3, #0]
 800b750:	e002      	b.n	800b758 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b758:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f7ff f8fe 	bl	800a95c <tcp_oos_insert_segment>
                }
                break;
 800b760:	e132      	b.n	800b9c8 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b764:	2b00      	cmp	r3, #0
 800b766:	d117      	bne.n	800b798 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b768:	4b2e      	ldr	r3, [pc, #184]	; (800b824 <tcp_receive+0xddc>)
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	1ad3      	subs	r3, r2, r3
 800b774:	2b00      	cmp	r3, #0
 800b776:	da57      	bge.n	800b828 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800b778:	4829      	ldr	r0, [pc, #164]	; (800b820 <tcp_receive+0xdd8>)
 800b77a:	f7fd fc99 	bl	80090b0 <tcp_seg_copy>
 800b77e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2b00      	cmp	r3, #0
 800b784:	f000 8122 	beq.w	800b9cc <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800b78e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f7ff f8e3 	bl	800a95c <tcp_oos_insert_segment>
                  }
                  break;
 800b796:	e119      	b.n	800b9cc <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800b798:	4b22      	ldr	r3, [pc, #136]	; (800b824 <tcp_receive+0xddc>)
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79e:	68db      	ldr	r3, [r3, #12]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	1ad3      	subs	r3, r2, r3
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	db3e      	blt.n	800b828 <tcp_receive+0xde0>
 800b7aa:	4b1e      	ldr	r3, [pc, #120]	; (800b824 <tcp_receive+0xddc>)
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	dc35      	bgt.n	800b828 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800b7bc:	4818      	ldr	r0, [pc, #96]	; (800b820 <tcp_receive+0xdd8>)
 800b7be:	f7fd fc77 	bl	80090b0 <tcp_seg_copy>
 800b7c2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f000 8102 	beq.w	800b9d0 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7d4:	8912      	ldrh	r2, [r2, #8]
 800b7d6:	441a      	add	r2, r3
 800b7d8:	4b12      	ldr	r3, [pc, #72]	; (800b824 <tcp_receive+0xddc>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	1ad3      	subs	r3, r2, r3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	dd12      	ble.n	800b808 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b7e2:	4b10      	ldr	r3, [pc, #64]	; (800b824 <tcp_receive+0xddc>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	1ad3      	subs	r3, r2, r3
 800b7f2:	b29a      	uxth	r2, r3
 800b7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fa:	685a      	ldr	r2, [r3, #4]
 800b7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fe:	891b      	ldrh	r3, [r3, #8]
 800b800:	4619      	mov	r1, r3
 800b802:	4610      	mov	r0, r2
 800b804:	f7fc f8d2 	bl	80079ac <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80a:	68fa      	ldr	r2, [r7, #12]
 800b80c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b80e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f7ff f8a3 	bl	800a95c <tcp_oos_insert_segment>
                  }
                  break;
 800b816:	e0db      	b.n	800b9d0 <tcp_receive+0xf88>
 800b818:	20006fa4 	.word	0x20006fa4
 800b81c:	20006fa1 	.word	0x20006fa1
 800b820:	20006f74 	.word	0x20006f74
 800b824:	20006f94 	.word	0x20006f94
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f040 80bf 	bne.w	800b9b0 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b832:	4b7c      	ldr	r3, [pc, #496]	; (800ba24 <tcp_receive+0xfdc>)
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f340 80b6 	ble.w	800b9b0 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	899b      	ldrh	r3, [r3, #12]
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7fb f850 	bl	80068f2 <lwip_htons>
 800b852:	4603      	mov	r3, r0
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f040 80bb 	bne.w	800b9d4 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b85e:	4872      	ldr	r0, [pc, #456]	; (800ba28 <tcp_receive+0xfe0>)
 800b860:	f7fd fc26 	bl	80090b0 <tcp_seg_copy>
 800b864:	4602      	mov	r2, r0
 800b866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b868:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	f000 80b2 	beq.w	800b9d8 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b87c:	8912      	ldrh	r2, [r2, #8]
 800b87e:	441a      	add	r2, r3
 800b880:	4b68      	ldr	r3, [pc, #416]	; (800ba24 <tcp_receive+0xfdc>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	1ad3      	subs	r3, r2, r3
 800b886:	2b00      	cmp	r3, #0
 800b888:	dd12      	ble.n	800b8b0 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b88a:	4b66      	ldr	r3, [pc, #408]	; (800ba24 <tcp_receive+0xfdc>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	b29a      	uxth	r2, r3
 800b890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	b29b      	uxth	r3, r3
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	b29a      	uxth	r2, r3
 800b89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a2:	685a      	ldr	r2, [r3, #4]
 800b8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a6:	891b      	ldrh	r3, [r3, #8]
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	4610      	mov	r0, r2
 800b8ac:	f7fc f87e 	bl	80079ac <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b8b0:	4b5e      	ldr	r3, [pc, #376]	; (800ba2c <tcp_receive+0xfe4>)
 800b8b2:	881b      	ldrh	r3, [r3, #0]
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	4b5b      	ldr	r3, [pc, #364]	; (800ba24 <tcp_receive+0xfdc>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	441a      	add	r2, r3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c0:	6879      	ldr	r1, [r7, #4]
 800b8c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b8c4:	440b      	add	r3, r1
 800b8c6:	1ad3      	subs	r3, r2, r3
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f340 8085 	ble.w	800b9d8 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	899b      	ldrh	r3, [r3, #12]
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7fb f80a 	bl	80068f2 <lwip_htons>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	f003 0301 	and.w	r3, r3, #1
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d01e      	beq.n	800b926 <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	899b      	ldrh	r3, [r3, #12]
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b8f6:	b29c      	uxth	r4, r3
 800b8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	899b      	ldrh	r3, [r3, #12]
 800b900:	b29b      	uxth	r3, r3
 800b902:	4618      	mov	r0, r3
 800b904:	f7fa fff5 	bl	80068f2 <lwip_htons>
 800b908:	4603      	mov	r3, r0
 800b90a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b90e:	b29b      	uxth	r3, r3
 800b910:	4618      	mov	r0, r3
 800b912:	f7fa ffee 	bl	80068f2 <lwip_htons>
 800b916:	4603      	mov	r3, r0
 800b918:	461a      	mov	r2, r3
 800b91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	4322      	orrs	r2, r4
 800b922:	b292      	uxth	r2, r2
 800b924:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b930:	4413      	add	r3, r2
 800b932:	b299      	uxth	r1, r3
 800b934:	4b3b      	ldr	r3, [pc, #236]	; (800ba24 <tcp_receive+0xfdc>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	b29a      	uxth	r2, r3
 800b93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	1a8a      	subs	r2, r1, r2
 800b940:	b292      	uxth	r2, r2
 800b942:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	685a      	ldr	r2, [r3, #4]
 800b94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	891b      	ldrh	r3, [r3, #8]
 800b950:	4619      	mov	r1, r3
 800b952:	4610      	mov	r0, r2
 800b954:	f7fc f82a 	bl	80079ac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	891c      	ldrh	r4, [r3, #8]
 800b95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	899b      	ldrh	r3, [r3, #12]
 800b966:	b29b      	uxth	r3, r3
 800b968:	4618      	mov	r0, r3
 800b96a:	f7fa ffc2 	bl	80068f2 <lwip_htons>
 800b96e:	4603      	mov	r3, r0
 800b970:	f003 0303 	and.w	r3, r3, #3
 800b974:	2b00      	cmp	r3, #0
 800b976:	d001      	beq.n	800b97c <tcp_receive+0xf34>
 800b978:	2301      	movs	r3, #1
 800b97a:	e000      	b.n	800b97e <tcp_receive+0xf36>
 800b97c:	2300      	movs	r3, #0
 800b97e:	4423      	add	r3, r4
 800b980:	b29a      	uxth	r2, r3
 800b982:	4b2a      	ldr	r3, [pc, #168]	; (800ba2c <tcp_receive+0xfe4>)
 800b984:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b986:	4b29      	ldr	r3, [pc, #164]	; (800ba2c <tcp_receive+0xfe4>)
 800b988:	881b      	ldrh	r3, [r3, #0]
 800b98a:	461a      	mov	r2, r3
 800b98c:	4b25      	ldr	r3, [pc, #148]	; (800ba24 <tcp_receive+0xfdc>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	441a      	add	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b996:	6879      	ldr	r1, [r7, #4]
 800b998:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b99a:	440b      	add	r3, r1
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d01b      	beq.n	800b9d8 <tcp_receive+0xf90>
 800b9a0:	4b23      	ldr	r3, [pc, #140]	; (800ba30 <tcp_receive+0xfe8>)
 800b9a2:	f240 627a 	movw	r2, #1658	; 0x67a
 800b9a6:	4923      	ldr	r1, [pc, #140]	; (800ba34 <tcp_receive+0xfec>)
 800b9a8:	4823      	ldr	r0, [pc, #140]	; (800ba38 <tcp_receive+0xff0>)
 800b9aa:	f006 febd 	bl	8012728 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b9ae:	e013      	b.n	800b9d8 <tcp_receive+0xf90>
              }
            }
            prev = next;
 800b9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f47f aeab 	bne.w	800b718 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 800b9c2:	e00f      	b.n	800b9e4 <tcp_receive+0xf9c>
                break;
 800b9c4:	bf00      	nop
 800b9c6:	e00d      	b.n	800b9e4 <tcp_receive+0xf9c>
                break;
 800b9c8:	bf00      	nop
 800b9ca:	e00b      	b.n	800b9e4 <tcp_receive+0xf9c>
                  break;
 800b9cc:	bf00      	nop
 800b9ce:	e009      	b.n	800b9e4 <tcp_receive+0xf9c>
                  break;
 800b9d0:	bf00      	nop
 800b9d2:	e007      	b.n	800b9e4 <tcp_receive+0xf9c>
                  break;
 800b9d4:	bf00      	nop
 800b9d6:	e005      	b.n	800b9e4 <tcp_receive+0xf9c>
                break;
 800b9d8:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800b9da:	e003      	b.n	800b9e4 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 fb3f 	bl	800c060 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b9e2:	e01a      	b.n	800ba1a <tcp_receive+0xfd2>
 800b9e4:	e019      	b.n	800ba1a <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b9e6:	4b0f      	ldr	r3, [pc, #60]	; (800ba24 <tcp_receive+0xfdc>)
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ee:	1ad3      	subs	r3, r2, r3
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	db0a      	blt.n	800ba0a <tcp_receive+0xfc2>
 800b9f4:	4b0b      	ldr	r3, [pc, #44]	; (800ba24 <tcp_receive+0xfdc>)
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fc:	6879      	ldr	r1, [r7, #4]
 800b9fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ba00:	440b      	add	r3, r1
 800ba02:	1ad3      	subs	r3, r2, r3
 800ba04:	3301      	adds	r3, #1
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	dd07      	ble.n	800ba1a <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	7e9b      	ldrb	r3, [r3, #26]
 800ba0e:	f043 0302 	orr.w	r3, r3, #2
 800ba12:	b2da      	uxtb	r2, r3
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800ba18:	e7ff      	b.n	800ba1a <tcp_receive+0xfd2>
 800ba1a:	bf00      	nop
 800ba1c:	3734      	adds	r7, #52	; 0x34
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba22:	bf00      	nop
 800ba24:	20006f94 	.word	0x20006f94
 800ba28:	20006f74 	.word	0x20006f74
 800ba2c:	20006f9e 	.word	0x20006f9e
 800ba30:	0801711c 	.word	0x0801711c
 800ba34:	080173e8 	.word	0x080173e8
 800ba38:	08017160 	.word	0x08017160

0800ba3c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800ba42:	4b17      	ldr	r3, [pc, #92]	; (800baa0 <tcp_getoptbyte+0x64>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d005      	beq.n	800ba56 <tcp_getoptbyte+0x1a>
 800ba4a:	4b16      	ldr	r3, [pc, #88]	; (800baa4 <tcp_getoptbyte+0x68>)
 800ba4c:	881a      	ldrh	r2, [r3, #0]
 800ba4e:	4b16      	ldr	r3, [pc, #88]	; (800baa8 <tcp_getoptbyte+0x6c>)
 800ba50:	881b      	ldrh	r3, [r3, #0]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d20e      	bcs.n	800ba74 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800ba56:	4b15      	ldr	r3, [pc, #84]	; (800baac <tcp_getoptbyte+0x70>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	3314      	adds	r3, #20
 800ba5c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800ba5e:	4b11      	ldr	r3, [pc, #68]	; (800baa4 <tcp_getoptbyte+0x68>)
 800ba60:	881b      	ldrh	r3, [r3, #0]
 800ba62:	1c5a      	adds	r2, r3, #1
 800ba64:	b291      	uxth	r1, r2
 800ba66:	4a0f      	ldr	r2, [pc, #60]	; (800baa4 <tcp_getoptbyte+0x68>)
 800ba68:	8011      	strh	r1, [r2, #0]
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	4413      	add	r3, r2
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	e010      	b.n	800ba96 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800ba74:	4b0b      	ldr	r3, [pc, #44]	; (800baa4 <tcp_getoptbyte+0x68>)
 800ba76:	881b      	ldrh	r3, [r3, #0]
 800ba78:	1c5a      	adds	r2, r3, #1
 800ba7a:	b291      	uxth	r1, r2
 800ba7c:	4a09      	ldr	r2, [pc, #36]	; (800baa4 <tcp_getoptbyte+0x68>)
 800ba7e:	8011      	strh	r1, [r2, #0]
 800ba80:	b2da      	uxtb	r2, r3
 800ba82:	4b09      	ldr	r3, [pc, #36]	; (800baa8 <tcp_getoptbyte+0x6c>)
 800ba84:	881b      	ldrh	r3, [r3, #0]
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	1ad3      	subs	r3, r2, r3
 800ba8a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800ba8c:	4b04      	ldr	r3, [pc, #16]	; (800baa0 <tcp_getoptbyte+0x64>)
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	79fb      	ldrb	r3, [r7, #7]
 800ba92:	4413      	add	r3, r2
 800ba94:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	370c      	adds	r7, #12
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bc80      	pop	{r7}
 800ba9e:	4770      	bx	lr
 800baa0:	20006f8c 	.word	0x20006f8c
 800baa4:	20006f90 	.word	0x20006f90
 800baa8:	20006f8a 	.word	0x20006f8a
 800baac:	20006f84 	.word	0x20006f84

0800bab0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bab8:	4b2e      	ldr	r3, [pc, #184]	; (800bb74 <tcp_parseopt+0xc4>)
 800baba:	881b      	ldrh	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d055      	beq.n	800bb6c <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bac0:	4b2d      	ldr	r3, [pc, #180]	; (800bb78 <tcp_parseopt+0xc8>)
 800bac2:	2200      	movs	r2, #0
 800bac4:	801a      	strh	r2, [r3, #0]
 800bac6:	e045      	b.n	800bb54 <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 800bac8:	f7ff ffb8 	bl	800ba3c <tcp_getoptbyte>
 800bacc:	4603      	mov	r3, r0
 800bace:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800bad0:	7bfb      	ldrb	r3, [r7, #15]
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d006      	beq.n	800bae4 <tcp_parseopt+0x34>
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	dc2b      	bgt.n	800bb32 <tcp_parseopt+0x82>
 800bada:	2b00      	cmp	r3, #0
 800badc:	d041      	beq.n	800bb62 <tcp_parseopt+0xb2>
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d127      	bne.n	800bb32 <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 800bae2:	e037      	b.n	800bb54 <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800bae4:	f7ff ffaa 	bl	800ba3c <tcp_getoptbyte>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b04      	cmp	r3, #4
 800baec:	d13b      	bne.n	800bb66 <tcp_parseopt+0xb6>
 800baee:	4b22      	ldr	r3, [pc, #136]	; (800bb78 <tcp_parseopt+0xc8>)
 800baf0:	881b      	ldrh	r3, [r3, #0]
 800baf2:	3301      	adds	r3, #1
 800baf4:	4a1f      	ldr	r2, [pc, #124]	; (800bb74 <tcp_parseopt+0xc4>)
 800baf6:	8812      	ldrh	r2, [r2, #0]
 800baf8:	4293      	cmp	r3, r2
 800bafa:	da34      	bge.n	800bb66 <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800bafc:	f7ff ff9e 	bl	800ba3c <tcp_getoptbyte>
 800bb00:	4603      	mov	r3, r0
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	021b      	lsls	r3, r3, #8
 800bb06:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800bb08:	f7ff ff98 	bl	800ba3c <tcp_getoptbyte>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	89bb      	ldrh	r3, [r7, #12]
 800bb12:	4313      	orrs	r3, r2
 800bb14:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bb16:	89bb      	ldrh	r3, [r7, #12]
 800bb18:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bb1c:	d804      	bhi.n	800bb28 <tcp_parseopt+0x78>
 800bb1e:	89bb      	ldrh	r3, [r7, #12]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d001      	beq.n	800bb28 <tcp_parseopt+0x78>
 800bb24:	89ba      	ldrh	r2, [r7, #12]
 800bb26:	e001      	b.n	800bb2c <tcp_parseopt+0x7c>
 800bb28:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800bb30:	e010      	b.n	800bb54 <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800bb32:	f7ff ff83 	bl	800ba3c <tcp_getoptbyte>
 800bb36:	4603      	mov	r3, r0
 800bb38:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800bb3a:	7afb      	ldrb	r3, [r7, #11]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d914      	bls.n	800bb6a <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800bb40:	7afb      	ldrb	r3, [r7, #11]
 800bb42:	b29a      	uxth	r2, r3
 800bb44:	4b0c      	ldr	r3, [pc, #48]	; (800bb78 <tcp_parseopt+0xc8>)
 800bb46:	881b      	ldrh	r3, [r3, #0]
 800bb48:	4413      	add	r3, r2
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	3b02      	subs	r3, #2
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	4b09      	ldr	r3, [pc, #36]	; (800bb78 <tcp_parseopt+0xc8>)
 800bb52:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bb54:	4b08      	ldr	r3, [pc, #32]	; (800bb78 <tcp_parseopt+0xc8>)
 800bb56:	881a      	ldrh	r2, [r3, #0]
 800bb58:	4b06      	ldr	r3, [pc, #24]	; (800bb74 <tcp_parseopt+0xc4>)
 800bb5a:	881b      	ldrh	r3, [r3, #0]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d3b3      	bcc.n	800bac8 <tcp_parseopt+0x18>
 800bb60:	e004      	b.n	800bb6c <tcp_parseopt+0xbc>
        return;
 800bb62:	bf00      	nop
 800bb64:	e002      	b.n	800bb6c <tcp_parseopt+0xbc>
          return;
 800bb66:	bf00      	nop
 800bb68:	e000      	b.n	800bb6c <tcp_parseopt+0xbc>
          return;
 800bb6a:	bf00      	nop
      }
    }
  }
}
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	20006f88 	.word	0x20006f88
 800bb78:	20006f90 	.word	0x20006f90

0800bb7c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800bb80:	4b05      	ldr	r3, [pc, #20]	; (800bb98 <tcp_trigger_input_pcb_close+0x1c>)
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	f043 0310 	orr.w	r3, r3, #16
 800bb88:	b2da      	uxtb	r2, r3
 800bb8a:	4b03      	ldr	r3, [pc, #12]	; (800bb98 <tcp_trigger_input_pcb_close+0x1c>)
 800bb8c:	701a      	strb	r2, [r3, #0]
}
 800bb8e:	bf00      	nop
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bc80      	pop	{r7}
 800bb94:	4770      	bx	lr
 800bb96:	bf00      	nop
 800bb98:	20006fa1 	.word	0x20006fa1

0800bb9c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b086      	sub	sp, #24
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	607b      	str	r3, [r7, #4]
 800bba6:	460b      	mov	r3, r1
 800bba8:	817b      	strh	r3, [r7, #10]
 800bbaa:	4613      	mov	r3, r2
 800bbac:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bbae:	897a      	ldrh	r2, [r7, #10]
 800bbb0:	893b      	ldrh	r3, [r7, #8]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	3314      	adds	r3, #20
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	2200      	movs	r2, #0
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	2001      	movs	r0, #1
 800bbc0:	f7fb fcf0 	bl	80075a4 <pbuf_alloc>
 800bbc4:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d056      	beq.n	800bc7a <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800bbcc:	897b      	ldrh	r3, [r7, #10]
 800bbce:	3313      	adds	r3, #19
 800bbd0:	697a      	ldr	r2, [r7, #20]
 800bbd2:	8952      	ldrh	r2, [r2, #10]
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	db05      	blt.n	800bbe4 <tcp_output_alloc_header+0x48>
 800bbd8:	4b2a      	ldr	r3, [pc, #168]	; (800bc84 <tcp_output_alloc_header+0xe8>)
 800bbda:	2272      	movs	r2, #114	; 0x72
 800bbdc:	492a      	ldr	r1, [pc, #168]	; (800bc88 <tcp_output_alloc_header+0xec>)
 800bbde:	482b      	ldr	r0, [pc, #172]	; (800bc8c <tcp_output_alloc_header+0xf0>)
 800bbe0:	f006 fda2 	bl	8012728 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	8adb      	ldrh	r3, [r3, #22]
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7fa fe7f 	bl	80068f2 <lwip_htons>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	8b1b      	ldrh	r3, [r3, #24]
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7fa fe76 	bl	80068f2 <lwip_htons>
 800bc06:	4603      	mov	r3, r0
 800bc08:	461a      	mov	r2, r3
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7fa fe77 	bl	800690c <lwip_htonl>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800bc24:	897b      	ldrh	r3, [r7, #10]
 800bc26:	089b      	lsrs	r3, r3, #2
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	3305      	adds	r3, #5
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	031b      	lsls	r3, r3, #12
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	f043 0310 	orr.w	r3, r3, #16
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7fa fe5a 	bl	80068f2 <lwip_htons>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	461a      	mov	r2, r3
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7fa fe51 	bl	80068f2 <lwip_htons>
 800bc50:	4603      	mov	r3, r0
 800bc52:	461a      	mov	r2, r3
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	741a      	strb	r2, [r3, #16]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	2200      	movs	r2, #0
 800bc66:	749a      	strb	r2, [r3, #18]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc70:	68fa      	ldr	r2, [r7, #12]
 800bc72:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bc74:	441a      	add	r2, r3
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800bc7a:	697b      	ldr	r3, [r7, #20]
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3718      	adds	r7, #24
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	080174a4 	.word	0x080174a4
 800bc88:	080174d8 	.word	0x080174d8
 800bc8c:	08017508 	.word	0x08017508

0800bc90 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800bc90:	b590      	push	{r4, r7, lr}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d02d      	beq.n	800bcfc <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bca4:	60fb      	str	r3, [r7, #12]
 800bca6:	e002      	b.n	800bcae <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d1f8      	bne.n	800bca8 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	899b      	ldrh	r3, [r3, #12]
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7fa fe17 	bl	80068f2 <lwip_htons>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	f003 0307 	and.w	r3, r3, #7
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d116      	bne.n	800bcfc <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	899b      	ldrh	r3, [r3, #12]
 800bcd4:	b29c      	uxth	r4, r3
 800bcd6:	2001      	movs	r0, #1
 800bcd8:	f7fa fe0b 	bl	80068f2 <lwip_htons>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	461a      	mov	r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	4322      	orrs	r2, r4
 800bce6:	b292      	uxth	r2, r2
 800bce8:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	7e9b      	ldrb	r3, [r3, #26]
 800bcee:	f043 0320 	orr.w	r3, r3, #32
 800bcf2:	b2da      	uxtb	r2, r3
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	e004      	b.n	800bd06 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bcfc:	2101      	movs	r1, #1
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 f898 	bl	800be34 <tcp_enqueue_flags>
 800bd04:	4603      	mov	r3, r0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3714      	adds	r7, #20
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd90      	pop	{r4, r7, pc}
	...

0800bd10 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800bd10:	b590      	push	{r4, r7, lr}
 800bd12:	b087      	sub	sp, #28
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	603b      	str	r3, [r7, #0]
 800bd1c:	4613      	mov	r3, r2
 800bd1e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bd20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	f003 0304 	and.w	r3, r3, #4
 800bd2c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bd2e:	2003      	movs	r0, #3
 800bd30:	f7fb fa20 	bl	8007174 <memp_malloc>
 800bd34:	6138      	str	r0, [r7, #16]
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d104      	bne.n	800bd46 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800bd3c:	68b8      	ldr	r0, [r7, #8]
 800bd3e:	f7fb ffa9 	bl	8007c94 <pbuf_free>
    return NULL;
 800bd42:	2300      	movs	r3, #0
 800bd44:	e069      	b.n	800be1a <tcp_create_segment+0x10a>
  }
  seg->flags = optflags;
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800bd4c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	2200      	movs	r2, #0
 800bd52:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	68ba      	ldr	r2, [r7, #8]
 800bd58:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	891a      	ldrh	r2, [r3, #8]
 800bd5e:	7dfb      	ldrb	r3, [r7, #23]
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d205      	bcs.n	800bd72 <tcp_create_segment+0x62>
 800bd66:	4b2f      	ldr	r3, [pc, #188]	; (800be24 <tcp_create_segment+0x114>)
 800bd68:	22ba      	movs	r2, #186	; 0xba
 800bd6a:	492f      	ldr	r1, [pc, #188]	; (800be28 <tcp_create_segment+0x118>)
 800bd6c:	482f      	ldr	r0, [pc, #188]	; (800be2c <tcp_create_segment+0x11c>)
 800bd6e:	f006 fcdb 	bl	8012728 <iprintf>
  seg->len = p->tot_len - optlen;
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	891a      	ldrh	r2, [r3, #8]
 800bd76:	7dfb      	ldrb	r3, [r7, #23]
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	b29a      	uxth	r2, r3
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800bd82:	2114      	movs	r1, #20
 800bd84:	68b8      	ldr	r0, [r7, #8]
 800bd86:	f7fb ff61 	bl	8007c4c <pbuf_header>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00c      	beq.n	800bdaa <tcp_create_segment+0x9a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 800bd90:	4b27      	ldr	r3, [pc, #156]	; (800be30 <tcp_create_segment+0x120>)
 800bd92:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800bd96:	3301      	adds	r3, #1
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	4b25      	ldr	r3, [pc, #148]	; (800be30 <tcp_create_segment+0x120>)
 800bd9c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
 800bda0:	6938      	ldr	r0, [r7, #16]
 800bda2:	f7fd f96d 	bl	8009080 <tcp_seg_free>
    return NULL;
 800bda6:	2300      	movs	r3, #0
 800bda8:	e037      	b.n	800be1a <tcp_create_segment+0x10a>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	685a      	ldr	r2, [r3, #4]
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	8ada      	ldrh	r2, [r3, #22]
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	68dc      	ldr	r4, [r3, #12]
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	f7fa fd98 	bl	80068f2 <lwip_htons>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	8b1a      	ldrh	r2, [r3, #24]
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	68dc      	ldr	r4, [r3, #12]
 800bdce:	4610      	mov	r0, r2
 800bdd0:	f7fa fd8f 	bl	80068f2 <lwip_htons>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	68dc      	ldr	r4, [r3, #12]
 800bddc:	6838      	ldr	r0, [r7, #0]
 800bdde:	f7fa fd95 	bl	800690c <lwip_htonl>
 800bde2:	4603      	mov	r3, r0
 800bde4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800bde6:	7dfb      	ldrb	r3, [r7, #23]
 800bde8:	089b      	lsrs	r3, r3, #2
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	3305      	adds	r3, #5
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	031b      	lsls	r3, r3, #12
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	79fb      	ldrb	r3, [r7, #7]
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	68dc      	ldr	r4, [r3, #12]
 800be02:	4610      	mov	r0, r2
 800be04:	f7fa fd75 	bl	80068f2 <lwip_htons>
 800be08:	4603      	mov	r3, r0
 800be0a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	2200      	movs	r2, #0
 800be12:	749a      	strb	r2, [r3, #18]
 800be14:	2200      	movs	r2, #0
 800be16:	74da      	strb	r2, [r3, #19]
  return seg;
 800be18:	693b      	ldr	r3, [r7, #16]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	371c      	adds	r7, #28
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd90      	pop	{r4, r7, pc}
 800be22:	bf00      	nop
 800be24:	080174a4 	.word	0x080174a4
 800be28:	08017530 	.word	0x08017530
 800be2c:	08017508 	.word	0x08017508
 800be30:	20006e84 	.word	0x20006e84

0800be34 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b08a      	sub	sp, #40	; 0x28
 800be38:	af02      	add	r7, sp, #8
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	460b      	mov	r3, r1
 800be3e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800be40:	2300      	movs	r3, #0
 800be42:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800be44:	2300      	movs	r3, #0
 800be46:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800be48:	78fb      	ldrb	r3, [r7, #3]
 800be4a:	f003 0303 	and.w	r3, r3, #3
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d106      	bne.n	800be60 <tcp_enqueue_flags+0x2c>
 800be52:	4b7b      	ldr	r3, [pc, #492]	; (800c040 <tcp_enqueue_flags+0x20c>)
 800be54:	f240 321a 	movw	r2, #794	; 0x31a
 800be58:	497a      	ldr	r1, [pc, #488]	; (800c044 <tcp_enqueue_flags+0x210>)
 800be5a:	487b      	ldr	r0, [pc, #492]	; (800c048 <tcp_enqueue_flags+0x214>)
 800be5c:	f006 fc64 	bl	8012728 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be66:	2b08      	cmp	r3, #8
 800be68:	d806      	bhi.n	800be78 <tcp_enqueue_flags+0x44>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be70:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800be74:	4293      	cmp	r3, r2
 800be76:	d916      	bls.n	800bea6 <tcp_enqueue_flags+0x72>
      ((flags & TCP_FIN) == 0)) {
 800be78:	78fb      	ldrb	r3, [r7, #3]
 800be7a:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d111      	bne.n	800bea6 <tcp_enqueue_flags+0x72>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 800be82:	4b72      	ldr	r3, [pc, #456]	; (800c04c <tcp_enqueue_flags+0x218>)
 800be84:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800be88:	3301      	adds	r3, #1
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	4b6f      	ldr	r3, [pc, #444]	; (800c04c <tcp_enqueue_flags+0x218>)
 800be8e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	7e9b      	ldrb	r3, [r3, #26]
 800be96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800bea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bea4:	e0c7      	b.n	800c036 <tcp_enqueue_flags+0x202>
  }

  if (flags & TCP_SYN) {
 800bea6:	78fb      	ldrb	r3, [r7, #3]
 800bea8:	f003 0302 	and.w	r3, r3, #2
 800beac:	2b00      	cmp	r3, #0
 800beae:	d001      	beq.n	800beb4 <tcp_enqueue_flags+0x80>
    optflags = TF_SEG_OPTS_MSS;
 800beb0:	2301      	movs	r3, #1
 800beb2:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800beb4:	7ffb      	ldrb	r3, [r7, #31]
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	f003 0304 	and.w	r3, r3, #4
 800bebe:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bec0:	7dfb      	ldrb	r3, [r7, #23]
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	2200      	movs	r2, #0
 800bec6:	4619      	mov	r1, r3
 800bec8:	2000      	movs	r0, #0
 800beca:	f7fb fb6b 	bl	80075a4 <pbuf_alloc>
 800bece:	6138      	str	r0, [r7, #16]
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d111      	bne.n	800befa <tcp_enqueue_flags+0xc6>
    pcb->flags |= TF_NAGLEMEMERR;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	7e9b      	ldrb	r3, [r3, #26]
 800beda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bede:	b2da      	uxtb	r2, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800bee4:	4b59      	ldr	r3, [pc, #356]	; (800c04c <tcp_enqueue_flags+0x218>)
 800bee6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800beea:	3301      	adds	r3, #1
 800beec:	b29a      	uxth	r2, r3
 800beee:	4b57      	ldr	r3, [pc, #348]	; (800c04c <tcp_enqueue_flags+0x218>)
 800bef0:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 800bef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bef8:	e09d      	b.n	800c036 <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	895a      	ldrh	r2, [r3, #10]
 800befe:	7dfb      	ldrb	r3, [r7, #23]
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d206      	bcs.n	800bf14 <tcp_enqueue_flags+0xe0>
 800bf06:	4b4e      	ldr	r3, [pc, #312]	; (800c040 <tcp_enqueue_flags+0x20c>)
 800bf08:	f44f 7250 	mov.w	r2, #832	; 0x340
 800bf0c:	4950      	ldr	r1, [pc, #320]	; (800c050 <tcp_enqueue_flags+0x21c>)
 800bf0e:	484e      	ldr	r0, [pc, #312]	; (800c048 <tcp_enqueue_flags+0x214>)
 800bf10:	f006 fc0a 	bl	8012728 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800bf18:	78fa      	ldrb	r2, [r7, #3]
 800bf1a:	7ffb      	ldrb	r3, [r7, #31]
 800bf1c:	9300      	str	r3, [sp, #0]
 800bf1e:	460b      	mov	r3, r1
 800bf20:	6939      	ldr	r1, [r7, #16]
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f7ff fef4 	bl	800bd10 <tcp_create_segment>
 800bf28:	60f8      	str	r0, [r7, #12]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d111      	bne.n	800bf54 <tcp_enqueue_flags+0x120>
    pcb->flags |= TF_NAGLEMEMERR;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	7e9b      	ldrb	r3, [r3, #26]
 800bf34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bf38:	b2da      	uxtb	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800bf3e:	4b43      	ldr	r3, [pc, #268]	; (800c04c <tcp_enqueue_flags+0x218>)
 800bf40:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800bf44:	3301      	adds	r3, #1
 800bf46:	b29a      	uxth	r2, r3
 800bf48:	4b40      	ldr	r3, [pc, #256]	; (800c04c <tcp_enqueue_flags+0x218>)
 800bf4a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 800bf4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf52:	e070      	b.n	800c036 <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	f003 0303 	and.w	r3, r3, #3
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d006      	beq.n	800bf6e <tcp_enqueue_flags+0x13a>
 800bf60:	4b37      	ldr	r3, [pc, #220]	; (800c040 <tcp_enqueue_flags+0x20c>)
 800bf62:	f240 3249 	movw	r2, #841	; 0x349
 800bf66:	493b      	ldr	r1, [pc, #236]	; (800c054 <tcp_enqueue_flags+0x220>)
 800bf68:	4837      	ldr	r0, [pc, #220]	; (800c048 <tcp_enqueue_flags+0x214>)
 800bf6a:	f006 fbdd 	bl	8012728 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	891b      	ldrh	r3, [r3, #8]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d006      	beq.n	800bf84 <tcp_enqueue_flags+0x150>
 800bf76:	4b32      	ldr	r3, [pc, #200]	; (800c040 <tcp_enqueue_flags+0x20c>)
 800bf78:	f240 324a 	movw	r2, #842	; 0x34a
 800bf7c:	4936      	ldr	r1, [pc, #216]	; (800c058 <tcp_enqueue_flags+0x224>)
 800bf7e:	4832      	ldr	r0, [pc, #200]	; (800c048 <tcp_enqueue_flags+0x214>)
 800bf80:	f006 fbd2 	bl	8012728 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d103      	bne.n	800bf94 <tcp_enqueue_flags+0x160>
    pcb->unsent = seg;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	68fa      	ldr	r2, [r7, #12]
 800bf90:	669a      	str	r2, [r3, #104]	; 0x68
 800bf92:	e00d      	b.n	800bfb0 <tcp_enqueue_flags+0x17c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf98:	61bb      	str	r3, [r7, #24]
 800bf9a:	e002      	b.n	800bfa2 <tcp_enqueue_flags+0x16e>
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	61bb      	str	r3, [r7, #24]
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d1f8      	bne.n	800bf9c <tcp_enqueue_flags+0x168>
    useg->next = seg;
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800bfb8:	78fb      	ldrb	r3, [r7, #3]
 800bfba:	f003 0302 	and.w	r3, r3, #2
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d104      	bne.n	800bfcc <tcp_enqueue_flags+0x198>
 800bfc2:	78fb      	ldrb	r3, [r7, #3]
 800bfc4:	f003 0301 	and.w	r3, r3, #1
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d004      	beq.n	800bfd6 <tcp_enqueue_flags+0x1a2>
    pcb->snd_lbb++;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfd0:	1c5a      	adds	r2, r3, #1
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800bfd6:	78fb      	ldrb	r3, [r7, #3]
 800bfd8:	f003 0301 	and.w	r3, r3, #1
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d006      	beq.n	800bfee <tcp_enqueue_flags+0x1ba>
    pcb->flags |= TF_FIN;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	7e9b      	ldrb	r3, [r3, #26]
 800bfe4:	f043 0320 	orr.w	r3, r3, #32
 800bfe8:	b2da      	uxtb	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fb fee2 	bl	8007dbc <pbuf_clen>
 800bff8:	4603      	mov	r3, r0
 800bffa:	461a      	mov	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c002:	4413      	add	r3, r2
 800c004:	b29a      	uxth	r2, r3
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00e      	beq.n	800c034 <tcp_enqueue_flags+0x200>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10a      	bne.n	800c034 <tcp_enqueue_flags+0x200>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c022:	2b00      	cmp	r3, #0
 800c024:	d106      	bne.n	800c034 <tcp_enqueue_flags+0x200>
 800c026:	4b06      	ldr	r3, [pc, #24]	; (800c040 <tcp_enqueue_flags+0x20c>)
 800c028:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c02c:	490b      	ldr	r1, [pc, #44]	; (800c05c <tcp_enqueue_flags+0x228>)
 800c02e:	4806      	ldr	r0, [pc, #24]	; (800c048 <tcp_enqueue_flags+0x214>)
 800c030:	f006 fb7a 	bl	8012728 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c034:	2300      	movs	r3, #0
}
 800c036:	4618      	mov	r0, r3
 800c038:	3720      	adds	r7, #32
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	080174a4 	.word	0x080174a4
 800c044:	080177a8 	.word	0x080177a8
 800c048:	08017508 	.word	0x08017508
 800c04c:	20006e84 	.word	0x20006e84
 800c050:	08017800 	.word	0x08017800
 800c054:	0801783c 	.word	0x0801783c
 800c058:	08017854 	.word	0x08017854
 800c05c:	08017880 	.word	0x08017880

0800c060 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c060:	b590      	push	{r4, r7, lr}
 800c062:	b08b      	sub	sp, #44	; 0x2c
 800c064:	af04      	add	r7, sp, #16
 800c066:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800c068:	2300      	movs	r3, #0
 800c06a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c06c:	7dbb      	ldrb	r3, [r7, #22]
 800c06e:	b29c      	uxth	r4, r3
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c074:	4618      	mov	r0, r3
 800c076:	f7fa fc49 	bl	800690c <lwip_htonl>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2200      	movs	r2, #0
 800c07e:	4621      	mov	r1, r4
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f7ff fd8b 	bl	800bb9c <tcp_output_alloc_header>
 800c086:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d109      	bne.n	800c0a2 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	7e9b      	ldrb	r3, [r3, #26]
 800c092:	f043 0303 	orr.w	r3, r3, #3
 800c096:	b2da      	uxtb	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c09c:	f06f 0301 	mvn.w	r3, #1
 800c0a0:	e036      	b.n	800c110 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	3304      	adds	r3, #4
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f002 fbce 	bl	800e848 <ip4_route>
 800c0ac:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d102      	bne.n	800c0ba <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800c0b4:	23fc      	movs	r3, #252	; 0xfc
 800c0b6:	75fb      	strb	r3, [r7, #23]
 800c0b8:	e012      	b.n	800c0e0 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800c0ba:	6879      	ldr	r1, [r7, #4]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	1d18      	adds	r0, r3, #4
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	7a9c      	ldrb	r4, [r3, #10]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	7a5b      	ldrb	r3, [r3, #9]
 800c0c8:	68fa      	ldr	r2, [r7, #12]
 800c0ca:	9202      	str	r2, [sp, #8]
 800c0cc:	2206      	movs	r2, #6
 800c0ce:	9201      	str	r2, [sp, #4]
 800c0d0:	9300      	str	r3, [sp, #0]
 800c0d2:	4623      	mov	r3, r4
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	6938      	ldr	r0, [r7, #16]
 800c0d8:	f002 fdb8 	bl	800ec4c <ip4_output_if>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800c0e0:	6938      	ldr	r0, [r7, #16]
 800c0e2:	f7fb fdd7 	bl	8007c94 <pbuf_free>

  if (err != ERR_OK) {
 800c0e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d007      	beq.n	800c0fe <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	7e9b      	ldrb	r3, [r3, #26]
 800c0f2:	f043 0303 	orr.w	r3, r3, #3
 800c0f6:	b2da      	uxtb	r2, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	769a      	strb	r2, [r3, #26]
 800c0fc:	e006      	b.n	800c10c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	7e9b      	ldrb	r3, [r3, #26]
 800c102:	f023 0303 	bic.w	r3, r3, #3
 800c106:	b2da      	uxtb	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800c10c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c110:	4618      	mov	r0, r3
 800c112:	371c      	adds	r7, #28
 800c114:	46bd      	mov	sp, r7
 800c116:	bd90      	pop	{r4, r7, pc}

0800c118 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c118:	b5b0      	push	{r4, r5, r7, lr}
 800c11a:	b08a      	sub	sp, #40	; 0x28
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	7d1b      	ldrb	r3, [r3, #20]
 800c124:	2b01      	cmp	r3, #1
 800c126:	d106      	bne.n	800c136 <tcp_output+0x1e>
 800c128:	4b99      	ldr	r3, [pc, #612]	; (800c390 <tcp_output+0x278>)
 800c12a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800c12e:	4999      	ldr	r1, [pc, #612]	; (800c394 <tcp_output+0x27c>)
 800c130:	4899      	ldr	r0, [pc, #612]	; (800c398 <tcp_output+0x280>)
 800c132:	f006 faf9 	bl	8012728 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c136:	4b99      	ldr	r3, [pc, #612]	; (800c39c <tcp_output+0x284>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d101      	bne.n	800c144 <tcp_output+0x2c>
    return ERR_OK;
 800c140:	2300      	movs	r3, #0
 800c142:	e1cb      	b.n	800c4dc <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c150:	4293      	cmp	r3, r2
 800c152:	bf28      	it	cs
 800c154:	4613      	movcs	r3, r2
 800c156:	b29b      	uxth	r3, r3
 800c158:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c15e:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	7e9b      	ldrb	r3, [r3, #26]
 800c164:	f003 0302 	and.w	r3, r3, #2
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d017      	beq.n	800c19c <tcp_output+0x84>
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d00f      	beq.n	800c192 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800c172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	4618      	mov	r0, r3
 800c17a:	f7fa fbc7 	bl	800690c <lwip_htonl>
 800c17e:	4602      	mov	r2, r0
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c184:	1ad3      	subs	r3, r2, r3
 800c186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c188:	8912      	ldrh	r2, [r2, #8]
 800c18a:	4413      	add	r3, r2
     (seg == NULL ||
 800c18c:	69ba      	ldr	r2, [r7, #24]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d204      	bcs.n	800c19c <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f7ff ff64 	bl	800c060 <tcp_send_empty_ack>
 800c198:	4603      	mov	r3, r0
 800c19a:	e19f      	b.n	800c4dc <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1a0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c1a2:	6a3b      	ldr	r3, [r7, #32]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d007      	beq.n	800c1b8 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 800c1a8:	e002      	b.n	800c1b0 <tcp_output+0x98>
 800c1aa:	6a3b      	ldr	r3, [r7, #32]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	623b      	str	r3, [r7, #32]
 800c1b0:	6a3b      	ldr	r3, [r7, #32]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d1f8      	bne.n	800c1aa <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	3304      	adds	r3, #4
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f002 fb43 	bl	800e848 <ip4_route>
 800c1c2:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d102      	bne.n	800c1d0 <tcp_output+0xb8>
    return ERR_RTE;
 800c1ca:	f06f 0303 	mvn.w	r3, #3
 800c1ce:	e185      	b.n	800c4dc <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d003      	beq.n	800c1de <tcp_output+0xc6>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d111      	bne.n	800c202 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d002      	beq.n	800c1ea <tcp_output+0xd2>
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	e000      	b.n	800c1ec <tcp_output+0xd4>
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d102      	bne.n	800c1fa <tcp_output+0xe2>
      return ERR_RTE;
 800c1f4:	f06f 0303 	mvn.w	r3, #3
 800c1f8:	e170      	b.n	800c4dc <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800c202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c204:	2b00      	cmp	r3, #0
 800c206:	f000 813f 	beq.w	800c488 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800c20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	4618      	mov	r0, r3
 800c212:	f7fa fb7b 	bl	800690c <lwip_htonl>
 800c216:	4602      	mov	r2, r0
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c21c:	1ad3      	subs	r3, r2, r3
 800c21e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c220:	8912      	ldrh	r2, [r2, #8]
 800c222:	4413      	add	r3, r2
  if (seg != NULL &&
 800c224:	69ba      	ldr	r2, [r7, #24]
 800c226:	429a      	cmp	r2, r3
 800c228:	f080 812e 	bcs.w	800c488 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	f000 812a 	beq.w	800c488 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c23a:	461a      	mov	r2, r3
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	4293      	cmp	r3, r2
 800c240:	f040 8122 	bne.w	800c488 <tcp_output+0x370>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f040 811d 	bne.w	800c488 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c254:	2b00      	cmp	r3, #0
 800c256:	f040 812c 	bne.w	800c4b2 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800c26a:	e122      	b.n	800c4b2 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	899b      	ldrh	r3, [r3, #12]
 800c272:	b29b      	uxth	r3, r3
 800c274:	4618      	mov	r0, r3
 800c276:	f7fa fb3c 	bl	80068f2 <lwip_htons>
 800c27a:	4603      	mov	r3, r0
 800c27c:	f003 0304 	and.w	r3, r3, #4
 800c280:	2b00      	cmp	r3, #0
 800c282:	d006      	beq.n	800c292 <tcp_output+0x17a>
 800c284:	4b42      	ldr	r3, [pc, #264]	; (800c390 <tcp_output+0x278>)
 800c286:	f240 4245 	movw	r2, #1093	; 0x445
 800c28a:	4945      	ldr	r1, [pc, #276]	; (800c3a0 <tcp_output+0x288>)
 800c28c:	4842      	ldr	r0, [pc, #264]	; (800c398 <tcp_output+0x280>)
 800c28e:	f006 fa4b 	bl	8012728 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c296:	2b00      	cmp	r3, #0
 800c298:	d01f      	beq.n	800c2da <tcp_output+0x1c2>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	7e9b      	ldrb	r3, [r3, #26]
 800c29e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d119      	bne.n	800c2da <tcp_output+0x1c2>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d00b      	beq.n	800c2c6 <tcp_output+0x1ae>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d110      	bne.n	800c2da <tcp_output+0x1c2>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2bc:	891a      	ldrh	r2, [r3, #8]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d209      	bcs.n	800c2da <tcp_output+0x1c2>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d004      	beq.n	800c2da <tcp_output+0x1c2>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2d6:	2b08      	cmp	r3, #8
 800c2d8:	d901      	bls.n	800c2de <tcp_output+0x1c6>
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e000      	b.n	800c2e0 <tcp_output+0x1c8>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d106      	bne.n	800c2f2 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	7e9b      	ldrb	r3, [r3, #26]
 800c2e8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f000 80e2 	beq.w	800c4b6 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	7d1b      	ldrb	r3, [r3, #20]
 800c2f6:	2b02      	cmp	r3, #2
 800c2f8:	d00d      	beq.n	800c316 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	899b      	ldrh	r3, [r3, #12]
 800c300:	b29c      	uxth	r4, r3
 800c302:	2010      	movs	r0, #16
 800c304:	f7fa faf5 	bl	80068f2 <lwip_htons>
 800c308:	4603      	mov	r3, r0
 800c30a:	461a      	mov	r2, r3
 800c30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	4322      	orrs	r2, r4
 800c312:	b292      	uxth	r2, r2
 800c314:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800c316:	697a      	ldr	r2, [r7, #20]
 800c318:	6879      	ldr	r1, [r7, #4]
 800c31a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c31c:	f000 f8e2 	bl	800c4e4 <tcp_output_segment>
 800c320:	4603      	mov	r3, r0
 800c322:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d009      	beq.n	800c340 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	7e9b      	ldrb	r3, [r3, #26]
 800c330:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c334:	b2da      	uxtb	r2, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	769a      	strb	r2, [r3, #26]
      return err;
 800c33a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c33e:	e0cd      	b.n	800c4dc <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800c340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	7d1b      	ldrb	r3, [r3, #20]
 800c34c:	2b02      	cmp	r3, #2
 800c34e:	d006      	beq.n	800c35e <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	7e9b      	ldrb	r3, [r3, #26]
 800c354:	f023 0303 	bic.w	r3, r3, #3
 800c358:	b2da      	uxtb	r2, r3
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	4618      	mov	r0, r3
 800c366:	f7fa fad1 	bl	800690c <lwip_htonl>
 800c36a:	4604      	mov	r4, r0
 800c36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36e:	891b      	ldrh	r3, [r3, #8]
 800c370:	461d      	mov	r5, r3
 800c372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	899b      	ldrh	r3, [r3, #12]
 800c378:	b29b      	uxth	r3, r3
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7fa fab9 	bl	80068f2 <lwip_htons>
 800c380:	4603      	mov	r3, r0
 800c382:	f003 0303 	and.w	r3, r3, #3
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00c      	beq.n	800c3a4 <tcp_output+0x28c>
 800c38a:	2301      	movs	r3, #1
 800c38c:	e00b      	b.n	800c3a6 <tcp_output+0x28e>
 800c38e:	bf00      	nop
 800c390:	080174a4 	.word	0x080174a4
 800c394:	080178a8 	.word	0x080178a8
 800c398:	08017508 	.word	0x08017508
 800c39c:	20006fa8 	.word	0x20006fa8
 800c3a0:	080178d0 	.word	0x080178d0
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	442b      	add	r3, r5
 800c3a8:	4423      	add	r3, r4
 800c3aa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	1ad3      	subs	r3, r2, r3
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	da02      	bge.n	800c3be <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	68ba      	ldr	r2, [r7, #8]
 800c3bc:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c0:	891b      	ldrh	r3, [r3, #8]
 800c3c2:	461c      	mov	r4, r3
 800c3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	899b      	ldrh	r3, [r3, #12]
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7fa fa90 	bl	80068f2 <lwip_htons>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	f003 0303 	and.w	r3, r3, #3
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d001      	beq.n	800c3e0 <tcp_output+0x2c8>
 800c3dc:	2301      	movs	r3, #1
 800c3de:	e000      	b.n	800c3e2 <tcp_output+0x2ca>
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	4423      	add	r3, r4
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d049      	beq.n	800c47c <tcp_output+0x364>
      seg->next = NULL;
 800c3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d105      	bne.n	800c402 <tcp_output+0x2ea>
        pcb->unacked = seg;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3fa:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800c3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fe:	623b      	str	r3, [r7, #32]
 800c400:	e03f      	b.n	800c482 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	4618      	mov	r0, r3
 800c40a:	f7fa fa7f 	bl	800690c <lwip_htonl>
 800c40e:	4604      	mov	r4, r0
 800c410:	6a3b      	ldr	r3, [r7, #32]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	4618      	mov	r0, r3
 800c418:	f7fa fa78 	bl	800690c <lwip_htonl>
 800c41c:	4603      	mov	r3, r0
 800c41e:	1ae3      	subs	r3, r4, r3
 800c420:	2b00      	cmp	r3, #0
 800c422:	da24      	bge.n	800c46e <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	336c      	adds	r3, #108	; 0x6c
 800c428:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c42a:	e002      	b.n	800c432 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d011      	beq.n	800c45e <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	4618      	mov	r0, r3
 800c444:	f7fa fa62 	bl	800690c <lwip_htonl>
 800c448:	4604      	mov	r4, r0
 800c44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	4618      	mov	r0, r3
 800c452:	f7fa fa5b 	bl	800690c <lwip_htonl>
 800c456:	4603      	mov	r3, r0
 800c458:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	dbe6      	blt.n	800c42c <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c464:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c466:	69fb      	ldr	r3, [r7, #28]
 800c468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c46a:	601a      	str	r2, [r3, #0]
 800c46c:	e009      	b.n	800c482 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c46e:	6a3b      	ldr	r3, [r7, #32]
 800c470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c472:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c474:	6a3b      	ldr	r3, [r7, #32]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	623b      	str	r3, [r7, #32]
 800c47a:	e002      	b.n	800c482 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c47c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c47e:	f7fc fdff 	bl	8009080 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c486:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d015      	beq.n	800c4ba <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	4618      	mov	r0, r3
 800c496:	f7fa fa39 	bl	800690c <lwip_htonl>
 800c49a:	4602      	mov	r2, r0
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4a0:	1ad3      	subs	r3, r2, r3
 800c4a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4a4:	8912      	ldrh	r2, [r2, #8]
 800c4a6:	4413      	add	r3, r2
  while (seg != NULL &&
 800c4a8:	69ba      	ldr	r2, [r7, #24]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	f4bf aede 	bcs.w	800c26c <tcp_output+0x154>
  }
output_done:
 800c4b0:	e003      	b.n	800c4ba <tcp_output+0x3a2>
    goto output_done;
 800c4b2:	bf00      	nop
 800c4b4:	e002      	b.n	800c4bc <tcp_output+0x3a4>
      break;
 800c4b6:	bf00      	nop
 800c4b8:	e000      	b.n	800c4bc <tcp_output+0x3a4>
output_done:
 800c4ba:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d103      	bne.n	800c4cc <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	7e9b      	ldrb	r3, [r3, #26]
 800c4d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4d4:	b2da      	uxtb	r2, r3
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800c4da:	2300      	movs	r3, #0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3728      	adds	r7, #40	; 0x28
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bdb0      	pop	{r4, r5, r7, pc}

0800c4e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c4e4:	b5b0      	push	{r4, r5, r7, lr}
 800c4e6:	b08c      	sub	sp, #48	; 0x30
 800c4e8:	af04      	add	r7, sp, #16
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	89db      	ldrh	r3, [r3, #14]
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d001      	beq.n	800c4fe <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	e092      	b.n	800c624 <tcp_output_segment+0x140>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	68dc      	ldr	r4, [r3, #12]
 800c506:	4610      	mov	r0, r2
 800c508:	f7fa fa00 	bl	800690c <lwip_htonl>
 800c50c:	4603      	mov	r3, r0
 800c50e:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	68dc      	ldr	r4, [r3, #12]
 800c518:	4610      	mov	r0, r2
 800c51a:	f7fa f9ea 	bl	80068f2 <lwip_htons>
 800c51e:	4603      	mov	r3, r0
 800c520:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c526:	68ba      	ldr	r2, [r7, #8]
 800c528:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c52a:	441a      	add	r2, r3
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	3314      	adds	r3, #20
 800c536:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	7a9b      	ldrb	r3, [r3, #10]
 800c53c:	f003 0301 	and.w	r3, r3, #1
 800c540:	2b00      	cmp	r3, #0
 800c542:	d014      	beq.n	800c56e <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	3304      	adds	r3, #4
 800c548:	4619      	mov	r1, r3
 800c54a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c54e:	f7fd f829 	bl	80095a4 <tcp_eff_send_mss_impl>
 800c552:	4603      	mov	r3, r0
 800c554:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c556:	8b7b      	ldrh	r3, [r7, #26]
 800c558:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7fa f9d5 	bl	800690c <lwip_htonl>
 800c562:	4602      	mov	r2, r0
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	3304      	adds	r3, #4
 800c56c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c574:	2b00      	cmp	r3, #0
 800c576:	da02      	bge.n	800c57e <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	2200      	movs	r2, #0
 800c57c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c582:	2b00      	cmp	r3, #0
 800c584:	d10c      	bne.n	800c5a0 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800c586:	4b29      	ldr	r3, [pc, #164]	; (800c62c <tcp_output_segment+0x148>)
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	4618      	mov	r0, r3
 800c596:	f7fa f9b9 	bl	800690c <lwip_htonl>
 800c59a:	4602      	mov	r2, r0
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	68da      	ldr	r2, [r3, #12]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	1ad3      	subs	r3, r2, r3
 800c5ac:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	685b      	ldr	r3, [r3, #4]
 800c5b2:	8959      	ldrh	r1, [r3, #10]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	8b3a      	ldrh	r2, [r7, #24]
 800c5ba:	1a8a      	subs	r2, r1, r2
 800c5bc:	b292      	uxth	r2, r2
 800c5be:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	8919      	ldrh	r1, [r3, #8]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	8b3a      	ldrh	r2, [r7, #24]
 800c5cc:	1a8a      	subs	r2, r1, r2
 800c5ce:	b292      	uxth	r2, r2
 800c5d0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	68d2      	ldr	r2, [r2, #12]
 800c5da:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	741a      	strb	r2, [r3, #16]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	745a      	strb	r2, [r3, #17]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 800c5e8:	4b11      	ldr	r3, [pc, #68]	; (800c630 <tcp_output_segment+0x14c>)
 800c5ea:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800c5ee:	3301      	adds	r3, #1
 800c5f0:	b29a      	uxth	r2, r3
 800c5f2:	4b0f      	ldr	r3, [pc, #60]	; (800c630 <tcp_output_segment+0x14c>)
 800c5f4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6858      	ldr	r0, [r3, #4]
 800c5fc:	68b9      	ldr	r1, [r7, #8]
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	1d1c      	adds	r4, r3, #4
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	7a9d      	ldrb	r5, [r3, #10]
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	7a5b      	ldrb	r3, [r3, #9]
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	9202      	str	r2, [sp, #8]
 800c60e:	2206      	movs	r2, #6
 800c610:	9201      	str	r2, [sp, #4]
 800c612:	9300      	str	r3, [sp, #0]
 800c614:	462b      	mov	r3, r5
 800c616:	4622      	mov	r2, r4
 800c618:	f002 fb18 	bl	800ec4c <ip4_output_if>
 800c61c:	4603      	mov	r3, r0
 800c61e:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800c620:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c624:	4618      	mov	r0, r3
 800c626:	3720      	adds	r7, #32
 800c628:	46bd      	mov	sp, r7
 800c62a:	bdb0      	pop	{r4, r5, r7, pc}
 800c62c:	20006f5c 	.word	0x20006f5c
 800c630:	20006e84 	.word	0x20006e84

0800c634 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b08c      	sub	sp, #48	; 0x30
 800c638:	af04      	add	r7, sp, #16
 800c63a:	60f8      	str	r0, [r7, #12]
 800c63c:	60b9      	str	r1, [r7, #8]
 800c63e:	607a      	str	r2, [r7, #4]
 800c640:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800c642:	2200      	movs	r2, #0
 800c644:	2114      	movs	r1, #20
 800c646:	2001      	movs	r0, #1
 800c648:	f7fa ffac 	bl	80075a4 <pbuf_alloc>
 800c64c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d063      	beq.n	800c71c <tcp_rst+0xe8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c654:	69fb      	ldr	r3, [r7, #28]
 800c656:	895b      	ldrh	r3, [r3, #10]
 800c658:	2b13      	cmp	r3, #19
 800c65a:	d806      	bhi.n	800c66a <tcp_rst+0x36>
 800c65c:	4b31      	ldr	r3, [pc, #196]	; (800c724 <tcp_rst+0xf0>)
 800c65e:	f240 524c 	movw	r2, #1356	; 0x54c
 800c662:	4931      	ldr	r1, [pc, #196]	; (800c728 <tcp_rst+0xf4>)
 800c664:	4831      	ldr	r0, [pc, #196]	; (800c72c <tcp_rst+0xf8>)
 800c666:	f006 f85f 	bl	8012728 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800c670:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c672:	4618      	mov	r0, r3
 800c674:	f7fa f93d 	bl	80068f2 <lwip_htons>
 800c678:	4603      	mov	r3, r0
 800c67a:	461a      	mov	r2, r3
 800c67c:	69bb      	ldr	r3, [r7, #24]
 800c67e:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800c680:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c682:	4618      	mov	r0, r3
 800c684:	f7fa f935 	bl	80068f2 <lwip_htons>
 800c688:	4603      	mov	r3, r0
 800c68a:	461a      	mov	r2, r3
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800c690:	68f8      	ldr	r0, [r7, #12]
 800c692:	f7fa f93b 	bl	800690c <lwip_htonl>
 800c696:	4602      	mov	r2, r0
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800c69c:	68b8      	ldr	r0, [r7, #8]
 800c69e:	f7fa f935 	bl	800690c <lwip_htonl>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800c6a8:	f245 0014 	movw	r0, #20500	; 0x5014
 800c6ac:	f7fa f921 	bl	80068f2 <lwip_htons>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f042 0208 	orr.w	r2, r2, #8
 800c6c0:	739a      	strb	r2, [r3, #14]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800c6c8:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	741a      	strb	r2, [r3, #16]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800c6d4:	69bb      	ldr	r3, [r7, #24]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	749a      	strb	r2, [r3, #18]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
 800c6de:	4b14      	ldr	r3, [pc, #80]	; (800c730 <tcp_rst+0xfc>)
 800c6e0:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	4b11      	ldr	r3, [pc, #68]	; (800c730 <tcp_rst+0xfc>)
 800c6ea:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800c6ee:	6838      	ldr	r0, [r7, #0]
 800c6f0:	f002 f8aa 	bl	800e848 <ip4_route>
 800c6f4:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d00b      	beq.n	800c714 <tcp_rst+0xe0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	9302      	str	r3, [sp, #8]
 800c700:	2306      	movs	r3, #6
 800c702:	9301      	str	r3, [sp, #4]
 800c704:	2300      	movs	r3, #0
 800c706:	9300      	str	r3, [sp, #0]
 800c708:	23ff      	movs	r3, #255	; 0xff
 800c70a:	683a      	ldr	r2, [r7, #0]
 800c70c:	6879      	ldr	r1, [r7, #4]
 800c70e:	69f8      	ldr	r0, [r7, #28]
 800c710:	f002 fa9c 	bl	800ec4c <ip4_output_if>
  }
  pbuf_free(p);
 800c714:	69f8      	ldr	r0, [r7, #28]
 800c716:	f7fb fabd 	bl	8007c94 <pbuf_free>
 800c71a:	e000      	b.n	800c71e <tcp_rst+0xea>
    return;
 800c71c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c71e:	3720      	adds	r7, #32
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	080174a4 	.word	0x080174a4
 800c728:	080174d8 	.word	0x080174d8
 800c72c:	08017508 	.word	0x08017508
 800c730:	20006e84 	.word	0x20006e84

0800c734 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c740:	2b00      	cmp	r3, #0
 800c742:	d029      	beq.n	800c798 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c748:	60fb      	str	r3, [r7, #12]
 800c74a:	e002      	b.n	800c752 <tcp_rexmit_rto+0x1e>
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	60fb      	str	r3, [r7, #12]
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d1f8      	bne.n	800c74c <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2200      	movs	r2, #0
 800c76e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c776:	2bff      	cmp	r3, #255	; 0xff
 800c778:	d007      	beq.n	800c78a <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c780:	3301      	adds	r3, #1
 800c782:	b2da      	uxtb	r2, r3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2200      	movs	r2, #0
 800c78e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f7ff fcc1 	bl	800c118 <tcp_output>
 800c796:	e000      	b.n	800c79a <tcp_rexmit_rto+0x66>
    return;
 800c798:	bf00      	nop
}
 800c79a:	3710      	adds	r7, #16
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c7a0:	b590      	push	{r4, r7, lr}
 800c7a2:	b085      	sub	sp, #20
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d043      	beq.n	800c838 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7b4:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	681a      	ldr	r2, [r3, #0]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	3368      	adds	r3, #104	; 0x68
 800c7c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c7c4:	e002      	b.n	800c7cc <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d011      	beq.n	800c7f8 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7fa f895 	bl	800690c <lwip_htonl>
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	68db      	ldr	r3, [r3, #12]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7fa f88e 	bl	800690c <lwip_htonl>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	dbe6      	blt.n	800c7c6 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	68ba      	ldr	r2, [r7, #8]
 800c804:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d103      	bne.n	800c816 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c81c:	2bff      	cmp	r3, #255	; 0xff
 800c81e:	d007      	beq.n	800c830 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c826:	3301      	adds	r3, #1
 800c828:	b2da      	uxtb	r2, r3
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2200      	movs	r2, #0
 800c834:	635a      	str	r2, [r3, #52]	; 0x34
 800c836:	e000      	b.n	800c83a <tcp_rexmit+0x9a>
    return;
 800c838:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800c83a:	3714      	adds	r7, #20
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd90      	pop	{r4, r7, pc}

0800c840 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b082      	sub	sp, #8
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d041      	beq.n	800c8d4 <tcp_rexmit_fast+0x94>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	7e9b      	ldrb	r3, [r3, #26]
 800c854:	f003 0304 	and.w	r3, r3, #4
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d13b      	bne.n	800c8d4 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f7ff ff9f 	bl	800c7a0 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c86e:	4293      	cmp	r3, r2
 800c870:	bf28      	it	cs
 800c872:	4613      	movcs	r3, r2
 800c874:	b29b      	uxth	r3, r3
 800c876:	0fda      	lsrs	r2, r3, #31
 800c878:	4413      	add	r3, r2
 800c87a:	105b      	asrs	r3, r3, #1
 800c87c:	b29a      	uxth	r2, r3
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c88a:	461a      	mov	r2, r3
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c890:	005b      	lsls	r3, r3, #1
 800c892:	429a      	cmp	r2, r3
 800c894:	d206      	bcs.n	800c8a4 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c89a:	005b      	lsls	r3, r3, #1
 800c89c:	b29a      	uxth	r2, r3
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	0049      	lsls	r1, r1, #1
 800c8b2:	440b      	add	r3, r1
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	4413      	add	r3, r2
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	7e9b      	ldrb	r3, [r3, #26]
 800c8c4:	f043 0304 	orr.w	r3, r3, #4
 800c8c8:	b2da      	uxtb	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800c8d4:	bf00      	nop
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b08a      	sub	sp, #40	; 0x28
 800c8e0:	af04      	add	r7, sp, #16
 800c8e2:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7fa f80e 	bl	800690c <lwip_htonl>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	2100      	movs	r1, #0
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f7ff f950 	bl	800bb9c <tcp_output_alloc_header>
 800c8fc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d102      	bne.n	800c90a <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c908:	e029      	b.n	800c95e <tcp_keepalive+0x82>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	3304      	adds	r3, #4
 800c90e:	4618      	mov	r0, r3
 800c910:	f001 ff9a 	bl	800e848 <ip4_route>
 800c914:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d102      	bne.n	800c922 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800c91c:	23fc      	movs	r3, #252	; 0xfc
 800c91e:	75fb      	strb	r3, [r7, #23]
 800c920:	e018      	b.n	800c954 <tcp_keepalive+0x78>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
 800c922:	4b11      	ldr	r3, [pc, #68]	; (800c968 <tcp_keepalive+0x8c>)
 800c924:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800c928:	3301      	adds	r3, #1
 800c92a:	b29a      	uxth	r2, r3
 800c92c:	4b0e      	ldr	r3, [pc, #56]	; (800c968 <tcp_keepalive+0x8c>)
 800c92e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800c932:	6879      	ldr	r1, [r7, #4]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	1d1a      	adds	r2, r3, #4
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	7a98      	ldrb	r0, [r3, #10]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	9302      	str	r3, [sp, #8]
 800c940:	2306      	movs	r3, #6
 800c942:	9301      	str	r3, [sp, #4]
 800c944:	2300      	movs	r3, #0
 800c946:	9300      	str	r3, [sp, #0]
 800c948:	4603      	mov	r3, r0
 800c94a:	6938      	ldr	r0, [r7, #16]
 800c94c:	f002 f97e 	bl	800ec4c <ip4_output_if>
 800c950:	4603      	mov	r3, r0
 800c952:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800c954:	6938      	ldr	r0, [r7, #16]
 800c956:	f7fb f99d 	bl	8007c94 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c95a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3718      	adds	r7, #24
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	20006e84 	.word	0x20006e84

0800c96c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c96c:	b590      	push	{r4, r7, lr}
 800c96e:	b08f      	sub	sp, #60	; 0x3c
 800c970:	af04      	add	r7, sp, #16
 800c972:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c978:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800c97a:	6a3b      	ldr	r3, [r7, #32]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d102      	bne.n	800c986 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c984:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800c986:	6a3b      	ldr	r3, [r7, #32]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d101      	bne.n	800c990 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800c98c:	2300      	movs	r3, #0
 800c98e:	e08d      	b.n	800caac <tcp_zero_window_probe+0x140>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c990:	6a3b      	ldr	r3, [r7, #32]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	899b      	ldrh	r3, [r3, #12]
 800c996:	b29b      	uxth	r3, r3
 800c998:	4618      	mov	r0, r3
 800c99a:	f7f9 ffaa 	bl	80068f2 <lwip_htons>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	f003 0301 	and.w	r3, r3, #1
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d005      	beq.n	800c9b4 <tcp_zero_window_probe+0x48>
 800c9a8:	6a3b      	ldr	r3, [r7, #32]
 800c9aa:	891b      	ldrh	r3, [r3, #8]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d101      	bne.n	800c9b4 <tcp_zero_window_probe+0x48>
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	e000      	b.n	800c9b6 <tcp_zero_window_probe+0x4a>
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c9b8:	7ffb      	ldrb	r3, [r7, #31]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	bf0c      	ite	eq
 800c9be:	2301      	moveq	r3, #1
 800c9c0:	2300      	movne	r3, #0
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800c9c6:	6a3b      	ldr	r3, [r7, #32]
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	8bba      	ldrh	r2, [r7, #28]
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f7ff f8e3 	bl	800bb9c <tcp_output_alloc_header>
 800c9d6:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d102      	bne.n	800c9e4 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c9de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9e2:	e063      	b.n	800caac <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c9e4:	69bb      	ldr	r3, [r7, #24]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c9ea:	7ffb      	ldrb	r3, [r7, #31]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d00e      	beq.n	800ca0e <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	899b      	ldrh	r3, [r3, #12]
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c9fa:	b29c      	uxth	r4, r3
 800c9fc:	2011      	movs	r0, #17
 800c9fe:	f7f9 ff78 	bl	80068f2 <lwip_htons>
 800ca02:	4603      	mov	r3, r0
 800ca04:	4323      	orrs	r3, r4
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	819a      	strh	r2, [r3, #12]
 800ca0c:	e010      	b.n	800ca30 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	3314      	adds	r3, #20
 800ca14:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ca16:	6a3b      	ldr	r3, [r7, #32]
 800ca18:	6858      	ldr	r0, [r3, #4]
 800ca1a:	6a3b      	ldr	r3, [r7, #32]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	891a      	ldrh	r2, [r3, #8]
 800ca20:	6a3b      	ldr	r3, [r7, #32]
 800ca22:	891b      	ldrh	r3, [r3, #8]
 800ca24:	1ad3      	subs	r3, r2, r3
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	2201      	movs	r2, #1
 800ca2a:	6939      	ldr	r1, [r7, #16]
 800ca2c:	f7fb fb30 	bl	8008090 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ca30:	6a3b      	ldr	r3, [r7, #32]
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7f9 ff68 	bl	800690c <lwip_htonl>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	3301      	adds	r3, #1
 800ca40:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	1ad3      	subs	r3, r2, r3
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	da02      	bge.n	800ca54 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	3304      	adds	r3, #4
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f001 fef5 	bl	800e848 <ip4_route>
 800ca5e:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d103      	bne.n	800ca6e <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800ca66:	23fc      	movs	r3, #252	; 0xfc
 800ca68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca6c:	e019      	b.n	800caa2 <tcp_zero_window_probe+0x136>
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    TCP_STATS_INC(tcp.xmit);
 800ca6e:	4b11      	ldr	r3, [pc, #68]	; (800cab4 <tcp_zero_window_probe+0x148>)
 800ca70:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800ca74:	3301      	adds	r3, #1
 800ca76:	b29a      	uxth	r2, r3
 800ca78:	4b0e      	ldr	r3, [pc, #56]	; (800cab4 <tcp_zero_window_probe+0x148>)
 800ca7a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ca7e:	6879      	ldr	r1, [r7, #4]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	1d1a      	adds	r2, r3, #4
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	7a98      	ldrb	r0, [r3, #10]
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	9302      	str	r3, [sp, #8]
 800ca8c:	2306      	movs	r3, #6
 800ca8e:	9301      	str	r3, [sp, #4]
 800ca90:	2300      	movs	r3, #0
 800ca92:	9300      	str	r3, [sp, #0]
 800ca94:	4603      	mov	r3, r0
 800ca96:	69b8      	ldr	r0, [r7, #24]
 800ca98:	f002 f8d8 	bl	800ec4c <ip4_output_if>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800caa2:	69b8      	ldr	r0, [r7, #24]
 800caa4:	f7fb f8f6 	bl	8007c94 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800caa8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800caac:	4618      	mov	r0, r3
 800caae:	372c      	adds	r7, #44	; 0x2c
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd90      	pop	{r4, r7, pc}
 800cab4:	20006e84 	.word	0x20006e84

0800cab8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800cac0:	f7fb fbfe 	bl	80082c0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800cac4:	4b0a      	ldr	r3, [pc, #40]	; (800caf0 <tcpip_tcp_timer+0x38>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d103      	bne.n	800cad4 <tcpip_tcp_timer+0x1c>
 800cacc:	4b09      	ldr	r3, [pc, #36]	; (800caf4 <tcpip_tcp_timer+0x3c>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d005      	beq.n	800cae0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cad4:	2200      	movs	r2, #0
 800cad6:	4908      	ldr	r1, [pc, #32]	; (800caf8 <tcpip_tcp_timer+0x40>)
 800cad8:	20fa      	movs	r0, #250	; 0xfa
 800cada:	f000 f86f 	bl	800cbbc <sys_timeout>
 800cade:	e003      	b.n	800cae8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800cae0:	4b06      	ldr	r3, [pc, #24]	; (800cafc <tcpip_tcp_timer+0x44>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	601a      	str	r2, [r3, #0]
  }
}
 800cae6:	bf00      	nop
 800cae8:	bf00      	nop
 800caea:	3708      	adds	r7, #8
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	20006f68 	.word	0x20006f68
 800caf4:	20006f6c 	.word	0x20006f6c
 800caf8:	0800cab9 	.word	0x0800cab9
 800cafc:	20006fb4 	.word	0x20006fb4

0800cb00 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cb04:	4b0a      	ldr	r3, [pc, #40]	; (800cb30 <tcp_timer_needed+0x30>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d10f      	bne.n	800cb2c <tcp_timer_needed+0x2c>
 800cb0c:	4b09      	ldr	r3, [pc, #36]	; (800cb34 <tcp_timer_needed+0x34>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d103      	bne.n	800cb1c <tcp_timer_needed+0x1c>
 800cb14:	4b08      	ldr	r3, [pc, #32]	; (800cb38 <tcp_timer_needed+0x38>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d007      	beq.n	800cb2c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800cb1c:	4b04      	ldr	r3, [pc, #16]	; (800cb30 <tcp_timer_needed+0x30>)
 800cb1e:	2201      	movs	r2, #1
 800cb20:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cb22:	2200      	movs	r2, #0
 800cb24:	4905      	ldr	r1, [pc, #20]	; (800cb3c <tcp_timer_needed+0x3c>)
 800cb26:	20fa      	movs	r0, #250	; 0xfa
 800cb28:	f000 f848 	bl	800cbbc <sys_timeout>
  }
}
 800cb2c:	bf00      	nop
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	20006fb4 	.word	0x20006fb4
 800cb34:	20006f68 	.word	0x20006f68
 800cb38:	20006f6c 	.word	0x20006f6c
 800cb3c:	0800cab9 	.word	0x0800cab9

0800cb40 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	4903      	ldr	r1, [pc, #12]	; (800cb68 <cyclic_timer+0x28>)
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f000 f82e 	bl	800cbbc <sys_timeout>
}
 800cb60:	bf00      	nop
 800cb62:	3710      	adds	r7, #16
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	0800cb41 	.word	0x0800cb41

0800cb6c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cb72:	2301      	movs	r3, #1
 800cb74:	607b      	str	r3, [r7, #4]
 800cb76:	e00e      	b.n	800cb96 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800cb78:	4a0d      	ldr	r2, [pc, #52]	; (800cbb0 <sys_timeouts_init+0x44>)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	00db      	lsls	r3, r3, #3
 800cb84:	4a0a      	ldr	r2, [pc, #40]	; (800cbb0 <sys_timeouts_init+0x44>)
 800cb86:	4413      	add	r3, r2
 800cb88:	461a      	mov	r2, r3
 800cb8a:	490a      	ldr	r1, [pc, #40]	; (800cbb4 <sys_timeouts_init+0x48>)
 800cb8c:	f000 f816 	bl	800cbbc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	3301      	adds	r3, #1
 800cb94:	607b      	str	r3, [r7, #4]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2b02      	cmp	r3, #2
 800cb9a:	d9ed      	bls.n	800cb78 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800cb9c:	f7f9 fe1c 	bl	80067d8 <sys_now>
 800cba0:	4603      	mov	r3, r0
 800cba2:	4a05      	ldr	r2, [pc, #20]	; (800cbb8 <sys_timeouts_init+0x4c>)
 800cba4:	6013      	str	r3, [r2, #0]
}
 800cba6:	bf00      	nop
 800cba8:	3708      	adds	r7, #8
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	08018190 	.word	0x08018190
 800cbb4:	0800cb41 	.word	0x0800cb41
 800cbb8:	20006fb0 	.word	0x20006fb0

0800cbbc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b088      	sub	sp, #32
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cbc8:	2006      	movs	r0, #6
 800cbca:	f7fa fad3 	bl	8007174 <memp_malloc>
 800cbce:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d10a      	bne.n	800cbec <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	f040 8084 	bne.w	800cce6 <sys_timeout+0x12a>
 800cbde:	4b44      	ldr	r3, [pc, #272]	; (800ccf0 <sys_timeout+0x134>)
 800cbe0:	22d4      	movs	r2, #212	; 0xd4
 800cbe2:	4944      	ldr	r1, [pc, #272]	; (800ccf4 <sys_timeout+0x138>)
 800cbe4:	4844      	ldr	r0, [pc, #272]	; (800ccf8 <sys_timeout+0x13c>)
 800cbe6:	f005 fd9f 	bl	8012728 <iprintf>
    return;
 800cbea:	e07c      	b.n	800cce6 <sys_timeout+0x12a>
  }

  now = sys_now();
 800cbec:	f7f9 fdf4 	bl	80067d8 <sys_now>
 800cbf0:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800cbf2:	4b42      	ldr	r3, [pc, #264]	; (800ccfc <sys_timeout+0x140>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d105      	bne.n	800cc06 <sys_timeout+0x4a>
    diff = 0;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800cbfe:	4a40      	ldr	r2, [pc, #256]	; (800cd00 <sys_timeout+0x144>)
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	6013      	str	r3, [r2, #0]
 800cc04:	e004      	b.n	800cc10 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800cc06:	4b3e      	ldr	r3, [pc, #248]	; (800cd00 <sys_timeout+0x144>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	693a      	ldr	r2, [r7, #16]
 800cc0c:	1ad3      	subs	r3, r2, r3
 800cc0e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	2200      	movs	r2, #0
 800cc14:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	68ba      	ldr	r2, [r7, #8]
 800cc1a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800cc22:	68fa      	ldr	r2, [r7, #12]
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	441a      	add	r2, r3
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800cc2c:	4b33      	ldr	r3, [pc, #204]	; (800ccfc <sys_timeout+0x140>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d103      	bne.n	800cc3c <sys_timeout+0x80>
    next_timeout = timeout;
 800cc34:	4a31      	ldr	r2, [pc, #196]	; (800ccfc <sys_timeout+0x140>)
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	6013      	str	r3, [r2, #0]
    return;
 800cc3a:	e055      	b.n	800cce8 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800cc3c:	4b2f      	ldr	r3, [pc, #188]	; (800ccfc <sys_timeout+0x140>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	68fa      	ldr	r2, [r7, #12]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d20f      	bcs.n	800cc68 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800cc48:	4b2c      	ldr	r3, [pc, #176]	; (800ccfc <sys_timeout+0x140>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	6859      	ldr	r1, [r3, #4]
 800cc4e:	4b2b      	ldr	r3, [pc, #172]	; (800ccfc <sys_timeout+0x140>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	68fa      	ldr	r2, [r7, #12]
 800cc54:	1a8a      	subs	r2, r1, r2
 800cc56:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800cc58:	4b28      	ldr	r3, [pc, #160]	; (800ccfc <sys_timeout+0x140>)
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800cc60:	4a26      	ldr	r2, [pc, #152]	; (800ccfc <sys_timeout+0x140>)
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	6013      	str	r3, [r2, #0]
 800cc66:	e03f      	b.n	800cce8 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800cc68:	4b24      	ldr	r3, [pc, #144]	; (800ccfc <sys_timeout+0x140>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	61fb      	str	r3, [r7, #28]
 800cc6e:	e036      	b.n	800ccde <sys_timeout+0x122>
      timeout->time -= t->time;
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	685a      	ldr	r2, [r3, #4]
 800cc74:	69fb      	ldr	r3, [r7, #28]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	1ad2      	subs	r2, r2, r3
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d006      	beq.n	800cc94 <sys_timeout+0xd8>
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	685a      	ldr	r2, [r3, #4]
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d921      	bls.n	800ccd8 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d009      	beq.n	800ccb0 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	6859      	ldr	r1, [r3, #4]
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	685a      	ldr	r2, [r3, #4]
 800cca6:	69fb      	ldr	r3, [r7, #28]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	1a8a      	subs	r2, r1, r2
 800ccac:	605a      	str	r2, [r3, #4]
 800ccae:	e00b      	b.n	800ccc8 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d206      	bcs.n	800ccc8 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800ccba:	4b10      	ldr	r3, [pc, #64]	; (800ccfc <sys_timeout+0x140>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	685a      	ldr	r2, [r3, #4]
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	441a      	add	r2, r3
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	697a      	ldr	r2, [r7, #20]
 800ccd4:	601a      	str	r2, [r3, #0]
        break;
 800ccd6:	e007      	b.n	800cce8 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	61fb      	str	r3, [r7, #28]
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d1c5      	bne.n	800cc70 <sys_timeout+0xb4>
 800cce4:	e000      	b.n	800cce8 <sys_timeout+0x12c>
    return;
 800cce6:	bf00      	nop
      }
    }
  }
}
 800cce8:	3720      	adds	r7, #32
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	080178e8 	.word	0x080178e8
 800ccf4:	0801791c 	.word	0x0801791c
 800ccf8:	0801795c 	.word	0x0801795c
 800ccfc:	20006fac 	.word	0x20006fac
 800cd00:	20006fb0 	.word	0x20006fb0

0800cd04 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b086      	sub	sp, #24
 800cd08:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800cd0a:	4b24      	ldr	r3, [pc, #144]	; (800cd9c <sys_check_timeouts+0x98>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d040      	beq.n	800cd94 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800cd12:	f7f9 fd61 	bl	80067d8 <sys_now>
 800cd16:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800cd18:	4b21      	ldr	r3, [pc, #132]	; (800cda0 <sys_check_timeouts+0x9c>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	68fa      	ldr	r2, [r7, #12]
 800cd1e:	1ad3      	subs	r3, r2, r3
 800cd20:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800cd22:	4b20      	ldr	r3, [pc, #128]	; (800cda4 <sys_check_timeouts+0xa0>)
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d001      	beq.n	800cd30 <sys_check_timeouts+0x2c>
 800cd2c:	f7fa fc0a 	bl	8007544 <pbuf_free_ooseq>
      had_one = 0;
 800cd30:	2300      	movs	r3, #0
 800cd32:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800cd34:	4b19      	ldr	r3, [pc, #100]	; (800cd9c <sys_check_timeouts+0x98>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d026      	beq.n	800cd8e <sys_check_timeouts+0x8a>
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	697a      	ldr	r2, [r7, #20]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d321      	bcc.n	800cd8e <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	685a      	ldr	r2, [r3, #4]
 800cd52:	4b13      	ldr	r3, [pc, #76]	; (800cda0 <sys_check_timeouts+0x9c>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4413      	add	r3, r2
 800cd58:	4a11      	ldr	r2, [pc, #68]	; (800cda0 <sys_check_timeouts+0x9c>)
 800cd5a:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	697a      	ldr	r2, [r7, #20]
 800cd62:	1ad3      	subs	r3, r2, r3
 800cd64:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a0c      	ldr	r2, [pc, #48]	; (800cd9c <sys_check_timeouts+0x98>)
 800cd6c:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	689b      	ldr	r3, [r3, #8]
 800cd72:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cd7a:	68b9      	ldr	r1, [r7, #8]
 800cd7c:	2006      	movs	r0, #6
 800cd7e:	f7fa fa4b 	bl	8007218 <memp_free>
        if (handler != NULL) {
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d002      	beq.n	800cd8e <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6838      	ldr	r0, [r7, #0]
 800cd8c:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800cd8e:	7cfb      	ldrb	r3, [r7, #19]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d1c6      	bne.n	800cd22 <sys_check_timeouts+0x1e>
  }
}
 800cd94:	bf00      	nop
 800cd96:	3718      	adds	r7, #24
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	20006fac 	.word	0x20006fac
 800cda0:	20006fb0 	.word	0x20006fb0
 800cda4:	20006e81 	.word	0x20006e81

0800cda8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800cdac:	bf00      	nop
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bc80      	pop	{r7}
 800cdb2:	4770      	bx	lr

0800cdb4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800cdbe:	4b17      	ldr	r3, [pc, #92]	; (800ce1c <udp_new_port+0x68>)
 800cdc0:	881b      	ldrh	r3, [r3, #0]
 800cdc2:	1c5a      	adds	r2, r3, #1
 800cdc4:	b291      	uxth	r1, r2
 800cdc6:	4a15      	ldr	r2, [pc, #84]	; (800ce1c <udp_new_port+0x68>)
 800cdc8:	8011      	strh	r1, [r2, #0]
 800cdca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d103      	bne.n	800cdda <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800cdd2:	4b12      	ldr	r3, [pc, #72]	; (800ce1c <udp_new_port+0x68>)
 800cdd4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800cdd8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cdda:	4b11      	ldr	r3, [pc, #68]	; (800ce20 <udp_new_port+0x6c>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	603b      	str	r3, [r7, #0]
 800cde0:	e011      	b.n	800ce06 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	8a5a      	ldrh	r2, [r3, #18]
 800cde6:	4b0d      	ldr	r3, [pc, #52]	; (800ce1c <udp_new_port+0x68>)
 800cde8:	881b      	ldrh	r3, [r3, #0]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d108      	bne.n	800ce00 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800cdee:	88fb      	ldrh	r3, [r7, #6]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	80fb      	strh	r3, [r7, #6]
 800cdf4:	88fb      	ldrh	r3, [r7, #6]
 800cdf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cdfa:	d3e0      	bcc.n	800cdbe <udp_new_port+0xa>
        return 0;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	e007      	b.n	800ce10 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	68db      	ldr	r3, [r3, #12]
 800ce04:	603b      	str	r3, [r7, #0]
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d1ea      	bne.n	800cde2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800ce0c:	4b03      	ldr	r3, [pc, #12]	; (800ce1c <udp_new_port+0x68>)
 800ce0e:	881b      	ldrh	r3, [r3, #0]
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	370c      	adds	r7, #12
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bc80      	pop	{r7}
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	20000034 	.word	0x20000034
 800ce20:	20006fb8 	.word	0x20006fb8

0800ce24 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	4613      	mov	r3, r2
 800ce30:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ce32:	79fb      	ldrb	r3, [r7, #7]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d018      	beq.n	800ce6a <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d013      	beq.n	800ce66 <udp_input_local_match+0x42>
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00f      	beq.n	800ce66 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ce46:	4b13      	ldr	r3, [pc, #76]	; (800ce94 <udp_input_local_match+0x70>)
 800ce48:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ce4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce4e:	d00a      	beq.n	800ce66 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	4b0f      	ldr	r3, [pc, #60]	; (800ce94 <udp_input_local_match+0x70>)
 800ce56:	695b      	ldr	r3, [r3, #20]
 800ce58:	405a      	eors	r2, r3
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	3308      	adds	r3, #8
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d110      	bne.n	800ce88 <udp_input_local_match+0x64>
          return 1;
 800ce66:	2301      	movs	r3, #1
 800ce68:	e00f      	b.n	800ce8a <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d009      	beq.n	800ce84 <udp_input_local_match+0x60>
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d005      	beq.n	800ce84 <udp_input_local_match+0x60>
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	4b05      	ldr	r3, [pc, #20]	; (800ce94 <udp_input_local_match+0x70>)
 800ce7e:	695b      	ldr	r3, [r3, #20]
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d101      	bne.n	800ce88 <udp_input_local_match+0x64>
      return 1;
 800ce84:	2301      	movs	r3, #1
 800ce86:	e000      	b.n	800ce8a <udp_input_local_match+0x66>
    }
  }

  return 0;
 800ce88:	2300      	movs	r3, #0
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3714      	adds	r7, #20
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bc80      	pop	{r7}
 800ce92:	4770      	bx	lr
 800ce94:	200038bc 	.word	0x200038bc

0800ce98 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ce98:	b590      	push	{r4, r7, lr}
 800ce9a:	b08d      	sub	sp, #52	; 0x34
 800ce9c:	af02      	add	r7, sp, #8
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800cea2:	2300      	movs	r3, #0
 800cea4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
 800cea6:	4b85      	ldr	r3, [pc, #532]	; (800d0bc <udp_input+0x224>)
 800cea8:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800ceac:	3301      	adds	r3, #1
 800ceae:	b29a      	uxth	r2, r3
 800ceb0:	4b82      	ldr	r3, [pc, #520]	; (800d0bc <udp_input+0x224>)
 800ceb2:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	895b      	ldrh	r3, [r3, #10]
 800ceba:	2b07      	cmp	r3, #7
 800cebc:	d813      	bhi.n	800cee6 <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 800cebe:	4b7f      	ldr	r3, [pc, #508]	; (800d0bc <udp_input+0x224>)
 800cec0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800cec4:	3301      	adds	r3, #1
 800cec6:	b29a      	uxth	r2, r3
 800cec8:	4b7c      	ldr	r3, [pc, #496]	; (800d0bc <udp_input+0x224>)
 800ceca:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 800cece:	4b7b      	ldr	r3, [pc, #492]	; (800d0bc <udp_input+0x224>)
 800ced0:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800ced4:	3301      	adds	r3, #1
 800ced6:	b29a      	uxth	r2, r3
 800ced8:	4b78      	ldr	r3, [pc, #480]	; (800d0bc <udp_input+0x224>)
 800ceda:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f7fa fed8 	bl	8007c94 <pbuf_free>
    goto end;
 800cee4:	e0e5      	b.n	800d0b2 <udp_input+0x21a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ceec:	4b74      	ldr	r3, [pc, #464]	; (800d0c0 <udp_input+0x228>)
 800ceee:	695b      	ldr	r3, [r3, #20]
 800cef0:	4a73      	ldr	r2, [pc, #460]	; (800d0c0 <udp_input+0x228>)
 800cef2:	6812      	ldr	r2, [r2, #0]
 800cef4:	4611      	mov	r1, r2
 800cef6:	4618      	mov	r0, r3
 800cef8:	f001 ff8c 	bl	800ee14 <ip4_addr_isbroadcast_u32>
 800cefc:	4603      	mov	r3, r0
 800cefe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	881b      	ldrh	r3, [r3, #0]
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7f9 fcf3 	bl	80068f2 <lwip_htons>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	885b      	ldrh	r3, [r3, #2]
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7f9 fceb 	bl	80068f2 <lwip_htons>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800cf20:	2300      	movs	r3, #0
 800cf22:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800cf24:	2300      	movs	r3, #0
 800cf26:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf2c:	4b65      	ldr	r3, [pc, #404]	; (800d0c4 <udp_input+0x22c>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	627b      	str	r3, [r7, #36]	; 0x24
 800cf32:	e044      	b.n	800cfbe <udp_input+0x126>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf36:	8a5b      	ldrh	r3, [r3, #18]
 800cf38:	89fa      	ldrh	r2, [r7, #14]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d13a      	bne.n	800cfb4 <udp_input+0x11c>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cf3e:	7cfb      	ldrb	r3, [r7, #19]
 800cf40:	461a      	mov	r2, r3
 800cf42:	6839      	ldr	r1, [r7, #0]
 800cf44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf46:	f7ff ff6d 	bl	800ce24 <udp_input_local_match>
 800cf4a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d031      	beq.n	800cfb4 <udp_input+0x11c>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800cf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf52:	7c1b      	ldrb	r3, [r3, #16]
 800cf54:	f003 0304 	and.w	r3, r3, #4
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d104      	bne.n	800cf66 <udp_input+0xce>
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d101      	bne.n	800cf66 <udp_input+0xce>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800cf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf64:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf68:	8a9b      	ldrh	r3, [r3, #20]
 800cf6a:	8a3a      	ldrh	r2, [r7, #16]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d121      	bne.n	800cfb4 <udp_input+0x11c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf72:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d005      	beq.n	800cf84 <udp_input+0xec>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7a:	685a      	ldr	r2, [r3, #4]
 800cf7c:	4b50      	ldr	r3, [pc, #320]	; (800d0c0 <udp_input+0x228>)
 800cf7e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d117      	bne.n	800cfb4 <udp_input+0x11c>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cf84:	6a3b      	ldr	r3, [r7, #32]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00b      	beq.n	800cfa2 <udp_input+0x10a>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8c:	68da      	ldr	r2, [r3, #12]
 800cf8e:	6a3b      	ldr	r3, [r7, #32]
 800cf90:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cf92:	4b4c      	ldr	r3, [pc, #304]	; (800d0c4 <udp_input+0x22c>)
 800cf94:	681a      	ldr	r2, [r3, #0]
 800cf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf98:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cf9a:	4a4a      	ldr	r2, [pc, #296]	; (800d0c4 <udp_input+0x22c>)
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800cfa0:	e010      	b.n	800cfc4 <udp_input+0x12c>
          UDP_STATS_INC(udp.cachehit);
 800cfa2:	4b46      	ldr	r3, [pc, #280]	; (800d0bc <udp_input+0x224>)
 800cfa4:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	b29a      	uxth	r2, r3
 800cfac:	4b43      	ldr	r3, [pc, #268]	; (800d0bc <udp_input+0x224>)
 800cfae:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        break;
 800cfb2:	e007      	b.n	800cfc4 <udp_input+0x12c>
      }
    }

    prev = pcb;
 800cfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	627b      	str	r3, [r7, #36]	; 0x24
 800cfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d1b7      	bne.n	800cf34 <udp_input+0x9c>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d101      	bne.n	800cfce <udp_input+0x136>
    pcb = uncon_pcb;
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800cfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d002      	beq.n	800cfda <udp_input+0x142>
    for_us = 1;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	76fb      	strb	r3, [r7, #27]
 800cfd8:	e00a      	b.n	800cff0 <udp_input+0x158>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	3304      	adds	r3, #4
 800cfde:	681a      	ldr	r2, [r3, #0]
 800cfe0:	4b37      	ldr	r3, [pc, #220]	; (800d0c0 <udp_input+0x228>)
 800cfe2:	695b      	ldr	r3, [r3, #20]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	bf0c      	ite	eq
 800cfe8:	2301      	moveq	r3, #1
 800cfea:	2300      	movne	r3, #0
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cff0:	7efb      	ldrb	r3, [r7, #27]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d05a      	beq.n	800d0ac <udp_input+0x214>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800cff6:	f06f 0107 	mvn.w	r1, #7
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f7fa fe26 	bl	8007c4c <pbuf_header>
 800d000:	4603      	mov	r3, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d012      	beq.n	800d02c <udp_input+0x194>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800d006:	4b30      	ldr	r3, [pc, #192]	; (800d0c8 <udp_input+0x230>)
 800d008:	f240 1255 	movw	r2, #341	; 0x155
 800d00c:	492f      	ldr	r1, [pc, #188]	; (800d0cc <udp_input+0x234>)
 800d00e:	4830      	ldr	r0, [pc, #192]	; (800d0d0 <udp_input+0x238>)
 800d010:	f005 fb8a 	bl	8012728 <iprintf>
      UDP_STATS_INC(udp.drop);
 800d014:	4b29      	ldr	r3, [pc, #164]	; (800d0bc <udp_input+0x224>)
 800d016:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800d01a:	3301      	adds	r3, #1
 800d01c:	b29a      	uxth	r2, r3
 800d01e:	4b27      	ldr	r3, [pc, #156]	; (800d0bc <udp_input+0x224>)
 800d020:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f7fa fe35 	bl	8007c94 <pbuf_free>
      goto end;
 800d02a:	e042      	b.n	800d0b2 <udp_input+0x21a>
    }

    if (pcb != NULL) {
 800d02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d012      	beq.n	800d058 <udp_input+0x1c0>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d034:	699b      	ldr	r3, [r3, #24]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d00a      	beq.n	800d050 <udp_input+0x1b8>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03c:	699c      	ldr	r4, [r3, #24]
 800d03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d040:	69d8      	ldr	r0, [r3, #28]
 800d042:	8a3b      	ldrh	r3, [r7, #16]
 800d044:	9300      	str	r3, [sp, #0]
 800d046:	4b23      	ldr	r3, [pc, #140]	; (800d0d4 <udp_input+0x23c>)
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d04c:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d04e:	e031      	b.n	800d0b4 <udp_input+0x21c>
        pbuf_free(p);
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f7fa fe1f 	bl	8007c94 <pbuf_free>
        goto end;
 800d056:	e02c      	b.n	800d0b2 <udp_input+0x21a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d058:	7cfb      	ldrb	r3, [r7, #19]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d112      	bne.n	800d084 <udp_input+0x1ec>
 800d05e:	4b18      	ldr	r3, [pc, #96]	; (800d0c0 <udp_input+0x228>)
 800d060:	695b      	ldr	r3, [r3, #20]
 800d062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d066:	2be0      	cmp	r3, #224	; 0xe0
 800d068:	d00c      	beq.n	800d084 <udp_input+0x1ec>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d06a:	4b15      	ldr	r3, [pc, #84]	; (800d0c0 <udp_input+0x228>)
 800d06c:	899b      	ldrh	r3, [r3, #12]
 800d06e:	3308      	adds	r3, #8
 800d070:	b29b      	uxth	r3, r3
 800d072:	b21b      	sxth	r3, r3
 800d074:	4619      	mov	r1, r3
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f7fa fdfa 	bl	8007c70 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d07c:	2103      	movs	r1, #3
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f001 fb50 	bl	800e724 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 800d084:	4b0d      	ldr	r3, [pc, #52]	; (800d0bc <udp_input+0x224>)
 800d086:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800d08a:	3301      	adds	r3, #1
 800d08c:	b29a      	uxth	r2, r3
 800d08e:	4b0b      	ldr	r3, [pc, #44]	; (800d0bc <udp_input+0x224>)
 800d090:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
 800d094:	4b09      	ldr	r3, [pc, #36]	; (800d0bc <udp_input+0x224>)
 800d096:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800d09a:	3301      	adds	r3, #1
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	4b07      	ldr	r3, [pc, #28]	; (800d0bc <udp_input+0x224>)
 800d0a0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      pbuf_free(p);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f7fa fdf5 	bl	8007c94 <pbuf_free>
  return;
 800d0aa:	e003      	b.n	800d0b4 <udp_input+0x21c>
    pbuf_free(p);
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f7fa fdf1 	bl	8007c94 <pbuf_free>
  return;
 800d0b2:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d0b4:	372c      	adds	r7, #44	; 0x2c
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd90      	pop	{r4, r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	20006e84 	.word	0x20006e84
 800d0c0:	200038bc 	.word	0x200038bc
 800d0c4:	20006fb8 	.word	0x20006fb8
 800d0c8:	08017984 	.word	0x08017984
 800d0cc:	080179b4 	.word	0x080179b4
 800d0d0:	080179c8 	.word	0x080179c8
 800d0d4:	200038cc 	.word	0x200038cc

0800d0d8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d102      	bne.n	800d0ee <udp_send+0x16>
    return ERR_VAL;
 800d0e8:	f06f 0305 	mvn.w	r3, #5
 800d0ec:	e008      	b.n	800d100 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	1d1a      	adds	r2, r3, #4
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	8a9b      	ldrh	r3, [r3, #20]
 800d0f6:	6839      	ldr	r1, [r7, #0]
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 f805 	bl	800d108 <udp_sendto>
 800d0fe:	4603      	mov	r3, r0
}
 800d100:	4618      	mov	r0, r3
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b088      	sub	sp, #32
 800d10c:	af02      	add	r7, sp, #8
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	607a      	str	r2, [r7, #4]
 800d114:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d002      	beq.n	800d126 <udp_sendto+0x1e>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d102      	bne.n	800d12c <udp_sendto+0x24>
    return ERR_VAL;
 800d126:	f06f 0305 	mvn.w	r3, #5
 800d12a:	e01b      	b.n	800d164 <udp_sendto+0x5c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800d12c:	6978      	ldr	r0, [r7, #20]
 800d12e:	f001 fb8b 	bl	800e848 <ip4_route>
 800d132:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d10a      	bne.n	800d150 <udp_sendto+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 800d13a:	4b0c      	ldr	r3, [pc, #48]	; (800d16c <udp_sendto+0x64>)
 800d13c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d140:	3301      	adds	r3, #1
 800d142:	b29a      	uxth	r2, r3
 800d144:	4b09      	ldr	r3, [pc, #36]	; (800d16c <udp_sendto+0x64>)
 800d146:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    return ERR_RTE;
 800d14a:	f06f 0303 	mvn.w	r3, #3
 800d14e:	e009      	b.n	800d164 <udp_sendto+0x5c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800d150:	887a      	ldrh	r2, [r7, #2]
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	9300      	str	r3, [sp, #0]
 800d156:	4613      	mov	r3, r2
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	68b9      	ldr	r1, [r7, #8]
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f000 f807 	bl	800d170 <udp_sendto_if>
 800d162:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d164:	4618      	mov	r0, r3
 800d166:	3718      	adds	r7, #24
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	20006e84 	.word	0x20006e84

0800d170 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b088      	sub	sp, #32
 800d174:	af02      	add	r7, sp, #8
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
 800d17c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d002      	beq.n	800d18a <udp_sendto_if+0x1a>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d102      	bne.n	800d190 <udp_sendto_if+0x20>
    return ERR_VAL;
 800d18a:	f06f 0305 	mvn.w	r3, #5
 800d18e:	e028      	b.n	800d1e2 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d009      	beq.n	800d1aa <udp_sendto_if+0x3a>
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d005      	beq.n	800d1aa <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d1a6:	2be0      	cmp	r3, #224	; 0xe0
 800d1a8:	d103      	bne.n	800d1b2 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800d1aa:	6a3b      	ldr	r3, [r7, #32]
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	617b      	str	r3, [r7, #20]
 800d1b0:	e00b      	b.n	800d1ca <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	6a3b      	ldr	r3, [r7, #32]
 800d1b8:	3304      	adds	r3, #4
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d002      	beq.n	800d1c6 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800d1c0:	f06f 0303 	mvn.w	r3, #3
 800d1c4:	e00d      	b.n	800d1e2 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d1ca:	887a      	ldrh	r2, [r7, #2]
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	9301      	str	r3, [sp, #4]
 800d1d0:	6a3b      	ldr	r3, [r7, #32]
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	68b9      	ldr	r1, [r7, #8]
 800d1da:	68f8      	ldr	r0, [r7, #12]
 800d1dc:	f000 f806 	bl	800d1ec <udp_sendto_if_src>
 800d1e0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3718      	adds	r7, #24
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
	...

0800d1ec <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b08c      	sub	sp, #48	; 0x30
 800d1f0:	af04      	add	r7, sp, #16
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	607a      	str	r2, [r7, #4]
 800d1f8:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d002      	beq.n	800d206 <udp_sendto_if_src+0x1a>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d102      	bne.n	800d20c <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800d206:	f06f 0305 	mvn.w	r3, #5
 800d20a:	e086      	b.n	800d31a <udp_sendto_if_src+0x12e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	8a5b      	ldrh	r3, [r3, #18]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d10f      	bne.n	800d234 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d214:	68f9      	ldr	r1, [r7, #12]
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	8a5b      	ldrh	r3, [r3, #18]
 800d21a:	461a      	mov	r2, r3
 800d21c:	68f8      	ldr	r0, [r7, #12]
 800d21e:	f000 f889 	bl	800d334 <udp_bind>
 800d222:	4603      	mov	r3, r0
 800d224:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800d226:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d002      	beq.n	800d234 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800d22e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d232:	e072      	b.n	800d31a <udp_sendto_if_src+0x12e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800d234:	2108      	movs	r1, #8
 800d236:	68b8      	ldr	r0, [r7, #8]
 800d238:	f7fa fd08 	bl	8007c4c <pbuf_header>
 800d23c:	4603      	mov	r3, r0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d014      	beq.n	800d26c <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d242:	2200      	movs	r2, #0
 800d244:	2108      	movs	r1, #8
 800d246:	2001      	movs	r0, #1
 800d248:	f7fa f9ac 	bl	80075a4 <pbuf_alloc>
 800d24c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d102      	bne.n	800d25a <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800d254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d258:	e05f      	b.n	800d31a <udp_sendto_if_src+0x12e>
    }
    if (p->tot_len != 0) {
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	891b      	ldrh	r3, [r3, #8]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d006      	beq.n	800d270 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800d262:	68b9      	ldr	r1, [r7, #8]
 800d264:	69f8      	ldr	r0, [r7, #28]
 800d266:	f7fa fe37 	bl	8007ed8 <pbuf_chain>
 800d26a:	e001      	b.n	800d270 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	895b      	ldrh	r3, [r3, #10]
 800d274:	2b07      	cmp	r3, #7
 800d276:	d806      	bhi.n	800d286 <udp_sendto_if_src+0x9a>
 800d278:	4b2a      	ldr	r3, [pc, #168]	; (800d324 <udp_sendto_if_src+0x138>)
 800d27a:	f240 22db 	movw	r2, #731	; 0x2db
 800d27e:	492a      	ldr	r1, [pc, #168]	; (800d328 <udp_sendto_if_src+0x13c>)
 800d280:	482a      	ldr	r0, [pc, #168]	; (800d32c <udp_sendto_if_src+0x140>)
 800d282:	f005 fa51 	bl	8012728 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	8a5b      	ldrh	r3, [r3, #18]
 800d290:	4618      	mov	r0, r3
 800d292:	f7f9 fb2e 	bl	80068f2 <lwip_htons>
 800d296:	4603      	mov	r3, r0
 800d298:	461a      	mov	r2, r3
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d29e:	887b      	ldrh	r3, [r7, #2]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7f9 fb26 	bl	80068f2 <lwip_htons>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	719a      	strb	r2, [r3, #6]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	891b      	ldrh	r3, [r3, #8]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7f9 fb18 	bl	80068f2 <lwip_htons>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800d2ca:	2311      	movs	r3, #17
 800d2cc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	7a9b      	ldrb	r3, [r3, #10]
 800d2d2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	7a5b      	ldrb	r3, [r3, #9]
 800d2d8:	7cb9      	ldrb	r1, [r7, #18]
 800d2da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2dc:	9202      	str	r2, [sp, #8]
 800d2de:	7cfa      	ldrb	r2, [r7, #19]
 800d2e0:	9201      	str	r2, [sp, #4]
 800d2e2:	9300      	str	r3, [sp, #0]
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2ea:	69f8      	ldr	r0, [r7, #28]
 800d2ec:	f001 fcd8 	bl	800eca0 <ip4_output_if_src>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800d2f4:	69fa      	ldr	r2, [r7, #28]
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d004      	beq.n	800d306 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800d2fc:	69f8      	ldr	r0, [r7, #28]
 800d2fe:	f7fa fcc9 	bl	8007c94 <pbuf_free>
    q = NULL;
 800d302:	2300      	movs	r3, #0
 800d304:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 800d306:	4b0a      	ldr	r3, [pc, #40]	; (800d330 <udp_sendto_if_src+0x144>)
 800d308:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800d30c:	3301      	adds	r3, #1
 800d30e:	b29a      	uxth	r2, r3
 800d310:	4b07      	ldr	r3, [pc, #28]	; (800d330 <udp_sendto_if_src+0x144>)
 800d312:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
  return err;
 800d316:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3720      	adds	r7, #32
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	08017984 	.word	0x08017984
 800d328:	080179f0 	.word	0x080179f0
 800d32c:	080179c8 	.word	0x080179c8
 800d330:	20006e84 	.word	0x20006e84

0800d334 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	4613      	mov	r3, r2
 800d340:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d101      	bne.n	800d34c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800d348:	4b30      	ldr	r3, [pc, #192]	; (800d40c <udp_bind+0xd8>)
 800d34a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d002      	beq.n	800d358 <udp_bind+0x24>
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d102      	bne.n	800d35e <udp_bind+0x2a>
    return ERR_VAL;
 800d358:	f06f 0305 	mvn.w	r3, #5
 800d35c:	e052      	b.n	800d404 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d35e:	2300      	movs	r3, #0
 800d360:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d362:	4b2b      	ldr	r3, [pc, #172]	; (800d410 <udp_bind+0xdc>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	617b      	str	r3, [r7, #20]
 800d368:	e009      	b.n	800d37e <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d36a:	68fa      	ldr	r2, [r7, #12]
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	429a      	cmp	r2, r3
 800d370:	d102      	bne.n	800d378 <udp_bind+0x44>
      rebind = 1;
 800d372:	2301      	movs	r3, #1
 800d374:	74fb      	strb	r3, [r7, #19]
      break;
 800d376:	e005      	b.n	800d384 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	617b      	str	r3, [r7, #20]
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d1f2      	bne.n	800d36a <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800d384:	88fb      	ldrh	r3, [r7, #6]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d109      	bne.n	800d39e <udp_bind+0x6a>
    port = udp_new_port();
 800d38a:	f7ff fd13 	bl	800cdb4 <udp_new_port>
 800d38e:	4603      	mov	r3, r0
 800d390:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d392:	88fb      	ldrh	r3, [r7, #6]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d11e      	bne.n	800d3d6 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d398:	f06f 0307 	mvn.w	r3, #7
 800d39c:	e032      	b.n	800d404 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d39e:	4b1c      	ldr	r3, [pc, #112]	; (800d410 <udp_bind+0xdc>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	617b      	str	r3, [r7, #20]
 800d3a4:	e014      	b.n	800d3d0 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800d3a6:	68fa      	ldr	r2, [r7, #12]
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d00d      	beq.n	800d3ca <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	8a5b      	ldrh	r3, [r3, #18]
 800d3b2:	88fa      	ldrh	r2, [r7, #6]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d108      	bne.n	800d3ca <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d102      	bne.n	800d3ca <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800d3c4:	f06f 0307 	mvn.w	r3, #7
 800d3c8:	e01c      	b.n	800d404 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	617b      	str	r3, [r7, #20]
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d1e7      	bne.n	800d3a6 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d002      	beq.n	800d3e2 <udp_bind+0xae>
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	e000      	b.n	800d3e4 <udp_bind+0xb0>
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	88fa      	ldrh	r2, [r7, #6]
 800d3ec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d3ee:	7cfb      	ldrb	r3, [r7, #19]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d106      	bne.n	800d402 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d3f4:	4b06      	ldr	r3, [pc, #24]	; (800d410 <udp_bind+0xdc>)
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d3fc:	4a04      	ldr	r2, [pc, #16]	; (800d410 <udp_bind+0xdc>)
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d402:	2300      	movs	r3, #0
}
 800d404:	4618      	mov	r0, r3
 800d406:	3718      	adds	r7, #24
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	080181a8 	.word	0x080181a8
 800d410:	20006fb8 	.word	0x20006fb8

0800d414 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b086      	sub	sp, #24
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	60b9      	str	r1, [r7, #8]
 800d41e:	4613      	mov	r3, r2
 800d420:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d002      	beq.n	800d42e <udp_connect+0x1a>
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d102      	bne.n	800d434 <udp_connect+0x20>
    return ERR_VAL;
 800d42e:	f06f 0305 	mvn.w	r3, #5
 800d432:	e03e      	b.n	800d4b2 <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	8a5b      	ldrh	r3, [r3, #18]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d10f      	bne.n	800d45c <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d43c:	68f9      	ldr	r1, [r7, #12]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	8a5b      	ldrh	r3, [r3, #18]
 800d442:	461a      	mov	r2, r3
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f7ff ff75 	bl	800d334 <udp_bind>
 800d44a:	4603      	mov	r3, r0
 800d44c:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d44e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d002      	beq.n	800d45c <udp_connect+0x48>
      return err;
 800d456:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d45a:	e02a      	b.n	800d4b2 <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d002      	beq.n	800d468 <udp_connect+0x54>
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	e000      	b.n	800d46a <udp_connect+0x56>
 800d468:	2300      	movs	r3, #0
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	88fa      	ldrh	r2, [r7, #6]
 800d472:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	7c1b      	ldrb	r3, [r3, #16]
 800d478:	f043 0304 	orr.w	r3, r3, #4
 800d47c:	b2da      	uxtb	r2, r3
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d482:	4b0e      	ldr	r3, [pc, #56]	; (800d4bc <udp_connect+0xa8>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	617b      	str	r3, [r7, #20]
 800d488:	e008      	b.n	800d49c <udp_connect+0x88>
    if (pcb == ipcb) {
 800d48a:	68fa      	ldr	r2, [r7, #12]
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d101      	bne.n	800d496 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800d492:	2300      	movs	r3, #0
 800d494:	e00d      	b.n	800d4b2 <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	617b      	str	r3, [r7, #20]
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d1f3      	bne.n	800d48a <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800d4a2:	4b06      	ldr	r3, [pc, #24]	; (800d4bc <udp_connect+0xa8>)
 800d4a4:	681a      	ldr	r2, [r3, #0]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800d4aa:	4a04      	ldr	r2, [pc, #16]	; (800d4bc <udp_connect+0xa8>)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800d4b0:	2300      	movs	r3, #0
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3718      	adds	r7, #24
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	20006fb8 	.word	0x20006fb8

0800d4c0 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	829a      	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	7c1b      	ldrb	r3, [r3, #16]
 800d4d8:	f023 0304 	bic.w	r3, r3, #4
 800d4dc:	b2da      	uxtb	r2, r3
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	741a      	strb	r2, [r3, #16]
}
 800d4e2:	bf00      	nop
 800d4e4:	370c      	adds	r7, #12
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bc80      	pop	{r7}
 800d4ea:	4770      	bx	lr

0800d4ec <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b085      	sub	sp, #20
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	68ba      	ldr	r2, [r7, #8]
 800d4fc:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	61da      	str	r2, [r3, #28]
}
 800d504:	bf00      	nop
 800d506:	3714      	adds	r7, #20
 800d508:	46bd      	mov	sp, r7
 800d50a:	bc80      	pop	{r7}
 800d50c:	4770      	bx	lr
	...

0800d510 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b084      	sub	sp, #16
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d518:	4b15      	ldr	r3, [pc, #84]	; (800d570 <udp_remove+0x60>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d105      	bne.n	800d52e <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800d522:	4b13      	ldr	r3, [pc, #76]	; (800d570 <udp_remove+0x60>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	68db      	ldr	r3, [r3, #12]
 800d528:	4a11      	ldr	r2, [pc, #68]	; (800d570 <udp_remove+0x60>)
 800d52a:	6013      	str	r3, [r2, #0]
 800d52c:	e017      	b.n	800d55e <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d52e:	4b10      	ldr	r3, [pc, #64]	; (800d570 <udp_remove+0x60>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	60fb      	str	r3, [r7, #12]
 800d534:	e010      	b.n	800d558 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d009      	beq.n	800d552 <udp_remove+0x42>
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	429a      	cmp	r2, r3
 800d546:	d104      	bne.n	800d552 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	68da      	ldr	r2, [r3, #12]
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	60da      	str	r2, [r3, #12]
        break;
 800d550:	e005      	b.n	800d55e <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	60fb      	str	r3, [r7, #12]
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d1eb      	bne.n	800d536 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d55e:	6879      	ldr	r1, [r7, #4]
 800d560:	2000      	movs	r0, #0
 800d562:	f7f9 fe59 	bl	8007218 <memp_free>
}
 800d566:	bf00      	nop
 800d568:	3710      	adds	r7, #16
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	20006fb8 	.word	0x20006fb8

0800d574 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d57a:	2000      	movs	r0, #0
 800d57c:	f7f9 fdfa 	bl	8007174 <memp_malloc>
 800d580:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d007      	beq.n	800d598 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d588:	2220      	movs	r2, #32
 800d58a:	2100      	movs	r1, #0
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f004 fa55 	bl	8011a3c <memset>
    pcb->ttl = UDP_TTL;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	22ff      	movs	r2, #255	; 0xff
 800d596:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800d598:	687b      	ldr	r3, [r7, #4]
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3708      	adds	r7, #8
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
	...

0800d5a4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b085      	sub	sp, #20
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d01e      	beq.n	800d5f2 <udp_netif_ip_addr_changed+0x4e>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d01a      	beq.n	800d5f2 <udp_netif_ip_addr_changed+0x4e>
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d017      	beq.n	800d5f2 <udp_netif_ip_addr_changed+0x4e>
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d013      	beq.n	800d5f2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d5ca:	4b0c      	ldr	r3, [pc, #48]	; (800d5fc <udp_netif_ip_addr_changed+0x58>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	60fb      	str	r3, [r7, #12]
 800d5d0:	e00c      	b.n	800d5ec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d103      	bne.n	800d5e6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	60fb      	str	r3, [r7, #12]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d1ef      	bne.n	800d5d2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d5f2:	bf00      	nop
 800d5f4:	3714      	adds	r7, #20
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bc80      	pop	{r7}
 800d5fa:	4770      	bx	lr
 800d5fc:	20006fb8 	.word	0x20006fb8

0800d600 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b082      	sub	sp, #8
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d608:	4915      	ldr	r1, [pc, #84]	; (800d660 <etharp_free_entry+0x60>)
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	4613      	mov	r3, r2
 800d60e:	005b      	lsls	r3, r3, #1
 800d610:	4413      	add	r3, r2
 800d612:	00db      	lsls	r3, r3, #3
 800d614:	440b      	add	r3, r1
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d013      	beq.n	800d644 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d61c:	4910      	ldr	r1, [pc, #64]	; (800d660 <etharp_free_entry+0x60>)
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	4613      	mov	r3, r2
 800d622:	005b      	lsls	r3, r3, #1
 800d624:	4413      	add	r3, r2
 800d626:	00db      	lsls	r3, r3, #3
 800d628:	440b      	add	r3, r1
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fa fb31 	bl	8007c94 <pbuf_free>
    arp_table[i].q = NULL;
 800d632:	490b      	ldr	r1, [pc, #44]	; (800d660 <etharp_free_entry+0x60>)
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	4613      	mov	r3, r2
 800d638:	005b      	lsls	r3, r3, #1
 800d63a:	4413      	add	r3, r2
 800d63c:	00db      	lsls	r3, r3, #3
 800d63e:	440b      	add	r3, r1
 800d640:	2200      	movs	r2, #0
 800d642:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d644:	4906      	ldr	r1, [pc, #24]	; (800d660 <etharp_free_entry+0x60>)
 800d646:	687a      	ldr	r2, [r7, #4]
 800d648:	4613      	mov	r3, r2
 800d64a:	005b      	lsls	r3, r3, #1
 800d64c:	4413      	add	r3, r2
 800d64e:	00db      	lsls	r3, r3, #3
 800d650:	440b      	add	r3, r1
 800d652:	3314      	adds	r3, #20
 800d654:	2200      	movs	r2, #0
 800d656:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d658:	bf00      	nop
 800d65a:	3708      	adds	r7, #8
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	20006fbc 	.word	0x20006fbc

0800d664 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d66a:	2300      	movs	r3, #0
 800d66c:	71fb      	strb	r3, [r7, #7]
 800d66e:	e096      	b.n	800d79e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d670:	79fa      	ldrb	r2, [r7, #7]
 800d672:	494f      	ldr	r1, [pc, #316]	; (800d7b0 <etharp_tmr+0x14c>)
 800d674:	4613      	mov	r3, r2
 800d676:	005b      	lsls	r3, r3, #1
 800d678:	4413      	add	r3, r2
 800d67a:	00db      	lsls	r3, r3, #3
 800d67c:	440b      	add	r3, r1
 800d67e:	3314      	adds	r3, #20
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800d684:	79bb      	ldrb	r3, [r7, #6]
 800d686:	2b00      	cmp	r3, #0
 800d688:	f000 8086 	beq.w	800d798 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800d68c:	79fa      	ldrb	r2, [r7, #7]
 800d68e:	4948      	ldr	r1, [pc, #288]	; (800d7b0 <etharp_tmr+0x14c>)
 800d690:	4613      	mov	r3, r2
 800d692:	005b      	lsls	r3, r3, #1
 800d694:	4413      	add	r3, r2
 800d696:	00db      	lsls	r3, r3, #3
 800d698:	440b      	add	r3, r1
 800d69a:	3312      	adds	r3, #18
 800d69c:	881b      	ldrh	r3, [r3, #0]
 800d69e:	3301      	adds	r3, #1
 800d6a0:	b298      	uxth	r0, r3
 800d6a2:	4943      	ldr	r1, [pc, #268]	; (800d7b0 <etharp_tmr+0x14c>)
 800d6a4:	4613      	mov	r3, r2
 800d6a6:	005b      	lsls	r3, r3, #1
 800d6a8:	4413      	add	r3, r2
 800d6aa:	00db      	lsls	r3, r3, #3
 800d6ac:	440b      	add	r3, r1
 800d6ae:	3312      	adds	r3, #18
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d6b4:	79fa      	ldrb	r2, [r7, #7]
 800d6b6:	493e      	ldr	r1, [pc, #248]	; (800d7b0 <etharp_tmr+0x14c>)
 800d6b8:	4613      	mov	r3, r2
 800d6ba:	005b      	lsls	r3, r3, #1
 800d6bc:	4413      	add	r3, r2
 800d6be:	00db      	lsls	r3, r3, #3
 800d6c0:	440b      	add	r3, r1
 800d6c2:	3312      	adds	r3, #18
 800d6c4:	881b      	ldrh	r3, [r3, #0]
 800d6c6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d6ca:	d215      	bcs.n	800d6f8 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d6cc:	79fa      	ldrb	r2, [r7, #7]
 800d6ce:	4938      	ldr	r1, [pc, #224]	; (800d7b0 <etharp_tmr+0x14c>)
 800d6d0:	4613      	mov	r3, r2
 800d6d2:	005b      	lsls	r3, r3, #1
 800d6d4:	4413      	add	r3, r2
 800d6d6:	00db      	lsls	r3, r3, #3
 800d6d8:	440b      	add	r3, r1
 800d6da:	3314      	adds	r3, #20
 800d6dc:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d10f      	bne.n	800d702 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d6e2:	79fa      	ldrb	r2, [r7, #7]
 800d6e4:	4932      	ldr	r1, [pc, #200]	; (800d7b0 <etharp_tmr+0x14c>)
 800d6e6:	4613      	mov	r3, r2
 800d6e8:	005b      	lsls	r3, r3, #1
 800d6ea:	4413      	add	r3, r2
 800d6ec:	00db      	lsls	r3, r3, #3
 800d6ee:	440b      	add	r3, r1
 800d6f0:	3312      	adds	r3, #18
 800d6f2:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d6f4:	2b04      	cmp	r3, #4
 800d6f6:	d904      	bls.n	800d702 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d6f8:	79fb      	ldrb	r3, [r7, #7]
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7ff ff80 	bl	800d600 <etharp_free_entry>
 800d700:	e04a      	b.n	800d798 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d702:	79fa      	ldrb	r2, [r7, #7]
 800d704:	492a      	ldr	r1, [pc, #168]	; (800d7b0 <etharp_tmr+0x14c>)
 800d706:	4613      	mov	r3, r2
 800d708:	005b      	lsls	r3, r3, #1
 800d70a:	4413      	add	r3, r2
 800d70c:	00db      	lsls	r3, r3, #3
 800d70e:	440b      	add	r3, r1
 800d710:	3314      	adds	r3, #20
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	2b03      	cmp	r3, #3
 800d716:	d10a      	bne.n	800d72e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d718:	79fa      	ldrb	r2, [r7, #7]
 800d71a:	4925      	ldr	r1, [pc, #148]	; (800d7b0 <etharp_tmr+0x14c>)
 800d71c:	4613      	mov	r3, r2
 800d71e:	005b      	lsls	r3, r3, #1
 800d720:	4413      	add	r3, r2
 800d722:	00db      	lsls	r3, r3, #3
 800d724:	440b      	add	r3, r1
 800d726:	3314      	adds	r3, #20
 800d728:	2204      	movs	r2, #4
 800d72a:	701a      	strb	r2, [r3, #0]
 800d72c:	e034      	b.n	800d798 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d72e:	79fa      	ldrb	r2, [r7, #7]
 800d730:	491f      	ldr	r1, [pc, #124]	; (800d7b0 <etharp_tmr+0x14c>)
 800d732:	4613      	mov	r3, r2
 800d734:	005b      	lsls	r3, r3, #1
 800d736:	4413      	add	r3, r2
 800d738:	00db      	lsls	r3, r3, #3
 800d73a:	440b      	add	r3, r1
 800d73c:	3314      	adds	r3, #20
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	2b04      	cmp	r3, #4
 800d742:	d10a      	bne.n	800d75a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d744:	79fa      	ldrb	r2, [r7, #7]
 800d746:	491a      	ldr	r1, [pc, #104]	; (800d7b0 <etharp_tmr+0x14c>)
 800d748:	4613      	mov	r3, r2
 800d74a:	005b      	lsls	r3, r3, #1
 800d74c:	4413      	add	r3, r2
 800d74e:	00db      	lsls	r3, r3, #3
 800d750:	440b      	add	r3, r1
 800d752:	3314      	adds	r3, #20
 800d754:	2202      	movs	r2, #2
 800d756:	701a      	strb	r2, [r3, #0]
 800d758:	e01e      	b.n	800d798 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d75a:	79fa      	ldrb	r2, [r7, #7]
 800d75c:	4914      	ldr	r1, [pc, #80]	; (800d7b0 <etharp_tmr+0x14c>)
 800d75e:	4613      	mov	r3, r2
 800d760:	005b      	lsls	r3, r3, #1
 800d762:	4413      	add	r3, r2
 800d764:	00db      	lsls	r3, r3, #3
 800d766:	440b      	add	r3, r1
 800d768:	3314      	adds	r3, #20
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d113      	bne.n	800d798 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d770:	79fa      	ldrb	r2, [r7, #7]
 800d772:	490f      	ldr	r1, [pc, #60]	; (800d7b0 <etharp_tmr+0x14c>)
 800d774:	4613      	mov	r3, r2
 800d776:	005b      	lsls	r3, r3, #1
 800d778:	4413      	add	r3, r2
 800d77a:	00db      	lsls	r3, r3, #3
 800d77c:	440b      	add	r3, r1
 800d77e:	3308      	adds	r3, #8
 800d780:	6818      	ldr	r0, [r3, #0]
 800d782:	79fa      	ldrb	r2, [r7, #7]
 800d784:	4613      	mov	r3, r2
 800d786:	005b      	lsls	r3, r3, #1
 800d788:	4413      	add	r3, r2
 800d78a:	00db      	lsls	r3, r3, #3
 800d78c:	4a08      	ldr	r2, [pc, #32]	; (800d7b0 <etharp_tmr+0x14c>)
 800d78e:	4413      	add	r3, r2
 800d790:	3304      	adds	r3, #4
 800d792:	4619      	mov	r1, r3
 800d794:	f000 fe7a 	bl	800e48c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d798:	79fb      	ldrb	r3, [r7, #7]
 800d79a:	3301      	adds	r3, #1
 800d79c:	71fb      	strb	r3, [r7, #7]
 800d79e:	79fb      	ldrb	r3, [r7, #7]
 800d7a0:	2b09      	cmp	r3, #9
 800d7a2:	f67f af65 	bls.w	800d670 <etharp_tmr+0xc>
      }
    }
  }
}
 800d7a6:	bf00      	nop
 800d7a8:	bf00      	nop
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	20006fbc 	.word	0x20006fbc

0800d7b4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b088      	sub	sp, #32
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	607a      	str	r2, [r7, #4]
 800d7c0:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d7c2:	230a      	movs	r3, #10
 800d7c4:	77fb      	strb	r3, [r7, #31]
 800d7c6:	230a      	movs	r3, #10
 800d7c8:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800d7ca:	230a      	movs	r3, #10
 800d7cc:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800d7d2:	230a      	movs	r3, #10
 800d7d4:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	833b      	strh	r3, [r7, #24]
 800d7da:	2300      	movs	r3, #0
 800d7dc:	82fb      	strh	r3, [r7, #22]
 800d7de:	2300      	movs	r3, #0
 800d7e0:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	773b      	strb	r3, [r7, #28]
 800d7e6:	e093      	b.n	800d910 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800d7e8:	7f3a      	ldrb	r2, [r7, #28]
 800d7ea:	4990      	ldr	r1, [pc, #576]	; (800da2c <etharp_find_entry+0x278>)
 800d7ec:	4613      	mov	r3, r2
 800d7ee:	005b      	lsls	r3, r3, #1
 800d7f0:	4413      	add	r3, r2
 800d7f2:	00db      	lsls	r3, r3, #3
 800d7f4:	440b      	add	r3, r1
 800d7f6:	3314      	adds	r3, #20
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d7fc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d800:	2b0a      	cmp	r3, #10
 800d802:	d105      	bne.n	800d810 <etharp_find_entry+0x5c>
 800d804:	7cfb      	ldrb	r3, [r7, #19]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d102      	bne.n	800d810 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800d80a:	7f3b      	ldrb	r3, [r7, #28]
 800d80c:	777b      	strb	r3, [r7, #29]
 800d80e:	e07c      	b.n	800d90a <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d810:	7cfb      	ldrb	r3, [r7, #19]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d079      	beq.n	800d90a <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d816:	7cfb      	ldrb	r3, [r7, #19]
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d009      	beq.n	800d830 <etharp_find_entry+0x7c>
 800d81c:	7cfb      	ldrb	r3, [r7, #19]
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d806      	bhi.n	800d830 <etharp_find_entry+0x7c>
 800d822:	4b83      	ldr	r3, [pc, #524]	; (800da30 <etharp_find_entry+0x27c>)
 800d824:	f240 1225 	movw	r2, #293	; 0x125
 800d828:	4982      	ldr	r1, [pc, #520]	; (800da34 <etharp_find_entry+0x280>)
 800d82a:	4883      	ldr	r0, [pc, #524]	; (800da38 <etharp_find_entry+0x284>)
 800d82c:	f004 ff7c 	bl	8012728 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d00f      	beq.n	800d856 <etharp_find_entry+0xa2>
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	6819      	ldr	r1, [r3, #0]
 800d83a:	7f3a      	ldrb	r2, [r7, #28]
 800d83c:	487b      	ldr	r0, [pc, #492]	; (800da2c <etharp_find_entry+0x278>)
 800d83e:	4613      	mov	r3, r2
 800d840:	005b      	lsls	r3, r3, #1
 800d842:	4413      	add	r3, r2
 800d844:	00db      	lsls	r3, r3, #3
 800d846:	4403      	add	r3, r0
 800d848:	3304      	adds	r3, #4
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4299      	cmp	r1, r3
 800d84e:	d102      	bne.n	800d856 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d850:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800d854:	e0e5      	b.n	800da22 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d856:	7cfb      	ldrb	r3, [r7, #19]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d13b      	bne.n	800d8d4 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d85c:	7f3a      	ldrb	r2, [r7, #28]
 800d85e:	4973      	ldr	r1, [pc, #460]	; (800da2c <etharp_find_entry+0x278>)
 800d860:	4613      	mov	r3, r2
 800d862:	005b      	lsls	r3, r3, #1
 800d864:	4413      	add	r3, r2
 800d866:	00db      	lsls	r3, r3, #3
 800d868:	440b      	add	r3, r1
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d018      	beq.n	800d8a2 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800d870:	7f3a      	ldrb	r2, [r7, #28]
 800d872:	496e      	ldr	r1, [pc, #440]	; (800da2c <etharp_find_entry+0x278>)
 800d874:	4613      	mov	r3, r2
 800d876:	005b      	lsls	r3, r3, #1
 800d878:	4413      	add	r3, r2
 800d87a:	00db      	lsls	r3, r3, #3
 800d87c:	440b      	add	r3, r1
 800d87e:	3312      	adds	r3, #18
 800d880:	881b      	ldrh	r3, [r3, #0]
 800d882:	8b3a      	ldrh	r2, [r7, #24]
 800d884:	429a      	cmp	r2, r3
 800d886:	d840      	bhi.n	800d90a <etharp_find_entry+0x156>
            old_queue = i;
 800d888:	7f3b      	ldrb	r3, [r7, #28]
 800d88a:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800d88c:	7f3a      	ldrb	r2, [r7, #28]
 800d88e:	4967      	ldr	r1, [pc, #412]	; (800da2c <etharp_find_entry+0x278>)
 800d890:	4613      	mov	r3, r2
 800d892:	005b      	lsls	r3, r3, #1
 800d894:	4413      	add	r3, r2
 800d896:	00db      	lsls	r3, r3, #3
 800d898:	440b      	add	r3, r1
 800d89a:	3312      	adds	r3, #18
 800d89c:	881b      	ldrh	r3, [r3, #0]
 800d89e:	833b      	strh	r3, [r7, #24]
 800d8a0:	e033      	b.n	800d90a <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d8a2:	7f3a      	ldrb	r2, [r7, #28]
 800d8a4:	4961      	ldr	r1, [pc, #388]	; (800da2c <etharp_find_entry+0x278>)
 800d8a6:	4613      	mov	r3, r2
 800d8a8:	005b      	lsls	r3, r3, #1
 800d8aa:	4413      	add	r3, r2
 800d8ac:	00db      	lsls	r3, r3, #3
 800d8ae:	440b      	add	r3, r1
 800d8b0:	3312      	adds	r3, #18
 800d8b2:	881b      	ldrh	r3, [r3, #0]
 800d8b4:	8afa      	ldrh	r2, [r7, #22]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d827      	bhi.n	800d90a <etharp_find_entry+0x156>
            old_pending = i;
 800d8ba:	7f3b      	ldrb	r3, [r7, #28]
 800d8bc:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800d8be:	7f3a      	ldrb	r2, [r7, #28]
 800d8c0:	495a      	ldr	r1, [pc, #360]	; (800da2c <etharp_find_entry+0x278>)
 800d8c2:	4613      	mov	r3, r2
 800d8c4:	005b      	lsls	r3, r3, #1
 800d8c6:	4413      	add	r3, r2
 800d8c8:	00db      	lsls	r3, r3, #3
 800d8ca:	440b      	add	r3, r1
 800d8cc:	3312      	adds	r3, #18
 800d8ce:	881b      	ldrh	r3, [r3, #0]
 800d8d0:	82fb      	strh	r3, [r7, #22]
 800d8d2:	e01a      	b.n	800d90a <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d8d4:	7cfb      	ldrb	r3, [r7, #19]
 800d8d6:	2b01      	cmp	r3, #1
 800d8d8:	d917      	bls.n	800d90a <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d8da:	7f3a      	ldrb	r2, [r7, #28]
 800d8dc:	4953      	ldr	r1, [pc, #332]	; (800da2c <etharp_find_entry+0x278>)
 800d8de:	4613      	mov	r3, r2
 800d8e0:	005b      	lsls	r3, r3, #1
 800d8e2:	4413      	add	r3, r2
 800d8e4:	00db      	lsls	r3, r3, #3
 800d8e6:	440b      	add	r3, r1
 800d8e8:	3312      	adds	r3, #18
 800d8ea:	881b      	ldrh	r3, [r3, #0]
 800d8ec:	8aba      	ldrh	r2, [r7, #20]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d80b      	bhi.n	800d90a <etharp_find_entry+0x156>
            old_stable = i;
 800d8f2:	7f3b      	ldrb	r3, [r7, #28]
 800d8f4:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800d8f6:	7f3a      	ldrb	r2, [r7, #28]
 800d8f8:	494c      	ldr	r1, [pc, #304]	; (800da2c <etharp_find_entry+0x278>)
 800d8fa:	4613      	mov	r3, r2
 800d8fc:	005b      	lsls	r3, r3, #1
 800d8fe:	4413      	add	r3, r2
 800d900:	00db      	lsls	r3, r3, #3
 800d902:	440b      	add	r3, r1
 800d904:	3312      	adds	r3, #18
 800d906:	881b      	ldrh	r3, [r3, #0]
 800d908:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d90a:	7f3b      	ldrb	r3, [r7, #28]
 800d90c:	3301      	adds	r3, #1
 800d90e:	773b      	strb	r3, [r7, #28]
 800d910:	7f3b      	ldrb	r3, [r7, #28]
 800d912:	2b09      	cmp	r3, #9
 800d914:	f67f af68 	bls.w	800d7e8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d918:	7afb      	ldrb	r3, [r7, #11]
 800d91a:	f003 0302 	and.w	r3, r3, #2
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d108      	bne.n	800d934 <etharp_find_entry+0x180>
 800d922:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d926:	2b0a      	cmp	r3, #10
 800d928:	d107      	bne.n	800d93a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d92a:	7afb      	ldrb	r3, [r7, #11]
 800d92c:	f003 0301 	and.w	r3, r3, #1
 800d930:	2b00      	cmp	r3, #0
 800d932:	d102      	bne.n	800d93a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800d934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d938:	e073      	b.n	800da22 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d93a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d93e:	2b09      	cmp	r3, #9
 800d940:	dc02      	bgt.n	800d948 <etharp_find_entry+0x194>
    i = empty;
 800d942:	7f7b      	ldrb	r3, [r7, #29]
 800d944:	773b      	strb	r3, [r7, #28]
 800d946:	e036      	b.n	800d9b6 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d948:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800d94c:	2b09      	cmp	r3, #9
 800d94e:	dc13      	bgt.n	800d978 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800d950:	7fbb      	ldrb	r3, [r7, #30]
 800d952:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d954:	7f3a      	ldrb	r2, [r7, #28]
 800d956:	4935      	ldr	r1, [pc, #212]	; (800da2c <etharp_find_entry+0x278>)
 800d958:	4613      	mov	r3, r2
 800d95a:	005b      	lsls	r3, r3, #1
 800d95c:	4413      	add	r3, r2
 800d95e:	00db      	lsls	r3, r3, #3
 800d960:	440b      	add	r3, r1
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d018      	beq.n	800d99a <etharp_find_entry+0x1e6>
 800d968:	4b31      	ldr	r3, [pc, #196]	; (800da30 <etharp_find_entry+0x27c>)
 800d96a:	f240 126f 	movw	r2, #367	; 0x16f
 800d96e:	4933      	ldr	r1, [pc, #204]	; (800da3c <etharp_find_entry+0x288>)
 800d970:	4831      	ldr	r0, [pc, #196]	; (800da38 <etharp_find_entry+0x284>)
 800d972:	f004 fed9 	bl	8012728 <iprintf>
 800d976:	e010      	b.n	800d99a <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d978:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d97c:	2b09      	cmp	r3, #9
 800d97e:	dc02      	bgt.n	800d986 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800d980:	7ffb      	ldrb	r3, [r7, #31]
 800d982:	773b      	strb	r3, [r7, #28]
 800d984:	e009      	b.n	800d99a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d986:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d98a:	2b09      	cmp	r3, #9
 800d98c:	dc02      	bgt.n	800d994 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d98e:	7efb      	ldrb	r3, [r7, #27]
 800d990:	773b      	strb	r3, [r7, #28]
 800d992:	e002      	b.n	800d99a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800d994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d998:	e043      	b.n	800da22 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d99a:	7f3b      	ldrb	r3, [r7, #28]
 800d99c:	2b09      	cmp	r3, #9
 800d99e:	d906      	bls.n	800d9ae <etharp_find_entry+0x1fa>
 800d9a0:	4b23      	ldr	r3, [pc, #140]	; (800da30 <etharp_find_entry+0x27c>)
 800d9a2:	f240 1281 	movw	r2, #385	; 0x181
 800d9a6:	4926      	ldr	r1, [pc, #152]	; (800da40 <etharp_find_entry+0x28c>)
 800d9a8:	4823      	ldr	r0, [pc, #140]	; (800da38 <etharp_find_entry+0x284>)
 800d9aa:	f004 febd 	bl	8012728 <iprintf>
    etharp_free_entry(i);
 800d9ae:	7f3b      	ldrb	r3, [r7, #28]
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7ff fe25 	bl	800d600 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d9b6:	7f3b      	ldrb	r3, [r7, #28]
 800d9b8:	2b09      	cmp	r3, #9
 800d9ba:	d906      	bls.n	800d9ca <etharp_find_entry+0x216>
 800d9bc:	4b1c      	ldr	r3, [pc, #112]	; (800da30 <etharp_find_entry+0x27c>)
 800d9be:	f240 1285 	movw	r2, #389	; 0x185
 800d9c2:	491f      	ldr	r1, [pc, #124]	; (800da40 <etharp_find_entry+0x28c>)
 800d9c4:	481c      	ldr	r0, [pc, #112]	; (800da38 <etharp_find_entry+0x284>)
 800d9c6:	f004 feaf 	bl	8012728 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d9ca:	7f3a      	ldrb	r2, [r7, #28]
 800d9cc:	4917      	ldr	r1, [pc, #92]	; (800da2c <etharp_find_entry+0x278>)
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	005b      	lsls	r3, r3, #1
 800d9d2:	4413      	add	r3, r2
 800d9d4:	00db      	lsls	r3, r3, #3
 800d9d6:	440b      	add	r3, r1
 800d9d8:	3314      	adds	r3, #20
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d006      	beq.n	800d9ee <etharp_find_entry+0x23a>
 800d9e0:	4b13      	ldr	r3, [pc, #76]	; (800da30 <etharp_find_entry+0x27c>)
 800d9e2:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800d9e6:	4917      	ldr	r1, [pc, #92]	; (800da44 <etharp_find_entry+0x290>)
 800d9e8:	4813      	ldr	r0, [pc, #76]	; (800da38 <etharp_find_entry+0x284>)
 800d9ea:	f004 fe9d 	bl	8012728 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d00a      	beq.n	800da0a <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d9f4:	7f3a      	ldrb	r2, [r7, #28]
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	6819      	ldr	r1, [r3, #0]
 800d9fa:	480c      	ldr	r0, [pc, #48]	; (800da2c <etharp_find_entry+0x278>)
 800d9fc:	4613      	mov	r3, r2
 800d9fe:	005b      	lsls	r3, r3, #1
 800da00:	4413      	add	r3, r2
 800da02:	00db      	lsls	r3, r3, #3
 800da04:	4403      	add	r3, r0
 800da06:	3304      	adds	r3, #4
 800da08:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800da0a:	7f3a      	ldrb	r2, [r7, #28]
 800da0c:	4907      	ldr	r1, [pc, #28]	; (800da2c <etharp_find_entry+0x278>)
 800da0e:	4613      	mov	r3, r2
 800da10:	005b      	lsls	r3, r3, #1
 800da12:	4413      	add	r3, r2
 800da14:	00db      	lsls	r3, r3, #3
 800da16:	440b      	add	r3, r1
 800da18:	3312      	adds	r3, #18
 800da1a:	2200      	movs	r2, #0
 800da1c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800da1e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800da22:	4618      	mov	r0, r3
 800da24:	3720      	adds	r7, #32
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	20006fbc 	.word	0x20006fbc
 800da30:	08017a20 	.word	0x08017a20
 800da34:	08017a58 	.word	0x08017a58
 800da38:	08017a98 	.word	0x08017a98
 800da3c:	08017ac0 	.word	0x08017ac0
 800da40:	08017ad8 	.word	0x08017ad8
 800da44:	08017aec 	.word	0x08017aec

0800da48 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b088      	sub	sp, #32
 800da4c:	af02      	add	r7, sp, #8
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	60b9      	str	r1, [r7, #8]
 800da52:	607a      	str	r2, [r7, #4]
 800da54:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da5c:	2b06      	cmp	r3, #6
 800da5e:	d006      	beq.n	800da6e <etharp_update_arp_entry+0x26>
 800da60:	4b48      	ldr	r3, [pc, #288]	; (800db84 <etharp_update_arp_entry+0x13c>)
 800da62:	f240 12ab 	movw	r2, #427	; 0x1ab
 800da66:	4948      	ldr	r1, [pc, #288]	; (800db88 <etharp_update_arp_entry+0x140>)
 800da68:	4848      	ldr	r0, [pc, #288]	; (800db8c <etharp_update_arp_entry+0x144>)
 800da6a:	f004 fe5d 	bl	8012728 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d012      	beq.n	800da9a <etharp_update_arp_entry+0x52>
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d00e      	beq.n	800da9a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	68f9      	ldr	r1, [r7, #12]
 800da82:	4618      	mov	r0, r3
 800da84:	f001 f9c6 	bl	800ee14 <ip4_addr_isbroadcast_u32>
 800da88:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d105      	bne.n	800da9a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800da96:	2be0      	cmp	r3, #224	; 0xe0
 800da98:	d102      	bne.n	800daa0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800da9a:	f06f 030f 	mvn.w	r3, #15
 800da9e:	e06c      	b.n	800db7a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800daa0:	78fb      	ldrb	r3, [r7, #3]
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	4619      	mov	r1, r3
 800daa6:	68b8      	ldr	r0, [r7, #8]
 800daa8:	f7ff fe84 	bl	800d7b4 <etharp_find_entry>
 800daac:	4603      	mov	r3, r0
 800daae:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800dab0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	da02      	bge.n	800dabe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800dab8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dabc:	e05d      	b.n	800db7a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dabe:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800dac2:	4933      	ldr	r1, [pc, #204]	; (800db90 <etharp_update_arp_entry+0x148>)
 800dac4:	4613      	mov	r3, r2
 800dac6:	005b      	lsls	r3, r3, #1
 800dac8:	4413      	add	r3, r2
 800daca:	00db      	lsls	r3, r3, #3
 800dacc:	440b      	add	r3, r1
 800dace:	3314      	adds	r3, #20
 800dad0:	2202      	movs	r2, #2
 800dad2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800dad4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800dad8:	492d      	ldr	r1, [pc, #180]	; (800db90 <etharp_update_arp_entry+0x148>)
 800dada:	4613      	mov	r3, r2
 800dadc:	005b      	lsls	r3, r3, #1
 800dade:	4413      	add	r3, r2
 800dae0:	00db      	lsls	r3, r3, #3
 800dae2:	440b      	add	r3, r1
 800dae4:	3308      	adds	r3, #8
 800dae6:	68fa      	ldr	r2, [r7, #12]
 800dae8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800daea:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800daee:	4613      	mov	r3, r2
 800daf0:	005b      	lsls	r3, r3, #1
 800daf2:	4413      	add	r3, r2
 800daf4:	00db      	lsls	r3, r3, #3
 800daf6:	3308      	adds	r3, #8
 800daf8:	4a25      	ldr	r2, [pc, #148]	; (800db90 <etharp_update_arp_entry+0x148>)
 800dafa:	4413      	add	r3, r2
 800dafc:	3304      	adds	r3, #4
 800dafe:	2206      	movs	r2, #6
 800db00:	6879      	ldr	r1, [r7, #4]
 800db02:	4618      	mov	r0, r3
 800db04:	f003 ff8c 	bl	8011a20 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800db08:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800db0c:	4920      	ldr	r1, [pc, #128]	; (800db90 <etharp_update_arp_entry+0x148>)
 800db0e:	4613      	mov	r3, r2
 800db10:	005b      	lsls	r3, r3, #1
 800db12:	4413      	add	r3, r2
 800db14:	00db      	lsls	r3, r3, #3
 800db16:	440b      	add	r3, r1
 800db18:	3312      	adds	r3, #18
 800db1a:	2200      	movs	r2, #0
 800db1c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800db1e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800db22:	491b      	ldr	r1, [pc, #108]	; (800db90 <etharp_update_arp_entry+0x148>)
 800db24:	4613      	mov	r3, r2
 800db26:	005b      	lsls	r3, r3, #1
 800db28:	4413      	add	r3, r2
 800db2a:	00db      	lsls	r3, r3, #3
 800db2c:	440b      	add	r3, r1
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d021      	beq.n	800db78 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800db34:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800db38:	4915      	ldr	r1, [pc, #84]	; (800db90 <etharp_update_arp_entry+0x148>)
 800db3a:	4613      	mov	r3, r2
 800db3c:	005b      	lsls	r3, r3, #1
 800db3e:	4413      	add	r3, r2
 800db40:	00db      	lsls	r3, r3, #3
 800db42:	440b      	add	r3, r1
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800db48:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800db4c:	4910      	ldr	r1, [pc, #64]	; (800db90 <etharp_update_arp_entry+0x148>)
 800db4e:	4613      	mov	r3, r2
 800db50:	005b      	lsls	r3, r3, #1
 800db52:	4413      	add	r3, r2
 800db54:	00db      	lsls	r3, r3, #3
 800db56:	440b      	add	r3, r1
 800db58:	2200      	movs	r2, #0
 800db5a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800db62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6939      	ldr	r1, [r7, #16]
 800db6c:	68f8      	ldr	r0, [r7, #12]
 800db6e:	f002 f84f 	bl	800fc10 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800db72:	6938      	ldr	r0, [r7, #16]
 800db74:	f7fa f88e 	bl	8007c94 <pbuf_free>
  }
  return ERR_OK;
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3718      	adds	r7, #24
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	08017a20 	.word	0x08017a20
 800db88:	08017b18 	.word	0x08017b18
 800db8c:	08017a98 	.word	0x08017a98
 800db90:	20006fbc 	.word	0x20006fbc

0800db94 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800db9c:	2300      	movs	r3, #0
 800db9e:	73fb      	strb	r3, [r7, #15]
 800dba0:	e01f      	b.n	800dbe2 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800dba2:	7bfa      	ldrb	r2, [r7, #15]
 800dba4:	4913      	ldr	r1, [pc, #76]	; (800dbf4 <etharp_cleanup_netif+0x60>)
 800dba6:	4613      	mov	r3, r2
 800dba8:	005b      	lsls	r3, r3, #1
 800dbaa:	4413      	add	r3, r2
 800dbac:	00db      	lsls	r3, r3, #3
 800dbae:	440b      	add	r3, r1
 800dbb0:	3314      	adds	r3, #20
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800dbb6:	7bbb      	ldrb	r3, [r7, #14]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00f      	beq.n	800dbdc <etharp_cleanup_netif+0x48>
 800dbbc:	7bfa      	ldrb	r2, [r7, #15]
 800dbbe:	490d      	ldr	r1, [pc, #52]	; (800dbf4 <etharp_cleanup_netif+0x60>)
 800dbc0:	4613      	mov	r3, r2
 800dbc2:	005b      	lsls	r3, r3, #1
 800dbc4:	4413      	add	r3, r2
 800dbc6:	00db      	lsls	r3, r3, #3
 800dbc8:	440b      	add	r3, r1
 800dbca:	3308      	adds	r3, #8
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d103      	bne.n	800dbdc <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800dbd4:	7bfb      	ldrb	r3, [r7, #15]
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7ff fd12 	bl	800d600 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dbdc:	7bfb      	ldrb	r3, [r7, #15]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	73fb      	strb	r3, [r7, #15]
 800dbe2:	7bfb      	ldrb	r3, [r7, #15]
 800dbe4:	2b09      	cmp	r3, #9
 800dbe6:	d9dc      	bls.n	800dba2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800dbe8:	bf00      	nop
 800dbea:	bf00      	nop
 800dbec:	3710      	adds	r7, #16
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	20006fbc 	.word	0x20006fbc

0800dbf8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800dbf8:	b5b0      	push	{r4, r5, r7, lr}
 800dbfa:	b08a      	sub	sp, #40	; 0x28
 800dbfc:	af04      	add	r7, sp, #16
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d107      	bne.n	800dc18 <etharp_input+0x20>
 800dc08:	4b49      	ldr	r3, [pc, #292]	; (800dd30 <etharp_input+0x138>)
 800dc0a:	f44f 7222 	mov.w	r2, #648	; 0x288
 800dc0e:	4949      	ldr	r1, [pc, #292]	; (800dd34 <etharp_input+0x13c>)
 800dc10:	4849      	ldr	r0, [pc, #292]	; (800dd38 <etharp_input+0x140>)
 800dc12:	f004 fd89 	bl	8012728 <iprintf>
 800dc16:	e088      	b.n	800dd2a <etharp_input+0x132>

  hdr = (struct etharp_hdr *)p->payload;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	685b      	ldr	r3, [r3, #4]
 800dc1c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	881b      	ldrh	r3, [r3, #0]
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc28:	d10c      	bne.n	800dc44 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800dc2e:	2b06      	cmp	r3, #6
 800dc30:	d108      	bne.n	800dc44 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dc36:	2b04      	cmp	r3, #4
 800dc38:	d104      	bne.n	800dc44 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	885b      	ldrh	r3, [r3, #2]
 800dc3e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dc40:	2b08      	cmp	r3, #8
 800dc42:	d00f      	beq.n	800dc64 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 800dc44:	4b3d      	ldr	r3, [pc, #244]	; (800dd3c <etharp_input+0x144>)
 800dc46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc48:	3301      	adds	r3, #1
 800dc4a:	b29a      	uxth	r2, r3
 800dc4c:	4b3b      	ldr	r3, [pc, #236]	; (800dd3c <etharp_input+0x144>)
 800dc4e:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 800dc50:	4b3a      	ldr	r3, [pc, #232]	; (800dd3c <etharp_input+0x144>)
 800dc52:	8bdb      	ldrh	r3, [r3, #30]
 800dc54:	3301      	adds	r3, #1
 800dc56:	b29a      	uxth	r2, r3
 800dc58:	4b38      	ldr	r3, [pc, #224]	; (800dd3c <etharp_input+0x144>)
 800dc5a:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f7fa f819 	bl	8007c94 <pbuf_free>
    return;
 800dc62:	e062      	b.n	800dd2a <etharp_input+0x132>
  }
  ETHARP_STATS_INC(etharp.recv);
 800dc64:	4b35      	ldr	r3, [pc, #212]	; (800dd3c <etharp_input+0x144>)
 800dc66:	8b5b      	ldrh	r3, [r3, #26]
 800dc68:	3301      	adds	r3, #1
 800dc6a:	b29a      	uxth	r2, r3
 800dc6c:	4b33      	ldr	r3, [pc, #204]	; (800dd3c <etharp_input+0x144>)
 800dc6e:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	330e      	adds	r3, #14
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	3318      	adds	r3, #24
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	3304      	adds	r3, #4
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d102      	bne.n	800dc90 <etharp_input+0x98>
    for_us = 0;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	75fb      	strb	r3, [r7, #23]
 800dc8e:	e009      	b.n	800dca4 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800dc90:	68ba      	ldr	r2, [r7, #8]
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	3304      	adds	r3, #4
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	bf0c      	ite	eq
 800dc9c:	2301      	moveq	r3, #1
 800dc9e:	2300      	movne	r3, #0
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	f103 0208 	add.w	r2, r3, #8
 800dcaa:	7dfb      	ldrb	r3, [r7, #23]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d001      	beq.n	800dcb4 <etharp_input+0xbc>
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	e000      	b.n	800dcb6 <etharp_input+0xbe>
 800dcb4:	2302      	movs	r3, #2
 800dcb6:	f107 010c 	add.w	r1, r7, #12
 800dcba:	6838      	ldr	r0, [r7, #0]
 800dcbc:	f7ff fec4 	bl	800da48 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	88db      	ldrh	r3, [r3, #6]
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcca:	d003      	beq.n	800dcd4 <etharp_input+0xdc>
 800dccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcd0:	d025      	beq.n	800dd1e <etharp_input+0x126>
 800dcd2:	e01d      	b.n	800dd10 <etharp_input+0x118>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 800dcd4:	7dfb      	ldrb	r3, [r7, #23]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d023      	beq.n	800dd22 <etharp_input+0x12a>
      /* send ARP response */
      etharp_raw(netif,
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800dcf0:	693a      	ldr	r2, [r7, #16]
 800dcf2:	3208      	adds	r2, #8
      etharp_raw(netif,
 800dcf4:	2102      	movs	r1, #2
 800dcf6:	9103      	str	r1, [sp, #12]
 800dcf8:	f107 010c 	add.w	r1, r7, #12
 800dcfc:	9102      	str	r1, [sp, #8]
 800dcfe:	9201      	str	r2, [sp, #4]
 800dd00:	9300      	str	r3, [sp, #0]
 800dd02:	462b      	mov	r3, r5
 800dd04:	4622      	mov	r2, r4
 800dd06:	4601      	mov	r1, r0
 800dd08:	6838      	ldr	r0, [r7, #0]
 800dd0a:	f000 fb03 	bl	800e314 <etharp_raw>
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
    }
    break;
 800dd0e:	e008      	b.n	800dd22 <etharp_input+0x12a>
    dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
 800dd10:	4b0a      	ldr	r3, [pc, #40]	; (800dd3c <etharp_input+0x144>)
 800dd12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dd14:	3301      	adds	r3, #1
 800dd16:	b29a      	uxth	r2, r3
 800dd18:	4b08      	ldr	r3, [pc, #32]	; (800dd3c <etharp_input+0x144>)
 800dd1a:	859a      	strh	r2, [r3, #44]	; 0x2c
    break;
 800dd1c:	e002      	b.n	800dd24 <etharp_input+0x12c>
    break;
 800dd1e:	bf00      	nop
 800dd20:	e000      	b.n	800dd24 <etharp_input+0x12c>
    break;
 800dd22:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f7f9 ffb5 	bl	8007c94 <pbuf_free>
}
 800dd2a:	3718      	adds	r7, #24
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bdb0      	pop	{r4, r5, r7, pc}
 800dd30:	08017a20 	.word	0x08017a20
 800dd34:	08017b70 	.word	0x08017b70
 800dd38:	08017a98 	.word	0x08017a98
 800dd3c:	20006e84 	.word	0x20006e84

0800dd40 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b086      	sub	sp, #24
 800dd44:	af02      	add	r7, sp, #8
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	4613      	mov	r3, r2
 800dd4c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dd4e:	79fa      	ldrb	r2, [r7, #7]
 800dd50:	4944      	ldr	r1, [pc, #272]	; (800de64 <etharp_output_to_arp_index+0x124>)
 800dd52:	4613      	mov	r3, r2
 800dd54:	005b      	lsls	r3, r3, #1
 800dd56:	4413      	add	r3, r2
 800dd58:	00db      	lsls	r3, r3, #3
 800dd5a:	440b      	add	r3, r1
 800dd5c:	3314      	adds	r3, #20
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	d806      	bhi.n	800dd72 <etharp_output_to_arp_index+0x32>
 800dd64:	4b40      	ldr	r3, [pc, #256]	; (800de68 <etharp_output_to_arp_index+0x128>)
 800dd66:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800dd6a:	4940      	ldr	r1, [pc, #256]	; (800de6c <etharp_output_to_arp_index+0x12c>)
 800dd6c:	4840      	ldr	r0, [pc, #256]	; (800de70 <etharp_output_to_arp_index+0x130>)
 800dd6e:	f004 fcdb 	bl	8012728 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800dd72:	79fa      	ldrb	r2, [r7, #7]
 800dd74:	493b      	ldr	r1, [pc, #236]	; (800de64 <etharp_output_to_arp_index+0x124>)
 800dd76:	4613      	mov	r3, r2
 800dd78:	005b      	lsls	r3, r3, #1
 800dd7a:	4413      	add	r3, r2
 800dd7c:	00db      	lsls	r3, r3, #3
 800dd7e:	440b      	add	r3, r1
 800dd80:	3314      	adds	r3, #20
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	2b02      	cmp	r3, #2
 800dd86:	d153      	bne.n	800de30 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800dd88:	79fa      	ldrb	r2, [r7, #7]
 800dd8a:	4936      	ldr	r1, [pc, #216]	; (800de64 <etharp_output_to_arp_index+0x124>)
 800dd8c:	4613      	mov	r3, r2
 800dd8e:	005b      	lsls	r3, r3, #1
 800dd90:	4413      	add	r3, r2
 800dd92:	00db      	lsls	r3, r3, #3
 800dd94:	440b      	add	r3, r1
 800dd96:	3312      	adds	r3, #18
 800dd98:	881b      	ldrh	r3, [r3, #0]
 800dd9a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800dd9e:	d919      	bls.n	800ddd4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800dda0:	79fa      	ldrb	r2, [r7, #7]
 800dda2:	4613      	mov	r3, r2
 800dda4:	005b      	lsls	r3, r3, #1
 800dda6:	4413      	add	r3, r2
 800dda8:	00db      	lsls	r3, r3, #3
 800ddaa:	4a2e      	ldr	r2, [pc, #184]	; (800de64 <etharp_output_to_arp_index+0x124>)
 800ddac:	4413      	add	r3, r2
 800ddae:	3304      	adds	r3, #4
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	68f8      	ldr	r0, [r7, #12]
 800ddb4:	f000 fb6a 	bl	800e48c <etharp_request>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d138      	bne.n	800de30 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ddbe:	79fa      	ldrb	r2, [r7, #7]
 800ddc0:	4928      	ldr	r1, [pc, #160]	; (800de64 <etharp_output_to_arp_index+0x124>)
 800ddc2:	4613      	mov	r3, r2
 800ddc4:	005b      	lsls	r3, r3, #1
 800ddc6:	4413      	add	r3, r2
 800ddc8:	00db      	lsls	r3, r3, #3
 800ddca:	440b      	add	r3, r1
 800ddcc:	3314      	adds	r3, #20
 800ddce:	2203      	movs	r2, #3
 800ddd0:	701a      	strb	r2, [r3, #0]
 800ddd2:	e02d      	b.n	800de30 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ddd4:	79fa      	ldrb	r2, [r7, #7]
 800ddd6:	4923      	ldr	r1, [pc, #140]	; (800de64 <etharp_output_to_arp_index+0x124>)
 800ddd8:	4613      	mov	r3, r2
 800ddda:	005b      	lsls	r3, r3, #1
 800dddc:	4413      	add	r3, r2
 800ddde:	00db      	lsls	r3, r3, #3
 800dde0:	440b      	add	r3, r1
 800dde2:	3312      	adds	r3, #18
 800dde4:	881b      	ldrh	r3, [r3, #0]
 800dde6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ddea:	d321      	bcc.n	800de30 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ddec:	79fa      	ldrb	r2, [r7, #7]
 800ddee:	4613      	mov	r3, r2
 800ddf0:	005b      	lsls	r3, r3, #1
 800ddf2:	4413      	add	r3, r2
 800ddf4:	00db      	lsls	r3, r3, #3
 800ddf6:	4a1b      	ldr	r2, [pc, #108]	; (800de64 <etharp_output_to_arp_index+0x124>)
 800ddf8:	4413      	add	r3, r2
 800ddfa:	1d19      	adds	r1, r3, #4
 800ddfc:	79fa      	ldrb	r2, [r7, #7]
 800ddfe:	4613      	mov	r3, r2
 800de00:	005b      	lsls	r3, r3, #1
 800de02:	4413      	add	r3, r2
 800de04:	00db      	lsls	r3, r3, #3
 800de06:	3308      	adds	r3, #8
 800de08:	4a16      	ldr	r2, [pc, #88]	; (800de64 <etharp_output_to_arp_index+0x124>)
 800de0a:	4413      	add	r3, r2
 800de0c:	3304      	adds	r3, #4
 800de0e:	461a      	mov	r2, r3
 800de10:	68f8      	ldr	r0, [r7, #12]
 800de12:	f000 fb19 	bl	800e448 <etharp_request_dst>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d109      	bne.n	800de30 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800de1c:	79fa      	ldrb	r2, [r7, #7]
 800de1e:	4911      	ldr	r1, [pc, #68]	; (800de64 <etharp_output_to_arp_index+0x124>)
 800de20:	4613      	mov	r3, r2
 800de22:	005b      	lsls	r3, r3, #1
 800de24:	4413      	add	r3, r2
 800de26:	00db      	lsls	r3, r3, #3
 800de28:	440b      	add	r3, r1
 800de2a:	3314      	adds	r3, #20
 800de2c:	2203      	movs	r2, #3
 800de2e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800de36:	79fa      	ldrb	r2, [r7, #7]
 800de38:	4613      	mov	r3, r2
 800de3a:	005b      	lsls	r3, r3, #1
 800de3c:	4413      	add	r3, r2
 800de3e:	00db      	lsls	r3, r3, #3
 800de40:	3308      	adds	r3, #8
 800de42:	4a08      	ldr	r2, [pc, #32]	; (800de64 <etharp_output_to_arp_index+0x124>)
 800de44:	4413      	add	r3, r2
 800de46:	3304      	adds	r3, #4
 800de48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de4c:	9200      	str	r2, [sp, #0]
 800de4e:	460a      	mov	r2, r1
 800de50:	68b9      	ldr	r1, [r7, #8]
 800de52:	68f8      	ldr	r0, [r7, #12]
 800de54:	f001 fedc 	bl	800fc10 <ethernet_output>
 800de58:	4603      	mov	r3, r0
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3710      	adds	r7, #16
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	20006fbc 	.word	0x20006fbc
 800de68:	08017a20 	.word	0x08017a20
 800de6c:	08017b90 	.word	0x08017b90
 800de70:	08017a98 	.word	0x08017a98

0800de74 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b08a      	sub	sp, #40	; 0x28
 800de78:	af02      	add	r7, sp, #8
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d106      	bne.n	800de98 <etharp_output+0x24>
 800de8a:	4b6c      	ldr	r3, [pc, #432]	; (800e03c <etharp_output+0x1c8>)
 800de8c:	f240 321b 	movw	r2, #795	; 0x31b
 800de90:	496b      	ldr	r1, [pc, #428]	; (800e040 <etharp_output+0x1cc>)
 800de92:	486c      	ldr	r0, [pc, #432]	; (800e044 <etharp_output+0x1d0>)
 800de94:	f004 fc48 	bl	8012728 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d106      	bne.n	800deac <etharp_output+0x38>
 800de9e:	4b67      	ldr	r3, [pc, #412]	; (800e03c <etharp_output+0x1c8>)
 800dea0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800dea4:	4968      	ldr	r1, [pc, #416]	; (800e048 <etharp_output+0x1d4>)
 800dea6:	4867      	ldr	r0, [pc, #412]	; (800e044 <etharp_output+0x1d0>)
 800dea8:	f004 fc3e 	bl	8012728 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d106      	bne.n	800dec0 <etharp_output+0x4c>
 800deb2:	4b62      	ldr	r3, [pc, #392]	; (800e03c <etharp_output+0x1c8>)
 800deb4:	f240 321d 	movw	r2, #797	; 0x31d
 800deb8:	4964      	ldr	r1, [pc, #400]	; (800e04c <etharp_output+0x1d8>)
 800deba:	4862      	ldr	r0, [pc, #392]	; (800e044 <etharp_output+0x1d0>)
 800debc:	f004 fc34 	bl	8012728 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	68f9      	ldr	r1, [r7, #12]
 800dec6:	4618      	mov	r0, r3
 800dec8:	f000 ffa4 	bl	800ee14 <ip4_addr_isbroadcast_u32>
 800decc:	4603      	mov	r3, r0
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d002      	beq.n	800ded8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ded2:	4b5f      	ldr	r3, [pc, #380]	; (800e050 <etharp_output+0x1dc>)
 800ded4:	61fb      	str	r3, [r7, #28]
 800ded6:	e0a1      	b.n	800e01c <etharp_output+0x1a8>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dee0:	2be0      	cmp	r3, #224	; 0xe0
 800dee2:	d118      	bne.n	800df16 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800dee4:	2301      	movs	r3, #1
 800dee6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800dee8:	2300      	movs	r3, #0
 800deea:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800deec:	235e      	movs	r3, #94	; 0x5e
 800deee:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	3301      	adds	r3, #1
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800defa:	b2db      	uxtb	r3, r3
 800defc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	3302      	adds	r3, #2
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	3303      	adds	r3, #3
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800df0e:	f107 0310 	add.w	r3, r7, #16
 800df12:	61fb      	str	r3, [r7, #28]
 800df14:	e082      	b.n	800e01c <etharp_output+0x1a8>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	3304      	adds	r3, #4
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	405a      	eors	r2, r3
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	3308      	adds	r3, #8
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4013      	ands	r3, r2
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d012      	beq.n	800df54 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800df34:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800df38:	4293      	cmp	r3, r2
 800df3a:	d00b      	beq.n	800df54 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	330c      	adds	r3, #12
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d003      	beq.n	800df4e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	330c      	adds	r3, #12
 800df4a:	61bb      	str	r3, [r7, #24]
 800df4c:	e002      	b.n	800df54 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800df4e:	f06f 0303 	mvn.w	r3, #3
 800df52:	e06f      	b.n	800e034 <etharp_output+0x1c0>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800df54:	4b3f      	ldr	r3, [pc, #252]	; (800e054 <etharp_output+0x1e0>)
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	4619      	mov	r1, r3
 800df5a:	4a3f      	ldr	r2, [pc, #252]	; (800e058 <etharp_output+0x1e4>)
 800df5c:	460b      	mov	r3, r1
 800df5e:	005b      	lsls	r3, r3, #1
 800df60:	440b      	add	r3, r1
 800df62:	00db      	lsls	r3, r3, #3
 800df64:	4413      	add	r3, r2
 800df66:	3314      	adds	r3, #20
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d91d      	bls.n	800dfaa <etharp_output+0x136>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800df6e:	69bb      	ldr	r3, [r7, #24]
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	4b38      	ldr	r3, [pc, #224]	; (800e054 <etharp_output+0x1e0>)
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	4618      	mov	r0, r3
 800df78:	4937      	ldr	r1, [pc, #220]	; (800e058 <etharp_output+0x1e4>)
 800df7a:	4603      	mov	r3, r0
 800df7c:	005b      	lsls	r3, r3, #1
 800df7e:	4403      	add	r3, r0
 800df80:	00db      	lsls	r3, r3, #3
 800df82:	440b      	add	r3, r1
 800df84:	3304      	adds	r3, #4
 800df86:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800df88:	429a      	cmp	r2, r3
 800df8a:	d10e      	bne.n	800dfaa <etharp_output+0x136>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 800df8c:	4b33      	ldr	r3, [pc, #204]	; (800e05c <etharp_output+0x1e8>)
 800df8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800df90:	3301      	adds	r3, #1
 800df92:	b29a      	uxth	r2, r3
 800df94:	4b31      	ldr	r3, [pc, #196]	; (800e05c <etharp_output+0x1e8>)
 800df96:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800df98:	4b2e      	ldr	r3, [pc, #184]	; (800e054 <etharp_output+0x1e0>)
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	461a      	mov	r2, r3
 800df9e:	68b9      	ldr	r1, [r7, #8]
 800dfa0:	68f8      	ldr	r0, [r7, #12]
 800dfa2:	f7ff fecd 	bl	800dd40 <etharp_output_to_arp_index>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	e044      	b.n	800e034 <etharp_output+0x1c0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dfaa:	2300      	movs	r3, #0
 800dfac:	75fb      	strb	r3, [r7, #23]
 800dfae:	e02a      	b.n	800e006 <etharp_output+0x192>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dfb0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800dfb4:	4928      	ldr	r1, [pc, #160]	; (800e058 <etharp_output+0x1e4>)
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	005b      	lsls	r3, r3, #1
 800dfba:	4413      	add	r3, r2
 800dfbc:	00db      	lsls	r3, r3, #3
 800dfbe:	440b      	add	r3, r1
 800dfc0:	3314      	adds	r3, #20
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d918      	bls.n	800dffa <etharp_output+0x186>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800dfc8:	69bb      	ldr	r3, [r7, #24]
 800dfca:	6819      	ldr	r1, [r3, #0]
 800dfcc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800dfd0:	4821      	ldr	r0, [pc, #132]	; (800e058 <etharp_output+0x1e4>)
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	005b      	lsls	r3, r3, #1
 800dfd6:	4413      	add	r3, r2
 800dfd8:	00db      	lsls	r3, r3, #3
 800dfda:	4403      	add	r3, r0
 800dfdc:	3304      	adds	r3, #4
 800dfde:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dfe0:	4299      	cmp	r1, r3
 800dfe2:	d10a      	bne.n	800dffa <etharp_output+0x186>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800dfe4:	7dfa      	ldrb	r2, [r7, #23]
 800dfe6:	4b1b      	ldr	r3, [pc, #108]	; (800e054 <etharp_output+0x1e0>)
 800dfe8:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800dfea:	7dfb      	ldrb	r3, [r7, #23]
 800dfec:	461a      	mov	r2, r3
 800dfee:	68b9      	ldr	r1, [r7, #8]
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	f7ff fea5 	bl	800dd40 <etharp_output_to_arp_index>
 800dff6:	4603      	mov	r3, r0
 800dff8:	e01c      	b.n	800e034 <etharp_output+0x1c0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dffe:	b2db      	uxtb	r3, r3
 800e000:	3301      	adds	r3, #1
 800e002:	b2db      	uxtb	r3, r3
 800e004:	75fb      	strb	r3, [r7, #23]
 800e006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e00a:	2b09      	cmp	r3, #9
 800e00c:	ddd0      	ble.n	800dfb0 <etharp_output+0x13c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e00e:	68ba      	ldr	r2, [r7, #8]
 800e010:	69b9      	ldr	r1, [r7, #24]
 800e012:	68f8      	ldr	r0, [r7, #12]
 800e014:	f000 f824 	bl	800e060 <etharp_query>
 800e018:	4603      	mov	r3, r0
 800e01a:	e00b      	b.n	800e034 <etharp_output+0x1c0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800e022:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e026:	9300      	str	r3, [sp, #0]
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	68b9      	ldr	r1, [r7, #8]
 800e02c:	68f8      	ldr	r0, [r7, #12]
 800e02e:	f001 fdef 	bl	800fc10 <ethernet_output>
 800e032:	4603      	mov	r3, r0
}
 800e034:	4618      	mov	r0, r3
 800e036:	3720      	adds	r7, #32
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	08017a20 	.word	0x08017a20
 800e040:	08017b70 	.word	0x08017b70
 800e044:	08017a98 	.word	0x08017a98
 800e048:	08017bc0 	.word	0x08017bc0
 800e04c:	08017b60 	.word	0x08017b60
 800e050:	080181ac 	.word	0x080181ac
 800e054:	200070ac 	.word	0x200070ac
 800e058:	20006fbc 	.word	0x20006fbc
 800e05c:	20006e84 	.word	0x20006e84

0800e060 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b08c      	sub	sp, #48	; 0x30
 800e064:	af02      	add	r7, sp, #8
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	3329      	adds	r3, #41	; 0x29
 800e070:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e072:	23ff      	movs	r3, #255	; 0xff
 800e074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e078:	2300      	movs	r3, #0
 800e07a:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	68f9      	ldr	r1, [r7, #12]
 800e082:	4618      	mov	r0, r3
 800e084:	f000 fec6 	bl	800ee14 <ip4_addr_isbroadcast_u32>
 800e088:	4603      	mov	r3, r0
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d10c      	bne.n	800e0a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e096:	2be0      	cmp	r3, #224	; 0xe0
 800e098:	d006      	beq.n	800e0a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d003      	beq.n	800e0a8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d102      	bne.n	800e0ae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e0a8:	f06f 030f 	mvn.w	r3, #15
 800e0ac:	e11d      	b.n	800e2ea <etharp_query+0x28a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e0ae:	68fa      	ldr	r2, [r7, #12]
 800e0b0:	2101      	movs	r1, #1
 800e0b2:	68b8      	ldr	r0, [r7, #8]
 800e0b4:	f7ff fb7e 	bl	800d7b4 <etharp_find_entry>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800e0bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	da0b      	bge.n	800e0dc <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d005      	beq.n	800e0d6 <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 800e0ca:	4b8a      	ldr	r3, [pc, #552]	; (800e2f4 <etharp_query+0x294>)
 800e0cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	b29a      	uxth	r2, r3
 800e0d2:	4b88      	ldr	r3, [pc, #544]	; (800e2f4 <etharp_query+0x294>)
 800e0d4:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i;
 800e0d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e0da:	e106      	b.n	800e2ea <etharp_query+0x28a>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e0dc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e0e0:	4985      	ldr	r1, [pc, #532]	; (800e2f8 <etharp_query+0x298>)
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	005b      	lsls	r3, r3, #1
 800e0e6:	4413      	add	r3, r2
 800e0e8:	00db      	lsls	r3, r3, #3
 800e0ea:	440b      	add	r3, r1
 800e0ec:	3314      	adds	r3, #20
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d117      	bne.n	800e124 <etharp_query+0xc4>
    is_new_entry = 1;
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e0f8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e0fc:	497e      	ldr	r1, [pc, #504]	; (800e2f8 <etharp_query+0x298>)
 800e0fe:	4613      	mov	r3, r2
 800e100:	005b      	lsls	r3, r3, #1
 800e102:	4413      	add	r3, r2
 800e104:	00db      	lsls	r3, r3, #3
 800e106:	440b      	add	r3, r1
 800e108:	3314      	adds	r3, #20
 800e10a:	2201      	movs	r2, #1
 800e10c:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e10e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e112:	4979      	ldr	r1, [pc, #484]	; (800e2f8 <etharp_query+0x298>)
 800e114:	4613      	mov	r3, r2
 800e116:	005b      	lsls	r3, r3, #1
 800e118:	4413      	add	r3, r2
 800e11a:	00db      	lsls	r3, r3, #3
 800e11c:	440b      	add	r3, r1
 800e11e:	3308      	adds	r3, #8
 800e120:	68fa      	ldr	r2, [r7, #12]
 800e122:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e124:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e128:	4973      	ldr	r1, [pc, #460]	; (800e2f8 <etharp_query+0x298>)
 800e12a:	4613      	mov	r3, r2
 800e12c:	005b      	lsls	r3, r3, #1
 800e12e:	4413      	add	r3, r2
 800e130:	00db      	lsls	r3, r3, #3
 800e132:	440b      	add	r3, r1
 800e134:	3314      	adds	r3, #20
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d012      	beq.n	800e162 <etharp_query+0x102>
 800e13c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e140:	496d      	ldr	r1, [pc, #436]	; (800e2f8 <etharp_query+0x298>)
 800e142:	4613      	mov	r3, r2
 800e144:	005b      	lsls	r3, r3, #1
 800e146:	4413      	add	r3, r2
 800e148:	00db      	lsls	r3, r3, #3
 800e14a:	440b      	add	r3, r1
 800e14c:	3314      	adds	r3, #20
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	2b01      	cmp	r3, #1
 800e152:	d806      	bhi.n	800e162 <etharp_query+0x102>
 800e154:	4b69      	ldr	r3, [pc, #420]	; (800e2fc <etharp_query+0x29c>)
 800e156:	f240 32c7 	movw	r2, #967	; 0x3c7
 800e15a:	4969      	ldr	r1, [pc, #420]	; (800e300 <etharp_query+0x2a0>)
 800e15c:	4869      	ldr	r0, [pc, #420]	; (800e304 <etharp_query+0x2a4>)
 800e15e:	f004 fae3 	bl	8012728 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e162:	6a3b      	ldr	r3, [r7, #32]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d102      	bne.n	800e16e <etharp_query+0x10e>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d10c      	bne.n	800e188 <etharp_query+0x128>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e16e:	68b9      	ldr	r1, [r7, #8]
 800e170:	68f8      	ldr	r0, [r7, #12]
 800e172:	f000 f98b 	bl	800e48c <etharp_request>
 800e176:	4603      	mov	r3, r0
 800e178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d102      	bne.n	800e188 <etharp_query+0x128>
      return result;
 800e182:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e186:	e0b0      	b.n	800e2ea <etharp_query+0x28a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d106      	bne.n	800e19c <etharp_query+0x13c>
 800e18e:	4b5b      	ldr	r3, [pc, #364]	; (800e2fc <etharp_query+0x29c>)
 800e190:	f240 32db 	movw	r2, #987	; 0x3db
 800e194:	495c      	ldr	r1, [pc, #368]	; (800e308 <etharp_query+0x2a8>)
 800e196:	485b      	ldr	r0, [pc, #364]	; (800e304 <etharp_query+0x2a4>)
 800e198:	f004 fac6 	bl	8012728 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e19c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e1a0:	4955      	ldr	r1, [pc, #340]	; (800e2f8 <etharp_query+0x298>)
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	005b      	lsls	r3, r3, #1
 800e1a6:	4413      	add	r3, r2
 800e1a8:	00db      	lsls	r3, r3, #3
 800e1aa:	440b      	add	r3, r1
 800e1ac:	3314      	adds	r3, #20
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d918      	bls.n	800e1e6 <etharp_query+0x186>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800e1b4:	7cfa      	ldrb	r2, [r7, #19]
 800e1b6:	4b55      	ldr	r3, [pc, #340]	; (800e30c <etharp_query+0x2ac>)
 800e1b8:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e1ba:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e1be:	4613      	mov	r3, r2
 800e1c0:	005b      	lsls	r3, r3, #1
 800e1c2:	4413      	add	r3, r2
 800e1c4:	00db      	lsls	r3, r3, #3
 800e1c6:	3308      	adds	r3, #8
 800e1c8:	4a4b      	ldr	r2, [pc, #300]	; (800e2f8 <etharp_query+0x298>)
 800e1ca:	4413      	add	r3, r2
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e1d2:	9200      	str	r2, [sp, #0]
 800e1d4:	697a      	ldr	r2, [r7, #20]
 800e1d6:	6879      	ldr	r1, [r7, #4]
 800e1d8:	68f8      	ldr	r0, [r7, #12]
 800e1da:	f001 fd19 	bl	800fc10 <ethernet_output>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1e4:	e07f      	b.n	800e2e6 <etharp_query+0x286>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e1e6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e1ea:	4943      	ldr	r1, [pc, #268]	; (800e2f8 <etharp_query+0x298>)
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	005b      	lsls	r3, r3, #1
 800e1f0:	4413      	add	r3, r2
 800e1f2:	00db      	lsls	r3, r3, #3
 800e1f4:	440b      	add	r3, r1
 800e1f6:	3314      	adds	r3, #20
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d173      	bne.n	800e2e6 <etharp_query+0x286>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e1fe:	2300      	movs	r3, #0
 800e200:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e206:	e01a      	b.n	800e23e <etharp_query+0x1de>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	895a      	ldrh	r2, [r3, #10]
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	891b      	ldrh	r3, [r3, #8]
 800e210:	429a      	cmp	r2, r3
 800e212:	d10a      	bne.n	800e22a <etharp_query+0x1ca>
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d006      	beq.n	800e22a <etharp_query+0x1ca>
 800e21c:	4b37      	ldr	r3, [pc, #220]	; (800e2fc <etharp_query+0x29c>)
 800e21e:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800e222:	493b      	ldr	r1, [pc, #236]	; (800e310 <etharp_query+0x2b0>)
 800e224:	4837      	ldr	r0, [pc, #220]	; (800e304 <etharp_query+0x2a4>)
 800e226:	f004 fa7f 	bl	8012728 <iprintf>
      if (p->type != PBUF_ROM) {
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	7b1b      	ldrb	r3, [r3, #12]
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d002      	beq.n	800e238 <etharp_query+0x1d8>
        copy_needed = 1;
 800e232:	2301      	movs	r3, #1
 800e234:	61bb      	str	r3, [r7, #24]
        break;
 800e236:	e005      	b.n	800e244 <etharp_query+0x1e4>
      }
      p = p->next;
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e23e:	69fb      	ldr	r3, [r7, #28]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d1e1      	bne.n	800e208 <etharp_query+0x1a8>
    }
    if (copy_needed) {
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d017      	beq.n	800e27a <etharp_query+0x21a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	891b      	ldrh	r3, [r3, #8]
 800e24e:	2200      	movs	r2, #0
 800e250:	4619      	mov	r1, r3
 800e252:	2002      	movs	r0, #2
 800e254:	f7f9 f9a6 	bl	80075a4 <pbuf_alloc>
 800e258:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d011      	beq.n	800e284 <etharp_query+0x224>
        if (pbuf_copy(p, q) != ERR_OK) {
 800e260:	6879      	ldr	r1, [r7, #4]
 800e262:	69f8      	ldr	r0, [r7, #28]
 800e264:	f7f9 fe48 	bl	8007ef8 <pbuf_copy>
 800e268:	4603      	mov	r3, r0
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d00a      	beq.n	800e284 <etharp_query+0x224>
          pbuf_free(p);
 800e26e:	69f8      	ldr	r0, [r7, #28]
 800e270:	f7f9 fd10 	bl	8007c94 <pbuf_free>
          p = NULL;
 800e274:	2300      	movs	r3, #0
 800e276:	61fb      	str	r3, [r7, #28]
 800e278:	e004      	b.n	800e284 <etharp_query+0x224>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e27e:	69f8      	ldr	r0, [r7, #28]
 800e280:	f7f9 fdb2 	bl	8007de8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e284:	69fb      	ldr	r3, [r7, #28]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d024      	beq.n	800e2d4 <etharp_query+0x274>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e28a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e28e:	491a      	ldr	r1, [pc, #104]	; (800e2f8 <etharp_query+0x298>)
 800e290:	4613      	mov	r3, r2
 800e292:	005b      	lsls	r3, r3, #1
 800e294:	4413      	add	r3, r2
 800e296:	00db      	lsls	r3, r3, #3
 800e298:	440b      	add	r3, r1
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d00b      	beq.n	800e2b8 <etharp_query+0x258>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800e2a0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e2a4:	4914      	ldr	r1, [pc, #80]	; (800e2f8 <etharp_query+0x298>)
 800e2a6:	4613      	mov	r3, r2
 800e2a8:	005b      	lsls	r3, r3, #1
 800e2aa:	4413      	add	r3, r2
 800e2ac:	00db      	lsls	r3, r3, #3
 800e2ae:	440b      	add	r3, r1
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7f9 fcee 	bl	8007c94 <pbuf_free>
      }
      arp_table[i].q = p;
 800e2b8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e2bc:	490e      	ldr	r1, [pc, #56]	; (800e2f8 <etharp_query+0x298>)
 800e2be:	4613      	mov	r3, r2
 800e2c0:	005b      	lsls	r3, r3, #1
 800e2c2:	4413      	add	r3, r2
 800e2c4:	00db      	lsls	r3, r3, #3
 800e2c6:	440b      	add	r3, r1
 800e2c8:	69fa      	ldr	r2, [r7, #28]
 800e2ca:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2d2:	e008      	b.n	800e2e6 <etharp_query+0x286>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 800e2d4:	4b07      	ldr	r3, [pc, #28]	; (800e2f4 <etharp_query+0x294>)
 800e2d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e2d8:	3301      	adds	r3, #1
 800e2da:	b29a      	uxth	r2, r3
 800e2dc:	4b05      	ldr	r3, [pc, #20]	; (800e2f4 <etharp_query+0x294>)
 800e2de:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e2e0:	23ff      	movs	r3, #255	; 0xff
 800e2e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e2e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3728      	adds	r7, #40	; 0x28
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	20006e84 	.word	0x20006e84
 800e2f8:	20006fbc 	.word	0x20006fbc
 800e2fc:	08017a20 	.word	0x08017a20
 800e300:	08017bcc 	.word	0x08017bcc
 800e304:	08017a98 	.word	0x08017a98
 800e308:	08017bc0 	.word	0x08017bc0
 800e30c:	200070ac 	.word	0x200070ac
 800e310:	08017bf4 	.word	0x08017bf4

0800e314 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b08a      	sub	sp, #40	; 0x28
 800e318:	af02      	add	r7, sp, #8
 800e31a:	60f8      	str	r0, [r7, #12]
 800e31c:	60b9      	str	r1, [r7, #8]
 800e31e:	607a      	str	r2, [r7, #4]
 800e320:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e322:	2300      	movs	r3, #0
 800e324:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d106      	bne.n	800e33a <etharp_raw+0x26>
 800e32c:	4b40      	ldr	r3, [pc, #256]	; (800e430 <etharp_raw+0x11c>)
 800e32e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800e332:	4940      	ldr	r1, [pc, #256]	; (800e434 <etharp_raw+0x120>)
 800e334:	4840      	ldr	r0, [pc, #256]	; (800e438 <etharp_raw+0x124>)
 800e336:	f004 f9f7 	bl	8012728 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e33a:	2200      	movs	r2, #0
 800e33c:	211c      	movs	r1, #28
 800e33e:	2002      	movs	r0, #2
 800e340:	f7f9 f930 	bl	80075a4 <pbuf_alloc>
 800e344:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e346:	69bb      	ldr	r3, [r7, #24]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d108      	bne.n	800e35e <etharp_raw+0x4a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 800e34c:	4b3b      	ldr	r3, [pc, #236]	; (800e43c <etharp_raw+0x128>)
 800e34e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e350:	3301      	adds	r3, #1
 800e352:	b29a      	uxth	r2, r3
 800e354:	4b39      	ldr	r3, [pc, #228]	; (800e43c <etharp_raw+0x128>)
 800e356:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 800e358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e35c:	e063      	b.n	800e426 <etharp_raw+0x112>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e35e:	69bb      	ldr	r3, [r7, #24]
 800e360:	895b      	ldrh	r3, [r3, #10]
 800e362:	2b1b      	cmp	r3, #27
 800e364:	d806      	bhi.n	800e374 <etharp_raw+0x60>
 800e366:	4b32      	ldr	r3, [pc, #200]	; (800e430 <etharp_raw+0x11c>)
 800e368:	f240 4263 	movw	r2, #1123	; 0x463
 800e36c:	4934      	ldr	r1, [pc, #208]	; (800e440 <etharp_raw+0x12c>)
 800e36e:	4832      	ldr	r0, [pc, #200]	; (800e438 <etharp_raw+0x124>)
 800e370:	f004 f9da 	bl	8012728 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e374:	69bb      	ldr	r3, [r7, #24]
 800e376:	685b      	ldr	r3, [r3, #4]
 800e378:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e37a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7f8 fab8 	bl	80068f2 <lwip_htons>
 800e382:	4603      	mov	r3, r0
 800e384:	461a      	mov	r2, r3
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e390:	2b06      	cmp	r3, #6
 800e392:	d006      	beq.n	800e3a2 <etharp_raw+0x8e>
 800e394:	4b26      	ldr	r3, [pc, #152]	; (800e430 <etharp_raw+0x11c>)
 800e396:	f240 426a 	movw	r2, #1130	; 0x46a
 800e39a:	492a      	ldr	r1, [pc, #168]	; (800e444 <etharp_raw+0x130>)
 800e39c:	4826      	ldr	r0, [pc, #152]	; (800e438 <etharp_raw+0x124>)
 800e39e:	f004 f9c3 	bl	8012728 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	3308      	adds	r3, #8
 800e3a6:	2206      	movs	r2, #6
 800e3a8:	6839      	ldr	r1, [r7, #0]
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f003 fb38 	bl	8011a20 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	3312      	adds	r3, #18
 800e3b4:	2206      	movs	r2, #6
 800e3b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f003 fb31 	bl	8011a20 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	330e      	adds	r3, #14
 800e3c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3c4:	6812      	ldr	r2, [r2, #0]
 800e3c6:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	3318      	adds	r3, #24
 800e3cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3ce:	6812      	ldr	r2, [r2, #0]
 800e3d0:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	701a      	strb	r2, [r3, #0]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	f042 0201 	orr.w	r2, r2, #1
 800e3de:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	f042 0208 	orr.w	r2, r2, #8
 800e3e8:	709a      	strb	r2, [r3, #2]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	2206      	movs	r2, #6
 800e3f2:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	2204      	movs	r2, #4
 800e3f8:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e3fa:	f640 0306 	movw	r3, #2054	; 0x806
 800e3fe:	9300      	str	r3, [sp, #0]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	68ba      	ldr	r2, [r7, #8]
 800e404:	69b9      	ldr	r1, [r7, #24]
 800e406:	68f8      	ldr	r0, [r7, #12]
 800e408:	f001 fc02 	bl	800fc10 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 800e40c:	4b0b      	ldr	r3, [pc, #44]	; (800e43c <etharp_raw+0x128>)
 800e40e:	8b1b      	ldrh	r3, [r3, #24]
 800e410:	3301      	adds	r3, #1
 800e412:	b29a      	uxth	r2, r3
 800e414:	4b09      	ldr	r3, [pc, #36]	; (800e43c <etharp_raw+0x128>)
 800e416:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 800e418:	69b8      	ldr	r0, [r7, #24]
 800e41a:	f7f9 fc3b 	bl	8007c94 <pbuf_free>
  p = NULL;
 800e41e:	2300      	movs	r3, #0
 800e420:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e422:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3720      	adds	r7, #32
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	08017a20 	.word	0x08017a20
 800e434:	08017b70 	.word	0x08017b70
 800e438:	08017a98 	.word	0x08017a98
 800e43c:	20006e84 	.word	0x20006e84
 800e440:	08017c10 	.word	0x08017c10
 800e444:	08017c44 	.word	0x08017c44

0800e448 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b088      	sub	sp, #32
 800e44c:	af04      	add	r7, sp, #16
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e464:	2201      	movs	r2, #1
 800e466:	9203      	str	r2, [sp, #12]
 800e468:	68ba      	ldr	r2, [r7, #8]
 800e46a:	9202      	str	r2, [sp, #8]
 800e46c:	4a06      	ldr	r2, [pc, #24]	; (800e488 <etharp_request_dst+0x40>)
 800e46e:	9201      	str	r2, [sp, #4]
 800e470:	9300      	str	r3, [sp, #0]
 800e472:	4603      	mov	r3, r0
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	68f8      	ldr	r0, [r7, #12]
 800e478:	f7ff ff4c 	bl	800e314 <etharp_raw>
 800e47c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3710      	adds	r7, #16
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	080181b4 	.word	0x080181b4

0800e48c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e496:	4a05      	ldr	r2, [pc, #20]	; (800e4ac <etharp_request+0x20>)
 800e498:	6839      	ldr	r1, [r7, #0]
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f7ff ffd4 	bl	800e448 <etharp_request_dst>
 800e4a0:	4603      	mov	r3, r0
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3708      	adds	r7, #8
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}
 800e4aa:	bf00      	nop
 800e4ac:	080181ac 	.word	0x080181ac

0800e4b0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b08e      	sub	sp, #56	; 0x38
 800e4b4:	af04      	add	r7, sp, #16
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
 800e4ba:	4b93      	ldr	r3, [pc, #588]	; (800e708 <icmp_input+0x258>)
 800e4bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e4c0:	3301      	adds	r3, #1
 800e4c2:	b29a      	uxth	r2, r3
 800e4c4:	4b90      	ldr	r3, [pc, #576]	; (800e708 <icmp_input+0x258>)
 800e4c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e4ca:	4b90      	ldr	r3, [pc, #576]	; (800e70c <icmp_input+0x25c>)
 800e4cc:	689b      	ldr	r3, [r3, #8]
 800e4ce:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800e4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	b29b      	uxth	r3, r3
 800e4d6:	f003 030f 	and.w	r3, r3, #15
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	009b      	lsls	r3, r3, #2
 800e4de:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e4e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4e2:	2b13      	cmp	r3, #19
 800e4e4:	f240 80ea 	bls.w	800e6bc <icmp_input+0x20c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	895b      	ldrh	r3, [r3, #10]
 800e4ec:	2b03      	cmp	r3, #3
 800e4ee:	f240 80e7 	bls.w	800e6c0 <icmp_input+0x210>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	685b      	ldr	r3, [r3, #4]
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e4fc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e500:	2b00      	cmp	r3, #0
 800e502:	f000 80d4 	beq.w	800e6ae <icmp_input+0x1fe>
 800e506:	2b08      	cmp	r3, #8
 800e508:	f040 80c0 	bne.w	800e68c <icmp_input+0x1dc>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800e50c:	4b80      	ldr	r3, [pc, #512]	; (800e710 <icmp_input+0x260>)
 800e50e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e510:	4b7e      	ldr	r3, [pc, #504]	; (800e70c <icmp_input+0x25c>)
 800e512:	695b      	ldr	r3, [r3, #20]
 800e514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e518:	2be0      	cmp	r3, #224	; 0xe0
 800e51a:	f000 80e0 	beq.w	800e6de <icmp_input+0x22e>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e51e:	4b7b      	ldr	r3, [pc, #492]	; (800e70c <icmp_input+0x25c>)
 800e520:	695b      	ldr	r3, [r3, #20]
 800e522:	4a7a      	ldr	r2, [pc, #488]	; (800e70c <icmp_input+0x25c>)
 800e524:	6812      	ldr	r2, [r2, #0]
 800e526:	4611      	mov	r1, r2
 800e528:	4618      	mov	r0, r3
 800e52a:	f000 fc73 	bl	800ee14 <ip4_addr_isbroadcast_u32>
 800e52e:	4603      	mov	r3, r0
 800e530:	2b00      	cmp	r3, #0
 800e532:	f040 80d6 	bne.w	800e6e2 <icmp_input+0x232>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	891b      	ldrh	r3, [r3, #8]
 800e53a:	2b07      	cmp	r3, #7
 800e53c:	f240 80c2 	bls.w	800e6c4 <icmp_input+0x214>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800e540:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e542:	330e      	adds	r3, #14
 800e544:	b29b      	uxth	r3, r3
 800e546:	b21b      	sxth	r3, r3
 800e548:	4619      	mov	r1, r3
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f7f9 fb7e 	bl	8007c4c <pbuf_header>
 800e550:	4603      	mov	r3, r0
 800e552:	2b00      	cmp	r3, #0
 800e554:	d046      	beq.n	800e5e4 <icmp_input+0x134>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	891a      	ldrh	r2, [r3, #8]
 800e55a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e55c:	4413      	add	r3, r2
 800e55e:	b29b      	uxth	r3, r3
 800e560:	2200      	movs	r2, #0
 800e562:	4619      	mov	r1, r3
 800e564:	2002      	movs	r0, #2
 800e566:	f7f9 f81d 	bl	80075a4 <pbuf_alloc>
 800e56a:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800e56c:	69bb      	ldr	r3, [r7, #24]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	f000 80b9 	beq.w	800e6e6 <icmp_input+0x236>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e574:	69bb      	ldr	r3, [r7, #24]
 800e576:	895b      	ldrh	r3, [r3, #10]
 800e578:	461a      	mov	r2, r3
 800e57a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e57c:	3308      	adds	r3, #8
 800e57e:	429a      	cmp	r2, r3
 800e580:	d203      	bcs.n	800e58a <icmp_input+0xda>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800e582:	69b8      	ldr	r0, [r7, #24]
 800e584:	f7f9 fb86 	bl	8007c94 <pbuf_free>
        goto icmperr;
 800e588:	e0ae      	b.n	800e6e8 <icmp_input+0x238>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800e58a:	69bb      	ldr	r3, [r7, #24]
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e592:	4618      	mov	r0, r3
 800e594:	f003 fa44 	bl	8011a20 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800e598:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e59a:	425b      	negs	r3, r3
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	b21b      	sxth	r3, r3
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	69b8      	ldr	r0, [r7, #24]
 800e5a4:	f7f9 fb52 	bl	8007c4c <pbuf_header>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d009      	beq.n	800e5c2 <icmp_input+0x112>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e5ae:	4b59      	ldr	r3, [pc, #356]	; (800e714 <icmp_input+0x264>)
 800e5b0:	22af      	movs	r2, #175	; 0xaf
 800e5b2:	4959      	ldr	r1, [pc, #356]	; (800e718 <icmp_input+0x268>)
 800e5b4:	4859      	ldr	r0, [pc, #356]	; (800e71c <icmp_input+0x26c>)
 800e5b6:	f004 f8b7 	bl	8012728 <iprintf>
        pbuf_free(r);
 800e5ba:	69b8      	ldr	r0, [r7, #24]
 800e5bc:	f7f9 fb6a 	bl	8007c94 <pbuf_free>
        goto icmperr;
 800e5c0:	e092      	b.n	800e6e8 <icmp_input+0x238>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800e5c2:	6879      	ldr	r1, [r7, #4]
 800e5c4:	69b8      	ldr	r0, [r7, #24]
 800e5c6:	f7f9 fc97 	bl	8007ef8 <pbuf_copy>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d003      	beq.n	800e5d8 <icmp_input+0x128>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800e5d0:	69b8      	ldr	r0, [r7, #24]
 800e5d2:	f7f9 fb5f 	bl	8007c94 <pbuf_free>
        goto icmperr;
 800e5d6:	e087      	b.n	800e6e8 <icmp_input+0x238>
      }
      /* free the original p */
      pbuf_free(p);
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f7f9 fb5b 	bl	8007c94 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800e5de:	69bb      	ldr	r3, [r7, #24]
 800e5e0:	607b      	str	r3, [r7, #4]
 800e5e2:	e015      	b.n	800e610 <icmp_input+0x160>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800e5e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5e6:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800e5ea:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800e5ee:	33f2      	adds	r3, #242	; 0xf2
 800e5f0:	b29b      	uxth	r3, r3
 800e5f2:	b21b      	sxth	r3, r3
 800e5f4:	4619      	mov	r1, r3
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7f9 fb28 	bl	8007c4c <pbuf_header>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d006      	beq.n	800e610 <icmp_input+0x160>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e602:	4b44      	ldr	r3, [pc, #272]	; (800e714 <icmp_input+0x264>)
 800e604:	22c0      	movs	r2, #192	; 0xc0
 800e606:	4946      	ldr	r1, [pc, #280]	; (800e720 <icmp_input+0x270>)
 800e608:	4844      	ldr	r0, [pc, #272]	; (800e71c <icmp_input+0x26c>)
 800e60a:	f004 f88d 	bl	8012728 <iprintf>
        goto icmperr;
 800e60e:	e06b      	b.n	800e6e8 <icmp_input+0x238>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800e616:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e61a:	4619      	mov	r1, r3
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f7f9 fb15 	bl	8007c4c <pbuf_header>
 800e622:	4603      	mov	r3, r0
 800e624:	2b00      	cmp	r3, #0
 800e626:	d144      	bne.n	800e6b2 <icmp_input+0x202>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	681a      	ldr	r2, [r3, #0]
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e636:	4b35      	ldr	r3, [pc, #212]	; (800e70c <icmp_input+0x25c>)
 800e638:	691a      	ldr	r2, [r3, #16]
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	2200      	movs	r2, #0
 800e642:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	2200      	movs	r2, #0
 800e648:	709a      	strb	r2, [r3, #2]
 800e64a:	2200      	movs	r2, #0
 800e64c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	22ff      	movs	r2, #255	; 0xff
 800e652:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	2200      	movs	r2, #0
 800e658:	729a      	strb	r2, [r3, #10]
 800e65a:	2200      	movs	r2, #0
 800e65c:	72da      	strb	r2, [r3, #11]
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
      }
#endif /* CHECKSUM_GEN_IP */

      ICMP_STATS_INC(icmp.xmit);
 800e65e:	4b2a      	ldr	r3, [pc, #168]	; (800e708 <icmp_input+0x258>)
 800e660:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e664:	3301      	adds	r3, #1
 800e666:	b29a      	uxth	r2, r3
 800e668:	4b27      	ldr	r3, [pc, #156]	; (800e708 <icmp_input+0x258>)
 800e66a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	9302      	str	r3, [sp, #8]
 800e672:	2301      	movs	r3, #1
 800e674:	9301      	str	r3, [sp, #4]
 800e676:	2300      	movs	r3, #0
 800e678:	9300      	str	r3, [sp, #0]
 800e67a:	23ff      	movs	r3, #255	; 0xff
 800e67c:	2200      	movs	r2, #0
 800e67e:	69f9      	ldr	r1, [r7, #28]
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f000 fae3 	bl	800ec4c <ip4_output_if>
 800e686:	4603      	mov	r3, r0
 800e688:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800e68a:	e012      	b.n	800e6b2 <icmp_input+0x202>
    } else if (type == ICMP_AMR) {
      MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
 800e68c:	4b1e      	ldr	r3, [pc, #120]	; (800e708 <icmp_input+0x258>)
 800e68e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800e692:	3301      	adds	r3, #1
 800e694:	b29a      	uxth	r2, r3
 800e696:	4b1c      	ldr	r3, [pc, #112]	; (800e708 <icmp_input+0x258>)
 800e698:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
    ICMP_STATS_INC(icmp.drop);
 800e69c:	4b1a      	ldr	r3, [pc, #104]	; (800e708 <icmp_input+0x258>)
 800e69e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	b29a      	uxth	r2, r3
 800e6a6:	4b18      	ldr	r3, [pc, #96]	; (800e708 <icmp_input+0x258>)
 800e6a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 800e6ac:	e002      	b.n	800e6b4 <icmp_input+0x204>
    break;
 800e6ae:	bf00      	nop
 800e6b0:	e000      	b.n	800e6b4 <icmp_input+0x204>
    break;
 800e6b2:	bf00      	nop
  }
  pbuf_free(p);
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f7f9 faed 	bl	8007c94 <pbuf_free>
  return;
 800e6ba:	e021      	b.n	800e700 <icmp_input+0x250>
    goto lenerr;
 800e6bc:	bf00      	nop
 800e6be:	e002      	b.n	800e6c6 <icmp_input+0x216>
    goto lenerr;
 800e6c0:	bf00      	nop
 800e6c2:	e000      	b.n	800e6c6 <icmp_input+0x216>
      goto lenerr;
 800e6c4:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f7f9 fae4 	bl	8007c94 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 800e6cc:	4b0e      	ldr	r3, [pc, #56]	; (800e708 <icmp_input+0x258>)
 800e6ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	b29a      	uxth	r2, r3
 800e6d6:	4b0c      	ldr	r3, [pc, #48]	; (800e708 <icmp_input+0x258>)
 800e6d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e6dc:	e010      	b.n	800e700 <icmp_input+0x250>
      goto icmperr;
 800e6de:	bf00      	nop
 800e6e0:	e002      	b.n	800e6e8 <icmp_input+0x238>
      goto icmperr;
 800e6e2:	bf00      	nop
 800e6e4:	e000      	b.n	800e6e8 <icmp_input+0x238>
        goto icmperr;
 800e6e6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f7f9 fad3 	bl	8007c94 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 800e6ee:	4b06      	ldr	r3, [pc, #24]	; (800e708 <icmp_input+0x258>)
 800e6f0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	b29a      	uxth	r2, r3
 800e6f8:	4b03      	ldr	r3, [pc, #12]	; (800e708 <icmp_input+0x258>)
 800e6fa:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e6fe:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e700:	3728      	adds	r7, #40	; 0x28
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	20006e84 	.word	0x20006e84
 800e70c:	200038bc 	.word	0x200038bc
 800e710:	200038d0 	.word	0x200038d0
 800e714:	08017c88 	.word	0x08017c88
 800e718:	08017cc0 	.word	0x08017cc0
 800e71c:	08017cf8 	.word	0x08017cf8
 800e720:	08017d20 	.word	0x08017d20

0800e724 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	460b      	mov	r3, r1
 800e72e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e730:	78fb      	ldrb	r3, [r7, #3]
 800e732:	461a      	mov	r2, r3
 800e734:	2103      	movs	r1, #3
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f000 f814 	bl	800e764 <icmp_send_response>
}
 800e73c:	bf00      	nop
 800e73e:	3708      	adds	r7, #8
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}

0800e744 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b082      	sub	sp, #8
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	460b      	mov	r3, r1
 800e74e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e750:	78fb      	ldrb	r3, [r7, #3]
 800e752:	461a      	mov	r2, r3
 800e754:	210b      	movs	r1, #11
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f000 f804 	bl	800e764 <icmp_send_response>
}
 800e75c:	bf00      	nop
 800e75e:	3708      	adds	r7, #8
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}

0800e764 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b08c      	sub	sp, #48	; 0x30
 800e768:	af04      	add	r7, sp, #16
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	460b      	mov	r3, r1
 800e76e:	70fb      	strb	r3, [r7, #3]
 800e770:	4613      	mov	r3, r2
 800e772:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e774:	2200      	movs	r2, #0
 800e776:	2124      	movs	r1, #36	; 0x24
 800e778:	2001      	movs	r0, #1
 800e77a:	f7f8 ff13 	bl	80075a4 <pbuf_alloc>
 800e77e:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e780:	69fb      	ldr	r3, [r7, #28]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d054      	beq.n	800e830 <icmp_send_response+0xcc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e786:	69fb      	ldr	r3, [r7, #28]
 800e788:	895b      	ldrh	r3, [r3, #10]
 800e78a:	2b23      	cmp	r3, #35	; 0x23
 800e78c:	d806      	bhi.n	800e79c <icmp_send_response+0x38>
 800e78e:	4b2a      	ldr	r3, [pc, #168]	; (800e838 <icmp_send_response+0xd4>)
 800e790:	f240 1261 	movw	r2, #353	; 0x161
 800e794:	4929      	ldr	r1, [pc, #164]	; (800e83c <icmp_send_response+0xd8>)
 800e796:	482a      	ldr	r0, [pc, #168]	; (800e840 <icmp_send_response+0xdc>)
 800e798:	f003 ffc6 	bl	8012728 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e7a2:	69fb      	ldr	r3, [r7, #28]
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	78fa      	ldrb	r2, [r7, #3]
 800e7ac:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	78ba      	ldrb	r2, [r7, #2]
 800e7b2:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	711a      	strb	r2, [r3, #4]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	719a      	strb	r2, [r3, #6]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	f103 0008 	add.w	r0, r3, #8
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	685b      	ldr	r3, [r3, #4]
 800e7d4:	221c      	movs	r2, #28
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	f003 f922 	bl	8011a20 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e7dc:	69bb      	ldr	r3, [r7, #24]
 800e7de:	68db      	ldr	r3, [r3, #12]
 800e7e0:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e7e2:	f107 030c 	add.w	r3, r7, #12
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f000 f82e 	bl	800e848 <ip4_route>
 800e7ec:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e7ee:	693b      	ldr	r3, [r7, #16]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d019      	beq.n	800e828 <icmp_send_response+0xc4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	709a      	strb	r2, [r3, #2]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 800e7fe:	4b11      	ldr	r3, [pc, #68]	; (800e844 <icmp_send_response+0xe0>)
 800e800:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e804:	3301      	adds	r3, #1
 800e806:	b29a      	uxth	r2, r3
 800e808:	4b0e      	ldr	r3, [pc, #56]	; (800e844 <icmp_send_response+0xe0>)
 800e80a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e80e:	f107 020c 	add.w	r2, r7, #12
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	9302      	str	r3, [sp, #8]
 800e816:	2301      	movs	r3, #1
 800e818:	9301      	str	r3, [sp, #4]
 800e81a:	2300      	movs	r3, #0
 800e81c:	9300      	str	r3, [sp, #0]
 800e81e:	23ff      	movs	r3, #255	; 0xff
 800e820:	2100      	movs	r1, #0
 800e822:	69f8      	ldr	r0, [r7, #28]
 800e824:	f000 fa12 	bl	800ec4c <ip4_output_if>
  }
  pbuf_free(q);
 800e828:	69f8      	ldr	r0, [r7, #28]
 800e82a:	f7f9 fa33 	bl	8007c94 <pbuf_free>
 800e82e:	e000      	b.n	800e832 <icmp_send_response+0xce>
    return;
 800e830:	bf00      	nop
}
 800e832:	3720      	adds	r7, #32
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}
 800e838:	08017c88 	.word	0x08017c88
 800e83c:	08017d54 	.word	0x08017d54
 800e840:	08017cf8 	.word	0x08017cf8
 800e844:	20006e84 	.word	0x20006e84

0800e848 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e848:	b480      	push	{r7}
 800e84a:	b085      	sub	sp, #20
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800e850:	4b34      	ldr	r3, [pc, #208]	; (800e924 <ip4_route+0xdc>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	60fb      	str	r3, [r7, #12]
 800e856:	e036      	b.n	800e8c6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e85e:	f003 0301 	and.w	r3, r3, #1
 800e862:	b2db      	uxtb	r3, r3
 800e864:	2b00      	cmp	r3, #0
 800e866:	d02b      	beq.n	800e8c0 <ip4_route+0x78>
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e86e:	089b      	lsrs	r3, r3, #2
 800e870:	f003 0301 	and.w	r3, r3, #1
 800e874:	b2db      	uxtb	r3, r3
 800e876:	2b00      	cmp	r3, #0
 800e878:	d022      	beq.n	800e8c0 <ip4_route+0x78>
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	3304      	adds	r3, #4
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d01d      	beq.n	800e8c0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681a      	ldr	r2, [r3, #0]
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	3304      	adds	r3, #4
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	405a      	eors	r2, r3
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	3308      	adds	r3, #8
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	4013      	ands	r3, r2
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d101      	bne.n	800e8a0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	e03b      	b.n	800e918 <ip4_route+0xd0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e8a6:	f003 0302 	and.w	r3, r3, #2
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d108      	bne.n	800e8c0 <ip4_route+0x78>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	330c      	adds	r3, #12
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d101      	bne.n	800e8c0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	e02b      	b.n	800e918 <ip4_route+0xd0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	60fb      	str	r3, [r7, #12]
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d1c5      	bne.n	800e858 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e8cc:	4b16      	ldr	r3, [pc, #88]	; (800e928 <ip4_route+0xe0>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d015      	beq.n	800e900 <ip4_route+0xb8>
 800e8d4:	4b14      	ldr	r3, [pc, #80]	; (800e928 <ip4_route+0xe0>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e8dc:	f003 0301 	and.w	r3, r3, #1
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d00d      	beq.n	800e900 <ip4_route+0xb8>
 800e8e4:	4b10      	ldr	r3, [pc, #64]	; (800e928 <ip4_route+0xe0>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e8ec:	f003 0304 	and.w	r3, r3, #4
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d005      	beq.n	800e900 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800e8f4:	4b0c      	ldr	r3, [pc, #48]	; (800e928 <ip4_route+0xe0>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	3304      	adds	r3, #4
 800e8fa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d109      	bne.n	800e914 <ip4_route+0xcc>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 800e900:	4b0a      	ldr	r3, [pc, #40]	; (800e92c <ip4_route+0xe4>)
 800e902:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e906:	3301      	adds	r3, #1
 800e908:	b29a      	uxth	r2, r3
 800e90a:	4b08      	ldr	r3, [pc, #32]	; (800e92c <ip4_route+0xe4>)
 800e90c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e910:	2300      	movs	r3, #0
 800e912:	e001      	b.n	800e918 <ip4_route+0xd0>
  }

  return netif_default;
 800e914:	4b04      	ldr	r3, [pc, #16]	; (800e928 <ip4_route+0xe0>)
 800e916:	681b      	ldr	r3, [r3, #0]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3714      	adds	r7, #20
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bc80      	pop	{r7}
 800e920:	4770      	bx	lr
 800e922:	bf00      	nop
 800e924:	20006e78 	.word	0x20006e78
 800e928:	20006e7c 	.word	0x20006e7c
 800e92c:	20006e84 	.word	0x20006e84

0800e930 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b086      	sub	sp, #24
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
 800e93a:	4b97      	ldr	r3, [pc, #604]	; (800eb98 <ip4_input+0x268>)
 800e93c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e940:	3301      	adds	r3, #1
 800e942:	b29a      	uxth	r2, r3
 800e944:	4b94      	ldr	r3, [pc, #592]	; (800eb98 <ip4_input+0x268>)
 800e946:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	091b      	lsrs	r3, r3, #4
 800e956:	b2db      	uxtb	r3, r3
 800e958:	2b04      	cmp	r3, #4
 800e95a:	d014      	beq.n	800e986 <ip4_input+0x56>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f7f9 f999 	bl	8007c94 <pbuf_free>
    IP_STATS_INC(ip.err);
 800e962:	4b8d      	ldr	r3, [pc, #564]	; (800eb98 <ip4_input+0x268>)
 800e964:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e968:	3301      	adds	r3, #1
 800e96a:	b29a      	uxth	r2, r3
 800e96c:	4b8a      	ldr	r3, [pc, #552]	; (800eb98 <ip4_input+0x268>)
 800e96e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 800e972:	4b89      	ldr	r3, [pc, #548]	; (800eb98 <ip4_input+0x268>)
 800e974:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e978:	3301      	adds	r3, #1
 800e97a:	b29a      	uxth	r2, r3
 800e97c:	4b86      	ldr	r3, [pc, #536]	; (800eb98 <ip4_input+0x268>)
 800e97e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e982:	2300      	movs	r3, #0
 800e984:	e15a      	b.n	800ec3c <ip4_input+0x30c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	b29b      	uxth	r3, r3
 800e98c:	f003 030f 	and.w	r3, r3, #15
 800e990:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800e992:	897b      	ldrh	r3, [r7, #10]
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	885b      	ldrh	r3, [r3, #2]
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7f7 ffa7 	bl	80068f2 <lwip_htons>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	891b      	ldrh	r3, [r3, #8]
 800e9ac:	893a      	ldrh	r2, [r7, #8]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d204      	bcs.n	800e9bc <ip4_input+0x8c>
    pbuf_realloc(p, iphdr_len);
 800e9b2:	893b      	ldrh	r3, [r7, #8]
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f7f8 fff8 	bl	80079ac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	895b      	ldrh	r3, [r3, #10]
 800e9c0:	897a      	ldrh	r2, [r7, #10]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d807      	bhi.n	800e9d6 <ip4_input+0xa6>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	891b      	ldrh	r3, [r3, #8]
 800e9ca:	893a      	ldrh	r2, [r7, #8]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d802      	bhi.n	800e9d6 <ip4_input+0xa6>
 800e9d0:	897b      	ldrh	r3, [r7, #10]
 800e9d2:	2b13      	cmp	r3, #19
 800e9d4:	d814      	bhi.n	800ea00 <ip4_input+0xd0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f7f9 f95c 	bl	8007c94 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 800e9dc:	4b6e      	ldr	r3, [pc, #440]	; (800eb98 <ip4_input+0x268>)
 800e9de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	b29a      	uxth	r2, r3
 800e9e6:	4b6c      	ldr	r3, [pc, #432]	; (800eb98 <ip4_input+0x268>)
 800e9e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 800e9ec:	4b6a      	ldr	r3, [pc, #424]	; (800eb98 <ip4_input+0x268>)
 800e9ee:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	b29a      	uxth	r2, r3
 800e9f6:	4b68      	ldr	r3, [pc, #416]	; (800eb98 <ip4_input+0x268>)
 800e9f8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	e11d      	b.n	800ec3c <ip4_input+0x30c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	691b      	ldr	r3, [r3, #16]
 800ea04:	4a65      	ldr	r2, [pc, #404]	; (800eb9c <ip4_input+0x26c>)
 800ea06:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	4a63      	ldr	r2, [pc, #396]	; (800eb9c <ip4_input+0x26c>)
 800ea0e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ea10:	4b62      	ldr	r3, [pc, #392]	; (800eb9c <ip4_input+0x26c>)
 800ea12:	695b      	ldr	r3, [r3, #20]
 800ea14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea18:	2be0      	cmp	r3, #224	; 0xe0
 800ea1a:	d112      	bne.n	800ea42 <ip4_input+0x112>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ea22:	f003 0301 	and.w	r3, r3, #1
 800ea26:	b2db      	uxtb	r3, r3
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d007      	beq.n	800ea3c <ip4_input+0x10c>
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	3304      	adds	r3, #4
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d002      	beq.n	800ea3c <ip4_input+0x10c>
      netif = inp;
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	613b      	str	r3, [r7, #16]
 800ea3a:	e041      	b.n	800eac0 <ip4_input+0x190>
    } else {
      netif = NULL;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	613b      	str	r3, [r7, #16]
 800ea40:	e03e      	b.n	800eac0 <ip4_input+0x190>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800ea42:	2301      	movs	r3, #1
 800ea44:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ea50:	f003 0301 	and.w	r3, r3, #1
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d014      	beq.n	800ea84 <ip4_input+0x154>
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	3304      	adds	r3, #4
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d00f      	beq.n	800ea84 <ip4_input+0x154>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ea64:	4b4d      	ldr	r3, [pc, #308]	; (800eb9c <ip4_input+0x26c>)
 800ea66:	695a      	ldr	r2, [r3, #20]
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	3304      	adds	r3, #4
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d026      	beq.n	800eac0 <ip4_input+0x190>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ea72:	4b4a      	ldr	r3, [pc, #296]	; (800eb9c <ip4_input+0x26c>)
 800ea74:	695b      	ldr	r3, [r3, #20]
 800ea76:	6939      	ldr	r1, [r7, #16]
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f000 f9cb 	bl	800ee14 <ip4_addr_isbroadcast_u32>
 800ea7e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d11d      	bne.n	800eac0 <ip4_input+0x190>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d00d      	beq.n	800eaa6 <ip4_input+0x176>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800ea8a:	4b44      	ldr	r3, [pc, #272]	; (800eb9c <ip4_input+0x26c>)
 800ea8c:	695b      	ldr	r3, [r3, #20]
 800ea8e:	b2db      	uxtb	r3, r3
 800ea90:	2b7f      	cmp	r3, #127	; 0x7f
 800ea92:	d102      	bne.n	800ea9a <ip4_input+0x16a>
          netif = NULL;
 800ea94:	2300      	movs	r3, #0
 800ea96:	613b      	str	r3, [r7, #16]
          break;
 800ea98:	e012      	b.n	800eac0 <ip4_input+0x190>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800ea9e:	4b40      	ldr	r3, [pc, #256]	; (800eba0 <ip4_input+0x270>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	613b      	str	r3, [r7, #16]
 800eaa4:	e002      	b.n	800eaac <ip4_input+0x17c>
      } else {
        netif = netif->next;
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800eaac:	693a      	ldr	r2, [r7, #16]
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d102      	bne.n	800eaba <ip4_input+0x18a>
        netif = netif->next;
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d1c4      	bne.n	800ea4a <ip4_input+0x11a>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800eac0:	4b36      	ldr	r3, [pc, #216]	; (800eb9c <ip4_input+0x26c>)
 800eac2:	691b      	ldr	r3, [r3, #16]
 800eac4:	6839      	ldr	r1, [r7, #0]
 800eac6:	4618      	mov	r0, r3
 800eac8:	f000 f9a4 	bl	800ee14 <ip4_addr_isbroadcast_u32>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d105      	bne.n	800eade <ip4_input+0x1ae>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ead2:	4b32      	ldr	r3, [pc, #200]	; (800eb9c <ip4_input+0x26c>)
 800ead4:	691b      	ldr	r3, [r3, #16]
 800ead6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800eada:	2be0      	cmp	r3, #224	; 0xe0
 800eadc:	d10c      	bne.n	800eaf8 <ip4_input+0x1c8>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f7f9 f8d8 	bl	8007c94 <pbuf_free>
      IP_STATS_INC(ip.drop);
 800eae4:	4b2c      	ldr	r3, [pc, #176]	; (800eb98 <ip4_input+0x268>)
 800eae6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800eaea:	3301      	adds	r3, #1
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	4b2a      	ldr	r3, [pc, #168]	; (800eb98 <ip4_input+0x268>)
 800eaf0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	e0a1      	b.n	800ec3c <ip4_input+0x30c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d10c      	bne.n	800eb18 <ip4_input+0x1e8>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, iphdr, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 800eafe:	4b26      	ldr	r3, [pc, #152]	; (800eb98 <ip4_input+0x268>)
 800eb00:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800eb04:	3301      	adds	r3, #1
 800eb06:	b29a      	uxth	r2, r3
 800eb08:	4b23      	ldr	r3, [pc, #140]	; (800eb98 <ip4_input+0x268>)
 800eb0a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f7f9 f8c0 	bl	8007c94 <pbuf_free>
    return ERR_OK;
 800eb14:	2300      	movs	r3, #0
 800eb16:	e091      	b.n	800ec3c <ip4_input+0x30c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	88db      	ldrh	r3, [r3, #6]
 800eb1c:	b29b      	uxth	r3, r3
 800eb1e:	461a      	mov	r2, r3
 800eb20:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800eb24:	4013      	ands	r3, r2
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d00b      	beq.n	800eb42 <ip4_input+0x212>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f000 fcbe 	bl	800f4ac <ip4_reass>
 800eb30:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d101      	bne.n	800eb3c <ip4_input+0x20c>
      return ERR_OK;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	e07f      	b.n	800ec3c <ip4_input+0x30c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800eb42:	4a16      	ldr	r2, [pc, #88]	; (800eb9c <ip4_input+0x26c>)
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800eb48:	4a14      	ldr	r2, [pc, #80]	; (800eb9c <ip4_input+0x26c>)
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800eb4e:	4a13      	ldr	r2, [pc, #76]	; (800eb9c <ip4_input+0x26c>)
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	b29b      	uxth	r3, r3
 800eb5a:	f003 030f 	and.w	r3, r3, #15
 800eb5e:	b29b      	uxth	r3, r3
 800eb60:	009b      	lsls	r3, r3, #2
 800eb62:	b29a      	uxth	r2, r3
 800eb64:	4b0d      	ldr	r3, [pc, #52]	; (800eb9c <ip4_input+0x26c>)
 800eb66:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800eb68:	897b      	ldrh	r3, [r7, #10]
 800eb6a:	425b      	negs	r3, r3
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	b21b      	sxth	r3, r3
 800eb70:	4619      	mov	r1, r3
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f7f9 f86a 	bl	8007c4c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	7a5b      	ldrb	r3, [r3, #9]
 800eb7c:	2b11      	cmp	r3, #17
 800eb7e:	d006      	beq.n	800eb8e <ip4_input+0x25e>
 800eb80:	2b11      	cmp	r3, #17
 800eb82:	dc19      	bgt.n	800ebb8 <ip4_input+0x288>
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d012      	beq.n	800ebae <ip4_input+0x27e>
 800eb88:	2b06      	cmp	r3, #6
 800eb8a:	d00b      	beq.n	800eba4 <ip4_input+0x274>
 800eb8c:	e014      	b.n	800ebb8 <ip4_input+0x288>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800eb8e:	6839      	ldr	r1, [r7, #0]
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f7fe f981 	bl	800ce98 <udp_input>
      break;
 800eb96:	e03e      	b.n	800ec16 <ip4_input+0x2e6>
 800eb98:	20006e84 	.word	0x20006e84
 800eb9c:	200038bc 	.word	0x200038bc
 800eba0:	20006e78 	.word	0x20006e78
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800eba4:	6839      	ldr	r1, [r7, #0]
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f7fa fd82 	bl	80096b0 <tcp_input>
      break;
 800ebac:	e033      	b.n	800ec16 <ip4_input+0x2e6>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800ebae:	6839      	ldr	r1, [r7, #0]
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f7ff fc7d 	bl	800e4b0 <icmp_input>
      break;
 800ebb6:	e02e      	b.n	800ec16 <ip4_input+0x2e6>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ebb8:	4b22      	ldr	r3, [pc, #136]	; (800ec44 <ip4_input+0x314>)
 800ebba:	695b      	ldr	r3, [r3, #20]
 800ebbc:	6939      	ldr	r1, [r7, #16]
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f000 f928 	bl	800ee14 <ip4_addr_isbroadcast_u32>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d112      	bne.n	800ebf0 <ip4_input+0x2c0>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ebca:	4b1e      	ldr	r3, [pc, #120]	; (800ec44 <ip4_input+0x314>)
 800ebcc:	695b      	ldr	r3, [r3, #20]
 800ebce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ebd2:	2be0      	cmp	r3, #224	; 0xe0
 800ebd4:	d00c      	beq.n	800ebf0 <ip4_input+0x2c0>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800ebd6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ebda:	4619      	mov	r1, r3
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f7f9 f847 	bl	8007c70 <pbuf_header_force>
        p->payload = iphdr;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	697a      	ldr	r2, [r7, #20]
 800ebe6:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ebe8:	2102      	movs	r1, #2
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f7ff fd9a 	bl	800e724 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f7f9 f84f 	bl	8007c94 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
 800ebf6:	4b14      	ldr	r3, [pc, #80]	; (800ec48 <ip4_input+0x318>)
 800ebf8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	b29a      	uxth	r2, r3
 800ec00:	4b11      	ldr	r3, [pc, #68]	; (800ec48 <ip4_input+0x318>)
 800ec02:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
      IP_STATS_INC(ip.drop);
 800ec06:	4b10      	ldr	r3, [pc, #64]	; (800ec48 <ip4_input+0x318>)
 800ec08:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	b29a      	uxth	r2, r3
 800ec10:	4b0d      	ldr	r3, [pc, #52]	; (800ec48 <ip4_input+0x318>)
 800ec12:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ec16:	4b0b      	ldr	r3, [pc, #44]	; (800ec44 <ip4_input+0x314>)
 800ec18:	2200      	movs	r2, #0
 800ec1a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ec1c:	4b09      	ldr	r3, [pc, #36]	; (800ec44 <ip4_input+0x314>)
 800ec1e:	2200      	movs	r2, #0
 800ec20:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ec22:	4b08      	ldr	r3, [pc, #32]	; (800ec44 <ip4_input+0x314>)
 800ec24:	2200      	movs	r2, #0
 800ec26:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ec28:	4b06      	ldr	r3, [pc, #24]	; (800ec44 <ip4_input+0x314>)
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ec2e:	4b05      	ldr	r3, [pc, #20]	; (800ec44 <ip4_input+0x314>)
 800ec30:	2200      	movs	r2, #0
 800ec32:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ec34:	4b03      	ldr	r3, [pc, #12]	; (800ec44 <ip4_input+0x314>)
 800ec36:	2200      	movs	r2, #0
 800ec38:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ec3a:	2300      	movs	r3, #0
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3718      	adds	r7, #24
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}
 800ec44:	200038bc 	.word	0x200038bc
 800ec48:	20006e84 	.word	0x20006e84

0800ec4c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b08a      	sub	sp, #40	; 0x28
 800ec50:	af04      	add	r7, sp, #16
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	60b9      	str	r1, [r7, #8]
 800ec56:	607a      	str	r2, [r7, #4]
 800ec58:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d009      	beq.n	800ec78 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d003      	beq.n	800ec72 <ip4_output_if+0x26>
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d102      	bne.n	800ec78 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ec72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec74:	3304      	adds	r3, #4
 800ec76:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ec78:	78fa      	ldrb	r2, [r7, #3]
 800ec7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7c:	9302      	str	r3, [sp, #8]
 800ec7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ec82:	9301      	str	r3, [sp, #4]
 800ec84:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec88:	9300      	str	r3, [sp, #0]
 800ec8a:	4613      	mov	r3, r2
 800ec8c:	687a      	ldr	r2, [r7, #4]
 800ec8e:	6979      	ldr	r1, [r7, #20]
 800ec90:	68f8      	ldr	r0, [r7, #12]
 800ec92:	f000 f805 	bl	800eca0 <ip4_output_if_src>
 800ec96:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3718      	adds	r7, #24
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b088      	sub	sp, #32
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	60b9      	str	r1, [r7, #8]
 800ecaa:	607a      	str	r2, [r7, #4]
 800ecac:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	89db      	ldrh	r3, [r3, #14]
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d006      	beq.n	800ecc4 <ip4_output_if_src+0x24>
 800ecb6:	4b50      	ldr	r3, [pc, #320]	; (800edf8 <ip4_output_if_src+0x158>)
 800ecb8:	f240 3233 	movw	r2, #819	; 0x333
 800ecbc:	494f      	ldr	r1, [pc, #316]	; (800edfc <ip4_output_if_src+0x15c>)
 800ecbe:	4850      	ldr	r0, [pc, #320]	; (800ee00 <ip4_output_if_src+0x160>)
 800ecc0:	f003 fd32 	bl	8012728 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d068      	beq.n	800ed9c <ip4_output_if_src+0xfc>
    u16_t ip_hlen = IP_HLEN;
 800ecca:	2314      	movs	r3, #20
 800eccc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800ecce:	2114      	movs	r1, #20
 800ecd0:	68f8      	ldr	r0, [r7, #12]
 800ecd2:	f7f8 ffbb 	bl	8007c4c <pbuf_header>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d00a      	beq.n	800ecf2 <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 800ecdc:	4b49      	ldr	r3, [pc, #292]	; (800ee04 <ip4_output_if_src+0x164>)
 800ecde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ece2:	3301      	adds	r3, #1
 800ece4:	b29a      	uxth	r2, r3
 800ece6:	4b47      	ldr	r3, [pc, #284]	; (800ee04 <ip4_output_if_src+0x164>)
 800ece8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ecec:	f06f 0301 	mvn.w	r3, #1
 800ecf0:	e07d      	b.n	800edee <ip4_output_if_src+0x14e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	895b      	ldrh	r3, [r3, #10]
 800ecfc:	2b13      	cmp	r3, #19
 800ecfe:	d806      	bhi.n	800ed0e <ip4_output_if_src+0x6e>
 800ed00:	4b3d      	ldr	r3, [pc, #244]	; (800edf8 <ip4_output_if_src+0x158>)
 800ed02:	f44f 7258 	mov.w	r2, #864	; 0x360
 800ed06:	4940      	ldr	r1, [pc, #256]	; (800ee08 <ip4_output_if_src+0x168>)
 800ed08:	483d      	ldr	r0, [pc, #244]	; (800ee00 <ip4_output_if_src+0x160>)
 800ed0a:	f003 fd0d 	bl	8012728 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ed0e:	69fb      	ldr	r3, [r7, #28]
 800ed10:	78fa      	ldrb	r2, [r7, #3]
 800ed12:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ed14:	69fb      	ldr	r3, [r7, #28]
 800ed16:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ed1a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681a      	ldr	r2, [r3, #0]
 800ed20:	69fb      	ldr	r3, [r7, #28]
 800ed22:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ed24:	8b7b      	ldrh	r3, [r7, #26]
 800ed26:	089b      	lsrs	r3, r3, #2
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	b2db      	uxtb	r3, r3
 800ed2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed30:	b2da      	uxtb	r2, r3
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ed36:	69fb      	ldr	r3, [r7, #28]
 800ed38:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ed3c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	891b      	ldrh	r3, [r3, #8]
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7f7 fdd5 	bl	80068f2 <lwip_htons>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	461a      	mov	r2, r3
 800ed4c:	69fb      	ldr	r3, [r7, #28]
 800ed4e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ed50:	69fb      	ldr	r3, [r7, #28]
 800ed52:	2200      	movs	r2, #0
 800ed54:	719a      	strb	r2, [r3, #6]
 800ed56:	2200      	movs	r2, #0
 800ed58:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ed5a:	4b2c      	ldr	r3, [pc, #176]	; (800ee0c <ip4_output_if_src+0x16c>)
 800ed5c:	881b      	ldrh	r3, [r3, #0]
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7f7 fdc7 	bl	80068f2 <lwip_htons>
 800ed64:	4603      	mov	r3, r0
 800ed66:	461a      	mov	r2, r3
 800ed68:	69fb      	ldr	r3, [r7, #28]
 800ed6a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ed6c:	4b27      	ldr	r3, [pc, #156]	; (800ee0c <ip4_output_if_src+0x16c>)
 800ed6e:	881b      	ldrh	r3, [r3, #0]
 800ed70:	3301      	adds	r3, #1
 800ed72:	b29a      	uxth	r2, r3
 800ed74:	4b25      	ldr	r3, [pc, #148]	; (800ee0c <ip4_output_if_src+0x16c>)
 800ed76:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d104      	bne.n	800ed88 <ip4_output_if_src+0xe8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ed7e:	4b24      	ldr	r3, [pc, #144]	; (800ee10 <ip4_output_if_src+0x170>)
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	69fb      	ldr	r3, [r7, #28]
 800ed84:	60da      	str	r2, [r3, #12]
 800ed86:	e003      	b.n	800ed90 <ip4_output_if_src+0xf0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	681a      	ldr	r2, [r3, #0]
 800ed8c:	69fb      	ldr	r3, [r7, #28]
 800ed8e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	2200      	movs	r2, #0
 800ed94:	729a      	strb	r2, [r3, #10]
 800ed96:	2200      	movs	r2, #0
 800ed98:	72da      	strb	r2, [r3, #11]
 800ed9a:	e008      	b.n	800edae <ip4_output_if_src+0x10e>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	691b      	ldr	r3, [r3, #16]
 800eda6:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800eda8:	f107 0314 	add.w	r3, r7, #20
 800edac:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 800edae:	4b15      	ldr	r3, [pc, #84]	; (800ee04 <ip4_output_if_src+0x164>)
 800edb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800edb4:	3301      	adds	r3, #1
 800edb6:	b29a      	uxth	r2, r3
 800edb8:	4b12      	ldr	r3, [pc, #72]	; (800ee04 <ip4_output_if_src+0x164>)
 800edba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800edbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d00c      	beq.n	800ede0 <ip4_output_if_src+0x140>
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	891a      	ldrh	r2, [r3, #8]
 800edca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800edce:	429a      	cmp	r2, r3
 800edd0:	d906      	bls.n	800ede0 <ip4_output_if_src+0x140>
    return ip4_frag(p, netif, dest);
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800edd6:	68f8      	ldr	r0, [r7, #12]
 800edd8:	f000 fd36 	bl	800f848 <ip4_frag>
 800eddc:	4603      	mov	r3, r0
 800edde:	e006      	b.n	800edee <ip4_output_if_src+0x14e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ede0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede2:	695b      	ldr	r3, [r3, #20]
 800ede4:	687a      	ldr	r2, [r7, #4]
 800ede6:	68f9      	ldr	r1, [r7, #12]
 800ede8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edea:	4798      	blx	r3
 800edec:	4603      	mov	r3, r0
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3720      	adds	r7, #32
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	08017d80 	.word	0x08017d80
 800edfc:	08017db4 	.word	0x08017db4
 800ee00:	08017dc0 	.word	0x08017dc0
 800ee04:	20006e84 	.word	0x20006e84
 800ee08:	08017de8 	.word	0x08017de8
 800ee0c:	200070ae 	.word	0x200070ae
 800ee10:	080181a8 	.word	0x080181a8

0800ee14 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b085      	sub	sp, #20
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee28:	d002      	beq.n	800ee30 <ip4_addr_isbroadcast_u32+0x1c>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d101      	bne.n	800ee34 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ee30:	2301      	movs	r3, #1
 800ee32:	e02a      	b.n	800ee8a <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ee3a:	f003 0302 	and.w	r3, r3, #2
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d101      	bne.n	800ee46 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ee42:	2300      	movs	r3, #0
 800ee44:	e021      	b.n	800ee8a <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	3304      	adds	r3, #4
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	687a      	ldr	r2, [r7, #4]
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d101      	bne.n	800ee56 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ee52:	2300      	movs	r3, #0
 800ee54:	e019      	b.n	800ee8a <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ee56:	68fa      	ldr	r2, [r7, #12]
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	3304      	adds	r3, #4
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	405a      	eors	r2, r3
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	3308      	adds	r3, #8
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	4013      	ands	r3, r2
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d10d      	bne.n	800ee88 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	3308      	adds	r3, #8
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	43da      	mvns	r2, r3
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	3308      	adds	r3, #8
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d101      	bne.n	800ee88 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ee84:	2301      	movs	r3, #1
 800ee86:	e000      	b.n	800ee8a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ee88:	2300      	movs	r3, #0
  }
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3714      	adds	r7, #20
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bc80      	pop	{r7}
 800ee92:	4770      	bx	lr

0800ee94 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b084      	sub	sp, #16
 800ee98:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ee9e:	4b12      	ldr	r3, [pc, #72]	; (800eee8 <ip_reass_tmr+0x54>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800eea4:	e018      	b.n	800eed8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	7fdb      	ldrb	r3, [r3, #31]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d00b      	beq.n	800eec6 <ip_reass_tmr+0x32>
      r->timer--;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	7fdb      	ldrb	r3, [r3, #31]
 800eeb2:	3b01      	subs	r3, #1
 800eeb4:	b2da      	uxtb	r2, r3
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	60fb      	str	r3, [r7, #12]
 800eec4:	e008      	b.n	800eed8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800eed0:	68b9      	ldr	r1, [r7, #8]
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f000 f80a 	bl	800eeec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d1e3      	bne.n	800eea6 <ip_reass_tmr+0x12>
     }
   }
}
 800eede:	bf00      	nop
 800eee0:	bf00      	nop
 800eee2:	3710      	adds	r7, #16
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	200070b0 	.word	0x200070b0

0800eeec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b088      	sub	sp, #32
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800eef6:	2300      	movs	r3, #0
 800eef8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800eefa:	683a      	ldr	r2, [r7, #0]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d105      	bne.n	800ef0e <ip_reass_free_complete_datagram+0x22>
 800ef02:	4b45      	ldr	r3, [pc, #276]	; (800f018 <ip_reass_free_complete_datagram+0x12c>)
 800ef04:	22ab      	movs	r2, #171	; 0xab
 800ef06:	4945      	ldr	r1, [pc, #276]	; (800f01c <ip_reass_free_complete_datagram+0x130>)
 800ef08:	4845      	ldr	r0, [pc, #276]	; (800f020 <ip_reass_free_complete_datagram+0x134>)
 800ef0a:	f003 fc0d 	bl	8012728 <iprintf>
  if (prev != NULL) {
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d00a      	beq.n	800ef2a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	687a      	ldr	r2, [r7, #4]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d005      	beq.n	800ef2a <ip_reass_free_complete_datagram+0x3e>
 800ef1e:	4b3e      	ldr	r3, [pc, #248]	; (800f018 <ip_reass_free_complete_datagram+0x12c>)
 800ef20:	22ad      	movs	r2, #173	; 0xad
 800ef22:	4940      	ldr	r1, [pc, #256]	; (800f024 <ip_reass_free_complete_datagram+0x138>)
 800ef24:	483e      	ldr	r0, [pc, #248]	; (800f020 <ip_reass_free_complete_datagram+0x134>)
 800ef26:	f003 fbff 	bl	8012728 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	685b      	ldr	r3, [r3, #4]
 800ef30:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	889b      	ldrh	r3, [r3, #4]
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d12a      	bne.n	800ef92 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ef4a:	69bb      	ldr	r3, [r7, #24]
 800ef4c:	6858      	ldr	r0, [r3, #4]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	3308      	adds	r3, #8
 800ef52:	2214      	movs	r2, #20
 800ef54:	4619      	mov	r1, r3
 800ef56:	f002 fd63 	bl	8011a20 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ef5a:	2101      	movs	r1, #1
 800ef5c:	69b8      	ldr	r0, [r7, #24]
 800ef5e:	f7ff fbf1 	bl	800e744 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ef62:	69b8      	ldr	r0, [r7, #24]
 800ef64:	f7f8 ff2a 	bl	8007dbc <pbuf_clen>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ef6c:	8bfa      	ldrh	r2, [r7, #30]
 800ef6e:	8a7b      	ldrh	r3, [r7, #18]
 800ef70:	4413      	add	r3, r2
 800ef72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef76:	db05      	blt.n	800ef84 <ip_reass_free_complete_datagram+0x98>
 800ef78:	4b27      	ldr	r3, [pc, #156]	; (800f018 <ip_reass_free_complete_datagram+0x12c>)
 800ef7a:	22bc      	movs	r2, #188	; 0xbc
 800ef7c:	492a      	ldr	r1, [pc, #168]	; (800f028 <ip_reass_free_complete_datagram+0x13c>)
 800ef7e:	4828      	ldr	r0, [pc, #160]	; (800f020 <ip_reass_free_complete_datagram+0x134>)
 800ef80:	f003 fbd2 	bl	8012728 <iprintf>
    pbufs_freed += clen;
 800ef84:	8bfa      	ldrh	r2, [r7, #30]
 800ef86:	8a7b      	ldrh	r3, [r7, #18]
 800ef88:	4413      	add	r3, r2
 800ef8a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ef8c:	69b8      	ldr	r0, [r7, #24]
 800ef8e:	f7f8 fe81 	bl	8007c94 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ef98:	e01f      	b.n	800efda <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ef9a:	69bb      	ldr	r3, [r7, #24]
 800ef9c:	685b      	ldr	r3, [r3, #4]
 800ef9e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800efa0:	69bb      	ldr	r3, [r7, #24]
 800efa2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800efaa:	68f8      	ldr	r0, [r7, #12]
 800efac:	f7f8 ff06 	bl	8007dbc <pbuf_clen>
 800efb0:	4603      	mov	r3, r0
 800efb2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800efb4:	8bfa      	ldrh	r2, [r7, #30]
 800efb6:	8a7b      	ldrh	r3, [r7, #18]
 800efb8:	4413      	add	r3, r2
 800efba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efbe:	db05      	blt.n	800efcc <ip_reass_free_complete_datagram+0xe0>
 800efc0:	4b15      	ldr	r3, [pc, #84]	; (800f018 <ip_reass_free_complete_datagram+0x12c>)
 800efc2:	22cc      	movs	r2, #204	; 0xcc
 800efc4:	4918      	ldr	r1, [pc, #96]	; (800f028 <ip_reass_free_complete_datagram+0x13c>)
 800efc6:	4816      	ldr	r0, [pc, #88]	; (800f020 <ip_reass_free_complete_datagram+0x134>)
 800efc8:	f003 fbae 	bl	8012728 <iprintf>
    pbufs_freed += clen;
 800efcc:	8bfa      	ldrh	r2, [r7, #30]
 800efce:	8a7b      	ldrh	r3, [r7, #18]
 800efd0:	4413      	add	r3, r2
 800efd2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800efd4:	68f8      	ldr	r0, [r7, #12]
 800efd6:	f7f8 fe5d 	bl	8007c94 <pbuf_free>
  while (p != NULL) {
 800efda:	69bb      	ldr	r3, [r7, #24]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d1dc      	bne.n	800ef9a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800efe0:	6839      	ldr	r1, [r7, #0]
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f000 f8ca 	bl	800f17c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800efe8:	4b10      	ldr	r3, [pc, #64]	; (800f02c <ip_reass_free_complete_datagram+0x140>)
 800efea:	881b      	ldrh	r3, [r3, #0]
 800efec:	8bfa      	ldrh	r2, [r7, #30]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d905      	bls.n	800effe <ip_reass_free_complete_datagram+0x112>
 800eff2:	4b09      	ldr	r3, [pc, #36]	; (800f018 <ip_reass_free_complete_datagram+0x12c>)
 800eff4:	22d2      	movs	r2, #210	; 0xd2
 800eff6:	490e      	ldr	r1, [pc, #56]	; (800f030 <ip_reass_free_complete_datagram+0x144>)
 800eff8:	4809      	ldr	r0, [pc, #36]	; (800f020 <ip_reass_free_complete_datagram+0x134>)
 800effa:	f003 fb95 	bl	8012728 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800effe:	4b0b      	ldr	r3, [pc, #44]	; (800f02c <ip_reass_free_complete_datagram+0x140>)
 800f000:	881a      	ldrh	r2, [r3, #0]
 800f002:	8bfb      	ldrh	r3, [r7, #30]
 800f004:	1ad3      	subs	r3, r2, r3
 800f006:	b29a      	uxth	r2, r3
 800f008:	4b08      	ldr	r3, [pc, #32]	; (800f02c <ip_reass_free_complete_datagram+0x140>)
 800f00a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f00c:	8bfb      	ldrh	r3, [r7, #30]
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3720      	adds	r7, #32
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	08017e18 	.word	0x08017e18
 800f01c:	08017e54 	.word	0x08017e54
 800f020:	08017e60 	.word	0x08017e60
 800f024:	08017e88 	.word	0x08017e88
 800f028:	08017e9c 	.word	0x08017e9c
 800f02c:	200070b4 	.word	0x200070b4
 800f030:	08017ebc 	.word	0x08017ebc

0800f034 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b08a      	sub	sp, #40	; 0x28
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f03e:	2300      	movs	r3, #0
 800f040:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f042:	2300      	movs	r3, #0
 800f044:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f046:	2300      	movs	r3, #0
 800f048:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f04a:	2300      	movs	r3, #0
 800f04c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f04e:	2300      	movs	r3, #0
 800f050:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f052:	4b28      	ldr	r3, [pc, #160]	; (800f0f4 <ip_reass_remove_oldest_datagram+0xc0>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f058:	e030      	b.n	800f0bc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05c:	695a      	ldr	r2, [r3, #20]
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	68db      	ldr	r3, [r3, #12]
 800f062:	429a      	cmp	r2, r3
 800f064:	d10c      	bne.n	800f080 <ip_reass_remove_oldest_datagram+0x4c>
 800f066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f068:	699a      	ldr	r2, [r3, #24]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	691b      	ldr	r3, [r3, #16]
 800f06e:	429a      	cmp	r2, r3
 800f070:	d106      	bne.n	800f080 <ip_reass_remove_oldest_datagram+0x4c>
 800f072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f074:	899a      	ldrh	r2, [r3, #12]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	889b      	ldrh	r3, [r3, #4]
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d014      	beq.n	800f0aa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	3301      	adds	r3, #1
 800f084:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f086:	6a3b      	ldr	r3, [r7, #32]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d104      	bne.n	800f096 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f090:	69fb      	ldr	r3, [r7, #28]
 800f092:	61bb      	str	r3, [r7, #24]
 800f094:	e009      	b.n	800f0aa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f098:	7fda      	ldrb	r2, [r3, #31]
 800f09a:	6a3b      	ldr	r3, [r7, #32]
 800f09c:	7fdb      	ldrb	r3, [r3, #31]
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d803      	bhi.n	800f0aa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f0a6:	69fb      	ldr	r3, [r7, #28]
 800f0a8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d001      	beq.n	800f0b6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d1cb      	bne.n	800f05a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f0c2:	6a3b      	ldr	r3, [r7, #32]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d008      	beq.n	800f0da <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f0c8:	69b9      	ldr	r1, [r7, #24]
 800f0ca:	6a38      	ldr	r0, [r7, #32]
 800f0cc:	f7ff ff0e 	bl	800eeec <ip_reass_free_complete_datagram>
 800f0d0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f0d2:	697a      	ldr	r2, [r7, #20]
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	4413      	add	r3, r2
 800f0d8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f0da:	697a      	ldr	r2, [r7, #20]
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	da02      	bge.n	800f0e8 <ip_reass_remove_oldest_datagram+0xb4>
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	dcac      	bgt.n	800f042 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f0e8:	697b      	ldr	r3, [r7, #20]
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3728      	adds	r7, #40	; 0x28
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}
 800f0f2:	bf00      	nop
 800f0f4:	200070b0 	.word	0x200070b0

0800f0f8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
 800f100:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f102:	2004      	movs	r0, #4
 800f104:	f7f8 f836 	bl	8007174 <memp_malloc>
 800f108:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d116      	bne.n	800f13e <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f110:	6839      	ldr	r1, [r7, #0]
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f7ff ff8e 	bl	800f034 <ip_reass_remove_oldest_datagram>
 800f118:	4602      	mov	r2, r0
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	4293      	cmp	r3, r2
 800f11e:	dc03      	bgt.n	800f128 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f120:	2004      	movs	r0, #4
 800f122:	f7f8 f827 	bl	8007174 <memp_malloc>
 800f126:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d107      	bne.n	800f13e <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 800f12e:	4b11      	ldr	r3, [pc, #68]	; (800f174 <ip_reass_enqueue_new_datagram+0x7c>)
 800f130:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800f132:	3301      	adds	r3, #1
 800f134:	b29a      	uxth	r2, r3
 800f136:	4b0f      	ldr	r3, [pc, #60]	; (800f174 <ip_reass_enqueue_new_datagram+0x7c>)
 800f138:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800f13a:	2300      	movs	r3, #0
 800f13c:	e016      	b.n	800f16c <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f13e:	2220      	movs	r2, #32
 800f140:	2100      	movs	r1, #0
 800f142:	68f8      	ldr	r0, [r7, #12]
 800f144:	f002 fc7a 	bl	8011a3c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2203      	movs	r2, #3
 800f14c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f14e:	4b0a      	ldr	r3, [pc, #40]	; (800f178 <ip_reass_enqueue_new_datagram+0x80>)
 800f150:	681a      	ldr	r2, [r3, #0]
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f156:	4a08      	ldr	r2, [pc, #32]	; (800f178 <ip_reass_enqueue_new_datagram+0x80>)
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	3308      	adds	r3, #8
 800f160:	2214      	movs	r2, #20
 800f162:	6879      	ldr	r1, [r7, #4]
 800f164:	4618      	mov	r0, r3
 800f166:	f002 fc5b 	bl	8011a20 <memcpy>
  return ipr;
 800f16a:	68fb      	ldr	r3, [r7, #12]
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	3710      	adds	r7, #16
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}
 800f174:	20006e84 	.word	0x20006e84
 800f178:	200070b0 	.word	0x200070b0

0800f17c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f186:	4b10      	ldr	r3, [pc, #64]	; (800f1c8 <ip_reass_dequeue_datagram+0x4c>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d104      	bne.n	800f19a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	4a0c      	ldr	r2, [pc, #48]	; (800f1c8 <ip_reass_dequeue_datagram+0x4c>)
 800f196:	6013      	str	r3, [r2, #0]
 800f198:	e00d      	b.n	800f1b6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d106      	bne.n	800f1ae <ip_reass_dequeue_datagram+0x32>
 800f1a0:	4b0a      	ldr	r3, [pc, #40]	; (800f1cc <ip_reass_dequeue_datagram+0x50>)
 800f1a2:	f240 1245 	movw	r2, #325	; 0x145
 800f1a6:	490a      	ldr	r1, [pc, #40]	; (800f1d0 <ip_reass_dequeue_datagram+0x54>)
 800f1a8:	480a      	ldr	r0, [pc, #40]	; (800f1d4 <ip_reass_dequeue_datagram+0x58>)
 800f1aa:	f003 fabd 	bl	8012728 <iprintf>
    prev->next = ipr->next;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f1b6:	6879      	ldr	r1, [r7, #4]
 800f1b8:	2004      	movs	r0, #4
 800f1ba:	f7f8 f82d 	bl	8007218 <memp_free>
}
 800f1be:	bf00      	nop
 800f1c0:	3708      	adds	r7, #8
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop
 800f1c8:	200070b0 	.word	0x200070b0
 800f1cc:	08017e18 	.word	0x08017e18
 800f1d0:	08017ed8 	.word	0x08017ed8
 800f1d4:	08017e60 	.word	0x08017e60

0800f1d8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b08c      	sub	sp, #48	; 0x30
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	60b9      	str	r1, [r7, #8]
 800f1e2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	685b      	ldr	r3, [r3, #4]
 800f1f0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	885b      	ldrh	r3, [r3, #2]
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7f7 fb7a 	bl	80068f2 <lwip_htons>
 800f1fe:	4603      	mov	r3, r0
 800f200:	461a      	mov	r2, r3
 800f202:	69fb      	ldr	r3, [r7, #28]
 800f204:	781b      	ldrb	r3, [r3, #0]
 800f206:	b29b      	uxth	r3, r3
 800f208:	f003 030f 	and.w	r3, r3, #15
 800f20c:	b29b      	uxth	r3, r3
 800f20e:	009b      	lsls	r3, r3, #2
 800f210:	b29b      	uxth	r3, r3
 800f212:	1ad3      	subs	r3, r2, r3
 800f214:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	88db      	ldrh	r3, [r3, #6]
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7f7 fb68 	bl	80068f2 <lwip_htons>
 800f222:	4603      	mov	r3, r0
 800f224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f228:	b29b      	uxth	r3, r3
 800f22a:	00db      	lsls	r3, r3, #3
 800f22c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f236:	2200      	movs	r2, #0
 800f238:	701a      	strb	r2, [r3, #0]
 800f23a:	2200      	movs	r2, #0
 800f23c:	705a      	strb	r2, [r3, #1]
 800f23e:	2200      	movs	r2, #0
 800f240:	709a      	strb	r2, [r3, #2]
 800f242:	2200      	movs	r2, #0
 800f244:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f248:	8b3a      	ldrh	r2, [r7, #24]
 800f24a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800f24c:	8b3a      	ldrh	r2, [r7, #24]
 800f24e:	8b7b      	ldrh	r3, [r7, #26]
 800f250:	4413      	add	r3, r2
 800f252:	b29a      	uxth	r2, r3
 800f254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f256:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	685b      	ldr	r3, [r3, #4]
 800f25c:	627b      	str	r3, [r7, #36]	; 0x24
 800f25e:	e061      	b.n	800f324 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800f260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800f266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f268:	889b      	ldrh	r3, [r3, #4]
 800f26a:	b29a      	uxth	r2, r3
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	889b      	ldrh	r3, [r3, #4]
 800f270:	b29b      	uxth	r3, r3
 800f272:	429a      	cmp	r2, r3
 800f274:	d232      	bcs.n	800f2dc <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f27a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d01f      	beq.n	800f2c2 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f284:	889b      	ldrh	r3, [r3, #4]
 800f286:	b29a      	uxth	r2, r3
 800f288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28a:	88db      	ldrh	r3, [r3, #6]
 800f28c:	b29b      	uxth	r3, r3
 800f28e:	429a      	cmp	r2, r3
 800f290:	f0c0 80e3 	bcc.w	800f45a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800f294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f296:	88db      	ldrh	r3, [r3, #6]
 800f298:	b29a      	uxth	r2, r3
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	889b      	ldrh	r3, [r3, #4]
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	f200 80da 	bhi.w	800f45a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a8:	68ba      	ldr	r2, [r7, #8]
 800f2aa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ae:	88db      	ldrh	r3, [r3, #6]
 800f2b0:	b29a      	uxth	r2, r3
 800f2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b4:	889b      	ldrh	r3, [r3, #4]
 800f2b6:	b29b      	uxth	r3, r3
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d037      	beq.n	800f32c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f2c0:	e034      	b.n	800f32c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800f2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c4:	88db      	ldrh	r3, [r3, #6]
 800f2c6:	b29a      	uxth	r2, r3
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	889b      	ldrh	r3, [r3, #4]
 800f2cc:	b29b      	uxth	r3, r3
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	f200 80c5 	bhi.w	800f45e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	68ba      	ldr	r2, [r7, #8]
 800f2d8:	605a      	str	r2, [r3, #4]
      break;
 800f2da:	e027      	b.n	800f32c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800f2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2de:	889b      	ldrh	r3, [r3, #4]
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	889b      	ldrh	r3, [r3, #4]
 800f2e6:	b29b      	uxth	r3, r3
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	f000 80ba 	beq.w	800f462 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f0:	889b      	ldrh	r3, [r3, #4]
 800f2f2:	b29a      	uxth	r2, r3
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	88db      	ldrh	r3, [r3, #6]
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	f0c0 80b3 	bcc.w	800f466 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f302:	2b00      	cmp	r3, #0
 800f304:	d009      	beq.n	800f31a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800f306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f308:	88db      	ldrh	r3, [r3, #6]
 800f30a:	b29a      	uxth	r2, r3
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	889b      	ldrh	r3, [r3, #4]
 800f310:	b29b      	uxth	r3, r3
 800f312:	429a      	cmp	r2, r3
 800f314:	d001      	beq.n	800f31a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f316:	2300      	movs	r3, #0
 800f318:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f326:	2b00      	cmp	r3, #0
 800f328:	d19a      	bne.n	800f260 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800f32a:	e000      	b.n	800f32e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800f32c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f330:	2b00      	cmp	r3, #0
 800f332:	d12d      	bne.n	800f390 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800f334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f336:	2b00      	cmp	r3, #0
 800f338:	d01c      	beq.n	800f374 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33c:	88db      	ldrh	r3, [r3, #6]
 800f33e:	b29a      	uxth	r2, r3
 800f340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f342:	889b      	ldrh	r3, [r3, #4]
 800f344:	b29b      	uxth	r3, r3
 800f346:	429a      	cmp	r2, r3
 800f348:	d906      	bls.n	800f358 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800f34a:	4b51      	ldr	r3, [pc, #324]	; (800f490 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f34c:	f240 12ab 	movw	r2, #427	; 0x1ab
 800f350:	4950      	ldr	r1, [pc, #320]	; (800f494 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f352:	4851      	ldr	r0, [pc, #324]	; (800f498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f354:	f003 f9e8 	bl	8012728 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35a:	68ba      	ldr	r2, [r7, #8]
 800f35c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f360:	88db      	ldrh	r3, [r3, #6]
 800f362:	b29a      	uxth	r2, r3
 800f364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f366:	889b      	ldrh	r3, [r3, #4]
 800f368:	b29b      	uxth	r3, r3
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d010      	beq.n	800f390 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800f36e:	2300      	movs	r3, #0
 800f370:	623b      	str	r3, [r7, #32]
 800f372:	e00d      	b.n	800f390 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	685b      	ldr	r3, [r3, #4]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d006      	beq.n	800f38a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800f37c:	4b44      	ldr	r3, [pc, #272]	; (800f490 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f37e:	f240 12b3 	movw	r2, #435	; 0x1b3
 800f382:	4946      	ldr	r1, [pc, #280]	; (800f49c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f384:	4844      	ldr	r0, [pc, #272]	; (800f498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f386:	f003 f9cf 	bl	8012728 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	68ba      	ldr	r2, [r7, #8]
 800f38e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d105      	bne.n	800f3a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	7f9b      	ldrb	r3, [r3, #30]
 800f39a:	f003 0301 	and.w	r3, r3, #1
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d059      	beq.n	800f456 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800f3a2:	6a3b      	ldr	r3, [r7, #32]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d04f      	beq.n	800f448 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d006      	beq.n	800f3be <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	685b      	ldr	r3, [r3, #4]
 800f3b4:	685b      	ldr	r3, [r3, #4]
 800f3b6:	889b      	ldrh	r3, [r3, #4]
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d002      	beq.n	800f3c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	623b      	str	r3, [r7, #32]
 800f3c2:	e041      	b.n	800f448 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f3ce:	e012      	b.n	800f3f6 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800f3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d2:	685b      	ldr	r3, [r3, #4]
 800f3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d8:	88db      	ldrh	r3, [r3, #6]
 800f3da:	b29a      	uxth	r2, r3
 800f3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3de:	889b      	ldrh	r3, [r3, #4]
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d002      	beq.n	800f3ec <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	623b      	str	r3, [r7, #32]
            break;
 800f3ea:	e007      	b.n	800f3fc <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800f3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ee:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d1e9      	bne.n	800f3d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f3fc:	6a3b      	ldr	r3, [r7, #32]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d022      	beq.n	800f448 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	685b      	ldr	r3, [r3, #4]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d106      	bne.n	800f418 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800f40a:	4b21      	ldr	r3, [pc, #132]	; (800f490 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f40c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800f410:	4923      	ldr	r1, [pc, #140]	; (800f4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f412:	4821      	ldr	r0, [pc, #132]	; (800f498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f414:	f003 f988 	bl	8012728 <iprintf>
          LWIP_ASSERT("sanity check",
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f420:	429a      	cmp	r2, r3
 800f422:	d106      	bne.n	800f432 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800f424:	4b1a      	ldr	r3, [pc, #104]	; (800f490 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f426:	f240 12d5 	movw	r2, #469	; 0x1d5
 800f42a:	491d      	ldr	r1, [pc, #116]	; (800f4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f42c:	481a      	ldr	r0, [pc, #104]	; (800f498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f42e:	f003 f97b 	bl	8012728 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d006      	beq.n	800f448 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800f43a:	4b15      	ldr	r3, [pc, #84]	; (800f490 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f43c:	f240 12d7 	movw	r2, #471	; 0x1d7
 800f440:	4918      	ldr	r1, [pc, #96]	; (800f4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f442:	4815      	ldr	r0, [pc, #84]	; (800f498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f444:	f003 f970 	bl	8012728 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f448:	6a3b      	ldr	r3, [r7, #32]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	bf14      	ite	ne
 800f44e:	2301      	movne	r3, #1
 800f450:	2300      	moveq	r3, #0
 800f452:	b2db      	uxtb	r3, r3
 800f454:	e018      	b.n	800f488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f456:	2300      	movs	r3, #0
 800f458:	e016      	b.n	800f488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 800f45a:	bf00      	nop
 800f45c:	e004      	b.n	800f468 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800f45e:	bf00      	nop
 800f460:	e002      	b.n	800f468 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800f462:	bf00      	nop
 800f464:	e000      	b.n	800f468 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800f466:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800f468:	68b8      	ldr	r0, [r7, #8]
 800f46a:	f7f8 fca7 	bl	8007dbc <pbuf_clen>
 800f46e:	4603      	mov	r3, r0
 800f470:	461a      	mov	r2, r3
 800f472:	4b0d      	ldr	r3, [pc, #52]	; (800f4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f474:	881b      	ldrh	r3, [r3, #0]
 800f476:	1a9b      	subs	r3, r3, r2
 800f478:	b29a      	uxth	r2, r3
 800f47a:	4b0b      	ldr	r3, [pc, #44]	; (800f4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f47c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800f47e:	68b8      	ldr	r0, [r7, #8]
 800f480:	f7f8 fc08 	bl	8007c94 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3730      	adds	r7, #48	; 0x30
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}
 800f490:	08017e18 	.word	0x08017e18
 800f494:	08017ef4 	.word	0x08017ef4
 800f498:	08017e60 	.word	0x08017e60
 800f49c:	08017f14 	.word	0x08017f14
 800f4a0:	08017f4c 	.word	0x08017f4c
 800f4a4:	08017f5c 	.word	0x08017f5c
 800f4a8:	200070b4 	.word	0x200070b4

0800f4ac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b08e      	sub	sp, #56	; 0x38
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  struct ip_reass_helper *iprh;
  u16_t offset, len, clen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 800f4b4:	4b9a      	ldr	r3, [pc, #616]	; (800f720 <ip4_reass+0x274>)
 800f4b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4b8:	3301      	adds	r3, #1
 800f4ba:	b29a      	uxth	r2, r3
 800f4bc:	4b98      	ldr	r3, [pc, #608]	; (800f720 <ip4_reass+0x274>)
 800f4be:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800f4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	f003 030f 	and.w	r3, r3, #15
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	2b14      	cmp	r3, #20
 800f4d2:	d008      	beq.n	800f4e6 <ip4_reass+0x3a>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 800f4d4:	4b92      	ldr	r3, [pc, #584]	; (800f720 <ip4_reass+0x274>)
 800f4d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800f4da:	3301      	adds	r3, #1
 800f4dc:	b29a      	uxth	r2, r3
 800f4de:	4b90      	ldr	r3, [pc, #576]	; (800f720 <ip4_reass+0x274>)
 800f4e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 800f4e4:	e145      	b.n	800f772 <ip4_reass+0x2c6>
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800f4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e8:	88db      	ldrh	r3, [r3, #6]
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7f7 fa00 	bl	80068f2 <lwip_htons>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	00db      	lsls	r3, r3, #3
 800f4fc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800f4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f500:	885b      	ldrh	r3, [r3, #2]
 800f502:	b29b      	uxth	r3, r3
 800f504:	4618      	mov	r0, r3
 800f506:	f7f7 f9f4 	bl	80068f2 <lwip_htons>
 800f50a:	4603      	mov	r3, r0
 800f50c:	461a      	mov	r2, r3
 800f50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	b29b      	uxth	r3, r3
 800f514:	f003 030f 	and.w	r3, r3, #15
 800f518:	b29b      	uxth	r3, r3
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	1ad3      	subs	r3, r2, r3
 800f520:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f7f8 fc4a 	bl	8007dbc <pbuf_clen>
 800f528:	4603      	mov	r3, r0
 800f52a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f52c:	4b7d      	ldr	r3, [pc, #500]	; (800f724 <ip4_reass+0x278>)
 800f52e:	881b      	ldrh	r3, [r3, #0]
 800f530:	461a      	mov	r2, r3
 800f532:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f534:	4413      	add	r3, r2
 800f536:	2b0a      	cmp	r3, #10
 800f538:	dd15      	ble.n	800f566 <ip4_reass+0xba>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f53a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f53c:	4619      	mov	r1, r3
 800f53e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f540:	f7ff fd78 	bl	800f034 <ip_reass_remove_oldest_datagram>
 800f544:	4603      	mov	r3, r0
 800f546:	2b00      	cmp	r3, #0
 800f548:	d006      	beq.n	800f558 <ip4_reass+0xac>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f54a:	4b76      	ldr	r3, [pc, #472]	; (800f724 <ip4_reass+0x278>)
 800f54c:	881b      	ldrh	r3, [r3, #0]
 800f54e:	461a      	mov	r2, r3
 800f550:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f552:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f554:	2b0a      	cmp	r3, #10
 800f556:	dd06      	ble.n	800f566 <ip4_reass+0xba>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 800f558:	4b71      	ldr	r3, [pc, #452]	; (800f720 <ip4_reass+0x274>)
 800f55a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800f55c:	3301      	adds	r3, #1
 800f55e:	b29a      	uxth	r2, r3
 800f560:	4b6f      	ldr	r3, [pc, #444]	; (800f720 <ip4_reass+0x274>)
 800f562:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 800f564:	e105      	b.n	800f772 <ip4_reass+0x2c6>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f566:	4b70      	ldr	r3, [pc, #448]	; (800f728 <ip4_reass+0x27c>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	633b      	str	r3, [r7, #48]	; 0x30
 800f56c:	e01e      	b.n	800f5ac <ip4_reass+0x100>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f570:	695a      	ldr	r2, [r3, #20]
 800f572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f574:	68db      	ldr	r3, [r3, #12]
 800f576:	429a      	cmp	r2, r3
 800f578:	d115      	bne.n	800f5a6 <ip4_reass+0xfa>
 800f57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57c:	699a      	ldr	r2, [r3, #24]
 800f57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f580:	691b      	ldr	r3, [r3, #16]
 800f582:	429a      	cmp	r2, r3
 800f584:	d10f      	bne.n	800f5a6 <ip4_reass+0xfa>
 800f586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f588:	899a      	ldrh	r2, [r3, #12]
 800f58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58c:	889b      	ldrh	r3, [r3, #4]
 800f58e:	b29b      	uxth	r3, r3
 800f590:	429a      	cmp	r2, r3
 800f592:	d108      	bne.n	800f5a6 <ip4_reass+0xfa>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 800f594:	4b62      	ldr	r3, [pc, #392]	; (800f720 <ip4_reass+0x274>)
 800f596:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f59a:	3301      	adds	r3, #1
 800f59c:	b29a      	uxth	r2, r3
 800f59e:	4b60      	ldr	r3, [pc, #384]	; (800f720 <ip4_reass+0x274>)
 800f5a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 800f5a4:	e005      	b.n	800f5b2 <ip4_reass+0x106>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	633b      	str	r3, [r7, #48]	; 0x30
 800f5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d1dd      	bne.n	800f56e <ip4_reass+0xc2>
    }
  }

  if (ipr == NULL) {
 800f5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d109      	bne.n	800f5cc <ip4_reass+0x120>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f5b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5be:	f7ff fd9b 	bl	800f0f8 <ip_reass_enqueue_new_datagram>
 800f5c2:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d11c      	bne.n	800f604 <ip4_reass+0x158>
      goto nullreturn;
 800f5ca:	e0d2      	b.n	800f772 <ip4_reass+0x2c6>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ce:	88db      	ldrh	r3, [r3, #6]
 800f5d0:	b29b      	uxth	r3, r3
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7f7 f98d 	bl	80068f2 <lwip_htons>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d110      	bne.n	800f604 <ip4_reass+0x158>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e4:	89db      	ldrh	r3, [r3, #14]
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7f7 f983 	bl	80068f2 <lwip_htons>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d006      	beq.n	800f604 <ip4_reass+0x158>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f8:	3308      	adds	r3, #8
 800f5fa:	2214      	movs	r2, #20
 800f5fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f5fe:	4618      	mov	r0, r3
 800f600:	f002 fa0e 	bl	8011a20 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f606:	88db      	ldrh	r3, [r3, #6]
 800f608:	b29b      	uxth	r3, r3
 800f60a:	f003 0320 	and.w	r3, r3, #32
 800f60e:	2b00      	cmp	r3, #0
 800f610:	bf0c      	ite	eq
 800f612:	2301      	moveq	r3, #1
 800f614:	2300      	movne	r3, #0
 800f616:	b2db      	uxtb	r3, r3
 800f618:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f61a:	69fb      	ldr	r3, [r7, #28]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d00e      	beq.n	800f63e <ip4_reass+0x192>
    u16_t datagram_len = (u16_t)(offset + len);
 800f620:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f622:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f624:	4413      	add	r3, r2
 800f626:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f628:	8b7a      	ldrh	r2, [r7, #26]
 800f62a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f62c:	429a      	cmp	r2, r3
 800f62e:	f0c0 809d 	bcc.w	800f76c <ip4_reass+0x2c0>
 800f632:	8b7b      	ldrh	r3, [r7, #26]
 800f634:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f638:	4293      	cmp	r3, r2
 800f63a:	f200 8097 	bhi.w	800f76c <ip4_reass+0x2c0>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f63e:	69fa      	ldr	r2, [r7, #28]
 800f640:	6879      	ldr	r1, [r7, #4]
 800f642:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f644:	f7ff fdc8 	bl	800f1d8 <ip_reass_chain_frag_into_datagram_and_validate>
 800f648:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f650:	f000 808e 	beq.w	800f770 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f654:	4b33      	ldr	r3, [pc, #204]	; (800f724 <ip4_reass+0x278>)
 800f656:	881a      	ldrh	r2, [r3, #0]
 800f658:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f65a:	4413      	add	r3, r2
 800f65c:	b29a      	uxth	r2, r3
 800f65e:	4b31      	ldr	r3, [pc, #196]	; (800f724 <ip4_reass+0x278>)
 800f660:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f662:	69fb      	ldr	r3, [r7, #28]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d00d      	beq.n	800f684 <ip4_reass+0x1d8>
    u16_t datagram_len = (u16_t)(offset + len);
 800f668:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f66a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f66c:	4413      	add	r3, r2
 800f66e:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f672:	8a7a      	ldrh	r2, [r7, #18]
 800f674:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f678:	7f9b      	ldrb	r3, [r3, #30]
 800f67a:	f043 0301 	orr.w	r3, r3, #1
 800f67e:	b2da      	uxtb	r2, r3
 800f680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f682:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	2b01      	cmp	r3, #1
 800f688:	d16e      	bne.n	800f768 <ip4_reass+0x2bc>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800f68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68c:	8b9b      	ldrh	r3, [r3, #28]
 800f68e:	3314      	adds	r3, #20
 800f690:	b29a      	uxth	r2, r3
 800f692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f694:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800f696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f698:	685b      	ldr	r3, [r3, #4]
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800f6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a2:	685b      	ldr	r3, [r3, #4]
 800f6a4:	685b      	ldr	r3, [r3, #4]
 800f6a6:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6aa:	3308      	adds	r3, #8
 800f6ac:	2214      	movs	r2, #20
 800f6ae:	4619      	mov	r1, r3
 800f6b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6b2:	f002 f9b5 	bl	8011a20 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800f6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b8:	8b9b      	ldrh	r3, [r3, #28]
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7f7 f919 	bl	80068f2 <lwip_htons>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	719a      	strb	r2, [r3, #6]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	729a      	strb	r2, [r3, #10]
 800f6d8:	2200      	movs	r2, #0
 800f6da:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f6e2:	e00e      	b.n	800f702 <ip4_reass+0x256>
      iprh = (struct ip_reass_helper*)r->payload;
 800f6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6e6:	685b      	ldr	r3, [r3, #4]
 800f6e8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800f6ea:	f06f 0113 	mvn.w	r1, #19
 800f6ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f6f0:	f7f8 faac 	bl	8007c4c <pbuf_header>
      pbuf_cat(p, r);
 800f6f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f7f8 fb98 	bl	8007e2c <pbuf_cat>
      r = iprh->next_pbuf;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f704:	2b00      	cmp	r3, #0
 800f706:	d1ed      	bne.n	800f6e4 <ip4_reass+0x238>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f708:	4b07      	ldr	r3, [pc, #28]	; (800f728 <ip4_reass+0x27c>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f70e:	429a      	cmp	r2, r3
 800f710:	d102      	bne.n	800f718 <ip4_reass+0x26c>
      ipr_prev = NULL;
 800f712:	2300      	movs	r3, #0
 800f714:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f716:	e016      	b.n	800f746 <ip4_reass+0x29a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f718:	4b03      	ldr	r3, [pc, #12]	; (800f728 <ip4_reass+0x27c>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f71e:	e00d      	b.n	800f73c <ip4_reass+0x290>
 800f720:	20006e84 	.word	0x20006e84
 800f724:	200070b4 	.word	0x200070b4
 800f728:	200070b0 	.word	0x200070b0
        if (ipr_prev->next == ipr) {
 800f72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f732:	429a      	cmp	r2, r3
 800f734:	d006      	beq.n	800f744 <ip4_reass+0x298>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d1f4      	bne.n	800f72c <ip4_reass+0x280>
 800f742:	e000      	b.n	800f746 <ip4_reass+0x29a>
          break;
 800f744:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f746:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f74a:	f7ff fd17 	bl	800f17c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f7f8 fb34 	bl	8007dbc <pbuf_clen>
 800f754:	4603      	mov	r3, r0
 800f756:	461a      	mov	r2, r3
 800f758:	4b0d      	ldr	r3, [pc, #52]	; (800f790 <ip4_reass+0x2e4>)
 800f75a:	881b      	ldrh	r3, [r3, #0]
 800f75c:	1a9b      	subs	r3, r3, r2
 800f75e:	b29a      	uxth	r2, r3
 800f760:	4b0b      	ldr	r3, [pc, #44]	; (800f790 <ip4_reass+0x2e4>)
 800f762:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	e00e      	b.n	800f786 <ip4_reass+0x2da>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f768:	2300      	movs	r3, #0
 800f76a:	e00c      	b.n	800f786 <ip4_reass+0x2da>
      goto nullreturn;
 800f76c:	bf00      	nop
 800f76e:	e000      	b.n	800f772 <ip4_reass+0x2c6>
    goto nullreturn;
 800f770:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 800f772:	4b08      	ldr	r3, [pc, #32]	; (800f794 <ip4_reass+0x2e8>)
 800f774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f776:	3301      	adds	r3, #1
 800f778:	b29a      	uxth	r2, r3
 800f77a:	4b06      	ldr	r3, [pc, #24]	; (800f794 <ip4_reass+0x2e8>)
 800f77c:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f7f8 fa88 	bl	8007c94 <pbuf_free>
  return NULL;
 800f784:	2300      	movs	r3, #0
}
 800f786:	4618      	mov	r0, r3
 800f788:	3738      	adds	r7, #56	; 0x38
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	200070b4 	.word	0x200070b4
 800f794:	20006e84 	.word	0x20006e84

0800f798 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800f79c:	2005      	movs	r0, #5
 800f79e:	f7f7 fce9 	bl	8007174 <memp_malloc>
 800f7a2:	4603      	mov	r3, r0
}
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d106      	bne.n	800f7c4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f7b6:	4b07      	ldr	r3, [pc, #28]	; (800f7d4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f7b8:	f240 22ae 	movw	r2, #686	; 0x2ae
 800f7bc:	4906      	ldr	r1, [pc, #24]	; (800f7d8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f7be:	4807      	ldr	r0, [pc, #28]	; (800f7dc <ip_frag_free_pbuf_custom_ref+0x34>)
 800f7c0:	f002 ffb2 	bl	8012728 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f7c4:	6879      	ldr	r1, [r7, #4]
 800f7c6:	2005      	movs	r0, #5
 800f7c8:	f7f7 fd26 	bl	8007218 <memp_free>
}
 800f7cc:	bf00      	nop
 800f7ce:	3708      	adds	r7, #8
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}
 800f7d4:	08017e18 	.word	0x08017e18
 800f7d8:	08017f80 	.word	0x08017f80
 800f7dc:	08017e60 	.word	0x08017e60

0800f7e0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b084      	sub	sp, #16
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d106      	bne.n	800f800 <ipfrag_free_pbuf_custom+0x20>
 800f7f2:	4b11      	ldr	r3, [pc, #68]	; (800f838 <ipfrag_free_pbuf_custom+0x58>)
 800f7f4:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800f7f8:	4910      	ldr	r1, [pc, #64]	; (800f83c <ipfrag_free_pbuf_custom+0x5c>)
 800f7fa:	4811      	ldr	r0, [pc, #68]	; (800f840 <ipfrag_free_pbuf_custom+0x60>)
 800f7fc:	f002 ff94 	bl	8012728 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800f800:	68fa      	ldr	r2, [r7, #12]
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	429a      	cmp	r2, r3
 800f806:	d006      	beq.n	800f816 <ipfrag_free_pbuf_custom+0x36>
 800f808:	4b0b      	ldr	r3, [pc, #44]	; (800f838 <ipfrag_free_pbuf_custom+0x58>)
 800f80a:	f240 22b9 	movw	r2, #697	; 0x2b9
 800f80e:	490d      	ldr	r1, [pc, #52]	; (800f844 <ipfrag_free_pbuf_custom+0x64>)
 800f810:	480b      	ldr	r0, [pc, #44]	; (800f840 <ipfrag_free_pbuf_custom+0x60>)
 800f812:	f002 ff89 	bl	8012728 <iprintf>
  if (pcr->original != NULL) {
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	695b      	ldr	r3, [r3, #20]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d004      	beq.n	800f828 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	695b      	ldr	r3, [r3, #20]
 800f822:	4618      	mov	r0, r3
 800f824:	f7f8 fa36 	bl	8007c94 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f828:	68f8      	ldr	r0, [r7, #12]
 800f82a:	f7ff ffbd 	bl	800f7a8 <ip_frag_free_pbuf_custom_ref>
}
 800f82e:	bf00      	nop
 800f830:	3710      	adds	r7, #16
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}
 800f836:	bf00      	nop
 800f838:	08017e18 	.word	0x08017e18
 800f83c:	08017f8c 	.word	0x08017f8c
 800f840:	08017e60 	.word	0x08017e60
 800f844:	08017f98 	.word	0x08017f98

0800f848 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b092      	sub	sp, #72	; 0x48
 800f84c:	af02      	add	r7, sp, #8
 800f84e:	60f8      	str	r0, [r7, #12]
 800f850:	60b9      	str	r1, [r7, #8]
 800f852:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f854:	2300      	movs	r3, #0
 800f856:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f85c:	3b14      	subs	r3, #20
 800f85e:	2b00      	cmp	r3, #0
 800f860:	da00      	bge.n	800f864 <ip4_frag+0x1c>
 800f862:	3307      	adds	r3, #7
 800f864:	10db      	asrs	r3, r3, #3
 800f866:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f868:	2314      	movs	r3, #20
 800f86a:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	685b      	ldr	r3, [r3, #4]
 800f870:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800f872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f874:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800f876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	f003 030f 	and.w	r3, r3, #15
 800f87e:	009b      	lsls	r3, r3, #2
 800f880:	2b14      	cmp	r3, #20
 800f882:	d009      	beq.n	800f898 <ip4_frag+0x50>
 800f884:	4b7d      	ldr	r3, [pc, #500]	; (800fa7c <ip4_frag+0x234>)
 800f886:	f240 22e1 	movw	r2, #737	; 0x2e1
 800f88a:	497d      	ldr	r1, [pc, #500]	; (800fa80 <ip4_frag+0x238>)
 800f88c:	487d      	ldr	r0, [pc, #500]	; (800fa84 <ip4_frag+0x23c>)
 800f88e:	f002 ff4b 	bl	8012728 <iprintf>
 800f892:	f06f 0305 	mvn.w	r3, #5
 800f896:	e0ec      	b.n	800fa72 <ip4_frag+0x22a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f89a:	88db      	ldrh	r3, [r3, #6]
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7f7 f827 	bl	80068f2 <lwip_htons>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800f8a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f8aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f8ae:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800f8b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f8b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d009      	beq.n	800f8ce <ip4_frag+0x86>
 800f8ba:	4b70      	ldr	r3, [pc, #448]	; (800fa7c <ip4_frag+0x234>)
 800f8bc:	f240 22e6 	movw	r2, #742	; 0x2e6
 800f8c0:	4971      	ldr	r1, [pc, #452]	; (800fa88 <ip4_frag+0x240>)
 800f8c2:	4870      	ldr	r0, [pc, #448]	; (800fa84 <ip4_frag+0x23c>)
 800f8c4:	f002 ff30 	bl	8012728 <iprintf>
 800f8c8:	f06f 0305 	mvn.w	r3, #5
 800f8cc:	e0d1      	b.n	800fa72 <ip4_frag+0x22a>

  left = p->tot_len - IP_HLEN;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	891b      	ldrh	r3, [r3, #8]
 800f8d2:	3b14      	subs	r3, #20
 800f8d4:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800f8d6:	e0c3      	b.n	800fa60 <ip4_frag+0x218>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800f8d8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f8da:	00da      	lsls	r2, r3, #3
 800f8dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	bfa8      	it	ge
 800f8e2:	4613      	movge	r3, r2
 800f8e4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	2114      	movs	r1, #20
 800f8ea:	2002      	movs	r0, #2
 800f8ec:	f7f7 fe5a 	bl	80075a4 <pbuf_alloc>
 800f8f0:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800f8f2:	6a3b      	ldr	r3, [r7, #32]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	f000 80b9 	beq.w	800fa6c <ip4_frag+0x224>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	895b      	ldrh	r3, [r3, #10]
 800f8fe:	2b13      	cmp	r3, #19
 800f900:	d806      	bhi.n	800f910 <ip4_frag+0xc8>
 800f902:	4b5e      	ldr	r3, [pc, #376]	; (800fa7c <ip4_frag+0x234>)
 800f904:	f44f 7242 	mov.w	r2, #776	; 0x308
 800f908:	4960      	ldr	r1, [pc, #384]	; (800fa8c <ip4_frag+0x244>)
 800f90a:	485e      	ldr	r0, [pc, #376]	; (800fa84 <ip4_frag+0x23c>)
 800f90c:	f002 ff0c 	bl	8012728 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f910:	6a3b      	ldr	r3, [r7, #32]
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	2214      	movs	r2, #20
 800f916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f918:	4618      	mov	r0, r3
 800f91a:	f002 f881 	bl	8011a20 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f91e:	6a3b      	ldr	r3, [r7, #32]
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800f924:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f926:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800f928:	e04f      	b.n	800f9ca <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	895a      	ldrh	r2, [r3, #10]
 800f92e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f930:	1ad3      	subs	r3, r2, r3
 800f932:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f934:	8b7a      	ldrh	r2, [r7, #26]
 800f936:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f938:	4293      	cmp	r3, r2
 800f93a:	bf28      	it	cs
 800f93c:	4613      	movcs	r3, r2
 800f93e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f940:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f942:	2b00      	cmp	r3, #0
 800f944:	d105      	bne.n	800f952 <ip4_frag+0x10a>
        poff = 0;
 800f946:	2300      	movs	r3, #0
 800f948:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	60fb      	str	r3, [r7, #12]
        continue;
 800f950:	e03b      	b.n	800f9ca <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f952:	f7ff ff21 	bl	800f798 <ip_frag_alloc_pbuf_custom_ref>
 800f956:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d103      	bne.n	800f966 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800f95e:	6a38      	ldr	r0, [r7, #32]
 800f960:	f7f8 f998 	bl	8007c94 <pbuf_free>
        goto memerr;
 800f964:	e083      	b.n	800fa6e <ip4_frag+0x226>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f966:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f96c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f96e:	4413      	add	r3, r2
 800f970:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800f972:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f974:	9201      	str	r2, [sp, #4]
 800f976:	9300      	str	r3, [sp, #0]
 800f978:	4603      	mov	r3, r0
 800f97a:	2202      	movs	r2, #2
 800f97c:	2004      	movs	r0, #4
 800f97e:	f7f7 ffab 	bl	80078d8 <pbuf_alloced_custom>
 800f982:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d106      	bne.n	800f998 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f98a:	6978      	ldr	r0, [r7, #20]
 800f98c:	f7ff ff0c 	bl	800f7a8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f990:	6a38      	ldr	r0, [r7, #32]
 800f992:	f7f8 f97f 	bl	8007c94 <pbuf_free>
        goto memerr;
 800f996:	e06a      	b.n	800fa6e <ip4_frag+0x226>
      }
      pbuf_ref(p);
 800f998:	68f8      	ldr	r0, [r7, #12]
 800f99a:	f7f8 fa25 	bl	8007de8 <pbuf_ref>
      pcr->original = p;
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	68fa      	ldr	r2, [r7, #12]
 800f9a2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	4a3a      	ldr	r2, [pc, #232]	; (800fa90 <ip4_frag+0x248>)
 800f9a8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f9aa:	6939      	ldr	r1, [r7, #16]
 800f9ac:	6a38      	ldr	r0, [r7, #32]
 800f9ae:	f7f8 fa3d 	bl	8007e2c <pbuf_cat>
      left_to_copy -= newpbuflen;
 800f9b2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800f9b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f9b6:	1ad3      	subs	r3, r2, r3
 800f9b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800f9ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d004      	beq.n	800f9ca <ip4_frag+0x182>
        poff = 0;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f9ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d1ac      	bne.n	800f92a <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800f9d0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f9d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f9d4:	4413      	add	r3, r2
 800f9d6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f9dc:	f1a3 0213 	sub.w	r2, r3, #19
 800f9e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	bfcc      	ite	gt
 800f9e6:	2301      	movgt	r3, #1
 800f9e8:	2300      	movle	r3, #0
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f9ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f9f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f9f4:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800f9f6:	69fb      	ldr	r3, [r7, #28]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d103      	bne.n	800fa04 <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 800f9fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f9fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fa02:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fa04:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7f6 ff73 	bl	80068f2 <lwip_htons>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	461a      	mov	r2, r3
 800fa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa12:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800fa14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fa16:	3314      	adds	r3, #20
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7f6 ff69 	bl	80068f2 <lwip_htons>
 800fa20:	4603      	mov	r3, r0
 800fa22:	461a      	mov	r2, r3
 800fa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa26:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fa28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	729a      	strb	r2, [r3, #10]
 800fa2e:	2200      	movs	r2, #0
 800fa30:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	695b      	ldr	r3, [r3, #20]
 800fa36:	687a      	ldr	r2, [r7, #4]
 800fa38:	6a39      	ldr	r1, [r7, #32]
 800fa3a:	68b8      	ldr	r0, [r7, #8]
 800fa3c:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 800fa3e:	4b15      	ldr	r3, [pc, #84]	; (800fa94 <ip4_frag+0x24c>)
 800fa40:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800fa42:	3301      	adds	r3, #1
 800fa44:	b29a      	uxth	r2, r3
 800fa46:	4b13      	ldr	r3, [pc, #76]	; (800fa94 <ip4_frag+0x24c>)
 800fa48:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fa4a:	6a38      	ldr	r0, [r7, #32]
 800fa4c:	f7f8 f922 	bl	8007c94 <pbuf_free>
    left -= fragsize;
 800fa50:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fa52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fa54:	1ad3      	subs	r3, r2, r3
 800fa56:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800fa58:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800fa5a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fa5c:	4413      	add	r3, r2
 800fa5e:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800fa60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	f47f af38 	bne.w	800f8d8 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	e002      	b.n	800fa72 <ip4_frag+0x22a>
      goto memerr;
 800fa6c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fa6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3740      	adds	r7, #64	; 0x40
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	08017e18 	.word	0x08017e18
 800fa80:	08017fa4 	.word	0x08017fa4
 800fa84:	08017e60 	.word	0x08017e60
 800fa88:	08017fcc 	.word	0x08017fcc
 800fa8c:	08017fe8 	.word	0x08017fe8
 800fa90:	0800f7e1 	.word	0x0800f7e1
 800fa94:	20006e84 	.word	0x20006e84

0800fa98 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b086      	sub	sp, #24
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800faa2:	230e      	movs	r3, #14
 800faa4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	895b      	ldrh	r3, [r3, #10]
 800faaa:	2b0e      	cmp	r3, #14
 800faac:	d80c      	bhi.n	800fac8 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 800faae:	4b56      	ldr	r3, [pc, #344]	; (800fc08 <ethernet_input+0x170>)
 800fab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fab2:	3301      	adds	r3, #1
 800fab4:	b29a      	uxth	r2, r3
 800fab6:	4b54      	ldr	r3, [pc, #336]	; (800fc08 <ethernet_input+0x170>)
 800fab8:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 800faba:	4b53      	ldr	r3, [pc, #332]	; (800fc08 <ethernet_input+0x170>)
 800fabc:	8bdb      	ldrh	r3, [r3, #30]
 800fabe:	3301      	adds	r3, #1
 800fac0:	b29a      	uxth	r2, r3
 800fac2:	4b51      	ldr	r3, [pc, #324]	; (800fc08 <ethernet_input+0x170>)
 800fac4:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 800fac6:	e096      	b.n	800fbf6 <ethernet_input+0x15e>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	7b1a      	ldrb	r2, [r3, #12]
 800fad2:	7b5b      	ldrb	r3, [r3, #13]
 800fad4:	021b      	lsls	r3, r3, #8
 800fad6:	4313      	orrs	r3, r2
 800fad8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	781b      	ldrb	r3, [r3, #0]
 800fade:	f003 0301 	and.w	r3, r3, #1
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d023      	beq.n	800fb2e <ethernet_input+0x96>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	781b      	ldrb	r3, [r3, #0]
 800faea:	2b01      	cmp	r3, #1
 800faec:	d10f      	bne.n	800fb0e <ethernet_input+0x76>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800faee:	693b      	ldr	r3, [r7, #16]
 800faf0:	785b      	ldrb	r3, [r3, #1]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d11b      	bne.n	800fb2e <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fafa:	2b5e      	cmp	r3, #94	; 0x5e
 800fafc:	d117      	bne.n	800fb2e <ethernet_input+0x96>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	7b5b      	ldrb	r3, [r3, #13]
 800fb02:	f043 0310 	orr.w	r3, r3, #16
 800fb06:	b2da      	uxtb	r2, r3
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	735a      	strb	r2, [r3, #13]
 800fb0c:	e00f      	b.n	800fb2e <ethernet_input+0x96>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	2206      	movs	r2, #6
 800fb12:	493e      	ldr	r1, [pc, #248]	; (800fc0c <ethernet_input+0x174>)
 800fb14:	4618      	mov	r0, r3
 800fb16:	f001 ff73 	bl	8011a00 <memcmp>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d106      	bne.n	800fb2e <ethernet_input+0x96>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	7b5b      	ldrb	r3, [r3, #13]
 800fb24:	f043 0308 	orr.w	r3, r3, #8
 800fb28:	b2da      	uxtb	r2, r3
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800fb2e:	89fb      	ldrh	r3, [r7, #14]
 800fb30:	2b08      	cmp	r3, #8
 800fb32:	d003      	beq.n	800fb3c <ethernet_input+0xa4>
 800fb34:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800fb38:	d01e      	beq.n	800fb78 <ethernet_input+0xe0>
 800fb3a:	e048      	b.n	800fbce <ethernet_input+0x136>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fb42:	f003 0308 	and.w	r3, r3, #8
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d050      	beq.n	800fbec <ethernet_input+0x154>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	895b      	ldrh	r3, [r3, #10]
 800fb4e:	461a      	mov	r2, r3
 800fb50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fb54:	429a      	cmp	r2, r3
 800fb56:	db4b      	blt.n	800fbf0 <ethernet_input+0x158>
 800fb58:	8afb      	ldrh	r3, [r7, #22]
 800fb5a:	425b      	negs	r3, r3
 800fb5c:	b29b      	uxth	r3, r3
 800fb5e:	b21b      	sxth	r3, r3
 800fb60:	4619      	mov	r1, r3
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f7f8 f872 	bl	8007c4c <pbuf_header>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d140      	bne.n	800fbf0 <ethernet_input+0x158>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 800fb6e:	6839      	ldr	r1, [r7, #0]
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f7fe fedd 	bl	800e930 <ip4_input>
      }
      break;
 800fb76:	e037      	b.n	800fbe8 <ethernet_input+0x150>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fb7e:	f003 0308 	and.w	r3, r3, #8
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d036      	beq.n	800fbf4 <ethernet_input+0x15c>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	895b      	ldrh	r3, [r3, #10]
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fb90:	429a      	cmp	r2, r3
 800fb92:	db0a      	blt.n	800fbaa <ethernet_input+0x112>
 800fb94:	8afb      	ldrh	r3, [r7, #22]
 800fb96:	425b      	negs	r3, r3
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	b21b      	sxth	r3, r3
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f7f8 f854 	bl	8007c4c <pbuf_header>
 800fba4:	4603      	mov	r3, r0
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d00c      	beq.n	800fbc4 <ethernet_input+0x12c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
          ("ethernet_input: ARP response packet dropped, too short (%"S16_F"/%"S16_F")\n",
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 800fbaa:	4b17      	ldr	r3, [pc, #92]	; (800fc08 <ethernet_input+0x170>)
 800fbac:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800fbae:	3301      	adds	r3, #1
 800fbb0:	b29a      	uxth	r2, r3
 800fbb2:	4b15      	ldr	r3, [pc, #84]	; (800fc08 <ethernet_input+0x170>)
 800fbb4:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 800fbb6:	4b14      	ldr	r3, [pc, #80]	; (800fc08 <ethernet_input+0x170>)
 800fbb8:	8bdb      	ldrh	r3, [r3, #30]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	b29a      	uxth	r2, r3
 800fbbe:	4b12      	ldr	r3, [pc, #72]	; (800fc08 <ethernet_input+0x170>)
 800fbc0:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 800fbc2:	e018      	b.n	800fbf6 <ethernet_input+0x15e>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 800fbc4:	6839      	ldr	r1, [r7, #0]
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f7fe f816 	bl	800dbf8 <etharp_input>
      }
      break;
 800fbcc:	e00c      	b.n	800fbe8 <ethernet_input+0x150>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 800fbce:	4b0e      	ldr	r3, [pc, #56]	; (800fc08 <ethernet_input+0x170>)
 800fbd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	b29a      	uxth	r2, r3
 800fbd6:	4b0c      	ldr	r3, [pc, #48]	; (800fc08 <ethernet_input+0x170>)
 800fbd8:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 800fbda:	4b0b      	ldr	r3, [pc, #44]	; (800fc08 <ethernet_input+0x170>)
 800fbdc:	8bdb      	ldrh	r3, [r3, #30]
 800fbde:	3301      	adds	r3, #1
 800fbe0:	b29a      	uxth	r2, r3
 800fbe2:	4b09      	ldr	r3, [pc, #36]	; (800fc08 <ethernet_input+0x170>)
 800fbe4:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800fbe6:	e006      	b.n	800fbf6 <ethernet_input+0x15e>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	e008      	b.n	800fbfe <ethernet_input+0x166>
        goto free_and_return;
 800fbec:	bf00      	nop
 800fbee:	e002      	b.n	800fbf6 <ethernet_input+0x15e>
        goto free_and_return;
 800fbf0:	bf00      	nop
 800fbf2:	e000      	b.n	800fbf6 <ethernet_input+0x15e>
        goto free_and_return;
 800fbf4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f7f8 f84c 	bl	8007c94 <pbuf_free>
  return ERR_OK;
 800fbfc:	2300      	movs	r3, #0
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3718      	adds	r7, #24
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	20006e84 	.word	0x20006e84
 800fc0c:	080181ac 	.word	0x080181ac

0800fc10 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b086      	sub	sp, #24
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	60f8      	str	r0, [r7, #12]
 800fc18:	60b9      	str	r1, [r7, #8]
 800fc1a:	607a      	str	r2, [r7, #4]
 800fc1c:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fc1e:	8c3b      	ldrh	r3, [r7, #32]
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7f6 fe66 	bl	80068f2 <lwip_htons>
 800fc26:	4603      	mov	r3, r0
 800fc28:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800fc2a:	210e      	movs	r1, #14
 800fc2c:	68b8      	ldr	r0, [r7, #8]
 800fc2e:	f7f8 f80d 	bl	8007c4c <pbuf_header>
 800fc32:	4603      	mov	r3, r0
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d125      	bne.n	800fc84 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	8afa      	ldrh	r2, [r7, #22]
 800fc42:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	2206      	movs	r2, #6
 800fc48:	6839      	ldr	r1, [r7, #0]
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f001 fee8 	bl	8011a20 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	3306      	adds	r3, #6
 800fc54:	2206      	movs	r2, #6
 800fc56:	6879      	ldr	r1, [r7, #4]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f001 fee1 	bl	8011a20 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc64:	2b06      	cmp	r3, #6
 800fc66:	d006      	beq.n	800fc76 <ethernet_output+0x66>
 800fc68:	4b0d      	ldr	r3, [pc, #52]	; (800fca0 <ethernet_output+0x90>)
 800fc6a:	f240 122b 	movw	r2, #299	; 0x12b
 800fc6e:	490d      	ldr	r1, [pc, #52]	; (800fca4 <ethernet_output+0x94>)
 800fc70:	480d      	ldr	r0, [pc, #52]	; (800fca8 <ethernet_output+0x98>)
 800fc72:	f002 fd59 	bl	8012728 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	699b      	ldr	r3, [r3, #24]
 800fc7a:	68b9      	ldr	r1, [r7, #8]
 800fc7c:	68f8      	ldr	r0, [r7, #12]
 800fc7e:	4798      	blx	r3
 800fc80:	4603      	mov	r3, r0
 800fc82:	e008      	b.n	800fc96 <ethernet_output+0x86>
      goto pbuf_header_failed;
 800fc84:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 800fc86:	4b09      	ldr	r3, [pc, #36]	; (800fcac <ethernet_output+0x9c>)
 800fc88:	895b      	ldrh	r3, [r3, #10]
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	b29a      	uxth	r2, r3
 800fc8e:	4b07      	ldr	r3, [pc, #28]	; (800fcac <ethernet_output+0x9c>)
 800fc90:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 800fc92:	f06f 0301 	mvn.w	r3, #1
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3718      	adds	r7, #24
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}
 800fc9e:	bf00      	nop
 800fca0:	08018008 	.word	0x08018008
 800fca4:	08018040 	.word	0x08018040
 800fca8:	08018074 	.word	0x08018074
 800fcac:	20006e84 	.word	0x20006e84

0800fcb0 <cos>:
 800fcb0:	b530      	push	{r4, r5, lr}
 800fcb2:	4a20      	ldr	r2, [pc, #128]	; (800fd34 <cos+0x84>)
 800fcb4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fcb8:	4293      	cmp	r3, r2
 800fcba:	b087      	sub	sp, #28
 800fcbc:	dc06      	bgt.n	800fccc <cos+0x1c>
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	b007      	add	sp, #28
 800fcc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fcc8:	f001 b886 	b.w	8010dd8 <__kernel_cos>
 800fccc:	4a1a      	ldr	r2, [pc, #104]	; (800fd38 <cos+0x88>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	dd05      	ble.n	800fcde <cos+0x2e>
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	f7f0 fa8d 	bl	80001f4 <__aeabi_dsub>
 800fcda:	b007      	add	sp, #28
 800fcdc:	bd30      	pop	{r4, r5, pc}
 800fcde:	aa02      	add	r2, sp, #8
 800fce0:	f000 fdd2 	bl	8010888 <__ieee754_rem_pio2>
 800fce4:	f000 0003 	and.w	r0, r0, #3
 800fce8:	2801      	cmp	r0, #1
 800fcea:	d009      	beq.n	800fd00 <cos+0x50>
 800fcec:	2802      	cmp	r0, #2
 800fcee:	d011      	beq.n	800fd14 <cos+0x64>
 800fcf0:	b9b8      	cbnz	r0, 800fd22 <cos+0x72>
 800fcf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fcf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fcfa:	f001 f86d 	bl	8010dd8 <__kernel_cos>
 800fcfe:	e7ec      	b.n	800fcda <cos+0x2a>
 800fd00:	9000      	str	r0, [sp, #0]
 800fd02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd0a:	f001 fc65 	bl	80115d8 <__kernel_sin>
 800fd0e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800fd12:	e7e2      	b.n	800fcda <cos+0x2a>
 800fd14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd1c:	f001 f85c 	bl	8010dd8 <__kernel_cos>
 800fd20:	e7f5      	b.n	800fd0e <cos+0x5e>
 800fd22:	2301      	movs	r3, #1
 800fd24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd28:	9300      	str	r3, [sp, #0]
 800fd2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd2e:	f001 fc53 	bl	80115d8 <__kernel_sin>
 800fd32:	e7d2      	b.n	800fcda <cos+0x2a>
 800fd34:	3fe921fb 	.word	0x3fe921fb
 800fd38:	7fefffff 	.word	0x7fefffff

0800fd3c <pow>:
 800fd3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd40:	4614      	mov	r4, r2
 800fd42:	461d      	mov	r5, r3
 800fd44:	4680      	mov	r8, r0
 800fd46:	4689      	mov	r9, r1
 800fd48:	f000 f886 	bl	800fe58 <__ieee754_pow>
 800fd4c:	4622      	mov	r2, r4
 800fd4e:	4606      	mov	r6, r0
 800fd50:	460f      	mov	r7, r1
 800fd52:	462b      	mov	r3, r5
 800fd54:	4620      	mov	r0, r4
 800fd56:	4629      	mov	r1, r5
 800fd58:	f7f0 fe9e 	bl	8000a98 <__aeabi_dcmpun>
 800fd5c:	bbc8      	cbnz	r0, 800fdd2 <pow+0x96>
 800fd5e:	2200      	movs	r2, #0
 800fd60:	2300      	movs	r3, #0
 800fd62:	4640      	mov	r0, r8
 800fd64:	4649      	mov	r1, r9
 800fd66:	f7f0 fe65 	bl	8000a34 <__aeabi_dcmpeq>
 800fd6a:	b1b8      	cbz	r0, 800fd9c <pow+0x60>
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	2300      	movs	r3, #0
 800fd70:	4620      	mov	r0, r4
 800fd72:	4629      	mov	r1, r5
 800fd74:	f7f0 fe5e 	bl	8000a34 <__aeabi_dcmpeq>
 800fd78:	2800      	cmp	r0, #0
 800fd7a:	d141      	bne.n	800fe00 <pow+0xc4>
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	4629      	mov	r1, r5
 800fd80:	f001 fd0f 	bl	80117a2 <finite>
 800fd84:	b328      	cbz	r0, 800fdd2 <pow+0x96>
 800fd86:	2200      	movs	r2, #0
 800fd88:	2300      	movs	r3, #0
 800fd8a:	4620      	mov	r0, r4
 800fd8c:	4629      	mov	r1, r5
 800fd8e:	f7f0 fe5b 	bl	8000a48 <__aeabi_dcmplt>
 800fd92:	b1f0      	cbz	r0, 800fdd2 <pow+0x96>
 800fd94:	f001 fe0a 	bl	80119ac <__errno>
 800fd98:	2322      	movs	r3, #34	; 0x22
 800fd9a:	e019      	b.n	800fdd0 <pow+0x94>
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	4639      	mov	r1, r7
 800fda0:	f001 fcff 	bl	80117a2 <finite>
 800fda4:	b9c8      	cbnz	r0, 800fdda <pow+0x9e>
 800fda6:	4640      	mov	r0, r8
 800fda8:	4649      	mov	r1, r9
 800fdaa:	f001 fcfa 	bl	80117a2 <finite>
 800fdae:	b1a0      	cbz	r0, 800fdda <pow+0x9e>
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	4629      	mov	r1, r5
 800fdb4:	f001 fcf5 	bl	80117a2 <finite>
 800fdb8:	b178      	cbz	r0, 800fdda <pow+0x9e>
 800fdba:	4632      	mov	r2, r6
 800fdbc:	463b      	mov	r3, r7
 800fdbe:	4630      	mov	r0, r6
 800fdc0:	4639      	mov	r1, r7
 800fdc2:	f7f0 fe69 	bl	8000a98 <__aeabi_dcmpun>
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	d0e4      	beq.n	800fd94 <pow+0x58>
 800fdca:	f001 fdef 	bl	80119ac <__errno>
 800fdce:	2321      	movs	r3, #33	; 0x21
 800fdd0:	6003      	str	r3, [r0, #0]
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	4639      	mov	r1, r7
 800fdd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdda:	2200      	movs	r2, #0
 800fddc:	2300      	movs	r3, #0
 800fdde:	4630      	mov	r0, r6
 800fde0:	4639      	mov	r1, r7
 800fde2:	f7f0 fe27 	bl	8000a34 <__aeabi_dcmpeq>
 800fde6:	2800      	cmp	r0, #0
 800fde8:	d0f3      	beq.n	800fdd2 <pow+0x96>
 800fdea:	4640      	mov	r0, r8
 800fdec:	4649      	mov	r1, r9
 800fdee:	f001 fcd8 	bl	80117a2 <finite>
 800fdf2:	2800      	cmp	r0, #0
 800fdf4:	d0ed      	beq.n	800fdd2 <pow+0x96>
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	4629      	mov	r1, r5
 800fdfa:	f001 fcd2 	bl	80117a2 <finite>
 800fdfe:	e7c8      	b.n	800fd92 <pow+0x56>
 800fe00:	2600      	movs	r6, #0
 800fe02:	4f01      	ldr	r7, [pc, #4]	; (800fe08 <pow+0xcc>)
 800fe04:	e7e5      	b.n	800fdd2 <pow+0x96>
 800fe06:	bf00      	nop
 800fe08:	3ff00000 	.word	0x3ff00000

0800fe0c <sqrt>:
 800fe0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe0e:	4606      	mov	r6, r0
 800fe10:	460f      	mov	r7, r1
 800fe12:	f000 ff31 	bl	8010c78 <__ieee754_sqrt>
 800fe16:	4632      	mov	r2, r6
 800fe18:	4604      	mov	r4, r0
 800fe1a:	460d      	mov	r5, r1
 800fe1c:	463b      	mov	r3, r7
 800fe1e:	4630      	mov	r0, r6
 800fe20:	4639      	mov	r1, r7
 800fe22:	f7f0 fe39 	bl	8000a98 <__aeabi_dcmpun>
 800fe26:	b990      	cbnz	r0, 800fe4e <sqrt+0x42>
 800fe28:	2200      	movs	r2, #0
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	4630      	mov	r0, r6
 800fe2e:	4639      	mov	r1, r7
 800fe30:	f7f0 fe0a 	bl	8000a48 <__aeabi_dcmplt>
 800fe34:	b158      	cbz	r0, 800fe4e <sqrt+0x42>
 800fe36:	f001 fdb9 	bl	80119ac <__errno>
 800fe3a:	2321      	movs	r3, #33	; 0x21
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	6003      	str	r3, [r0, #0]
 800fe40:	2300      	movs	r3, #0
 800fe42:	4610      	mov	r0, r2
 800fe44:	4619      	mov	r1, r3
 800fe46:	f7f0 fcb7 	bl	80007b8 <__aeabi_ddiv>
 800fe4a:	4604      	mov	r4, r0
 800fe4c:	460d      	mov	r5, r1
 800fe4e:	4620      	mov	r0, r4
 800fe50:	4629      	mov	r1, r5
 800fe52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe54:	0000      	movs	r0, r0
	...

0800fe58 <__ieee754_pow>:
 800fe58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe5c:	b093      	sub	sp, #76	; 0x4c
 800fe5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fe62:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800fe66:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800fe6a:	4689      	mov	r9, r1
 800fe6c:	ea56 0102 	orrs.w	r1, r6, r2
 800fe70:	4680      	mov	r8, r0
 800fe72:	d111      	bne.n	800fe98 <__ieee754_pow+0x40>
 800fe74:	1803      	adds	r3, r0, r0
 800fe76:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800fe7a:	4152      	adcs	r2, r2
 800fe7c:	4299      	cmp	r1, r3
 800fe7e:	4b82      	ldr	r3, [pc, #520]	; (8010088 <__ieee754_pow+0x230>)
 800fe80:	4193      	sbcs	r3, r2
 800fe82:	f080 84b9 	bcs.w	80107f8 <__ieee754_pow+0x9a0>
 800fe86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fe8a:	4640      	mov	r0, r8
 800fe8c:	4649      	mov	r1, r9
 800fe8e:	f7f0 f9b3 	bl	80001f8 <__adddf3>
 800fe92:	4683      	mov	fp, r0
 800fe94:	468c      	mov	ip, r1
 800fe96:	e06f      	b.n	800ff78 <__ieee754_pow+0x120>
 800fe98:	4b7c      	ldr	r3, [pc, #496]	; (801008c <__ieee754_pow+0x234>)
 800fe9a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800fe9e:	429c      	cmp	r4, r3
 800fea0:	464d      	mov	r5, r9
 800fea2:	4682      	mov	sl, r0
 800fea4:	dc06      	bgt.n	800feb4 <__ieee754_pow+0x5c>
 800fea6:	d101      	bne.n	800feac <__ieee754_pow+0x54>
 800fea8:	2800      	cmp	r0, #0
 800feaa:	d1ec      	bne.n	800fe86 <__ieee754_pow+0x2e>
 800feac:	429e      	cmp	r6, r3
 800feae:	dc01      	bgt.n	800feb4 <__ieee754_pow+0x5c>
 800feb0:	d10f      	bne.n	800fed2 <__ieee754_pow+0x7a>
 800feb2:	b172      	cbz	r2, 800fed2 <__ieee754_pow+0x7a>
 800feb4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800feb8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800febc:	ea55 050a 	orrs.w	r5, r5, sl
 800fec0:	d1e1      	bne.n	800fe86 <__ieee754_pow+0x2e>
 800fec2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fec6:	18db      	adds	r3, r3, r3
 800fec8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800fecc:	4152      	adcs	r2, r2
 800fece:	429d      	cmp	r5, r3
 800fed0:	e7d5      	b.n	800fe7e <__ieee754_pow+0x26>
 800fed2:	2d00      	cmp	r5, #0
 800fed4:	da39      	bge.n	800ff4a <__ieee754_pow+0xf2>
 800fed6:	4b6e      	ldr	r3, [pc, #440]	; (8010090 <__ieee754_pow+0x238>)
 800fed8:	429e      	cmp	r6, r3
 800feda:	dc52      	bgt.n	800ff82 <__ieee754_pow+0x12a>
 800fedc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800fee0:	429e      	cmp	r6, r3
 800fee2:	f340 849c 	ble.w	801081e <__ieee754_pow+0x9c6>
 800fee6:	1533      	asrs	r3, r6, #20
 800fee8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800feec:	2b14      	cmp	r3, #20
 800feee:	dd0f      	ble.n	800ff10 <__ieee754_pow+0xb8>
 800fef0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800fef4:	fa22 f103 	lsr.w	r1, r2, r3
 800fef8:	fa01 f303 	lsl.w	r3, r1, r3
 800fefc:	4293      	cmp	r3, r2
 800fefe:	f040 848e 	bne.w	801081e <__ieee754_pow+0x9c6>
 800ff02:	f001 0101 	and.w	r1, r1, #1
 800ff06:	f1c1 0302 	rsb	r3, r1, #2
 800ff0a:	9300      	str	r3, [sp, #0]
 800ff0c:	b182      	cbz	r2, 800ff30 <__ieee754_pow+0xd8>
 800ff0e:	e05d      	b.n	800ffcc <__ieee754_pow+0x174>
 800ff10:	2a00      	cmp	r2, #0
 800ff12:	d159      	bne.n	800ffc8 <__ieee754_pow+0x170>
 800ff14:	f1c3 0314 	rsb	r3, r3, #20
 800ff18:	fa46 f103 	asr.w	r1, r6, r3
 800ff1c:	fa01 f303 	lsl.w	r3, r1, r3
 800ff20:	42b3      	cmp	r3, r6
 800ff22:	f040 8479 	bne.w	8010818 <__ieee754_pow+0x9c0>
 800ff26:	f001 0101 	and.w	r1, r1, #1
 800ff2a:	f1c1 0302 	rsb	r3, r1, #2
 800ff2e:	9300      	str	r3, [sp, #0]
 800ff30:	4b58      	ldr	r3, [pc, #352]	; (8010094 <__ieee754_pow+0x23c>)
 800ff32:	429e      	cmp	r6, r3
 800ff34:	d132      	bne.n	800ff9c <__ieee754_pow+0x144>
 800ff36:	2f00      	cmp	r7, #0
 800ff38:	f280 846a 	bge.w	8010810 <__ieee754_pow+0x9b8>
 800ff3c:	4642      	mov	r2, r8
 800ff3e:	464b      	mov	r3, r9
 800ff40:	2000      	movs	r0, #0
 800ff42:	4954      	ldr	r1, [pc, #336]	; (8010094 <__ieee754_pow+0x23c>)
 800ff44:	f7f0 fc38 	bl	80007b8 <__aeabi_ddiv>
 800ff48:	e7a3      	b.n	800fe92 <__ieee754_pow+0x3a>
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	9300      	str	r3, [sp, #0]
 800ff4e:	2a00      	cmp	r2, #0
 800ff50:	d13c      	bne.n	800ffcc <__ieee754_pow+0x174>
 800ff52:	4b4e      	ldr	r3, [pc, #312]	; (801008c <__ieee754_pow+0x234>)
 800ff54:	429e      	cmp	r6, r3
 800ff56:	d1eb      	bne.n	800ff30 <__ieee754_pow+0xd8>
 800ff58:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ff5c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ff60:	ea53 030a 	orrs.w	r3, r3, sl
 800ff64:	f000 8448 	beq.w	80107f8 <__ieee754_pow+0x9a0>
 800ff68:	4b4b      	ldr	r3, [pc, #300]	; (8010098 <__ieee754_pow+0x240>)
 800ff6a:	429c      	cmp	r4, r3
 800ff6c:	dd0b      	ble.n	800ff86 <__ieee754_pow+0x12e>
 800ff6e:	2f00      	cmp	r7, #0
 800ff70:	f2c0 8448 	blt.w	8010804 <__ieee754_pow+0x9ac>
 800ff74:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800ff78:	4658      	mov	r0, fp
 800ff7a:	4661      	mov	r1, ip
 800ff7c:	b013      	add	sp, #76	; 0x4c
 800ff7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff82:	2302      	movs	r3, #2
 800ff84:	e7e2      	b.n	800ff4c <__ieee754_pow+0xf4>
 800ff86:	2f00      	cmp	r7, #0
 800ff88:	f04f 0b00 	mov.w	fp, #0
 800ff8c:	f04f 0c00 	mov.w	ip, #0
 800ff90:	daf2      	bge.n	800ff78 <__ieee754_pow+0x120>
 800ff92:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800ff96:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800ff9a:	e7ed      	b.n	800ff78 <__ieee754_pow+0x120>
 800ff9c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800ffa0:	d106      	bne.n	800ffb0 <__ieee754_pow+0x158>
 800ffa2:	4642      	mov	r2, r8
 800ffa4:	464b      	mov	r3, r9
 800ffa6:	4640      	mov	r0, r8
 800ffa8:	4649      	mov	r1, r9
 800ffaa:	f7f0 fadb 	bl	8000564 <__aeabi_dmul>
 800ffae:	e770      	b.n	800fe92 <__ieee754_pow+0x3a>
 800ffb0:	4b3a      	ldr	r3, [pc, #232]	; (801009c <__ieee754_pow+0x244>)
 800ffb2:	429f      	cmp	r7, r3
 800ffb4:	d10a      	bne.n	800ffcc <__ieee754_pow+0x174>
 800ffb6:	2d00      	cmp	r5, #0
 800ffb8:	db08      	blt.n	800ffcc <__ieee754_pow+0x174>
 800ffba:	4640      	mov	r0, r8
 800ffbc:	4649      	mov	r1, r9
 800ffbe:	b013      	add	sp, #76	; 0x4c
 800ffc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffc4:	f000 be58 	b.w	8010c78 <__ieee754_sqrt>
 800ffc8:	2300      	movs	r3, #0
 800ffca:	9300      	str	r3, [sp, #0]
 800ffcc:	4640      	mov	r0, r8
 800ffce:	4649      	mov	r1, r9
 800ffd0:	f001 fbe4 	bl	801179c <fabs>
 800ffd4:	4683      	mov	fp, r0
 800ffd6:	468c      	mov	ip, r1
 800ffd8:	f1ba 0f00 	cmp.w	sl, #0
 800ffdc:	d128      	bne.n	8010030 <__ieee754_pow+0x1d8>
 800ffde:	b124      	cbz	r4, 800ffea <__ieee754_pow+0x192>
 800ffe0:	4b2c      	ldr	r3, [pc, #176]	; (8010094 <__ieee754_pow+0x23c>)
 800ffe2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d122      	bne.n	8010030 <__ieee754_pow+0x1d8>
 800ffea:	2f00      	cmp	r7, #0
 800ffec:	da07      	bge.n	800fffe <__ieee754_pow+0x1a6>
 800ffee:	465a      	mov	r2, fp
 800fff0:	4663      	mov	r3, ip
 800fff2:	2000      	movs	r0, #0
 800fff4:	4927      	ldr	r1, [pc, #156]	; (8010094 <__ieee754_pow+0x23c>)
 800fff6:	f7f0 fbdf 	bl	80007b8 <__aeabi_ddiv>
 800fffa:	4683      	mov	fp, r0
 800fffc:	468c      	mov	ip, r1
 800fffe:	2d00      	cmp	r5, #0
 8010000:	daba      	bge.n	800ff78 <__ieee754_pow+0x120>
 8010002:	9b00      	ldr	r3, [sp, #0]
 8010004:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010008:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801000c:	4323      	orrs	r3, r4
 801000e:	d108      	bne.n	8010022 <__ieee754_pow+0x1ca>
 8010010:	465a      	mov	r2, fp
 8010012:	4663      	mov	r3, ip
 8010014:	4658      	mov	r0, fp
 8010016:	4661      	mov	r1, ip
 8010018:	f7f0 f8ec 	bl	80001f4 <__aeabi_dsub>
 801001c:	4602      	mov	r2, r0
 801001e:	460b      	mov	r3, r1
 8010020:	e790      	b.n	800ff44 <__ieee754_pow+0xec>
 8010022:	9b00      	ldr	r3, [sp, #0]
 8010024:	2b01      	cmp	r3, #1
 8010026:	d1a7      	bne.n	800ff78 <__ieee754_pow+0x120>
 8010028:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 801002c:	469c      	mov	ip, r3
 801002e:	e7a3      	b.n	800ff78 <__ieee754_pow+0x120>
 8010030:	0feb      	lsrs	r3, r5, #31
 8010032:	3b01      	subs	r3, #1
 8010034:	930c      	str	r3, [sp, #48]	; 0x30
 8010036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010038:	9b00      	ldr	r3, [sp, #0]
 801003a:	4313      	orrs	r3, r2
 801003c:	d104      	bne.n	8010048 <__ieee754_pow+0x1f0>
 801003e:	4642      	mov	r2, r8
 8010040:	464b      	mov	r3, r9
 8010042:	4640      	mov	r0, r8
 8010044:	4649      	mov	r1, r9
 8010046:	e7e7      	b.n	8010018 <__ieee754_pow+0x1c0>
 8010048:	4b15      	ldr	r3, [pc, #84]	; (80100a0 <__ieee754_pow+0x248>)
 801004a:	429e      	cmp	r6, r3
 801004c:	f340 80f6 	ble.w	801023c <__ieee754_pow+0x3e4>
 8010050:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010054:	429e      	cmp	r6, r3
 8010056:	4b10      	ldr	r3, [pc, #64]	; (8010098 <__ieee754_pow+0x240>)
 8010058:	dd09      	ble.n	801006e <__ieee754_pow+0x216>
 801005a:	429c      	cmp	r4, r3
 801005c:	dc0c      	bgt.n	8010078 <__ieee754_pow+0x220>
 801005e:	2f00      	cmp	r7, #0
 8010060:	da0c      	bge.n	801007c <__ieee754_pow+0x224>
 8010062:	2000      	movs	r0, #0
 8010064:	b013      	add	sp, #76	; 0x4c
 8010066:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801006a:	f001 bb92 	b.w	8011792 <__math_oflow>
 801006e:	429c      	cmp	r4, r3
 8010070:	dbf5      	blt.n	801005e <__ieee754_pow+0x206>
 8010072:	4b08      	ldr	r3, [pc, #32]	; (8010094 <__ieee754_pow+0x23c>)
 8010074:	429c      	cmp	r4, r3
 8010076:	dd15      	ble.n	80100a4 <__ieee754_pow+0x24c>
 8010078:	2f00      	cmp	r7, #0
 801007a:	dcf2      	bgt.n	8010062 <__ieee754_pow+0x20a>
 801007c:	2000      	movs	r0, #0
 801007e:	b013      	add	sp, #76	; 0x4c
 8010080:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010084:	f001 bb80 	b.w	8011788 <__math_uflow>
 8010088:	fff00000 	.word	0xfff00000
 801008c:	7ff00000 	.word	0x7ff00000
 8010090:	433fffff 	.word	0x433fffff
 8010094:	3ff00000 	.word	0x3ff00000
 8010098:	3fefffff 	.word	0x3fefffff
 801009c:	3fe00000 	.word	0x3fe00000
 80100a0:	41e00000 	.word	0x41e00000
 80100a4:	4661      	mov	r1, ip
 80100a6:	2200      	movs	r2, #0
 80100a8:	4658      	mov	r0, fp
 80100aa:	4b5f      	ldr	r3, [pc, #380]	; (8010228 <__ieee754_pow+0x3d0>)
 80100ac:	f7f0 f8a2 	bl	80001f4 <__aeabi_dsub>
 80100b0:	a355      	add	r3, pc, #340	; (adr r3, 8010208 <__ieee754_pow+0x3b0>)
 80100b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b6:	4604      	mov	r4, r0
 80100b8:	460d      	mov	r5, r1
 80100ba:	f7f0 fa53 	bl	8000564 <__aeabi_dmul>
 80100be:	a354      	add	r3, pc, #336	; (adr r3, 8010210 <__ieee754_pow+0x3b8>)
 80100c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c4:	4606      	mov	r6, r0
 80100c6:	460f      	mov	r7, r1
 80100c8:	4620      	mov	r0, r4
 80100ca:	4629      	mov	r1, r5
 80100cc:	f7f0 fa4a 	bl	8000564 <__aeabi_dmul>
 80100d0:	2200      	movs	r2, #0
 80100d2:	4682      	mov	sl, r0
 80100d4:	468b      	mov	fp, r1
 80100d6:	4620      	mov	r0, r4
 80100d8:	4629      	mov	r1, r5
 80100da:	4b54      	ldr	r3, [pc, #336]	; (801022c <__ieee754_pow+0x3d4>)
 80100dc:	f7f0 fa42 	bl	8000564 <__aeabi_dmul>
 80100e0:	4602      	mov	r2, r0
 80100e2:	460b      	mov	r3, r1
 80100e4:	a14c      	add	r1, pc, #304	; (adr r1, 8010218 <__ieee754_pow+0x3c0>)
 80100e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100ea:	f7f0 f883 	bl	80001f4 <__aeabi_dsub>
 80100ee:	4622      	mov	r2, r4
 80100f0:	462b      	mov	r3, r5
 80100f2:	f7f0 fa37 	bl	8000564 <__aeabi_dmul>
 80100f6:	4602      	mov	r2, r0
 80100f8:	460b      	mov	r3, r1
 80100fa:	2000      	movs	r0, #0
 80100fc:	494c      	ldr	r1, [pc, #304]	; (8010230 <__ieee754_pow+0x3d8>)
 80100fe:	f7f0 f879 	bl	80001f4 <__aeabi_dsub>
 8010102:	4622      	mov	r2, r4
 8010104:	462b      	mov	r3, r5
 8010106:	4680      	mov	r8, r0
 8010108:	4689      	mov	r9, r1
 801010a:	4620      	mov	r0, r4
 801010c:	4629      	mov	r1, r5
 801010e:	f7f0 fa29 	bl	8000564 <__aeabi_dmul>
 8010112:	4602      	mov	r2, r0
 8010114:	460b      	mov	r3, r1
 8010116:	4640      	mov	r0, r8
 8010118:	4649      	mov	r1, r9
 801011a:	f7f0 fa23 	bl	8000564 <__aeabi_dmul>
 801011e:	a340      	add	r3, pc, #256	; (adr r3, 8010220 <__ieee754_pow+0x3c8>)
 8010120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010124:	f7f0 fa1e 	bl	8000564 <__aeabi_dmul>
 8010128:	4602      	mov	r2, r0
 801012a:	460b      	mov	r3, r1
 801012c:	4650      	mov	r0, sl
 801012e:	4659      	mov	r1, fp
 8010130:	f7f0 f860 	bl	80001f4 <__aeabi_dsub>
 8010134:	f04f 0a00 	mov.w	sl, #0
 8010138:	4602      	mov	r2, r0
 801013a:	460b      	mov	r3, r1
 801013c:	4604      	mov	r4, r0
 801013e:	460d      	mov	r5, r1
 8010140:	4630      	mov	r0, r6
 8010142:	4639      	mov	r1, r7
 8010144:	f7f0 f858 	bl	80001f8 <__adddf3>
 8010148:	4632      	mov	r2, r6
 801014a:	463b      	mov	r3, r7
 801014c:	4650      	mov	r0, sl
 801014e:	468b      	mov	fp, r1
 8010150:	f7f0 f850 	bl	80001f4 <__aeabi_dsub>
 8010154:	4602      	mov	r2, r0
 8010156:	460b      	mov	r3, r1
 8010158:	4620      	mov	r0, r4
 801015a:	4629      	mov	r1, r5
 801015c:	f7f0 f84a 	bl	80001f4 <__aeabi_dsub>
 8010160:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010164:	9b00      	ldr	r3, [sp, #0]
 8010166:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010168:	3b01      	subs	r3, #1
 801016a:	4313      	orrs	r3, r2
 801016c:	f04f 0600 	mov.w	r6, #0
 8010170:	f04f 0200 	mov.w	r2, #0
 8010174:	bf0c      	ite	eq
 8010176:	4b2f      	ldreq	r3, [pc, #188]	; (8010234 <__ieee754_pow+0x3dc>)
 8010178:	4b2b      	ldrne	r3, [pc, #172]	; (8010228 <__ieee754_pow+0x3d0>)
 801017a:	4604      	mov	r4, r0
 801017c:	460d      	mov	r5, r1
 801017e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010182:	e9cd 2300 	strd	r2, r3, [sp]
 8010186:	4632      	mov	r2, r6
 8010188:	463b      	mov	r3, r7
 801018a:	f7f0 f833 	bl	80001f4 <__aeabi_dsub>
 801018e:	4652      	mov	r2, sl
 8010190:	465b      	mov	r3, fp
 8010192:	f7f0 f9e7 	bl	8000564 <__aeabi_dmul>
 8010196:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801019a:	4680      	mov	r8, r0
 801019c:	4689      	mov	r9, r1
 801019e:	4620      	mov	r0, r4
 80101a0:	4629      	mov	r1, r5
 80101a2:	f7f0 f9df 	bl	8000564 <__aeabi_dmul>
 80101a6:	4602      	mov	r2, r0
 80101a8:	460b      	mov	r3, r1
 80101aa:	4640      	mov	r0, r8
 80101ac:	4649      	mov	r1, r9
 80101ae:	f7f0 f823 	bl	80001f8 <__adddf3>
 80101b2:	4632      	mov	r2, r6
 80101b4:	463b      	mov	r3, r7
 80101b6:	4680      	mov	r8, r0
 80101b8:	4689      	mov	r9, r1
 80101ba:	4650      	mov	r0, sl
 80101bc:	4659      	mov	r1, fp
 80101be:	f7f0 f9d1 	bl	8000564 <__aeabi_dmul>
 80101c2:	4604      	mov	r4, r0
 80101c4:	460d      	mov	r5, r1
 80101c6:	460b      	mov	r3, r1
 80101c8:	4602      	mov	r2, r0
 80101ca:	4649      	mov	r1, r9
 80101cc:	4640      	mov	r0, r8
 80101ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80101d2:	f7f0 f811 	bl	80001f8 <__adddf3>
 80101d6:	4b18      	ldr	r3, [pc, #96]	; (8010238 <__ieee754_pow+0x3e0>)
 80101d8:	4682      	mov	sl, r0
 80101da:	4299      	cmp	r1, r3
 80101dc:	460f      	mov	r7, r1
 80101de:	460e      	mov	r6, r1
 80101e0:	f340 82e5 	ble.w	80107ae <__ieee754_pow+0x956>
 80101e4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80101e8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80101ec:	4303      	orrs	r3, r0
 80101ee:	f000 81df 	beq.w	80105b0 <__ieee754_pow+0x758>
 80101f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101f6:	2200      	movs	r2, #0
 80101f8:	2300      	movs	r3, #0
 80101fa:	f7f0 fc25 	bl	8000a48 <__aeabi_dcmplt>
 80101fe:	3800      	subs	r0, #0
 8010200:	bf18      	it	ne
 8010202:	2001      	movne	r0, #1
 8010204:	e72e      	b.n	8010064 <__ieee754_pow+0x20c>
 8010206:	bf00      	nop
 8010208:	60000000 	.word	0x60000000
 801020c:	3ff71547 	.word	0x3ff71547
 8010210:	f85ddf44 	.word	0xf85ddf44
 8010214:	3e54ae0b 	.word	0x3e54ae0b
 8010218:	55555555 	.word	0x55555555
 801021c:	3fd55555 	.word	0x3fd55555
 8010220:	652b82fe 	.word	0x652b82fe
 8010224:	3ff71547 	.word	0x3ff71547
 8010228:	3ff00000 	.word	0x3ff00000
 801022c:	3fd00000 	.word	0x3fd00000
 8010230:	3fe00000 	.word	0x3fe00000
 8010234:	bff00000 	.word	0xbff00000
 8010238:	408fffff 	.word	0x408fffff
 801023c:	4bd2      	ldr	r3, [pc, #840]	; (8010588 <__ieee754_pow+0x730>)
 801023e:	2200      	movs	r2, #0
 8010240:	402b      	ands	r3, r5
 8010242:	b943      	cbnz	r3, 8010256 <__ieee754_pow+0x3fe>
 8010244:	4658      	mov	r0, fp
 8010246:	4661      	mov	r1, ip
 8010248:	4bd0      	ldr	r3, [pc, #832]	; (801058c <__ieee754_pow+0x734>)
 801024a:	f7f0 f98b 	bl	8000564 <__aeabi_dmul>
 801024e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010252:	4683      	mov	fp, r0
 8010254:	460c      	mov	r4, r1
 8010256:	1523      	asrs	r3, r4, #20
 8010258:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801025c:	4413      	add	r3, r2
 801025e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010260:	4bcb      	ldr	r3, [pc, #812]	; (8010590 <__ieee754_pow+0x738>)
 8010262:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010266:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801026a:	429c      	cmp	r4, r3
 801026c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010270:	dd08      	ble.n	8010284 <__ieee754_pow+0x42c>
 8010272:	4bc8      	ldr	r3, [pc, #800]	; (8010594 <__ieee754_pow+0x73c>)
 8010274:	429c      	cmp	r4, r3
 8010276:	f340 8199 	ble.w	80105ac <__ieee754_pow+0x754>
 801027a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801027c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010280:	3301      	adds	r3, #1
 8010282:	930b      	str	r3, [sp, #44]	; 0x2c
 8010284:	2600      	movs	r6, #0
 8010286:	00f3      	lsls	r3, r6, #3
 8010288:	930d      	str	r3, [sp, #52]	; 0x34
 801028a:	4bc3      	ldr	r3, [pc, #780]	; (8010598 <__ieee754_pow+0x740>)
 801028c:	4658      	mov	r0, fp
 801028e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010292:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010296:	4629      	mov	r1, r5
 8010298:	461a      	mov	r2, r3
 801029a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 801029e:	4623      	mov	r3, r4
 80102a0:	f7ef ffa8 	bl	80001f4 <__aeabi_dsub>
 80102a4:	46da      	mov	sl, fp
 80102a6:	462b      	mov	r3, r5
 80102a8:	4652      	mov	r2, sl
 80102aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80102ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80102b2:	f7ef ffa1 	bl	80001f8 <__adddf3>
 80102b6:	4602      	mov	r2, r0
 80102b8:	460b      	mov	r3, r1
 80102ba:	2000      	movs	r0, #0
 80102bc:	49b7      	ldr	r1, [pc, #732]	; (801059c <__ieee754_pow+0x744>)
 80102be:	f7f0 fa7b 	bl	80007b8 <__aeabi_ddiv>
 80102c2:	4602      	mov	r2, r0
 80102c4:	460b      	mov	r3, r1
 80102c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80102ca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80102ce:	f7f0 f949 	bl	8000564 <__aeabi_dmul>
 80102d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80102d6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80102da:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80102de:	2300      	movs	r3, #0
 80102e0:	2200      	movs	r2, #0
 80102e2:	46ab      	mov	fp, r5
 80102e4:	106d      	asrs	r5, r5, #1
 80102e6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80102ea:	9304      	str	r3, [sp, #16]
 80102ec:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80102f0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80102f4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80102f8:	4640      	mov	r0, r8
 80102fa:	4649      	mov	r1, r9
 80102fc:	4614      	mov	r4, r2
 80102fe:	461d      	mov	r5, r3
 8010300:	f7f0 f930 	bl	8000564 <__aeabi_dmul>
 8010304:	4602      	mov	r2, r0
 8010306:	460b      	mov	r3, r1
 8010308:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801030c:	f7ef ff72 	bl	80001f4 <__aeabi_dsub>
 8010310:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010314:	4606      	mov	r6, r0
 8010316:	460f      	mov	r7, r1
 8010318:	4620      	mov	r0, r4
 801031a:	4629      	mov	r1, r5
 801031c:	f7ef ff6a 	bl	80001f4 <__aeabi_dsub>
 8010320:	4602      	mov	r2, r0
 8010322:	460b      	mov	r3, r1
 8010324:	4650      	mov	r0, sl
 8010326:	4659      	mov	r1, fp
 8010328:	f7ef ff64 	bl	80001f4 <__aeabi_dsub>
 801032c:	4642      	mov	r2, r8
 801032e:	464b      	mov	r3, r9
 8010330:	f7f0 f918 	bl	8000564 <__aeabi_dmul>
 8010334:	4602      	mov	r2, r0
 8010336:	460b      	mov	r3, r1
 8010338:	4630      	mov	r0, r6
 801033a:	4639      	mov	r1, r7
 801033c:	f7ef ff5a 	bl	80001f4 <__aeabi_dsub>
 8010340:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010344:	f7f0 f90e 	bl	8000564 <__aeabi_dmul>
 8010348:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801034c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010350:	4610      	mov	r0, r2
 8010352:	4619      	mov	r1, r3
 8010354:	f7f0 f906 	bl	8000564 <__aeabi_dmul>
 8010358:	a379      	add	r3, pc, #484	; (adr r3, 8010540 <__ieee754_pow+0x6e8>)
 801035a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801035e:	4604      	mov	r4, r0
 8010360:	460d      	mov	r5, r1
 8010362:	f7f0 f8ff 	bl	8000564 <__aeabi_dmul>
 8010366:	a378      	add	r3, pc, #480	; (adr r3, 8010548 <__ieee754_pow+0x6f0>)
 8010368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801036c:	f7ef ff44 	bl	80001f8 <__adddf3>
 8010370:	4622      	mov	r2, r4
 8010372:	462b      	mov	r3, r5
 8010374:	f7f0 f8f6 	bl	8000564 <__aeabi_dmul>
 8010378:	a375      	add	r3, pc, #468	; (adr r3, 8010550 <__ieee754_pow+0x6f8>)
 801037a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037e:	f7ef ff3b 	bl	80001f8 <__adddf3>
 8010382:	4622      	mov	r2, r4
 8010384:	462b      	mov	r3, r5
 8010386:	f7f0 f8ed 	bl	8000564 <__aeabi_dmul>
 801038a:	a373      	add	r3, pc, #460	; (adr r3, 8010558 <__ieee754_pow+0x700>)
 801038c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010390:	f7ef ff32 	bl	80001f8 <__adddf3>
 8010394:	4622      	mov	r2, r4
 8010396:	462b      	mov	r3, r5
 8010398:	f7f0 f8e4 	bl	8000564 <__aeabi_dmul>
 801039c:	a370      	add	r3, pc, #448	; (adr r3, 8010560 <__ieee754_pow+0x708>)
 801039e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a2:	f7ef ff29 	bl	80001f8 <__adddf3>
 80103a6:	4622      	mov	r2, r4
 80103a8:	462b      	mov	r3, r5
 80103aa:	f7f0 f8db 	bl	8000564 <__aeabi_dmul>
 80103ae:	a36e      	add	r3, pc, #440	; (adr r3, 8010568 <__ieee754_pow+0x710>)
 80103b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b4:	f7ef ff20 	bl	80001f8 <__adddf3>
 80103b8:	4622      	mov	r2, r4
 80103ba:	4606      	mov	r6, r0
 80103bc:	460f      	mov	r7, r1
 80103be:	462b      	mov	r3, r5
 80103c0:	4620      	mov	r0, r4
 80103c2:	4629      	mov	r1, r5
 80103c4:	f7f0 f8ce 	bl	8000564 <__aeabi_dmul>
 80103c8:	4602      	mov	r2, r0
 80103ca:	460b      	mov	r3, r1
 80103cc:	4630      	mov	r0, r6
 80103ce:	4639      	mov	r1, r7
 80103d0:	f7f0 f8c8 	bl	8000564 <__aeabi_dmul>
 80103d4:	4604      	mov	r4, r0
 80103d6:	460d      	mov	r5, r1
 80103d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80103dc:	4642      	mov	r2, r8
 80103de:	464b      	mov	r3, r9
 80103e0:	f7ef ff0a 	bl	80001f8 <__adddf3>
 80103e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80103e8:	f7f0 f8bc 	bl	8000564 <__aeabi_dmul>
 80103ec:	4622      	mov	r2, r4
 80103ee:	462b      	mov	r3, r5
 80103f0:	f7ef ff02 	bl	80001f8 <__adddf3>
 80103f4:	4642      	mov	r2, r8
 80103f6:	4606      	mov	r6, r0
 80103f8:	460f      	mov	r7, r1
 80103fa:	464b      	mov	r3, r9
 80103fc:	4640      	mov	r0, r8
 80103fe:	4649      	mov	r1, r9
 8010400:	f7f0 f8b0 	bl	8000564 <__aeabi_dmul>
 8010404:	2200      	movs	r2, #0
 8010406:	4b66      	ldr	r3, [pc, #408]	; (80105a0 <__ieee754_pow+0x748>)
 8010408:	4682      	mov	sl, r0
 801040a:	468b      	mov	fp, r1
 801040c:	f7ef fef4 	bl	80001f8 <__adddf3>
 8010410:	4632      	mov	r2, r6
 8010412:	463b      	mov	r3, r7
 8010414:	f7ef fef0 	bl	80001f8 <__adddf3>
 8010418:	2400      	movs	r4, #0
 801041a:	460d      	mov	r5, r1
 801041c:	4622      	mov	r2, r4
 801041e:	460b      	mov	r3, r1
 8010420:	4640      	mov	r0, r8
 8010422:	4649      	mov	r1, r9
 8010424:	f7f0 f89e 	bl	8000564 <__aeabi_dmul>
 8010428:	2200      	movs	r2, #0
 801042a:	4680      	mov	r8, r0
 801042c:	4689      	mov	r9, r1
 801042e:	4620      	mov	r0, r4
 8010430:	4629      	mov	r1, r5
 8010432:	4b5b      	ldr	r3, [pc, #364]	; (80105a0 <__ieee754_pow+0x748>)
 8010434:	f7ef fede 	bl	80001f4 <__aeabi_dsub>
 8010438:	4652      	mov	r2, sl
 801043a:	465b      	mov	r3, fp
 801043c:	f7ef feda 	bl	80001f4 <__aeabi_dsub>
 8010440:	4602      	mov	r2, r0
 8010442:	460b      	mov	r3, r1
 8010444:	4630      	mov	r0, r6
 8010446:	4639      	mov	r1, r7
 8010448:	f7ef fed4 	bl	80001f4 <__aeabi_dsub>
 801044c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010450:	f7f0 f888 	bl	8000564 <__aeabi_dmul>
 8010454:	4622      	mov	r2, r4
 8010456:	4606      	mov	r6, r0
 8010458:	460f      	mov	r7, r1
 801045a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801045e:	462b      	mov	r3, r5
 8010460:	f7f0 f880 	bl	8000564 <__aeabi_dmul>
 8010464:	4602      	mov	r2, r0
 8010466:	460b      	mov	r3, r1
 8010468:	4630      	mov	r0, r6
 801046a:	4639      	mov	r1, r7
 801046c:	f7ef fec4 	bl	80001f8 <__adddf3>
 8010470:	2400      	movs	r4, #0
 8010472:	4606      	mov	r6, r0
 8010474:	460f      	mov	r7, r1
 8010476:	4602      	mov	r2, r0
 8010478:	460b      	mov	r3, r1
 801047a:	4640      	mov	r0, r8
 801047c:	4649      	mov	r1, r9
 801047e:	f7ef febb 	bl	80001f8 <__adddf3>
 8010482:	a33b      	add	r3, pc, #236	; (adr r3, 8010570 <__ieee754_pow+0x718>)
 8010484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010488:	4620      	mov	r0, r4
 801048a:	460d      	mov	r5, r1
 801048c:	f7f0 f86a 	bl	8000564 <__aeabi_dmul>
 8010490:	4642      	mov	r2, r8
 8010492:	464b      	mov	r3, r9
 8010494:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010498:	4620      	mov	r0, r4
 801049a:	4629      	mov	r1, r5
 801049c:	f7ef feaa 	bl	80001f4 <__aeabi_dsub>
 80104a0:	4602      	mov	r2, r0
 80104a2:	460b      	mov	r3, r1
 80104a4:	4630      	mov	r0, r6
 80104a6:	4639      	mov	r1, r7
 80104a8:	f7ef fea4 	bl	80001f4 <__aeabi_dsub>
 80104ac:	a332      	add	r3, pc, #200	; (adr r3, 8010578 <__ieee754_pow+0x720>)
 80104ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b2:	f7f0 f857 	bl	8000564 <__aeabi_dmul>
 80104b6:	a332      	add	r3, pc, #200	; (adr r3, 8010580 <__ieee754_pow+0x728>)
 80104b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104bc:	4606      	mov	r6, r0
 80104be:	460f      	mov	r7, r1
 80104c0:	4620      	mov	r0, r4
 80104c2:	4629      	mov	r1, r5
 80104c4:	f7f0 f84e 	bl	8000564 <__aeabi_dmul>
 80104c8:	4602      	mov	r2, r0
 80104ca:	460b      	mov	r3, r1
 80104cc:	4630      	mov	r0, r6
 80104ce:	4639      	mov	r1, r7
 80104d0:	f7ef fe92 	bl	80001f8 <__adddf3>
 80104d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80104d6:	4b33      	ldr	r3, [pc, #204]	; (80105a4 <__ieee754_pow+0x74c>)
 80104d8:	f04f 0a00 	mov.w	sl, #0
 80104dc:	4413      	add	r3, r2
 80104de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e2:	f7ef fe89 	bl	80001f8 <__adddf3>
 80104e6:	4680      	mov	r8, r0
 80104e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80104ea:	4689      	mov	r9, r1
 80104ec:	f7ef ffd0 	bl	8000490 <__aeabi_i2d>
 80104f0:	4604      	mov	r4, r0
 80104f2:	460d      	mov	r5, r1
 80104f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80104f6:	4b2c      	ldr	r3, [pc, #176]	; (80105a8 <__ieee754_pow+0x750>)
 80104f8:	4413      	add	r3, r2
 80104fa:	e9d3 6700 	ldrd	r6, r7, [r3]
 80104fe:	4642      	mov	r2, r8
 8010500:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010504:	464b      	mov	r3, r9
 8010506:	f7ef fe77 	bl	80001f8 <__adddf3>
 801050a:	4632      	mov	r2, r6
 801050c:	463b      	mov	r3, r7
 801050e:	f7ef fe73 	bl	80001f8 <__adddf3>
 8010512:	4622      	mov	r2, r4
 8010514:	462b      	mov	r3, r5
 8010516:	f7ef fe6f 	bl	80001f8 <__adddf3>
 801051a:	4622      	mov	r2, r4
 801051c:	462b      	mov	r3, r5
 801051e:	4650      	mov	r0, sl
 8010520:	468b      	mov	fp, r1
 8010522:	f7ef fe67 	bl	80001f4 <__aeabi_dsub>
 8010526:	4632      	mov	r2, r6
 8010528:	463b      	mov	r3, r7
 801052a:	f7ef fe63 	bl	80001f4 <__aeabi_dsub>
 801052e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010532:	f7ef fe5f 	bl	80001f4 <__aeabi_dsub>
 8010536:	4602      	mov	r2, r0
 8010538:	460b      	mov	r3, r1
 801053a:	4640      	mov	r0, r8
 801053c:	4649      	mov	r1, r9
 801053e:	e60d      	b.n	801015c <__ieee754_pow+0x304>
 8010540:	4a454eef 	.word	0x4a454eef
 8010544:	3fca7e28 	.word	0x3fca7e28
 8010548:	93c9db65 	.word	0x93c9db65
 801054c:	3fcd864a 	.word	0x3fcd864a
 8010550:	a91d4101 	.word	0xa91d4101
 8010554:	3fd17460 	.word	0x3fd17460
 8010558:	518f264d 	.word	0x518f264d
 801055c:	3fd55555 	.word	0x3fd55555
 8010560:	db6fabff 	.word	0xdb6fabff
 8010564:	3fdb6db6 	.word	0x3fdb6db6
 8010568:	33333303 	.word	0x33333303
 801056c:	3fe33333 	.word	0x3fe33333
 8010570:	e0000000 	.word	0xe0000000
 8010574:	3feec709 	.word	0x3feec709
 8010578:	dc3a03fd 	.word	0xdc3a03fd
 801057c:	3feec709 	.word	0x3feec709
 8010580:	145b01f5 	.word	0x145b01f5
 8010584:	be3e2fe0 	.word	0xbe3e2fe0
 8010588:	7ff00000 	.word	0x7ff00000
 801058c:	43400000 	.word	0x43400000
 8010590:	0003988e 	.word	0x0003988e
 8010594:	000bb679 	.word	0x000bb679
 8010598:	080181c0 	.word	0x080181c0
 801059c:	3ff00000 	.word	0x3ff00000
 80105a0:	40080000 	.word	0x40080000
 80105a4:	080181e0 	.word	0x080181e0
 80105a8:	080181d0 	.word	0x080181d0
 80105ac:	2601      	movs	r6, #1
 80105ae:	e66a      	b.n	8010286 <__ieee754_pow+0x42e>
 80105b0:	a39d      	add	r3, pc, #628	; (adr r3, 8010828 <__ieee754_pow+0x9d0>)
 80105b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b6:	4640      	mov	r0, r8
 80105b8:	4649      	mov	r1, r9
 80105ba:	f7ef fe1d 	bl	80001f8 <__adddf3>
 80105be:	4622      	mov	r2, r4
 80105c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80105c4:	462b      	mov	r3, r5
 80105c6:	4650      	mov	r0, sl
 80105c8:	4639      	mov	r1, r7
 80105ca:	f7ef fe13 	bl	80001f4 <__aeabi_dsub>
 80105ce:	4602      	mov	r2, r0
 80105d0:	460b      	mov	r3, r1
 80105d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80105d6:	f7f0 fa55 	bl	8000a84 <__aeabi_dcmpgt>
 80105da:	2800      	cmp	r0, #0
 80105dc:	f47f ae09 	bne.w	80101f2 <__ieee754_pow+0x39a>
 80105e0:	4aa3      	ldr	r2, [pc, #652]	; (8010870 <__ieee754_pow+0xa18>)
 80105e2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80105e6:	4293      	cmp	r3, r2
 80105e8:	f340 8101 	ble.w	80107ee <__ieee754_pow+0x996>
 80105ec:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80105f0:	2000      	movs	r0, #0
 80105f2:	151b      	asrs	r3, r3, #20
 80105f4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80105f8:	fa4a f303 	asr.w	r3, sl, r3
 80105fc:	4433      	add	r3, r6
 80105fe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010602:	4f9c      	ldr	r7, [pc, #624]	; (8010874 <__ieee754_pow+0xa1c>)
 8010604:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010608:	4117      	asrs	r7, r2
 801060a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801060e:	ea23 0107 	bic.w	r1, r3, r7
 8010612:	f1c2 0214 	rsb	r2, r2, #20
 8010616:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801061a:	460b      	mov	r3, r1
 801061c:	fa4a fa02 	asr.w	sl, sl, r2
 8010620:	2e00      	cmp	r6, #0
 8010622:	4602      	mov	r2, r0
 8010624:	4629      	mov	r1, r5
 8010626:	4620      	mov	r0, r4
 8010628:	bfb8      	it	lt
 801062a:	f1ca 0a00 	rsblt	sl, sl, #0
 801062e:	f7ef fde1 	bl	80001f4 <__aeabi_dsub>
 8010632:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801063a:	2400      	movs	r4, #0
 801063c:	4642      	mov	r2, r8
 801063e:	464b      	mov	r3, r9
 8010640:	f7ef fdda 	bl	80001f8 <__adddf3>
 8010644:	a37a      	add	r3, pc, #488	; (adr r3, 8010830 <__ieee754_pow+0x9d8>)
 8010646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801064a:	4620      	mov	r0, r4
 801064c:	460d      	mov	r5, r1
 801064e:	f7ef ff89 	bl	8000564 <__aeabi_dmul>
 8010652:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010656:	4606      	mov	r6, r0
 8010658:	460f      	mov	r7, r1
 801065a:	4620      	mov	r0, r4
 801065c:	4629      	mov	r1, r5
 801065e:	f7ef fdc9 	bl	80001f4 <__aeabi_dsub>
 8010662:	4602      	mov	r2, r0
 8010664:	460b      	mov	r3, r1
 8010666:	4640      	mov	r0, r8
 8010668:	4649      	mov	r1, r9
 801066a:	f7ef fdc3 	bl	80001f4 <__aeabi_dsub>
 801066e:	a372      	add	r3, pc, #456	; (adr r3, 8010838 <__ieee754_pow+0x9e0>)
 8010670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010674:	f7ef ff76 	bl	8000564 <__aeabi_dmul>
 8010678:	a371      	add	r3, pc, #452	; (adr r3, 8010840 <__ieee754_pow+0x9e8>)
 801067a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801067e:	4680      	mov	r8, r0
 8010680:	4689      	mov	r9, r1
 8010682:	4620      	mov	r0, r4
 8010684:	4629      	mov	r1, r5
 8010686:	f7ef ff6d 	bl	8000564 <__aeabi_dmul>
 801068a:	4602      	mov	r2, r0
 801068c:	460b      	mov	r3, r1
 801068e:	4640      	mov	r0, r8
 8010690:	4649      	mov	r1, r9
 8010692:	f7ef fdb1 	bl	80001f8 <__adddf3>
 8010696:	4604      	mov	r4, r0
 8010698:	460d      	mov	r5, r1
 801069a:	4602      	mov	r2, r0
 801069c:	460b      	mov	r3, r1
 801069e:	4630      	mov	r0, r6
 80106a0:	4639      	mov	r1, r7
 80106a2:	f7ef fda9 	bl	80001f8 <__adddf3>
 80106a6:	4632      	mov	r2, r6
 80106a8:	463b      	mov	r3, r7
 80106aa:	4680      	mov	r8, r0
 80106ac:	4689      	mov	r9, r1
 80106ae:	f7ef fda1 	bl	80001f4 <__aeabi_dsub>
 80106b2:	4602      	mov	r2, r0
 80106b4:	460b      	mov	r3, r1
 80106b6:	4620      	mov	r0, r4
 80106b8:	4629      	mov	r1, r5
 80106ba:	f7ef fd9b 	bl	80001f4 <__aeabi_dsub>
 80106be:	4642      	mov	r2, r8
 80106c0:	4606      	mov	r6, r0
 80106c2:	460f      	mov	r7, r1
 80106c4:	464b      	mov	r3, r9
 80106c6:	4640      	mov	r0, r8
 80106c8:	4649      	mov	r1, r9
 80106ca:	f7ef ff4b 	bl	8000564 <__aeabi_dmul>
 80106ce:	a35e      	add	r3, pc, #376	; (adr r3, 8010848 <__ieee754_pow+0x9f0>)
 80106d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d4:	4604      	mov	r4, r0
 80106d6:	460d      	mov	r5, r1
 80106d8:	f7ef ff44 	bl	8000564 <__aeabi_dmul>
 80106dc:	a35c      	add	r3, pc, #368	; (adr r3, 8010850 <__ieee754_pow+0x9f8>)
 80106de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e2:	f7ef fd87 	bl	80001f4 <__aeabi_dsub>
 80106e6:	4622      	mov	r2, r4
 80106e8:	462b      	mov	r3, r5
 80106ea:	f7ef ff3b 	bl	8000564 <__aeabi_dmul>
 80106ee:	a35a      	add	r3, pc, #360	; (adr r3, 8010858 <__ieee754_pow+0xa00>)
 80106f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f4:	f7ef fd80 	bl	80001f8 <__adddf3>
 80106f8:	4622      	mov	r2, r4
 80106fa:	462b      	mov	r3, r5
 80106fc:	f7ef ff32 	bl	8000564 <__aeabi_dmul>
 8010700:	a357      	add	r3, pc, #348	; (adr r3, 8010860 <__ieee754_pow+0xa08>)
 8010702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010706:	f7ef fd75 	bl	80001f4 <__aeabi_dsub>
 801070a:	4622      	mov	r2, r4
 801070c:	462b      	mov	r3, r5
 801070e:	f7ef ff29 	bl	8000564 <__aeabi_dmul>
 8010712:	a355      	add	r3, pc, #340	; (adr r3, 8010868 <__ieee754_pow+0xa10>)
 8010714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010718:	f7ef fd6e 	bl	80001f8 <__adddf3>
 801071c:	4622      	mov	r2, r4
 801071e:	462b      	mov	r3, r5
 8010720:	f7ef ff20 	bl	8000564 <__aeabi_dmul>
 8010724:	4602      	mov	r2, r0
 8010726:	460b      	mov	r3, r1
 8010728:	4640      	mov	r0, r8
 801072a:	4649      	mov	r1, r9
 801072c:	f7ef fd62 	bl	80001f4 <__aeabi_dsub>
 8010730:	4604      	mov	r4, r0
 8010732:	460d      	mov	r5, r1
 8010734:	4602      	mov	r2, r0
 8010736:	460b      	mov	r3, r1
 8010738:	4640      	mov	r0, r8
 801073a:	4649      	mov	r1, r9
 801073c:	f7ef ff12 	bl	8000564 <__aeabi_dmul>
 8010740:	2200      	movs	r2, #0
 8010742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010746:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801074a:	4620      	mov	r0, r4
 801074c:	4629      	mov	r1, r5
 801074e:	f7ef fd51 	bl	80001f4 <__aeabi_dsub>
 8010752:	4602      	mov	r2, r0
 8010754:	460b      	mov	r3, r1
 8010756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801075a:	f7f0 f82d 	bl	80007b8 <__aeabi_ddiv>
 801075e:	4632      	mov	r2, r6
 8010760:	4604      	mov	r4, r0
 8010762:	460d      	mov	r5, r1
 8010764:	463b      	mov	r3, r7
 8010766:	4640      	mov	r0, r8
 8010768:	4649      	mov	r1, r9
 801076a:	f7ef fefb 	bl	8000564 <__aeabi_dmul>
 801076e:	4632      	mov	r2, r6
 8010770:	463b      	mov	r3, r7
 8010772:	f7ef fd41 	bl	80001f8 <__adddf3>
 8010776:	4602      	mov	r2, r0
 8010778:	460b      	mov	r3, r1
 801077a:	4620      	mov	r0, r4
 801077c:	4629      	mov	r1, r5
 801077e:	f7ef fd39 	bl	80001f4 <__aeabi_dsub>
 8010782:	4642      	mov	r2, r8
 8010784:	464b      	mov	r3, r9
 8010786:	f7ef fd35 	bl	80001f4 <__aeabi_dsub>
 801078a:	4602      	mov	r2, r0
 801078c:	460b      	mov	r3, r1
 801078e:	2000      	movs	r0, #0
 8010790:	4939      	ldr	r1, [pc, #228]	; (8010878 <__ieee754_pow+0xa20>)
 8010792:	f7ef fd2f 	bl	80001f4 <__aeabi_dsub>
 8010796:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801079a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801079e:	da29      	bge.n	80107f4 <__ieee754_pow+0x99c>
 80107a0:	4652      	mov	r2, sl
 80107a2:	f001 f885 	bl	80118b0 <scalbn>
 80107a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107aa:	f7ff bbfe 	b.w	800ffaa <__ieee754_pow+0x152>
 80107ae:	4b33      	ldr	r3, [pc, #204]	; (801087c <__ieee754_pow+0xa24>)
 80107b0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80107b4:	429f      	cmp	r7, r3
 80107b6:	f77f af13 	ble.w	80105e0 <__ieee754_pow+0x788>
 80107ba:	4b31      	ldr	r3, [pc, #196]	; (8010880 <__ieee754_pow+0xa28>)
 80107bc:	440b      	add	r3, r1
 80107be:	4303      	orrs	r3, r0
 80107c0:	d009      	beq.n	80107d6 <__ieee754_pow+0x97e>
 80107c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80107c6:	2200      	movs	r2, #0
 80107c8:	2300      	movs	r3, #0
 80107ca:	f7f0 f93d 	bl	8000a48 <__aeabi_dcmplt>
 80107ce:	3800      	subs	r0, #0
 80107d0:	bf18      	it	ne
 80107d2:	2001      	movne	r0, #1
 80107d4:	e453      	b.n	801007e <__ieee754_pow+0x226>
 80107d6:	4622      	mov	r2, r4
 80107d8:	462b      	mov	r3, r5
 80107da:	f7ef fd0b 	bl	80001f4 <__aeabi_dsub>
 80107de:	4642      	mov	r2, r8
 80107e0:	464b      	mov	r3, r9
 80107e2:	f7f0 f945 	bl	8000a70 <__aeabi_dcmpge>
 80107e6:	2800      	cmp	r0, #0
 80107e8:	f43f aefa 	beq.w	80105e0 <__ieee754_pow+0x788>
 80107ec:	e7e9      	b.n	80107c2 <__ieee754_pow+0x96a>
 80107ee:	f04f 0a00 	mov.w	sl, #0
 80107f2:	e720      	b.n	8010636 <__ieee754_pow+0x7de>
 80107f4:	4621      	mov	r1, r4
 80107f6:	e7d6      	b.n	80107a6 <__ieee754_pow+0x94e>
 80107f8:	f04f 0b00 	mov.w	fp, #0
 80107fc:	f8df c078 	ldr.w	ip, [pc, #120]	; 8010878 <__ieee754_pow+0xa20>
 8010800:	f7ff bbba 	b.w	800ff78 <__ieee754_pow+0x120>
 8010804:	f04f 0b00 	mov.w	fp, #0
 8010808:	f04f 0c00 	mov.w	ip, #0
 801080c:	f7ff bbb4 	b.w	800ff78 <__ieee754_pow+0x120>
 8010810:	4640      	mov	r0, r8
 8010812:	4649      	mov	r1, r9
 8010814:	f7ff bb3d 	b.w	800fe92 <__ieee754_pow+0x3a>
 8010818:	9200      	str	r2, [sp, #0]
 801081a:	f7ff bb89 	b.w	800ff30 <__ieee754_pow+0xd8>
 801081e:	2300      	movs	r3, #0
 8010820:	f7ff bb73 	b.w	800ff0a <__ieee754_pow+0xb2>
 8010824:	f3af 8000 	nop.w
 8010828:	652b82fe 	.word	0x652b82fe
 801082c:	3c971547 	.word	0x3c971547
 8010830:	00000000 	.word	0x00000000
 8010834:	3fe62e43 	.word	0x3fe62e43
 8010838:	fefa39ef 	.word	0xfefa39ef
 801083c:	3fe62e42 	.word	0x3fe62e42
 8010840:	0ca86c39 	.word	0x0ca86c39
 8010844:	be205c61 	.word	0xbe205c61
 8010848:	72bea4d0 	.word	0x72bea4d0
 801084c:	3e663769 	.word	0x3e663769
 8010850:	c5d26bf1 	.word	0xc5d26bf1
 8010854:	3ebbbd41 	.word	0x3ebbbd41
 8010858:	af25de2c 	.word	0xaf25de2c
 801085c:	3f11566a 	.word	0x3f11566a
 8010860:	16bebd93 	.word	0x16bebd93
 8010864:	3f66c16c 	.word	0x3f66c16c
 8010868:	5555553e 	.word	0x5555553e
 801086c:	3fc55555 	.word	0x3fc55555
 8010870:	3fe00000 	.word	0x3fe00000
 8010874:	000fffff 	.word	0x000fffff
 8010878:	3ff00000 	.word	0x3ff00000
 801087c:	4090cbff 	.word	0x4090cbff
 8010880:	3f6f3400 	.word	0x3f6f3400
 8010884:	00000000 	.word	0x00000000

08010888 <__ieee754_rem_pio2>:
 8010888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801088c:	4614      	mov	r4, r2
 801088e:	4ac4      	ldr	r2, [pc, #784]	; (8010ba0 <__ieee754_rem_pio2+0x318>)
 8010890:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8010894:	b08d      	sub	sp, #52	; 0x34
 8010896:	4592      	cmp	sl, r2
 8010898:	9104      	str	r1, [sp, #16]
 801089a:	dc07      	bgt.n	80108ac <__ieee754_rem_pio2+0x24>
 801089c:	2200      	movs	r2, #0
 801089e:	2300      	movs	r3, #0
 80108a0:	e9c4 0100 	strd	r0, r1, [r4]
 80108a4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80108a8:	2500      	movs	r5, #0
 80108aa:	e024      	b.n	80108f6 <__ieee754_rem_pio2+0x6e>
 80108ac:	4abd      	ldr	r2, [pc, #756]	; (8010ba4 <__ieee754_rem_pio2+0x31c>)
 80108ae:	4592      	cmp	sl, r2
 80108b0:	dc72      	bgt.n	8010998 <__ieee754_rem_pio2+0x110>
 80108b2:	9b04      	ldr	r3, [sp, #16]
 80108b4:	4dbc      	ldr	r5, [pc, #752]	; (8010ba8 <__ieee754_rem_pio2+0x320>)
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	a3ab      	add	r3, pc, #684	; (adr r3, 8010b68 <__ieee754_rem_pio2+0x2e0>)
 80108ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108be:	dd36      	ble.n	801092e <__ieee754_rem_pio2+0xa6>
 80108c0:	f7ef fc98 	bl	80001f4 <__aeabi_dsub>
 80108c4:	45aa      	cmp	sl, r5
 80108c6:	4606      	mov	r6, r0
 80108c8:	460f      	mov	r7, r1
 80108ca:	d018      	beq.n	80108fe <__ieee754_rem_pio2+0x76>
 80108cc:	a3a8      	add	r3, pc, #672	; (adr r3, 8010b70 <__ieee754_rem_pio2+0x2e8>)
 80108ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d2:	f7ef fc8f 	bl	80001f4 <__aeabi_dsub>
 80108d6:	4602      	mov	r2, r0
 80108d8:	460b      	mov	r3, r1
 80108da:	4630      	mov	r0, r6
 80108dc:	e9c4 2300 	strd	r2, r3, [r4]
 80108e0:	4639      	mov	r1, r7
 80108e2:	f7ef fc87 	bl	80001f4 <__aeabi_dsub>
 80108e6:	a3a2      	add	r3, pc, #648	; (adr r3, 8010b70 <__ieee754_rem_pio2+0x2e8>)
 80108e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ec:	f7ef fc82 	bl	80001f4 <__aeabi_dsub>
 80108f0:	2501      	movs	r5, #1
 80108f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80108f6:	4628      	mov	r0, r5
 80108f8:	b00d      	add	sp, #52	; 0x34
 80108fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108fe:	a39e      	add	r3, pc, #632	; (adr r3, 8010b78 <__ieee754_rem_pio2+0x2f0>)
 8010900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010904:	f7ef fc76 	bl	80001f4 <__aeabi_dsub>
 8010908:	a39d      	add	r3, pc, #628	; (adr r3, 8010b80 <__ieee754_rem_pio2+0x2f8>)
 801090a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090e:	4606      	mov	r6, r0
 8010910:	460f      	mov	r7, r1
 8010912:	f7ef fc6f 	bl	80001f4 <__aeabi_dsub>
 8010916:	4602      	mov	r2, r0
 8010918:	460b      	mov	r3, r1
 801091a:	4630      	mov	r0, r6
 801091c:	e9c4 2300 	strd	r2, r3, [r4]
 8010920:	4639      	mov	r1, r7
 8010922:	f7ef fc67 	bl	80001f4 <__aeabi_dsub>
 8010926:	a396      	add	r3, pc, #600	; (adr r3, 8010b80 <__ieee754_rem_pio2+0x2f8>)
 8010928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801092c:	e7de      	b.n	80108ec <__ieee754_rem_pio2+0x64>
 801092e:	f7ef fc63 	bl	80001f8 <__adddf3>
 8010932:	45aa      	cmp	sl, r5
 8010934:	4606      	mov	r6, r0
 8010936:	460f      	mov	r7, r1
 8010938:	d016      	beq.n	8010968 <__ieee754_rem_pio2+0xe0>
 801093a:	a38d      	add	r3, pc, #564	; (adr r3, 8010b70 <__ieee754_rem_pio2+0x2e8>)
 801093c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010940:	f7ef fc5a 	bl	80001f8 <__adddf3>
 8010944:	4602      	mov	r2, r0
 8010946:	460b      	mov	r3, r1
 8010948:	4630      	mov	r0, r6
 801094a:	e9c4 2300 	strd	r2, r3, [r4]
 801094e:	4639      	mov	r1, r7
 8010950:	f7ef fc50 	bl	80001f4 <__aeabi_dsub>
 8010954:	a386      	add	r3, pc, #536	; (adr r3, 8010b70 <__ieee754_rem_pio2+0x2e8>)
 8010956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801095a:	f7ef fc4d 	bl	80001f8 <__adddf3>
 801095e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010962:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010966:	e7c6      	b.n	80108f6 <__ieee754_rem_pio2+0x6e>
 8010968:	a383      	add	r3, pc, #524	; (adr r3, 8010b78 <__ieee754_rem_pio2+0x2f0>)
 801096a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801096e:	f7ef fc43 	bl	80001f8 <__adddf3>
 8010972:	a383      	add	r3, pc, #524	; (adr r3, 8010b80 <__ieee754_rem_pio2+0x2f8>)
 8010974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010978:	4606      	mov	r6, r0
 801097a:	460f      	mov	r7, r1
 801097c:	f7ef fc3c 	bl	80001f8 <__adddf3>
 8010980:	4602      	mov	r2, r0
 8010982:	460b      	mov	r3, r1
 8010984:	4630      	mov	r0, r6
 8010986:	e9c4 2300 	strd	r2, r3, [r4]
 801098a:	4639      	mov	r1, r7
 801098c:	f7ef fc32 	bl	80001f4 <__aeabi_dsub>
 8010990:	a37b      	add	r3, pc, #492	; (adr r3, 8010b80 <__ieee754_rem_pio2+0x2f8>)
 8010992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010996:	e7e0      	b.n	801095a <__ieee754_rem_pio2+0xd2>
 8010998:	4a84      	ldr	r2, [pc, #528]	; (8010bac <__ieee754_rem_pio2+0x324>)
 801099a:	4592      	cmp	sl, r2
 801099c:	f300 80d5 	bgt.w	8010b4a <__ieee754_rem_pio2+0x2c2>
 80109a0:	f000 fefc 	bl	801179c <fabs>
 80109a4:	a378      	add	r3, pc, #480	; (adr r3, 8010b88 <__ieee754_rem_pio2+0x300>)
 80109a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109aa:	4606      	mov	r6, r0
 80109ac:	460f      	mov	r7, r1
 80109ae:	f7ef fdd9 	bl	8000564 <__aeabi_dmul>
 80109b2:	2200      	movs	r2, #0
 80109b4:	4b7e      	ldr	r3, [pc, #504]	; (8010bb0 <__ieee754_rem_pio2+0x328>)
 80109b6:	f7ef fc1f 	bl	80001f8 <__adddf3>
 80109ba:	f7f0 f883 	bl	8000ac4 <__aeabi_d2iz>
 80109be:	4605      	mov	r5, r0
 80109c0:	f7ef fd66 	bl	8000490 <__aeabi_i2d>
 80109c4:	4602      	mov	r2, r0
 80109c6:	460b      	mov	r3, r1
 80109c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80109cc:	a366      	add	r3, pc, #408	; (adr r3, 8010b68 <__ieee754_rem_pio2+0x2e0>)
 80109ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d2:	f7ef fdc7 	bl	8000564 <__aeabi_dmul>
 80109d6:	4602      	mov	r2, r0
 80109d8:	460b      	mov	r3, r1
 80109da:	4630      	mov	r0, r6
 80109dc:	4639      	mov	r1, r7
 80109de:	f7ef fc09 	bl	80001f4 <__aeabi_dsub>
 80109e2:	a363      	add	r3, pc, #396	; (adr r3, 8010b70 <__ieee754_rem_pio2+0x2e8>)
 80109e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e8:	4680      	mov	r8, r0
 80109ea:	4689      	mov	r9, r1
 80109ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109f0:	f7ef fdb8 	bl	8000564 <__aeabi_dmul>
 80109f4:	2d1f      	cmp	r5, #31
 80109f6:	4606      	mov	r6, r0
 80109f8:	460f      	mov	r7, r1
 80109fa:	dc0e      	bgt.n	8010a1a <__ieee754_rem_pio2+0x192>
 80109fc:	4b6d      	ldr	r3, [pc, #436]	; (8010bb4 <__ieee754_rem_pio2+0x32c>)
 80109fe:	1e6a      	subs	r2, r5, #1
 8010a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a04:	4553      	cmp	r3, sl
 8010a06:	d008      	beq.n	8010a1a <__ieee754_rem_pio2+0x192>
 8010a08:	4632      	mov	r2, r6
 8010a0a:	463b      	mov	r3, r7
 8010a0c:	4640      	mov	r0, r8
 8010a0e:	4649      	mov	r1, r9
 8010a10:	f7ef fbf0 	bl	80001f4 <__aeabi_dsub>
 8010a14:	e9c4 0100 	strd	r0, r1, [r4]
 8010a18:	e013      	b.n	8010a42 <__ieee754_rem_pio2+0x1ba>
 8010a1a:	463b      	mov	r3, r7
 8010a1c:	4632      	mov	r2, r6
 8010a1e:	4640      	mov	r0, r8
 8010a20:	4649      	mov	r1, r9
 8010a22:	f7ef fbe7 	bl	80001f4 <__aeabi_dsub>
 8010a26:	ea4f 532a 	mov.w	r3, sl, asr #20
 8010a2a:	9305      	str	r3, [sp, #20]
 8010a2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010a30:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8010a34:	f1ba 0f10 	cmp.w	sl, #16
 8010a38:	dc1f      	bgt.n	8010a7a <__ieee754_rem_pio2+0x1f2>
 8010a3a:	4602      	mov	r2, r0
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	e9c4 2300 	strd	r2, r3, [r4]
 8010a42:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8010a46:	4640      	mov	r0, r8
 8010a48:	4653      	mov	r3, sl
 8010a4a:	4649      	mov	r1, r9
 8010a4c:	f7ef fbd2 	bl	80001f4 <__aeabi_dsub>
 8010a50:	4632      	mov	r2, r6
 8010a52:	463b      	mov	r3, r7
 8010a54:	f7ef fbce 	bl	80001f4 <__aeabi_dsub>
 8010a58:	460b      	mov	r3, r1
 8010a5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010a5e:	9904      	ldr	r1, [sp, #16]
 8010a60:	4602      	mov	r2, r0
 8010a62:	2900      	cmp	r1, #0
 8010a64:	f6bf af47 	bge.w	80108f6 <__ieee754_rem_pio2+0x6e>
 8010a68:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8010a6c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8010a70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010a74:	60e3      	str	r3, [r4, #12]
 8010a76:	426d      	negs	r5, r5
 8010a78:	e73d      	b.n	80108f6 <__ieee754_rem_pio2+0x6e>
 8010a7a:	a33f      	add	r3, pc, #252	; (adr r3, 8010b78 <__ieee754_rem_pio2+0x2f0>)
 8010a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a84:	f7ef fd6e 	bl	8000564 <__aeabi_dmul>
 8010a88:	4606      	mov	r6, r0
 8010a8a:	460f      	mov	r7, r1
 8010a8c:	4602      	mov	r2, r0
 8010a8e:	460b      	mov	r3, r1
 8010a90:	4640      	mov	r0, r8
 8010a92:	4649      	mov	r1, r9
 8010a94:	f7ef fbae 	bl	80001f4 <__aeabi_dsub>
 8010a98:	4602      	mov	r2, r0
 8010a9a:	460b      	mov	r3, r1
 8010a9c:	4682      	mov	sl, r0
 8010a9e:	468b      	mov	fp, r1
 8010aa0:	4640      	mov	r0, r8
 8010aa2:	4649      	mov	r1, r9
 8010aa4:	f7ef fba6 	bl	80001f4 <__aeabi_dsub>
 8010aa8:	4632      	mov	r2, r6
 8010aaa:	463b      	mov	r3, r7
 8010aac:	f7ef fba2 	bl	80001f4 <__aeabi_dsub>
 8010ab0:	a333      	add	r3, pc, #204	; (adr r3, 8010b80 <__ieee754_rem_pio2+0x2f8>)
 8010ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab6:	4606      	mov	r6, r0
 8010ab8:	460f      	mov	r7, r1
 8010aba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010abe:	f7ef fd51 	bl	8000564 <__aeabi_dmul>
 8010ac2:	4632      	mov	r2, r6
 8010ac4:	463b      	mov	r3, r7
 8010ac6:	f7ef fb95 	bl	80001f4 <__aeabi_dsub>
 8010aca:	4602      	mov	r2, r0
 8010acc:	460b      	mov	r3, r1
 8010ace:	4606      	mov	r6, r0
 8010ad0:	460f      	mov	r7, r1
 8010ad2:	4650      	mov	r0, sl
 8010ad4:	4659      	mov	r1, fp
 8010ad6:	f7ef fb8d 	bl	80001f4 <__aeabi_dsub>
 8010ada:	9a05      	ldr	r2, [sp, #20]
 8010adc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010ae0:	1ad3      	subs	r3, r2, r3
 8010ae2:	2b31      	cmp	r3, #49	; 0x31
 8010ae4:	dc06      	bgt.n	8010af4 <__ieee754_rem_pio2+0x26c>
 8010ae6:	4602      	mov	r2, r0
 8010ae8:	460b      	mov	r3, r1
 8010aea:	46d0      	mov	r8, sl
 8010aec:	46d9      	mov	r9, fp
 8010aee:	e9c4 2300 	strd	r2, r3, [r4]
 8010af2:	e7a6      	b.n	8010a42 <__ieee754_rem_pio2+0x1ba>
 8010af4:	a326      	add	r3, pc, #152	; (adr r3, 8010b90 <__ieee754_rem_pio2+0x308>)
 8010af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010afa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010afe:	f7ef fd31 	bl	8000564 <__aeabi_dmul>
 8010b02:	4606      	mov	r6, r0
 8010b04:	460f      	mov	r7, r1
 8010b06:	4602      	mov	r2, r0
 8010b08:	460b      	mov	r3, r1
 8010b0a:	4650      	mov	r0, sl
 8010b0c:	4659      	mov	r1, fp
 8010b0e:	f7ef fb71 	bl	80001f4 <__aeabi_dsub>
 8010b12:	4602      	mov	r2, r0
 8010b14:	460b      	mov	r3, r1
 8010b16:	4680      	mov	r8, r0
 8010b18:	4689      	mov	r9, r1
 8010b1a:	4650      	mov	r0, sl
 8010b1c:	4659      	mov	r1, fp
 8010b1e:	f7ef fb69 	bl	80001f4 <__aeabi_dsub>
 8010b22:	4632      	mov	r2, r6
 8010b24:	463b      	mov	r3, r7
 8010b26:	f7ef fb65 	bl	80001f4 <__aeabi_dsub>
 8010b2a:	a31b      	add	r3, pc, #108	; (adr r3, 8010b98 <__ieee754_rem_pio2+0x310>)
 8010b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b30:	4606      	mov	r6, r0
 8010b32:	460f      	mov	r7, r1
 8010b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b38:	f7ef fd14 	bl	8000564 <__aeabi_dmul>
 8010b3c:	4632      	mov	r2, r6
 8010b3e:	463b      	mov	r3, r7
 8010b40:	f7ef fb58 	bl	80001f4 <__aeabi_dsub>
 8010b44:	4606      	mov	r6, r0
 8010b46:	460f      	mov	r7, r1
 8010b48:	e75e      	b.n	8010a08 <__ieee754_rem_pio2+0x180>
 8010b4a:	4a1b      	ldr	r2, [pc, #108]	; (8010bb8 <__ieee754_rem_pio2+0x330>)
 8010b4c:	4592      	cmp	sl, r2
 8010b4e:	dd35      	ble.n	8010bbc <__ieee754_rem_pio2+0x334>
 8010b50:	4602      	mov	r2, r0
 8010b52:	460b      	mov	r3, r1
 8010b54:	f7ef fb4e 	bl	80001f4 <__aeabi_dsub>
 8010b58:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010b5c:	e9c4 0100 	strd	r0, r1, [r4]
 8010b60:	e6a2      	b.n	80108a8 <__ieee754_rem_pio2+0x20>
 8010b62:	bf00      	nop
 8010b64:	f3af 8000 	nop.w
 8010b68:	54400000 	.word	0x54400000
 8010b6c:	3ff921fb 	.word	0x3ff921fb
 8010b70:	1a626331 	.word	0x1a626331
 8010b74:	3dd0b461 	.word	0x3dd0b461
 8010b78:	1a600000 	.word	0x1a600000
 8010b7c:	3dd0b461 	.word	0x3dd0b461
 8010b80:	2e037073 	.word	0x2e037073
 8010b84:	3ba3198a 	.word	0x3ba3198a
 8010b88:	6dc9c883 	.word	0x6dc9c883
 8010b8c:	3fe45f30 	.word	0x3fe45f30
 8010b90:	2e000000 	.word	0x2e000000
 8010b94:	3ba3198a 	.word	0x3ba3198a
 8010b98:	252049c1 	.word	0x252049c1
 8010b9c:	397b839a 	.word	0x397b839a
 8010ba0:	3fe921fb 	.word	0x3fe921fb
 8010ba4:	4002d97b 	.word	0x4002d97b
 8010ba8:	3ff921fb 	.word	0x3ff921fb
 8010bac:	413921fb 	.word	0x413921fb
 8010bb0:	3fe00000 	.word	0x3fe00000
 8010bb4:	080181f0 	.word	0x080181f0
 8010bb8:	7fefffff 	.word	0x7fefffff
 8010bbc:	ea4f 552a 	mov.w	r5, sl, asr #20
 8010bc0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8010bc4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8010bc8:	460f      	mov	r7, r1
 8010bca:	4606      	mov	r6, r0
 8010bcc:	f7ef ff7a 	bl	8000ac4 <__aeabi_d2iz>
 8010bd0:	f7ef fc5e 	bl	8000490 <__aeabi_i2d>
 8010bd4:	4602      	mov	r2, r0
 8010bd6:	460b      	mov	r3, r1
 8010bd8:	4630      	mov	r0, r6
 8010bda:	4639      	mov	r1, r7
 8010bdc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010be0:	f7ef fb08 	bl	80001f4 <__aeabi_dsub>
 8010be4:	2200      	movs	r2, #0
 8010be6:	4b22      	ldr	r3, [pc, #136]	; (8010c70 <__ieee754_rem_pio2+0x3e8>)
 8010be8:	f7ef fcbc 	bl	8000564 <__aeabi_dmul>
 8010bec:	460f      	mov	r7, r1
 8010bee:	4606      	mov	r6, r0
 8010bf0:	f7ef ff68 	bl	8000ac4 <__aeabi_d2iz>
 8010bf4:	f7ef fc4c 	bl	8000490 <__aeabi_i2d>
 8010bf8:	4602      	mov	r2, r0
 8010bfa:	460b      	mov	r3, r1
 8010bfc:	4630      	mov	r0, r6
 8010bfe:	4639      	mov	r1, r7
 8010c00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010c04:	f7ef faf6 	bl	80001f4 <__aeabi_dsub>
 8010c08:	2200      	movs	r2, #0
 8010c0a:	4b19      	ldr	r3, [pc, #100]	; (8010c70 <__ieee754_rem_pio2+0x3e8>)
 8010c0c:	f7ef fcaa 	bl	8000564 <__aeabi_dmul>
 8010c10:	f04f 0803 	mov.w	r8, #3
 8010c14:	2600      	movs	r6, #0
 8010c16:	2700      	movs	r7, #0
 8010c18:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010c1c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8010c20:	4632      	mov	r2, r6
 8010c22:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8010c26:	463b      	mov	r3, r7
 8010c28:	46c2      	mov	sl, r8
 8010c2a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010c2e:	f7ef ff01 	bl	8000a34 <__aeabi_dcmpeq>
 8010c32:	2800      	cmp	r0, #0
 8010c34:	d1f4      	bne.n	8010c20 <__ieee754_rem_pio2+0x398>
 8010c36:	4b0f      	ldr	r3, [pc, #60]	; (8010c74 <__ieee754_rem_pio2+0x3ec>)
 8010c38:	462a      	mov	r2, r5
 8010c3a:	9301      	str	r3, [sp, #4]
 8010c3c:	2302      	movs	r3, #2
 8010c3e:	4621      	mov	r1, r4
 8010c40:	9300      	str	r3, [sp, #0]
 8010c42:	a806      	add	r0, sp, #24
 8010c44:	4653      	mov	r3, sl
 8010c46:	f000 f985 	bl	8010f54 <__kernel_rem_pio2>
 8010c4a:	9b04      	ldr	r3, [sp, #16]
 8010c4c:	4605      	mov	r5, r0
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	f6bf ae51 	bge.w	80108f6 <__ieee754_rem_pio2+0x6e>
 8010c54:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010c58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c5c:	e9c4 2300 	strd	r2, r3, [r4]
 8010c60:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8010c64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c68:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010c6c:	e703      	b.n	8010a76 <__ieee754_rem_pio2+0x1ee>
 8010c6e:	bf00      	nop
 8010c70:	41700000 	.word	0x41700000
 8010c74:	08018270 	.word	0x08018270

08010c78 <__ieee754_sqrt>:
 8010c78:	f8df c158 	ldr.w	ip, [pc, #344]	; 8010dd4 <__ieee754_sqrt+0x15c>
 8010c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c80:	ea3c 0c01 	bics.w	ip, ip, r1
 8010c84:	4606      	mov	r6, r0
 8010c86:	460d      	mov	r5, r1
 8010c88:	460c      	mov	r4, r1
 8010c8a:	460a      	mov	r2, r1
 8010c8c:	4607      	mov	r7, r0
 8010c8e:	4603      	mov	r3, r0
 8010c90:	d10f      	bne.n	8010cb2 <__ieee754_sqrt+0x3a>
 8010c92:	4602      	mov	r2, r0
 8010c94:	460b      	mov	r3, r1
 8010c96:	f7ef fc65 	bl	8000564 <__aeabi_dmul>
 8010c9a:	4602      	mov	r2, r0
 8010c9c:	460b      	mov	r3, r1
 8010c9e:	4630      	mov	r0, r6
 8010ca0:	4629      	mov	r1, r5
 8010ca2:	f7ef faa9 	bl	80001f8 <__adddf3>
 8010ca6:	4606      	mov	r6, r0
 8010ca8:	460d      	mov	r5, r1
 8010caa:	4630      	mov	r0, r6
 8010cac:	4629      	mov	r1, r5
 8010cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cb2:	2900      	cmp	r1, #0
 8010cb4:	dc0e      	bgt.n	8010cd4 <__ieee754_sqrt+0x5c>
 8010cb6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8010cba:	ea5c 0707 	orrs.w	r7, ip, r7
 8010cbe:	d0f4      	beq.n	8010caa <__ieee754_sqrt+0x32>
 8010cc0:	b141      	cbz	r1, 8010cd4 <__ieee754_sqrt+0x5c>
 8010cc2:	4602      	mov	r2, r0
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	f7ef fa95 	bl	80001f4 <__aeabi_dsub>
 8010cca:	4602      	mov	r2, r0
 8010ccc:	460b      	mov	r3, r1
 8010cce:	f7ef fd73 	bl	80007b8 <__aeabi_ddiv>
 8010cd2:	e7e8      	b.n	8010ca6 <__ieee754_sqrt+0x2e>
 8010cd4:	1521      	asrs	r1, r4, #20
 8010cd6:	d075      	beq.n	8010dc4 <__ieee754_sqrt+0x14c>
 8010cd8:	07cc      	lsls	r4, r1, #31
 8010cda:	f04f 0400 	mov.w	r4, #0
 8010cde:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8010ce2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8010ce6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8010cea:	bf5e      	ittt	pl
 8010cec:	0fd9      	lsrpl	r1, r3, #31
 8010cee:	005b      	lslpl	r3, r3, #1
 8010cf0:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8010cf4:	0fd9      	lsrs	r1, r3, #31
 8010cf6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8010cfa:	2516      	movs	r5, #22
 8010cfc:	4620      	mov	r0, r4
 8010cfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010d02:	107f      	asrs	r7, r7, #1
 8010d04:	005b      	lsls	r3, r3, #1
 8010d06:	1846      	adds	r6, r0, r1
 8010d08:	4296      	cmp	r6, r2
 8010d0a:	bfde      	ittt	le
 8010d0c:	1b92      	suble	r2, r2, r6
 8010d0e:	1870      	addle	r0, r6, r1
 8010d10:	1864      	addle	r4, r4, r1
 8010d12:	0052      	lsls	r2, r2, #1
 8010d14:	3d01      	subs	r5, #1
 8010d16:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8010d1a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010d1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010d22:	d1f0      	bne.n	8010d06 <__ieee754_sqrt+0x8e>
 8010d24:	4629      	mov	r1, r5
 8010d26:	f04f 0e20 	mov.w	lr, #32
 8010d2a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010d2e:	4282      	cmp	r2, r0
 8010d30:	eb06 0c05 	add.w	ip, r6, r5
 8010d34:	dc02      	bgt.n	8010d3c <__ieee754_sqrt+0xc4>
 8010d36:	d113      	bne.n	8010d60 <__ieee754_sqrt+0xe8>
 8010d38:	459c      	cmp	ip, r3
 8010d3a:	d811      	bhi.n	8010d60 <__ieee754_sqrt+0xe8>
 8010d3c:	f1bc 0f00 	cmp.w	ip, #0
 8010d40:	eb0c 0506 	add.w	r5, ip, r6
 8010d44:	da43      	bge.n	8010dce <__ieee754_sqrt+0x156>
 8010d46:	2d00      	cmp	r5, #0
 8010d48:	db41      	blt.n	8010dce <__ieee754_sqrt+0x156>
 8010d4a:	f100 0801 	add.w	r8, r0, #1
 8010d4e:	1a12      	subs	r2, r2, r0
 8010d50:	4640      	mov	r0, r8
 8010d52:	459c      	cmp	ip, r3
 8010d54:	bf88      	it	hi
 8010d56:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8010d5a:	eba3 030c 	sub.w	r3, r3, ip
 8010d5e:	4431      	add	r1, r6
 8010d60:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010d64:	f1be 0e01 	subs.w	lr, lr, #1
 8010d68:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8010d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010d70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010d74:	d1db      	bne.n	8010d2e <__ieee754_sqrt+0xb6>
 8010d76:	4313      	orrs	r3, r2
 8010d78:	d006      	beq.n	8010d88 <__ieee754_sqrt+0x110>
 8010d7a:	1c48      	adds	r0, r1, #1
 8010d7c:	bf0b      	itete	eq
 8010d7e:	4671      	moveq	r1, lr
 8010d80:	3101      	addne	r1, #1
 8010d82:	3401      	addeq	r4, #1
 8010d84:	f021 0101 	bicne.w	r1, r1, #1
 8010d88:	1063      	asrs	r3, r4, #1
 8010d8a:	0849      	lsrs	r1, r1, #1
 8010d8c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010d90:	07e2      	lsls	r2, r4, #31
 8010d92:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010d96:	bf48      	it	mi
 8010d98:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8010d9c:	460e      	mov	r6, r1
 8010d9e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010da2:	e782      	b.n	8010caa <__ieee754_sqrt+0x32>
 8010da4:	0ada      	lsrs	r2, r3, #11
 8010da6:	3815      	subs	r0, #21
 8010da8:	055b      	lsls	r3, r3, #21
 8010daa:	2a00      	cmp	r2, #0
 8010dac:	d0fa      	beq.n	8010da4 <__ieee754_sqrt+0x12c>
 8010dae:	02d5      	lsls	r5, r2, #11
 8010db0:	d50a      	bpl.n	8010dc8 <__ieee754_sqrt+0x150>
 8010db2:	f1c1 0420 	rsb	r4, r1, #32
 8010db6:	fa23 f404 	lsr.w	r4, r3, r4
 8010dba:	1e4d      	subs	r5, r1, #1
 8010dbc:	408b      	lsls	r3, r1
 8010dbe:	4322      	orrs	r2, r4
 8010dc0:	1b41      	subs	r1, r0, r5
 8010dc2:	e789      	b.n	8010cd8 <__ieee754_sqrt+0x60>
 8010dc4:	4608      	mov	r0, r1
 8010dc6:	e7f0      	b.n	8010daa <__ieee754_sqrt+0x132>
 8010dc8:	0052      	lsls	r2, r2, #1
 8010dca:	3101      	adds	r1, #1
 8010dcc:	e7ef      	b.n	8010dae <__ieee754_sqrt+0x136>
 8010dce:	4680      	mov	r8, r0
 8010dd0:	e7bd      	b.n	8010d4e <__ieee754_sqrt+0xd6>
 8010dd2:	bf00      	nop
 8010dd4:	7ff00000 	.word	0x7ff00000

08010dd8 <__kernel_cos>:
 8010dd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ddc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010de0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8010de4:	4680      	mov	r8, r0
 8010de6:	460f      	mov	r7, r1
 8010de8:	e9cd 2300 	strd	r2, r3, [sp]
 8010dec:	da04      	bge.n	8010df8 <__kernel_cos+0x20>
 8010dee:	f7ef fe69 	bl	8000ac4 <__aeabi_d2iz>
 8010df2:	2800      	cmp	r0, #0
 8010df4:	f000 8086 	beq.w	8010f04 <__kernel_cos+0x12c>
 8010df8:	4642      	mov	r2, r8
 8010dfa:	463b      	mov	r3, r7
 8010dfc:	4640      	mov	r0, r8
 8010dfe:	4639      	mov	r1, r7
 8010e00:	f7ef fbb0 	bl	8000564 <__aeabi_dmul>
 8010e04:	2200      	movs	r2, #0
 8010e06:	4b4e      	ldr	r3, [pc, #312]	; (8010f40 <__kernel_cos+0x168>)
 8010e08:	4604      	mov	r4, r0
 8010e0a:	460d      	mov	r5, r1
 8010e0c:	f7ef fbaa 	bl	8000564 <__aeabi_dmul>
 8010e10:	a33f      	add	r3, pc, #252	; (adr r3, 8010f10 <__kernel_cos+0x138>)
 8010e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e16:	4682      	mov	sl, r0
 8010e18:	468b      	mov	fp, r1
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	4629      	mov	r1, r5
 8010e1e:	f7ef fba1 	bl	8000564 <__aeabi_dmul>
 8010e22:	a33d      	add	r3, pc, #244	; (adr r3, 8010f18 <__kernel_cos+0x140>)
 8010e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e28:	f7ef f9e6 	bl	80001f8 <__adddf3>
 8010e2c:	4622      	mov	r2, r4
 8010e2e:	462b      	mov	r3, r5
 8010e30:	f7ef fb98 	bl	8000564 <__aeabi_dmul>
 8010e34:	a33a      	add	r3, pc, #232	; (adr r3, 8010f20 <__kernel_cos+0x148>)
 8010e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e3a:	f7ef f9db 	bl	80001f4 <__aeabi_dsub>
 8010e3e:	4622      	mov	r2, r4
 8010e40:	462b      	mov	r3, r5
 8010e42:	f7ef fb8f 	bl	8000564 <__aeabi_dmul>
 8010e46:	a338      	add	r3, pc, #224	; (adr r3, 8010f28 <__kernel_cos+0x150>)
 8010e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e4c:	f7ef f9d4 	bl	80001f8 <__adddf3>
 8010e50:	4622      	mov	r2, r4
 8010e52:	462b      	mov	r3, r5
 8010e54:	f7ef fb86 	bl	8000564 <__aeabi_dmul>
 8010e58:	a335      	add	r3, pc, #212	; (adr r3, 8010f30 <__kernel_cos+0x158>)
 8010e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e5e:	f7ef f9c9 	bl	80001f4 <__aeabi_dsub>
 8010e62:	4622      	mov	r2, r4
 8010e64:	462b      	mov	r3, r5
 8010e66:	f7ef fb7d 	bl	8000564 <__aeabi_dmul>
 8010e6a:	a333      	add	r3, pc, #204	; (adr r3, 8010f38 <__kernel_cos+0x160>)
 8010e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e70:	f7ef f9c2 	bl	80001f8 <__adddf3>
 8010e74:	4622      	mov	r2, r4
 8010e76:	462b      	mov	r3, r5
 8010e78:	f7ef fb74 	bl	8000564 <__aeabi_dmul>
 8010e7c:	4622      	mov	r2, r4
 8010e7e:	462b      	mov	r3, r5
 8010e80:	f7ef fb70 	bl	8000564 <__aeabi_dmul>
 8010e84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e88:	4604      	mov	r4, r0
 8010e8a:	460d      	mov	r5, r1
 8010e8c:	4640      	mov	r0, r8
 8010e8e:	4639      	mov	r1, r7
 8010e90:	f7ef fb68 	bl	8000564 <__aeabi_dmul>
 8010e94:	460b      	mov	r3, r1
 8010e96:	4602      	mov	r2, r0
 8010e98:	4629      	mov	r1, r5
 8010e9a:	4620      	mov	r0, r4
 8010e9c:	f7ef f9aa 	bl	80001f4 <__aeabi_dsub>
 8010ea0:	4b28      	ldr	r3, [pc, #160]	; (8010f44 <__kernel_cos+0x16c>)
 8010ea2:	4680      	mov	r8, r0
 8010ea4:	429e      	cmp	r6, r3
 8010ea6:	4689      	mov	r9, r1
 8010ea8:	dc0e      	bgt.n	8010ec8 <__kernel_cos+0xf0>
 8010eaa:	4602      	mov	r2, r0
 8010eac:	460b      	mov	r3, r1
 8010eae:	4650      	mov	r0, sl
 8010eb0:	4659      	mov	r1, fp
 8010eb2:	f7ef f99f 	bl	80001f4 <__aeabi_dsub>
 8010eb6:	4602      	mov	r2, r0
 8010eb8:	2000      	movs	r0, #0
 8010eba:	460b      	mov	r3, r1
 8010ebc:	4922      	ldr	r1, [pc, #136]	; (8010f48 <__kernel_cos+0x170>)
 8010ebe:	f7ef f999 	bl	80001f4 <__aeabi_dsub>
 8010ec2:	b003      	add	sp, #12
 8010ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ec8:	2400      	movs	r4, #0
 8010eca:	4b20      	ldr	r3, [pc, #128]	; (8010f4c <__kernel_cos+0x174>)
 8010ecc:	4622      	mov	r2, r4
 8010ece:	429e      	cmp	r6, r3
 8010ed0:	bfcc      	ite	gt
 8010ed2:	4d1f      	ldrgt	r5, [pc, #124]	; (8010f50 <__kernel_cos+0x178>)
 8010ed4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8010ed8:	462b      	mov	r3, r5
 8010eda:	2000      	movs	r0, #0
 8010edc:	491a      	ldr	r1, [pc, #104]	; (8010f48 <__kernel_cos+0x170>)
 8010ede:	f7ef f989 	bl	80001f4 <__aeabi_dsub>
 8010ee2:	4622      	mov	r2, r4
 8010ee4:	4606      	mov	r6, r0
 8010ee6:	460f      	mov	r7, r1
 8010ee8:	462b      	mov	r3, r5
 8010eea:	4650      	mov	r0, sl
 8010eec:	4659      	mov	r1, fp
 8010eee:	f7ef f981 	bl	80001f4 <__aeabi_dsub>
 8010ef2:	4642      	mov	r2, r8
 8010ef4:	464b      	mov	r3, r9
 8010ef6:	f7ef f97d 	bl	80001f4 <__aeabi_dsub>
 8010efa:	4602      	mov	r2, r0
 8010efc:	460b      	mov	r3, r1
 8010efe:	4630      	mov	r0, r6
 8010f00:	4639      	mov	r1, r7
 8010f02:	e7dc      	b.n	8010ebe <__kernel_cos+0xe6>
 8010f04:	2000      	movs	r0, #0
 8010f06:	4910      	ldr	r1, [pc, #64]	; (8010f48 <__kernel_cos+0x170>)
 8010f08:	e7db      	b.n	8010ec2 <__kernel_cos+0xea>
 8010f0a:	bf00      	nop
 8010f0c:	f3af 8000 	nop.w
 8010f10:	be8838d4 	.word	0xbe8838d4
 8010f14:	bda8fae9 	.word	0xbda8fae9
 8010f18:	bdb4b1c4 	.word	0xbdb4b1c4
 8010f1c:	3e21ee9e 	.word	0x3e21ee9e
 8010f20:	809c52ad 	.word	0x809c52ad
 8010f24:	3e927e4f 	.word	0x3e927e4f
 8010f28:	19cb1590 	.word	0x19cb1590
 8010f2c:	3efa01a0 	.word	0x3efa01a0
 8010f30:	16c15177 	.word	0x16c15177
 8010f34:	3f56c16c 	.word	0x3f56c16c
 8010f38:	5555554c 	.word	0x5555554c
 8010f3c:	3fa55555 	.word	0x3fa55555
 8010f40:	3fe00000 	.word	0x3fe00000
 8010f44:	3fd33332 	.word	0x3fd33332
 8010f48:	3ff00000 	.word	0x3ff00000
 8010f4c:	3fe90000 	.word	0x3fe90000
 8010f50:	3fd20000 	.word	0x3fd20000

08010f54 <__kernel_rem_pio2>:
 8010f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f58:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010f5c:	9308      	str	r3, [sp, #32]
 8010f5e:	9106      	str	r1, [sp, #24]
 8010f60:	4bb6      	ldr	r3, [pc, #728]	; (801123c <__kernel_rem_pio2+0x2e8>)
 8010f62:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8010f64:	f112 0f14 	cmn.w	r2, #20
 8010f68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f6c:	bfa8      	it	ge
 8010f6e:	1ed4      	subge	r4, r2, #3
 8010f70:	9302      	str	r3, [sp, #8]
 8010f72:	9b08      	ldr	r3, [sp, #32]
 8010f74:	bfb8      	it	lt
 8010f76:	2400      	movlt	r4, #0
 8010f78:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010f7c:	9307      	str	r3, [sp, #28]
 8010f7e:	bfa4      	itt	ge
 8010f80:	2318      	movge	r3, #24
 8010f82:	fb94 f4f3 	sdivge	r4, r4, r3
 8010f86:	f06f 0317 	mvn.w	r3, #23
 8010f8a:	fb04 3303 	mla	r3, r4, r3, r3
 8010f8e:	eb03 0b02 	add.w	fp, r3, r2
 8010f92:	9a07      	ldr	r2, [sp, #28]
 8010f94:	9b02      	ldr	r3, [sp, #8]
 8010f96:	1aa7      	subs	r7, r4, r2
 8010f98:	eb03 0802 	add.w	r8, r3, r2
 8010f9c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8010f9e:	2500      	movs	r5, #0
 8010fa0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	9009      	str	r0, [sp, #36]	; 0x24
 8010faa:	ae20      	add	r6, sp, #128	; 0x80
 8010fac:	4545      	cmp	r5, r8
 8010fae:	dd14      	ble.n	8010fda <__kernel_rem_pio2+0x86>
 8010fb0:	f04f 0800 	mov.w	r8, #0
 8010fb4:	9a08      	ldr	r2, [sp, #32]
 8010fb6:	ab20      	add	r3, sp, #128	; 0x80
 8010fb8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8010fbc:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8010fc0:	9b02      	ldr	r3, [sp, #8]
 8010fc2:	4598      	cmp	r8, r3
 8010fc4:	dc35      	bgt.n	8011032 <__kernel_rem_pio2+0xde>
 8010fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fc8:	2200      	movs	r2, #0
 8010fca:	f1a3 0908 	sub.w	r9, r3, #8
 8010fce:	2300      	movs	r3, #0
 8010fd0:	462f      	mov	r7, r5
 8010fd2:	2600      	movs	r6, #0
 8010fd4:	e9cd 2300 	strd	r2, r3, [sp]
 8010fd8:	e01f      	b.n	801101a <__kernel_rem_pio2+0xc6>
 8010fda:	42ef      	cmn	r7, r5
 8010fdc:	d40b      	bmi.n	8010ff6 <__kernel_rem_pio2+0xa2>
 8010fde:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010fe2:	e9cd 2300 	strd	r2, r3, [sp]
 8010fe6:	f7ef fa53 	bl	8000490 <__aeabi_i2d>
 8010fea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fee:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010ff2:	3501      	adds	r5, #1
 8010ff4:	e7da      	b.n	8010fac <__kernel_rem_pio2+0x58>
 8010ff6:	4610      	mov	r0, r2
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	e7f8      	b.n	8010fee <__kernel_rem_pio2+0x9a>
 8010ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011000:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8011004:	f7ef faae 	bl	8000564 <__aeabi_dmul>
 8011008:	4602      	mov	r2, r0
 801100a:	460b      	mov	r3, r1
 801100c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011010:	f7ef f8f2 	bl	80001f8 <__adddf3>
 8011014:	e9cd 0100 	strd	r0, r1, [sp]
 8011018:	3601      	adds	r6, #1
 801101a:	9b07      	ldr	r3, [sp, #28]
 801101c:	3f08      	subs	r7, #8
 801101e:	429e      	cmp	r6, r3
 8011020:	ddec      	ble.n	8010ffc <__kernel_rem_pio2+0xa8>
 8011022:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011026:	f108 0801 	add.w	r8, r8, #1
 801102a:	e8ea 2302 	strd	r2, r3, [sl], #8
 801102e:	3508      	adds	r5, #8
 8011030:	e7c6      	b.n	8010fc0 <__kernel_rem_pio2+0x6c>
 8011032:	9b02      	ldr	r3, [sp, #8]
 8011034:	aa0c      	add	r2, sp, #48	; 0x30
 8011036:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801103a:	930b      	str	r3, [sp, #44]	; 0x2c
 801103c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801103e:	9e02      	ldr	r6, [sp, #8]
 8011040:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011044:	930a      	str	r3, [sp, #40]	; 0x28
 8011046:	ab98      	add	r3, sp, #608	; 0x260
 8011048:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801104c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8011050:	ab70      	add	r3, sp, #448	; 0x1c0
 8011052:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8011056:	46d0      	mov	r8, sl
 8011058:	46b1      	mov	r9, r6
 801105a:	af0c      	add	r7, sp, #48	; 0x30
 801105c:	9700      	str	r7, [sp, #0]
 801105e:	f1b9 0f00 	cmp.w	r9, #0
 8011062:	f1a8 0808 	sub.w	r8, r8, #8
 8011066:	dc71      	bgt.n	801114c <__kernel_rem_pio2+0x1f8>
 8011068:	465a      	mov	r2, fp
 801106a:	4620      	mov	r0, r4
 801106c:	4629      	mov	r1, r5
 801106e:	f000 fc1f 	bl	80118b0 <scalbn>
 8011072:	2200      	movs	r2, #0
 8011074:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011078:	4604      	mov	r4, r0
 801107a:	460d      	mov	r5, r1
 801107c:	f7ef fa72 	bl	8000564 <__aeabi_dmul>
 8011080:	f000 fb96 	bl	80117b0 <floor>
 8011084:	2200      	movs	r2, #0
 8011086:	4b6e      	ldr	r3, [pc, #440]	; (8011240 <__kernel_rem_pio2+0x2ec>)
 8011088:	f7ef fa6c 	bl	8000564 <__aeabi_dmul>
 801108c:	4602      	mov	r2, r0
 801108e:	460b      	mov	r3, r1
 8011090:	4620      	mov	r0, r4
 8011092:	4629      	mov	r1, r5
 8011094:	f7ef f8ae 	bl	80001f4 <__aeabi_dsub>
 8011098:	460d      	mov	r5, r1
 801109a:	4604      	mov	r4, r0
 801109c:	f7ef fd12 	bl	8000ac4 <__aeabi_d2iz>
 80110a0:	9004      	str	r0, [sp, #16]
 80110a2:	f7ef f9f5 	bl	8000490 <__aeabi_i2d>
 80110a6:	4602      	mov	r2, r0
 80110a8:	460b      	mov	r3, r1
 80110aa:	4620      	mov	r0, r4
 80110ac:	4629      	mov	r1, r5
 80110ae:	f7ef f8a1 	bl	80001f4 <__aeabi_dsub>
 80110b2:	f1bb 0f00 	cmp.w	fp, #0
 80110b6:	4680      	mov	r8, r0
 80110b8:	4689      	mov	r9, r1
 80110ba:	dd70      	ble.n	801119e <__kernel_rem_pio2+0x24a>
 80110bc:	1e72      	subs	r2, r6, #1
 80110be:	ab0c      	add	r3, sp, #48	; 0x30
 80110c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80110c4:	9c04      	ldr	r4, [sp, #16]
 80110c6:	f1cb 0118 	rsb	r1, fp, #24
 80110ca:	fa40 f301 	asr.w	r3, r0, r1
 80110ce:	441c      	add	r4, r3
 80110d0:	408b      	lsls	r3, r1
 80110d2:	1ac0      	subs	r0, r0, r3
 80110d4:	ab0c      	add	r3, sp, #48	; 0x30
 80110d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80110da:	f1cb 0317 	rsb	r3, fp, #23
 80110de:	9404      	str	r4, [sp, #16]
 80110e0:	fa40 f303 	asr.w	r3, r0, r3
 80110e4:	9300      	str	r3, [sp, #0]
 80110e6:	9b00      	ldr	r3, [sp, #0]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	dd66      	ble.n	80111ba <__kernel_rem_pio2+0x266>
 80110ec:	2200      	movs	r2, #0
 80110ee:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80110f2:	4614      	mov	r4, r2
 80110f4:	9b04      	ldr	r3, [sp, #16]
 80110f6:	3301      	adds	r3, #1
 80110f8:	9304      	str	r3, [sp, #16]
 80110fa:	4296      	cmp	r6, r2
 80110fc:	f300 80ac 	bgt.w	8011258 <__kernel_rem_pio2+0x304>
 8011100:	f1bb 0f00 	cmp.w	fp, #0
 8011104:	dd07      	ble.n	8011116 <__kernel_rem_pio2+0x1c2>
 8011106:	f1bb 0f01 	cmp.w	fp, #1
 801110a:	f000 80b4 	beq.w	8011276 <__kernel_rem_pio2+0x322>
 801110e:	f1bb 0f02 	cmp.w	fp, #2
 8011112:	f000 80ba 	beq.w	801128a <__kernel_rem_pio2+0x336>
 8011116:	9b00      	ldr	r3, [sp, #0]
 8011118:	2b02      	cmp	r3, #2
 801111a:	d14e      	bne.n	80111ba <__kernel_rem_pio2+0x266>
 801111c:	4642      	mov	r2, r8
 801111e:	464b      	mov	r3, r9
 8011120:	2000      	movs	r0, #0
 8011122:	4948      	ldr	r1, [pc, #288]	; (8011244 <__kernel_rem_pio2+0x2f0>)
 8011124:	f7ef f866 	bl	80001f4 <__aeabi_dsub>
 8011128:	4680      	mov	r8, r0
 801112a:	4689      	mov	r9, r1
 801112c:	2c00      	cmp	r4, #0
 801112e:	d044      	beq.n	80111ba <__kernel_rem_pio2+0x266>
 8011130:	465a      	mov	r2, fp
 8011132:	2000      	movs	r0, #0
 8011134:	4943      	ldr	r1, [pc, #268]	; (8011244 <__kernel_rem_pio2+0x2f0>)
 8011136:	f000 fbbb 	bl	80118b0 <scalbn>
 801113a:	4602      	mov	r2, r0
 801113c:	460b      	mov	r3, r1
 801113e:	4640      	mov	r0, r8
 8011140:	4649      	mov	r1, r9
 8011142:	f7ef f857 	bl	80001f4 <__aeabi_dsub>
 8011146:	4680      	mov	r8, r0
 8011148:	4689      	mov	r9, r1
 801114a:	e036      	b.n	80111ba <__kernel_rem_pio2+0x266>
 801114c:	2200      	movs	r2, #0
 801114e:	4b3e      	ldr	r3, [pc, #248]	; (8011248 <__kernel_rem_pio2+0x2f4>)
 8011150:	4620      	mov	r0, r4
 8011152:	4629      	mov	r1, r5
 8011154:	f7ef fa06 	bl	8000564 <__aeabi_dmul>
 8011158:	f7ef fcb4 	bl	8000ac4 <__aeabi_d2iz>
 801115c:	f7ef f998 	bl	8000490 <__aeabi_i2d>
 8011160:	4602      	mov	r2, r0
 8011162:	460b      	mov	r3, r1
 8011164:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011168:	2200      	movs	r2, #0
 801116a:	4b38      	ldr	r3, [pc, #224]	; (801124c <__kernel_rem_pio2+0x2f8>)
 801116c:	f7ef f9fa 	bl	8000564 <__aeabi_dmul>
 8011170:	4602      	mov	r2, r0
 8011172:	460b      	mov	r3, r1
 8011174:	4620      	mov	r0, r4
 8011176:	4629      	mov	r1, r5
 8011178:	f7ef f83c 	bl	80001f4 <__aeabi_dsub>
 801117c:	f7ef fca2 	bl	8000ac4 <__aeabi_d2iz>
 8011180:	9b00      	ldr	r3, [sp, #0]
 8011182:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8011186:	f843 0b04 	str.w	r0, [r3], #4
 801118a:	9300      	str	r3, [sp, #0]
 801118c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011190:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011194:	f7ef f830 	bl	80001f8 <__adddf3>
 8011198:	4604      	mov	r4, r0
 801119a:	460d      	mov	r5, r1
 801119c:	e75f      	b.n	801105e <__kernel_rem_pio2+0x10a>
 801119e:	d105      	bne.n	80111ac <__kernel_rem_pio2+0x258>
 80111a0:	1e73      	subs	r3, r6, #1
 80111a2:	aa0c      	add	r2, sp, #48	; 0x30
 80111a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80111a8:	15c3      	asrs	r3, r0, #23
 80111aa:	e79b      	b.n	80110e4 <__kernel_rem_pio2+0x190>
 80111ac:	2200      	movs	r2, #0
 80111ae:	4b28      	ldr	r3, [pc, #160]	; (8011250 <__kernel_rem_pio2+0x2fc>)
 80111b0:	f7ef fc5e 	bl	8000a70 <__aeabi_dcmpge>
 80111b4:	2800      	cmp	r0, #0
 80111b6:	d13e      	bne.n	8011236 <__kernel_rem_pio2+0x2e2>
 80111b8:	9000      	str	r0, [sp, #0]
 80111ba:	2200      	movs	r2, #0
 80111bc:	2300      	movs	r3, #0
 80111be:	4640      	mov	r0, r8
 80111c0:	4649      	mov	r1, r9
 80111c2:	f7ef fc37 	bl	8000a34 <__aeabi_dcmpeq>
 80111c6:	2800      	cmp	r0, #0
 80111c8:	f000 80b1 	beq.w	801132e <__kernel_rem_pio2+0x3da>
 80111cc:	1e74      	subs	r4, r6, #1
 80111ce:	4623      	mov	r3, r4
 80111d0:	2200      	movs	r2, #0
 80111d2:	9902      	ldr	r1, [sp, #8]
 80111d4:	428b      	cmp	r3, r1
 80111d6:	da5f      	bge.n	8011298 <__kernel_rem_pio2+0x344>
 80111d8:	2a00      	cmp	r2, #0
 80111da:	d074      	beq.n	80112c6 <__kernel_rem_pio2+0x372>
 80111dc:	ab0c      	add	r3, sp, #48	; 0x30
 80111de:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80111e2:	f1ab 0b18 	sub.w	fp, fp, #24
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	f000 809f 	beq.w	801132a <__kernel_rem_pio2+0x3d6>
 80111ec:	465a      	mov	r2, fp
 80111ee:	2000      	movs	r0, #0
 80111f0:	4914      	ldr	r1, [pc, #80]	; (8011244 <__kernel_rem_pio2+0x2f0>)
 80111f2:	f000 fb5d 	bl	80118b0 <scalbn>
 80111f6:	46a2      	mov	sl, r4
 80111f8:	4606      	mov	r6, r0
 80111fa:	460f      	mov	r7, r1
 80111fc:	f04f 0800 	mov.w	r8, #0
 8011200:	ab70      	add	r3, sp, #448	; 0x1c0
 8011202:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8011248 <__kernel_rem_pio2+0x2f4>
 8011206:	00e5      	lsls	r5, r4, #3
 8011208:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 801120c:	f1ba 0f00 	cmp.w	sl, #0
 8011210:	f280 80c3 	bge.w	801139a <__kernel_rem_pio2+0x446>
 8011214:	4626      	mov	r6, r4
 8011216:	2e00      	cmp	r6, #0
 8011218:	f2c0 80f5 	blt.w	8011406 <__kernel_rem_pio2+0x4b2>
 801121c:	4b0d      	ldr	r3, [pc, #52]	; (8011254 <__kernel_rem_pio2+0x300>)
 801121e:	f04f 0a00 	mov.w	sl, #0
 8011222:	9307      	str	r3, [sp, #28]
 8011224:	ab70      	add	r3, sp, #448	; 0x1c0
 8011226:	f04f 0b00 	mov.w	fp, #0
 801122a:	f04f 0800 	mov.w	r8, #0
 801122e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8011232:	1ba7      	subs	r7, r4, r6
 8011234:	e0db      	b.n	80113ee <__kernel_rem_pio2+0x49a>
 8011236:	2302      	movs	r3, #2
 8011238:	9300      	str	r3, [sp, #0]
 801123a:	e757      	b.n	80110ec <__kernel_rem_pio2+0x198>
 801123c:	080183b8 	.word	0x080183b8
 8011240:	40200000 	.word	0x40200000
 8011244:	3ff00000 	.word	0x3ff00000
 8011248:	3e700000 	.word	0x3e700000
 801124c:	41700000 	.word	0x41700000
 8011250:	3fe00000 	.word	0x3fe00000
 8011254:	08018378 	.word	0x08018378
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	b944      	cbnz	r4, 801126e <__kernel_rem_pio2+0x31a>
 801125c:	b11b      	cbz	r3, 8011266 <__kernel_rem_pio2+0x312>
 801125e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011262:	603b      	str	r3, [r7, #0]
 8011264:	2301      	movs	r3, #1
 8011266:	461c      	mov	r4, r3
 8011268:	3201      	adds	r2, #1
 801126a:	3704      	adds	r7, #4
 801126c:	e745      	b.n	80110fa <__kernel_rem_pio2+0x1a6>
 801126e:	1acb      	subs	r3, r1, r3
 8011270:	603b      	str	r3, [r7, #0]
 8011272:	4623      	mov	r3, r4
 8011274:	e7f7      	b.n	8011266 <__kernel_rem_pio2+0x312>
 8011276:	1e72      	subs	r2, r6, #1
 8011278:	ab0c      	add	r3, sp, #48	; 0x30
 801127a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801127e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011282:	a90c      	add	r1, sp, #48	; 0x30
 8011284:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011288:	e745      	b.n	8011116 <__kernel_rem_pio2+0x1c2>
 801128a:	1e72      	subs	r2, r6, #1
 801128c:	ab0c      	add	r3, sp, #48	; 0x30
 801128e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011292:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011296:	e7f4      	b.n	8011282 <__kernel_rem_pio2+0x32e>
 8011298:	a90c      	add	r1, sp, #48	; 0x30
 801129a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801129e:	3b01      	subs	r3, #1
 80112a0:	430a      	orrs	r2, r1
 80112a2:	e796      	b.n	80111d2 <__kernel_rem_pio2+0x27e>
 80112a4:	3401      	adds	r4, #1
 80112a6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80112aa:	2a00      	cmp	r2, #0
 80112ac:	d0fa      	beq.n	80112a4 <__kernel_rem_pio2+0x350>
 80112ae:	9b08      	ldr	r3, [sp, #32]
 80112b0:	f106 0801 	add.w	r8, r6, #1
 80112b4:	18f5      	adds	r5, r6, r3
 80112b6:	ab20      	add	r3, sp, #128	; 0x80
 80112b8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80112bc:	4434      	add	r4, r6
 80112be:	4544      	cmp	r4, r8
 80112c0:	da04      	bge.n	80112cc <__kernel_rem_pio2+0x378>
 80112c2:	4626      	mov	r6, r4
 80112c4:	e6bf      	b.n	8011046 <__kernel_rem_pio2+0xf2>
 80112c6:	2401      	movs	r4, #1
 80112c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80112ca:	e7ec      	b.n	80112a6 <__kernel_rem_pio2+0x352>
 80112cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112ce:	f04f 0900 	mov.w	r9, #0
 80112d2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80112d6:	f7ef f8db 	bl	8000490 <__aeabi_i2d>
 80112da:	2600      	movs	r6, #0
 80112dc:	2700      	movs	r7, #0
 80112de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112e0:	e9c5 0100 	strd	r0, r1, [r5]
 80112e4:	3b08      	subs	r3, #8
 80112e6:	9300      	str	r3, [sp, #0]
 80112e8:	9504      	str	r5, [sp, #16]
 80112ea:	9b07      	ldr	r3, [sp, #28]
 80112ec:	4599      	cmp	r9, r3
 80112ee:	dd05      	ble.n	80112fc <__kernel_rem_pio2+0x3a8>
 80112f0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80112f4:	f108 0801 	add.w	r8, r8, #1
 80112f8:	3508      	adds	r5, #8
 80112fa:	e7e0      	b.n	80112be <__kernel_rem_pio2+0x36a>
 80112fc:	f8dd c010 	ldr.w	ip, [sp, #16]
 8011300:	9900      	ldr	r1, [sp, #0]
 8011302:	f109 0901 	add.w	r9, r9, #1
 8011306:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 801130a:	9100      	str	r1, [sp, #0]
 801130c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8011310:	f8cd c010 	str.w	ip, [sp, #16]
 8011314:	f7ef f926 	bl	8000564 <__aeabi_dmul>
 8011318:	4602      	mov	r2, r0
 801131a:	460b      	mov	r3, r1
 801131c:	4630      	mov	r0, r6
 801131e:	4639      	mov	r1, r7
 8011320:	f7ee ff6a 	bl	80001f8 <__adddf3>
 8011324:	4606      	mov	r6, r0
 8011326:	460f      	mov	r7, r1
 8011328:	e7df      	b.n	80112ea <__kernel_rem_pio2+0x396>
 801132a:	3c01      	subs	r4, #1
 801132c:	e756      	b.n	80111dc <__kernel_rem_pio2+0x288>
 801132e:	f1cb 0200 	rsb	r2, fp, #0
 8011332:	4640      	mov	r0, r8
 8011334:	4649      	mov	r1, r9
 8011336:	f000 fabb 	bl	80118b0 <scalbn>
 801133a:	2200      	movs	r2, #0
 801133c:	4ba4      	ldr	r3, [pc, #656]	; (80115d0 <__kernel_rem_pio2+0x67c>)
 801133e:	4604      	mov	r4, r0
 8011340:	460d      	mov	r5, r1
 8011342:	f7ef fb95 	bl	8000a70 <__aeabi_dcmpge>
 8011346:	b1f8      	cbz	r0, 8011388 <__kernel_rem_pio2+0x434>
 8011348:	2200      	movs	r2, #0
 801134a:	4ba2      	ldr	r3, [pc, #648]	; (80115d4 <__kernel_rem_pio2+0x680>)
 801134c:	4620      	mov	r0, r4
 801134e:	4629      	mov	r1, r5
 8011350:	f7ef f908 	bl	8000564 <__aeabi_dmul>
 8011354:	f7ef fbb6 	bl	8000ac4 <__aeabi_d2iz>
 8011358:	4607      	mov	r7, r0
 801135a:	f7ef f899 	bl	8000490 <__aeabi_i2d>
 801135e:	2200      	movs	r2, #0
 8011360:	4b9b      	ldr	r3, [pc, #620]	; (80115d0 <__kernel_rem_pio2+0x67c>)
 8011362:	f7ef f8ff 	bl	8000564 <__aeabi_dmul>
 8011366:	460b      	mov	r3, r1
 8011368:	4602      	mov	r2, r0
 801136a:	4629      	mov	r1, r5
 801136c:	4620      	mov	r0, r4
 801136e:	f7ee ff41 	bl	80001f4 <__aeabi_dsub>
 8011372:	f7ef fba7 	bl	8000ac4 <__aeabi_d2iz>
 8011376:	1c74      	adds	r4, r6, #1
 8011378:	ab0c      	add	r3, sp, #48	; 0x30
 801137a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 801137e:	f10b 0b18 	add.w	fp, fp, #24
 8011382:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8011386:	e731      	b.n	80111ec <__kernel_rem_pio2+0x298>
 8011388:	4620      	mov	r0, r4
 801138a:	4629      	mov	r1, r5
 801138c:	f7ef fb9a 	bl	8000ac4 <__aeabi_d2iz>
 8011390:	ab0c      	add	r3, sp, #48	; 0x30
 8011392:	4634      	mov	r4, r6
 8011394:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8011398:	e728      	b.n	80111ec <__kernel_rem_pio2+0x298>
 801139a:	ab0c      	add	r3, sp, #48	; 0x30
 801139c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80113a0:	f7ef f876 	bl	8000490 <__aeabi_i2d>
 80113a4:	4632      	mov	r2, r6
 80113a6:	463b      	mov	r3, r7
 80113a8:	f7ef f8dc 	bl	8000564 <__aeabi_dmul>
 80113ac:	4642      	mov	r2, r8
 80113ae:	e86b 0102 	strd	r0, r1, [fp], #-8
 80113b2:	464b      	mov	r3, r9
 80113b4:	4630      	mov	r0, r6
 80113b6:	4639      	mov	r1, r7
 80113b8:	f7ef f8d4 	bl	8000564 <__aeabi_dmul>
 80113bc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80113c0:	4606      	mov	r6, r0
 80113c2:	460f      	mov	r7, r1
 80113c4:	e722      	b.n	801120c <__kernel_rem_pio2+0x2b8>
 80113c6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80113ca:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80113ce:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80113d2:	f8cd c01c 	str.w	ip, [sp, #28]
 80113d6:	f7ef f8c5 	bl	8000564 <__aeabi_dmul>
 80113da:	4602      	mov	r2, r0
 80113dc:	460b      	mov	r3, r1
 80113de:	4650      	mov	r0, sl
 80113e0:	4659      	mov	r1, fp
 80113e2:	f7ee ff09 	bl	80001f8 <__adddf3>
 80113e6:	4682      	mov	sl, r0
 80113e8:	468b      	mov	fp, r1
 80113ea:	f108 0801 	add.w	r8, r8, #1
 80113ee:	9b02      	ldr	r3, [sp, #8]
 80113f0:	4598      	cmp	r8, r3
 80113f2:	dc01      	bgt.n	80113f8 <__kernel_rem_pio2+0x4a4>
 80113f4:	45b8      	cmp	r8, r7
 80113f6:	dde6      	ble.n	80113c6 <__kernel_rem_pio2+0x472>
 80113f8:	ab48      	add	r3, sp, #288	; 0x120
 80113fa:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80113fe:	e9c7 ab00 	strd	sl, fp, [r7]
 8011402:	3e01      	subs	r6, #1
 8011404:	e707      	b.n	8011216 <__kernel_rem_pio2+0x2c2>
 8011406:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8011408:	2b02      	cmp	r3, #2
 801140a:	dc09      	bgt.n	8011420 <__kernel_rem_pio2+0x4cc>
 801140c:	2b00      	cmp	r3, #0
 801140e:	dc32      	bgt.n	8011476 <__kernel_rem_pio2+0x522>
 8011410:	d05a      	beq.n	80114c8 <__kernel_rem_pio2+0x574>
 8011412:	9b04      	ldr	r3, [sp, #16]
 8011414:	f003 0007 	and.w	r0, r3, #7
 8011418:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801141c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011420:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8011422:	2b03      	cmp	r3, #3
 8011424:	d1f5      	bne.n	8011412 <__kernel_rem_pio2+0x4be>
 8011426:	ab48      	add	r3, sp, #288	; 0x120
 8011428:	441d      	add	r5, r3
 801142a:	46aa      	mov	sl, r5
 801142c:	46a3      	mov	fp, r4
 801142e:	f1bb 0f00 	cmp.w	fp, #0
 8011432:	dc76      	bgt.n	8011522 <__kernel_rem_pio2+0x5ce>
 8011434:	46aa      	mov	sl, r5
 8011436:	46a3      	mov	fp, r4
 8011438:	f1bb 0f01 	cmp.w	fp, #1
 801143c:	f300 8090 	bgt.w	8011560 <__kernel_rem_pio2+0x60c>
 8011440:	2700      	movs	r7, #0
 8011442:	463e      	mov	r6, r7
 8011444:	2c01      	cmp	r4, #1
 8011446:	f300 80aa 	bgt.w	801159e <__kernel_rem_pio2+0x64a>
 801144a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 801144e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8011452:	9b00      	ldr	r3, [sp, #0]
 8011454:	2b00      	cmp	r3, #0
 8011456:	f040 80ac 	bne.w	80115b2 <__kernel_rem_pio2+0x65e>
 801145a:	4603      	mov	r3, r0
 801145c:	462a      	mov	r2, r5
 801145e:	9806      	ldr	r0, [sp, #24]
 8011460:	e9c0 2300 	strd	r2, r3, [r0]
 8011464:	4622      	mov	r2, r4
 8011466:	460b      	mov	r3, r1
 8011468:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801146c:	463a      	mov	r2, r7
 801146e:	4633      	mov	r3, r6
 8011470:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8011474:	e7cd      	b.n	8011412 <__kernel_rem_pio2+0x4be>
 8011476:	2000      	movs	r0, #0
 8011478:	46a0      	mov	r8, r4
 801147a:	4601      	mov	r1, r0
 801147c:	ab48      	add	r3, sp, #288	; 0x120
 801147e:	441d      	add	r5, r3
 8011480:	f1b8 0f00 	cmp.w	r8, #0
 8011484:	da3a      	bge.n	80114fc <__kernel_rem_pio2+0x5a8>
 8011486:	9b00      	ldr	r3, [sp, #0]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d03e      	beq.n	801150a <__kernel_rem_pio2+0x5b6>
 801148c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8011490:	4602      	mov	r2, r0
 8011492:	462b      	mov	r3, r5
 8011494:	9d06      	ldr	r5, [sp, #24]
 8011496:	2601      	movs	r6, #1
 8011498:	e9c5 2300 	strd	r2, r3, [r5]
 801149c:	460b      	mov	r3, r1
 801149e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80114a2:	f7ee fea7 	bl	80001f4 <__aeabi_dsub>
 80114a6:	4684      	mov	ip, r0
 80114a8:	460f      	mov	r7, r1
 80114aa:	ad48      	add	r5, sp, #288	; 0x120
 80114ac:	42b4      	cmp	r4, r6
 80114ae:	f105 0508 	add.w	r5, r5, #8
 80114b2:	da2c      	bge.n	801150e <__kernel_rem_pio2+0x5ba>
 80114b4:	9b00      	ldr	r3, [sp, #0]
 80114b6:	b10b      	cbz	r3, 80114bc <__kernel_rem_pio2+0x568>
 80114b8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80114bc:	4662      	mov	r2, ip
 80114be:	463b      	mov	r3, r7
 80114c0:	9906      	ldr	r1, [sp, #24]
 80114c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80114c6:	e7a4      	b.n	8011412 <__kernel_rem_pio2+0x4be>
 80114c8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80114ca:	ab48      	add	r3, sp, #288	; 0x120
 80114cc:	4637      	mov	r7, r6
 80114ce:	441d      	add	r5, r3
 80114d0:	2c00      	cmp	r4, #0
 80114d2:	da09      	bge.n	80114e8 <__kernel_rem_pio2+0x594>
 80114d4:	9b00      	ldr	r3, [sp, #0]
 80114d6:	b10b      	cbz	r3, 80114dc <__kernel_rem_pio2+0x588>
 80114d8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80114dc:	4632      	mov	r2, r6
 80114de:	463b      	mov	r3, r7
 80114e0:	9906      	ldr	r1, [sp, #24]
 80114e2:	e9c1 2300 	strd	r2, r3, [r1]
 80114e6:	e794      	b.n	8011412 <__kernel_rem_pio2+0x4be>
 80114e8:	4630      	mov	r0, r6
 80114ea:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80114ee:	4639      	mov	r1, r7
 80114f0:	f7ee fe82 	bl	80001f8 <__adddf3>
 80114f4:	3c01      	subs	r4, #1
 80114f6:	4606      	mov	r6, r0
 80114f8:	460f      	mov	r7, r1
 80114fa:	e7e9      	b.n	80114d0 <__kernel_rem_pio2+0x57c>
 80114fc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8011500:	f7ee fe7a 	bl	80001f8 <__adddf3>
 8011504:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011508:	e7ba      	b.n	8011480 <__kernel_rem_pio2+0x52c>
 801150a:	460d      	mov	r5, r1
 801150c:	e7c0      	b.n	8011490 <__kernel_rem_pio2+0x53c>
 801150e:	4660      	mov	r0, ip
 8011510:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011514:	4639      	mov	r1, r7
 8011516:	f7ee fe6f 	bl	80001f8 <__adddf3>
 801151a:	3601      	adds	r6, #1
 801151c:	4684      	mov	ip, r0
 801151e:	460f      	mov	r7, r1
 8011520:	e7c4      	b.n	80114ac <__kernel_rem_pio2+0x558>
 8011522:	e9da 6700 	ldrd	r6, r7, [sl]
 8011526:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 801152a:	4632      	mov	r2, r6
 801152c:	463b      	mov	r3, r7
 801152e:	4640      	mov	r0, r8
 8011530:	4649      	mov	r1, r9
 8011532:	f7ee fe61 	bl	80001f8 <__adddf3>
 8011536:	4602      	mov	r2, r0
 8011538:	460b      	mov	r3, r1
 801153a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801153e:	4640      	mov	r0, r8
 8011540:	4649      	mov	r1, r9
 8011542:	f7ee fe57 	bl	80001f4 <__aeabi_dsub>
 8011546:	4632      	mov	r2, r6
 8011548:	463b      	mov	r3, r7
 801154a:	f7ee fe55 	bl	80001f8 <__adddf3>
 801154e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011552:	e86a 0102 	strd	r0, r1, [sl], #-8
 8011556:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801155a:	e9ca 2300 	strd	r2, r3, [sl]
 801155e:	e766      	b.n	801142e <__kernel_rem_pio2+0x4da>
 8011560:	e9da 8900 	ldrd	r8, r9, [sl]
 8011564:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8011568:	4642      	mov	r2, r8
 801156a:	464b      	mov	r3, r9
 801156c:	4630      	mov	r0, r6
 801156e:	4639      	mov	r1, r7
 8011570:	f7ee fe42 	bl	80001f8 <__adddf3>
 8011574:	4602      	mov	r2, r0
 8011576:	460b      	mov	r3, r1
 8011578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801157c:	4630      	mov	r0, r6
 801157e:	4639      	mov	r1, r7
 8011580:	f7ee fe38 	bl	80001f4 <__aeabi_dsub>
 8011584:	4642      	mov	r2, r8
 8011586:	464b      	mov	r3, r9
 8011588:	f7ee fe36 	bl	80001f8 <__adddf3>
 801158c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011590:	e86a 0102 	strd	r0, r1, [sl], #-8
 8011594:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011598:	e9ca 2300 	strd	r2, r3, [sl]
 801159c:	e74c      	b.n	8011438 <__kernel_rem_pio2+0x4e4>
 801159e:	4638      	mov	r0, r7
 80115a0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80115a4:	4631      	mov	r1, r6
 80115a6:	f7ee fe27 	bl	80001f8 <__adddf3>
 80115aa:	3c01      	subs	r4, #1
 80115ac:	4607      	mov	r7, r0
 80115ae:	460e      	mov	r6, r1
 80115b0:	e748      	b.n	8011444 <__kernel_rem_pio2+0x4f0>
 80115b2:	9b06      	ldr	r3, [sp, #24]
 80115b4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80115b8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80115bc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80115c0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80115c4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80115c8:	601d      	str	r5, [r3, #0]
 80115ca:	615e      	str	r6, [r3, #20]
 80115cc:	e721      	b.n	8011412 <__kernel_rem_pio2+0x4be>
 80115ce:	bf00      	nop
 80115d0:	41700000 	.word	0x41700000
 80115d4:	3e700000 	.word	0x3e700000

080115d8 <__kernel_sin>:
 80115d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115dc:	b086      	sub	sp, #24
 80115de:	e9cd 2300 	strd	r2, r3, [sp]
 80115e2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80115e6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80115ea:	4682      	mov	sl, r0
 80115ec:	460c      	mov	r4, r1
 80115ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80115f0:	da03      	bge.n	80115fa <__kernel_sin+0x22>
 80115f2:	f7ef fa67 	bl	8000ac4 <__aeabi_d2iz>
 80115f6:	2800      	cmp	r0, #0
 80115f8:	d050      	beq.n	801169c <__kernel_sin+0xc4>
 80115fa:	4652      	mov	r2, sl
 80115fc:	4623      	mov	r3, r4
 80115fe:	4650      	mov	r0, sl
 8011600:	4621      	mov	r1, r4
 8011602:	f7ee ffaf 	bl	8000564 <__aeabi_dmul>
 8011606:	4606      	mov	r6, r0
 8011608:	460f      	mov	r7, r1
 801160a:	4602      	mov	r2, r0
 801160c:	460b      	mov	r3, r1
 801160e:	4650      	mov	r0, sl
 8011610:	4621      	mov	r1, r4
 8011612:	f7ee ffa7 	bl	8000564 <__aeabi_dmul>
 8011616:	a33e      	add	r3, pc, #248	; (adr r3, 8011710 <__kernel_sin+0x138>)
 8011618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801161c:	4680      	mov	r8, r0
 801161e:	4689      	mov	r9, r1
 8011620:	4630      	mov	r0, r6
 8011622:	4639      	mov	r1, r7
 8011624:	f7ee ff9e 	bl	8000564 <__aeabi_dmul>
 8011628:	a33b      	add	r3, pc, #236	; (adr r3, 8011718 <__kernel_sin+0x140>)
 801162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801162e:	f7ee fde1 	bl	80001f4 <__aeabi_dsub>
 8011632:	4632      	mov	r2, r6
 8011634:	463b      	mov	r3, r7
 8011636:	f7ee ff95 	bl	8000564 <__aeabi_dmul>
 801163a:	a339      	add	r3, pc, #228	; (adr r3, 8011720 <__kernel_sin+0x148>)
 801163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011640:	f7ee fdda 	bl	80001f8 <__adddf3>
 8011644:	4632      	mov	r2, r6
 8011646:	463b      	mov	r3, r7
 8011648:	f7ee ff8c 	bl	8000564 <__aeabi_dmul>
 801164c:	a336      	add	r3, pc, #216	; (adr r3, 8011728 <__kernel_sin+0x150>)
 801164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011652:	f7ee fdcf 	bl	80001f4 <__aeabi_dsub>
 8011656:	4632      	mov	r2, r6
 8011658:	463b      	mov	r3, r7
 801165a:	f7ee ff83 	bl	8000564 <__aeabi_dmul>
 801165e:	a334      	add	r3, pc, #208	; (adr r3, 8011730 <__kernel_sin+0x158>)
 8011660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011664:	f7ee fdc8 	bl	80001f8 <__adddf3>
 8011668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801166c:	b9dd      	cbnz	r5, 80116a6 <__kernel_sin+0xce>
 801166e:	4602      	mov	r2, r0
 8011670:	460b      	mov	r3, r1
 8011672:	4630      	mov	r0, r6
 8011674:	4639      	mov	r1, r7
 8011676:	f7ee ff75 	bl	8000564 <__aeabi_dmul>
 801167a:	a32f      	add	r3, pc, #188	; (adr r3, 8011738 <__kernel_sin+0x160>)
 801167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011680:	f7ee fdb8 	bl	80001f4 <__aeabi_dsub>
 8011684:	4642      	mov	r2, r8
 8011686:	464b      	mov	r3, r9
 8011688:	f7ee ff6c 	bl	8000564 <__aeabi_dmul>
 801168c:	4602      	mov	r2, r0
 801168e:	460b      	mov	r3, r1
 8011690:	4650      	mov	r0, sl
 8011692:	4621      	mov	r1, r4
 8011694:	f7ee fdb0 	bl	80001f8 <__adddf3>
 8011698:	4682      	mov	sl, r0
 801169a:	460c      	mov	r4, r1
 801169c:	4650      	mov	r0, sl
 801169e:	4621      	mov	r1, r4
 80116a0:	b006      	add	sp, #24
 80116a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116a6:	2200      	movs	r2, #0
 80116a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116ac:	4b24      	ldr	r3, [pc, #144]	; (8011740 <__kernel_sin+0x168>)
 80116ae:	f7ee ff59 	bl	8000564 <__aeabi_dmul>
 80116b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80116b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80116ba:	4640      	mov	r0, r8
 80116bc:	4649      	mov	r1, r9
 80116be:	f7ee ff51 	bl	8000564 <__aeabi_dmul>
 80116c2:	4602      	mov	r2, r0
 80116c4:	460b      	mov	r3, r1
 80116c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80116ca:	f7ee fd93 	bl	80001f4 <__aeabi_dsub>
 80116ce:	4632      	mov	r2, r6
 80116d0:	463b      	mov	r3, r7
 80116d2:	f7ee ff47 	bl	8000564 <__aeabi_dmul>
 80116d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80116da:	f7ee fd8b 	bl	80001f4 <__aeabi_dsub>
 80116de:	a316      	add	r3, pc, #88	; (adr r3, 8011738 <__kernel_sin+0x160>)
 80116e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e4:	4606      	mov	r6, r0
 80116e6:	460f      	mov	r7, r1
 80116e8:	4640      	mov	r0, r8
 80116ea:	4649      	mov	r1, r9
 80116ec:	f7ee ff3a 	bl	8000564 <__aeabi_dmul>
 80116f0:	4602      	mov	r2, r0
 80116f2:	460b      	mov	r3, r1
 80116f4:	4630      	mov	r0, r6
 80116f6:	4639      	mov	r1, r7
 80116f8:	f7ee fd7e 	bl	80001f8 <__adddf3>
 80116fc:	4602      	mov	r2, r0
 80116fe:	460b      	mov	r3, r1
 8011700:	4650      	mov	r0, sl
 8011702:	4621      	mov	r1, r4
 8011704:	f7ee fd76 	bl	80001f4 <__aeabi_dsub>
 8011708:	e7c6      	b.n	8011698 <__kernel_sin+0xc0>
 801170a:	bf00      	nop
 801170c:	f3af 8000 	nop.w
 8011710:	5acfd57c 	.word	0x5acfd57c
 8011714:	3de5d93a 	.word	0x3de5d93a
 8011718:	8a2b9ceb 	.word	0x8a2b9ceb
 801171c:	3e5ae5e6 	.word	0x3e5ae5e6
 8011720:	57b1fe7d 	.word	0x57b1fe7d
 8011724:	3ec71de3 	.word	0x3ec71de3
 8011728:	19c161d5 	.word	0x19c161d5
 801172c:	3f2a01a0 	.word	0x3f2a01a0
 8011730:	1110f8a6 	.word	0x1110f8a6
 8011734:	3f811111 	.word	0x3f811111
 8011738:	55555549 	.word	0x55555549
 801173c:	3fc55555 	.word	0x3fc55555
 8011740:	3fe00000 	.word	0x3fe00000

08011744 <with_errno>:
 8011744:	b570      	push	{r4, r5, r6, lr}
 8011746:	4604      	mov	r4, r0
 8011748:	460d      	mov	r5, r1
 801174a:	4616      	mov	r6, r2
 801174c:	f000 f92e 	bl	80119ac <__errno>
 8011750:	4629      	mov	r1, r5
 8011752:	6006      	str	r6, [r0, #0]
 8011754:	4620      	mov	r0, r4
 8011756:	bd70      	pop	{r4, r5, r6, pc}

08011758 <xflow>:
 8011758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801175a:	4615      	mov	r5, r2
 801175c:	461c      	mov	r4, r3
 801175e:	b180      	cbz	r0, 8011782 <xflow+0x2a>
 8011760:	4610      	mov	r0, r2
 8011762:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011766:	e9cd 0100 	strd	r0, r1, [sp]
 801176a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801176e:	4628      	mov	r0, r5
 8011770:	4621      	mov	r1, r4
 8011772:	f7ee fef7 	bl	8000564 <__aeabi_dmul>
 8011776:	2222      	movs	r2, #34	; 0x22
 8011778:	b003      	add	sp, #12
 801177a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801177e:	f7ff bfe1 	b.w	8011744 <with_errno>
 8011782:	4610      	mov	r0, r2
 8011784:	4619      	mov	r1, r3
 8011786:	e7ee      	b.n	8011766 <xflow+0xe>

08011788 <__math_uflow>:
 8011788:	2200      	movs	r2, #0
 801178a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801178e:	f7ff bfe3 	b.w	8011758 <xflow>

08011792 <__math_oflow>:
 8011792:	2200      	movs	r2, #0
 8011794:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011798:	f7ff bfde 	b.w	8011758 <xflow>

0801179c <fabs>:
 801179c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80117a0:	4770      	bx	lr

080117a2 <finite>:
 80117a2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80117a6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80117aa:	0fc0      	lsrs	r0, r0, #31
 80117ac:	4770      	bx	lr
	...

080117b0 <floor>:
 80117b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117b4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80117b8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80117bc:	2e13      	cmp	r6, #19
 80117be:	4602      	mov	r2, r0
 80117c0:	460b      	mov	r3, r1
 80117c2:	4607      	mov	r7, r0
 80117c4:	460c      	mov	r4, r1
 80117c6:	4605      	mov	r5, r0
 80117c8:	dc33      	bgt.n	8011832 <floor+0x82>
 80117ca:	2e00      	cmp	r6, #0
 80117cc:	da14      	bge.n	80117f8 <floor+0x48>
 80117ce:	a334      	add	r3, pc, #208	; (adr r3, 80118a0 <floor+0xf0>)
 80117d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d4:	f7ee fd10 	bl	80001f8 <__adddf3>
 80117d8:	2200      	movs	r2, #0
 80117da:	2300      	movs	r3, #0
 80117dc:	f7ef f952 	bl	8000a84 <__aeabi_dcmpgt>
 80117e0:	b138      	cbz	r0, 80117f2 <floor+0x42>
 80117e2:	2c00      	cmp	r4, #0
 80117e4:	da58      	bge.n	8011898 <floor+0xe8>
 80117e6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80117ea:	431d      	orrs	r5, r3
 80117ec:	d001      	beq.n	80117f2 <floor+0x42>
 80117ee:	2500      	movs	r5, #0
 80117f0:	4c2d      	ldr	r4, [pc, #180]	; (80118a8 <floor+0xf8>)
 80117f2:	4623      	mov	r3, r4
 80117f4:	462f      	mov	r7, r5
 80117f6:	e025      	b.n	8011844 <floor+0x94>
 80117f8:	4a2c      	ldr	r2, [pc, #176]	; (80118ac <floor+0xfc>)
 80117fa:	fa42 f806 	asr.w	r8, r2, r6
 80117fe:	ea01 0208 	and.w	r2, r1, r8
 8011802:	4302      	orrs	r2, r0
 8011804:	d01e      	beq.n	8011844 <floor+0x94>
 8011806:	a326      	add	r3, pc, #152	; (adr r3, 80118a0 <floor+0xf0>)
 8011808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801180c:	f7ee fcf4 	bl	80001f8 <__adddf3>
 8011810:	2200      	movs	r2, #0
 8011812:	2300      	movs	r3, #0
 8011814:	f7ef f936 	bl	8000a84 <__aeabi_dcmpgt>
 8011818:	2800      	cmp	r0, #0
 801181a:	d0ea      	beq.n	80117f2 <floor+0x42>
 801181c:	2c00      	cmp	r4, #0
 801181e:	bfbe      	ittt	lt
 8011820:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011824:	fa43 f606 	asrlt.w	r6, r3, r6
 8011828:	19a4      	addlt	r4, r4, r6
 801182a:	2500      	movs	r5, #0
 801182c:	ea24 0408 	bic.w	r4, r4, r8
 8011830:	e7df      	b.n	80117f2 <floor+0x42>
 8011832:	2e33      	cmp	r6, #51	; 0x33
 8011834:	dd0a      	ble.n	801184c <floor+0x9c>
 8011836:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801183a:	d103      	bne.n	8011844 <floor+0x94>
 801183c:	f7ee fcdc 	bl	80001f8 <__adddf3>
 8011840:	4607      	mov	r7, r0
 8011842:	460b      	mov	r3, r1
 8011844:	4638      	mov	r0, r7
 8011846:	4619      	mov	r1, r3
 8011848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801184c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011850:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8011854:	fa22 f808 	lsr.w	r8, r2, r8
 8011858:	ea18 0f00 	tst.w	r8, r0
 801185c:	d0f2      	beq.n	8011844 <floor+0x94>
 801185e:	a310      	add	r3, pc, #64	; (adr r3, 80118a0 <floor+0xf0>)
 8011860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011864:	f7ee fcc8 	bl	80001f8 <__adddf3>
 8011868:	2200      	movs	r2, #0
 801186a:	2300      	movs	r3, #0
 801186c:	f7ef f90a 	bl	8000a84 <__aeabi_dcmpgt>
 8011870:	2800      	cmp	r0, #0
 8011872:	d0be      	beq.n	80117f2 <floor+0x42>
 8011874:	2c00      	cmp	r4, #0
 8011876:	da02      	bge.n	801187e <floor+0xce>
 8011878:	2e14      	cmp	r6, #20
 801187a:	d103      	bne.n	8011884 <floor+0xd4>
 801187c:	3401      	adds	r4, #1
 801187e:	ea25 0508 	bic.w	r5, r5, r8
 8011882:	e7b6      	b.n	80117f2 <floor+0x42>
 8011884:	2301      	movs	r3, #1
 8011886:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801188a:	fa03 f606 	lsl.w	r6, r3, r6
 801188e:	4435      	add	r5, r6
 8011890:	42bd      	cmp	r5, r7
 8011892:	bf38      	it	cc
 8011894:	18e4      	addcc	r4, r4, r3
 8011896:	e7f2      	b.n	801187e <floor+0xce>
 8011898:	2500      	movs	r5, #0
 801189a:	462c      	mov	r4, r5
 801189c:	e7a9      	b.n	80117f2 <floor+0x42>
 801189e:	bf00      	nop
 80118a0:	8800759c 	.word	0x8800759c
 80118a4:	7e37e43c 	.word	0x7e37e43c
 80118a8:	bff00000 	.word	0xbff00000
 80118ac:	000fffff 	.word	0x000fffff

080118b0 <scalbn>:
 80118b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118b2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80118b6:	4604      	mov	r4, r0
 80118b8:	460d      	mov	r5, r1
 80118ba:	4617      	mov	r7, r2
 80118bc:	460b      	mov	r3, r1
 80118be:	b996      	cbnz	r6, 80118e6 <scalbn+0x36>
 80118c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80118c4:	4303      	orrs	r3, r0
 80118c6:	d039      	beq.n	801193c <scalbn+0x8c>
 80118c8:	4b33      	ldr	r3, [pc, #204]	; (8011998 <scalbn+0xe8>)
 80118ca:	2200      	movs	r2, #0
 80118cc:	f7ee fe4a 	bl	8000564 <__aeabi_dmul>
 80118d0:	4b32      	ldr	r3, [pc, #200]	; (801199c <scalbn+0xec>)
 80118d2:	4604      	mov	r4, r0
 80118d4:	429f      	cmp	r7, r3
 80118d6:	460d      	mov	r5, r1
 80118d8:	da0f      	bge.n	80118fa <scalbn+0x4a>
 80118da:	a32b      	add	r3, pc, #172	; (adr r3, 8011988 <scalbn+0xd8>)
 80118dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e0:	f7ee fe40 	bl	8000564 <__aeabi_dmul>
 80118e4:	e006      	b.n	80118f4 <scalbn+0x44>
 80118e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80118ea:	4296      	cmp	r6, r2
 80118ec:	d10a      	bne.n	8011904 <scalbn+0x54>
 80118ee:	4602      	mov	r2, r0
 80118f0:	f7ee fc82 	bl	80001f8 <__adddf3>
 80118f4:	4604      	mov	r4, r0
 80118f6:	460d      	mov	r5, r1
 80118f8:	e020      	b.n	801193c <scalbn+0x8c>
 80118fa:	460b      	mov	r3, r1
 80118fc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011900:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8011904:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8011908:	19b9      	adds	r1, r7, r6
 801190a:	4291      	cmp	r1, r2
 801190c:	dd0e      	ble.n	801192c <scalbn+0x7c>
 801190e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8011912:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8011916:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 801191a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 801191e:	4820      	ldr	r0, [pc, #128]	; (80119a0 <scalbn+0xf0>)
 8011920:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8011924:	a31a      	add	r3, pc, #104	; (adr r3, 8011990 <scalbn+0xe0>)
 8011926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801192a:	e7d9      	b.n	80118e0 <scalbn+0x30>
 801192c:	2900      	cmp	r1, #0
 801192e:	dd08      	ble.n	8011942 <scalbn+0x92>
 8011930:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011934:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011938:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 801193c:	4620      	mov	r0, r4
 801193e:	4629      	mov	r1, r5
 8011940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011942:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8011946:	da12      	bge.n	801196e <scalbn+0xbe>
 8011948:	f24c 3350 	movw	r3, #50000	; 0xc350
 801194c:	429f      	cmp	r7, r3
 801194e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8011952:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8011956:	dcdc      	bgt.n	8011912 <scalbn+0x62>
 8011958:	a30b      	add	r3, pc, #44	; (adr r3, 8011988 <scalbn+0xd8>)
 801195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801195e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8011962:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8011966:	480f      	ldr	r0, [pc, #60]	; (80119a4 <scalbn+0xf4>)
 8011968:	f041 011f 	orr.w	r1, r1, #31
 801196c:	e7b8      	b.n	80118e0 <scalbn+0x30>
 801196e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011972:	3136      	adds	r1, #54	; 0x36
 8011974:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011978:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 801197c:	4620      	mov	r0, r4
 801197e:	4629      	mov	r1, r5
 8011980:	2200      	movs	r2, #0
 8011982:	4b09      	ldr	r3, [pc, #36]	; (80119a8 <scalbn+0xf8>)
 8011984:	e7ac      	b.n	80118e0 <scalbn+0x30>
 8011986:	bf00      	nop
 8011988:	c2f8f359 	.word	0xc2f8f359
 801198c:	01a56e1f 	.word	0x01a56e1f
 8011990:	8800759c 	.word	0x8800759c
 8011994:	7e37e43c 	.word	0x7e37e43c
 8011998:	43500000 	.word	0x43500000
 801199c:	ffff3cb0 	.word	0xffff3cb0
 80119a0:	8800759c 	.word	0x8800759c
 80119a4:	c2f8f359 	.word	0xc2f8f359
 80119a8:	3c900000 	.word	0x3c900000

080119ac <__errno>:
 80119ac:	4b01      	ldr	r3, [pc, #4]	; (80119b4 <__errno+0x8>)
 80119ae:	6818      	ldr	r0, [r3, #0]
 80119b0:	4770      	bx	lr
 80119b2:	bf00      	nop
 80119b4:	20000038 	.word	0x20000038

080119b8 <__libc_init_array>:
 80119b8:	b570      	push	{r4, r5, r6, lr}
 80119ba:	2600      	movs	r6, #0
 80119bc:	4d0c      	ldr	r5, [pc, #48]	; (80119f0 <__libc_init_array+0x38>)
 80119be:	4c0d      	ldr	r4, [pc, #52]	; (80119f4 <__libc_init_array+0x3c>)
 80119c0:	1b64      	subs	r4, r4, r5
 80119c2:	10a4      	asrs	r4, r4, #2
 80119c4:	42a6      	cmp	r6, r4
 80119c6:	d109      	bne.n	80119dc <__libc_init_array+0x24>
 80119c8:	f004 fc7e 	bl	80162c8 <_init>
 80119cc:	2600      	movs	r6, #0
 80119ce:	4d0a      	ldr	r5, [pc, #40]	; (80119f8 <__libc_init_array+0x40>)
 80119d0:	4c0a      	ldr	r4, [pc, #40]	; (80119fc <__libc_init_array+0x44>)
 80119d2:	1b64      	subs	r4, r4, r5
 80119d4:	10a4      	asrs	r4, r4, #2
 80119d6:	42a6      	cmp	r6, r4
 80119d8:	d105      	bne.n	80119e6 <__libc_init_array+0x2e>
 80119da:	bd70      	pop	{r4, r5, r6, pc}
 80119dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80119e0:	4798      	blx	r3
 80119e2:	3601      	adds	r6, #1
 80119e4:	e7ee      	b.n	80119c4 <__libc_init_array+0xc>
 80119e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80119ea:	4798      	blx	r3
 80119ec:	3601      	adds	r6, #1
 80119ee:	e7f2      	b.n	80119d6 <__libc_init_array+0x1e>
 80119f0:	0801887c 	.word	0x0801887c
 80119f4:	0801887c 	.word	0x0801887c
 80119f8:	0801887c 	.word	0x0801887c
 80119fc:	08018880 	.word	0x08018880

08011a00 <memcmp>:
 8011a00:	b510      	push	{r4, lr}
 8011a02:	3901      	subs	r1, #1
 8011a04:	4402      	add	r2, r0
 8011a06:	4290      	cmp	r0, r2
 8011a08:	d101      	bne.n	8011a0e <memcmp+0xe>
 8011a0a:	2000      	movs	r0, #0
 8011a0c:	e005      	b.n	8011a1a <memcmp+0x1a>
 8011a0e:	7803      	ldrb	r3, [r0, #0]
 8011a10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011a14:	42a3      	cmp	r3, r4
 8011a16:	d001      	beq.n	8011a1c <memcmp+0x1c>
 8011a18:	1b18      	subs	r0, r3, r4
 8011a1a:	bd10      	pop	{r4, pc}
 8011a1c:	3001      	adds	r0, #1
 8011a1e:	e7f2      	b.n	8011a06 <memcmp+0x6>

08011a20 <memcpy>:
 8011a20:	440a      	add	r2, r1
 8011a22:	4291      	cmp	r1, r2
 8011a24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011a28:	d100      	bne.n	8011a2c <memcpy+0xc>
 8011a2a:	4770      	bx	lr
 8011a2c:	b510      	push	{r4, lr}
 8011a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a32:	4291      	cmp	r1, r2
 8011a34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a38:	d1f9      	bne.n	8011a2e <memcpy+0xe>
 8011a3a:	bd10      	pop	{r4, pc}

08011a3c <memset>:
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	4402      	add	r2, r0
 8011a40:	4293      	cmp	r3, r2
 8011a42:	d100      	bne.n	8011a46 <memset+0xa>
 8011a44:	4770      	bx	lr
 8011a46:	f803 1b01 	strb.w	r1, [r3], #1
 8011a4a:	e7f9      	b.n	8011a40 <memset+0x4>

08011a4c <__cvt>:
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a52:	461f      	mov	r7, r3
 8011a54:	bfbb      	ittet	lt
 8011a56:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8011a5a:	461f      	movlt	r7, r3
 8011a5c:	2300      	movge	r3, #0
 8011a5e:	232d      	movlt	r3, #45	; 0x2d
 8011a60:	b088      	sub	sp, #32
 8011a62:	4614      	mov	r4, r2
 8011a64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011a66:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011a68:	7013      	strb	r3, [r2, #0]
 8011a6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011a6c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8011a70:	f023 0820 	bic.w	r8, r3, #32
 8011a74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011a78:	d005      	beq.n	8011a86 <__cvt+0x3a>
 8011a7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011a7e:	d100      	bne.n	8011a82 <__cvt+0x36>
 8011a80:	3501      	adds	r5, #1
 8011a82:	2302      	movs	r3, #2
 8011a84:	e000      	b.n	8011a88 <__cvt+0x3c>
 8011a86:	2303      	movs	r3, #3
 8011a88:	aa07      	add	r2, sp, #28
 8011a8a:	9204      	str	r2, [sp, #16]
 8011a8c:	aa06      	add	r2, sp, #24
 8011a8e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8011a92:	e9cd 3500 	strd	r3, r5, [sp]
 8011a96:	4622      	mov	r2, r4
 8011a98:	463b      	mov	r3, r7
 8011a9a:	f001 fdb1 	bl	8013600 <_dtoa_r>
 8011a9e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011aa2:	4606      	mov	r6, r0
 8011aa4:	d102      	bne.n	8011aac <__cvt+0x60>
 8011aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011aa8:	07db      	lsls	r3, r3, #31
 8011aaa:	d522      	bpl.n	8011af2 <__cvt+0xa6>
 8011aac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011ab0:	eb06 0905 	add.w	r9, r6, r5
 8011ab4:	d110      	bne.n	8011ad8 <__cvt+0x8c>
 8011ab6:	7833      	ldrb	r3, [r6, #0]
 8011ab8:	2b30      	cmp	r3, #48	; 0x30
 8011aba:	d10a      	bne.n	8011ad2 <__cvt+0x86>
 8011abc:	2200      	movs	r2, #0
 8011abe:	2300      	movs	r3, #0
 8011ac0:	4620      	mov	r0, r4
 8011ac2:	4639      	mov	r1, r7
 8011ac4:	f7ee ffb6 	bl	8000a34 <__aeabi_dcmpeq>
 8011ac8:	b918      	cbnz	r0, 8011ad2 <__cvt+0x86>
 8011aca:	f1c5 0501 	rsb	r5, r5, #1
 8011ace:	f8ca 5000 	str.w	r5, [sl]
 8011ad2:	f8da 3000 	ldr.w	r3, [sl]
 8011ad6:	4499      	add	r9, r3
 8011ad8:	2200      	movs	r2, #0
 8011ada:	2300      	movs	r3, #0
 8011adc:	4620      	mov	r0, r4
 8011ade:	4639      	mov	r1, r7
 8011ae0:	f7ee ffa8 	bl	8000a34 <__aeabi_dcmpeq>
 8011ae4:	b108      	cbz	r0, 8011aea <__cvt+0x9e>
 8011ae6:	f8cd 901c 	str.w	r9, [sp, #28]
 8011aea:	2230      	movs	r2, #48	; 0x30
 8011aec:	9b07      	ldr	r3, [sp, #28]
 8011aee:	454b      	cmp	r3, r9
 8011af0:	d307      	bcc.n	8011b02 <__cvt+0xb6>
 8011af2:	4630      	mov	r0, r6
 8011af4:	9b07      	ldr	r3, [sp, #28]
 8011af6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011af8:	1b9b      	subs	r3, r3, r6
 8011afa:	6013      	str	r3, [r2, #0]
 8011afc:	b008      	add	sp, #32
 8011afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b02:	1c59      	adds	r1, r3, #1
 8011b04:	9107      	str	r1, [sp, #28]
 8011b06:	701a      	strb	r2, [r3, #0]
 8011b08:	e7f0      	b.n	8011aec <__cvt+0xa0>

08011b0a <__exponent>:
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b0e:	2900      	cmp	r1, #0
 8011b10:	f803 2b02 	strb.w	r2, [r3], #2
 8011b14:	bfb6      	itet	lt
 8011b16:	222d      	movlt	r2, #45	; 0x2d
 8011b18:	222b      	movge	r2, #43	; 0x2b
 8011b1a:	4249      	neglt	r1, r1
 8011b1c:	2909      	cmp	r1, #9
 8011b1e:	7042      	strb	r2, [r0, #1]
 8011b20:	dd2b      	ble.n	8011b7a <__exponent+0x70>
 8011b22:	f10d 0407 	add.w	r4, sp, #7
 8011b26:	46a4      	mov	ip, r4
 8011b28:	270a      	movs	r7, #10
 8011b2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8011b2e:	460a      	mov	r2, r1
 8011b30:	46a6      	mov	lr, r4
 8011b32:	fb07 1516 	mls	r5, r7, r6, r1
 8011b36:	2a63      	cmp	r2, #99	; 0x63
 8011b38:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8011b3c:	4631      	mov	r1, r6
 8011b3e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011b42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011b46:	dcf0      	bgt.n	8011b2a <__exponent+0x20>
 8011b48:	3130      	adds	r1, #48	; 0x30
 8011b4a:	f1ae 0502 	sub.w	r5, lr, #2
 8011b4e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011b52:	4629      	mov	r1, r5
 8011b54:	1c44      	adds	r4, r0, #1
 8011b56:	4561      	cmp	r1, ip
 8011b58:	d30a      	bcc.n	8011b70 <__exponent+0x66>
 8011b5a:	f10d 0209 	add.w	r2, sp, #9
 8011b5e:	eba2 020e 	sub.w	r2, r2, lr
 8011b62:	4565      	cmp	r5, ip
 8011b64:	bf88      	it	hi
 8011b66:	2200      	movhi	r2, #0
 8011b68:	4413      	add	r3, r2
 8011b6a:	1a18      	subs	r0, r3, r0
 8011b6c:	b003      	add	sp, #12
 8011b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011b74:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011b78:	e7ed      	b.n	8011b56 <__exponent+0x4c>
 8011b7a:	2330      	movs	r3, #48	; 0x30
 8011b7c:	3130      	adds	r1, #48	; 0x30
 8011b7e:	7083      	strb	r3, [r0, #2]
 8011b80:	70c1      	strb	r1, [r0, #3]
 8011b82:	1d03      	adds	r3, r0, #4
 8011b84:	e7f1      	b.n	8011b6a <__exponent+0x60>
	...

08011b88 <_printf_float>:
 8011b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b8c:	b091      	sub	sp, #68	; 0x44
 8011b8e:	460c      	mov	r4, r1
 8011b90:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8011b94:	4616      	mov	r6, r2
 8011b96:	461f      	mov	r7, r3
 8011b98:	4605      	mov	r5, r0
 8011b9a:	f002 ff7b 	bl	8014a94 <_localeconv_r>
 8011b9e:	6803      	ldr	r3, [r0, #0]
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8011ba4:	f7ee fb1a 	bl	80001dc <strlen>
 8011ba8:	2300      	movs	r3, #0
 8011baa:	930e      	str	r3, [sp, #56]	; 0x38
 8011bac:	f8d8 3000 	ldr.w	r3, [r8]
 8011bb0:	900a      	str	r0, [sp, #40]	; 0x28
 8011bb2:	3307      	adds	r3, #7
 8011bb4:	f023 0307 	bic.w	r3, r3, #7
 8011bb8:	f103 0208 	add.w	r2, r3, #8
 8011bbc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011bc0:	f8d4 b000 	ldr.w	fp, [r4]
 8011bc4:	f8c8 2000 	str.w	r2, [r8]
 8011bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bcc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011bd0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8011bd4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8011bd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8011bda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011bde:	4640      	mov	r0, r8
 8011be0:	4b9c      	ldr	r3, [pc, #624]	; (8011e54 <_printf_float+0x2cc>)
 8011be2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011be4:	f7ee ff58 	bl	8000a98 <__aeabi_dcmpun>
 8011be8:	bb70      	cbnz	r0, 8011c48 <_printf_float+0xc0>
 8011bea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011bee:	4640      	mov	r0, r8
 8011bf0:	4b98      	ldr	r3, [pc, #608]	; (8011e54 <_printf_float+0x2cc>)
 8011bf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011bf4:	f7ee ff32 	bl	8000a5c <__aeabi_dcmple>
 8011bf8:	bb30      	cbnz	r0, 8011c48 <_printf_float+0xc0>
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	4640      	mov	r0, r8
 8011c00:	4651      	mov	r1, sl
 8011c02:	f7ee ff21 	bl	8000a48 <__aeabi_dcmplt>
 8011c06:	b110      	cbz	r0, 8011c0e <_printf_float+0x86>
 8011c08:	232d      	movs	r3, #45	; 0x2d
 8011c0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c0e:	4b92      	ldr	r3, [pc, #584]	; (8011e58 <_printf_float+0x2d0>)
 8011c10:	4892      	ldr	r0, [pc, #584]	; (8011e5c <_printf_float+0x2d4>)
 8011c12:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011c16:	bf94      	ite	ls
 8011c18:	4698      	movls	r8, r3
 8011c1a:	4680      	movhi	r8, r0
 8011c1c:	2303      	movs	r3, #3
 8011c1e:	f04f 0a00 	mov.w	sl, #0
 8011c22:	6123      	str	r3, [r4, #16]
 8011c24:	f02b 0304 	bic.w	r3, fp, #4
 8011c28:	6023      	str	r3, [r4, #0]
 8011c2a:	4633      	mov	r3, r6
 8011c2c:	4621      	mov	r1, r4
 8011c2e:	4628      	mov	r0, r5
 8011c30:	9700      	str	r7, [sp, #0]
 8011c32:	aa0f      	add	r2, sp, #60	; 0x3c
 8011c34:	f000 f9d4 	bl	8011fe0 <_printf_common>
 8011c38:	3001      	adds	r0, #1
 8011c3a:	f040 8090 	bne.w	8011d5e <_printf_float+0x1d6>
 8011c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c42:	b011      	add	sp, #68	; 0x44
 8011c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c48:	4642      	mov	r2, r8
 8011c4a:	4653      	mov	r3, sl
 8011c4c:	4640      	mov	r0, r8
 8011c4e:	4651      	mov	r1, sl
 8011c50:	f7ee ff22 	bl	8000a98 <__aeabi_dcmpun>
 8011c54:	b148      	cbz	r0, 8011c6a <_printf_float+0xe2>
 8011c56:	f1ba 0f00 	cmp.w	sl, #0
 8011c5a:	bfb8      	it	lt
 8011c5c:	232d      	movlt	r3, #45	; 0x2d
 8011c5e:	4880      	ldr	r0, [pc, #512]	; (8011e60 <_printf_float+0x2d8>)
 8011c60:	bfb8      	it	lt
 8011c62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011c66:	4b7f      	ldr	r3, [pc, #508]	; (8011e64 <_printf_float+0x2dc>)
 8011c68:	e7d3      	b.n	8011c12 <_printf_float+0x8a>
 8011c6a:	6863      	ldr	r3, [r4, #4]
 8011c6c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011c70:	1c5a      	adds	r2, r3, #1
 8011c72:	d142      	bne.n	8011cfa <_printf_float+0x172>
 8011c74:	2306      	movs	r3, #6
 8011c76:	6063      	str	r3, [r4, #4]
 8011c78:	2200      	movs	r2, #0
 8011c7a:	9206      	str	r2, [sp, #24]
 8011c7c:	aa0e      	add	r2, sp, #56	; 0x38
 8011c7e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8011c82:	aa0d      	add	r2, sp, #52	; 0x34
 8011c84:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8011c88:	9203      	str	r2, [sp, #12]
 8011c8a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8011c8e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011c92:	6023      	str	r3, [r4, #0]
 8011c94:	6863      	ldr	r3, [r4, #4]
 8011c96:	4642      	mov	r2, r8
 8011c98:	9300      	str	r3, [sp, #0]
 8011c9a:	4628      	mov	r0, r5
 8011c9c:	4653      	mov	r3, sl
 8011c9e:	910b      	str	r1, [sp, #44]	; 0x2c
 8011ca0:	f7ff fed4 	bl	8011a4c <__cvt>
 8011ca4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011ca6:	4680      	mov	r8, r0
 8011ca8:	2947      	cmp	r1, #71	; 0x47
 8011caa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011cac:	d108      	bne.n	8011cc0 <_printf_float+0x138>
 8011cae:	1cc8      	adds	r0, r1, #3
 8011cb0:	db02      	blt.n	8011cb8 <_printf_float+0x130>
 8011cb2:	6863      	ldr	r3, [r4, #4]
 8011cb4:	4299      	cmp	r1, r3
 8011cb6:	dd40      	ble.n	8011d3a <_printf_float+0x1b2>
 8011cb8:	f1a9 0902 	sub.w	r9, r9, #2
 8011cbc:	fa5f f989 	uxtb.w	r9, r9
 8011cc0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011cc4:	d81f      	bhi.n	8011d06 <_printf_float+0x17e>
 8011cc6:	464a      	mov	r2, r9
 8011cc8:	3901      	subs	r1, #1
 8011cca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011cce:	910d      	str	r1, [sp, #52]	; 0x34
 8011cd0:	f7ff ff1b 	bl	8011b0a <__exponent>
 8011cd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011cd6:	4682      	mov	sl, r0
 8011cd8:	1813      	adds	r3, r2, r0
 8011cda:	2a01      	cmp	r2, #1
 8011cdc:	6123      	str	r3, [r4, #16]
 8011cde:	dc02      	bgt.n	8011ce6 <_printf_float+0x15e>
 8011ce0:	6822      	ldr	r2, [r4, #0]
 8011ce2:	07d2      	lsls	r2, r2, #31
 8011ce4:	d501      	bpl.n	8011cea <_printf_float+0x162>
 8011ce6:	3301      	adds	r3, #1
 8011ce8:	6123      	str	r3, [r4, #16]
 8011cea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d09b      	beq.n	8011c2a <_printf_float+0xa2>
 8011cf2:	232d      	movs	r3, #45	; 0x2d
 8011cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011cf8:	e797      	b.n	8011c2a <_printf_float+0xa2>
 8011cfa:	2947      	cmp	r1, #71	; 0x47
 8011cfc:	d1bc      	bne.n	8011c78 <_printf_float+0xf0>
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d1ba      	bne.n	8011c78 <_printf_float+0xf0>
 8011d02:	2301      	movs	r3, #1
 8011d04:	e7b7      	b.n	8011c76 <_printf_float+0xee>
 8011d06:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011d0a:	d118      	bne.n	8011d3e <_printf_float+0x1b6>
 8011d0c:	2900      	cmp	r1, #0
 8011d0e:	6863      	ldr	r3, [r4, #4]
 8011d10:	dd0b      	ble.n	8011d2a <_printf_float+0x1a2>
 8011d12:	6121      	str	r1, [r4, #16]
 8011d14:	b913      	cbnz	r3, 8011d1c <_printf_float+0x194>
 8011d16:	6822      	ldr	r2, [r4, #0]
 8011d18:	07d0      	lsls	r0, r2, #31
 8011d1a:	d502      	bpl.n	8011d22 <_printf_float+0x19a>
 8011d1c:	3301      	adds	r3, #1
 8011d1e:	440b      	add	r3, r1
 8011d20:	6123      	str	r3, [r4, #16]
 8011d22:	f04f 0a00 	mov.w	sl, #0
 8011d26:	65a1      	str	r1, [r4, #88]	; 0x58
 8011d28:	e7df      	b.n	8011cea <_printf_float+0x162>
 8011d2a:	b913      	cbnz	r3, 8011d32 <_printf_float+0x1aa>
 8011d2c:	6822      	ldr	r2, [r4, #0]
 8011d2e:	07d2      	lsls	r2, r2, #31
 8011d30:	d501      	bpl.n	8011d36 <_printf_float+0x1ae>
 8011d32:	3302      	adds	r3, #2
 8011d34:	e7f4      	b.n	8011d20 <_printf_float+0x198>
 8011d36:	2301      	movs	r3, #1
 8011d38:	e7f2      	b.n	8011d20 <_printf_float+0x198>
 8011d3a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011d3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d40:	4299      	cmp	r1, r3
 8011d42:	db05      	blt.n	8011d50 <_printf_float+0x1c8>
 8011d44:	6823      	ldr	r3, [r4, #0]
 8011d46:	6121      	str	r1, [r4, #16]
 8011d48:	07d8      	lsls	r0, r3, #31
 8011d4a:	d5ea      	bpl.n	8011d22 <_printf_float+0x19a>
 8011d4c:	1c4b      	adds	r3, r1, #1
 8011d4e:	e7e7      	b.n	8011d20 <_printf_float+0x198>
 8011d50:	2900      	cmp	r1, #0
 8011d52:	bfcc      	ite	gt
 8011d54:	2201      	movgt	r2, #1
 8011d56:	f1c1 0202 	rsble	r2, r1, #2
 8011d5a:	4413      	add	r3, r2
 8011d5c:	e7e0      	b.n	8011d20 <_printf_float+0x198>
 8011d5e:	6823      	ldr	r3, [r4, #0]
 8011d60:	055a      	lsls	r2, r3, #21
 8011d62:	d407      	bmi.n	8011d74 <_printf_float+0x1ec>
 8011d64:	6923      	ldr	r3, [r4, #16]
 8011d66:	4642      	mov	r2, r8
 8011d68:	4631      	mov	r1, r6
 8011d6a:	4628      	mov	r0, r5
 8011d6c:	47b8      	blx	r7
 8011d6e:	3001      	adds	r0, #1
 8011d70:	d12b      	bne.n	8011dca <_printf_float+0x242>
 8011d72:	e764      	b.n	8011c3e <_printf_float+0xb6>
 8011d74:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011d78:	f240 80dd 	bls.w	8011f36 <_printf_float+0x3ae>
 8011d7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011d80:	2200      	movs	r2, #0
 8011d82:	2300      	movs	r3, #0
 8011d84:	f7ee fe56 	bl	8000a34 <__aeabi_dcmpeq>
 8011d88:	2800      	cmp	r0, #0
 8011d8a:	d033      	beq.n	8011df4 <_printf_float+0x26c>
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	4631      	mov	r1, r6
 8011d90:	4628      	mov	r0, r5
 8011d92:	4a35      	ldr	r2, [pc, #212]	; (8011e68 <_printf_float+0x2e0>)
 8011d94:	47b8      	blx	r7
 8011d96:	3001      	adds	r0, #1
 8011d98:	f43f af51 	beq.w	8011c3e <_printf_float+0xb6>
 8011d9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011da0:	429a      	cmp	r2, r3
 8011da2:	db02      	blt.n	8011daa <_printf_float+0x222>
 8011da4:	6823      	ldr	r3, [r4, #0]
 8011da6:	07d8      	lsls	r0, r3, #31
 8011da8:	d50f      	bpl.n	8011dca <_printf_float+0x242>
 8011daa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011dae:	4631      	mov	r1, r6
 8011db0:	4628      	mov	r0, r5
 8011db2:	47b8      	blx	r7
 8011db4:	3001      	adds	r0, #1
 8011db6:	f43f af42 	beq.w	8011c3e <_printf_float+0xb6>
 8011dba:	f04f 0800 	mov.w	r8, #0
 8011dbe:	f104 091a 	add.w	r9, r4, #26
 8011dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011dc4:	3b01      	subs	r3, #1
 8011dc6:	4543      	cmp	r3, r8
 8011dc8:	dc09      	bgt.n	8011dde <_printf_float+0x256>
 8011dca:	6823      	ldr	r3, [r4, #0]
 8011dcc:	079b      	lsls	r3, r3, #30
 8011dce:	f100 8102 	bmi.w	8011fd6 <_printf_float+0x44e>
 8011dd2:	68e0      	ldr	r0, [r4, #12]
 8011dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011dd6:	4298      	cmp	r0, r3
 8011dd8:	bfb8      	it	lt
 8011dda:	4618      	movlt	r0, r3
 8011ddc:	e731      	b.n	8011c42 <_printf_float+0xba>
 8011dde:	2301      	movs	r3, #1
 8011de0:	464a      	mov	r2, r9
 8011de2:	4631      	mov	r1, r6
 8011de4:	4628      	mov	r0, r5
 8011de6:	47b8      	blx	r7
 8011de8:	3001      	adds	r0, #1
 8011dea:	f43f af28 	beq.w	8011c3e <_printf_float+0xb6>
 8011dee:	f108 0801 	add.w	r8, r8, #1
 8011df2:	e7e6      	b.n	8011dc2 <_printf_float+0x23a>
 8011df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	dc38      	bgt.n	8011e6c <_printf_float+0x2e4>
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	4631      	mov	r1, r6
 8011dfe:	4628      	mov	r0, r5
 8011e00:	4a19      	ldr	r2, [pc, #100]	; (8011e68 <_printf_float+0x2e0>)
 8011e02:	47b8      	blx	r7
 8011e04:	3001      	adds	r0, #1
 8011e06:	f43f af1a 	beq.w	8011c3e <_printf_float+0xb6>
 8011e0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011e0e:	4313      	orrs	r3, r2
 8011e10:	d102      	bne.n	8011e18 <_printf_float+0x290>
 8011e12:	6823      	ldr	r3, [r4, #0]
 8011e14:	07d9      	lsls	r1, r3, #31
 8011e16:	d5d8      	bpl.n	8011dca <_printf_float+0x242>
 8011e18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011e1c:	4631      	mov	r1, r6
 8011e1e:	4628      	mov	r0, r5
 8011e20:	47b8      	blx	r7
 8011e22:	3001      	adds	r0, #1
 8011e24:	f43f af0b 	beq.w	8011c3e <_printf_float+0xb6>
 8011e28:	f04f 0900 	mov.w	r9, #0
 8011e2c:	f104 0a1a 	add.w	sl, r4, #26
 8011e30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e32:	425b      	negs	r3, r3
 8011e34:	454b      	cmp	r3, r9
 8011e36:	dc01      	bgt.n	8011e3c <_printf_float+0x2b4>
 8011e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e3a:	e794      	b.n	8011d66 <_printf_float+0x1de>
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	4652      	mov	r2, sl
 8011e40:	4631      	mov	r1, r6
 8011e42:	4628      	mov	r0, r5
 8011e44:	47b8      	blx	r7
 8011e46:	3001      	adds	r0, #1
 8011e48:	f43f aef9 	beq.w	8011c3e <_printf_float+0xb6>
 8011e4c:	f109 0901 	add.w	r9, r9, #1
 8011e50:	e7ee      	b.n	8011e30 <_printf_float+0x2a8>
 8011e52:	bf00      	nop
 8011e54:	7fefffff 	.word	0x7fefffff
 8011e58:	080183cc 	.word	0x080183cc
 8011e5c:	080183d0 	.word	0x080183d0
 8011e60:	080183d8 	.word	0x080183d8
 8011e64:	080183d4 	.word	0x080183d4
 8011e68:	080183dc 	.word	0x080183dc
 8011e6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011e70:	429a      	cmp	r2, r3
 8011e72:	bfa8      	it	ge
 8011e74:	461a      	movge	r2, r3
 8011e76:	2a00      	cmp	r2, #0
 8011e78:	4691      	mov	r9, r2
 8011e7a:	dc37      	bgt.n	8011eec <_printf_float+0x364>
 8011e7c:	f04f 0b00 	mov.w	fp, #0
 8011e80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011e84:	f104 021a 	add.w	r2, r4, #26
 8011e88:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011e8c:	ebaa 0309 	sub.w	r3, sl, r9
 8011e90:	455b      	cmp	r3, fp
 8011e92:	dc33      	bgt.n	8011efc <_printf_float+0x374>
 8011e94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	db3b      	blt.n	8011f14 <_printf_float+0x38c>
 8011e9c:	6823      	ldr	r3, [r4, #0]
 8011e9e:	07da      	lsls	r2, r3, #31
 8011ea0:	d438      	bmi.n	8011f14 <_printf_float+0x38c>
 8011ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ea4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011ea6:	eba3 020a 	sub.w	r2, r3, sl
 8011eaa:	eba3 0901 	sub.w	r9, r3, r1
 8011eae:	4591      	cmp	r9, r2
 8011eb0:	bfa8      	it	ge
 8011eb2:	4691      	movge	r9, r2
 8011eb4:	f1b9 0f00 	cmp.w	r9, #0
 8011eb8:	dc34      	bgt.n	8011f24 <_printf_float+0x39c>
 8011eba:	f04f 0800 	mov.w	r8, #0
 8011ebe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ec2:	f104 0a1a 	add.w	sl, r4, #26
 8011ec6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011eca:	1a9b      	subs	r3, r3, r2
 8011ecc:	eba3 0309 	sub.w	r3, r3, r9
 8011ed0:	4543      	cmp	r3, r8
 8011ed2:	f77f af7a 	ble.w	8011dca <_printf_float+0x242>
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	4652      	mov	r2, sl
 8011eda:	4631      	mov	r1, r6
 8011edc:	4628      	mov	r0, r5
 8011ede:	47b8      	blx	r7
 8011ee0:	3001      	adds	r0, #1
 8011ee2:	f43f aeac 	beq.w	8011c3e <_printf_float+0xb6>
 8011ee6:	f108 0801 	add.w	r8, r8, #1
 8011eea:	e7ec      	b.n	8011ec6 <_printf_float+0x33e>
 8011eec:	4613      	mov	r3, r2
 8011eee:	4631      	mov	r1, r6
 8011ef0:	4642      	mov	r2, r8
 8011ef2:	4628      	mov	r0, r5
 8011ef4:	47b8      	blx	r7
 8011ef6:	3001      	adds	r0, #1
 8011ef8:	d1c0      	bne.n	8011e7c <_printf_float+0x2f4>
 8011efa:	e6a0      	b.n	8011c3e <_printf_float+0xb6>
 8011efc:	2301      	movs	r3, #1
 8011efe:	4631      	mov	r1, r6
 8011f00:	4628      	mov	r0, r5
 8011f02:	920b      	str	r2, [sp, #44]	; 0x2c
 8011f04:	47b8      	blx	r7
 8011f06:	3001      	adds	r0, #1
 8011f08:	f43f ae99 	beq.w	8011c3e <_printf_float+0xb6>
 8011f0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011f0e:	f10b 0b01 	add.w	fp, fp, #1
 8011f12:	e7b9      	b.n	8011e88 <_printf_float+0x300>
 8011f14:	4631      	mov	r1, r6
 8011f16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f1a:	4628      	mov	r0, r5
 8011f1c:	47b8      	blx	r7
 8011f1e:	3001      	adds	r0, #1
 8011f20:	d1bf      	bne.n	8011ea2 <_printf_float+0x31a>
 8011f22:	e68c      	b.n	8011c3e <_printf_float+0xb6>
 8011f24:	464b      	mov	r3, r9
 8011f26:	4631      	mov	r1, r6
 8011f28:	4628      	mov	r0, r5
 8011f2a:	eb08 020a 	add.w	r2, r8, sl
 8011f2e:	47b8      	blx	r7
 8011f30:	3001      	adds	r0, #1
 8011f32:	d1c2      	bne.n	8011eba <_printf_float+0x332>
 8011f34:	e683      	b.n	8011c3e <_printf_float+0xb6>
 8011f36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011f38:	2a01      	cmp	r2, #1
 8011f3a:	dc01      	bgt.n	8011f40 <_printf_float+0x3b8>
 8011f3c:	07db      	lsls	r3, r3, #31
 8011f3e:	d537      	bpl.n	8011fb0 <_printf_float+0x428>
 8011f40:	2301      	movs	r3, #1
 8011f42:	4642      	mov	r2, r8
 8011f44:	4631      	mov	r1, r6
 8011f46:	4628      	mov	r0, r5
 8011f48:	47b8      	blx	r7
 8011f4a:	3001      	adds	r0, #1
 8011f4c:	f43f ae77 	beq.w	8011c3e <_printf_float+0xb6>
 8011f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f54:	4631      	mov	r1, r6
 8011f56:	4628      	mov	r0, r5
 8011f58:	47b8      	blx	r7
 8011f5a:	3001      	adds	r0, #1
 8011f5c:	f43f ae6f 	beq.w	8011c3e <_printf_float+0xb6>
 8011f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011f64:	2200      	movs	r2, #0
 8011f66:	2300      	movs	r3, #0
 8011f68:	f7ee fd64 	bl	8000a34 <__aeabi_dcmpeq>
 8011f6c:	b9d8      	cbnz	r0, 8011fa6 <_printf_float+0x41e>
 8011f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f70:	f108 0201 	add.w	r2, r8, #1
 8011f74:	3b01      	subs	r3, #1
 8011f76:	4631      	mov	r1, r6
 8011f78:	4628      	mov	r0, r5
 8011f7a:	47b8      	blx	r7
 8011f7c:	3001      	adds	r0, #1
 8011f7e:	d10e      	bne.n	8011f9e <_printf_float+0x416>
 8011f80:	e65d      	b.n	8011c3e <_printf_float+0xb6>
 8011f82:	2301      	movs	r3, #1
 8011f84:	464a      	mov	r2, r9
 8011f86:	4631      	mov	r1, r6
 8011f88:	4628      	mov	r0, r5
 8011f8a:	47b8      	blx	r7
 8011f8c:	3001      	adds	r0, #1
 8011f8e:	f43f ae56 	beq.w	8011c3e <_printf_float+0xb6>
 8011f92:	f108 0801 	add.w	r8, r8, #1
 8011f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f98:	3b01      	subs	r3, #1
 8011f9a:	4543      	cmp	r3, r8
 8011f9c:	dcf1      	bgt.n	8011f82 <_printf_float+0x3fa>
 8011f9e:	4653      	mov	r3, sl
 8011fa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011fa4:	e6e0      	b.n	8011d68 <_printf_float+0x1e0>
 8011fa6:	f04f 0800 	mov.w	r8, #0
 8011faa:	f104 091a 	add.w	r9, r4, #26
 8011fae:	e7f2      	b.n	8011f96 <_printf_float+0x40e>
 8011fb0:	2301      	movs	r3, #1
 8011fb2:	4642      	mov	r2, r8
 8011fb4:	e7df      	b.n	8011f76 <_printf_float+0x3ee>
 8011fb6:	2301      	movs	r3, #1
 8011fb8:	464a      	mov	r2, r9
 8011fba:	4631      	mov	r1, r6
 8011fbc:	4628      	mov	r0, r5
 8011fbe:	47b8      	blx	r7
 8011fc0:	3001      	adds	r0, #1
 8011fc2:	f43f ae3c 	beq.w	8011c3e <_printf_float+0xb6>
 8011fc6:	f108 0801 	add.w	r8, r8, #1
 8011fca:	68e3      	ldr	r3, [r4, #12]
 8011fcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011fce:	1a5b      	subs	r3, r3, r1
 8011fd0:	4543      	cmp	r3, r8
 8011fd2:	dcf0      	bgt.n	8011fb6 <_printf_float+0x42e>
 8011fd4:	e6fd      	b.n	8011dd2 <_printf_float+0x24a>
 8011fd6:	f04f 0800 	mov.w	r8, #0
 8011fda:	f104 0919 	add.w	r9, r4, #25
 8011fde:	e7f4      	b.n	8011fca <_printf_float+0x442>

08011fe0 <_printf_common>:
 8011fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fe4:	4616      	mov	r6, r2
 8011fe6:	4699      	mov	r9, r3
 8011fe8:	688a      	ldr	r2, [r1, #8]
 8011fea:	690b      	ldr	r3, [r1, #16]
 8011fec:	4607      	mov	r7, r0
 8011fee:	4293      	cmp	r3, r2
 8011ff0:	bfb8      	it	lt
 8011ff2:	4613      	movlt	r3, r2
 8011ff4:	6033      	str	r3, [r6, #0]
 8011ff6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011ffa:	460c      	mov	r4, r1
 8011ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012000:	b10a      	cbz	r2, 8012006 <_printf_common+0x26>
 8012002:	3301      	adds	r3, #1
 8012004:	6033      	str	r3, [r6, #0]
 8012006:	6823      	ldr	r3, [r4, #0]
 8012008:	0699      	lsls	r1, r3, #26
 801200a:	bf42      	ittt	mi
 801200c:	6833      	ldrmi	r3, [r6, #0]
 801200e:	3302      	addmi	r3, #2
 8012010:	6033      	strmi	r3, [r6, #0]
 8012012:	6825      	ldr	r5, [r4, #0]
 8012014:	f015 0506 	ands.w	r5, r5, #6
 8012018:	d106      	bne.n	8012028 <_printf_common+0x48>
 801201a:	f104 0a19 	add.w	sl, r4, #25
 801201e:	68e3      	ldr	r3, [r4, #12]
 8012020:	6832      	ldr	r2, [r6, #0]
 8012022:	1a9b      	subs	r3, r3, r2
 8012024:	42ab      	cmp	r3, r5
 8012026:	dc28      	bgt.n	801207a <_printf_common+0x9a>
 8012028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801202c:	1e13      	subs	r3, r2, #0
 801202e:	6822      	ldr	r2, [r4, #0]
 8012030:	bf18      	it	ne
 8012032:	2301      	movne	r3, #1
 8012034:	0692      	lsls	r2, r2, #26
 8012036:	d42d      	bmi.n	8012094 <_printf_common+0xb4>
 8012038:	4649      	mov	r1, r9
 801203a:	4638      	mov	r0, r7
 801203c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012040:	47c0      	blx	r8
 8012042:	3001      	adds	r0, #1
 8012044:	d020      	beq.n	8012088 <_printf_common+0xa8>
 8012046:	6823      	ldr	r3, [r4, #0]
 8012048:	68e5      	ldr	r5, [r4, #12]
 801204a:	f003 0306 	and.w	r3, r3, #6
 801204e:	2b04      	cmp	r3, #4
 8012050:	bf18      	it	ne
 8012052:	2500      	movne	r5, #0
 8012054:	6832      	ldr	r2, [r6, #0]
 8012056:	f04f 0600 	mov.w	r6, #0
 801205a:	68a3      	ldr	r3, [r4, #8]
 801205c:	bf08      	it	eq
 801205e:	1aad      	subeq	r5, r5, r2
 8012060:	6922      	ldr	r2, [r4, #16]
 8012062:	bf08      	it	eq
 8012064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012068:	4293      	cmp	r3, r2
 801206a:	bfc4      	itt	gt
 801206c:	1a9b      	subgt	r3, r3, r2
 801206e:	18ed      	addgt	r5, r5, r3
 8012070:	341a      	adds	r4, #26
 8012072:	42b5      	cmp	r5, r6
 8012074:	d11a      	bne.n	80120ac <_printf_common+0xcc>
 8012076:	2000      	movs	r0, #0
 8012078:	e008      	b.n	801208c <_printf_common+0xac>
 801207a:	2301      	movs	r3, #1
 801207c:	4652      	mov	r2, sl
 801207e:	4649      	mov	r1, r9
 8012080:	4638      	mov	r0, r7
 8012082:	47c0      	blx	r8
 8012084:	3001      	adds	r0, #1
 8012086:	d103      	bne.n	8012090 <_printf_common+0xb0>
 8012088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801208c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012090:	3501      	adds	r5, #1
 8012092:	e7c4      	b.n	801201e <_printf_common+0x3e>
 8012094:	2030      	movs	r0, #48	; 0x30
 8012096:	18e1      	adds	r1, r4, r3
 8012098:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801209c:	1c5a      	adds	r2, r3, #1
 801209e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80120a2:	4422      	add	r2, r4
 80120a4:	3302      	adds	r3, #2
 80120a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80120aa:	e7c5      	b.n	8012038 <_printf_common+0x58>
 80120ac:	2301      	movs	r3, #1
 80120ae:	4622      	mov	r2, r4
 80120b0:	4649      	mov	r1, r9
 80120b2:	4638      	mov	r0, r7
 80120b4:	47c0      	blx	r8
 80120b6:	3001      	adds	r0, #1
 80120b8:	d0e6      	beq.n	8012088 <_printf_common+0xa8>
 80120ba:	3601      	adds	r6, #1
 80120bc:	e7d9      	b.n	8012072 <_printf_common+0x92>
	...

080120c0 <_printf_i>:
 80120c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80120c4:	7e0f      	ldrb	r7, [r1, #24]
 80120c6:	4691      	mov	r9, r2
 80120c8:	2f78      	cmp	r7, #120	; 0x78
 80120ca:	4680      	mov	r8, r0
 80120cc:	460c      	mov	r4, r1
 80120ce:	469a      	mov	sl, r3
 80120d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80120d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80120d6:	d807      	bhi.n	80120e8 <_printf_i+0x28>
 80120d8:	2f62      	cmp	r7, #98	; 0x62
 80120da:	d80a      	bhi.n	80120f2 <_printf_i+0x32>
 80120dc:	2f00      	cmp	r7, #0
 80120de:	f000 80d9 	beq.w	8012294 <_printf_i+0x1d4>
 80120e2:	2f58      	cmp	r7, #88	; 0x58
 80120e4:	f000 80a4 	beq.w	8012230 <_printf_i+0x170>
 80120e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80120ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80120f0:	e03a      	b.n	8012168 <_printf_i+0xa8>
 80120f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80120f6:	2b15      	cmp	r3, #21
 80120f8:	d8f6      	bhi.n	80120e8 <_printf_i+0x28>
 80120fa:	a101      	add	r1, pc, #4	; (adr r1, 8012100 <_printf_i+0x40>)
 80120fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012100:	08012159 	.word	0x08012159
 8012104:	0801216d 	.word	0x0801216d
 8012108:	080120e9 	.word	0x080120e9
 801210c:	080120e9 	.word	0x080120e9
 8012110:	080120e9 	.word	0x080120e9
 8012114:	080120e9 	.word	0x080120e9
 8012118:	0801216d 	.word	0x0801216d
 801211c:	080120e9 	.word	0x080120e9
 8012120:	080120e9 	.word	0x080120e9
 8012124:	080120e9 	.word	0x080120e9
 8012128:	080120e9 	.word	0x080120e9
 801212c:	0801227b 	.word	0x0801227b
 8012130:	0801219d 	.word	0x0801219d
 8012134:	0801225d 	.word	0x0801225d
 8012138:	080120e9 	.word	0x080120e9
 801213c:	080120e9 	.word	0x080120e9
 8012140:	0801229d 	.word	0x0801229d
 8012144:	080120e9 	.word	0x080120e9
 8012148:	0801219d 	.word	0x0801219d
 801214c:	080120e9 	.word	0x080120e9
 8012150:	080120e9 	.word	0x080120e9
 8012154:	08012265 	.word	0x08012265
 8012158:	682b      	ldr	r3, [r5, #0]
 801215a:	1d1a      	adds	r2, r3, #4
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	602a      	str	r2, [r5, #0]
 8012160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012168:	2301      	movs	r3, #1
 801216a:	e0a4      	b.n	80122b6 <_printf_i+0x1f6>
 801216c:	6820      	ldr	r0, [r4, #0]
 801216e:	6829      	ldr	r1, [r5, #0]
 8012170:	0606      	lsls	r6, r0, #24
 8012172:	f101 0304 	add.w	r3, r1, #4
 8012176:	d50a      	bpl.n	801218e <_printf_i+0xce>
 8012178:	680e      	ldr	r6, [r1, #0]
 801217a:	602b      	str	r3, [r5, #0]
 801217c:	2e00      	cmp	r6, #0
 801217e:	da03      	bge.n	8012188 <_printf_i+0xc8>
 8012180:	232d      	movs	r3, #45	; 0x2d
 8012182:	4276      	negs	r6, r6
 8012184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012188:	230a      	movs	r3, #10
 801218a:	485e      	ldr	r0, [pc, #376]	; (8012304 <_printf_i+0x244>)
 801218c:	e019      	b.n	80121c2 <_printf_i+0x102>
 801218e:	680e      	ldr	r6, [r1, #0]
 8012190:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012194:	602b      	str	r3, [r5, #0]
 8012196:	bf18      	it	ne
 8012198:	b236      	sxthne	r6, r6
 801219a:	e7ef      	b.n	801217c <_printf_i+0xbc>
 801219c:	682b      	ldr	r3, [r5, #0]
 801219e:	6820      	ldr	r0, [r4, #0]
 80121a0:	1d19      	adds	r1, r3, #4
 80121a2:	6029      	str	r1, [r5, #0]
 80121a4:	0601      	lsls	r1, r0, #24
 80121a6:	d501      	bpl.n	80121ac <_printf_i+0xec>
 80121a8:	681e      	ldr	r6, [r3, #0]
 80121aa:	e002      	b.n	80121b2 <_printf_i+0xf2>
 80121ac:	0646      	lsls	r6, r0, #25
 80121ae:	d5fb      	bpl.n	80121a8 <_printf_i+0xe8>
 80121b0:	881e      	ldrh	r6, [r3, #0]
 80121b2:	2f6f      	cmp	r7, #111	; 0x6f
 80121b4:	bf0c      	ite	eq
 80121b6:	2308      	moveq	r3, #8
 80121b8:	230a      	movne	r3, #10
 80121ba:	4852      	ldr	r0, [pc, #328]	; (8012304 <_printf_i+0x244>)
 80121bc:	2100      	movs	r1, #0
 80121be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80121c2:	6865      	ldr	r5, [r4, #4]
 80121c4:	2d00      	cmp	r5, #0
 80121c6:	bfa8      	it	ge
 80121c8:	6821      	ldrge	r1, [r4, #0]
 80121ca:	60a5      	str	r5, [r4, #8]
 80121cc:	bfa4      	itt	ge
 80121ce:	f021 0104 	bicge.w	r1, r1, #4
 80121d2:	6021      	strge	r1, [r4, #0]
 80121d4:	b90e      	cbnz	r6, 80121da <_printf_i+0x11a>
 80121d6:	2d00      	cmp	r5, #0
 80121d8:	d04d      	beq.n	8012276 <_printf_i+0x1b6>
 80121da:	4615      	mov	r5, r2
 80121dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80121e0:	fb03 6711 	mls	r7, r3, r1, r6
 80121e4:	5dc7      	ldrb	r7, [r0, r7]
 80121e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80121ea:	4637      	mov	r7, r6
 80121ec:	42bb      	cmp	r3, r7
 80121ee:	460e      	mov	r6, r1
 80121f0:	d9f4      	bls.n	80121dc <_printf_i+0x11c>
 80121f2:	2b08      	cmp	r3, #8
 80121f4:	d10b      	bne.n	801220e <_printf_i+0x14e>
 80121f6:	6823      	ldr	r3, [r4, #0]
 80121f8:	07de      	lsls	r6, r3, #31
 80121fa:	d508      	bpl.n	801220e <_printf_i+0x14e>
 80121fc:	6923      	ldr	r3, [r4, #16]
 80121fe:	6861      	ldr	r1, [r4, #4]
 8012200:	4299      	cmp	r1, r3
 8012202:	bfde      	ittt	le
 8012204:	2330      	movle	r3, #48	; 0x30
 8012206:	f805 3c01 	strble.w	r3, [r5, #-1]
 801220a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801220e:	1b52      	subs	r2, r2, r5
 8012210:	6122      	str	r2, [r4, #16]
 8012212:	464b      	mov	r3, r9
 8012214:	4621      	mov	r1, r4
 8012216:	4640      	mov	r0, r8
 8012218:	f8cd a000 	str.w	sl, [sp]
 801221c:	aa03      	add	r2, sp, #12
 801221e:	f7ff fedf 	bl	8011fe0 <_printf_common>
 8012222:	3001      	adds	r0, #1
 8012224:	d14c      	bne.n	80122c0 <_printf_i+0x200>
 8012226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801222a:	b004      	add	sp, #16
 801222c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012230:	4834      	ldr	r0, [pc, #208]	; (8012304 <_printf_i+0x244>)
 8012232:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012236:	6829      	ldr	r1, [r5, #0]
 8012238:	6823      	ldr	r3, [r4, #0]
 801223a:	f851 6b04 	ldr.w	r6, [r1], #4
 801223e:	6029      	str	r1, [r5, #0]
 8012240:	061d      	lsls	r5, r3, #24
 8012242:	d514      	bpl.n	801226e <_printf_i+0x1ae>
 8012244:	07df      	lsls	r7, r3, #31
 8012246:	bf44      	itt	mi
 8012248:	f043 0320 	orrmi.w	r3, r3, #32
 801224c:	6023      	strmi	r3, [r4, #0]
 801224e:	b91e      	cbnz	r6, 8012258 <_printf_i+0x198>
 8012250:	6823      	ldr	r3, [r4, #0]
 8012252:	f023 0320 	bic.w	r3, r3, #32
 8012256:	6023      	str	r3, [r4, #0]
 8012258:	2310      	movs	r3, #16
 801225a:	e7af      	b.n	80121bc <_printf_i+0xfc>
 801225c:	6823      	ldr	r3, [r4, #0]
 801225e:	f043 0320 	orr.w	r3, r3, #32
 8012262:	6023      	str	r3, [r4, #0]
 8012264:	2378      	movs	r3, #120	; 0x78
 8012266:	4828      	ldr	r0, [pc, #160]	; (8012308 <_printf_i+0x248>)
 8012268:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801226c:	e7e3      	b.n	8012236 <_printf_i+0x176>
 801226e:	0659      	lsls	r1, r3, #25
 8012270:	bf48      	it	mi
 8012272:	b2b6      	uxthmi	r6, r6
 8012274:	e7e6      	b.n	8012244 <_printf_i+0x184>
 8012276:	4615      	mov	r5, r2
 8012278:	e7bb      	b.n	80121f2 <_printf_i+0x132>
 801227a:	682b      	ldr	r3, [r5, #0]
 801227c:	6826      	ldr	r6, [r4, #0]
 801227e:	1d18      	adds	r0, r3, #4
 8012280:	6961      	ldr	r1, [r4, #20]
 8012282:	6028      	str	r0, [r5, #0]
 8012284:	0635      	lsls	r5, r6, #24
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	d501      	bpl.n	801228e <_printf_i+0x1ce>
 801228a:	6019      	str	r1, [r3, #0]
 801228c:	e002      	b.n	8012294 <_printf_i+0x1d4>
 801228e:	0670      	lsls	r0, r6, #25
 8012290:	d5fb      	bpl.n	801228a <_printf_i+0x1ca>
 8012292:	8019      	strh	r1, [r3, #0]
 8012294:	2300      	movs	r3, #0
 8012296:	4615      	mov	r5, r2
 8012298:	6123      	str	r3, [r4, #16]
 801229a:	e7ba      	b.n	8012212 <_printf_i+0x152>
 801229c:	682b      	ldr	r3, [r5, #0]
 801229e:	2100      	movs	r1, #0
 80122a0:	1d1a      	adds	r2, r3, #4
 80122a2:	602a      	str	r2, [r5, #0]
 80122a4:	681d      	ldr	r5, [r3, #0]
 80122a6:	6862      	ldr	r2, [r4, #4]
 80122a8:	4628      	mov	r0, r5
 80122aa:	f002 fc15 	bl	8014ad8 <memchr>
 80122ae:	b108      	cbz	r0, 80122b4 <_printf_i+0x1f4>
 80122b0:	1b40      	subs	r0, r0, r5
 80122b2:	6060      	str	r0, [r4, #4]
 80122b4:	6863      	ldr	r3, [r4, #4]
 80122b6:	6123      	str	r3, [r4, #16]
 80122b8:	2300      	movs	r3, #0
 80122ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80122be:	e7a8      	b.n	8012212 <_printf_i+0x152>
 80122c0:	462a      	mov	r2, r5
 80122c2:	4649      	mov	r1, r9
 80122c4:	4640      	mov	r0, r8
 80122c6:	6923      	ldr	r3, [r4, #16]
 80122c8:	47d0      	blx	sl
 80122ca:	3001      	adds	r0, #1
 80122cc:	d0ab      	beq.n	8012226 <_printf_i+0x166>
 80122ce:	6823      	ldr	r3, [r4, #0]
 80122d0:	079b      	lsls	r3, r3, #30
 80122d2:	d413      	bmi.n	80122fc <_printf_i+0x23c>
 80122d4:	68e0      	ldr	r0, [r4, #12]
 80122d6:	9b03      	ldr	r3, [sp, #12]
 80122d8:	4298      	cmp	r0, r3
 80122da:	bfb8      	it	lt
 80122dc:	4618      	movlt	r0, r3
 80122de:	e7a4      	b.n	801222a <_printf_i+0x16a>
 80122e0:	2301      	movs	r3, #1
 80122e2:	4632      	mov	r2, r6
 80122e4:	4649      	mov	r1, r9
 80122e6:	4640      	mov	r0, r8
 80122e8:	47d0      	blx	sl
 80122ea:	3001      	adds	r0, #1
 80122ec:	d09b      	beq.n	8012226 <_printf_i+0x166>
 80122ee:	3501      	adds	r5, #1
 80122f0:	68e3      	ldr	r3, [r4, #12]
 80122f2:	9903      	ldr	r1, [sp, #12]
 80122f4:	1a5b      	subs	r3, r3, r1
 80122f6:	42ab      	cmp	r3, r5
 80122f8:	dcf2      	bgt.n	80122e0 <_printf_i+0x220>
 80122fa:	e7eb      	b.n	80122d4 <_printf_i+0x214>
 80122fc:	2500      	movs	r5, #0
 80122fe:	f104 0619 	add.w	r6, r4, #25
 8012302:	e7f5      	b.n	80122f0 <_printf_i+0x230>
 8012304:	080183de 	.word	0x080183de
 8012308:	080183ef 	.word	0x080183ef

0801230c <_scanf_float>:
 801230c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012310:	b087      	sub	sp, #28
 8012312:	9303      	str	r3, [sp, #12]
 8012314:	688b      	ldr	r3, [r1, #8]
 8012316:	4617      	mov	r7, r2
 8012318:	1e5a      	subs	r2, r3, #1
 801231a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801231e:	bf85      	ittet	hi
 8012320:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012324:	195b      	addhi	r3, r3, r5
 8012326:	2300      	movls	r3, #0
 8012328:	9302      	strhi	r3, [sp, #8]
 801232a:	bf88      	it	hi
 801232c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012330:	468b      	mov	fp, r1
 8012332:	f04f 0500 	mov.w	r5, #0
 8012336:	bf8c      	ite	hi
 8012338:	608b      	strhi	r3, [r1, #8]
 801233a:	9302      	strls	r3, [sp, #8]
 801233c:	680b      	ldr	r3, [r1, #0]
 801233e:	4680      	mov	r8, r0
 8012340:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012344:	f84b 3b1c 	str.w	r3, [fp], #28
 8012348:	460c      	mov	r4, r1
 801234a:	465e      	mov	r6, fp
 801234c:	46aa      	mov	sl, r5
 801234e:	46a9      	mov	r9, r5
 8012350:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012354:	9501      	str	r5, [sp, #4]
 8012356:	68a2      	ldr	r2, [r4, #8]
 8012358:	b152      	cbz	r2, 8012370 <_scanf_float+0x64>
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	781b      	ldrb	r3, [r3, #0]
 801235e:	2b4e      	cmp	r3, #78	; 0x4e
 8012360:	d864      	bhi.n	801242c <_scanf_float+0x120>
 8012362:	2b40      	cmp	r3, #64	; 0x40
 8012364:	d83c      	bhi.n	80123e0 <_scanf_float+0xd4>
 8012366:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801236a:	b2c8      	uxtb	r0, r1
 801236c:	280e      	cmp	r0, #14
 801236e:	d93a      	bls.n	80123e6 <_scanf_float+0xda>
 8012370:	f1b9 0f00 	cmp.w	r9, #0
 8012374:	d003      	beq.n	801237e <_scanf_float+0x72>
 8012376:	6823      	ldr	r3, [r4, #0]
 8012378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801237c:	6023      	str	r3, [r4, #0]
 801237e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012382:	f1ba 0f01 	cmp.w	sl, #1
 8012386:	f200 8113 	bhi.w	80125b0 <_scanf_float+0x2a4>
 801238a:	455e      	cmp	r6, fp
 801238c:	f200 8105 	bhi.w	801259a <_scanf_float+0x28e>
 8012390:	2501      	movs	r5, #1
 8012392:	4628      	mov	r0, r5
 8012394:	b007      	add	sp, #28
 8012396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801239a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801239e:	2a0d      	cmp	r2, #13
 80123a0:	d8e6      	bhi.n	8012370 <_scanf_float+0x64>
 80123a2:	a101      	add	r1, pc, #4	; (adr r1, 80123a8 <_scanf_float+0x9c>)
 80123a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80123a8:	080124e7 	.word	0x080124e7
 80123ac:	08012371 	.word	0x08012371
 80123b0:	08012371 	.word	0x08012371
 80123b4:	08012371 	.word	0x08012371
 80123b8:	08012547 	.word	0x08012547
 80123bc:	0801251f 	.word	0x0801251f
 80123c0:	08012371 	.word	0x08012371
 80123c4:	08012371 	.word	0x08012371
 80123c8:	080124f5 	.word	0x080124f5
 80123cc:	08012371 	.word	0x08012371
 80123d0:	08012371 	.word	0x08012371
 80123d4:	08012371 	.word	0x08012371
 80123d8:	08012371 	.word	0x08012371
 80123dc:	080124ad 	.word	0x080124ad
 80123e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80123e4:	e7db      	b.n	801239e <_scanf_float+0x92>
 80123e6:	290e      	cmp	r1, #14
 80123e8:	d8c2      	bhi.n	8012370 <_scanf_float+0x64>
 80123ea:	a001      	add	r0, pc, #4	; (adr r0, 80123f0 <_scanf_float+0xe4>)
 80123ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80123f0:	0801249f 	.word	0x0801249f
 80123f4:	08012371 	.word	0x08012371
 80123f8:	0801249f 	.word	0x0801249f
 80123fc:	08012533 	.word	0x08012533
 8012400:	08012371 	.word	0x08012371
 8012404:	0801244d 	.word	0x0801244d
 8012408:	08012489 	.word	0x08012489
 801240c:	08012489 	.word	0x08012489
 8012410:	08012489 	.word	0x08012489
 8012414:	08012489 	.word	0x08012489
 8012418:	08012489 	.word	0x08012489
 801241c:	08012489 	.word	0x08012489
 8012420:	08012489 	.word	0x08012489
 8012424:	08012489 	.word	0x08012489
 8012428:	08012489 	.word	0x08012489
 801242c:	2b6e      	cmp	r3, #110	; 0x6e
 801242e:	d809      	bhi.n	8012444 <_scanf_float+0x138>
 8012430:	2b60      	cmp	r3, #96	; 0x60
 8012432:	d8b2      	bhi.n	801239a <_scanf_float+0x8e>
 8012434:	2b54      	cmp	r3, #84	; 0x54
 8012436:	d077      	beq.n	8012528 <_scanf_float+0x21c>
 8012438:	2b59      	cmp	r3, #89	; 0x59
 801243a:	d199      	bne.n	8012370 <_scanf_float+0x64>
 801243c:	2d07      	cmp	r5, #7
 801243e:	d197      	bne.n	8012370 <_scanf_float+0x64>
 8012440:	2508      	movs	r5, #8
 8012442:	e029      	b.n	8012498 <_scanf_float+0x18c>
 8012444:	2b74      	cmp	r3, #116	; 0x74
 8012446:	d06f      	beq.n	8012528 <_scanf_float+0x21c>
 8012448:	2b79      	cmp	r3, #121	; 0x79
 801244a:	e7f6      	b.n	801243a <_scanf_float+0x12e>
 801244c:	6821      	ldr	r1, [r4, #0]
 801244e:	05c8      	lsls	r0, r1, #23
 8012450:	d51a      	bpl.n	8012488 <_scanf_float+0x17c>
 8012452:	9b02      	ldr	r3, [sp, #8]
 8012454:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012458:	6021      	str	r1, [r4, #0]
 801245a:	f109 0901 	add.w	r9, r9, #1
 801245e:	b11b      	cbz	r3, 8012468 <_scanf_float+0x15c>
 8012460:	3b01      	subs	r3, #1
 8012462:	3201      	adds	r2, #1
 8012464:	9302      	str	r3, [sp, #8]
 8012466:	60a2      	str	r2, [r4, #8]
 8012468:	68a3      	ldr	r3, [r4, #8]
 801246a:	3b01      	subs	r3, #1
 801246c:	60a3      	str	r3, [r4, #8]
 801246e:	6923      	ldr	r3, [r4, #16]
 8012470:	3301      	adds	r3, #1
 8012472:	6123      	str	r3, [r4, #16]
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	3b01      	subs	r3, #1
 8012478:	2b00      	cmp	r3, #0
 801247a:	607b      	str	r3, [r7, #4]
 801247c:	f340 8084 	ble.w	8012588 <_scanf_float+0x27c>
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	3301      	adds	r3, #1
 8012484:	603b      	str	r3, [r7, #0]
 8012486:	e766      	b.n	8012356 <_scanf_float+0x4a>
 8012488:	eb1a 0f05 	cmn.w	sl, r5
 801248c:	f47f af70 	bne.w	8012370 <_scanf_float+0x64>
 8012490:	6822      	ldr	r2, [r4, #0]
 8012492:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8012496:	6022      	str	r2, [r4, #0]
 8012498:	f806 3b01 	strb.w	r3, [r6], #1
 801249c:	e7e4      	b.n	8012468 <_scanf_float+0x15c>
 801249e:	6822      	ldr	r2, [r4, #0]
 80124a0:	0610      	lsls	r0, r2, #24
 80124a2:	f57f af65 	bpl.w	8012370 <_scanf_float+0x64>
 80124a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80124aa:	e7f4      	b.n	8012496 <_scanf_float+0x18a>
 80124ac:	f1ba 0f00 	cmp.w	sl, #0
 80124b0:	d10e      	bne.n	80124d0 <_scanf_float+0x1c4>
 80124b2:	f1b9 0f00 	cmp.w	r9, #0
 80124b6:	d10e      	bne.n	80124d6 <_scanf_float+0x1ca>
 80124b8:	6822      	ldr	r2, [r4, #0]
 80124ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80124be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80124c2:	d108      	bne.n	80124d6 <_scanf_float+0x1ca>
 80124c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80124c8:	f04f 0a01 	mov.w	sl, #1
 80124cc:	6022      	str	r2, [r4, #0]
 80124ce:	e7e3      	b.n	8012498 <_scanf_float+0x18c>
 80124d0:	f1ba 0f02 	cmp.w	sl, #2
 80124d4:	d055      	beq.n	8012582 <_scanf_float+0x276>
 80124d6:	2d01      	cmp	r5, #1
 80124d8:	d002      	beq.n	80124e0 <_scanf_float+0x1d4>
 80124da:	2d04      	cmp	r5, #4
 80124dc:	f47f af48 	bne.w	8012370 <_scanf_float+0x64>
 80124e0:	3501      	adds	r5, #1
 80124e2:	b2ed      	uxtb	r5, r5
 80124e4:	e7d8      	b.n	8012498 <_scanf_float+0x18c>
 80124e6:	f1ba 0f01 	cmp.w	sl, #1
 80124ea:	f47f af41 	bne.w	8012370 <_scanf_float+0x64>
 80124ee:	f04f 0a02 	mov.w	sl, #2
 80124f2:	e7d1      	b.n	8012498 <_scanf_float+0x18c>
 80124f4:	b97d      	cbnz	r5, 8012516 <_scanf_float+0x20a>
 80124f6:	f1b9 0f00 	cmp.w	r9, #0
 80124fa:	f47f af3c 	bne.w	8012376 <_scanf_float+0x6a>
 80124fe:	6822      	ldr	r2, [r4, #0]
 8012500:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012504:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012508:	f47f af39 	bne.w	801237e <_scanf_float+0x72>
 801250c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012510:	2501      	movs	r5, #1
 8012512:	6022      	str	r2, [r4, #0]
 8012514:	e7c0      	b.n	8012498 <_scanf_float+0x18c>
 8012516:	2d03      	cmp	r5, #3
 8012518:	d0e2      	beq.n	80124e0 <_scanf_float+0x1d4>
 801251a:	2d05      	cmp	r5, #5
 801251c:	e7de      	b.n	80124dc <_scanf_float+0x1d0>
 801251e:	2d02      	cmp	r5, #2
 8012520:	f47f af26 	bne.w	8012370 <_scanf_float+0x64>
 8012524:	2503      	movs	r5, #3
 8012526:	e7b7      	b.n	8012498 <_scanf_float+0x18c>
 8012528:	2d06      	cmp	r5, #6
 801252a:	f47f af21 	bne.w	8012370 <_scanf_float+0x64>
 801252e:	2507      	movs	r5, #7
 8012530:	e7b2      	b.n	8012498 <_scanf_float+0x18c>
 8012532:	6822      	ldr	r2, [r4, #0]
 8012534:	0591      	lsls	r1, r2, #22
 8012536:	f57f af1b 	bpl.w	8012370 <_scanf_float+0x64>
 801253a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801253e:	6022      	str	r2, [r4, #0]
 8012540:	f8cd 9004 	str.w	r9, [sp, #4]
 8012544:	e7a8      	b.n	8012498 <_scanf_float+0x18c>
 8012546:	6822      	ldr	r2, [r4, #0]
 8012548:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801254c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012550:	d006      	beq.n	8012560 <_scanf_float+0x254>
 8012552:	0550      	lsls	r0, r2, #21
 8012554:	f57f af0c 	bpl.w	8012370 <_scanf_float+0x64>
 8012558:	f1b9 0f00 	cmp.w	r9, #0
 801255c:	f43f af0f 	beq.w	801237e <_scanf_float+0x72>
 8012560:	0591      	lsls	r1, r2, #22
 8012562:	bf58      	it	pl
 8012564:	9901      	ldrpl	r1, [sp, #4]
 8012566:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801256a:	bf58      	it	pl
 801256c:	eba9 0101 	subpl.w	r1, r9, r1
 8012570:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012574:	f04f 0900 	mov.w	r9, #0
 8012578:	bf58      	it	pl
 801257a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801257e:	6022      	str	r2, [r4, #0]
 8012580:	e78a      	b.n	8012498 <_scanf_float+0x18c>
 8012582:	f04f 0a03 	mov.w	sl, #3
 8012586:	e787      	b.n	8012498 <_scanf_float+0x18c>
 8012588:	4639      	mov	r1, r7
 801258a:	4640      	mov	r0, r8
 801258c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012590:	4798      	blx	r3
 8012592:	2800      	cmp	r0, #0
 8012594:	f43f aedf 	beq.w	8012356 <_scanf_float+0x4a>
 8012598:	e6ea      	b.n	8012370 <_scanf_float+0x64>
 801259a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801259e:	463a      	mov	r2, r7
 80125a0:	4640      	mov	r0, r8
 80125a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80125a6:	4798      	blx	r3
 80125a8:	6923      	ldr	r3, [r4, #16]
 80125aa:	3b01      	subs	r3, #1
 80125ac:	6123      	str	r3, [r4, #16]
 80125ae:	e6ec      	b.n	801238a <_scanf_float+0x7e>
 80125b0:	1e6b      	subs	r3, r5, #1
 80125b2:	2b06      	cmp	r3, #6
 80125b4:	d825      	bhi.n	8012602 <_scanf_float+0x2f6>
 80125b6:	2d02      	cmp	r5, #2
 80125b8:	d836      	bhi.n	8012628 <_scanf_float+0x31c>
 80125ba:	455e      	cmp	r6, fp
 80125bc:	f67f aee8 	bls.w	8012390 <_scanf_float+0x84>
 80125c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80125c4:	463a      	mov	r2, r7
 80125c6:	4640      	mov	r0, r8
 80125c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80125cc:	4798      	blx	r3
 80125ce:	6923      	ldr	r3, [r4, #16]
 80125d0:	3b01      	subs	r3, #1
 80125d2:	6123      	str	r3, [r4, #16]
 80125d4:	e7f1      	b.n	80125ba <_scanf_float+0x2ae>
 80125d6:	9802      	ldr	r0, [sp, #8]
 80125d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80125dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80125e0:	463a      	mov	r2, r7
 80125e2:	9002      	str	r0, [sp, #8]
 80125e4:	4640      	mov	r0, r8
 80125e6:	4798      	blx	r3
 80125e8:	6923      	ldr	r3, [r4, #16]
 80125ea:	3b01      	subs	r3, #1
 80125ec:	6123      	str	r3, [r4, #16]
 80125ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80125f2:	fa5f fa8a 	uxtb.w	sl, sl
 80125f6:	f1ba 0f02 	cmp.w	sl, #2
 80125fa:	d1ec      	bne.n	80125d6 <_scanf_float+0x2ca>
 80125fc:	3d03      	subs	r5, #3
 80125fe:	b2ed      	uxtb	r5, r5
 8012600:	1b76      	subs	r6, r6, r5
 8012602:	6823      	ldr	r3, [r4, #0]
 8012604:	05da      	lsls	r2, r3, #23
 8012606:	d52f      	bpl.n	8012668 <_scanf_float+0x35c>
 8012608:	055b      	lsls	r3, r3, #21
 801260a:	d510      	bpl.n	801262e <_scanf_float+0x322>
 801260c:	455e      	cmp	r6, fp
 801260e:	f67f aebf 	bls.w	8012390 <_scanf_float+0x84>
 8012612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012616:	463a      	mov	r2, r7
 8012618:	4640      	mov	r0, r8
 801261a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801261e:	4798      	blx	r3
 8012620:	6923      	ldr	r3, [r4, #16]
 8012622:	3b01      	subs	r3, #1
 8012624:	6123      	str	r3, [r4, #16]
 8012626:	e7f1      	b.n	801260c <_scanf_float+0x300>
 8012628:	46aa      	mov	sl, r5
 801262a:	9602      	str	r6, [sp, #8]
 801262c:	e7df      	b.n	80125ee <_scanf_float+0x2e2>
 801262e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012632:	6923      	ldr	r3, [r4, #16]
 8012634:	2965      	cmp	r1, #101	; 0x65
 8012636:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801263a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801263e:	6123      	str	r3, [r4, #16]
 8012640:	d00c      	beq.n	801265c <_scanf_float+0x350>
 8012642:	2945      	cmp	r1, #69	; 0x45
 8012644:	d00a      	beq.n	801265c <_scanf_float+0x350>
 8012646:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801264a:	463a      	mov	r2, r7
 801264c:	4640      	mov	r0, r8
 801264e:	4798      	blx	r3
 8012650:	6923      	ldr	r3, [r4, #16]
 8012652:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012656:	3b01      	subs	r3, #1
 8012658:	1eb5      	subs	r5, r6, #2
 801265a:	6123      	str	r3, [r4, #16]
 801265c:	463a      	mov	r2, r7
 801265e:	4640      	mov	r0, r8
 8012660:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012664:	4798      	blx	r3
 8012666:	462e      	mov	r6, r5
 8012668:	6825      	ldr	r5, [r4, #0]
 801266a:	f015 0510 	ands.w	r5, r5, #16
 801266e:	d155      	bne.n	801271c <_scanf_float+0x410>
 8012670:	7035      	strb	r5, [r6, #0]
 8012672:	6823      	ldr	r3, [r4, #0]
 8012674:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801267c:	d11b      	bne.n	80126b6 <_scanf_float+0x3aa>
 801267e:	9b01      	ldr	r3, [sp, #4]
 8012680:	454b      	cmp	r3, r9
 8012682:	eba3 0209 	sub.w	r2, r3, r9
 8012686:	d123      	bne.n	80126d0 <_scanf_float+0x3c4>
 8012688:	2200      	movs	r2, #0
 801268a:	4659      	mov	r1, fp
 801268c:	4640      	mov	r0, r8
 801268e:	f000 fea7 	bl	80133e0 <_strtod_r>
 8012692:	6822      	ldr	r2, [r4, #0]
 8012694:	9b03      	ldr	r3, [sp, #12]
 8012696:	f012 0f02 	tst.w	r2, #2
 801269a:	4606      	mov	r6, r0
 801269c:	460f      	mov	r7, r1
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	d021      	beq.n	80126e6 <_scanf_float+0x3da>
 80126a2:	1d1a      	adds	r2, r3, #4
 80126a4:	9903      	ldr	r1, [sp, #12]
 80126a6:	600a      	str	r2, [r1, #0]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	e9c3 6700 	strd	r6, r7, [r3]
 80126ae:	68e3      	ldr	r3, [r4, #12]
 80126b0:	3301      	adds	r3, #1
 80126b2:	60e3      	str	r3, [r4, #12]
 80126b4:	e66d      	b.n	8012392 <_scanf_float+0x86>
 80126b6:	9b04      	ldr	r3, [sp, #16]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d0e5      	beq.n	8012688 <_scanf_float+0x37c>
 80126bc:	9905      	ldr	r1, [sp, #20]
 80126be:	230a      	movs	r3, #10
 80126c0:	462a      	mov	r2, r5
 80126c2:	4640      	mov	r0, r8
 80126c4:	3101      	adds	r1, #1
 80126c6:	f000 ff0d 	bl	80134e4 <_strtol_r>
 80126ca:	9b04      	ldr	r3, [sp, #16]
 80126cc:	9e05      	ldr	r6, [sp, #20]
 80126ce:	1ac2      	subs	r2, r0, r3
 80126d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80126d4:	429e      	cmp	r6, r3
 80126d6:	bf28      	it	cs
 80126d8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80126dc:	4630      	mov	r0, r6
 80126de:	4910      	ldr	r1, [pc, #64]	; (8012720 <_scanf_float+0x414>)
 80126e0:	f000 f83e 	bl	8012760 <siprintf>
 80126e4:	e7d0      	b.n	8012688 <_scanf_float+0x37c>
 80126e6:	f012 0f04 	tst.w	r2, #4
 80126ea:	f103 0204 	add.w	r2, r3, #4
 80126ee:	d1d9      	bne.n	80126a4 <_scanf_float+0x398>
 80126f0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80126f4:	f8cc 2000 	str.w	r2, [ip]
 80126f8:	f8d3 8000 	ldr.w	r8, [r3]
 80126fc:	4602      	mov	r2, r0
 80126fe:	460b      	mov	r3, r1
 8012700:	f7ee f9ca 	bl	8000a98 <__aeabi_dcmpun>
 8012704:	b128      	cbz	r0, 8012712 <_scanf_float+0x406>
 8012706:	4807      	ldr	r0, [pc, #28]	; (8012724 <_scanf_float+0x418>)
 8012708:	f000 f826 	bl	8012758 <nanf>
 801270c:	f8c8 0000 	str.w	r0, [r8]
 8012710:	e7cd      	b.n	80126ae <_scanf_float+0x3a2>
 8012712:	4630      	mov	r0, r6
 8012714:	4639      	mov	r1, r7
 8012716:	f7ee fa1d 	bl	8000b54 <__aeabi_d2f>
 801271a:	e7f7      	b.n	801270c <_scanf_float+0x400>
 801271c:	2500      	movs	r5, #0
 801271e:	e638      	b.n	8012392 <_scanf_float+0x86>
 8012720:	08018400 	.word	0x08018400
 8012724:	08018870 	.word	0x08018870

08012728 <iprintf>:
 8012728:	b40f      	push	{r0, r1, r2, r3}
 801272a:	4b0a      	ldr	r3, [pc, #40]	; (8012754 <iprintf+0x2c>)
 801272c:	b513      	push	{r0, r1, r4, lr}
 801272e:	681c      	ldr	r4, [r3, #0]
 8012730:	b124      	cbz	r4, 801273c <iprintf+0x14>
 8012732:	69a3      	ldr	r3, [r4, #24]
 8012734:	b913      	cbnz	r3, 801273c <iprintf+0x14>
 8012736:	4620      	mov	r0, r4
 8012738:	f001 fda8 	bl	801428c <__sinit>
 801273c:	ab05      	add	r3, sp, #20
 801273e:	4620      	mov	r0, r4
 8012740:	9a04      	ldr	r2, [sp, #16]
 8012742:	68a1      	ldr	r1, [r4, #8]
 8012744:	9301      	str	r3, [sp, #4]
 8012746:	f003 f901 	bl	801594c <_vfiprintf_r>
 801274a:	b002      	add	sp, #8
 801274c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012750:	b004      	add	sp, #16
 8012752:	4770      	bx	lr
 8012754:	20000038 	.word	0x20000038

08012758 <nanf>:
 8012758:	4800      	ldr	r0, [pc, #0]	; (801275c <nanf+0x4>)
 801275a:	4770      	bx	lr
 801275c:	7fc00000 	.word	0x7fc00000

08012760 <siprintf>:
 8012760:	b40e      	push	{r1, r2, r3}
 8012762:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012766:	b500      	push	{lr}
 8012768:	b09c      	sub	sp, #112	; 0x70
 801276a:	ab1d      	add	r3, sp, #116	; 0x74
 801276c:	9002      	str	r0, [sp, #8]
 801276e:	9006      	str	r0, [sp, #24]
 8012770:	9107      	str	r1, [sp, #28]
 8012772:	9104      	str	r1, [sp, #16]
 8012774:	4808      	ldr	r0, [pc, #32]	; (8012798 <siprintf+0x38>)
 8012776:	4909      	ldr	r1, [pc, #36]	; (801279c <siprintf+0x3c>)
 8012778:	f853 2b04 	ldr.w	r2, [r3], #4
 801277c:	9105      	str	r1, [sp, #20]
 801277e:	6800      	ldr	r0, [r0, #0]
 8012780:	a902      	add	r1, sp, #8
 8012782:	9301      	str	r3, [sp, #4]
 8012784:	f002 ffba 	bl	80156fc <_svfiprintf_r>
 8012788:	2200      	movs	r2, #0
 801278a:	9b02      	ldr	r3, [sp, #8]
 801278c:	701a      	strb	r2, [r3, #0]
 801278e:	b01c      	add	sp, #112	; 0x70
 8012790:	f85d eb04 	ldr.w	lr, [sp], #4
 8012794:	b003      	add	sp, #12
 8012796:	4770      	bx	lr
 8012798:	20000038 	.word	0x20000038
 801279c:	ffff0208 	.word	0xffff0208

080127a0 <strncmp>:
 80127a0:	4603      	mov	r3, r0
 80127a2:	b510      	push	{r4, lr}
 80127a4:	b172      	cbz	r2, 80127c4 <strncmp+0x24>
 80127a6:	3901      	subs	r1, #1
 80127a8:	1884      	adds	r4, r0, r2
 80127aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 80127ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80127b2:	4290      	cmp	r0, r2
 80127b4:	d101      	bne.n	80127ba <strncmp+0x1a>
 80127b6:	42a3      	cmp	r3, r4
 80127b8:	d101      	bne.n	80127be <strncmp+0x1e>
 80127ba:	1a80      	subs	r0, r0, r2
 80127bc:	bd10      	pop	{r4, pc}
 80127be:	2800      	cmp	r0, #0
 80127c0:	d1f3      	bne.n	80127aa <strncmp+0xa>
 80127c2:	e7fa      	b.n	80127ba <strncmp+0x1a>
 80127c4:	4610      	mov	r0, r2
 80127c6:	e7f9      	b.n	80127bc <strncmp+0x1c>

080127c8 <sulp>:
 80127c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127cc:	460f      	mov	r7, r1
 80127ce:	4690      	mov	r8, r2
 80127d0:	f002 fd00 	bl	80151d4 <__ulp>
 80127d4:	4604      	mov	r4, r0
 80127d6:	460d      	mov	r5, r1
 80127d8:	f1b8 0f00 	cmp.w	r8, #0
 80127dc:	d011      	beq.n	8012802 <sulp+0x3a>
 80127de:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80127e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	dd0b      	ble.n	8012802 <sulp+0x3a>
 80127ea:	2400      	movs	r4, #0
 80127ec:	051b      	lsls	r3, r3, #20
 80127ee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80127f2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80127f6:	4622      	mov	r2, r4
 80127f8:	462b      	mov	r3, r5
 80127fa:	f7ed feb3 	bl	8000564 <__aeabi_dmul>
 80127fe:	4604      	mov	r4, r0
 8012800:	460d      	mov	r5, r1
 8012802:	4620      	mov	r0, r4
 8012804:	4629      	mov	r1, r5
 8012806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801280a:	0000      	movs	r0, r0
 801280c:	0000      	movs	r0, r0
	...

08012810 <_strtod_l>:
 8012810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012814:	469b      	mov	fp, r3
 8012816:	2300      	movs	r3, #0
 8012818:	b09f      	sub	sp, #124	; 0x7c
 801281a:	931a      	str	r3, [sp, #104]	; 0x68
 801281c:	4b9e      	ldr	r3, [pc, #632]	; (8012a98 <_strtod_l+0x288>)
 801281e:	4682      	mov	sl, r0
 8012820:	681f      	ldr	r7, [r3, #0]
 8012822:	460e      	mov	r6, r1
 8012824:	4638      	mov	r0, r7
 8012826:	9215      	str	r2, [sp, #84]	; 0x54
 8012828:	f7ed fcd8 	bl	80001dc <strlen>
 801282c:	f04f 0800 	mov.w	r8, #0
 8012830:	4604      	mov	r4, r0
 8012832:	f04f 0900 	mov.w	r9, #0
 8012836:	9619      	str	r6, [sp, #100]	; 0x64
 8012838:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801283a:	781a      	ldrb	r2, [r3, #0]
 801283c:	2a2b      	cmp	r2, #43	; 0x2b
 801283e:	d04c      	beq.n	80128da <_strtod_l+0xca>
 8012840:	d83a      	bhi.n	80128b8 <_strtod_l+0xa8>
 8012842:	2a0d      	cmp	r2, #13
 8012844:	d833      	bhi.n	80128ae <_strtod_l+0x9e>
 8012846:	2a08      	cmp	r2, #8
 8012848:	d833      	bhi.n	80128b2 <_strtod_l+0xa2>
 801284a:	2a00      	cmp	r2, #0
 801284c:	d03d      	beq.n	80128ca <_strtod_l+0xba>
 801284e:	2300      	movs	r3, #0
 8012850:	930a      	str	r3, [sp, #40]	; 0x28
 8012852:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8012854:	782b      	ldrb	r3, [r5, #0]
 8012856:	2b30      	cmp	r3, #48	; 0x30
 8012858:	f040 80aa 	bne.w	80129b0 <_strtod_l+0x1a0>
 801285c:	786b      	ldrb	r3, [r5, #1]
 801285e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012862:	2b58      	cmp	r3, #88	; 0x58
 8012864:	d166      	bne.n	8012934 <_strtod_l+0x124>
 8012866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012868:	4650      	mov	r0, sl
 801286a:	9301      	str	r3, [sp, #4]
 801286c:	ab1a      	add	r3, sp, #104	; 0x68
 801286e:	9300      	str	r3, [sp, #0]
 8012870:	4a8a      	ldr	r2, [pc, #552]	; (8012a9c <_strtod_l+0x28c>)
 8012872:	f8cd b008 	str.w	fp, [sp, #8]
 8012876:	ab1b      	add	r3, sp, #108	; 0x6c
 8012878:	a919      	add	r1, sp, #100	; 0x64
 801287a:	f001 fe0d 	bl	8014498 <__gethex>
 801287e:	f010 0607 	ands.w	r6, r0, #7
 8012882:	4604      	mov	r4, r0
 8012884:	d005      	beq.n	8012892 <_strtod_l+0x82>
 8012886:	2e06      	cmp	r6, #6
 8012888:	d129      	bne.n	80128de <_strtod_l+0xce>
 801288a:	2300      	movs	r3, #0
 801288c:	3501      	adds	r5, #1
 801288e:	9519      	str	r5, [sp, #100]	; 0x64
 8012890:	930a      	str	r3, [sp, #40]	; 0x28
 8012892:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012894:	2b00      	cmp	r3, #0
 8012896:	f040 858a 	bne.w	80133ae <_strtod_l+0xb9e>
 801289a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801289c:	b1d3      	cbz	r3, 80128d4 <_strtod_l+0xc4>
 801289e:	4642      	mov	r2, r8
 80128a0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80128a4:	4610      	mov	r0, r2
 80128a6:	4619      	mov	r1, r3
 80128a8:	b01f      	add	sp, #124	; 0x7c
 80128aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128ae:	2a20      	cmp	r2, #32
 80128b0:	d1cd      	bne.n	801284e <_strtod_l+0x3e>
 80128b2:	3301      	adds	r3, #1
 80128b4:	9319      	str	r3, [sp, #100]	; 0x64
 80128b6:	e7bf      	b.n	8012838 <_strtod_l+0x28>
 80128b8:	2a2d      	cmp	r2, #45	; 0x2d
 80128ba:	d1c8      	bne.n	801284e <_strtod_l+0x3e>
 80128bc:	2201      	movs	r2, #1
 80128be:	920a      	str	r2, [sp, #40]	; 0x28
 80128c0:	1c5a      	adds	r2, r3, #1
 80128c2:	9219      	str	r2, [sp, #100]	; 0x64
 80128c4:	785b      	ldrb	r3, [r3, #1]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d1c3      	bne.n	8012852 <_strtod_l+0x42>
 80128ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128cc:	9619      	str	r6, [sp, #100]	; 0x64
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	f040 856b 	bne.w	80133aa <_strtod_l+0xb9a>
 80128d4:	4642      	mov	r2, r8
 80128d6:	464b      	mov	r3, r9
 80128d8:	e7e4      	b.n	80128a4 <_strtod_l+0x94>
 80128da:	2200      	movs	r2, #0
 80128dc:	e7ef      	b.n	80128be <_strtod_l+0xae>
 80128de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80128e0:	b13a      	cbz	r2, 80128f2 <_strtod_l+0xe2>
 80128e2:	2135      	movs	r1, #53	; 0x35
 80128e4:	a81c      	add	r0, sp, #112	; 0x70
 80128e6:	f002 fd79 	bl	80153dc <__copybits>
 80128ea:	4650      	mov	r0, sl
 80128ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 80128ee:	f002 f941 	bl	8014b74 <_Bfree>
 80128f2:	3e01      	subs	r6, #1
 80128f4:	2e04      	cmp	r6, #4
 80128f6:	d806      	bhi.n	8012906 <_strtod_l+0xf6>
 80128f8:	e8df f006 	tbb	[pc, r6]
 80128fc:	1714030a 	.word	0x1714030a
 8012900:	0a          	.byte	0x0a
 8012901:	00          	.byte	0x00
 8012902:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8012906:	0721      	lsls	r1, r4, #28
 8012908:	d5c3      	bpl.n	8012892 <_strtod_l+0x82>
 801290a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801290e:	e7c0      	b.n	8012892 <_strtod_l+0x82>
 8012910:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012912:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8012916:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801291a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801291e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8012922:	e7f0      	b.n	8012906 <_strtod_l+0xf6>
 8012924:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012aa0 <_strtod_l+0x290>
 8012928:	e7ed      	b.n	8012906 <_strtod_l+0xf6>
 801292a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801292e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8012932:	e7e8      	b.n	8012906 <_strtod_l+0xf6>
 8012934:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012936:	1c5a      	adds	r2, r3, #1
 8012938:	9219      	str	r2, [sp, #100]	; 0x64
 801293a:	785b      	ldrb	r3, [r3, #1]
 801293c:	2b30      	cmp	r3, #48	; 0x30
 801293e:	d0f9      	beq.n	8012934 <_strtod_l+0x124>
 8012940:	2b00      	cmp	r3, #0
 8012942:	d0a6      	beq.n	8012892 <_strtod_l+0x82>
 8012944:	2301      	movs	r3, #1
 8012946:	9307      	str	r3, [sp, #28]
 8012948:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801294a:	220a      	movs	r2, #10
 801294c:	9308      	str	r3, [sp, #32]
 801294e:	2300      	movs	r3, #0
 8012950:	469b      	mov	fp, r3
 8012952:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8012956:	9819      	ldr	r0, [sp, #100]	; 0x64
 8012958:	7805      	ldrb	r5, [r0, #0]
 801295a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801295e:	b2d9      	uxtb	r1, r3
 8012960:	2909      	cmp	r1, #9
 8012962:	d927      	bls.n	80129b4 <_strtod_l+0x1a4>
 8012964:	4622      	mov	r2, r4
 8012966:	4639      	mov	r1, r7
 8012968:	f7ff ff1a 	bl	80127a0 <strncmp>
 801296c:	2800      	cmp	r0, #0
 801296e:	d033      	beq.n	80129d8 <_strtod_l+0x1c8>
 8012970:	2000      	movs	r0, #0
 8012972:	462a      	mov	r2, r5
 8012974:	465c      	mov	r4, fp
 8012976:	4603      	mov	r3, r0
 8012978:	9004      	str	r0, [sp, #16]
 801297a:	2a65      	cmp	r2, #101	; 0x65
 801297c:	d001      	beq.n	8012982 <_strtod_l+0x172>
 801297e:	2a45      	cmp	r2, #69	; 0x45
 8012980:	d114      	bne.n	80129ac <_strtod_l+0x19c>
 8012982:	b91c      	cbnz	r4, 801298c <_strtod_l+0x17c>
 8012984:	9a07      	ldr	r2, [sp, #28]
 8012986:	4302      	orrs	r2, r0
 8012988:	d09f      	beq.n	80128ca <_strtod_l+0xba>
 801298a:	2400      	movs	r4, #0
 801298c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801298e:	1c72      	adds	r2, r6, #1
 8012990:	9219      	str	r2, [sp, #100]	; 0x64
 8012992:	7872      	ldrb	r2, [r6, #1]
 8012994:	2a2b      	cmp	r2, #43	; 0x2b
 8012996:	d079      	beq.n	8012a8c <_strtod_l+0x27c>
 8012998:	2a2d      	cmp	r2, #45	; 0x2d
 801299a:	f000 8083 	beq.w	8012aa4 <_strtod_l+0x294>
 801299e:	2700      	movs	r7, #0
 80129a0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80129a4:	2909      	cmp	r1, #9
 80129a6:	f240 8083 	bls.w	8012ab0 <_strtod_l+0x2a0>
 80129aa:	9619      	str	r6, [sp, #100]	; 0x64
 80129ac:	2500      	movs	r5, #0
 80129ae:	e09f      	b.n	8012af0 <_strtod_l+0x2e0>
 80129b0:	2300      	movs	r3, #0
 80129b2:	e7c8      	b.n	8012946 <_strtod_l+0x136>
 80129b4:	f1bb 0f08 	cmp.w	fp, #8
 80129b8:	bfd5      	itete	le
 80129ba:	9906      	ldrle	r1, [sp, #24]
 80129bc:	9905      	ldrgt	r1, [sp, #20]
 80129be:	fb02 3301 	mlale	r3, r2, r1, r3
 80129c2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80129c6:	f100 0001 	add.w	r0, r0, #1
 80129ca:	bfd4      	ite	le
 80129cc:	9306      	strle	r3, [sp, #24]
 80129ce:	9305      	strgt	r3, [sp, #20]
 80129d0:	f10b 0b01 	add.w	fp, fp, #1
 80129d4:	9019      	str	r0, [sp, #100]	; 0x64
 80129d6:	e7be      	b.n	8012956 <_strtod_l+0x146>
 80129d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80129da:	191a      	adds	r2, r3, r4
 80129dc:	9219      	str	r2, [sp, #100]	; 0x64
 80129de:	5d1a      	ldrb	r2, [r3, r4]
 80129e0:	f1bb 0f00 	cmp.w	fp, #0
 80129e4:	d036      	beq.n	8012a54 <_strtod_l+0x244>
 80129e6:	465c      	mov	r4, fp
 80129e8:	9004      	str	r0, [sp, #16]
 80129ea:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80129ee:	2b09      	cmp	r3, #9
 80129f0:	d912      	bls.n	8012a18 <_strtod_l+0x208>
 80129f2:	2301      	movs	r3, #1
 80129f4:	e7c1      	b.n	801297a <_strtod_l+0x16a>
 80129f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80129f8:	3001      	adds	r0, #1
 80129fa:	1c5a      	adds	r2, r3, #1
 80129fc:	9219      	str	r2, [sp, #100]	; 0x64
 80129fe:	785a      	ldrb	r2, [r3, #1]
 8012a00:	2a30      	cmp	r2, #48	; 0x30
 8012a02:	d0f8      	beq.n	80129f6 <_strtod_l+0x1e6>
 8012a04:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8012a08:	2b08      	cmp	r3, #8
 8012a0a:	f200 84d5 	bhi.w	80133b8 <_strtod_l+0xba8>
 8012a0e:	9004      	str	r0, [sp, #16]
 8012a10:	2000      	movs	r0, #0
 8012a12:	4604      	mov	r4, r0
 8012a14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012a16:	9308      	str	r3, [sp, #32]
 8012a18:	3a30      	subs	r2, #48	; 0x30
 8012a1a:	f100 0301 	add.w	r3, r0, #1
 8012a1e:	d013      	beq.n	8012a48 <_strtod_l+0x238>
 8012a20:	9904      	ldr	r1, [sp, #16]
 8012a22:	1905      	adds	r5, r0, r4
 8012a24:	4419      	add	r1, r3
 8012a26:	9104      	str	r1, [sp, #16]
 8012a28:	4623      	mov	r3, r4
 8012a2a:	210a      	movs	r1, #10
 8012a2c:	42ab      	cmp	r3, r5
 8012a2e:	d113      	bne.n	8012a58 <_strtod_l+0x248>
 8012a30:	1823      	adds	r3, r4, r0
 8012a32:	2b08      	cmp	r3, #8
 8012a34:	f104 0401 	add.w	r4, r4, #1
 8012a38:	4404      	add	r4, r0
 8012a3a:	dc1b      	bgt.n	8012a74 <_strtod_l+0x264>
 8012a3c:	230a      	movs	r3, #10
 8012a3e:	9906      	ldr	r1, [sp, #24]
 8012a40:	fb03 2301 	mla	r3, r3, r1, r2
 8012a44:	9306      	str	r3, [sp, #24]
 8012a46:	2300      	movs	r3, #0
 8012a48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	1c51      	adds	r1, r2, #1
 8012a4e:	9119      	str	r1, [sp, #100]	; 0x64
 8012a50:	7852      	ldrb	r2, [r2, #1]
 8012a52:	e7ca      	b.n	80129ea <_strtod_l+0x1da>
 8012a54:	4658      	mov	r0, fp
 8012a56:	e7d3      	b.n	8012a00 <_strtod_l+0x1f0>
 8012a58:	2b08      	cmp	r3, #8
 8012a5a:	dc04      	bgt.n	8012a66 <_strtod_l+0x256>
 8012a5c:	9f06      	ldr	r7, [sp, #24]
 8012a5e:	434f      	muls	r7, r1
 8012a60:	9706      	str	r7, [sp, #24]
 8012a62:	3301      	adds	r3, #1
 8012a64:	e7e2      	b.n	8012a2c <_strtod_l+0x21c>
 8012a66:	1c5f      	adds	r7, r3, #1
 8012a68:	2f10      	cmp	r7, #16
 8012a6a:	bfde      	ittt	le
 8012a6c:	9f05      	ldrle	r7, [sp, #20]
 8012a6e:	434f      	mulle	r7, r1
 8012a70:	9705      	strle	r7, [sp, #20]
 8012a72:	e7f6      	b.n	8012a62 <_strtod_l+0x252>
 8012a74:	2c10      	cmp	r4, #16
 8012a76:	bfdf      	itttt	le
 8012a78:	230a      	movle	r3, #10
 8012a7a:	9905      	ldrle	r1, [sp, #20]
 8012a7c:	fb03 2301 	mlale	r3, r3, r1, r2
 8012a80:	9305      	strle	r3, [sp, #20]
 8012a82:	e7e0      	b.n	8012a46 <_strtod_l+0x236>
 8012a84:	2300      	movs	r3, #0
 8012a86:	9304      	str	r3, [sp, #16]
 8012a88:	2301      	movs	r3, #1
 8012a8a:	e77b      	b.n	8012984 <_strtod_l+0x174>
 8012a8c:	2700      	movs	r7, #0
 8012a8e:	1cb2      	adds	r2, r6, #2
 8012a90:	9219      	str	r2, [sp, #100]	; 0x64
 8012a92:	78b2      	ldrb	r2, [r6, #2]
 8012a94:	e784      	b.n	80129a0 <_strtod_l+0x190>
 8012a96:	bf00      	nop
 8012a98:	080186b4 	.word	0x080186b4
 8012a9c:	08018408 	.word	0x08018408
 8012aa0:	7ff00000 	.word	0x7ff00000
 8012aa4:	2701      	movs	r7, #1
 8012aa6:	e7f2      	b.n	8012a8e <_strtod_l+0x27e>
 8012aa8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012aaa:	1c51      	adds	r1, r2, #1
 8012aac:	9119      	str	r1, [sp, #100]	; 0x64
 8012aae:	7852      	ldrb	r2, [r2, #1]
 8012ab0:	2a30      	cmp	r2, #48	; 0x30
 8012ab2:	d0f9      	beq.n	8012aa8 <_strtod_l+0x298>
 8012ab4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8012ab8:	2908      	cmp	r1, #8
 8012aba:	f63f af77 	bhi.w	80129ac <_strtod_l+0x19c>
 8012abe:	f04f 0e0a 	mov.w	lr, #10
 8012ac2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8012ac6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012ac8:	9209      	str	r2, [sp, #36]	; 0x24
 8012aca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012acc:	1c51      	adds	r1, r2, #1
 8012ace:	9119      	str	r1, [sp, #100]	; 0x64
 8012ad0:	7852      	ldrb	r2, [r2, #1]
 8012ad2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8012ad6:	2d09      	cmp	r5, #9
 8012ad8:	d935      	bls.n	8012b46 <_strtod_l+0x336>
 8012ada:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012adc:	1b49      	subs	r1, r1, r5
 8012ade:	2908      	cmp	r1, #8
 8012ae0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8012ae4:	dc02      	bgt.n	8012aec <_strtod_l+0x2dc>
 8012ae6:	4565      	cmp	r5, ip
 8012ae8:	bfa8      	it	ge
 8012aea:	4665      	movge	r5, ip
 8012aec:	b107      	cbz	r7, 8012af0 <_strtod_l+0x2e0>
 8012aee:	426d      	negs	r5, r5
 8012af0:	2c00      	cmp	r4, #0
 8012af2:	d14c      	bne.n	8012b8e <_strtod_l+0x37e>
 8012af4:	9907      	ldr	r1, [sp, #28]
 8012af6:	4301      	orrs	r1, r0
 8012af8:	f47f aecb 	bne.w	8012892 <_strtod_l+0x82>
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	f47f aee4 	bne.w	80128ca <_strtod_l+0xba>
 8012b02:	2a69      	cmp	r2, #105	; 0x69
 8012b04:	d026      	beq.n	8012b54 <_strtod_l+0x344>
 8012b06:	dc23      	bgt.n	8012b50 <_strtod_l+0x340>
 8012b08:	2a49      	cmp	r2, #73	; 0x49
 8012b0a:	d023      	beq.n	8012b54 <_strtod_l+0x344>
 8012b0c:	2a4e      	cmp	r2, #78	; 0x4e
 8012b0e:	f47f aedc 	bne.w	80128ca <_strtod_l+0xba>
 8012b12:	499d      	ldr	r1, [pc, #628]	; (8012d88 <_strtod_l+0x578>)
 8012b14:	a819      	add	r0, sp, #100	; 0x64
 8012b16:	f001 ff0d 	bl	8014934 <__match>
 8012b1a:	2800      	cmp	r0, #0
 8012b1c:	f43f aed5 	beq.w	80128ca <_strtod_l+0xba>
 8012b20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	2b28      	cmp	r3, #40	; 0x28
 8012b26:	d12c      	bne.n	8012b82 <_strtod_l+0x372>
 8012b28:	4998      	ldr	r1, [pc, #608]	; (8012d8c <_strtod_l+0x57c>)
 8012b2a:	aa1c      	add	r2, sp, #112	; 0x70
 8012b2c:	a819      	add	r0, sp, #100	; 0x64
 8012b2e:	f001 ff15 	bl	801495c <__hexnan>
 8012b32:	2805      	cmp	r0, #5
 8012b34:	d125      	bne.n	8012b82 <_strtod_l+0x372>
 8012b36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b38:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8012b3c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8012b40:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8012b44:	e6a5      	b.n	8012892 <_strtod_l+0x82>
 8012b46:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8012b4a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8012b4e:	e7bc      	b.n	8012aca <_strtod_l+0x2ba>
 8012b50:	2a6e      	cmp	r2, #110	; 0x6e
 8012b52:	e7dc      	b.n	8012b0e <_strtod_l+0x2fe>
 8012b54:	498e      	ldr	r1, [pc, #568]	; (8012d90 <_strtod_l+0x580>)
 8012b56:	a819      	add	r0, sp, #100	; 0x64
 8012b58:	f001 feec 	bl	8014934 <__match>
 8012b5c:	2800      	cmp	r0, #0
 8012b5e:	f43f aeb4 	beq.w	80128ca <_strtod_l+0xba>
 8012b62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012b64:	498b      	ldr	r1, [pc, #556]	; (8012d94 <_strtod_l+0x584>)
 8012b66:	3b01      	subs	r3, #1
 8012b68:	a819      	add	r0, sp, #100	; 0x64
 8012b6a:	9319      	str	r3, [sp, #100]	; 0x64
 8012b6c:	f001 fee2 	bl	8014934 <__match>
 8012b70:	b910      	cbnz	r0, 8012b78 <_strtod_l+0x368>
 8012b72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012b74:	3301      	adds	r3, #1
 8012b76:	9319      	str	r3, [sp, #100]	; 0x64
 8012b78:	f04f 0800 	mov.w	r8, #0
 8012b7c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8012d98 <_strtod_l+0x588>
 8012b80:	e687      	b.n	8012892 <_strtod_l+0x82>
 8012b82:	4886      	ldr	r0, [pc, #536]	; (8012d9c <_strtod_l+0x58c>)
 8012b84:	f003 f812 	bl	8015bac <nan>
 8012b88:	4680      	mov	r8, r0
 8012b8a:	4689      	mov	r9, r1
 8012b8c:	e681      	b.n	8012892 <_strtod_l+0x82>
 8012b8e:	9b04      	ldr	r3, [sp, #16]
 8012b90:	f1bb 0f00 	cmp.w	fp, #0
 8012b94:	bf08      	it	eq
 8012b96:	46a3      	moveq	fp, r4
 8012b98:	1aeb      	subs	r3, r5, r3
 8012b9a:	2c10      	cmp	r4, #16
 8012b9c:	9806      	ldr	r0, [sp, #24]
 8012b9e:	4626      	mov	r6, r4
 8012ba0:	9307      	str	r3, [sp, #28]
 8012ba2:	bfa8      	it	ge
 8012ba4:	2610      	movge	r6, #16
 8012ba6:	f7ed fc63 	bl	8000470 <__aeabi_ui2d>
 8012baa:	2c09      	cmp	r4, #9
 8012bac:	4680      	mov	r8, r0
 8012bae:	4689      	mov	r9, r1
 8012bb0:	dd13      	ble.n	8012bda <_strtod_l+0x3ca>
 8012bb2:	4b7b      	ldr	r3, [pc, #492]	; (8012da0 <_strtod_l+0x590>)
 8012bb4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012bb8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012bbc:	f7ed fcd2 	bl	8000564 <__aeabi_dmul>
 8012bc0:	4680      	mov	r8, r0
 8012bc2:	9805      	ldr	r0, [sp, #20]
 8012bc4:	4689      	mov	r9, r1
 8012bc6:	f7ed fc53 	bl	8000470 <__aeabi_ui2d>
 8012bca:	4602      	mov	r2, r0
 8012bcc:	460b      	mov	r3, r1
 8012bce:	4640      	mov	r0, r8
 8012bd0:	4649      	mov	r1, r9
 8012bd2:	f7ed fb11 	bl	80001f8 <__adddf3>
 8012bd6:	4680      	mov	r8, r0
 8012bd8:	4689      	mov	r9, r1
 8012bda:	2c0f      	cmp	r4, #15
 8012bdc:	dc36      	bgt.n	8012c4c <_strtod_l+0x43c>
 8012bde:	9b07      	ldr	r3, [sp, #28]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	f43f ae56 	beq.w	8012892 <_strtod_l+0x82>
 8012be6:	dd22      	ble.n	8012c2e <_strtod_l+0x41e>
 8012be8:	2b16      	cmp	r3, #22
 8012bea:	dc09      	bgt.n	8012c00 <_strtod_l+0x3f0>
 8012bec:	496c      	ldr	r1, [pc, #432]	; (8012da0 <_strtod_l+0x590>)
 8012bee:	4642      	mov	r2, r8
 8012bf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012bf4:	464b      	mov	r3, r9
 8012bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012bfa:	f7ed fcb3 	bl	8000564 <__aeabi_dmul>
 8012bfe:	e7c3      	b.n	8012b88 <_strtod_l+0x378>
 8012c00:	9a07      	ldr	r2, [sp, #28]
 8012c02:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8012c06:	4293      	cmp	r3, r2
 8012c08:	db20      	blt.n	8012c4c <_strtod_l+0x43c>
 8012c0a:	4d65      	ldr	r5, [pc, #404]	; (8012da0 <_strtod_l+0x590>)
 8012c0c:	f1c4 040f 	rsb	r4, r4, #15
 8012c10:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8012c14:	4642      	mov	r2, r8
 8012c16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c1a:	464b      	mov	r3, r9
 8012c1c:	f7ed fca2 	bl	8000564 <__aeabi_dmul>
 8012c20:	9b07      	ldr	r3, [sp, #28]
 8012c22:	1b1c      	subs	r4, r3, r4
 8012c24:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8012c28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012c2c:	e7e5      	b.n	8012bfa <_strtod_l+0x3ea>
 8012c2e:	9b07      	ldr	r3, [sp, #28]
 8012c30:	3316      	adds	r3, #22
 8012c32:	db0b      	blt.n	8012c4c <_strtod_l+0x43c>
 8012c34:	9b04      	ldr	r3, [sp, #16]
 8012c36:	4640      	mov	r0, r8
 8012c38:	1b5d      	subs	r5, r3, r5
 8012c3a:	4b59      	ldr	r3, [pc, #356]	; (8012da0 <_strtod_l+0x590>)
 8012c3c:	4649      	mov	r1, r9
 8012c3e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012c42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012c46:	f7ed fdb7 	bl	80007b8 <__aeabi_ddiv>
 8012c4a:	e79d      	b.n	8012b88 <_strtod_l+0x378>
 8012c4c:	9b07      	ldr	r3, [sp, #28]
 8012c4e:	1ba6      	subs	r6, r4, r6
 8012c50:	441e      	add	r6, r3
 8012c52:	2e00      	cmp	r6, #0
 8012c54:	dd74      	ble.n	8012d40 <_strtod_l+0x530>
 8012c56:	f016 030f 	ands.w	r3, r6, #15
 8012c5a:	d00a      	beq.n	8012c72 <_strtod_l+0x462>
 8012c5c:	4950      	ldr	r1, [pc, #320]	; (8012da0 <_strtod_l+0x590>)
 8012c5e:	4642      	mov	r2, r8
 8012c60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c68:	464b      	mov	r3, r9
 8012c6a:	f7ed fc7b 	bl	8000564 <__aeabi_dmul>
 8012c6e:	4680      	mov	r8, r0
 8012c70:	4689      	mov	r9, r1
 8012c72:	f036 060f 	bics.w	r6, r6, #15
 8012c76:	d052      	beq.n	8012d1e <_strtod_l+0x50e>
 8012c78:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8012c7c:	dd27      	ble.n	8012cce <_strtod_l+0x4be>
 8012c7e:	f04f 0b00 	mov.w	fp, #0
 8012c82:	f8cd b010 	str.w	fp, [sp, #16]
 8012c86:	f8cd b020 	str.w	fp, [sp, #32]
 8012c8a:	f8cd b018 	str.w	fp, [sp, #24]
 8012c8e:	2322      	movs	r3, #34	; 0x22
 8012c90:	f04f 0800 	mov.w	r8, #0
 8012c94:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8012d98 <_strtod_l+0x588>
 8012c98:	f8ca 3000 	str.w	r3, [sl]
 8012c9c:	9b08      	ldr	r3, [sp, #32]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	f43f adf7 	beq.w	8012892 <_strtod_l+0x82>
 8012ca4:	4650      	mov	r0, sl
 8012ca6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012ca8:	f001 ff64 	bl	8014b74 <_Bfree>
 8012cac:	4650      	mov	r0, sl
 8012cae:	9906      	ldr	r1, [sp, #24]
 8012cb0:	f001 ff60 	bl	8014b74 <_Bfree>
 8012cb4:	4650      	mov	r0, sl
 8012cb6:	9904      	ldr	r1, [sp, #16]
 8012cb8:	f001 ff5c 	bl	8014b74 <_Bfree>
 8012cbc:	4650      	mov	r0, sl
 8012cbe:	9908      	ldr	r1, [sp, #32]
 8012cc0:	f001 ff58 	bl	8014b74 <_Bfree>
 8012cc4:	4659      	mov	r1, fp
 8012cc6:	4650      	mov	r0, sl
 8012cc8:	f001 ff54 	bl	8014b74 <_Bfree>
 8012ccc:	e5e1      	b.n	8012892 <_strtod_l+0x82>
 8012cce:	4b35      	ldr	r3, [pc, #212]	; (8012da4 <_strtod_l+0x594>)
 8012cd0:	4640      	mov	r0, r8
 8012cd2:	9305      	str	r3, [sp, #20]
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	4649      	mov	r1, r9
 8012cd8:	461f      	mov	r7, r3
 8012cda:	1136      	asrs	r6, r6, #4
 8012cdc:	2e01      	cmp	r6, #1
 8012cde:	dc21      	bgt.n	8012d24 <_strtod_l+0x514>
 8012ce0:	b10b      	cbz	r3, 8012ce6 <_strtod_l+0x4d6>
 8012ce2:	4680      	mov	r8, r0
 8012ce4:	4689      	mov	r9, r1
 8012ce6:	4b2f      	ldr	r3, [pc, #188]	; (8012da4 <_strtod_l+0x594>)
 8012ce8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8012cec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012cf0:	4642      	mov	r2, r8
 8012cf2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012cf6:	464b      	mov	r3, r9
 8012cf8:	f7ed fc34 	bl	8000564 <__aeabi_dmul>
 8012cfc:	4b26      	ldr	r3, [pc, #152]	; (8012d98 <_strtod_l+0x588>)
 8012cfe:	460a      	mov	r2, r1
 8012d00:	400b      	ands	r3, r1
 8012d02:	4929      	ldr	r1, [pc, #164]	; (8012da8 <_strtod_l+0x598>)
 8012d04:	4680      	mov	r8, r0
 8012d06:	428b      	cmp	r3, r1
 8012d08:	d8b9      	bhi.n	8012c7e <_strtod_l+0x46e>
 8012d0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012d0e:	428b      	cmp	r3, r1
 8012d10:	bf86      	itte	hi
 8012d12:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8012d16:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8012dac <_strtod_l+0x59c>
 8012d1a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8012d1e:	2300      	movs	r3, #0
 8012d20:	9305      	str	r3, [sp, #20]
 8012d22:	e07f      	b.n	8012e24 <_strtod_l+0x614>
 8012d24:	07f2      	lsls	r2, r6, #31
 8012d26:	d505      	bpl.n	8012d34 <_strtod_l+0x524>
 8012d28:	9b05      	ldr	r3, [sp, #20]
 8012d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d2e:	f7ed fc19 	bl	8000564 <__aeabi_dmul>
 8012d32:	2301      	movs	r3, #1
 8012d34:	9a05      	ldr	r2, [sp, #20]
 8012d36:	3701      	adds	r7, #1
 8012d38:	3208      	adds	r2, #8
 8012d3a:	1076      	asrs	r6, r6, #1
 8012d3c:	9205      	str	r2, [sp, #20]
 8012d3e:	e7cd      	b.n	8012cdc <_strtod_l+0x4cc>
 8012d40:	d0ed      	beq.n	8012d1e <_strtod_l+0x50e>
 8012d42:	4276      	negs	r6, r6
 8012d44:	f016 020f 	ands.w	r2, r6, #15
 8012d48:	d00a      	beq.n	8012d60 <_strtod_l+0x550>
 8012d4a:	4b15      	ldr	r3, [pc, #84]	; (8012da0 <_strtod_l+0x590>)
 8012d4c:	4640      	mov	r0, r8
 8012d4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d52:	4649      	mov	r1, r9
 8012d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d58:	f7ed fd2e 	bl	80007b8 <__aeabi_ddiv>
 8012d5c:	4680      	mov	r8, r0
 8012d5e:	4689      	mov	r9, r1
 8012d60:	1136      	asrs	r6, r6, #4
 8012d62:	d0dc      	beq.n	8012d1e <_strtod_l+0x50e>
 8012d64:	2e1f      	cmp	r6, #31
 8012d66:	dd23      	ble.n	8012db0 <_strtod_l+0x5a0>
 8012d68:	f04f 0b00 	mov.w	fp, #0
 8012d6c:	f8cd b010 	str.w	fp, [sp, #16]
 8012d70:	f8cd b020 	str.w	fp, [sp, #32]
 8012d74:	f8cd b018 	str.w	fp, [sp, #24]
 8012d78:	2322      	movs	r3, #34	; 0x22
 8012d7a:	f04f 0800 	mov.w	r8, #0
 8012d7e:	f04f 0900 	mov.w	r9, #0
 8012d82:	f8ca 3000 	str.w	r3, [sl]
 8012d86:	e789      	b.n	8012c9c <_strtod_l+0x48c>
 8012d88:	080183d9 	.word	0x080183d9
 8012d8c:	0801841c 	.word	0x0801841c
 8012d90:	080183d1 	.word	0x080183d1
 8012d94:	0801855c 	.word	0x0801855c
 8012d98:	7ff00000 	.word	0x7ff00000
 8012d9c:	08018870 	.word	0x08018870
 8012da0:	08018750 	.word	0x08018750
 8012da4:	08018728 	.word	0x08018728
 8012da8:	7ca00000 	.word	0x7ca00000
 8012dac:	7fefffff 	.word	0x7fefffff
 8012db0:	f016 0310 	ands.w	r3, r6, #16
 8012db4:	bf18      	it	ne
 8012db6:	236a      	movne	r3, #106	; 0x6a
 8012db8:	4640      	mov	r0, r8
 8012dba:	9305      	str	r3, [sp, #20]
 8012dbc:	4649      	mov	r1, r9
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	4fb0      	ldr	r7, [pc, #704]	; (8013084 <_strtod_l+0x874>)
 8012dc2:	07f2      	lsls	r2, r6, #31
 8012dc4:	d504      	bpl.n	8012dd0 <_strtod_l+0x5c0>
 8012dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012dca:	f7ed fbcb 	bl	8000564 <__aeabi_dmul>
 8012dce:	2301      	movs	r3, #1
 8012dd0:	1076      	asrs	r6, r6, #1
 8012dd2:	f107 0708 	add.w	r7, r7, #8
 8012dd6:	d1f4      	bne.n	8012dc2 <_strtod_l+0x5b2>
 8012dd8:	b10b      	cbz	r3, 8012dde <_strtod_l+0x5ce>
 8012dda:	4680      	mov	r8, r0
 8012ddc:	4689      	mov	r9, r1
 8012dde:	9b05      	ldr	r3, [sp, #20]
 8012de0:	b1c3      	cbz	r3, 8012e14 <_strtod_l+0x604>
 8012de2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8012de6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	4649      	mov	r1, r9
 8012dee:	dd11      	ble.n	8012e14 <_strtod_l+0x604>
 8012df0:	2b1f      	cmp	r3, #31
 8012df2:	f340 8127 	ble.w	8013044 <_strtod_l+0x834>
 8012df6:	2b34      	cmp	r3, #52	; 0x34
 8012df8:	bfd8      	it	le
 8012dfa:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8012dfe:	f04f 0800 	mov.w	r8, #0
 8012e02:	bfcf      	iteee	gt
 8012e04:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012e08:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8012e0c:	fa03 f202 	lslle.w	r2, r3, r2
 8012e10:	ea02 0901 	andle.w	r9, r2, r1
 8012e14:	2200      	movs	r2, #0
 8012e16:	2300      	movs	r3, #0
 8012e18:	4640      	mov	r0, r8
 8012e1a:	4649      	mov	r1, r9
 8012e1c:	f7ed fe0a 	bl	8000a34 <__aeabi_dcmpeq>
 8012e20:	2800      	cmp	r0, #0
 8012e22:	d1a1      	bne.n	8012d68 <_strtod_l+0x558>
 8012e24:	9b06      	ldr	r3, [sp, #24]
 8012e26:	465a      	mov	r2, fp
 8012e28:	9300      	str	r3, [sp, #0]
 8012e2a:	4650      	mov	r0, sl
 8012e2c:	4623      	mov	r3, r4
 8012e2e:	9908      	ldr	r1, [sp, #32]
 8012e30:	f001 ff08 	bl	8014c44 <__s2b>
 8012e34:	9008      	str	r0, [sp, #32]
 8012e36:	2800      	cmp	r0, #0
 8012e38:	f43f af21 	beq.w	8012c7e <_strtod_l+0x46e>
 8012e3c:	9b04      	ldr	r3, [sp, #16]
 8012e3e:	f04f 0b00 	mov.w	fp, #0
 8012e42:	1b5d      	subs	r5, r3, r5
 8012e44:	9b07      	ldr	r3, [sp, #28]
 8012e46:	f8cd b010 	str.w	fp, [sp, #16]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	bfb4      	ite	lt
 8012e4e:	462b      	movlt	r3, r5
 8012e50:	2300      	movge	r3, #0
 8012e52:	930e      	str	r3, [sp, #56]	; 0x38
 8012e54:	9b07      	ldr	r3, [sp, #28]
 8012e56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012e5a:	9314      	str	r3, [sp, #80]	; 0x50
 8012e5c:	9b08      	ldr	r3, [sp, #32]
 8012e5e:	4650      	mov	r0, sl
 8012e60:	6859      	ldr	r1, [r3, #4]
 8012e62:	f001 fe47 	bl	8014af4 <_Balloc>
 8012e66:	9006      	str	r0, [sp, #24]
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	f43f af10 	beq.w	8012c8e <_strtod_l+0x47e>
 8012e6e:	9b08      	ldr	r3, [sp, #32]
 8012e70:	300c      	adds	r0, #12
 8012e72:	691a      	ldr	r2, [r3, #16]
 8012e74:	f103 010c 	add.w	r1, r3, #12
 8012e78:	3202      	adds	r2, #2
 8012e7a:	0092      	lsls	r2, r2, #2
 8012e7c:	f7fe fdd0 	bl	8011a20 <memcpy>
 8012e80:	ab1c      	add	r3, sp, #112	; 0x70
 8012e82:	9301      	str	r3, [sp, #4]
 8012e84:	ab1b      	add	r3, sp, #108	; 0x6c
 8012e86:	9300      	str	r3, [sp, #0]
 8012e88:	4642      	mov	r2, r8
 8012e8a:	464b      	mov	r3, r9
 8012e8c:	4650      	mov	r0, sl
 8012e8e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8012e92:	f002 fa19 	bl	80152c8 <__d2b>
 8012e96:	901a      	str	r0, [sp, #104]	; 0x68
 8012e98:	2800      	cmp	r0, #0
 8012e9a:	f43f aef8 	beq.w	8012c8e <_strtod_l+0x47e>
 8012e9e:	2101      	movs	r1, #1
 8012ea0:	4650      	mov	r0, sl
 8012ea2:	f001 ff67 	bl	8014d74 <__i2b>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	9004      	str	r0, [sp, #16]
 8012eaa:	2800      	cmp	r0, #0
 8012eac:	f43f aeef 	beq.w	8012c8e <_strtod_l+0x47e>
 8012eb0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8012eb2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012eb4:	2d00      	cmp	r5, #0
 8012eb6:	bfab      	itete	ge
 8012eb8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8012eba:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8012ebc:	18ee      	addge	r6, r5, r3
 8012ebe:	1b5c      	sublt	r4, r3, r5
 8012ec0:	9b05      	ldr	r3, [sp, #20]
 8012ec2:	bfa8      	it	ge
 8012ec4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8012ec6:	eba5 0503 	sub.w	r5, r5, r3
 8012eca:	4415      	add	r5, r2
 8012ecc:	4b6e      	ldr	r3, [pc, #440]	; (8013088 <_strtod_l+0x878>)
 8012ece:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8012ed2:	bfb8      	it	lt
 8012ed4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8012ed6:	429d      	cmp	r5, r3
 8012ed8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012edc:	f280 80c4 	bge.w	8013068 <_strtod_l+0x858>
 8012ee0:	1b5b      	subs	r3, r3, r5
 8012ee2:	2b1f      	cmp	r3, #31
 8012ee4:	f04f 0701 	mov.w	r7, #1
 8012ee8:	eba2 0203 	sub.w	r2, r2, r3
 8012eec:	f300 80b1 	bgt.w	8013052 <_strtod_l+0x842>
 8012ef0:	2500      	movs	r5, #0
 8012ef2:	fa07 f303 	lsl.w	r3, r7, r3
 8012ef6:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ef8:	18b7      	adds	r7, r6, r2
 8012efa:	9b05      	ldr	r3, [sp, #20]
 8012efc:	42be      	cmp	r6, r7
 8012efe:	4414      	add	r4, r2
 8012f00:	441c      	add	r4, r3
 8012f02:	4633      	mov	r3, r6
 8012f04:	bfa8      	it	ge
 8012f06:	463b      	movge	r3, r7
 8012f08:	42a3      	cmp	r3, r4
 8012f0a:	bfa8      	it	ge
 8012f0c:	4623      	movge	r3, r4
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	bfc2      	ittt	gt
 8012f12:	1aff      	subgt	r7, r7, r3
 8012f14:	1ae4      	subgt	r4, r4, r3
 8012f16:	1af6      	subgt	r6, r6, r3
 8012f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	dd17      	ble.n	8012f4e <_strtod_l+0x73e>
 8012f1e:	461a      	mov	r2, r3
 8012f20:	4650      	mov	r0, sl
 8012f22:	9904      	ldr	r1, [sp, #16]
 8012f24:	f001 ffe4 	bl	8014ef0 <__pow5mult>
 8012f28:	9004      	str	r0, [sp, #16]
 8012f2a:	2800      	cmp	r0, #0
 8012f2c:	f43f aeaf 	beq.w	8012c8e <_strtod_l+0x47e>
 8012f30:	4601      	mov	r1, r0
 8012f32:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012f34:	4650      	mov	r0, sl
 8012f36:	f001 ff33 	bl	8014da0 <__multiply>
 8012f3a:	9009      	str	r0, [sp, #36]	; 0x24
 8012f3c:	2800      	cmp	r0, #0
 8012f3e:	f43f aea6 	beq.w	8012c8e <_strtod_l+0x47e>
 8012f42:	4650      	mov	r0, sl
 8012f44:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012f46:	f001 fe15 	bl	8014b74 <_Bfree>
 8012f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f4c:	931a      	str	r3, [sp, #104]	; 0x68
 8012f4e:	2f00      	cmp	r7, #0
 8012f50:	f300 808e 	bgt.w	8013070 <_strtod_l+0x860>
 8012f54:	9b07      	ldr	r3, [sp, #28]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	dd08      	ble.n	8012f6c <_strtod_l+0x75c>
 8012f5a:	4650      	mov	r0, sl
 8012f5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012f5e:	9906      	ldr	r1, [sp, #24]
 8012f60:	f001 ffc6 	bl	8014ef0 <__pow5mult>
 8012f64:	9006      	str	r0, [sp, #24]
 8012f66:	2800      	cmp	r0, #0
 8012f68:	f43f ae91 	beq.w	8012c8e <_strtod_l+0x47e>
 8012f6c:	2c00      	cmp	r4, #0
 8012f6e:	dd08      	ble.n	8012f82 <_strtod_l+0x772>
 8012f70:	4622      	mov	r2, r4
 8012f72:	4650      	mov	r0, sl
 8012f74:	9906      	ldr	r1, [sp, #24]
 8012f76:	f002 f815 	bl	8014fa4 <__lshift>
 8012f7a:	9006      	str	r0, [sp, #24]
 8012f7c:	2800      	cmp	r0, #0
 8012f7e:	f43f ae86 	beq.w	8012c8e <_strtod_l+0x47e>
 8012f82:	2e00      	cmp	r6, #0
 8012f84:	dd08      	ble.n	8012f98 <_strtod_l+0x788>
 8012f86:	4632      	mov	r2, r6
 8012f88:	4650      	mov	r0, sl
 8012f8a:	9904      	ldr	r1, [sp, #16]
 8012f8c:	f002 f80a 	bl	8014fa4 <__lshift>
 8012f90:	9004      	str	r0, [sp, #16]
 8012f92:	2800      	cmp	r0, #0
 8012f94:	f43f ae7b 	beq.w	8012c8e <_strtod_l+0x47e>
 8012f98:	4650      	mov	r0, sl
 8012f9a:	9a06      	ldr	r2, [sp, #24]
 8012f9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012f9e:	f002 f88d 	bl	80150bc <__mdiff>
 8012fa2:	4683      	mov	fp, r0
 8012fa4:	2800      	cmp	r0, #0
 8012fa6:	f43f ae72 	beq.w	8012c8e <_strtod_l+0x47e>
 8012faa:	2400      	movs	r4, #0
 8012fac:	68c3      	ldr	r3, [r0, #12]
 8012fae:	9904      	ldr	r1, [sp, #16]
 8012fb0:	60c4      	str	r4, [r0, #12]
 8012fb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8012fb4:	f002 f866 	bl	8015084 <__mcmp>
 8012fb8:	42a0      	cmp	r0, r4
 8012fba:	da6b      	bge.n	8013094 <_strtod_l+0x884>
 8012fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012fbe:	ea53 0308 	orrs.w	r3, r3, r8
 8012fc2:	f040 8091 	bne.w	80130e8 <_strtod_l+0x8d8>
 8012fc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	f040 808c 	bne.w	80130e8 <_strtod_l+0x8d8>
 8012fd0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012fd4:	0d1b      	lsrs	r3, r3, #20
 8012fd6:	051b      	lsls	r3, r3, #20
 8012fd8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012fdc:	f240 8084 	bls.w	80130e8 <_strtod_l+0x8d8>
 8012fe0:	f8db 3014 	ldr.w	r3, [fp, #20]
 8012fe4:	b91b      	cbnz	r3, 8012fee <_strtod_l+0x7de>
 8012fe6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8012fea:	2b01      	cmp	r3, #1
 8012fec:	dd7c      	ble.n	80130e8 <_strtod_l+0x8d8>
 8012fee:	4659      	mov	r1, fp
 8012ff0:	2201      	movs	r2, #1
 8012ff2:	4650      	mov	r0, sl
 8012ff4:	f001 ffd6 	bl	8014fa4 <__lshift>
 8012ff8:	9904      	ldr	r1, [sp, #16]
 8012ffa:	4683      	mov	fp, r0
 8012ffc:	f002 f842 	bl	8015084 <__mcmp>
 8013000:	2800      	cmp	r0, #0
 8013002:	dd71      	ble.n	80130e8 <_strtod_l+0x8d8>
 8013004:	9905      	ldr	r1, [sp, #20]
 8013006:	464b      	mov	r3, r9
 8013008:	4a20      	ldr	r2, [pc, #128]	; (801308c <_strtod_l+0x87c>)
 801300a:	2900      	cmp	r1, #0
 801300c:	f000 808c 	beq.w	8013128 <_strtod_l+0x918>
 8013010:	ea02 0109 	and.w	r1, r2, r9
 8013014:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013018:	f300 8086 	bgt.w	8013128 <_strtod_l+0x918>
 801301c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013020:	f77f aeaa 	ble.w	8012d78 <_strtod_l+0x568>
 8013024:	4640      	mov	r0, r8
 8013026:	4649      	mov	r1, r9
 8013028:	4b19      	ldr	r3, [pc, #100]	; (8013090 <_strtod_l+0x880>)
 801302a:	2200      	movs	r2, #0
 801302c:	f7ed fa9a 	bl	8000564 <__aeabi_dmul>
 8013030:	460b      	mov	r3, r1
 8013032:	4303      	orrs	r3, r0
 8013034:	bf08      	it	eq
 8013036:	2322      	moveq	r3, #34	; 0x22
 8013038:	4680      	mov	r8, r0
 801303a:	4689      	mov	r9, r1
 801303c:	bf08      	it	eq
 801303e:	f8ca 3000 	streq.w	r3, [sl]
 8013042:	e62f      	b.n	8012ca4 <_strtod_l+0x494>
 8013044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013048:	fa02 f303 	lsl.w	r3, r2, r3
 801304c:	ea03 0808 	and.w	r8, r3, r8
 8013050:	e6e0      	b.n	8012e14 <_strtod_l+0x604>
 8013052:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8013056:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 801305a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 801305e:	35e2      	adds	r5, #226	; 0xe2
 8013060:	fa07 f505 	lsl.w	r5, r7, r5
 8013064:	970f      	str	r7, [sp, #60]	; 0x3c
 8013066:	e747      	b.n	8012ef8 <_strtod_l+0x6e8>
 8013068:	2301      	movs	r3, #1
 801306a:	2500      	movs	r5, #0
 801306c:	930f      	str	r3, [sp, #60]	; 0x3c
 801306e:	e743      	b.n	8012ef8 <_strtod_l+0x6e8>
 8013070:	463a      	mov	r2, r7
 8013072:	4650      	mov	r0, sl
 8013074:	991a      	ldr	r1, [sp, #104]	; 0x68
 8013076:	f001 ff95 	bl	8014fa4 <__lshift>
 801307a:	901a      	str	r0, [sp, #104]	; 0x68
 801307c:	2800      	cmp	r0, #0
 801307e:	f47f af69 	bne.w	8012f54 <_strtod_l+0x744>
 8013082:	e604      	b.n	8012c8e <_strtod_l+0x47e>
 8013084:	08018430 	.word	0x08018430
 8013088:	fffffc02 	.word	0xfffffc02
 801308c:	7ff00000 	.word	0x7ff00000
 8013090:	39500000 	.word	0x39500000
 8013094:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013098:	d165      	bne.n	8013166 <_strtod_l+0x956>
 801309a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801309c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80130a0:	b35a      	cbz	r2, 80130fa <_strtod_l+0x8ea>
 80130a2:	4a99      	ldr	r2, [pc, #612]	; (8013308 <_strtod_l+0xaf8>)
 80130a4:	4293      	cmp	r3, r2
 80130a6:	d12b      	bne.n	8013100 <_strtod_l+0x8f0>
 80130a8:	9b05      	ldr	r3, [sp, #20]
 80130aa:	4641      	mov	r1, r8
 80130ac:	b303      	cbz	r3, 80130f0 <_strtod_l+0x8e0>
 80130ae:	464a      	mov	r2, r9
 80130b0:	4b96      	ldr	r3, [pc, #600]	; (801330c <_strtod_l+0xafc>)
 80130b2:	4013      	ands	r3, r2
 80130b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80130b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80130bc:	d81b      	bhi.n	80130f6 <_strtod_l+0x8e6>
 80130be:	0d1b      	lsrs	r3, r3, #20
 80130c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80130c4:	fa02 f303 	lsl.w	r3, r2, r3
 80130c8:	4299      	cmp	r1, r3
 80130ca:	d119      	bne.n	8013100 <_strtod_l+0x8f0>
 80130cc:	4b90      	ldr	r3, [pc, #576]	; (8013310 <_strtod_l+0xb00>)
 80130ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130d0:	429a      	cmp	r2, r3
 80130d2:	d102      	bne.n	80130da <_strtod_l+0x8ca>
 80130d4:	3101      	adds	r1, #1
 80130d6:	f43f adda 	beq.w	8012c8e <_strtod_l+0x47e>
 80130da:	f04f 0800 	mov.w	r8, #0
 80130de:	4b8b      	ldr	r3, [pc, #556]	; (801330c <_strtod_l+0xafc>)
 80130e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130e2:	401a      	ands	r2, r3
 80130e4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80130e8:	9b05      	ldr	r3, [sp, #20]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d19a      	bne.n	8013024 <_strtod_l+0x814>
 80130ee:	e5d9      	b.n	8012ca4 <_strtod_l+0x494>
 80130f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130f4:	e7e8      	b.n	80130c8 <_strtod_l+0x8b8>
 80130f6:	4613      	mov	r3, r2
 80130f8:	e7e6      	b.n	80130c8 <_strtod_l+0x8b8>
 80130fa:	ea53 0308 	orrs.w	r3, r3, r8
 80130fe:	d081      	beq.n	8013004 <_strtod_l+0x7f4>
 8013100:	b1e5      	cbz	r5, 801313c <_strtod_l+0x92c>
 8013102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013104:	421d      	tst	r5, r3
 8013106:	d0ef      	beq.n	80130e8 <_strtod_l+0x8d8>
 8013108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801310a:	4640      	mov	r0, r8
 801310c:	4649      	mov	r1, r9
 801310e:	9a05      	ldr	r2, [sp, #20]
 8013110:	b1c3      	cbz	r3, 8013144 <_strtod_l+0x934>
 8013112:	f7ff fb59 	bl	80127c8 <sulp>
 8013116:	4602      	mov	r2, r0
 8013118:	460b      	mov	r3, r1
 801311a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801311e:	f7ed f86b 	bl	80001f8 <__adddf3>
 8013122:	4680      	mov	r8, r0
 8013124:	4689      	mov	r9, r1
 8013126:	e7df      	b.n	80130e8 <_strtod_l+0x8d8>
 8013128:	4013      	ands	r3, r2
 801312a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801312e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013132:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8013136:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801313a:	e7d5      	b.n	80130e8 <_strtod_l+0x8d8>
 801313c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801313e:	ea13 0f08 	tst.w	r3, r8
 8013142:	e7e0      	b.n	8013106 <_strtod_l+0x8f6>
 8013144:	f7ff fb40 	bl	80127c8 <sulp>
 8013148:	4602      	mov	r2, r0
 801314a:	460b      	mov	r3, r1
 801314c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013150:	f7ed f850 	bl	80001f4 <__aeabi_dsub>
 8013154:	2200      	movs	r2, #0
 8013156:	2300      	movs	r3, #0
 8013158:	4680      	mov	r8, r0
 801315a:	4689      	mov	r9, r1
 801315c:	f7ed fc6a 	bl	8000a34 <__aeabi_dcmpeq>
 8013160:	2800      	cmp	r0, #0
 8013162:	d0c1      	beq.n	80130e8 <_strtod_l+0x8d8>
 8013164:	e608      	b.n	8012d78 <_strtod_l+0x568>
 8013166:	4658      	mov	r0, fp
 8013168:	9904      	ldr	r1, [sp, #16]
 801316a:	f002 f909 	bl	8015380 <__ratio>
 801316e:	2200      	movs	r2, #0
 8013170:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013174:	4606      	mov	r6, r0
 8013176:	460f      	mov	r7, r1
 8013178:	f7ed fc70 	bl	8000a5c <__aeabi_dcmple>
 801317c:	2800      	cmp	r0, #0
 801317e:	d070      	beq.n	8013262 <_strtod_l+0xa52>
 8013180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013182:	2b00      	cmp	r3, #0
 8013184:	d042      	beq.n	801320c <_strtod_l+0x9fc>
 8013186:	2600      	movs	r6, #0
 8013188:	4f62      	ldr	r7, [pc, #392]	; (8013314 <_strtod_l+0xb04>)
 801318a:	4d62      	ldr	r5, [pc, #392]	; (8013314 <_strtod_l+0xb04>)
 801318c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801318e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013192:	0d1b      	lsrs	r3, r3, #20
 8013194:	051b      	lsls	r3, r3, #20
 8013196:	930f      	str	r3, [sp, #60]	; 0x3c
 8013198:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801319a:	4b5f      	ldr	r3, [pc, #380]	; (8013318 <_strtod_l+0xb08>)
 801319c:	429a      	cmp	r2, r3
 801319e:	f040 80c3 	bne.w	8013328 <_strtod_l+0xb18>
 80131a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131a4:	4640      	mov	r0, r8
 80131a6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80131aa:	4649      	mov	r1, r9
 80131ac:	f002 f812 	bl	80151d4 <__ulp>
 80131b0:	4602      	mov	r2, r0
 80131b2:	460b      	mov	r3, r1
 80131b4:	4630      	mov	r0, r6
 80131b6:	4639      	mov	r1, r7
 80131b8:	f7ed f9d4 	bl	8000564 <__aeabi_dmul>
 80131bc:	4642      	mov	r2, r8
 80131be:	464b      	mov	r3, r9
 80131c0:	f7ed f81a 	bl	80001f8 <__adddf3>
 80131c4:	460b      	mov	r3, r1
 80131c6:	4951      	ldr	r1, [pc, #324]	; (801330c <_strtod_l+0xafc>)
 80131c8:	4a54      	ldr	r2, [pc, #336]	; (801331c <_strtod_l+0xb0c>)
 80131ca:	4019      	ands	r1, r3
 80131cc:	4291      	cmp	r1, r2
 80131ce:	4680      	mov	r8, r0
 80131d0:	d95d      	bls.n	801328e <_strtod_l+0xa7e>
 80131d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80131d4:	4b4e      	ldr	r3, [pc, #312]	; (8013310 <_strtod_l+0xb00>)
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d103      	bne.n	80131e2 <_strtod_l+0x9d2>
 80131da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80131dc:	3301      	adds	r3, #1
 80131de:	f43f ad56 	beq.w	8012c8e <_strtod_l+0x47e>
 80131e2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80131e6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8013310 <_strtod_l+0xb00>
 80131ea:	4650      	mov	r0, sl
 80131ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 80131ee:	f001 fcc1 	bl	8014b74 <_Bfree>
 80131f2:	4650      	mov	r0, sl
 80131f4:	9906      	ldr	r1, [sp, #24]
 80131f6:	f001 fcbd 	bl	8014b74 <_Bfree>
 80131fa:	4650      	mov	r0, sl
 80131fc:	9904      	ldr	r1, [sp, #16]
 80131fe:	f001 fcb9 	bl	8014b74 <_Bfree>
 8013202:	4659      	mov	r1, fp
 8013204:	4650      	mov	r0, sl
 8013206:	f001 fcb5 	bl	8014b74 <_Bfree>
 801320a:	e627      	b.n	8012e5c <_strtod_l+0x64c>
 801320c:	f1b8 0f00 	cmp.w	r8, #0
 8013210:	d119      	bne.n	8013246 <_strtod_l+0xa36>
 8013212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013218:	b9e3      	cbnz	r3, 8013254 <_strtod_l+0xa44>
 801321a:	2200      	movs	r2, #0
 801321c:	4630      	mov	r0, r6
 801321e:	4639      	mov	r1, r7
 8013220:	4b3c      	ldr	r3, [pc, #240]	; (8013314 <_strtod_l+0xb04>)
 8013222:	f7ed fc11 	bl	8000a48 <__aeabi_dcmplt>
 8013226:	b9c8      	cbnz	r0, 801325c <_strtod_l+0xa4c>
 8013228:	2200      	movs	r2, #0
 801322a:	4630      	mov	r0, r6
 801322c:	4639      	mov	r1, r7
 801322e:	4b3c      	ldr	r3, [pc, #240]	; (8013320 <_strtod_l+0xb10>)
 8013230:	f7ed f998 	bl	8000564 <__aeabi_dmul>
 8013234:	4604      	mov	r4, r0
 8013236:	460d      	mov	r5, r1
 8013238:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801323c:	9416      	str	r4, [sp, #88]	; 0x58
 801323e:	9317      	str	r3, [sp, #92]	; 0x5c
 8013240:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8013244:	e7a2      	b.n	801318c <_strtod_l+0x97c>
 8013246:	f1b8 0f01 	cmp.w	r8, #1
 801324a:	d103      	bne.n	8013254 <_strtod_l+0xa44>
 801324c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801324e:	2b00      	cmp	r3, #0
 8013250:	f43f ad92 	beq.w	8012d78 <_strtod_l+0x568>
 8013254:	2600      	movs	r6, #0
 8013256:	2400      	movs	r4, #0
 8013258:	4f32      	ldr	r7, [pc, #200]	; (8013324 <_strtod_l+0xb14>)
 801325a:	e796      	b.n	801318a <_strtod_l+0x97a>
 801325c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801325e:	4d30      	ldr	r5, [pc, #192]	; (8013320 <_strtod_l+0xb10>)
 8013260:	e7ea      	b.n	8013238 <_strtod_l+0xa28>
 8013262:	4b2f      	ldr	r3, [pc, #188]	; (8013320 <_strtod_l+0xb10>)
 8013264:	2200      	movs	r2, #0
 8013266:	4630      	mov	r0, r6
 8013268:	4639      	mov	r1, r7
 801326a:	f7ed f97b 	bl	8000564 <__aeabi_dmul>
 801326e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013270:	4604      	mov	r4, r0
 8013272:	460d      	mov	r5, r1
 8013274:	b933      	cbnz	r3, 8013284 <_strtod_l+0xa74>
 8013276:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801327a:	9010      	str	r0, [sp, #64]	; 0x40
 801327c:	9311      	str	r3, [sp, #68]	; 0x44
 801327e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8013282:	e783      	b.n	801318c <_strtod_l+0x97c>
 8013284:	4602      	mov	r2, r0
 8013286:	460b      	mov	r3, r1
 8013288:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801328c:	e7f7      	b.n	801327e <_strtod_l+0xa6e>
 801328e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8013292:	9b05      	ldr	r3, [sp, #20]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d1a8      	bne.n	80131ea <_strtod_l+0x9da>
 8013298:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801329c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801329e:	0d1b      	lsrs	r3, r3, #20
 80132a0:	051b      	lsls	r3, r3, #20
 80132a2:	429a      	cmp	r2, r3
 80132a4:	d1a1      	bne.n	80131ea <_strtod_l+0x9da>
 80132a6:	4620      	mov	r0, r4
 80132a8:	4629      	mov	r1, r5
 80132aa:	f7ed ff8f 	bl	80011cc <__aeabi_d2lz>
 80132ae:	f7ed f92b 	bl	8000508 <__aeabi_l2d>
 80132b2:	4602      	mov	r2, r0
 80132b4:	460b      	mov	r3, r1
 80132b6:	4620      	mov	r0, r4
 80132b8:	4629      	mov	r1, r5
 80132ba:	f7ec ff9b 	bl	80001f4 <__aeabi_dsub>
 80132be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80132c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80132c4:	ea43 0308 	orr.w	r3, r3, r8
 80132c8:	4313      	orrs	r3, r2
 80132ca:	4604      	mov	r4, r0
 80132cc:	460d      	mov	r5, r1
 80132ce:	d066      	beq.n	801339e <_strtod_l+0xb8e>
 80132d0:	a309      	add	r3, pc, #36	; (adr r3, 80132f8 <_strtod_l+0xae8>)
 80132d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d6:	f7ed fbb7 	bl	8000a48 <__aeabi_dcmplt>
 80132da:	2800      	cmp	r0, #0
 80132dc:	f47f ace2 	bne.w	8012ca4 <_strtod_l+0x494>
 80132e0:	a307      	add	r3, pc, #28	; (adr r3, 8013300 <_strtod_l+0xaf0>)
 80132e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e6:	4620      	mov	r0, r4
 80132e8:	4629      	mov	r1, r5
 80132ea:	f7ed fbcb 	bl	8000a84 <__aeabi_dcmpgt>
 80132ee:	2800      	cmp	r0, #0
 80132f0:	f43f af7b 	beq.w	80131ea <_strtod_l+0x9da>
 80132f4:	e4d6      	b.n	8012ca4 <_strtod_l+0x494>
 80132f6:	bf00      	nop
 80132f8:	94a03595 	.word	0x94a03595
 80132fc:	3fdfffff 	.word	0x3fdfffff
 8013300:	35afe535 	.word	0x35afe535
 8013304:	3fe00000 	.word	0x3fe00000
 8013308:	000fffff 	.word	0x000fffff
 801330c:	7ff00000 	.word	0x7ff00000
 8013310:	7fefffff 	.word	0x7fefffff
 8013314:	3ff00000 	.word	0x3ff00000
 8013318:	7fe00000 	.word	0x7fe00000
 801331c:	7c9fffff 	.word	0x7c9fffff
 8013320:	3fe00000 	.word	0x3fe00000
 8013324:	bff00000 	.word	0xbff00000
 8013328:	9b05      	ldr	r3, [sp, #20]
 801332a:	b313      	cbz	r3, 8013372 <_strtod_l+0xb62>
 801332c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801332e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013332:	d81e      	bhi.n	8013372 <_strtod_l+0xb62>
 8013334:	a326      	add	r3, pc, #152	; (adr r3, 80133d0 <_strtod_l+0xbc0>)
 8013336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333a:	4620      	mov	r0, r4
 801333c:	4629      	mov	r1, r5
 801333e:	f7ed fb8d 	bl	8000a5c <__aeabi_dcmple>
 8013342:	b190      	cbz	r0, 801336a <_strtod_l+0xb5a>
 8013344:	4629      	mov	r1, r5
 8013346:	4620      	mov	r0, r4
 8013348:	f7ed fbe4 	bl	8000b14 <__aeabi_d2uiz>
 801334c:	2801      	cmp	r0, #1
 801334e:	bf38      	it	cc
 8013350:	2001      	movcc	r0, #1
 8013352:	f7ed f88d 	bl	8000470 <__aeabi_ui2d>
 8013356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013358:	4604      	mov	r4, r0
 801335a:	460d      	mov	r5, r1
 801335c:	b9d3      	cbnz	r3, 8013394 <_strtod_l+0xb84>
 801335e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013362:	9012      	str	r0, [sp, #72]	; 0x48
 8013364:	9313      	str	r3, [sp, #76]	; 0x4c
 8013366:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 801336a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801336c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8013370:	1a9f      	subs	r7, r3, r2
 8013372:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013376:	f001 ff2d 	bl	80151d4 <__ulp>
 801337a:	4602      	mov	r2, r0
 801337c:	460b      	mov	r3, r1
 801337e:	4630      	mov	r0, r6
 8013380:	4639      	mov	r1, r7
 8013382:	f7ed f8ef 	bl	8000564 <__aeabi_dmul>
 8013386:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801338a:	f7ec ff35 	bl	80001f8 <__adddf3>
 801338e:	4680      	mov	r8, r0
 8013390:	4689      	mov	r9, r1
 8013392:	e77e      	b.n	8013292 <_strtod_l+0xa82>
 8013394:	4602      	mov	r2, r0
 8013396:	460b      	mov	r3, r1
 8013398:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 801339c:	e7e3      	b.n	8013366 <_strtod_l+0xb56>
 801339e:	a30e      	add	r3, pc, #56	; (adr r3, 80133d8 <_strtod_l+0xbc8>)
 80133a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133a4:	f7ed fb50 	bl	8000a48 <__aeabi_dcmplt>
 80133a8:	e7a1      	b.n	80132ee <_strtod_l+0xade>
 80133aa:	2300      	movs	r3, #0
 80133ac:	930a      	str	r3, [sp, #40]	; 0x28
 80133ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80133b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80133b2:	6013      	str	r3, [r2, #0]
 80133b4:	f7ff ba71 	b.w	801289a <_strtod_l+0x8a>
 80133b8:	2a65      	cmp	r2, #101	; 0x65
 80133ba:	f43f ab63 	beq.w	8012a84 <_strtod_l+0x274>
 80133be:	2a45      	cmp	r2, #69	; 0x45
 80133c0:	f43f ab60 	beq.w	8012a84 <_strtod_l+0x274>
 80133c4:	2301      	movs	r3, #1
 80133c6:	f7ff bb95 	b.w	8012af4 <_strtod_l+0x2e4>
 80133ca:	bf00      	nop
 80133cc:	f3af 8000 	nop.w
 80133d0:	ffc00000 	.word	0xffc00000
 80133d4:	41dfffff 	.word	0x41dfffff
 80133d8:	94a03595 	.word	0x94a03595
 80133dc:	3fcfffff 	.word	0x3fcfffff

080133e0 <_strtod_r>:
 80133e0:	4b01      	ldr	r3, [pc, #4]	; (80133e8 <_strtod_r+0x8>)
 80133e2:	f7ff ba15 	b.w	8012810 <_strtod_l>
 80133e6:	bf00      	nop
 80133e8:	200000a0 	.word	0x200000a0

080133ec <_strtol_l.constprop.0>:
 80133ec:	2b01      	cmp	r3, #1
 80133ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133f2:	4680      	mov	r8, r0
 80133f4:	d001      	beq.n	80133fa <_strtol_l.constprop.0+0xe>
 80133f6:	2b24      	cmp	r3, #36	; 0x24
 80133f8:	d906      	bls.n	8013408 <_strtol_l.constprop.0+0x1c>
 80133fa:	f7fe fad7 	bl	80119ac <__errno>
 80133fe:	2316      	movs	r3, #22
 8013400:	6003      	str	r3, [r0, #0]
 8013402:	2000      	movs	r0, #0
 8013404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013408:	460d      	mov	r5, r1
 801340a:	4f35      	ldr	r7, [pc, #212]	; (80134e0 <_strtol_l.constprop.0+0xf4>)
 801340c:	4628      	mov	r0, r5
 801340e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013412:	5de6      	ldrb	r6, [r4, r7]
 8013414:	f016 0608 	ands.w	r6, r6, #8
 8013418:	d1f8      	bne.n	801340c <_strtol_l.constprop.0+0x20>
 801341a:	2c2d      	cmp	r4, #45	; 0x2d
 801341c:	d12f      	bne.n	801347e <_strtol_l.constprop.0+0x92>
 801341e:	2601      	movs	r6, #1
 8013420:	782c      	ldrb	r4, [r5, #0]
 8013422:	1c85      	adds	r5, r0, #2
 8013424:	2b00      	cmp	r3, #0
 8013426:	d057      	beq.n	80134d8 <_strtol_l.constprop.0+0xec>
 8013428:	2b10      	cmp	r3, #16
 801342a:	d109      	bne.n	8013440 <_strtol_l.constprop.0+0x54>
 801342c:	2c30      	cmp	r4, #48	; 0x30
 801342e:	d107      	bne.n	8013440 <_strtol_l.constprop.0+0x54>
 8013430:	7828      	ldrb	r0, [r5, #0]
 8013432:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013436:	2858      	cmp	r0, #88	; 0x58
 8013438:	d149      	bne.n	80134ce <_strtol_l.constprop.0+0xe2>
 801343a:	2310      	movs	r3, #16
 801343c:	786c      	ldrb	r4, [r5, #1]
 801343e:	3502      	adds	r5, #2
 8013440:	2700      	movs	r7, #0
 8013442:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8013446:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 801344a:	fbbe f9f3 	udiv	r9, lr, r3
 801344e:	4638      	mov	r0, r7
 8013450:	fb03 ea19 	mls	sl, r3, r9, lr
 8013454:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013458:	f1bc 0f09 	cmp.w	ip, #9
 801345c:	d814      	bhi.n	8013488 <_strtol_l.constprop.0+0x9c>
 801345e:	4664      	mov	r4, ip
 8013460:	42a3      	cmp	r3, r4
 8013462:	dd22      	ble.n	80134aa <_strtol_l.constprop.0+0xbe>
 8013464:	2f00      	cmp	r7, #0
 8013466:	db1d      	blt.n	80134a4 <_strtol_l.constprop.0+0xb8>
 8013468:	4581      	cmp	r9, r0
 801346a:	d31b      	bcc.n	80134a4 <_strtol_l.constprop.0+0xb8>
 801346c:	d101      	bne.n	8013472 <_strtol_l.constprop.0+0x86>
 801346e:	45a2      	cmp	sl, r4
 8013470:	db18      	blt.n	80134a4 <_strtol_l.constprop.0+0xb8>
 8013472:	2701      	movs	r7, #1
 8013474:	fb00 4003 	mla	r0, r0, r3, r4
 8013478:	f815 4b01 	ldrb.w	r4, [r5], #1
 801347c:	e7ea      	b.n	8013454 <_strtol_l.constprop.0+0x68>
 801347e:	2c2b      	cmp	r4, #43	; 0x2b
 8013480:	bf04      	itt	eq
 8013482:	782c      	ldrbeq	r4, [r5, #0]
 8013484:	1c85      	addeq	r5, r0, #2
 8013486:	e7cd      	b.n	8013424 <_strtol_l.constprop.0+0x38>
 8013488:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801348c:	f1bc 0f19 	cmp.w	ip, #25
 8013490:	d801      	bhi.n	8013496 <_strtol_l.constprop.0+0xaa>
 8013492:	3c37      	subs	r4, #55	; 0x37
 8013494:	e7e4      	b.n	8013460 <_strtol_l.constprop.0+0x74>
 8013496:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801349a:	f1bc 0f19 	cmp.w	ip, #25
 801349e:	d804      	bhi.n	80134aa <_strtol_l.constprop.0+0xbe>
 80134a0:	3c57      	subs	r4, #87	; 0x57
 80134a2:	e7dd      	b.n	8013460 <_strtol_l.constprop.0+0x74>
 80134a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80134a8:	e7e6      	b.n	8013478 <_strtol_l.constprop.0+0x8c>
 80134aa:	2f00      	cmp	r7, #0
 80134ac:	da07      	bge.n	80134be <_strtol_l.constprop.0+0xd2>
 80134ae:	2322      	movs	r3, #34	; 0x22
 80134b0:	4670      	mov	r0, lr
 80134b2:	f8c8 3000 	str.w	r3, [r8]
 80134b6:	2a00      	cmp	r2, #0
 80134b8:	d0a4      	beq.n	8013404 <_strtol_l.constprop.0+0x18>
 80134ba:	1e69      	subs	r1, r5, #1
 80134bc:	e005      	b.n	80134ca <_strtol_l.constprop.0+0xde>
 80134be:	b106      	cbz	r6, 80134c2 <_strtol_l.constprop.0+0xd6>
 80134c0:	4240      	negs	r0, r0
 80134c2:	2a00      	cmp	r2, #0
 80134c4:	d09e      	beq.n	8013404 <_strtol_l.constprop.0+0x18>
 80134c6:	2f00      	cmp	r7, #0
 80134c8:	d1f7      	bne.n	80134ba <_strtol_l.constprop.0+0xce>
 80134ca:	6011      	str	r1, [r2, #0]
 80134cc:	e79a      	b.n	8013404 <_strtol_l.constprop.0+0x18>
 80134ce:	2430      	movs	r4, #48	; 0x30
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d1b5      	bne.n	8013440 <_strtol_l.constprop.0+0x54>
 80134d4:	2308      	movs	r3, #8
 80134d6:	e7b3      	b.n	8013440 <_strtol_l.constprop.0+0x54>
 80134d8:	2c30      	cmp	r4, #48	; 0x30
 80134da:	d0a9      	beq.n	8013430 <_strtol_l.constprop.0+0x44>
 80134dc:	230a      	movs	r3, #10
 80134de:	e7af      	b.n	8013440 <_strtol_l.constprop.0+0x54>
 80134e0:	08018459 	.word	0x08018459

080134e4 <_strtol_r>:
 80134e4:	f7ff bf82 	b.w	80133ec <_strtol_l.constprop.0>

080134e8 <quorem>:
 80134e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ec:	6903      	ldr	r3, [r0, #16]
 80134ee:	690c      	ldr	r4, [r1, #16]
 80134f0:	4607      	mov	r7, r0
 80134f2:	42a3      	cmp	r3, r4
 80134f4:	f2c0 8082 	blt.w	80135fc <quorem+0x114>
 80134f8:	3c01      	subs	r4, #1
 80134fa:	f100 0514 	add.w	r5, r0, #20
 80134fe:	f101 0814 	add.w	r8, r1, #20
 8013502:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013506:	9301      	str	r3, [sp, #4]
 8013508:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801350c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013510:	3301      	adds	r3, #1
 8013512:	429a      	cmp	r2, r3
 8013514:	fbb2 f6f3 	udiv	r6, r2, r3
 8013518:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801351c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013520:	d331      	bcc.n	8013586 <quorem+0x9e>
 8013522:	f04f 0e00 	mov.w	lr, #0
 8013526:	4640      	mov	r0, r8
 8013528:	46ac      	mov	ip, r5
 801352a:	46f2      	mov	sl, lr
 801352c:	f850 2b04 	ldr.w	r2, [r0], #4
 8013530:	b293      	uxth	r3, r2
 8013532:	fb06 e303 	mla	r3, r6, r3, lr
 8013536:	0c12      	lsrs	r2, r2, #16
 8013538:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801353c:	b29b      	uxth	r3, r3
 801353e:	fb06 e202 	mla	r2, r6, r2, lr
 8013542:	ebaa 0303 	sub.w	r3, sl, r3
 8013546:	f8dc a000 	ldr.w	sl, [ip]
 801354a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801354e:	fa1f fa8a 	uxth.w	sl, sl
 8013552:	4453      	add	r3, sl
 8013554:	f8dc a000 	ldr.w	sl, [ip]
 8013558:	b292      	uxth	r2, r2
 801355a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801355e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013562:	b29b      	uxth	r3, r3
 8013564:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013568:	4581      	cmp	r9, r0
 801356a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801356e:	f84c 3b04 	str.w	r3, [ip], #4
 8013572:	d2db      	bcs.n	801352c <quorem+0x44>
 8013574:	f855 300b 	ldr.w	r3, [r5, fp]
 8013578:	b92b      	cbnz	r3, 8013586 <quorem+0x9e>
 801357a:	9b01      	ldr	r3, [sp, #4]
 801357c:	3b04      	subs	r3, #4
 801357e:	429d      	cmp	r5, r3
 8013580:	461a      	mov	r2, r3
 8013582:	d32f      	bcc.n	80135e4 <quorem+0xfc>
 8013584:	613c      	str	r4, [r7, #16]
 8013586:	4638      	mov	r0, r7
 8013588:	f001 fd7c 	bl	8015084 <__mcmp>
 801358c:	2800      	cmp	r0, #0
 801358e:	db25      	blt.n	80135dc <quorem+0xf4>
 8013590:	4628      	mov	r0, r5
 8013592:	f04f 0c00 	mov.w	ip, #0
 8013596:	3601      	adds	r6, #1
 8013598:	f858 1b04 	ldr.w	r1, [r8], #4
 801359c:	f8d0 e000 	ldr.w	lr, [r0]
 80135a0:	b28b      	uxth	r3, r1
 80135a2:	ebac 0303 	sub.w	r3, ip, r3
 80135a6:	fa1f f28e 	uxth.w	r2, lr
 80135aa:	4413      	add	r3, r2
 80135ac:	0c0a      	lsrs	r2, r1, #16
 80135ae:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80135b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80135b6:	b29b      	uxth	r3, r3
 80135b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80135bc:	45c1      	cmp	r9, r8
 80135be:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80135c2:	f840 3b04 	str.w	r3, [r0], #4
 80135c6:	d2e7      	bcs.n	8013598 <quorem+0xb0>
 80135c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80135cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80135d0:	b922      	cbnz	r2, 80135dc <quorem+0xf4>
 80135d2:	3b04      	subs	r3, #4
 80135d4:	429d      	cmp	r5, r3
 80135d6:	461a      	mov	r2, r3
 80135d8:	d30a      	bcc.n	80135f0 <quorem+0x108>
 80135da:	613c      	str	r4, [r7, #16]
 80135dc:	4630      	mov	r0, r6
 80135de:	b003      	add	sp, #12
 80135e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135e4:	6812      	ldr	r2, [r2, #0]
 80135e6:	3b04      	subs	r3, #4
 80135e8:	2a00      	cmp	r2, #0
 80135ea:	d1cb      	bne.n	8013584 <quorem+0x9c>
 80135ec:	3c01      	subs	r4, #1
 80135ee:	e7c6      	b.n	801357e <quorem+0x96>
 80135f0:	6812      	ldr	r2, [r2, #0]
 80135f2:	3b04      	subs	r3, #4
 80135f4:	2a00      	cmp	r2, #0
 80135f6:	d1f0      	bne.n	80135da <quorem+0xf2>
 80135f8:	3c01      	subs	r4, #1
 80135fa:	e7eb      	b.n	80135d4 <quorem+0xec>
 80135fc:	2000      	movs	r0, #0
 80135fe:	e7ee      	b.n	80135de <quorem+0xf6>

08013600 <_dtoa_r>:
 8013600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013604:	4616      	mov	r6, r2
 8013606:	461f      	mov	r7, r3
 8013608:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801360a:	b099      	sub	sp, #100	; 0x64
 801360c:	4605      	mov	r5, r0
 801360e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013612:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8013616:	b974      	cbnz	r4, 8013636 <_dtoa_r+0x36>
 8013618:	2010      	movs	r0, #16
 801361a:	f001 fa43 	bl	8014aa4 <malloc>
 801361e:	4602      	mov	r2, r0
 8013620:	6268      	str	r0, [r5, #36]	; 0x24
 8013622:	b920      	cbnz	r0, 801362e <_dtoa_r+0x2e>
 8013624:	21ea      	movs	r1, #234	; 0xea
 8013626:	4ba8      	ldr	r3, [pc, #672]	; (80138c8 <_dtoa_r+0x2c8>)
 8013628:	48a8      	ldr	r0, [pc, #672]	; (80138cc <_dtoa_r+0x2cc>)
 801362a:	f002 fbf9 	bl	8015e20 <__assert_func>
 801362e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013632:	6004      	str	r4, [r0, #0]
 8013634:	60c4      	str	r4, [r0, #12]
 8013636:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013638:	6819      	ldr	r1, [r3, #0]
 801363a:	b151      	cbz	r1, 8013652 <_dtoa_r+0x52>
 801363c:	685a      	ldr	r2, [r3, #4]
 801363e:	2301      	movs	r3, #1
 8013640:	4093      	lsls	r3, r2
 8013642:	604a      	str	r2, [r1, #4]
 8013644:	608b      	str	r3, [r1, #8]
 8013646:	4628      	mov	r0, r5
 8013648:	f001 fa94 	bl	8014b74 <_Bfree>
 801364c:	2200      	movs	r2, #0
 801364e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013650:	601a      	str	r2, [r3, #0]
 8013652:	1e3b      	subs	r3, r7, #0
 8013654:	bfaf      	iteee	ge
 8013656:	2300      	movge	r3, #0
 8013658:	2201      	movlt	r2, #1
 801365a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801365e:	9305      	strlt	r3, [sp, #20]
 8013660:	bfa8      	it	ge
 8013662:	f8c8 3000 	strge.w	r3, [r8]
 8013666:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801366a:	4b99      	ldr	r3, [pc, #612]	; (80138d0 <_dtoa_r+0x2d0>)
 801366c:	bfb8      	it	lt
 801366e:	f8c8 2000 	strlt.w	r2, [r8]
 8013672:	ea33 0309 	bics.w	r3, r3, r9
 8013676:	d119      	bne.n	80136ac <_dtoa_r+0xac>
 8013678:	f242 730f 	movw	r3, #9999	; 0x270f
 801367c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801367e:	6013      	str	r3, [r2, #0]
 8013680:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013684:	4333      	orrs	r3, r6
 8013686:	f000 857f 	beq.w	8014188 <_dtoa_r+0xb88>
 801368a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801368c:	b953      	cbnz	r3, 80136a4 <_dtoa_r+0xa4>
 801368e:	4b91      	ldr	r3, [pc, #580]	; (80138d4 <_dtoa_r+0x2d4>)
 8013690:	e022      	b.n	80136d8 <_dtoa_r+0xd8>
 8013692:	4b91      	ldr	r3, [pc, #580]	; (80138d8 <_dtoa_r+0x2d8>)
 8013694:	9303      	str	r3, [sp, #12]
 8013696:	3308      	adds	r3, #8
 8013698:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801369a:	6013      	str	r3, [r2, #0]
 801369c:	9803      	ldr	r0, [sp, #12]
 801369e:	b019      	add	sp, #100	; 0x64
 80136a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136a4:	4b8b      	ldr	r3, [pc, #556]	; (80138d4 <_dtoa_r+0x2d4>)
 80136a6:	9303      	str	r3, [sp, #12]
 80136a8:	3303      	adds	r3, #3
 80136aa:	e7f5      	b.n	8013698 <_dtoa_r+0x98>
 80136ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80136b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80136b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80136b8:	2200      	movs	r2, #0
 80136ba:	2300      	movs	r3, #0
 80136bc:	f7ed f9ba 	bl	8000a34 <__aeabi_dcmpeq>
 80136c0:	4680      	mov	r8, r0
 80136c2:	b158      	cbz	r0, 80136dc <_dtoa_r+0xdc>
 80136c4:	2301      	movs	r3, #1
 80136c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80136c8:	6013      	str	r3, [r2, #0]
 80136ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	f000 8558 	beq.w	8014182 <_dtoa_r+0xb82>
 80136d2:	4882      	ldr	r0, [pc, #520]	; (80138dc <_dtoa_r+0x2dc>)
 80136d4:	6018      	str	r0, [r3, #0]
 80136d6:	1e43      	subs	r3, r0, #1
 80136d8:	9303      	str	r3, [sp, #12]
 80136da:	e7df      	b.n	801369c <_dtoa_r+0x9c>
 80136dc:	ab16      	add	r3, sp, #88	; 0x58
 80136de:	9301      	str	r3, [sp, #4]
 80136e0:	ab17      	add	r3, sp, #92	; 0x5c
 80136e2:	9300      	str	r3, [sp, #0]
 80136e4:	4628      	mov	r0, r5
 80136e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80136ea:	f001 fded 	bl	80152c8 <__d2b>
 80136ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80136f2:	4683      	mov	fp, r0
 80136f4:	2c00      	cmp	r4, #0
 80136f6:	d07f      	beq.n	80137f8 <_dtoa_r+0x1f8>
 80136f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80136fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8013702:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013706:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801370a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801370e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8013712:	2200      	movs	r2, #0
 8013714:	4b72      	ldr	r3, [pc, #456]	; (80138e0 <_dtoa_r+0x2e0>)
 8013716:	f7ec fd6d 	bl	80001f4 <__aeabi_dsub>
 801371a:	a365      	add	r3, pc, #404	; (adr r3, 80138b0 <_dtoa_r+0x2b0>)
 801371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013720:	f7ec ff20 	bl	8000564 <__aeabi_dmul>
 8013724:	a364      	add	r3, pc, #400	; (adr r3, 80138b8 <_dtoa_r+0x2b8>)
 8013726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801372a:	f7ec fd65 	bl	80001f8 <__adddf3>
 801372e:	4606      	mov	r6, r0
 8013730:	4620      	mov	r0, r4
 8013732:	460f      	mov	r7, r1
 8013734:	f7ec feac 	bl	8000490 <__aeabi_i2d>
 8013738:	a361      	add	r3, pc, #388	; (adr r3, 80138c0 <_dtoa_r+0x2c0>)
 801373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801373e:	f7ec ff11 	bl	8000564 <__aeabi_dmul>
 8013742:	4602      	mov	r2, r0
 8013744:	460b      	mov	r3, r1
 8013746:	4630      	mov	r0, r6
 8013748:	4639      	mov	r1, r7
 801374a:	f7ec fd55 	bl	80001f8 <__adddf3>
 801374e:	4606      	mov	r6, r0
 8013750:	460f      	mov	r7, r1
 8013752:	f7ed f9b7 	bl	8000ac4 <__aeabi_d2iz>
 8013756:	2200      	movs	r2, #0
 8013758:	4682      	mov	sl, r0
 801375a:	2300      	movs	r3, #0
 801375c:	4630      	mov	r0, r6
 801375e:	4639      	mov	r1, r7
 8013760:	f7ed f972 	bl	8000a48 <__aeabi_dcmplt>
 8013764:	b148      	cbz	r0, 801377a <_dtoa_r+0x17a>
 8013766:	4650      	mov	r0, sl
 8013768:	f7ec fe92 	bl	8000490 <__aeabi_i2d>
 801376c:	4632      	mov	r2, r6
 801376e:	463b      	mov	r3, r7
 8013770:	f7ed f960 	bl	8000a34 <__aeabi_dcmpeq>
 8013774:	b908      	cbnz	r0, 801377a <_dtoa_r+0x17a>
 8013776:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801377a:	f1ba 0f16 	cmp.w	sl, #22
 801377e:	d858      	bhi.n	8013832 <_dtoa_r+0x232>
 8013780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013784:	4b57      	ldr	r3, [pc, #348]	; (80138e4 <_dtoa_r+0x2e4>)
 8013786:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801378e:	f7ed f95b 	bl	8000a48 <__aeabi_dcmplt>
 8013792:	2800      	cmp	r0, #0
 8013794:	d04f      	beq.n	8013836 <_dtoa_r+0x236>
 8013796:	2300      	movs	r3, #0
 8013798:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801379c:	930f      	str	r3, [sp, #60]	; 0x3c
 801379e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80137a0:	1b1c      	subs	r4, r3, r4
 80137a2:	1e63      	subs	r3, r4, #1
 80137a4:	9309      	str	r3, [sp, #36]	; 0x24
 80137a6:	bf49      	itett	mi
 80137a8:	f1c4 0301 	rsbmi	r3, r4, #1
 80137ac:	2300      	movpl	r3, #0
 80137ae:	9306      	strmi	r3, [sp, #24]
 80137b0:	2300      	movmi	r3, #0
 80137b2:	bf54      	ite	pl
 80137b4:	9306      	strpl	r3, [sp, #24]
 80137b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80137b8:	f1ba 0f00 	cmp.w	sl, #0
 80137bc:	db3d      	blt.n	801383a <_dtoa_r+0x23a>
 80137be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137c0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80137c4:	4453      	add	r3, sl
 80137c6:	9309      	str	r3, [sp, #36]	; 0x24
 80137c8:	2300      	movs	r3, #0
 80137ca:	930a      	str	r3, [sp, #40]	; 0x28
 80137cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80137ce:	2b09      	cmp	r3, #9
 80137d0:	f200 808c 	bhi.w	80138ec <_dtoa_r+0x2ec>
 80137d4:	2b05      	cmp	r3, #5
 80137d6:	bfc4      	itt	gt
 80137d8:	3b04      	subgt	r3, #4
 80137da:	9322      	strgt	r3, [sp, #136]	; 0x88
 80137dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80137de:	bfc8      	it	gt
 80137e0:	2400      	movgt	r4, #0
 80137e2:	f1a3 0302 	sub.w	r3, r3, #2
 80137e6:	bfd8      	it	le
 80137e8:	2401      	movle	r4, #1
 80137ea:	2b03      	cmp	r3, #3
 80137ec:	f200 808a 	bhi.w	8013904 <_dtoa_r+0x304>
 80137f0:	e8df f003 	tbb	[pc, r3]
 80137f4:	5b4d4f2d 	.word	0x5b4d4f2d
 80137f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80137fc:	441c      	add	r4, r3
 80137fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8013802:	2b20      	cmp	r3, #32
 8013804:	bfc3      	ittte	gt
 8013806:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801380a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 801380e:	fa09 f303 	lslgt.w	r3, r9, r3
 8013812:	f1c3 0320 	rsble	r3, r3, #32
 8013816:	bfc6      	itte	gt
 8013818:	fa26 f000 	lsrgt.w	r0, r6, r0
 801381c:	4318      	orrgt	r0, r3
 801381e:	fa06 f003 	lslle.w	r0, r6, r3
 8013822:	f7ec fe25 	bl	8000470 <__aeabi_ui2d>
 8013826:	2301      	movs	r3, #1
 8013828:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801382c:	3c01      	subs	r4, #1
 801382e:	9313      	str	r3, [sp, #76]	; 0x4c
 8013830:	e76f      	b.n	8013712 <_dtoa_r+0x112>
 8013832:	2301      	movs	r3, #1
 8013834:	e7b2      	b.n	801379c <_dtoa_r+0x19c>
 8013836:	900f      	str	r0, [sp, #60]	; 0x3c
 8013838:	e7b1      	b.n	801379e <_dtoa_r+0x19e>
 801383a:	9b06      	ldr	r3, [sp, #24]
 801383c:	eba3 030a 	sub.w	r3, r3, sl
 8013840:	9306      	str	r3, [sp, #24]
 8013842:	f1ca 0300 	rsb	r3, sl, #0
 8013846:	930a      	str	r3, [sp, #40]	; 0x28
 8013848:	2300      	movs	r3, #0
 801384a:	930e      	str	r3, [sp, #56]	; 0x38
 801384c:	e7be      	b.n	80137cc <_dtoa_r+0x1cc>
 801384e:	2300      	movs	r3, #0
 8013850:	930b      	str	r3, [sp, #44]	; 0x2c
 8013852:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013854:	2b00      	cmp	r3, #0
 8013856:	dc58      	bgt.n	801390a <_dtoa_r+0x30a>
 8013858:	f04f 0901 	mov.w	r9, #1
 801385c:	464b      	mov	r3, r9
 801385e:	f8cd 9020 	str.w	r9, [sp, #32]
 8013862:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8013866:	2200      	movs	r2, #0
 8013868:	6a68      	ldr	r0, [r5, #36]	; 0x24
 801386a:	6042      	str	r2, [r0, #4]
 801386c:	2204      	movs	r2, #4
 801386e:	f102 0614 	add.w	r6, r2, #20
 8013872:	429e      	cmp	r6, r3
 8013874:	6841      	ldr	r1, [r0, #4]
 8013876:	d94e      	bls.n	8013916 <_dtoa_r+0x316>
 8013878:	4628      	mov	r0, r5
 801387a:	f001 f93b 	bl	8014af4 <_Balloc>
 801387e:	9003      	str	r0, [sp, #12]
 8013880:	2800      	cmp	r0, #0
 8013882:	d14c      	bne.n	801391e <_dtoa_r+0x31e>
 8013884:	4602      	mov	r2, r0
 8013886:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801388a:	4b17      	ldr	r3, [pc, #92]	; (80138e8 <_dtoa_r+0x2e8>)
 801388c:	e6cc      	b.n	8013628 <_dtoa_r+0x28>
 801388e:	2301      	movs	r3, #1
 8013890:	e7de      	b.n	8013850 <_dtoa_r+0x250>
 8013892:	2300      	movs	r3, #0
 8013894:	930b      	str	r3, [sp, #44]	; 0x2c
 8013896:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013898:	eb0a 0903 	add.w	r9, sl, r3
 801389c:	f109 0301 	add.w	r3, r9, #1
 80138a0:	2b01      	cmp	r3, #1
 80138a2:	9308      	str	r3, [sp, #32]
 80138a4:	bfb8      	it	lt
 80138a6:	2301      	movlt	r3, #1
 80138a8:	e7dd      	b.n	8013866 <_dtoa_r+0x266>
 80138aa:	2301      	movs	r3, #1
 80138ac:	e7f2      	b.n	8013894 <_dtoa_r+0x294>
 80138ae:	bf00      	nop
 80138b0:	636f4361 	.word	0x636f4361
 80138b4:	3fd287a7 	.word	0x3fd287a7
 80138b8:	8b60c8b3 	.word	0x8b60c8b3
 80138bc:	3fc68a28 	.word	0x3fc68a28
 80138c0:	509f79fb 	.word	0x509f79fb
 80138c4:	3fd34413 	.word	0x3fd34413
 80138c8:	08018566 	.word	0x08018566
 80138cc:	0801857d 	.word	0x0801857d
 80138d0:	7ff00000 	.word	0x7ff00000
 80138d4:	08018562 	.word	0x08018562
 80138d8:	08018559 	.word	0x08018559
 80138dc:	080183dd 	.word	0x080183dd
 80138e0:	3ff80000 	.word	0x3ff80000
 80138e4:	08018750 	.word	0x08018750
 80138e8:	080185d8 	.word	0x080185d8
 80138ec:	2401      	movs	r4, #1
 80138ee:	2300      	movs	r3, #0
 80138f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80138f2:	9322      	str	r3, [sp, #136]	; 0x88
 80138f4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80138f8:	2200      	movs	r2, #0
 80138fa:	2312      	movs	r3, #18
 80138fc:	f8cd 9020 	str.w	r9, [sp, #32]
 8013900:	9223      	str	r2, [sp, #140]	; 0x8c
 8013902:	e7b0      	b.n	8013866 <_dtoa_r+0x266>
 8013904:	2301      	movs	r3, #1
 8013906:	930b      	str	r3, [sp, #44]	; 0x2c
 8013908:	e7f4      	b.n	80138f4 <_dtoa_r+0x2f4>
 801390a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 801390e:	464b      	mov	r3, r9
 8013910:	f8cd 9020 	str.w	r9, [sp, #32]
 8013914:	e7a7      	b.n	8013866 <_dtoa_r+0x266>
 8013916:	3101      	adds	r1, #1
 8013918:	6041      	str	r1, [r0, #4]
 801391a:	0052      	lsls	r2, r2, #1
 801391c:	e7a7      	b.n	801386e <_dtoa_r+0x26e>
 801391e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013920:	9a03      	ldr	r2, [sp, #12]
 8013922:	601a      	str	r2, [r3, #0]
 8013924:	9b08      	ldr	r3, [sp, #32]
 8013926:	2b0e      	cmp	r3, #14
 8013928:	f200 80a8 	bhi.w	8013a7c <_dtoa_r+0x47c>
 801392c:	2c00      	cmp	r4, #0
 801392e:	f000 80a5 	beq.w	8013a7c <_dtoa_r+0x47c>
 8013932:	f1ba 0f00 	cmp.w	sl, #0
 8013936:	dd34      	ble.n	80139a2 <_dtoa_r+0x3a2>
 8013938:	4a9a      	ldr	r2, [pc, #616]	; (8013ba4 <_dtoa_r+0x5a4>)
 801393a:	f00a 030f 	and.w	r3, sl, #15
 801393e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013942:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013946:	e9d3 3400 	ldrd	r3, r4, [r3]
 801394a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801394e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8013952:	d016      	beq.n	8013982 <_dtoa_r+0x382>
 8013954:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013958:	4b93      	ldr	r3, [pc, #588]	; (8013ba8 <_dtoa_r+0x5a8>)
 801395a:	2703      	movs	r7, #3
 801395c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013960:	f7ec ff2a 	bl	80007b8 <__aeabi_ddiv>
 8013964:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013968:	f004 040f 	and.w	r4, r4, #15
 801396c:	4e8e      	ldr	r6, [pc, #568]	; (8013ba8 <_dtoa_r+0x5a8>)
 801396e:	b954      	cbnz	r4, 8013986 <_dtoa_r+0x386>
 8013970:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013978:	f7ec ff1e 	bl	80007b8 <__aeabi_ddiv>
 801397c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013980:	e029      	b.n	80139d6 <_dtoa_r+0x3d6>
 8013982:	2702      	movs	r7, #2
 8013984:	e7f2      	b.n	801396c <_dtoa_r+0x36c>
 8013986:	07e1      	lsls	r1, r4, #31
 8013988:	d508      	bpl.n	801399c <_dtoa_r+0x39c>
 801398a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801398e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013992:	f7ec fde7 	bl	8000564 <__aeabi_dmul>
 8013996:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801399a:	3701      	adds	r7, #1
 801399c:	1064      	asrs	r4, r4, #1
 801399e:	3608      	adds	r6, #8
 80139a0:	e7e5      	b.n	801396e <_dtoa_r+0x36e>
 80139a2:	f000 80a5 	beq.w	8013af0 <_dtoa_r+0x4f0>
 80139a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80139aa:	f1ca 0400 	rsb	r4, sl, #0
 80139ae:	4b7d      	ldr	r3, [pc, #500]	; (8013ba4 <_dtoa_r+0x5a4>)
 80139b0:	f004 020f 	and.w	r2, r4, #15
 80139b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80139b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139bc:	f7ec fdd2 	bl	8000564 <__aeabi_dmul>
 80139c0:	2702      	movs	r7, #2
 80139c2:	2300      	movs	r3, #0
 80139c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80139c8:	4e77      	ldr	r6, [pc, #476]	; (8013ba8 <_dtoa_r+0x5a8>)
 80139ca:	1124      	asrs	r4, r4, #4
 80139cc:	2c00      	cmp	r4, #0
 80139ce:	f040 8084 	bne.w	8013ada <_dtoa_r+0x4da>
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d1d2      	bne.n	801397c <_dtoa_r+0x37c>
 80139d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80139d8:	2b00      	cmp	r3, #0
 80139da:	f000 808b 	beq.w	8013af4 <_dtoa_r+0x4f4>
 80139de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80139e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80139e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80139ea:	2200      	movs	r2, #0
 80139ec:	4b6f      	ldr	r3, [pc, #444]	; (8013bac <_dtoa_r+0x5ac>)
 80139ee:	f7ed f82b 	bl	8000a48 <__aeabi_dcmplt>
 80139f2:	2800      	cmp	r0, #0
 80139f4:	d07e      	beq.n	8013af4 <_dtoa_r+0x4f4>
 80139f6:	9b08      	ldr	r3, [sp, #32]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d07b      	beq.n	8013af4 <_dtoa_r+0x4f4>
 80139fc:	f1b9 0f00 	cmp.w	r9, #0
 8013a00:	dd38      	ble.n	8013a74 <_dtoa_r+0x474>
 8013a02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013a06:	2200      	movs	r2, #0
 8013a08:	4b69      	ldr	r3, [pc, #420]	; (8013bb0 <_dtoa_r+0x5b0>)
 8013a0a:	f7ec fdab 	bl	8000564 <__aeabi_dmul>
 8013a0e:	464c      	mov	r4, r9
 8013a10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a14:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8013a18:	3701      	adds	r7, #1
 8013a1a:	4638      	mov	r0, r7
 8013a1c:	f7ec fd38 	bl	8000490 <__aeabi_i2d>
 8013a20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a24:	f7ec fd9e 	bl	8000564 <__aeabi_dmul>
 8013a28:	2200      	movs	r2, #0
 8013a2a:	4b62      	ldr	r3, [pc, #392]	; (8013bb4 <_dtoa_r+0x5b4>)
 8013a2c:	f7ec fbe4 	bl	80001f8 <__adddf3>
 8013a30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8013a34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013a38:	9611      	str	r6, [sp, #68]	; 0x44
 8013a3a:	2c00      	cmp	r4, #0
 8013a3c:	d15d      	bne.n	8013afa <_dtoa_r+0x4fa>
 8013a3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a42:	2200      	movs	r2, #0
 8013a44:	4b5c      	ldr	r3, [pc, #368]	; (8013bb8 <_dtoa_r+0x5b8>)
 8013a46:	f7ec fbd5 	bl	80001f4 <__aeabi_dsub>
 8013a4a:	4602      	mov	r2, r0
 8013a4c:	460b      	mov	r3, r1
 8013a4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013a52:	4633      	mov	r3, r6
 8013a54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013a56:	f7ed f815 	bl	8000a84 <__aeabi_dcmpgt>
 8013a5a:	2800      	cmp	r0, #0
 8013a5c:	f040 829c 	bne.w	8013f98 <_dtoa_r+0x998>
 8013a60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013a66:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013a6a:	f7ec ffed 	bl	8000a48 <__aeabi_dcmplt>
 8013a6e:	2800      	cmp	r0, #0
 8013a70:	f040 8290 	bne.w	8013f94 <_dtoa_r+0x994>
 8013a74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8013a78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8013a7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	f2c0 8152 	blt.w	8013d28 <_dtoa_r+0x728>
 8013a84:	f1ba 0f0e 	cmp.w	sl, #14
 8013a88:	f300 814e 	bgt.w	8013d28 <_dtoa_r+0x728>
 8013a8c:	4b45      	ldr	r3, [pc, #276]	; (8013ba4 <_dtoa_r+0x5a4>)
 8013a8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013a92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013a96:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8013a9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	f280 80db 	bge.w	8013c58 <_dtoa_r+0x658>
 8013aa2:	9b08      	ldr	r3, [sp, #32]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	f300 80d7 	bgt.w	8013c58 <_dtoa_r+0x658>
 8013aaa:	f040 8272 	bne.w	8013f92 <_dtoa_r+0x992>
 8013aae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	4b40      	ldr	r3, [pc, #256]	; (8013bb8 <_dtoa_r+0x5b8>)
 8013ab6:	f7ec fd55 	bl	8000564 <__aeabi_dmul>
 8013aba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013abe:	f7ec ffd7 	bl	8000a70 <__aeabi_dcmpge>
 8013ac2:	9c08      	ldr	r4, [sp, #32]
 8013ac4:	4626      	mov	r6, r4
 8013ac6:	2800      	cmp	r0, #0
 8013ac8:	f040 8248 	bne.w	8013f5c <_dtoa_r+0x95c>
 8013acc:	2331      	movs	r3, #49	; 0x31
 8013ace:	9f03      	ldr	r7, [sp, #12]
 8013ad0:	f10a 0a01 	add.w	sl, sl, #1
 8013ad4:	f807 3b01 	strb.w	r3, [r7], #1
 8013ad8:	e244      	b.n	8013f64 <_dtoa_r+0x964>
 8013ada:	07e2      	lsls	r2, r4, #31
 8013adc:	d505      	bpl.n	8013aea <_dtoa_r+0x4ea>
 8013ade:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013ae2:	f7ec fd3f 	bl	8000564 <__aeabi_dmul>
 8013ae6:	2301      	movs	r3, #1
 8013ae8:	3701      	adds	r7, #1
 8013aea:	1064      	asrs	r4, r4, #1
 8013aec:	3608      	adds	r6, #8
 8013aee:	e76d      	b.n	80139cc <_dtoa_r+0x3cc>
 8013af0:	2702      	movs	r7, #2
 8013af2:	e770      	b.n	80139d6 <_dtoa_r+0x3d6>
 8013af4:	46d0      	mov	r8, sl
 8013af6:	9c08      	ldr	r4, [sp, #32]
 8013af8:	e78f      	b.n	8013a1a <_dtoa_r+0x41a>
 8013afa:	9903      	ldr	r1, [sp, #12]
 8013afc:	4b29      	ldr	r3, [pc, #164]	; (8013ba4 <_dtoa_r+0x5a4>)
 8013afe:	4421      	add	r1, r4
 8013b00:	9112      	str	r1, [sp, #72]	; 0x48
 8013b02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013b04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013b08:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8013b0c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013b10:	2900      	cmp	r1, #0
 8013b12:	d055      	beq.n	8013bc0 <_dtoa_r+0x5c0>
 8013b14:	2000      	movs	r0, #0
 8013b16:	4929      	ldr	r1, [pc, #164]	; (8013bbc <_dtoa_r+0x5bc>)
 8013b18:	f7ec fe4e 	bl	80007b8 <__aeabi_ddiv>
 8013b1c:	463b      	mov	r3, r7
 8013b1e:	4632      	mov	r2, r6
 8013b20:	f7ec fb68 	bl	80001f4 <__aeabi_dsub>
 8013b24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013b28:	9f03      	ldr	r7, [sp, #12]
 8013b2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b2e:	f7ec ffc9 	bl	8000ac4 <__aeabi_d2iz>
 8013b32:	4604      	mov	r4, r0
 8013b34:	f7ec fcac 	bl	8000490 <__aeabi_i2d>
 8013b38:	4602      	mov	r2, r0
 8013b3a:	460b      	mov	r3, r1
 8013b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b40:	f7ec fb58 	bl	80001f4 <__aeabi_dsub>
 8013b44:	4602      	mov	r2, r0
 8013b46:	460b      	mov	r3, r1
 8013b48:	3430      	adds	r4, #48	; 0x30
 8013b4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013b4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013b52:	f807 4b01 	strb.w	r4, [r7], #1
 8013b56:	f7ec ff77 	bl	8000a48 <__aeabi_dcmplt>
 8013b5a:	2800      	cmp	r0, #0
 8013b5c:	d174      	bne.n	8013c48 <_dtoa_r+0x648>
 8013b5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b62:	2000      	movs	r0, #0
 8013b64:	4911      	ldr	r1, [pc, #68]	; (8013bac <_dtoa_r+0x5ac>)
 8013b66:	f7ec fb45 	bl	80001f4 <__aeabi_dsub>
 8013b6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013b6e:	f7ec ff6b 	bl	8000a48 <__aeabi_dcmplt>
 8013b72:	2800      	cmp	r0, #0
 8013b74:	f040 80b7 	bne.w	8013ce6 <_dtoa_r+0x6e6>
 8013b78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013b7a:	429f      	cmp	r7, r3
 8013b7c:	f43f af7a 	beq.w	8013a74 <_dtoa_r+0x474>
 8013b80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013b84:	2200      	movs	r2, #0
 8013b86:	4b0a      	ldr	r3, [pc, #40]	; (8013bb0 <_dtoa_r+0x5b0>)
 8013b88:	f7ec fcec 	bl	8000564 <__aeabi_dmul>
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013b92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b96:	4b06      	ldr	r3, [pc, #24]	; (8013bb0 <_dtoa_r+0x5b0>)
 8013b98:	f7ec fce4 	bl	8000564 <__aeabi_dmul>
 8013b9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ba0:	e7c3      	b.n	8013b2a <_dtoa_r+0x52a>
 8013ba2:	bf00      	nop
 8013ba4:	08018750 	.word	0x08018750
 8013ba8:	08018728 	.word	0x08018728
 8013bac:	3ff00000 	.word	0x3ff00000
 8013bb0:	40240000 	.word	0x40240000
 8013bb4:	401c0000 	.word	0x401c0000
 8013bb8:	40140000 	.word	0x40140000
 8013bbc:	3fe00000 	.word	0x3fe00000
 8013bc0:	4630      	mov	r0, r6
 8013bc2:	4639      	mov	r1, r7
 8013bc4:	f7ec fcce 	bl	8000564 <__aeabi_dmul>
 8013bc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013bca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013bce:	9c03      	ldr	r4, [sp, #12]
 8013bd0:	9314      	str	r3, [sp, #80]	; 0x50
 8013bd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013bd6:	f7ec ff75 	bl	8000ac4 <__aeabi_d2iz>
 8013bda:	9015      	str	r0, [sp, #84]	; 0x54
 8013bdc:	f7ec fc58 	bl	8000490 <__aeabi_i2d>
 8013be0:	4602      	mov	r2, r0
 8013be2:	460b      	mov	r3, r1
 8013be4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013be8:	f7ec fb04 	bl	80001f4 <__aeabi_dsub>
 8013bec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013bee:	4606      	mov	r6, r0
 8013bf0:	3330      	adds	r3, #48	; 0x30
 8013bf2:	f804 3b01 	strb.w	r3, [r4], #1
 8013bf6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013bf8:	460f      	mov	r7, r1
 8013bfa:	429c      	cmp	r4, r3
 8013bfc:	f04f 0200 	mov.w	r2, #0
 8013c00:	d124      	bne.n	8013c4c <_dtoa_r+0x64c>
 8013c02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013c06:	4bb0      	ldr	r3, [pc, #704]	; (8013ec8 <_dtoa_r+0x8c8>)
 8013c08:	f7ec faf6 	bl	80001f8 <__adddf3>
 8013c0c:	4602      	mov	r2, r0
 8013c0e:	460b      	mov	r3, r1
 8013c10:	4630      	mov	r0, r6
 8013c12:	4639      	mov	r1, r7
 8013c14:	f7ec ff36 	bl	8000a84 <__aeabi_dcmpgt>
 8013c18:	2800      	cmp	r0, #0
 8013c1a:	d163      	bne.n	8013ce4 <_dtoa_r+0x6e4>
 8013c1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013c20:	2000      	movs	r0, #0
 8013c22:	49a9      	ldr	r1, [pc, #676]	; (8013ec8 <_dtoa_r+0x8c8>)
 8013c24:	f7ec fae6 	bl	80001f4 <__aeabi_dsub>
 8013c28:	4602      	mov	r2, r0
 8013c2a:	460b      	mov	r3, r1
 8013c2c:	4630      	mov	r0, r6
 8013c2e:	4639      	mov	r1, r7
 8013c30:	f7ec ff0a 	bl	8000a48 <__aeabi_dcmplt>
 8013c34:	2800      	cmp	r0, #0
 8013c36:	f43f af1d 	beq.w	8013a74 <_dtoa_r+0x474>
 8013c3a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8013c3c:	1e7b      	subs	r3, r7, #1
 8013c3e:	9314      	str	r3, [sp, #80]	; 0x50
 8013c40:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8013c44:	2b30      	cmp	r3, #48	; 0x30
 8013c46:	d0f8      	beq.n	8013c3a <_dtoa_r+0x63a>
 8013c48:	46c2      	mov	sl, r8
 8013c4a:	e03b      	b.n	8013cc4 <_dtoa_r+0x6c4>
 8013c4c:	4b9f      	ldr	r3, [pc, #636]	; (8013ecc <_dtoa_r+0x8cc>)
 8013c4e:	f7ec fc89 	bl	8000564 <__aeabi_dmul>
 8013c52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013c56:	e7bc      	b.n	8013bd2 <_dtoa_r+0x5d2>
 8013c58:	9f03      	ldr	r7, [sp, #12]
 8013c5a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8013c5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013c62:	4640      	mov	r0, r8
 8013c64:	4649      	mov	r1, r9
 8013c66:	f7ec fda7 	bl	80007b8 <__aeabi_ddiv>
 8013c6a:	f7ec ff2b 	bl	8000ac4 <__aeabi_d2iz>
 8013c6e:	4604      	mov	r4, r0
 8013c70:	f7ec fc0e 	bl	8000490 <__aeabi_i2d>
 8013c74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013c78:	f7ec fc74 	bl	8000564 <__aeabi_dmul>
 8013c7c:	4602      	mov	r2, r0
 8013c7e:	460b      	mov	r3, r1
 8013c80:	4640      	mov	r0, r8
 8013c82:	4649      	mov	r1, r9
 8013c84:	f7ec fab6 	bl	80001f4 <__aeabi_dsub>
 8013c88:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8013c8c:	f807 6b01 	strb.w	r6, [r7], #1
 8013c90:	9e03      	ldr	r6, [sp, #12]
 8013c92:	f8dd c020 	ldr.w	ip, [sp, #32]
 8013c96:	1bbe      	subs	r6, r7, r6
 8013c98:	45b4      	cmp	ip, r6
 8013c9a:	4602      	mov	r2, r0
 8013c9c:	460b      	mov	r3, r1
 8013c9e:	d136      	bne.n	8013d0e <_dtoa_r+0x70e>
 8013ca0:	f7ec faaa 	bl	80001f8 <__adddf3>
 8013ca4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013ca8:	4680      	mov	r8, r0
 8013caa:	4689      	mov	r9, r1
 8013cac:	f7ec feea 	bl	8000a84 <__aeabi_dcmpgt>
 8013cb0:	bb58      	cbnz	r0, 8013d0a <_dtoa_r+0x70a>
 8013cb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013cb6:	4640      	mov	r0, r8
 8013cb8:	4649      	mov	r1, r9
 8013cba:	f7ec febb 	bl	8000a34 <__aeabi_dcmpeq>
 8013cbe:	b108      	cbz	r0, 8013cc4 <_dtoa_r+0x6c4>
 8013cc0:	07e1      	lsls	r1, r4, #31
 8013cc2:	d422      	bmi.n	8013d0a <_dtoa_r+0x70a>
 8013cc4:	4628      	mov	r0, r5
 8013cc6:	4659      	mov	r1, fp
 8013cc8:	f000 ff54 	bl	8014b74 <_Bfree>
 8013ccc:	2300      	movs	r3, #0
 8013cce:	703b      	strb	r3, [r7, #0]
 8013cd0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013cd2:	f10a 0001 	add.w	r0, sl, #1
 8013cd6:	6018      	str	r0, [r3, #0]
 8013cd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	f43f acde 	beq.w	801369c <_dtoa_r+0x9c>
 8013ce0:	601f      	str	r7, [r3, #0]
 8013ce2:	e4db      	b.n	801369c <_dtoa_r+0x9c>
 8013ce4:	4627      	mov	r7, r4
 8013ce6:	463b      	mov	r3, r7
 8013ce8:	461f      	mov	r7, r3
 8013cea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013cee:	2a39      	cmp	r2, #57	; 0x39
 8013cf0:	d107      	bne.n	8013d02 <_dtoa_r+0x702>
 8013cf2:	9a03      	ldr	r2, [sp, #12]
 8013cf4:	429a      	cmp	r2, r3
 8013cf6:	d1f7      	bne.n	8013ce8 <_dtoa_r+0x6e8>
 8013cf8:	2230      	movs	r2, #48	; 0x30
 8013cfa:	9903      	ldr	r1, [sp, #12]
 8013cfc:	f108 0801 	add.w	r8, r8, #1
 8013d00:	700a      	strb	r2, [r1, #0]
 8013d02:	781a      	ldrb	r2, [r3, #0]
 8013d04:	3201      	adds	r2, #1
 8013d06:	701a      	strb	r2, [r3, #0]
 8013d08:	e79e      	b.n	8013c48 <_dtoa_r+0x648>
 8013d0a:	46d0      	mov	r8, sl
 8013d0c:	e7eb      	b.n	8013ce6 <_dtoa_r+0x6e6>
 8013d0e:	2200      	movs	r2, #0
 8013d10:	4b6e      	ldr	r3, [pc, #440]	; (8013ecc <_dtoa_r+0x8cc>)
 8013d12:	f7ec fc27 	bl	8000564 <__aeabi_dmul>
 8013d16:	2200      	movs	r2, #0
 8013d18:	2300      	movs	r3, #0
 8013d1a:	4680      	mov	r8, r0
 8013d1c:	4689      	mov	r9, r1
 8013d1e:	f7ec fe89 	bl	8000a34 <__aeabi_dcmpeq>
 8013d22:	2800      	cmp	r0, #0
 8013d24:	d09b      	beq.n	8013c5e <_dtoa_r+0x65e>
 8013d26:	e7cd      	b.n	8013cc4 <_dtoa_r+0x6c4>
 8013d28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013d2a:	2a00      	cmp	r2, #0
 8013d2c:	f000 80d0 	beq.w	8013ed0 <_dtoa_r+0x8d0>
 8013d30:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013d32:	2a01      	cmp	r2, #1
 8013d34:	f300 80ae 	bgt.w	8013e94 <_dtoa_r+0x894>
 8013d38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013d3a:	2a00      	cmp	r2, #0
 8013d3c:	f000 80a6 	beq.w	8013e8c <_dtoa_r+0x88c>
 8013d40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013d44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013d46:	9f06      	ldr	r7, [sp, #24]
 8013d48:	9a06      	ldr	r2, [sp, #24]
 8013d4a:	2101      	movs	r1, #1
 8013d4c:	441a      	add	r2, r3
 8013d4e:	9206      	str	r2, [sp, #24]
 8013d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d52:	4628      	mov	r0, r5
 8013d54:	441a      	add	r2, r3
 8013d56:	9209      	str	r2, [sp, #36]	; 0x24
 8013d58:	f001 f80c 	bl	8014d74 <__i2b>
 8013d5c:	4606      	mov	r6, r0
 8013d5e:	2f00      	cmp	r7, #0
 8013d60:	dd0c      	ble.n	8013d7c <_dtoa_r+0x77c>
 8013d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	dd09      	ble.n	8013d7c <_dtoa_r+0x77c>
 8013d68:	42bb      	cmp	r3, r7
 8013d6a:	bfa8      	it	ge
 8013d6c:	463b      	movge	r3, r7
 8013d6e:	9a06      	ldr	r2, [sp, #24]
 8013d70:	1aff      	subs	r7, r7, r3
 8013d72:	1ad2      	subs	r2, r2, r3
 8013d74:	9206      	str	r2, [sp, #24]
 8013d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d78:	1ad3      	subs	r3, r2, r3
 8013d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8013d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d7e:	b1f3      	cbz	r3, 8013dbe <_dtoa_r+0x7be>
 8013d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	f000 80a8 	beq.w	8013ed8 <_dtoa_r+0x8d8>
 8013d88:	2c00      	cmp	r4, #0
 8013d8a:	dd10      	ble.n	8013dae <_dtoa_r+0x7ae>
 8013d8c:	4631      	mov	r1, r6
 8013d8e:	4622      	mov	r2, r4
 8013d90:	4628      	mov	r0, r5
 8013d92:	f001 f8ad 	bl	8014ef0 <__pow5mult>
 8013d96:	465a      	mov	r2, fp
 8013d98:	4601      	mov	r1, r0
 8013d9a:	4606      	mov	r6, r0
 8013d9c:	4628      	mov	r0, r5
 8013d9e:	f000 ffff 	bl	8014da0 <__multiply>
 8013da2:	4680      	mov	r8, r0
 8013da4:	4659      	mov	r1, fp
 8013da6:	4628      	mov	r0, r5
 8013da8:	f000 fee4 	bl	8014b74 <_Bfree>
 8013dac:	46c3      	mov	fp, r8
 8013dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013db0:	1b1a      	subs	r2, r3, r4
 8013db2:	d004      	beq.n	8013dbe <_dtoa_r+0x7be>
 8013db4:	4659      	mov	r1, fp
 8013db6:	4628      	mov	r0, r5
 8013db8:	f001 f89a 	bl	8014ef0 <__pow5mult>
 8013dbc:	4683      	mov	fp, r0
 8013dbe:	2101      	movs	r1, #1
 8013dc0:	4628      	mov	r0, r5
 8013dc2:	f000 ffd7 	bl	8014d74 <__i2b>
 8013dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013dc8:	4604      	mov	r4, r0
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	f340 8086 	ble.w	8013edc <_dtoa_r+0x8dc>
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	4601      	mov	r1, r0
 8013dd4:	4628      	mov	r0, r5
 8013dd6:	f001 f88b 	bl	8014ef0 <__pow5mult>
 8013dda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013ddc:	4604      	mov	r4, r0
 8013dde:	2b01      	cmp	r3, #1
 8013de0:	dd7f      	ble.n	8013ee2 <_dtoa_r+0x8e2>
 8013de2:	f04f 0800 	mov.w	r8, #0
 8013de6:	6923      	ldr	r3, [r4, #16]
 8013de8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013dec:	6918      	ldr	r0, [r3, #16]
 8013dee:	f000 ff73 	bl	8014cd8 <__hi0bits>
 8013df2:	f1c0 0020 	rsb	r0, r0, #32
 8013df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013df8:	4418      	add	r0, r3
 8013dfa:	f010 001f 	ands.w	r0, r0, #31
 8013dfe:	f000 8092 	beq.w	8013f26 <_dtoa_r+0x926>
 8013e02:	f1c0 0320 	rsb	r3, r0, #32
 8013e06:	2b04      	cmp	r3, #4
 8013e08:	f340 808a 	ble.w	8013f20 <_dtoa_r+0x920>
 8013e0c:	f1c0 001c 	rsb	r0, r0, #28
 8013e10:	9b06      	ldr	r3, [sp, #24]
 8013e12:	4407      	add	r7, r0
 8013e14:	4403      	add	r3, r0
 8013e16:	9306      	str	r3, [sp, #24]
 8013e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e1a:	4403      	add	r3, r0
 8013e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8013e1e:	9b06      	ldr	r3, [sp, #24]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	dd05      	ble.n	8013e30 <_dtoa_r+0x830>
 8013e24:	4659      	mov	r1, fp
 8013e26:	461a      	mov	r2, r3
 8013e28:	4628      	mov	r0, r5
 8013e2a:	f001 f8bb 	bl	8014fa4 <__lshift>
 8013e2e:	4683      	mov	fp, r0
 8013e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	dd05      	ble.n	8013e42 <_dtoa_r+0x842>
 8013e36:	4621      	mov	r1, r4
 8013e38:	461a      	mov	r2, r3
 8013e3a:	4628      	mov	r0, r5
 8013e3c:	f001 f8b2 	bl	8014fa4 <__lshift>
 8013e40:	4604      	mov	r4, r0
 8013e42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d070      	beq.n	8013f2a <_dtoa_r+0x92a>
 8013e48:	4621      	mov	r1, r4
 8013e4a:	4658      	mov	r0, fp
 8013e4c:	f001 f91a 	bl	8015084 <__mcmp>
 8013e50:	2800      	cmp	r0, #0
 8013e52:	da6a      	bge.n	8013f2a <_dtoa_r+0x92a>
 8013e54:	2300      	movs	r3, #0
 8013e56:	4659      	mov	r1, fp
 8013e58:	220a      	movs	r2, #10
 8013e5a:	4628      	mov	r0, r5
 8013e5c:	f000 feac 	bl	8014bb8 <__multadd>
 8013e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e62:	4683      	mov	fp, r0
 8013e64:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	f000 8194 	beq.w	8014196 <_dtoa_r+0xb96>
 8013e6e:	4631      	mov	r1, r6
 8013e70:	2300      	movs	r3, #0
 8013e72:	220a      	movs	r2, #10
 8013e74:	4628      	mov	r0, r5
 8013e76:	f000 fe9f 	bl	8014bb8 <__multadd>
 8013e7a:	f1b9 0f00 	cmp.w	r9, #0
 8013e7e:	4606      	mov	r6, r0
 8013e80:	f300 8093 	bgt.w	8013faa <_dtoa_r+0x9aa>
 8013e84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013e86:	2b02      	cmp	r3, #2
 8013e88:	dc57      	bgt.n	8013f3a <_dtoa_r+0x93a>
 8013e8a:	e08e      	b.n	8013faa <_dtoa_r+0x9aa>
 8013e8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013e8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013e92:	e757      	b.n	8013d44 <_dtoa_r+0x744>
 8013e94:	9b08      	ldr	r3, [sp, #32]
 8013e96:	1e5c      	subs	r4, r3, #1
 8013e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e9a:	42a3      	cmp	r3, r4
 8013e9c:	bfb7      	itett	lt
 8013e9e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013ea0:	1b1c      	subge	r4, r3, r4
 8013ea2:	1ae2      	sublt	r2, r4, r3
 8013ea4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013ea6:	bfbe      	ittt	lt
 8013ea8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8013eaa:	189b      	addlt	r3, r3, r2
 8013eac:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013eae:	9b08      	ldr	r3, [sp, #32]
 8013eb0:	bfb8      	it	lt
 8013eb2:	2400      	movlt	r4, #0
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	bfbb      	ittet	lt
 8013eb8:	9b06      	ldrlt	r3, [sp, #24]
 8013eba:	9a08      	ldrlt	r2, [sp, #32]
 8013ebc:	9f06      	ldrge	r7, [sp, #24]
 8013ebe:	1a9f      	sublt	r7, r3, r2
 8013ec0:	bfac      	ite	ge
 8013ec2:	9b08      	ldrge	r3, [sp, #32]
 8013ec4:	2300      	movlt	r3, #0
 8013ec6:	e73f      	b.n	8013d48 <_dtoa_r+0x748>
 8013ec8:	3fe00000 	.word	0x3fe00000
 8013ecc:	40240000 	.word	0x40240000
 8013ed0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013ed2:	9f06      	ldr	r7, [sp, #24]
 8013ed4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013ed6:	e742      	b.n	8013d5e <_dtoa_r+0x75e>
 8013ed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013eda:	e76b      	b.n	8013db4 <_dtoa_r+0x7b4>
 8013edc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013ede:	2b01      	cmp	r3, #1
 8013ee0:	dc19      	bgt.n	8013f16 <_dtoa_r+0x916>
 8013ee2:	9b04      	ldr	r3, [sp, #16]
 8013ee4:	b9bb      	cbnz	r3, 8013f16 <_dtoa_r+0x916>
 8013ee6:	9b05      	ldr	r3, [sp, #20]
 8013ee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013eec:	b99b      	cbnz	r3, 8013f16 <_dtoa_r+0x916>
 8013eee:	9b05      	ldr	r3, [sp, #20]
 8013ef0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013ef4:	0d1b      	lsrs	r3, r3, #20
 8013ef6:	051b      	lsls	r3, r3, #20
 8013ef8:	b183      	cbz	r3, 8013f1c <_dtoa_r+0x91c>
 8013efa:	f04f 0801 	mov.w	r8, #1
 8013efe:	9b06      	ldr	r3, [sp, #24]
 8013f00:	3301      	adds	r3, #1
 8013f02:	9306      	str	r3, [sp, #24]
 8013f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f06:	3301      	adds	r3, #1
 8013f08:	9309      	str	r3, [sp, #36]	; 0x24
 8013f0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	f47f af6a 	bne.w	8013de6 <_dtoa_r+0x7e6>
 8013f12:	2001      	movs	r0, #1
 8013f14:	e76f      	b.n	8013df6 <_dtoa_r+0x7f6>
 8013f16:	f04f 0800 	mov.w	r8, #0
 8013f1a:	e7f6      	b.n	8013f0a <_dtoa_r+0x90a>
 8013f1c:	4698      	mov	r8, r3
 8013f1e:	e7f4      	b.n	8013f0a <_dtoa_r+0x90a>
 8013f20:	f43f af7d 	beq.w	8013e1e <_dtoa_r+0x81e>
 8013f24:	4618      	mov	r0, r3
 8013f26:	301c      	adds	r0, #28
 8013f28:	e772      	b.n	8013e10 <_dtoa_r+0x810>
 8013f2a:	9b08      	ldr	r3, [sp, #32]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	dc36      	bgt.n	8013f9e <_dtoa_r+0x99e>
 8013f30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013f32:	2b02      	cmp	r3, #2
 8013f34:	dd33      	ble.n	8013f9e <_dtoa_r+0x99e>
 8013f36:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013f3a:	f1b9 0f00 	cmp.w	r9, #0
 8013f3e:	d10d      	bne.n	8013f5c <_dtoa_r+0x95c>
 8013f40:	4621      	mov	r1, r4
 8013f42:	464b      	mov	r3, r9
 8013f44:	2205      	movs	r2, #5
 8013f46:	4628      	mov	r0, r5
 8013f48:	f000 fe36 	bl	8014bb8 <__multadd>
 8013f4c:	4601      	mov	r1, r0
 8013f4e:	4604      	mov	r4, r0
 8013f50:	4658      	mov	r0, fp
 8013f52:	f001 f897 	bl	8015084 <__mcmp>
 8013f56:	2800      	cmp	r0, #0
 8013f58:	f73f adb8 	bgt.w	8013acc <_dtoa_r+0x4cc>
 8013f5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013f5e:	9f03      	ldr	r7, [sp, #12]
 8013f60:	ea6f 0a03 	mvn.w	sl, r3
 8013f64:	f04f 0800 	mov.w	r8, #0
 8013f68:	4621      	mov	r1, r4
 8013f6a:	4628      	mov	r0, r5
 8013f6c:	f000 fe02 	bl	8014b74 <_Bfree>
 8013f70:	2e00      	cmp	r6, #0
 8013f72:	f43f aea7 	beq.w	8013cc4 <_dtoa_r+0x6c4>
 8013f76:	f1b8 0f00 	cmp.w	r8, #0
 8013f7a:	d005      	beq.n	8013f88 <_dtoa_r+0x988>
 8013f7c:	45b0      	cmp	r8, r6
 8013f7e:	d003      	beq.n	8013f88 <_dtoa_r+0x988>
 8013f80:	4641      	mov	r1, r8
 8013f82:	4628      	mov	r0, r5
 8013f84:	f000 fdf6 	bl	8014b74 <_Bfree>
 8013f88:	4631      	mov	r1, r6
 8013f8a:	4628      	mov	r0, r5
 8013f8c:	f000 fdf2 	bl	8014b74 <_Bfree>
 8013f90:	e698      	b.n	8013cc4 <_dtoa_r+0x6c4>
 8013f92:	2400      	movs	r4, #0
 8013f94:	4626      	mov	r6, r4
 8013f96:	e7e1      	b.n	8013f5c <_dtoa_r+0x95c>
 8013f98:	46c2      	mov	sl, r8
 8013f9a:	4626      	mov	r6, r4
 8013f9c:	e596      	b.n	8013acc <_dtoa_r+0x4cc>
 8013f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013fa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	f000 80fd 	beq.w	80141a4 <_dtoa_r+0xba4>
 8013faa:	2f00      	cmp	r7, #0
 8013fac:	dd05      	ble.n	8013fba <_dtoa_r+0x9ba>
 8013fae:	4631      	mov	r1, r6
 8013fb0:	463a      	mov	r2, r7
 8013fb2:	4628      	mov	r0, r5
 8013fb4:	f000 fff6 	bl	8014fa4 <__lshift>
 8013fb8:	4606      	mov	r6, r0
 8013fba:	f1b8 0f00 	cmp.w	r8, #0
 8013fbe:	d05c      	beq.n	801407a <_dtoa_r+0xa7a>
 8013fc0:	4628      	mov	r0, r5
 8013fc2:	6871      	ldr	r1, [r6, #4]
 8013fc4:	f000 fd96 	bl	8014af4 <_Balloc>
 8013fc8:	4607      	mov	r7, r0
 8013fca:	b928      	cbnz	r0, 8013fd8 <_dtoa_r+0x9d8>
 8013fcc:	4602      	mov	r2, r0
 8013fce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013fd2:	4b7f      	ldr	r3, [pc, #508]	; (80141d0 <_dtoa_r+0xbd0>)
 8013fd4:	f7ff bb28 	b.w	8013628 <_dtoa_r+0x28>
 8013fd8:	6932      	ldr	r2, [r6, #16]
 8013fda:	f106 010c 	add.w	r1, r6, #12
 8013fde:	3202      	adds	r2, #2
 8013fe0:	0092      	lsls	r2, r2, #2
 8013fe2:	300c      	adds	r0, #12
 8013fe4:	f7fd fd1c 	bl	8011a20 <memcpy>
 8013fe8:	2201      	movs	r2, #1
 8013fea:	4639      	mov	r1, r7
 8013fec:	4628      	mov	r0, r5
 8013fee:	f000 ffd9 	bl	8014fa4 <__lshift>
 8013ff2:	46b0      	mov	r8, r6
 8013ff4:	4606      	mov	r6, r0
 8013ff6:	9b03      	ldr	r3, [sp, #12]
 8013ff8:	3301      	adds	r3, #1
 8013ffa:	9308      	str	r3, [sp, #32]
 8013ffc:	9b03      	ldr	r3, [sp, #12]
 8013ffe:	444b      	add	r3, r9
 8014000:	930a      	str	r3, [sp, #40]	; 0x28
 8014002:	9b04      	ldr	r3, [sp, #16]
 8014004:	f003 0301 	and.w	r3, r3, #1
 8014008:	9309      	str	r3, [sp, #36]	; 0x24
 801400a:	9b08      	ldr	r3, [sp, #32]
 801400c:	4621      	mov	r1, r4
 801400e:	3b01      	subs	r3, #1
 8014010:	4658      	mov	r0, fp
 8014012:	9304      	str	r3, [sp, #16]
 8014014:	f7ff fa68 	bl	80134e8 <quorem>
 8014018:	4603      	mov	r3, r0
 801401a:	4641      	mov	r1, r8
 801401c:	3330      	adds	r3, #48	; 0x30
 801401e:	9006      	str	r0, [sp, #24]
 8014020:	4658      	mov	r0, fp
 8014022:	930b      	str	r3, [sp, #44]	; 0x2c
 8014024:	f001 f82e 	bl	8015084 <__mcmp>
 8014028:	4632      	mov	r2, r6
 801402a:	4681      	mov	r9, r0
 801402c:	4621      	mov	r1, r4
 801402e:	4628      	mov	r0, r5
 8014030:	f001 f844 	bl	80150bc <__mdiff>
 8014034:	68c2      	ldr	r2, [r0, #12]
 8014036:	4607      	mov	r7, r0
 8014038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801403a:	bb02      	cbnz	r2, 801407e <_dtoa_r+0xa7e>
 801403c:	4601      	mov	r1, r0
 801403e:	4658      	mov	r0, fp
 8014040:	f001 f820 	bl	8015084 <__mcmp>
 8014044:	4602      	mov	r2, r0
 8014046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014048:	4639      	mov	r1, r7
 801404a:	4628      	mov	r0, r5
 801404c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8014050:	f000 fd90 	bl	8014b74 <_Bfree>
 8014054:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014058:	9f08      	ldr	r7, [sp, #32]
 801405a:	ea43 0102 	orr.w	r1, r3, r2
 801405e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014060:	430b      	orrs	r3, r1
 8014062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014064:	d10d      	bne.n	8014082 <_dtoa_r+0xa82>
 8014066:	2b39      	cmp	r3, #57	; 0x39
 8014068:	d029      	beq.n	80140be <_dtoa_r+0xabe>
 801406a:	f1b9 0f00 	cmp.w	r9, #0
 801406e:	dd01      	ble.n	8014074 <_dtoa_r+0xa74>
 8014070:	9b06      	ldr	r3, [sp, #24]
 8014072:	3331      	adds	r3, #49	; 0x31
 8014074:	9a04      	ldr	r2, [sp, #16]
 8014076:	7013      	strb	r3, [r2, #0]
 8014078:	e776      	b.n	8013f68 <_dtoa_r+0x968>
 801407a:	4630      	mov	r0, r6
 801407c:	e7b9      	b.n	8013ff2 <_dtoa_r+0x9f2>
 801407e:	2201      	movs	r2, #1
 8014080:	e7e2      	b.n	8014048 <_dtoa_r+0xa48>
 8014082:	f1b9 0f00 	cmp.w	r9, #0
 8014086:	db06      	blt.n	8014096 <_dtoa_r+0xa96>
 8014088:	9922      	ldr	r1, [sp, #136]	; 0x88
 801408a:	ea41 0909 	orr.w	r9, r1, r9
 801408e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014090:	ea59 0101 	orrs.w	r1, r9, r1
 8014094:	d120      	bne.n	80140d8 <_dtoa_r+0xad8>
 8014096:	2a00      	cmp	r2, #0
 8014098:	ddec      	ble.n	8014074 <_dtoa_r+0xa74>
 801409a:	4659      	mov	r1, fp
 801409c:	2201      	movs	r2, #1
 801409e:	4628      	mov	r0, r5
 80140a0:	9308      	str	r3, [sp, #32]
 80140a2:	f000 ff7f 	bl	8014fa4 <__lshift>
 80140a6:	4621      	mov	r1, r4
 80140a8:	4683      	mov	fp, r0
 80140aa:	f000 ffeb 	bl	8015084 <__mcmp>
 80140ae:	2800      	cmp	r0, #0
 80140b0:	9b08      	ldr	r3, [sp, #32]
 80140b2:	dc02      	bgt.n	80140ba <_dtoa_r+0xaba>
 80140b4:	d1de      	bne.n	8014074 <_dtoa_r+0xa74>
 80140b6:	07da      	lsls	r2, r3, #31
 80140b8:	d5dc      	bpl.n	8014074 <_dtoa_r+0xa74>
 80140ba:	2b39      	cmp	r3, #57	; 0x39
 80140bc:	d1d8      	bne.n	8014070 <_dtoa_r+0xa70>
 80140be:	2339      	movs	r3, #57	; 0x39
 80140c0:	9a04      	ldr	r2, [sp, #16]
 80140c2:	7013      	strb	r3, [r2, #0]
 80140c4:	463b      	mov	r3, r7
 80140c6:	461f      	mov	r7, r3
 80140c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80140cc:	3b01      	subs	r3, #1
 80140ce:	2a39      	cmp	r2, #57	; 0x39
 80140d0:	d050      	beq.n	8014174 <_dtoa_r+0xb74>
 80140d2:	3201      	adds	r2, #1
 80140d4:	701a      	strb	r2, [r3, #0]
 80140d6:	e747      	b.n	8013f68 <_dtoa_r+0x968>
 80140d8:	2a00      	cmp	r2, #0
 80140da:	dd03      	ble.n	80140e4 <_dtoa_r+0xae4>
 80140dc:	2b39      	cmp	r3, #57	; 0x39
 80140de:	d0ee      	beq.n	80140be <_dtoa_r+0xabe>
 80140e0:	3301      	adds	r3, #1
 80140e2:	e7c7      	b.n	8014074 <_dtoa_r+0xa74>
 80140e4:	9a08      	ldr	r2, [sp, #32]
 80140e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80140e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80140ec:	428a      	cmp	r2, r1
 80140ee:	d02a      	beq.n	8014146 <_dtoa_r+0xb46>
 80140f0:	4659      	mov	r1, fp
 80140f2:	2300      	movs	r3, #0
 80140f4:	220a      	movs	r2, #10
 80140f6:	4628      	mov	r0, r5
 80140f8:	f000 fd5e 	bl	8014bb8 <__multadd>
 80140fc:	45b0      	cmp	r8, r6
 80140fe:	4683      	mov	fp, r0
 8014100:	f04f 0300 	mov.w	r3, #0
 8014104:	f04f 020a 	mov.w	r2, #10
 8014108:	4641      	mov	r1, r8
 801410a:	4628      	mov	r0, r5
 801410c:	d107      	bne.n	801411e <_dtoa_r+0xb1e>
 801410e:	f000 fd53 	bl	8014bb8 <__multadd>
 8014112:	4680      	mov	r8, r0
 8014114:	4606      	mov	r6, r0
 8014116:	9b08      	ldr	r3, [sp, #32]
 8014118:	3301      	adds	r3, #1
 801411a:	9308      	str	r3, [sp, #32]
 801411c:	e775      	b.n	801400a <_dtoa_r+0xa0a>
 801411e:	f000 fd4b 	bl	8014bb8 <__multadd>
 8014122:	4631      	mov	r1, r6
 8014124:	4680      	mov	r8, r0
 8014126:	2300      	movs	r3, #0
 8014128:	220a      	movs	r2, #10
 801412a:	4628      	mov	r0, r5
 801412c:	f000 fd44 	bl	8014bb8 <__multadd>
 8014130:	4606      	mov	r6, r0
 8014132:	e7f0      	b.n	8014116 <_dtoa_r+0xb16>
 8014134:	f1b9 0f00 	cmp.w	r9, #0
 8014138:	bfcc      	ite	gt
 801413a:	464f      	movgt	r7, r9
 801413c:	2701      	movle	r7, #1
 801413e:	f04f 0800 	mov.w	r8, #0
 8014142:	9a03      	ldr	r2, [sp, #12]
 8014144:	4417      	add	r7, r2
 8014146:	4659      	mov	r1, fp
 8014148:	2201      	movs	r2, #1
 801414a:	4628      	mov	r0, r5
 801414c:	9308      	str	r3, [sp, #32]
 801414e:	f000 ff29 	bl	8014fa4 <__lshift>
 8014152:	4621      	mov	r1, r4
 8014154:	4683      	mov	fp, r0
 8014156:	f000 ff95 	bl	8015084 <__mcmp>
 801415a:	2800      	cmp	r0, #0
 801415c:	dcb2      	bgt.n	80140c4 <_dtoa_r+0xac4>
 801415e:	d102      	bne.n	8014166 <_dtoa_r+0xb66>
 8014160:	9b08      	ldr	r3, [sp, #32]
 8014162:	07db      	lsls	r3, r3, #31
 8014164:	d4ae      	bmi.n	80140c4 <_dtoa_r+0xac4>
 8014166:	463b      	mov	r3, r7
 8014168:	461f      	mov	r7, r3
 801416a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801416e:	2a30      	cmp	r2, #48	; 0x30
 8014170:	d0fa      	beq.n	8014168 <_dtoa_r+0xb68>
 8014172:	e6f9      	b.n	8013f68 <_dtoa_r+0x968>
 8014174:	9a03      	ldr	r2, [sp, #12]
 8014176:	429a      	cmp	r2, r3
 8014178:	d1a5      	bne.n	80140c6 <_dtoa_r+0xac6>
 801417a:	2331      	movs	r3, #49	; 0x31
 801417c:	f10a 0a01 	add.w	sl, sl, #1
 8014180:	e779      	b.n	8014076 <_dtoa_r+0xa76>
 8014182:	4b14      	ldr	r3, [pc, #80]	; (80141d4 <_dtoa_r+0xbd4>)
 8014184:	f7ff baa8 	b.w	80136d8 <_dtoa_r+0xd8>
 8014188:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801418a:	2b00      	cmp	r3, #0
 801418c:	f47f aa81 	bne.w	8013692 <_dtoa_r+0x92>
 8014190:	4b11      	ldr	r3, [pc, #68]	; (80141d8 <_dtoa_r+0xbd8>)
 8014192:	f7ff baa1 	b.w	80136d8 <_dtoa_r+0xd8>
 8014196:	f1b9 0f00 	cmp.w	r9, #0
 801419a:	dc03      	bgt.n	80141a4 <_dtoa_r+0xba4>
 801419c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801419e:	2b02      	cmp	r3, #2
 80141a0:	f73f aecb 	bgt.w	8013f3a <_dtoa_r+0x93a>
 80141a4:	9f03      	ldr	r7, [sp, #12]
 80141a6:	4621      	mov	r1, r4
 80141a8:	4658      	mov	r0, fp
 80141aa:	f7ff f99d 	bl	80134e8 <quorem>
 80141ae:	9a03      	ldr	r2, [sp, #12]
 80141b0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80141b4:	f807 3b01 	strb.w	r3, [r7], #1
 80141b8:	1aba      	subs	r2, r7, r2
 80141ba:	4591      	cmp	r9, r2
 80141bc:	ddba      	ble.n	8014134 <_dtoa_r+0xb34>
 80141be:	4659      	mov	r1, fp
 80141c0:	2300      	movs	r3, #0
 80141c2:	220a      	movs	r2, #10
 80141c4:	4628      	mov	r0, r5
 80141c6:	f000 fcf7 	bl	8014bb8 <__multadd>
 80141ca:	4683      	mov	fp, r0
 80141cc:	e7eb      	b.n	80141a6 <_dtoa_r+0xba6>
 80141ce:	bf00      	nop
 80141d0:	080185d8 	.word	0x080185d8
 80141d4:	080183dc 	.word	0x080183dc
 80141d8:	08018559 	.word	0x08018559

080141dc <std>:
 80141dc:	2300      	movs	r3, #0
 80141de:	b510      	push	{r4, lr}
 80141e0:	4604      	mov	r4, r0
 80141e2:	e9c0 3300 	strd	r3, r3, [r0]
 80141e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80141ea:	6083      	str	r3, [r0, #8]
 80141ec:	8181      	strh	r1, [r0, #12]
 80141ee:	6643      	str	r3, [r0, #100]	; 0x64
 80141f0:	81c2      	strh	r2, [r0, #14]
 80141f2:	6183      	str	r3, [r0, #24]
 80141f4:	4619      	mov	r1, r3
 80141f6:	2208      	movs	r2, #8
 80141f8:	305c      	adds	r0, #92	; 0x5c
 80141fa:	f7fd fc1f 	bl	8011a3c <memset>
 80141fe:	4b05      	ldr	r3, [pc, #20]	; (8014214 <std+0x38>)
 8014200:	6224      	str	r4, [r4, #32]
 8014202:	6263      	str	r3, [r4, #36]	; 0x24
 8014204:	4b04      	ldr	r3, [pc, #16]	; (8014218 <std+0x3c>)
 8014206:	62a3      	str	r3, [r4, #40]	; 0x28
 8014208:	4b04      	ldr	r3, [pc, #16]	; (801421c <std+0x40>)
 801420a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801420c:	4b04      	ldr	r3, [pc, #16]	; (8014220 <std+0x44>)
 801420e:	6323      	str	r3, [r4, #48]	; 0x30
 8014210:	bd10      	pop	{r4, pc}
 8014212:	bf00      	nop
 8014214:	08015bd9 	.word	0x08015bd9
 8014218:	08015bfb 	.word	0x08015bfb
 801421c:	08015c33 	.word	0x08015c33
 8014220:	08015c57 	.word	0x08015c57

08014224 <_cleanup_r>:
 8014224:	4901      	ldr	r1, [pc, #4]	; (801422c <_cleanup_r+0x8>)
 8014226:	f000 b8af 	b.w	8014388 <_fwalk_reent>
 801422a:	bf00      	nop
 801422c:	08015f81 	.word	0x08015f81

08014230 <__sfmoreglue>:
 8014230:	2268      	movs	r2, #104	; 0x68
 8014232:	b570      	push	{r4, r5, r6, lr}
 8014234:	1e4d      	subs	r5, r1, #1
 8014236:	4355      	muls	r5, r2
 8014238:	460e      	mov	r6, r1
 801423a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801423e:	f001 f98d 	bl	801555c <_malloc_r>
 8014242:	4604      	mov	r4, r0
 8014244:	b140      	cbz	r0, 8014258 <__sfmoreglue+0x28>
 8014246:	2100      	movs	r1, #0
 8014248:	e9c0 1600 	strd	r1, r6, [r0]
 801424c:	300c      	adds	r0, #12
 801424e:	60a0      	str	r0, [r4, #8]
 8014250:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014254:	f7fd fbf2 	bl	8011a3c <memset>
 8014258:	4620      	mov	r0, r4
 801425a:	bd70      	pop	{r4, r5, r6, pc}

0801425c <__sfp_lock_acquire>:
 801425c:	4801      	ldr	r0, [pc, #4]	; (8014264 <__sfp_lock_acquire+0x8>)
 801425e:	f000 bc1e 	b.w	8014a9e <__retarget_lock_acquire_recursive>
 8014262:	bf00      	nop
 8014264:	200070bd 	.word	0x200070bd

08014268 <__sfp_lock_release>:
 8014268:	4801      	ldr	r0, [pc, #4]	; (8014270 <__sfp_lock_release+0x8>)
 801426a:	f000 bc19 	b.w	8014aa0 <__retarget_lock_release_recursive>
 801426e:	bf00      	nop
 8014270:	200070bd 	.word	0x200070bd

08014274 <__sinit_lock_acquire>:
 8014274:	4801      	ldr	r0, [pc, #4]	; (801427c <__sinit_lock_acquire+0x8>)
 8014276:	f000 bc12 	b.w	8014a9e <__retarget_lock_acquire_recursive>
 801427a:	bf00      	nop
 801427c:	200070be 	.word	0x200070be

08014280 <__sinit_lock_release>:
 8014280:	4801      	ldr	r0, [pc, #4]	; (8014288 <__sinit_lock_release+0x8>)
 8014282:	f000 bc0d 	b.w	8014aa0 <__retarget_lock_release_recursive>
 8014286:	bf00      	nop
 8014288:	200070be 	.word	0x200070be

0801428c <__sinit>:
 801428c:	b510      	push	{r4, lr}
 801428e:	4604      	mov	r4, r0
 8014290:	f7ff fff0 	bl	8014274 <__sinit_lock_acquire>
 8014294:	69a3      	ldr	r3, [r4, #24]
 8014296:	b11b      	cbz	r3, 80142a0 <__sinit+0x14>
 8014298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801429c:	f7ff bff0 	b.w	8014280 <__sinit_lock_release>
 80142a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80142a4:	6523      	str	r3, [r4, #80]	; 0x50
 80142a6:	4b13      	ldr	r3, [pc, #76]	; (80142f4 <__sinit+0x68>)
 80142a8:	4a13      	ldr	r2, [pc, #76]	; (80142f8 <__sinit+0x6c>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80142ae:	42a3      	cmp	r3, r4
 80142b0:	bf08      	it	eq
 80142b2:	2301      	moveq	r3, #1
 80142b4:	4620      	mov	r0, r4
 80142b6:	bf08      	it	eq
 80142b8:	61a3      	streq	r3, [r4, #24]
 80142ba:	f000 f81f 	bl	80142fc <__sfp>
 80142be:	6060      	str	r0, [r4, #4]
 80142c0:	4620      	mov	r0, r4
 80142c2:	f000 f81b 	bl	80142fc <__sfp>
 80142c6:	60a0      	str	r0, [r4, #8]
 80142c8:	4620      	mov	r0, r4
 80142ca:	f000 f817 	bl	80142fc <__sfp>
 80142ce:	2200      	movs	r2, #0
 80142d0:	2104      	movs	r1, #4
 80142d2:	60e0      	str	r0, [r4, #12]
 80142d4:	6860      	ldr	r0, [r4, #4]
 80142d6:	f7ff ff81 	bl	80141dc <std>
 80142da:	2201      	movs	r2, #1
 80142dc:	2109      	movs	r1, #9
 80142de:	68a0      	ldr	r0, [r4, #8]
 80142e0:	f7ff ff7c 	bl	80141dc <std>
 80142e4:	2202      	movs	r2, #2
 80142e6:	2112      	movs	r1, #18
 80142e8:	68e0      	ldr	r0, [r4, #12]
 80142ea:	f7ff ff77 	bl	80141dc <std>
 80142ee:	2301      	movs	r3, #1
 80142f0:	61a3      	str	r3, [r4, #24]
 80142f2:	e7d1      	b.n	8014298 <__sinit+0xc>
 80142f4:	080183c8 	.word	0x080183c8
 80142f8:	08014225 	.word	0x08014225

080142fc <__sfp>:
 80142fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142fe:	4607      	mov	r7, r0
 8014300:	f7ff ffac 	bl	801425c <__sfp_lock_acquire>
 8014304:	4b1e      	ldr	r3, [pc, #120]	; (8014380 <__sfp+0x84>)
 8014306:	681e      	ldr	r6, [r3, #0]
 8014308:	69b3      	ldr	r3, [r6, #24]
 801430a:	b913      	cbnz	r3, 8014312 <__sfp+0x16>
 801430c:	4630      	mov	r0, r6
 801430e:	f7ff ffbd 	bl	801428c <__sinit>
 8014312:	3648      	adds	r6, #72	; 0x48
 8014314:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014318:	3b01      	subs	r3, #1
 801431a:	d503      	bpl.n	8014324 <__sfp+0x28>
 801431c:	6833      	ldr	r3, [r6, #0]
 801431e:	b30b      	cbz	r3, 8014364 <__sfp+0x68>
 8014320:	6836      	ldr	r6, [r6, #0]
 8014322:	e7f7      	b.n	8014314 <__sfp+0x18>
 8014324:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014328:	b9d5      	cbnz	r5, 8014360 <__sfp+0x64>
 801432a:	4b16      	ldr	r3, [pc, #88]	; (8014384 <__sfp+0x88>)
 801432c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014330:	60e3      	str	r3, [r4, #12]
 8014332:	6665      	str	r5, [r4, #100]	; 0x64
 8014334:	f000 fbb2 	bl	8014a9c <__retarget_lock_init_recursive>
 8014338:	f7ff ff96 	bl	8014268 <__sfp_lock_release>
 801433c:	2208      	movs	r2, #8
 801433e:	4629      	mov	r1, r5
 8014340:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014344:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014348:	6025      	str	r5, [r4, #0]
 801434a:	61a5      	str	r5, [r4, #24]
 801434c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014350:	f7fd fb74 	bl	8011a3c <memset>
 8014354:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014358:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801435c:	4620      	mov	r0, r4
 801435e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014360:	3468      	adds	r4, #104	; 0x68
 8014362:	e7d9      	b.n	8014318 <__sfp+0x1c>
 8014364:	2104      	movs	r1, #4
 8014366:	4638      	mov	r0, r7
 8014368:	f7ff ff62 	bl	8014230 <__sfmoreglue>
 801436c:	4604      	mov	r4, r0
 801436e:	6030      	str	r0, [r6, #0]
 8014370:	2800      	cmp	r0, #0
 8014372:	d1d5      	bne.n	8014320 <__sfp+0x24>
 8014374:	f7ff ff78 	bl	8014268 <__sfp_lock_release>
 8014378:	230c      	movs	r3, #12
 801437a:	603b      	str	r3, [r7, #0]
 801437c:	e7ee      	b.n	801435c <__sfp+0x60>
 801437e:	bf00      	nop
 8014380:	080183c8 	.word	0x080183c8
 8014384:	ffff0001 	.word	0xffff0001

08014388 <_fwalk_reent>:
 8014388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801438c:	4606      	mov	r6, r0
 801438e:	4688      	mov	r8, r1
 8014390:	2700      	movs	r7, #0
 8014392:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014396:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801439a:	f1b9 0901 	subs.w	r9, r9, #1
 801439e:	d505      	bpl.n	80143ac <_fwalk_reent+0x24>
 80143a0:	6824      	ldr	r4, [r4, #0]
 80143a2:	2c00      	cmp	r4, #0
 80143a4:	d1f7      	bne.n	8014396 <_fwalk_reent+0xe>
 80143a6:	4638      	mov	r0, r7
 80143a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143ac:	89ab      	ldrh	r3, [r5, #12]
 80143ae:	2b01      	cmp	r3, #1
 80143b0:	d907      	bls.n	80143c2 <_fwalk_reent+0x3a>
 80143b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80143b6:	3301      	adds	r3, #1
 80143b8:	d003      	beq.n	80143c2 <_fwalk_reent+0x3a>
 80143ba:	4629      	mov	r1, r5
 80143bc:	4630      	mov	r0, r6
 80143be:	47c0      	blx	r8
 80143c0:	4307      	orrs	r7, r0
 80143c2:	3568      	adds	r5, #104	; 0x68
 80143c4:	e7e9      	b.n	801439a <_fwalk_reent+0x12>

080143c6 <rshift>:
 80143c6:	6903      	ldr	r3, [r0, #16]
 80143c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80143cc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80143d0:	f100 0414 	add.w	r4, r0, #20
 80143d4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80143d8:	dd46      	ble.n	8014468 <rshift+0xa2>
 80143da:	f011 011f 	ands.w	r1, r1, #31
 80143de:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80143e2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80143e6:	d10c      	bne.n	8014402 <rshift+0x3c>
 80143e8:	4629      	mov	r1, r5
 80143ea:	f100 0710 	add.w	r7, r0, #16
 80143ee:	42b1      	cmp	r1, r6
 80143f0:	d335      	bcc.n	801445e <rshift+0x98>
 80143f2:	1a9b      	subs	r3, r3, r2
 80143f4:	009b      	lsls	r3, r3, #2
 80143f6:	1eea      	subs	r2, r5, #3
 80143f8:	4296      	cmp	r6, r2
 80143fa:	bf38      	it	cc
 80143fc:	2300      	movcc	r3, #0
 80143fe:	4423      	add	r3, r4
 8014400:	e015      	b.n	801442e <rshift+0x68>
 8014402:	46a1      	mov	r9, r4
 8014404:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014408:	f1c1 0820 	rsb	r8, r1, #32
 801440c:	40cf      	lsrs	r7, r1
 801440e:	f105 0e04 	add.w	lr, r5, #4
 8014412:	4576      	cmp	r6, lr
 8014414:	46f4      	mov	ip, lr
 8014416:	d816      	bhi.n	8014446 <rshift+0x80>
 8014418:	1a9a      	subs	r2, r3, r2
 801441a:	0092      	lsls	r2, r2, #2
 801441c:	3a04      	subs	r2, #4
 801441e:	3501      	adds	r5, #1
 8014420:	42ae      	cmp	r6, r5
 8014422:	bf38      	it	cc
 8014424:	2200      	movcc	r2, #0
 8014426:	18a3      	adds	r3, r4, r2
 8014428:	50a7      	str	r7, [r4, r2]
 801442a:	b107      	cbz	r7, 801442e <rshift+0x68>
 801442c:	3304      	adds	r3, #4
 801442e:	42a3      	cmp	r3, r4
 8014430:	eba3 0204 	sub.w	r2, r3, r4
 8014434:	bf08      	it	eq
 8014436:	2300      	moveq	r3, #0
 8014438:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801443c:	6102      	str	r2, [r0, #16]
 801443e:	bf08      	it	eq
 8014440:	6143      	streq	r3, [r0, #20]
 8014442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014446:	f8dc c000 	ldr.w	ip, [ip]
 801444a:	fa0c fc08 	lsl.w	ip, ip, r8
 801444e:	ea4c 0707 	orr.w	r7, ip, r7
 8014452:	f849 7b04 	str.w	r7, [r9], #4
 8014456:	f85e 7b04 	ldr.w	r7, [lr], #4
 801445a:	40cf      	lsrs	r7, r1
 801445c:	e7d9      	b.n	8014412 <rshift+0x4c>
 801445e:	f851 cb04 	ldr.w	ip, [r1], #4
 8014462:	f847 cf04 	str.w	ip, [r7, #4]!
 8014466:	e7c2      	b.n	80143ee <rshift+0x28>
 8014468:	4623      	mov	r3, r4
 801446a:	e7e0      	b.n	801442e <rshift+0x68>

0801446c <__hexdig_fun>:
 801446c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014470:	2b09      	cmp	r3, #9
 8014472:	d802      	bhi.n	801447a <__hexdig_fun+0xe>
 8014474:	3820      	subs	r0, #32
 8014476:	b2c0      	uxtb	r0, r0
 8014478:	4770      	bx	lr
 801447a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801447e:	2b05      	cmp	r3, #5
 8014480:	d801      	bhi.n	8014486 <__hexdig_fun+0x1a>
 8014482:	3847      	subs	r0, #71	; 0x47
 8014484:	e7f7      	b.n	8014476 <__hexdig_fun+0xa>
 8014486:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801448a:	2b05      	cmp	r3, #5
 801448c:	d801      	bhi.n	8014492 <__hexdig_fun+0x26>
 801448e:	3827      	subs	r0, #39	; 0x27
 8014490:	e7f1      	b.n	8014476 <__hexdig_fun+0xa>
 8014492:	2000      	movs	r0, #0
 8014494:	4770      	bx	lr
	...

08014498 <__gethex>:
 8014498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801449c:	b08b      	sub	sp, #44	; 0x2c
 801449e:	9305      	str	r3, [sp, #20]
 80144a0:	4bb2      	ldr	r3, [pc, #712]	; (801476c <__gethex+0x2d4>)
 80144a2:	9002      	str	r0, [sp, #8]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	468b      	mov	fp, r1
 80144a8:	4618      	mov	r0, r3
 80144aa:	4690      	mov	r8, r2
 80144ac:	9303      	str	r3, [sp, #12]
 80144ae:	f7eb fe95 	bl	80001dc <strlen>
 80144b2:	4682      	mov	sl, r0
 80144b4:	9b03      	ldr	r3, [sp, #12]
 80144b6:	f8db 2000 	ldr.w	r2, [fp]
 80144ba:	4403      	add	r3, r0
 80144bc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80144c0:	9306      	str	r3, [sp, #24]
 80144c2:	1c93      	adds	r3, r2, #2
 80144c4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80144c8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80144cc:	32fe      	adds	r2, #254	; 0xfe
 80144ce:	18d1      	adds	r1, r2, r3
 80144d0:	461f      	mov	r7, r3
 80144d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80144d6:	9101      	str	r1, [sp, #4]
 80144d8:	2830      	cmp	r0, #48	; 0x30
 80144da:	d0f8      	beq.n	80144ce <__gethex+0x36>
 80144dc:	f7ff ffc6 	bl	801446c <__hexdig_fun>
 80144e0:	4604      	mov	r4, r0
 80144e2:	2800      	cmp	r0, #0
 80144e4:	d13a      	bne.n	801455c <__gethex+0xc4>
 80144e6:	4652      	mov	r2, sl
 80144e8:	4638      	mov	r0, r7
 80144ea:	9903      	ldr	r1, [sp, #12]
 80144ec:	f7fe f958 	bl	80127a0 <strncmp>
 80144f0:	4605      	mov	r5, r0
 80144f2:	2800      	cmp	r0, #0
 80144f4:	d166      	bne.n	80145c4 <__gethex+0x12c>
 80144f6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80144fa:	eb07 060a 	add.w	r6, r7, sl
 80144fe:	f7ff ffb5 	bl	801446c <__hexdig_fun>
 8014502:	2800      	cmp	r0, #0
 8014504:	d060      	beq.n	80145c8 <__gethex+0x130>
 8014506:	4633      	mov	r3, r6
 8014508:	7818      	ldrb	r0, [r3, #0]
 801450a:	461f      	mov	r7, r3
 801450c:	2830      	cmp	r0, #48	; 0x30
 801450e:	f103 0301 	add.w	r3, r3, #1
 8014512:	d0f9      	beq.n	8014508 <__gethex+0x70>
 8014514:	f7ff ffaa 	bl	801446c <__hexdig_fun>
 8014518:	2301      	movs	r3, #1
 801451a:	fab0 f480 	clz	r4, r0
 801451e:	4635      	mov	r5, r6
 8014520:	0964      	lsrs	r4, r4, #5
 8014522:	9301      	str	r3, [sp, #4]
 8014524:	463a      	mov	r2, r7
 8014526:	4616      	mov	r6, r2
 8014528:	7830      	ldrb	r0, [r6, #0]
 801452a:	3201      	adds	r2, #1
 801452c:	f7ff ff9e 	bl	801446c <__hexdig_fun>
 8014530:	2800      	cmp	r0, #0
 8014532:	d1f8      	bne.n	8014526 <__gethex+0x8e>
 8014534:	4652      	mov	r2, sl
 8014536:	4630      	mov	r0, r6
 8014538:	9903      	ldr	r1, [sp, #12]
 801453a:	f7fe f931 	bl	80127a0 <strncmp>
 801453e:	b980      	cbnz	r0, 8014562 <__gethex+0xca>
 8014540:	b94d      	cbnz	r5, 8014556 <__gethex+0xbe>
 8014542:	eb06 050a 	add.w	r5, r6, sl
 8014546:	462a      	mov	r2, r5
 8014548:	4616      	mov	r6, r2
 801454a:	7830      	ldrb	r0, [r6, #0]
 801454c:	3201      	adds	r2, #1
 801454e:	f7ff ff8d 	bl	801446c <__hexdig_fun>
 8014552:	2800      	cmp	r0, #0
 8014554:	d1f8      	bne.n	8014548 <__gethex+0xb0>
 8014556:	1bad      	subs	r5, r5, r6
 8014558:	00ad      	lsls	r5, r5, #2
 801455a:	e004      	b.n	8014566 <__gethex+0xce>
 801455c:	2400      	movs	r4, #0
 801455e:	4625      	mov	r5, r4
 8014560:	e7e0      	b.n	8014524 <__gethex+0x8c>
 8014562:	2d00      	cmp	r5, #0
 8014564:	d1f7      	bne.n	8014556 <__gethex+0xbe>
 8014566:	7833      	ldrb	r3, [r6, #0]
 8014568:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801456c:	2b50      	cmp	r3, #80	; 0x50
 801456e:	d139      	bne.n	80145e4 <__gethex+0x14c>
 8014570:	7873      	ldrb	r3, [r6, #1]
 8014572:	2b2b      	cmp	r3, #43	; 0x2b
 8014574:	d02a      	beq.n	80145cc <__gethex+0x134>
 8014576:	2b2d      	cmp	r3, #45	; 0x2d
 8014578:	d02c      	beq.n	80145d4 <__gethex+0x13c>
 801457a:	f04f 0900 	mov.w	r9, #0
 801457e:	1c71      	adds	r1, r6, #1
 8014580:	7808      	ldrb	r0, [r1, #0]
 8014582:	f7ff ff73 	bl	801446c <__hexdig_fun>
 8014586:	1e43      	subs	r3, r0, #1
 8014588:	b2db      	uxtb	r3, r3
 801458a:	2b18      	cmp	r3, #24
 801458c:	d82a      	bhi.n	80145e4 <__gethex+0x14c>
 801458e:	f1a0 0210 	sub.w	r2, r0, #16
 8014592:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014596:	f7ff ff69 	bl	801446c <__hexdig_fun>
 801459a:	1e43      	subs	r3, r0, #1
 801459c:	b2db      	uxtb	r3, r3
 801459e:	2b18      	cmp	r3, #24
 80145a0:	d91b      	bls.n	80145da <__gethex+0x142>
 80145a2:	f1b9 0f00 	cmp.w	r9, #0
 80145a6:	d000      	beq.n	80145aa <__gethex+0x112>
 80145a8:	4252      	negs	r2, r2
 80145aa:	4415      	add	r5, r2
 80145ac:	f8cb 1000 	str.w	r1, [fp]
 80145b0:	b1d4      	cbz	r4, 80145e8 <__gethex+0x150>
 80145b2:	9b01      	ldr	r3, [sp, #4]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	bf14      	ite	ne
 80145b8:	2700      	movne	r7, #0
 80145ba:	2706      	moveq	r7, #6
 80145bc:	4638      	mov	r0, r7
 80145be:	b00b      	add	sp, #44	; 0x2c
 80145c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145c4:	463e      	mov	r6, r7
 80145c6:	4625      	mov	r5, r4
 80145c8:	2401      	movs	r4, #1
 80145ca:	e7cc      	b.n	8014566 <__gethex+0xce>
 80145cc:	f04f 0900 	mov.w	r9, #0
 80145d0:	1cb1      	adds	r1, r6, #2
 80145d2:	e7d5      	b.n	8014580 <__gethex+0xe8>
 80145d4:	f04f 0901 	mov.w	r9, #1
 80145d8:	e7fa      	b.n	80145d0 <__gethex+0x138>
 80145da:	230a      	movs	r3, #10
 80145dc:	fb03 0202 	mla	r2, r3, r2, r0
 80145e0:	3a10      	subs	r2, #16
 80145e2:	e7d6      	b.n	8014592 <__gethex+0xfa>
 80145e4:	4631      	mov	r1, r6
 80145e6:	e7e1      	b.n	80145ac <__gethex+0x114>
 80145e8:	4621      	mov	r1, r4
 80145ea:	1bf3      	subs	r3, r6, r7
 80145ec:	3b01      	subs	r3, #1
 80145ee:	2b07      	cmp	r3, #7
 80145f0:	dc0a      	bgt.n	8014608 <__gethex+0x170>
 80145f2:	9802      	ldr	r0, [sp, #8]
 80145f4:	f000 fa7e 	bl	8014af4 <_Balloc>
 80145f8:	4604      	mov	r4, r0
 80145fa:	b940      	cbnz	r0, 801460e <__gethex+0x176>
 80145fc:	4602      	mov	r2, r0
 80145fe:	21de      	movs	r1, #222	; 0xde
 8014600:	4b5b      	ldr	r3, [pc, #364]	; (8014770 <__gethex+0x2d8>)
 8014602:	485c      	ldr	r0, [pc, #368]	; (8014774 <__gethex+0x2dc>)
 8014604:	f001 fc0c 	bl	8015e20 <__assert_func>
 8014608:	3101      	adds	r1, #1
 801460a:	105b      	asrs	r3, r3, #1
 801460c:	e7ef      	b.n	80145ee <__gethex+0x156>
 801460e:	f04f 0b00 	mov.w	fp, #0
 8014612:	f100 0914 	add.w	r9, r0, #20
 8014616:	f1ca 0301 	rsb	r3, sl, #1
 801461a:	f8cd 9010 	str.w	r9, [sp, #16]
 801461e:	f8cd b004 	str.w	fp, [sp, #4]
 8014622:	9308      	str	r3, [sp, #32]
 8014624:	42b7      	cmp	r7, r6
 8014626:	d33f      	bcc.n	80146a8 <__gethex+0x210>
 8014628:	9f04      	ldr	r7, [sp, #16]
 801462a:	9b01      	ldr	r3, [sp, #4]
 801462c:	f847 3b04 	str.w	r3, [r7], #4
 8014630:	eba7 0709 	sub.w	r7, r7, r9
 8014634:	10bf      	asrs	r7, r7, #2
 8014636:	6127      	str	r7, [r4, #16]
 8014638:	4618      	mov	r0, r3
 801463a:	f000 fb4d 	bl	8014cd8 <__hi0bits>
 801463e:	017f      	lsls	r7, r7, #5
 8014640:	f8d8 6000 	ldr.w	r6, [r8]
 8014644:	1a3f      	subs	r7, r7, r0
 8014646:	42b7      	cmp	r7, r6
 8014648:	dd62      	ble.n	8014710 <__gethex+0x278>
 801464a:	1bbf      	subs	r7, r7, r6
 801464c:	4639      	mov	r1, r7
 801464e:	4620      	mov	r0, r4
 8014650:	f000 fee7 	bl	8015422 <__any_on>
 8014654:	4682      	mov	sl, r0
 8014656:	b1a8      	cbz	r0, 8014684 <__gethex+0x1ec>
 8014658:	f04f 0a01 	mov.w	sl, #1
 801465c:	1e7b      	subs	r3, r7, #1
 801465e:	1159      	asrs	r1, r3, #5
 8014660:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014664:	f003 021f 	and.w	r2, r3, #31
 8014668:	fa0a f202 	lsl.w	r2, sl, r2
 801466c:	420a      	tst	r2, r1
 801466e:	d009      	beq.n	8014684 <__gethex+0x1ec>
 8014670:	4553      	cmp	r3, sl
 8014672:	dd05      	ble.n	8014680 <__gethex+0x1e8>
 8014674:	4620      	mov	r0, r4
 8014676:	1eb9      	subs	r1, r7, #2
 8014678:	f000 fed3 	bl	8015422 <__any_on>
 801467c:	2800      	cmp	r0, #0
 801467e:	d144      	bne.n	801470a <__gethex+0x272>
 8014680:	f04f 0a02 	mov.w	sl, #2
 8014684:	4639      	mov	r1, r7
 8014686:	4620      	mov	r0, r4
 8014688:	f7ff fe9d 	bl	80143c6 <rshift>
 801468c:	443d      	add	r5, r7
 801468e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014692:	42ab      	cmp	r3, r5
 8014694:	da4a      	bge.n	801472c <__gethex+0x294>
 8014696:	4621      	mov	r1, r4
 8014698:	9802      	ldr	r0, [sp, #8]
 801469a:	f000 fa6b 	bl	8014b74 <_Bfree>
 801469e:	2300      	movs	r3, #0
 80146a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80146a2:	27a3      	movs	r7, #163	; 0xa3
 80146a4:	6013      	str	r3, [r2, #0]
 80146a6:	e789      	b.n	80145bc <__gethex+0x124>
 80146a8:	1e73      	subs	r3, r6, #1
 80146aa:	9a06      	ldr	r2, [sp, #24]
 80146ac:	9307      	str	r3, [sp, #28]
 80146ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80146b2:	4293      	cmp	r3, r2
 80146b4:	d019      	beq.n	80146ea <__gethex+0x252>
 80146b6:	f1bb 0f20 	cmp.w	fp, #32
 80146ba:	d107      	bne.n	80146cc <__gethex+0x234>
 80146bc:	9b04      	ldr	r3, [sp, #16]
 80146be:	9a01      	ldr	r2, [sp, #4]
 80146c0:	f843 2b04 	str.w	r2, [r3], #4
 80146c4:	9304      	str	r3, [sp, #16]
 80146c6:	2300      	movs	r3, #0
 80146c8:	469b      	mov	fp, r3
 80146ca:	9301      	str	r3, [sp, #4]
 80146cc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80146d0:	f7ff fecc 	bl	801446c <__hexdig_fun>
 80146d4:	9b01      	ldr	r3, [sp, #4]
 80146d6:	f000 000f 	and.w	r0, r0, #15
 80146da:	fa00 f00b 	lsl.w	r0, r0, fp
 80146de:	4303      	orrs	r3, r0
 80146e0:	9301      	str	r3, [sp, #4]
 80146e2:	f10b 0b04 	add.w	fp, fp, #4
 80146e6:	9b07      	ldr	r3, [sp, #28]
 80146e8:	e00d      	b.n	8014706 <__gethex+0x26e>
 80146ea:	9a08      	ldr	r2, [sp, #32]
 80146ec:	1e73      	subs	r3, r6, #1
 80146ee:	4413      	add	r3, r2
 80146f0:	42bb      	cmp	r3, r7
 80146f2:	d3e0      	bcc.n	80146b6 <__gethex+0x21e>
 80146f4:	4618      	mov	r0, r3
 80146f6:	4652      	mov	r2, sl
 80146f8:	9903      	ldr	r1, [sp, #12]
 80146fa:	9309      	str	r3, [sp, #36]	; 0x24
 80146fc:	f7fe f850 	bl	80127a0 <strncmp>
 8014700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014702:	2800      	cmp	r0, #0
 8014704:	d1d7      	bne.n	80146b6 <__gethex+0x21e>
 8014706:	461e      	mov	r6, r3
 8014708:	e78c      	b.n	8014624 <__gethex+0x18c>
 801470a:	f04f 0a03 	mov.w	sl, #3
 801470e:	e7b9      	b.n	8014684 <__gethex+0x1ec>
 8014710:	da09      	bge.n	8014726 <__gethex+0x28e>
 8014712:	1bf7      	subs	r7, r6, r7
 8014714:	4621      	mov	r1, r4
 8014716:	463a      	mov	r2, r7
 8014718:	9802      	ldr	r0, [sp, #8]
 801471a:	f000 fc43 	bl	8014fa4 <__lshift>
 801471e:	4604      	mov	r4, r0
 8014720:	1bed      	subs	r5, r5, r7
 8014722:	f100 0914 	add.w	r9, r0, #20
 8014726:	f04f 0a00 	mov.w	sl, #0
 801472a:	e7b0      	b.n	801468e <__gethex+0x1f6>
 801472c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014730:	42a8      	cmp	r0, r5
 8014732:	dd72      	ble.n	801481a <__gethex+0x382>
 8014734:	1b45      	subs	r5, r0, r5
 8014736:	42ae      	cmp	r6, r5
 8014738:	dc35      	bgt.n	80147a6 <__gethex+0x30e>
 801473a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801473e:	2b02      	cmp	r3, #2
 8014740:	d029      	beq.n	8014796 <__gethex+0x2fe>
 8014742:	2b03      	cmp	r3, #3
 8014744:	d02b      	beq.n	801479e <__gethex+0x306>
 8014746:	2b01      	cmp	r3, #1
 8014748:	d11c      	bne.n	8014784 <__gethex+0x2ec>
 801474a:	42ae      	cmp	r6, r5
 801474c:	d11a      	bne.n	8014784 <__gethex+0x2ec>
 801474e:	2e01      	cmp	r6, #1
 8014750:	d112      	bne.n	8014778 <__gethex+0x2e0>
 8014752:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014756:	9a05      	ldr	r2, [sp, #20]
 8014758:	2762      	movs	r7, #98	; 0x62
 801475a:	6013      	str	r3, [r2, #0]
 801475c:	2301      	movs	r3, #1
 801475e:	6123      	str	r3, [r4, #16]
 8014760:	f8c9 3000 	str.w	r3, [r9]
 8014764:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014766:	601c      	str	r4, [r3, #0]
 8014768:	e728      	b.n	80145bc <__gethex+0x124>
 801476a:	bf00      	nop
 801476c:	080186b4 	.word	0x080186b4
 8014770:	080185d8 	.word	0x080185d8
 8014774:	0801864c 	.word	0x0801864c
 8014778:	4620      	mov	r0, r4
 801477a:	1e71      	subs	r1, r6, #1
 801477c:	f000 fe51 	bl	8015422 <__any_on>
 8014780:	2800      	cmp	r0, #0
 8014782:	d1e6      	bne.n	8014752 <__gethex+0x2ba>
 8014784:	4621      	mov	r1, r4
 8014786:	9802      	ldr	r0, [sp, #8]
 8014788:	f000 f9f4 	bl	8014b74 <_Bfree>
 801478c:	2300      	movs	r3, #0
 801478e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014790:	2750      	movs	r7, #80	; 0x50
 8014792:	6013      	str	r3, [r2, #0]
 8014794:	e712      	b.n	80145bc <__gethex+0x124>
 8014796:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014798:	2b00      	cmp	r3, #0
 801479a:	d1f3      	bne.n	8014784 <__gethex+0x2ec>
 801479c:	e7d9      	b.n	8014752 <__gethex+0x2ba>
 801479e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d1d6      	bne.n	8014752 <__gethex+0x2ba>
 80147a4:	e7ee      	b.n	8014784 <__gethex+0x2ec>
 80147a6:	1e6f      	subs	r7, r5, #1
 80147a8:	f1ba 0f00 	cmp.w	sl, #0
 80147ac:	d132      	bne.n	8014814 <__gethex+0x37c>
 80147ae:	b127      	cbz	r7, 80147ba <__gethex+0x322>
 80147b0:	4639      	mov	r1, r7
 80147b2:	4620      	mov	r0, r4
 80147b4:	f000 fe35 	bl	8015422 <__any_on>
 80147b8:	4682      	mov	sl, r0
 80147ba:	2101      	movs	r1, #1
 80147bc:	117b      	asrs	r3, r7, #5
 80147be:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80147c2:	f007 071f 	and.w	r7, r7, #31
 80147c6:	fa01 f707 	lsl.w	r7, r1, r7
 80147ca:	421f      	tst	r7, r3
 80147cc:	f04f 0702 	mov.w	r7, #2
 80147d0:	4629      	mov	r1, r5
 80147d2:	4620      	mov	r0, r4
 80147d4:	bf18      	it	ne
 80147d6:	f04a 0a02 	orrne.w	sl, sl, #2
 80147da:	1b76      	subs	r6, r6, r5
 80147dc:	f7ff fdf3 	bl	80143c6 <rshift>
 80147e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80147e4:	f1ba 0f00 	cmp.w	sl, #0
 80147e8:	d048      	beq.n	801487c <__gethex+0x3e4>
 80147ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80147ee:	2b02      	cmp	r3, #2
 80147f0:	d015      	beq.n	801481e <__gethex+0x386>
 80147f2:	2b03      	cmp	r3, #3
 80147f4:	d017      	beq.n	8014826 <__gethex+0x38e>
 80147f6:	2b01      	cmp	r3, #1
 80147f8:	d109      	bne.n	801480e <__gethex+0x376>
 80147fa:	f01a 0f02 	tst.w	sl, #2
 80147fe:	d006      	beq.n	801480e <__gethex+0x376>
 8014800:	f8d9 0000 	ldr.w	r0, [r9]
 8014804:	ea4a 0a00 	orr.w	sl, sl, r0
 8014808:	f01a 0f01 	tst.w	sl, #1
 801480c:	d10e      	bne.n	801482c <__gethex+0x394>
 801480e:	f047 0710 	orr.w	r7, r7, #16
 8014812:	e033      	b.n	801487c <__gethex+0x3e4>
 8014814:	f04f 0a01 	mov.w	sl, #1
 8014818:	e7cf      	b.n	80147ba <__gethex+0x322>
 801481a:	2701      	movs	r7, #1
 801481c:	e7e2      	b.n	80147e4 <__gethex+0x34c>
 801481e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014820:	f1c3 0301 	rsb	r3, r3, #1
 8014824:	9315      	str	r3, [sp, #84]	; 0x54
 8014826:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014828:	2b00      	cmp	r3, #0
 801482a:	d0f0      	beq.n	801480e <__gethex+0x376>
 801482c:	f04f 0c00 	mov.w	ip, #0
 8014830:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014834:	f104 0314 	add.w	r3, r4, #20
 8014838:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801483c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014840:	4618      	mov	r0, r3
 8014842:	f853 2b04 	ldr.w	r2, [r3], #4
 8014846:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801484a:	d01c      	beq.n	8014886 <__gethex+0x3ee>
 801484c:	3201      	adds	r2, #1
 801484e:	6002      	str	r2, [r0, #0]
 8014850:	2f02      	cmp	r7, #2
 8014852:	f104 0314 	add.w	r3, r4, #20
 8014856:	d13d      	bne.n	80148d4 <__gethex+0x43c>
 8014858:	f8d8 2000 	ldr.w	r2, [r8]
 801485c:	3a01      	subs	r2, #1
 801485e:	42b2      	cmp	r2, r6
 8014860:	d10a      	bne.n	8014878 <__gethex+0x3e0>
 8014862:	2201      	movs	r2, #1
 8014864:	1171      	asrs	r1, r6, #5
 8014866:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801486a:	f006 061f 	and.w	r6, r6, #31
 801486e:	fa02 f606 	lsl.w	r6, r2, r6
 8014872:	421e      	tst	r6, r3
 8014874:	bf18      	it	ne
 8014876:	4617      	movne	r7, r2
 8014878:	f047 0720 	orr.w	r7, r7, #32
 801487c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801487e:	601c      	str	r4, [r3, #0]
 8014880:	9b05      	ldr	r3, [sp, #20]
 8014882:	601d      	str	r5, [r3, #0]
 8014884:	e69a      	b.n	80145bc <__gethex+0x124>
 8014886:	4299      	cmp	r1, r3
 8014888:	f843 cc04 	str.w	ip, [r3, #-4]
 801488c:	d8d8      	bhi.n	8014840 <__gethex+0x3a8>
 801488e:	68a3      	ldr	r3, [r4, #8]
 8014890:	459b      	cmp	fp, r3
 8014892:	db17      	blt.n	80148c4 <__gethex+0x42c>
 8014894:	6861      	ldr	r1, [r4, #4]
 8014896:	9802      	ldr	r0, [sp, #8]
 8014898:	3101      	adds	r1, #1
 801489a:	f000 f92b 	bl	8014af4 <_Balloc>
 801489e:	4681      	mov	r9, r0
 80148a0:	b918      	cbnz	r0, 80148aa <__gethex+0x412>
 80148a2:	4602      	mov	r2, r0
 80148a4:	2184      	movs	r1, #132	; 0x84
 80148a6:	4b19      	ldr	r3, [pc, #100]	; (801490c <__gethex+0x474>)
 80148a8:	e6ab      	b.n	8014602 <__gethex+0x16a>
 80148aa:	6922      	ldr	r2, [r4, #16]
 80148ac:	f104 010c 	add.w	r1, r4, #12
 80148b0:	3202      	adds	r2, #2
 80148b2:	0092      	lsls	r2, r2, #2
 80148b4:	300c      	adds	r0, #12
 80148b6:	f7fd f8b3 	bl	8011a20 <memcpy>
 80148ba:	4621      	mov	r1, r4
 80148bc:	9802      	ldr	r0, [sp, #8]
 80148be:	f000 f959 	bl	8014b74 <_Bfree>
 80148c2:	464c      	mov	r4, r9
 80148c4:	6923      	ldr	r3, [r4, #16]
 80148c6:	1c5a      	adds	r2, r3, #1
 80148c8:	6122      	str	r2, [r4, #16]
 80148ca:	2201      	movs	r2, #1
 80148cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80148d0:	615a      	str	r2, [r3, #20]
 80148d2:	e7bd      	b.n	8014850 <__gethex+0x3b8>
 80148d4:	6922      	ldr	r2, [r4, #16]
 80148d6:	455a      	cmp	r2, fp
 80148d8:	dd0b      	ble.n	80148f2 <__gethex+0x45a>
 80148da:	2101      	movs	r1, #1
 80148dc:	4620      	mov	r0, r4
 80148de:	f7ff fd72 	bl	80143c6 <rshift>
 80148e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80148e6:	3501      	adds	r5, #1
 80148e8:	42ab      	cmp	r3, r5
 80148ea:	f6ff aed4 	blt.w	8014696 <__gethex+0x1fe>
 80148ee:	2701      	movs	r7, #1
 80148f0:	e7c2      	b.n	8014878 <__gethex+0x3e0>
 80148f2:	f016 061f 	ands.w	r6, r6, #31
 80148f6:	d0fa      	beq.n	80148ee <__gethex+0x456>
 80148f8:	4453      	add	r3, sl
 80148fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80148fe:	f000 f9eb 	bl	8014cd8 <__hi0bits>
 8014902:	f1c6 0620 	rsb	r6, r6, #32
 8014906:	42b0      	cmp	r0, r6
 8014908:	dbe7      	blt.n	80148da <__gethex+0x442>
 801490a:	e7f0      	b.n	80148ee <__gethex+0x456>
 801490c:	080185d8 	.word	0x080185d8

08014910 <L_shift>:
 8014910:	f1c2 0208 	rsb	r2, r2, #8
 8014914:	0092      	lsls	r2, r2, #2
 8014916:	b570      	push	{r4, r5, r6, lr}
 8014918:	f1c2 0620 	rsb	r6, r2, #32
 801491c:	6843      	ldr	r3, [r0, #4]
 801491e:	6804      	ldr	r4, [r0, #0]
 8014920:	fa03 f506 	lsl.w	r5, r3, r6
 8014924:	432c      	orrs	r4, r5
 8014926:	40d3      	lsrs	r3, r2
 8014928:	6004      	str	r4, [r0, #0]
 801492a:	f840 3f04 	str.w	r3, [r0, #4]!
 801492e:	4288      	cmp	r0, r1
 8014930:	d3f4      	bcc.n	801491c <L_shift+0xc>
 8014932:	bd70      	pop	{r4, r5, r6, pc}

08014934 <__match>:
 8014934:	b530      	push	{r4, r5, lr}
 8014936:	6803      	ldr	r3, [r0, #0]
 8014938:	3301      	adds	r3, #1
 801493a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801493e:	b914      	cbnz	r4, 8014946 <__match+0x12>
 8014940:	6003      	str	r3, [r0, #0]
 8014942:	2001      	movs	r0, #1
 8014944:	bd30      	pop	{r4, r5, pc}
 8014946:	f813 2b01 	ldrb.w	r2, [r3], #1
 801494a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801494e:	2d19      	cmp	r5, #25
 8014950:	bf98      	it	ls
 8014952:	3220      	addls	r2, #32
 8014954:	42a2      	cmp	r2, r4
 8014956:	d0f0      	beq.n	801493a <__match+0x6>
 8014958:	2000      	movs	r0, #0
 801495a:	e7f3      	b.n	8014944 <__match+0x10>

0801495c <__hexnan>:
 801495c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014960:	2500      	movs	r5, #0
 8014962:	680b      	ldr	r3, [r1, #0]
 8014964:	4682      	mov	sl, r0
 8014966:	115e      	asrs	r6, r3, #5
 8014968:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801496c:	f013 031f 	ands.w	r3, r3, #31
 8014970:	bf18      	it	ne
 8014972:	3604      	addne	r6, #4
 8014974:	1f37      	subs	r7, r6, #4
 8014976:	46b9      	mov	r9, r7
 8014978:	463c      	mov	r4, r7
 801497a:	46ab      	mov	fp, r5
 801497c:	b087      	sub	sp, #28
 801497e:	4690      	mov	r8, r2
 8014980:	6802      	ldr	r2, [r0, #0]
 8014982:	9301      	str	r3, [sp, #4]
 8014984:	f846 5c04 	str.w	r5, [r6, #-4]
 8014988:	9502      	str	r5, [sp, #8]
 801498a:	7851      	ldrb	r1, [r2, #1]
 801498c:	1c53      	adds	r3, r2, #1
 801498e:	9303      	str	r3, [sp, #12]
 8014990:	b341      	cbz	r1, 80149e4 <__hexnan+0x88>
 8014992:	4608      	mov	r0, r1
 8014994:	9205      	str	r2, [sp, #20]
 8014996:	9104      	str	r1, [sp, #16]
 8014998:	f7ff fd68 	bl	801446c <__hexdig_fun>
 801499c:	2800      	cmp	r0, #0
 801499e:	d14f      	bne.n	8014a40 <__hexnan+0xe4>
 80149a0:	9904      	ldr	r1, [sp, #16]
 80149a2:	9a05      	ldr	r2, [sp, #20]
 80149a4:	2920      	cmp	r1, #32
 80149a6:	d818      	bhi.n	80149da <__hexnan+0x7e>
 80149a8:	9b02      	ldr	r3, [sp, #8]
 80149aa:	459b      	cmp	fp, r3
 80149ac:	dd13      	ble.n	80149d6 <__hexnan+0x7a>
 80149ae:	454c      	cmp	r4, r9
 80149b0:	d206      	bcs.n	80149c0 <__hexnan+0x64>
 80149b2:	2d07      	cmp	r5, #7
 80149b4:	dc04      	bgt.n	80149c0 <__hexnan+0x64>
 80149b6:	462a      	mov	r2, r5
 80149b8:	4649      	mov	r1, r9
 80149ba:	4620      	mov	r0, r4
 80149bc:	f7ff ffa8 	bl	8014910 <L_shift>
 80149c0:	4544      	cmp	r4, r8
 80149c2:	d950      	bls.n	8014a66 <__hexnan+0x10a>
 80149c4:	2300      	movs	r3, #0
 80149c6:	f1a4 0904 	sub.w	r9, r4, #4
 80149ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80149ce:	461d      	mov	r5, r3
 80149d0:	464c      	mov	r4, r9
 80149d2:	f8cd b008 	str.w	fp, [sp, #8]
 80149d6:	9a03      	ldr	r2, [sp, #12]
 80149d8:	e7d7      	b.n	801498a <__hexnan+0x2e>
 80149da:	2929      	cmp	r1, #41	; 0x29
 80149dc:	d156      	bne.n	8014a8c <__hexnan+0x130>
 80149de:	3202      	adds	r2, #2
 80149e0:	f8ca 2000 	str.w	r2, [sl]
 80149e4:	f1bb 0f00 	cmp.w	fp, #0
 80149e8:	d050      	beq.n	8014a8c <__hexnan+0x130>
 80149ea:	454c      	cmp	r4, r9
 80149ec:	d206      	bcs.n	80149fc <__hexnan+0xa0>
 80149ee:	2d07      	cmp	r5, #7
 80149f0:	dc04      	bgt.n	80149fc <__hexnan+0xa0>
 80149f2:	462a      	mov	r2, r5
 80149f4:	4649      	mov	r1, r9
 80149f6:	4620      	mov	r0, r4
 80149f8:	f7ff ff8a 	bl	8014910 <L_shift>
 80149fc:	4544      	cmp	r4, r8
 80149fe:	d934      	bls.n	8014a6a <__hexnan+0x10e>
 8014a00:	4623      	mov	r3, r4
 8014a02:	f1a8 0204 	sub.w	r2, r8, #4
 8014a06:	f853 1b04 	ldr.w	r1, [r3], #4
 8014a0a:	429f      	cmp	r7, r3
 8014a0c:	f842 1f04 	str.w	r1, [r2, #4]!
 8014a10:	d2f9      	bcs.n	8014a06 <__hexnan+0xaa>
 8014a12:	1b3b      	subs	r3, r7, r4
 8014a14:	f023 0303 	bic.w	r3, r3, #3
 8014a18:	3304      	adds	r3, #4
 8014a1a:	3401      	adds	r4, #1
 8014a1c:	3e03      	subs	r6, #3
 8014a1e:	42b4      	cmp	r4, r6
 8014a20:	bf88      	it	hi
 8014a22:	2304      	movhi	r3, #4
 8014a24:	2200      	movs	r2, #0
 8014a26:	4443      	add	r3, r8
 8014a28:	f843 2b04 	str.w	r2, [r3], #4
 8014a2c:	429f      	cmp	r7, r3
 8014a2e:	d2fb      	bcs.n	8014a28 <__hexnan+0xcc>
 8014a30:	683b      	ldr	r3, [r7, #0]
 8014a32:	b91b      	cbnz	r3, 8014a3c <__hexnan+0xe0>
 8014a34:	4547      	cmp	r7, r8
 8014a36:	d127      	bne.n	8014a88 <__hexnan+0x12c>
 8014a38:	2301      	movs	r3, #1
 8014a3a:	603b      	str	r3, [r7, #0]
 8014a3c:	2005      	movs	r0, #5
 8014a3e:	e026      	b.n	8014a8e <__hexnan+0x132>
 8014a40:	3501      	adds	r5, #1
 8014a42:	2d08      	cmp	r5, #8
 8014a44:	f10b 0b01 	add.w	fp, fp, #1
 8014a48:	dd06      	ble.n	8014a58 <__hexnan+0xfc>
 8014a4a:	4544      	cmp	r4, r8
 8014a4c:	d9c3      	bls.n	80149d6 <__hexnan+0x7a>
 8014a4e:	2300      	movs	r3, #0
 8014a50:	2501      	movs	r5, #1
 8014a52:	f844 3c04 	str.w	r3, [r4, #-4]
 8014a56:	3c04      	subs	r4, #4
 8014a58:	6822      	ldr	r2, [r4, #0]
 8014a5a:	f000 000f 	and.w	r0, r0, #15
 8014a5e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014a62:	6022      	str	r2, [r4, #0]
 8014a64:	e7b7      	b.n	80149d6 <__hexnan+0x7a>
 8014a66:	2508      	movs	r5, #8
 8014a68:	e7b5      	b.n	80149d6 <__hexnan+0x7a>
 8014a6a:	9b01      	ldr	r3, [sp, #4]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d0df      	beq.n	8014a30 <__hexnan+0xd4>
 8014a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a74:	f1c3 0320 	rsb	r3, r3, #32
 8014a78:	fa22 f303 	lsr.w	r3, r2, r3
 8014a7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014a80:	401a      	ands	r2, r3
 8014a82:	f846 2c04 	str.w	r2, [r6, #-4]
 8014a86:	e7d3      	b.n	8014a30 <__hexnan+0xd4>
 8014a88:	3f04      	subs	r7, #4
 8014a8a:	e7d1      	b.n	8014a30 <__hexnan+0xd4>
 8014a8c:	2004      	movs	r0, #4
 8014a8e:	b007      	add	sp, #28
 8014a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014a94 <_localeconv_r>:
 8014a94:	4800      	ldr	r0, [pc, #0]	; (8014a98 <_localeconv_r+0x4>)
 8014a96:	4770      	bx	lr
 8014a98:	20000190 	.word	0x20000190

08014a9c <__retarget_lock_init_recursive>:
 8014a9c:	4770      	bx	lr

08014a9e <__retarget_lock_acquire_recursive>:
 8014a9e:	4770      	bx	lr

08014aa0 <__retarget_lock_release_recursive>:
 8014aa0:	4770      	bx	lr
	...

08014aa4 <malloc>:
 8014aa4:	4b02      	ldr	r3, [pc, #8]	; (8014ab0 <malloc+0xc>)
 8014aa6:	4601      	mov	r1, r0
 8014aa8:	6818      	ldr	r0, [r3, #0]
 8014aaa:	f000 bd57 	b.w	801555c <_malloc_r>
 8014aae:	bf00      	nop
 8014ab0:	20000038 	.word	0x20000038

08014ab4 <__ascii_mbtowc>:
 8014ab4:	b082      	sub	sp, #8
 8014ab6:	b901      	cbnz	r1, 8014aba <__ascii_mbtowc+0x6>
 8014ab8:	a901      	add	r1, sp, #4
 8014aba:	b142      	cbz	r2, 8014ace <__ascii_mbtowc+0x1a>
 8014abc:	b14b      	cbz	r3, 8014ad2 <__ascii_mbtowc+0x1e>
 8014abe:	7813      	ldrb	r3, [r2, #0]
 8014ac0:	600b      	str	r3, [r1, #0]
 8014ac2:	7812      	ldrb	r2, [r2, #0]
 8014ac4:	1e10      	subs	r0, r2, #0
 8014ac6:	bf18      	it	ne
 8014ac8:	2001      	movne	r0, #1
 8014aca:	b002      	add	sp, #8
 8014acc:	4770      	bx	lr
 8014ace:	4610      	mov	r0, r2
 8014ad0:	e7fb      	b.n	8014aca <__ascii_mbtowc+0x16>
 8014ad2:	f06f 0001 	mvn.w	r0, #1
 8014ad6:	e7f8      	b.n	8014aca <__ascii_mbtowc+0x16>

08014ad8 <memchr>:
 8014ad8:	4603      	mov	r3, r0
 8014ada:	b510      	push	{r4, lr}
 8014adc:	b2c9      	uxtb	r1, r1
 8014ade:	4402      	add	r2, r0
 8014ae0:	4293      	cmp	r3, r2
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	d101      	bne.n	8014aea <memchr+0x12>
 8014ae6:	2000      	movs	r0, #0
 8014ae8:	e003      	b.n	8014af2 <memchr+0x1a>
 8014aea:	7804      	ldrb	r4, [r0, #0]
 8014aec:	3301      	adds	r3, #1
 8014aee:	428c      	cmp	r4, r1
 8014af0:	d1f6      	bne.n	8014ae0 <memchr+0x8>
 8014af2:	bd10      	pop	{r4, pc}

08014af4 <_Balloc>:
 8014af4:	b570      	push	{r4, r5, r6, lr}
 8014af6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014af8:	4604      	mov	r4, r0
 8014afa:	460d      	mov	r5, r1
 8014afc:	b976      	cbnz	r6, 8014b1c <_Balloc+0x28>
 8014afe:	2010      	movs	r0, #16
 8014b00:	f7ff ffd0 	bl	8014aa4 <malloc>
 8014b04:	4602      	mov	r2, r0
 8014b06:	6260      	str	r0, [r4, #36]	; 0x24
 8014b08:	b920      	cbnz	r0, 8014b14 <_Balloc+0x20>
 8014b0a:	2166      	movs	r1, #102	; 0x66
 8014b0c:	4b17      	ldr	r3, [pc, #92]	; (8014b6c <_Balloc+0x78>)
 8014b0e:	4818      	ldr	r0, [pc, #96]	; (8014b70 <_Balloc+0x7c>)
 8014b10:	f001 f986 	bl	8015e20 <__assert_func>
 8014b14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014b18:	6006      	str	r6, [r0, #0]
 8014b1a:	60c6      	str	r6, [r0, #12]
 8014b1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014b1e:	68f3      	ldr	r3, [r6, #12]
 8014b20:	b183      	cbz	r3, 8014b44 <_Balloc+0x50>
 8014b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b24:	68db      	ldr	r3, [r3, #12]
 8014b26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014b2a:	b9b8      	cbnz	r0, 8014b5c <_Balloc+0x68>
 8014b2c:	2101      	movs	r1, #1
 8014b2e:	fa01 f605 	lsl.w	r6, r1, r5
 8014b32:	1d72      	adds	r2, r6, #5
 8014b34:	4620      	mov	r0, r4
 8014b36:	0092      	lsls	r2, r2, #2
 8014b38:	f000 fc94 	bl	8015464 <_calloc_r>
 8014b3c:	b160      	cbz	r0, 8014b58 <_Balloc+0x64>
 8014b3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014b42:	e00e      	b.n	8014b62 <_Balloc+0x6e>
 8014b44:	2221      	movs	r2, #33	; 0x21
 8014b46:	2104      	movs	r1, #4
 8014b48:	4620      	mov	r0, r4
 8014b4a:	f000 fc8b 	bl	8015464 <_calloc_r>
 8014b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b50:	60f0      	str	r0, [r6, #12]
 8014b52:	68db      	ldr	r3, [r3, #12]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d1e4      	bne.n	8014b22 <_Balloc+0x2e>
 8014b58:	2000      	movs	r0, #0
 8014b5a:	bd70      	pop	{r4, r5, r6, pc}
 8014b5c:	6802      	ldr	r2, [r0, #0]
 8014b5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014b62:	2300      	movs	r3, #0
 8014b64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014b68:	e7f7      	b.n	8014b5a <_Balloc+0x66>
 8014b6a:	bf00      	nop
 8014b6c:	08018566 	.word	0x08018566
 8014b70:	080186c8 	.word	0x080186c8

08014b74 <_Bfree>:
 8014b74:	b570      	push	{r4, r5, r6, lr}
 8014b76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014b78:	4605      	mov	r5, r0
 8014b7a:	460c      	mov	r4, r1
 8014b7c:	b976      	cbnz	r6, 8014b9c <_Bfree+0x28>
 8014b7e:	2010      	movs	r0, #16
 8014b80:	f7ff ff90 	bl	8014aa4 <malloc>
 8014b84:	4602      	mov	r2, r0
 8014b86:	6268      	str	r0, [r5, #36]	; 0x24
 8014b88:	b920      	cbnz	r0, 8014b94 <_Bfree+0x20>
 8014b8a:	218a      	movs	r1, #138	; 0x8a
 8014b8c:	4b08      	ldr	r3, [pc, #32]	; (8014bb0 <_Bfree+0x3c>)
 8014b8e:	4809      	ldr	r0, [pc, #36]	; (8014bb4 <_Bfree+0x40>)
 8014b90:	f001 f946 	bl	8015e20 <__assert_func>
 8014b94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014b98:	6006      	str	r6, [r0, #0]
 8014b9a:	60c6      	str	r6, [r0, #12]
 8014b9c:	b13c      	cbz	r4, 8014bae <_Bfree+0x3a>
 8014b9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014ba0:	6862      	ldr	r2, [r4, #4]
 8014ba2:	68db      	ldr	r3, [r3, #12]
 8014ba4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014ba8:	6021      	str	r1, [r4, #0]
 8014baa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014bae:	bd70      	pop	{r4, r5, r6, pc}
 8014bb0:	08018566 	.word	0x08018566
 8014bb4:	080186c8 	.word	0x080186c8

08014bb8 <__multadd>:
 8014bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bbc:	4607      	mov	r7, r0
 8014bbe:	460c      	mov	r4, r1
 8014bc0:	461e      	mov	r6, r3
 8014bc2:	2000      	movs	r0, #0
 8014bc4:	690d      	ldr	r5, [r1, #16]
 8014bc6:	f101 0c14 	add.w	ip, r1, #20
 8014bca:	f8dc 3000 	ldr.w	r3, [ip]
 8014bce:	3001      	adds	r0, #1
 8014bd0:	b299      	uxth	r1, r3
 8014bd2:	fb02 6101 	mla	r1, r2, r1, r6
 8014bd6:	0c1e      	lsrs	r6, r3, #16
 8014bd8:	0c0b      	lsrs	r3, r1, #16
 8014bda:	fb02 3306 	mla	r3, r2, r6, r3
 8014bde:	b289      	uxth	r1, r1
 8014be0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014be4:	4285      	cmp	r5, r0
 8014be6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014bea:	f84c 1b04 	str.w	r1, [ip], #4
 8014bee:	dcec      	bgt.n	8014bca <__multadd+0x12>
 8014bf0:	b30e      	cbz	r6, 8014c36 <__multadd+0x7e>
 8014bf2:	68a3      	ldr	r3, [r4, #8]
 8014bf4:	42ab      	cmp	r3, r5
 8014bf6:	dc19      	bgt.n	8014c2c <__multadd+0x74>
 8014bf8:	6861      	ldr	r1, [r4, #4]
 8014bfa:	4638      	mov	r0, r7
 8014bfc:	3101      	adds	r1, #1
 8014bfe:	f7ff ff79 	bl	8014af4 <_Balloc>
 8014c02:	4680      	mov	r8, r0
 8014c04:	b928      	cbnz	r0, 8014c12 <__multadd+0x5a>
 8014c06:	4602      	mov	r2, r0
 8014c08:	21b5      	movs	r1, #181	; 0xb5
 8014c0a:	4b0c      	ldr	r3, [pc, #48]	; (8014c3c <__multadd+0x84>)
 8014c0c:	480c      	ldr	r0, [pc, #48]	; (8014c40 <__multadd+0x88>)
 8014c0e:	f001 f907 	bl	8015e20 <__assert_func>
 8014c12:	6922      	ldr	r2, [r4, #16]
 8014c14:	f104 010c 	add.w	r1, r4, #12
 8014c18:	3202      	adds	r2, #2
 8014c1a:	0092      	lsls	r2, r2, #2
 8014c1c:	300c      	adds	r0, #12
 8014c1e:	f7fc feff 	bl	8011a20 <memcpy>
 8014c22:	4621      	mov	r1, r4
 8014c24:	4638      	mov	r0, r7
 8014c26:	f7ff ffa5 	bl	8014b74 <_Bfree>
 8014c2a:	4644      	mov	r4, r8
 8014c2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014c30:	3501      	adds	r5, #1
 8014c32:	615e      	str	r6, [r3, #20]
 8014c34:	6125      	str	r5, [r4, #16]
 8014c36:	4620      	mov	r0, r4
 8014c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c3c:	080185d8 	.word	0x080185d8
 8014c40:	080186c8 	.word	0x080186c8

08014c44 <__s2b>:
 8014c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c48:	4615      	mov	r5, r2
 8014c4a:	2209      	movs	r2, #9
 8014c4c:	461f      	mov	r7, r3
 8014c4e:	3308      	adds	r3, #8
 8014c50:	460c      	mov	r4, r1
 8014c52:	fb93 f3f2 	sdiv	r3, r3, r2
 8014c56:	4606      	mov	r6, r0
 8014c58:	2201      	movs	r2, #1
 8014c5a:	2100      	movs	r1, #0
 8014c5c:	429a      	cmp	r2, r3
 8014c5e:	db09      	blt.n	8014c74 <__s2b+0x30>
 8014c60:	4630      	mov	r0, r6
 8014c62:	f7ff ff47 	bl	8014af4 <_Balloc>
 8014c66:	b940      	cbnz	r0, 8014c7a <__s2b+0x36>
 8014c68:	4602      	mov	r2, r0
 8014c6a:	21ce      	movs	r1, #206	; 0xce
 8014c6c:	4b18      	ldr	r3, [pc, #96]	; (8014cd0 <__s2b+0x8c>)
 8014c6e:	4819      	ldr	r0, [pc, #100]	; (8014cd4 <__s2b+0x90>)
 8014c70:	f001 f8d6 	bl	8015e20 <__assert_func>
 8014c74:	0052      	lsls	r2, r2, #1
 8014c76:	3101      	adds	r1, #1
 8014c78:	e7f0      	b.n	8014c5c <__s2b+0x18>
 8014c7a:	9b08      	ldr	r3, [sp, #32]
 8014c7c:	2d09      	cmp	r5, #9
 8014c7e:	6143      	str	r3, [r0, #20]
 8014c80:	f04f 0301 	mov.w	r3, #1
 8014c84:	6103      	str	r3, [r0, #16]
 8014c86:	dd16      	ble.n	8014cb6 <__s2b+0x72>
 8014c88:	f104 0909 	add.w	r9, r4, #9
 8014c8c:	46c8      	mov	r8, r9
 8014c8e:	442c      	add	r4, r5
 8014c90:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014c94:	4601      	mov	r1, r0
 8014c96:	220a      	movs	r2, #10
 8014c98:	4630      	mov	r0, r6
 8014c9a:	3b30      	subs	r3, #48	; 0x30
 8014c9c:	f7ff ff8c 	bl	8014bb8 <__multadd>
 8014ca0:	45a0      	cmp	r8, r4
 8014ca2:	d1f5      	bne.n	8014c90 <__s2b+0x4c>
 8014ca4:	f1a5 0408 	sub.w	r4, r5, #8
 8014ca8:	444c      	add	r4, r9
 8014caa:	1b2d      	subs	r5, r5, r4
 8014cac:	1963      	adds	r3, r4, r5
 8014cae:	42bb      	cmp	r3, r7
 8014cb0:	db04      	blt.n	8014cbc <__s2b+0x78>
 8014cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cb6:	2509      	movs	r5, #9
 8014cb8:	340a      	adds	r4, #10
 8014cba:	e7f6      	b.n	8014caa <__s2b+0x66>
 8014cbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014cc0:	4601      	mov	r1, r0
 8014cc2:	220a      	movs	r2, #10
 8014cc4:	4630      	mov	r0, r6
 8014cc6:	3b30      	subs	r3, #48	; 0x30
 8014cc8:	f7ff ff76 	bl	8014bb8 <__multadd>
 8014ccc:	e7ee      	b.n	8014cac <__s2b+0x68>
 8014cce:	bf00      	nop
 8014cd0:	080185d8 	.word	0x080185d8
 8014cd4:	080186c8 	.word	0x080186c8

08014cd8 <__hi0bits>:
 8014cd8:	0c02      	lsrs	r2, r0, #16
 8014cda:	0412      	lsls	r2, r2, #16
 8014cdc:	4603      	mov	r3, r0
 8014cde:	b9ca      	cbnz	r2, 8014d14 <__hi0bits+0x3c>
 8014ce0:	0403      	lsls	r3, r0, #16
 8014ce2:	2010      	movs	r0, #16
 8014ce4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014ce8:	bf04      	itt	eq
 8014cea:	021b      	lsleq	r3, r3, #8
 8014cec:	3008      	addeq	r0, #8
 8014cee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014cf2:	bf04      	itt	eq
 8014cf4:	011b      	lsleq	r3, r3, #4
 8014cf6:	3004      	addeq	r0, #4
 8014cf8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014cfc:	bf04      	itt	eq
 8014cfe:	009b      	lsleq	r3, r3, #2
 8014d00:	3002      	addeq	r0, #2
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	db05      	blt.n	8014d12 <__hi0bits+0x3a>
 8014d06:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8014d0a:	f100 0001 	add.w	r0, r0, #1
 8014d0e:	bf08      	it	eq
 8014d10:	2020      	moveq	r0, #32
 8014d12:	4770      	bx	lr
 8014d14:	2000      	movs	r0, #0
 8014d16:	e7e5      	b.n	8014ce4 <__hi0bits+0xc>

08014d18 <__lo0bits>:
 8014d18:	6803      	ldr	r3, [r0, #0]
 8014d1a:	4602      	mov	r2, r0
 8014d1c:	f013 0007 	ands.w	r0, r3, #7
 8014d20:	d00b      	beq.n	8014d3a <__lo0bits+0x22>
 8014d22:	07d9      	lsls	r1, r3, #31
 8014d24:	d421      	bmi.n	8014d6a <__lo0bits+0x52>
 8014d26:	0798      	lsls	r0, r3, #30
 8014d28:	bf49      	itett	mi
 8014d2a:	085b      	lsrmi	r3, r3, #1
 8014d2c:	089b      	lsrpl	r3, r3, #2
 8014d2e:	2001      	movmi	r0, #1
 8014d30:	6013      	strmi	r3, [r2, #0]
 8014d32:	bf5c      	itt	pl
 8014d34:	2002      	movpl	r0, #2
 8014d36:	6013      	strpl	r3, [r2, #0]
 8014d38:	4770      	bx	lr
 8014d3a:	b299      	uxth	r1, r3
 8014d3c:	b909      	cbnz	r1, 8014d42 <__lo0bits+0x2a>
 8014d3e:	2010      	movs	r0, #16
 8014d40:	0c1b      	lsrs	r3, r3, #16
 8014d42:	b2d9      	uxtb	r1, r3
 8014d44:	b909      	cbnz	r1, 8014d4a <__lo0bits+0x32>
 8014d46:	3008      	adds	r0, #8
 8014d48:	0a1b      	lsrs	r3, r3, #8
 8014d4a:	0719      	lsls	r1, r3, #28
 8014d4c:	bf04      	itt	eq
 8014d4e:	091b      	lsreq	r3, r3, #4
 8014d50:	3004      	addeq	r0, #4
 8014d52:	0799      	lsls	r1, r3, #30
 8014d54:	bf04      	itt	eq
 8014d56:	089b      	lsreq	r3, r3, #2
 8014d58:	3002      	addeq	r0, #2
 8014d5a:	07d9      	lsls	r1, r3, #31
 8014d5c:	d403      	bmi.n	8014d66 <__lo0bits+0x4e>
 8014d5e:	085b      	lsrs	r3, r3, #1
 8014d60:	f100 0001 	add.w	r0, r0, #1
 8014d64:	d003      	beq.n	8014d6e <__lo0bits+0x56>
 8014d66:	6013      	str	r3, [r2, #0]
 8014d68:	4770      	bx	lr
 8014d6a:	2000      	movs	r0, #0
 8014d6c:	4770      	bx	lr
 8014d6e:	2020      	movs	r0, #32
 8014d70:	4770      	bx	lr
	...

08014d74 <__i2b>:
 8014d74:	b510      	push	{r4, lr}
 8014d76:	460c      	mov	r4, r1
 8014d78:	2101      	movs	r1, #1
 8014d7a:	f7ff febb 	bl	8014af4 <_Balloc>
 8014d7e:	4602      	mov	r2, r0
 8014d80:	b928      	cbnz	r0, 8014d8e <__i2b+0x1a>
 8014d82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014d86:	4b04      	ldr	r3, [pc, #16]	; (8014d98 <__i2b+0x24>)
 8014d88:	4804      	ldr	r0, [pc, #16]	; (8014d9c <__i2b+0x28>)
 8014d8a:	f001 f849 	bl	8015e20 <__assert_func>
 8014d8e:	2301      	movs	r3, #1
 8014d90:	6144      	str	r4, [r0, #20]
 8014d92:	6103      	str	r3, [r0, #16]
 8014d94:	bd10      	pop	{r4, pc}
 8014d96:	bf00      	nop
 8014d98:	080185d8 	.word	0x080185d8
 8014d9c:	080186c8 	.word	0x080186c8

08014da0 <__multiply>:
 8014da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014da4:	4691      	mov	r9, r2
 8014da6:	690a      	ldr	r2, [r1, #16]
 8014da8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014dac:	460c      	mov	r4, r1
 8014dae:	429a      	cmp	r2, r3
 8014db0:	bfbe      	ittt	lt
 8014db2:	460b      	movlt	r3, r1
 8014db4:	464c      	movlt	r4, r9
 8014db6:	4699      	movlt	r9, r3
 8014db8:	6927      	ldr	r7, [r4, #16]
 8014dba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014dbe:	68a3      	ldr	r3, [r4, #8]
 8014dc0:	6861      	ldr	r1, [r4, #4]
 8014dc2:	eb07 060a 	add.w	r6, r7, sl
 8014dc6:	42b3      	cmp	r3, r6
 8014dc8:	b085      	sub	sp, #20
 8014dca:	bfb8      	it	lt
 8014dcc:	3101      	addlt	r1, #1
 8014dce:	f7ff fe91 	bl	8014af4 <_Balloc>
 8014dd2:	b930      	cbnz	r0, 8014de2 <__multiply+0x42>
 8014dd4:	4602      	mov	r2, r0
 8014dd6:	f240 115d 	movw	r1, #349	; 0x15d
 8014dda:	4b43      	ldr	r3, [pc, #268]	; (8014ee8 <__multiply+0x148>)
 8014ddc:	4843      	ldr	r0, [pc, #268]	; (8014eec <__multiply+0x14c>)
 8014dde:	f001 f81f 	bl	8015e20 <__assert_func>
 8014de2:	f100 0514 	add.w	r5, r0, #20
 8014de6:	462b      	mov	r3, r5
 8014de8:	2200      	movs	r2, #0
 8014dea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014dee:	4543      	cmp	r3, r8
 8014df0:	d321      	bcc.n	8014e36 <__multiply+0x96>
 8014df2:	f104 0314 	add.w	r3, r4, #20
 8014df6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014dfa:	f109 0314 	add.w	r3, r9, #20
 8014dfe:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014e02:	9202      	str	r2, [sp, #8]
 8014e04:	1b3a      	subs	r2, r7, r4
 8014e06:	3a15      	subs	r2, #21
 8014e08:	f022 0203 	bic.w	r2, r2, #3
 8014e0c:	3204      	adds	r2, #4
 8014e0e:	f104 0115 	add.w	r1, r4, #21
 8014e12:	428f      	cmp	r7, r1
 8014e14:	bf38      	it	cc
 8014e16:	2204      	movcc	r2, #4
 8014e18:	9201      	str	r2, [sp, #4]
 8014e1a:	9a02      	ldr	r2, [sp, #8]
 8014e1c:	9303      	str	r3, [sp, #12]
 8014e1e:	429a      	cmp	r2, r3
 8014e20:	d80c      	bhi.n	8014e3c <__multiply+0x9c>
 8014e22:	2e00      	cmp	r6, #0
 8014e24:	dd03      	ble.n	8014e2e <__multiply+0x8e>
 8014e26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d059      	beq.n	8014ee2 <__multiply+0x142>
 8014e2e:	6106      	str	r6, [r0, #16]
 8014e30:	b005      	add	sp, #20
 8014e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e36:	f843 2b04 	str.w	r2, [r3], #4
 8014e3a:	e7d8      	b.n	8014dee <__multiply+0x4e>
 8014e3c:	f8b3 a000 	ldrh.w	sl, [r3]
 8014e40:	f1ba 0f00 	cmp.w	sl, #0
 8014e44:	d023      	beq.n	8014e8e <__multiply+0xee>
 8014e46:	46a9      	mov	r9, r5
 8014e48:	f04f 0c00 	mov.w	ip, #0
 8014e4c:	f104 0e14 	add.w	lr, r4, #20
 8014e50:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014e54:	f8d9 1000 	ldr.w	r1, [r9]
 8014e58:	fa1f fb82 	uxth.w	fp, r2
 8014e5c:	b289      	uxth	r1, r1
 8014e5e:	fb0a 110b 	mla	r1, sl, fp, r1
 8014e62:	4461      	add	r1, ip
 8014e64:	f8d9 c000 	ldr.w	ip, [r9]
 8014e68:	0c12      	lsrs	r2, r2, #16
 8014e6a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8014e6e:	fb0a c202 	mla	r2, sl, r2, ip
 8014e72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014e76:	b289      	uxth	r1, r1
 8014e78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014e7c:	4577      	cmp	r7, lr
 8014e7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014e82:	f849 1b04 	str.w	r1, [r9], #4
 8014e86:	d8e3      	bhi.n	8014e50 <__multiply+0xb0>
 8014e88:	9a01      	ldr	r2, [sp, #4]
 8014e8a:	f845 c002 	str.w	ip, [r5, r2]
 8014e8e:	9a03      	ldr	r2, [sp, #12]
 8014e90:	3304      	adds	r3, #4
 8014e92:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014e96:	f1b9 0f00 	cmp.w	r9, #0
 8014e9a:	d020      	beq.n	8014ede <__multiply+0x13e>
 8014e9c:	46ae      	mov	lr, r5
 8014e9e:	f04f 0a00 	mov.w	sl, #0
 8014ea2:	6829      	ldr	r1, [r5, #0]
 8014ea4:	f104 0c14 	add.w	ip, r4, #20
 8014ea8:	f8bc b000 	ldrh.w	fp, [ip]
 8014eac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014eb0:	b289      	uxth	r1, r1
 8014eb2:	fb09 220b 	mla	r2, r9, fp, r2
 8014eb6:	4492      	add	sl, r2
 8014eb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014ebc:	f84e 1b04 	str.w	r1, [lr], #4
 8014ec0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014ec4:	f8be 1000 	ldrh.w	r1, [lr]
 8014ec8:	0c12      	lsrs	r2, r2, #16
 8014eca:	fb09 1102 	mla	r1, r9, r2, r1
 8014ece:	4567      	cmp	r7, ip
 8014ed0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8014ed4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014ed8:	d8e6      	bhi.n	8014ea8 <__multiply+0x108>
 8014eda:	9a01      	ldr	r2, [sp, #4]
 8014edc:	50a9      	str	r1, [r5, r2]
 8014ede:	3504      	adds	r5, #4
 8014ee0:	e79b      	b.n	8014e1a <__multiply+0x7a>
 8014ee2:	3e01      	subs	r6, #1
 8014ee4:	e79d      	b.n	8014e22 <__multiply+0x82>
 8014ee6:	bf00      	nop
 8014ee8:	080185d8 	.word	0x080185d8
 8014eec:	080186c8 	.word	0x080186c8

08014ef0 <__pow5mult>:
 8014ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ef4:	4615      	mov	r5, r2
 8014ef6:	f012 0203 	ands.w	r2, r2, #3
 8014efa:	4606      	mov	r6, r0
 8014efc:	460f      	mov	r7, r1
 8014efe:	d007      	beq.n	8014f10 <__pow5mult+0x20>
 8014f00:	4c25      	ldr	r4, [pc, #148]	; (8014f98 <__pow5mult+0xa8>)
 8014f02:	3a01      	subs	r2, #1
 8014f04:	2300      	movs	r3, #0
 8014f06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014f0a:	f7ff fe55 	bl	8014bb8 <__multadd>
 8014f0e:	4607      	mov	r7, r0
 8014f10:	10ad      	asrs	r5, r5, #2
 8014f12:	d03d      	beq.n	8014f90 <__pow5mult+0xa0>
 8014f14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014f16:	b97c      	cbnz	r4, 8014f38 <__pow5mult+0x48>
 8014f18:	2010      	movs	r0, #16
 8014f1a:	f7ff fdc3 	bl	8014aa4 <malloc>
 8014f1e:	4602      	mov	r2, r0
 8014f20:	6270      	str	r0, [r6, #36]	; 0x24
 8014f22:	b928      	cbnz	r0, 8014f30 <__pow5mult+0x40>
 8014f24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014f28:	4b1c      	ldr	r3, [pc, #112]	; (8014f9c <__pow5mult+0xac>)
 8014f2a:	481d      	ldr	r0, [pc, #116]	; (8014fa0 <__pow5mult+0xb0>)
 8014f2c:	f000 ff78 	bl	8015e20 <__assert_func>
 8014f30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014f34:	6004      	str	r4, [r0, #0]
 8014f36:	60c4      	str	r4, [r0, #12]
 8014f38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014f3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014f40:	b94c      	cbnz	r4, 8014f56 <__pow5mult+0x66>
 8014f42:	f240 2171 	movw	r1, #625	; 0x271
 8014f46:	4630      	mov	r0, r6
 8014f48:	f7ff ff14 	bl	8014d74 <__i2b>
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	4604      	mov	r4, r0
 8014f50:	f8c8 0008 	str.w	r0, [r8, #8]
 8014f54:	6003      	str	r3, [r0, #0]
 8014f56:	f04f 0900 	mov.w	r9, #0
 8014f5a:	07eb      	lsls	r3, r5, #31
 8014f5c:	d50a      	bpl.n	8014f74 <__pow5mult+0x84>
 8014f5e:	4639      	mov	r1, r7
 8014f60:	4622      	mov	r2, r4
 8014f62:	4630      	mov	r0, r6
 8014f64:	f7ff ff1c 	bl	8014da0 <__multiply>
 8014f68:	4680      	mov	r8, r0
 8014f6a:	4639      	mov	r1, r7
 8014f6c:	4630      	mov	r0, r6
 8014f6e:	f7ff fe01 	bl	8014b74 <_Bfree>
 8014f72:	4647      	mov	r7, r8
 8014f74:	106d      	asrs	r5, r5, #1
 8014f76:	d00b      	beq.n	8014f90 <__pow5mult+0xa0>
 8014f78:	6820      	ldr	r0, [r4, #0]
 8014f7a:	b938      	cbnz	r0, 8014f8c <__pow5mult+0x9c>
 8014f7c:	4622      	mov	r2, r4
 8014f7e:	4621      	mov	r1, r4
 8014f80:	4630      	mov	r0, r6
 8014f82:	f7ff ff0d 	bl	8014da0 <__multiply>
 8014f86:	6020      	str	r0, [r4, #0]
 8014f88:	f8c0 9000 	str.w	r9, [r0]
 8014f8c:	4604      	mov	r4, r0
 8014f8e:	e7e4      	b.n	8014f5a <__pow5mult+0x6a>
 8014f90:	4638      	mov	r0, r7
 8014f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f96:	bf00      	nop
 8014f98:	08018818 	.word	0x08018818
 8014f9c:	08018566 	.word	0x08018566
 8014fa0:	080186c8 	.word	0x080186c8

08014fa4 <__lshift>:
 8014fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fa8:	460c      	mov	r4, r1
 8014faa:	4607      	mov	r7, r0
 8014fac:	4691      	mov	r9, r2
 8014fae:	6923      	ldr	r3, [r4, #16]
 8014fb0:	6849      	ldr	r1, [r1, #4]
 8014fb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014fb6:	68a3      	ldr	r3, [r4, #8]
 8014fb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014fbc:	f108 0601 	add.w	r6, r8, #1
 8014fc0:	42b3      	cmp	r3, r6
 8014fc2:	db0b      	blt.n	8014fdc <__lshift+0x38>
 8014fc4:	4638      	mov	r0, r7
 8014fc6:	f7ff fd95 	bl	8014af4 <_Balloc>
 8014fca:	4605      	mov	r5, r0
 8014fcc:	b948      	cbnz	r0, 8014fe2 <__lshift+0x3e>
 8014fce:	4602      	mov	r2, r0
 8014fd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014fd4:	4b29      	ldr	r3, [pc, #164]	; (801507c <__lshift+0xd8>)
 8014fd6:	482a      	ldr	r0, [pc, #168]	; (8015080 <__lshift+0xdc>)
 8014fd8:	f000 ff22 	bl	8015e20 <__assert_func>
 8014fdc:	3101      	adds	r1, #1
 8014fde:	005b      	lsls	r3, r3, #1
 8014fe0:	e7ee      	b.n	8014fc0 <__lshift+0x1c>
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	f100 0114 	add.w	r1, r0, #20
 8014fe8:	f100 0210 	add.w	r2, r0, #16
 8014fec:	4618      	mov	r0, r3
 8014fee:	4553      	cmp	r3, sl
 8014ff0:	db37      	blt.n	8015062 <__lshift+0xbe>
 8014ff2:	6920      	ldr	r0, [r4, #16]
 8014ff4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014ff8:	f104 0314 	add.w	r3, r4, #20
 8014ffc:	f019 091f 	ands.w	r9, r9, #31
 8015000:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015004:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015008:	d02f      	beq.n	801506a <__lshift+0xc6>
 801500a:	468a      	mov	sl, r1
 801500c:	f04f 0c00 	mov.w	ip, #0
 8015010:	f1c9 0e20 	rsb	lr, r9, #32
 8015014:	681a      	ldr	r2, [r3, #0]
 8015016:	fa02 f209 	lsl.w	r2, r2, r9
 801501a:	ea42 020c 	orr.w	r2, r2, ip
 801501e:	f84a 2b04 	str.w	r2, [sl], #4
 8015022:	f853 2b04 	ldr.w	r2, [r3], #4
 8015026:	4298      	cmp	r0, r3
 8015028:	fa22 fc0e 	lsr.w	ip, r2, lr
 801502c:	d8f2      	bhi.n	8015014 <__lshift+0x70>
 801502e:	1b03      	subs	r3, r0, r4
 8015030:	3b15      	subs	r3, #21
 8015032:	f023 0303 	bic.w	r3, r3, #3
 8015036:	3304      	adds	r3, #4
 8015038:	f104 0215 	add.w	r2, r4, #21
 801503c:	4290      	cmp	r0, r2
 801503e:	bf38      	it	cc
 8015040:	2304      	movcc	r3, #4
 8015042:	f841 c003 	str.w	ip, [r1, r3]
 8015046:	f1bc 0f00 	cmp.w	ip, #0
 801504a:	d001      	beq.n	8015050 <__lshift+0xac>
 801504c:	f108 0602 	add.w	r6, r8, #2
 8015050:	3e01      	subs	r6, #1
 8015052:	4638      	mov	r0, r7
 8015054:	4621      	mov	r1, r4
 8015056:	612e      	str	r6, [r5, #16]
 8015058:	f7ff fd8c 	bl	8014b74 <_Bfree>
 801505c:	4628      	mov	r0, r5
 801505e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015062:	f842 0f04 	str.w	r0, [r2, #4]!
 8015066:	3301      	adds	r3, #1
 8015068:	e7c1      	b.n	8014fee <__lshift+0x4a>
 801506a:	3904      	subs	r1, #4
 801506c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015070:	4298      	cmp	r0, r3
 8015072:	f841 2f04 	str.w	r2, [r1, #4]!
 8015076:	d8f9      	bhi.n	801506c <__lshift+0xc8>
 8015078:	e7ea      	b.n	8015050 <__lshift+0xac>
 801507a:	bf00      	nop
 801507c:	080185d8 	.word	0x080185d8
 8015080:	080186c8 	.word	0x080186c8

08015084 <__mcmp>:
 8015084:	4603      	mov	r3, r0
 8015086:	690a      	ldr	r2, [r1, #16]
 8015088:	6900      	ldr	r0, [r0, #16]
 801508a:	b530      	push	{r4, r5, lr}
 801508c:	1a80      	subs	r0, r0, r2
 801508e:	d10d      	bne.n	80150ac <__mcmp+0x28>
 8015090:	3314      	adds	r3, #20
 8015092:	3114      	adds	r1, #20
 8015094:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015098:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801509c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80150a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80150a4:	4295      	cmp	r5, r2
 80150a6:	d002      	beq.n	80150ae <__mcmp+0x2a>
 80150a8:	d304      	bcc.n	80150b4 <__mcmp+0x30>
 80150aa:	2001      	movs	r0, #1
 80150ac:	bd30      	pop	{r4, r5, pc}
 80150ae:	42a3      	cmp	r3, r4
 80150b0:	d3f4      	bcc.n	801509c <__mcmp+0x18>
 80150b2:	e7fb      	b.n	80150ac <__mcmp+0x28>
 80150b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80150b8:	e7f8      	b.n	80150ac <__mcmp+0x28>
	...

080150bc <__mdiff>:
 80150bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150c0:	460d      	mov	r5, r1
 80150c2:	4607      	mov	r7, r0
 80150c4:	4611      	mov	r1, r2
 80150c6:	4628      	mov	r0, r5
 80150c8:	4614      	mov	r4, r2
 80150ca:	f7ff ffdb 	bl	8015084 <__mcmp>
 80150ce:	1e06      	subs	r6, r0, #0
 80150d0:	d111      	bne.n	80150f6 <__mdiff+0x3a>
 80150d2:	4631      	mov	r1, r6
 80150d4:	4638      	mov	r0, r7
 80150d6:	f7ff fd0d 	bl	8014af4 <_Balloc>
 80150da:	4602      	mov	r2, r0
 80150dc:	b928      	cbnz	r0, 80150ea <__mdiff+0x2e>
 80150de:	f240 2132 	movw	r1, #562	; 0x232
 80150e2:	4b3a      	ldr	r3, [pc, #232]	; (80151cc <__mdiff+0x110>)
 80150e4:	483a      	ldr	r0, [pc, #232]	; (80151d0 <__mdiff+0x114>)
 80150e6:	f000 fe9b 	bl	8015e20 <__assert_func>
 80150ea:	2301      	movs	r3, #1
 80150ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80150f0:	4610      	mov	r0, r2
 80150f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150f6:	bfa4      	itt	ge
 80150f8:	4623      	movge	r3, r4
 80150fa:	462c      	movge	r4, r5
 80150fc:	4638      	mov	r0, r7
 80150fe:	6861      	ldr	r1, [r4, #4]
 8015100:	bfa6      	itte	ge
 8015102:	461d      	movge	r5, r3
 8015104:	2600      	movge	r6, #0
 8015106:	2601      	movlt	r6, #1
 8015108:	f7ff fcf4 	bl	8014af4 <_Balloc>
 801510c:	4602      	mov	r2, r0
 801510e:	b918      	cbnz	r0, 8015118 <__mdiff+0x5c>
 8015110:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015114:	4b2d      	ldr	r3, [pc, #180]	; (80151cc <__mdiff+0x110>)
 8015116:	e7e5      	b.n	80150e4 <__mdiff+0x28>
 8015118:	f102 0814 	add.w	r8, r2, #20
 801511c:	46c2      	mov	sl, r8
 801511e:	f04f 0c00 	mov.w	ip, #0
 8015122:	6927      	ldr	r7, [r4, #16]
 8015124:	60c6      	str	r6, [r0, #12]
 8015126:	692e      	ldr	r6, [r5, #16]
 8015128:	f104 0014 	add.w	r0, r4, #20
 801512c:	f105 0914 	add.w	r9, r5, #20
 8015130:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8015134:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015138:	3410      	adds	r4, #16
 801513a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801513e:	f859 3b04 	ldr.w	r3, [r9], #4
 8015142:	fa1f f18b 	uxth.w	r1, fp
 8015146:	448c      	add	ip, r1
 8015148:	b299      	uxth	r1, r3
 801514a:	0c1b      	lsrs	r3, r3, #16
 801514c:	ebac 0101 	sub.w	r1, ip, r1
 8015150:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015154:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015158:	b289      	uxth	r1, r1
 801515a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801515e:	454e      	cmp	r6, r9
 8015160:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015164:	f84a 3b04 	str.w	r3, [sl], #4
 8015168:	d8e7      	bhi.n	801513a <__mdiff+0x7e>
 801516a:	1b73      	subs	r3, r6, r5
 801516c:	3b15      	subs	r3, #21
 801516e:	f023 0303 	bic.w	r3, r3, #3
 8015172:	3515      	adds	r5, #21
 8015174:	3304      	adds	r3, #4
 8015176:	42ae      	cmp	r6, r5
 8015178:	bf38      	it	cc
 801517a:	2304      	movcc	r3, #4
 801517c:	4418      	add	r0, r3
 801517e:	4443      	add	r3, r8
 8015180:	461e      	mov	r6, r3
 8015182:	4605      	mov	r5, r0
 8015184:	4575      	cmp	r5, lr
 8015186:	d30e      	bcc.n	80151a6 <__mdiff+0xea>
 8015188:	f10e 0103 	add.w	r1, lr, #3
 801518c:	1a09      	subs	r1, r1, r0
 801518e:	f021 0103 	bic.w	r1, r1, #3
 8015192:	3803      	subs	r0, #3
 8015194:	4586      	cmp	lr, r0
 8015196:	bf38      	it	cc
 8015198:	2100      	movcc	r1, #0
 801519a:	4419      	add	r1, r3
 801519c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80151a0:	b18b      	cbz	r3, 80151c6 <__mdiff+0x10a>
 80151a2:	6117      	str	r7, [r2, #16]
 80151a4:	e7a4      	b.n	80150f0 <__mdiff+0x34>
 80151a6:	f855 8b04 	ldr.w	r8, [r5], #4
 80151aa:	fa1f f188 	uxth.w	r1, r8
 80151ae:	4461      	add	r1, ip
 80151b0:	140c      	asrs	r4, r1, #16
 80151b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80151b6:	b289      	uxth	r1, r1
 80151b8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80151bc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80151c0:	f846 1b04 	str.w	r1, [r6], #4
 80151c4:	e7de      	b.n	8015184 <__mdiff+0xc8>
 80151c6:	3f01      	subs	r7, #1
 80151c8:	e7e8      	b.n	801519c <__mdiff+0xe0>
 80151ca:	bf00      	nop
 80151cc:	080185d8 	.word	0x080185d8
 80151d0:	080186c8 	.word	0x080186c8

080151d4 <__ulp>:
 80151d4:	4b11      	ldr	r3, [pc, #68]	; (801521c <__ulp+0x48>)
 80151d6:	400b      	ands	r3, r1
 80151d8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80151dc:	2b00      	cmp	r3, #0
 80151de:	dd02      	ble.n	80151e6 <__ulp+0x12>
 80151e0:	2000      	movs	r0, #0
 80151e2:	4619      	mov	r1, r3
 80151e4:	4770      	bx	lr
 80151e6:	425b      	negs	r3, r3
 80151e8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80151ec:	f04f 0000 	mov.w	r0, #0
 80151f0:	f04f 0100 	mov.w	r1, #0
 80151f4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80151f8:	da04      	bge.n	8015204 <__ulp+0x30>
 80151fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80151fe:	fa43 f102 	asr.w	r1, r3, r2
 8015202:	4770      	bx	lr
 8015204:	f1a2 0314 	sub.w	r3, r2, #20
 8015208:	2b1e      	cmp	r3, #30
 801520a:	bfd6      	itet	le
 801520c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8015210:	2301      	movgt	r3, #1
 8015212:	fa22 f303 	lsrle.w	r3, r2, r3
 8015216:	4618      	mov	r0, r3
 8015218:	4770      	bx	lr
 801521a:	bf00      	nop
 801521c:	7ff00000 	.word	0x7ff00000

08015220 <__b2d>:
 8015220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015224:	6907      	ldr	r7, [r0, #16]
 8015226:	f100 0914 	add.w	r9, r0, #20
 801522a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 801522e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8015232:	f1a7 0804 	sub.w	r8, r7, #4
 8015236:	4630      	mov	r0, r6
 8015238:	f7ff fd4e 	bl	8014cd8 <__hi0bits>
 801523c:	f1c0 0320 	rsb	r3, r0, #32
 8015240:	280a      	cmp	r0, #10
 8015242:	600b      	str	r3, [r1, #0]
 8015244:	491f      	ldr	r1, [pc, #124]	; (80152c4 <__b2d+0xa4>)
 8015246:	dc17      	bgt.n	8015278 <__b2d+0x58>
 8015248:	45c1      	cmp	r9, r8
 801524a:	bf28      	it	cs
 801524c:	2200      	movcs	r2, #0
 801524e:	f1c0 0c0b 	rsb	ip, r0, #11
 8015252:	fa26 f30c 	lsr.w	r3, r6, ip
 8015256:	bf38      	it	cc
 8015258:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801525c:	ea43 0501 	orr.w	r5, r3, r1
 8015260:	f100 0315 	add.w	r3, r0, #21
 8015264:	fa06 f303 	lsl.w	r3, r6, r3
 8015268:	fa22 f20c 	lsr.w	r2, r2, ip
 801526c:	ea43 0402 	orr.w	r4, r3, r2
 8015270:	4620      	mov	r0, r4
 8015272:	4629      	mov	r1, r5
 8015274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015278:	45c1      	cmp	r9, r8
 801527a:	bf2e      	itee	cs
 801527c:	2200      	movcs	r2, #0
 801527e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8015282:	f1a7 0808 	subcc.w	r8, r7, #8
 8015286:	f1b0 030b 	subs.w	r3, r0, #11
 801528a:	d016      	beq.n	80152ba <__b2d+0x9a>
 801528c:	f1c3 0720 	rsb	r7, r3, #32
 8015290:	fa22 f107 	lsr.w	r1, r2, r7
 8015294:	45c8      	cmp	r8, r9
 8015296:	fa06 f603 	lsl.w	r6, r6, r3
 801529a:	ea46 0601 	orr.w	r6, r6, r1
 801529e:	bf94      	ite	ls
 80152a0:	2100      	movls	r1, #0
 80152a2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80152a6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80152aa:	fa02 f003 	lsl.w	r0, r2, r3
 80152ae:	40f9      	lsrs	r1, r7
 80152b0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80152b4:	ea40 0401 	orr.w	r4, r0, r1
 80152b8:	e7da      	b.n	8015270 <__b2d+0x50>
 80152ba:	4614      	mov	r4, r2
 80152bc:	ea46 0501 	orr.w	r5, r6, r1
 80152c0:	e7d6      	b.n	8015270 <__b2d+0x50>
 80152c2:	bf00      	nop
 80152c4:	3ff00000 	.word	0x3ff00000

080152c8 <__d2b>:
 80152c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80152cc:	2101      	movs	r1, #1
 80152ce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80152d2:	4690      	mov	r8, r2
 80152d4:	461d      	mov	r5, r3
 80152d6:	f7ff fc0d 	bl	8014af4 <_Balloc>
 80152da:	4604      	mov	r4, r0
 80152dc:	b930      	cbnz	r0, 80152ec <__d2b+0x24>
 80152de:	4602      	mov	r2, r0
 80152e0:	f240 310a 	movw	r1, #778	; 0x30a
 80152e4:	4b24      	ldr	r3, [pc, #144]	; (8015378 <__d2b+0xb0>)
 80152e6:	4825      	ldr	r0, [pc, #148]	; (801537c <__d2b+0xb4>)
 80152e8:	f000 fd9a 	bl	8015e20 <__assert_func>
 80152ec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80152f0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80152f4:	bb2d      	cbnz	r5, 8015342 <__d2b+0x7a>
 80152f6:	9301      	str	r3, [sp, #4]
 80152f8:	f1b8 0300 	subs.w	r3, r8, #0
 80152fc:	d026      	beq.n	801534c <__d2b+0x84>
 80152fe:	4668      	mov	r0, sp
 8015300:	9300      	str	r3, [sp, #0]
 8015302:	f7ff fd09 	bl	8014d18 <__lo0bits>
 8015306:	9900      	ldr	r1, [sp, #0]
 8015308:	b1f0      	cbz	r0, 8015348 <__d2b+0x80>
 801530a:	9a01      	ldr	r2, [sp, #4]
 801530c:	f1c0 0320 	rsb	r3, r0, #32
 8015310:	fa02 f303 	lsl.w	r3, r2, r3
 8015314:	430b      	orrs	r3, r1
 8015316:	40c2      	lsrs	r2, r0
 8015318:	6163      	str	r3, [r4, #20]
 801531a:	9201      	str	r2, [sp, #4]
 801531c:	9b01      	ldr	r3, [sp, #4]
 801531e:	2b00      	cmp	r3, #0
 8015320:	bf14      	ite	ne
 8015322:	2102      	movne	r1, #2
 8015324:	2101      	moveq	r1, #1
 8015326:	61a3      	str	r3, [r4, #24]
 8015328:	6121      	str	r1, [r4, #16]
 801532a:	b1c5      	cbz	r5, 801535e <__d2b+0x96>
 801532c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015330:	4405      	add	r5, r0
 8015332:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015336:	603d      	str	r5, [r7, #0]
 8015338:	6030      	str	r0, [r6, #0]
 801533a:	4620      	mov	r0, r4
 801533c:	b002      	add	sp, #8
 801533e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015346:	e7d6      	b.n	80152f6 <__d2b+0x2e>
 8015348:	6161      	str	r1, [r4, #20]
 801534a:	e7e7      	b.n	801531c <__d2b+0x54>
 801534c:	a801      	add	r0, sp, #4
 801534e:	f7ff fce3 	bl	8014d18 <__lo0bits>
 8015352:	2101      	movs	r1, #1
 8015354:	9b01      	ldr	r3, [sp, #4]
 8015356:	6121      	str	r1, [r4, #16]
 8015358:	6163      	str	r3, [r4, #20]
 801535a:	3020      	adds	r0, #32
 801535c:	e7e5      	b.n	801532a <__d2b+0x62>
 801535e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8015362:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015366:	6038      	str	r0, [r7, #0]
 8015368:	6918      	ldr	r0, [r3, #16]
 801536a:	f7ff fcb5 	bl	8014cd8 <__hi0bits>
 801536e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8015372:	6031      	str	r1, [r6, #0]
 8015374:	e7e1      	b.n	801533a <__d2b+0x72>
 8015376:	bf00      	nop
 8015378:	080185d8 	.word	0x080185d8
 801537c:	080186c8 	.word	0x080186c8

08015380 <__ratio>:
 8015380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015384:	4688      	mov	r8, r1
 8015386:	4669      	mov	r1, sp
 8015388:	4681      	mov	r9, r0
 801538a:	f7ff ff49 	bl	8015220 <__b2d>
 801538e:	460f      	mov	r7, r1
 8015390:	4604      	mov	r4, r0
 8015392:	460d      	mov	r5, r1
 8015394:	4640      	mov	r0, r8
 8015396:	a901      	add	r1, sp, #4
 8015398:	f7ff ff42 	bl	8015220 <__b2d>
 801539c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80153a0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80153a4:	468b      	mov	fp, r1
 80153a6:	eba3 0c02 	sub.w	ip, r3, r2
 80153aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80153ae:	1a9b      	subs	r3, r3, r2
 80153b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	bfd5      	itete	le
 80153b8:	460a      	movle	r2, r1
 80153ba:	462a      	movgt	r2, r5
 80153bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80153c0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80153c4:	bfd8      	it	le
 80153c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80153ca:	465b      	mov	r3, fp
 80153cc:	4602      	mov	r2, r0
 80153ce:	4639      	mov	r1, r7
 80153d0:	4620      	mov	r0, r4
 80153d2:	f7eb f9f1 	bl	80007b8 <__aeabi_ddiv>
 80153d6:	b003      	add	sp, #12
 80153d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080153dc <__copybits>:
 80153dc:	3901      	subs	r1, #1
 80153de:	b570      	push	{r4, r5, r6, lr}
 80153e0:	1149      	asrs	r1, r1, #5
 80153e2:	6914      	ldr	r4, [r2, #16]
 80153e4:	3101      	adds	r1, #1
 80153e6:	f102 0314 	add.w	r3, r2, #20
 80153ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80153ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80153f2:	1f05      	subs	r5, r0, #4
 80153f4:	42a3      	cmp	r3, r4
 80153f6:	d30c      	bcc.n	8015412 <__copybits+0x36>
 80153f8:	1aa3      	subs	r3, r4, r2
 80153fa:	3b11      	subs	r3, #17
 80153fc:	f023 0303 	bic.w	r3, r3, #3
 8015400:	3211      	adds	r2, #17
 8015402:	42a2      	cmp	r2, r4
 8015404:	bf88      	it	hi
 8015406:	2300      	movhi	r3, #0
 8015408:	4418      	add	r0, r3
 801540a:	2300      	movs	r3, #0
 801540c:	4288      	cmp	r0, r1
 801540e:	d305      	bcc.n	801541c <__copybits+0x40>
 8015410:	bd70      	pop	{r4, r5, r6, pc}
 8015412:	f853 6b04 	ldr.w	r6, [r3], #4
 8015416:	f845 6f04 	str.w	r6, [r5, #4]!
 801541a:	e7eb      	b.n	80153f4 <__copybits+0x18>
 801541c:	f840 3b04 	str.w	r3, [r0], #4
 8015420:	e7f4      	b.n	801540c <__copybits+0x30>

08015422 <__any_on>:
 8015422:	f100 0214 	add.w	r2, r0, #20
 8015426:	6900      	ldr	r0, [r0, #16]
 8015428:	114b      	asrs	r3, r1, #5
 801542a:	4298      	cmp	r0, r3
 801542c:	b510      	push	{r4, lr}
 801542e:	db11      	blt.n	8015454 <__any_on+0x32>
 8015430:	dd0a      	ble.n	8015448 <__any_on+0x26>
 8015432:	f011 011f 	ands.w	r1, r1, #31
 8015436:	d007      	beq.n	8015448 <__any_on+0x26>
 8015438:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801543c:	fa24 f001 	lsr.w	r0, r4, r1
 8015440:	fa00 f101 	lsl.w	r1, r0, r1
 8015444:	428c      	cmp	r4, r1
 8015446:	d10b      	bne.n	8015460 <__any_on+0x3e>
 8015448:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801544c:	4293      	cmp	r3, r2
 801544e:	d803      	bhi.n	8015458 <__any_on+0x36>
 8015450:	2000      	movs	r0, #0
 8015452:	bd10      	pop	{r4, pc}
 8015454:	4603      	mov	r3, r0
 8015456:	e7f7      	b.n	8015448 <__any_on+0x26>
 8015458:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801545c:	2900      	cmp	r1, #0
 801545e:	d0f5      	beq.n	801544c <__any_on+0x2a>
 8015460:	2001      	movs	r0, #1
 8015462:	e7f6      	b.n	8015452 <__any_on+0x30>

08015464 <_calloc_r>:
 8015464:	b570      	push	{r4, r5, r6, lr}
 8015466:	fba1 5402 	umull	r5, r4, r1, r2
 801546a:	b934      	cbnz	r4, 801547a <_calloc_r+0x16>
 801546c:	4629      	mov	r1, r5
 801546e:	f000 f875 	bl	801555c <_malloc_r>
 8015472:	4606      	mov	r6, r0
 8015474:	b928      	cbnz	r0, 8015482 <_calloc_r+0x1e>
 8015476:	4630      	mov	r0, r6
 8015478:	bd70      	pop	{r4, r5, r6, pc}
 801547a:	220c      	movs	r2, #12
 801547c:	2600      	movs	r6, #0
 801547e:	6002      	str	r2, [r0, #0]
 8015480:	e7f9      	b.n	8015476 <_calloc_r+0x12>
 8015482:	462a      	mov	r2, r5
 8015484:	4621      	mov	r1, r4
 8015486:	f7fc fad9 	bl	8011a3c <memset>
 801548a:	e7f4      	b.n	8015476 <_calloc_r+0x12>

0801548c <_free_r>:
 801548c:	b538      	push	{r3, r4, r5, lr}
 801548e:	4605      	mov	r5, r0
 8015490:	2900      	cmp	r1, #0
 8015492:	d040      	beq.n	8015516 <_free_r+0x8a>
 8015494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015498:	1f0c      	subs	r4, r1, #4
 801549a:	2b00      	cmp	r3, #0
 801549c:	bfb8      	it	lt
 801549e:	18e4      	addlt	r4, r4, r3
 80154a0:	f000 fe4e 	bl	8016140 <__malloc_lock>
 80154a4:	4a1c      	ldr	r2, [pc, #112]	; (8015518 <_free_r+0x8c>)
 80154a6:	6813      	ldr	r3, [r2, #0]
 80154a8:	b933      	cbnz	r3, 80154b8 <_free_r+0x2c>
 80154aa:	6063      	str	r3, [r4, #4]
 80154ac:	6014      	str	r4, [r2, #0]
 80154ae:	4628      	mov	r0, r5
 80154b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80154b4:	f000 be4a 	b.w	801614c <__malloc_unlock>
 80154b8:	42a3      	cmp	r3, r4
 80154ba:	d908      	bls.n	80154ce <_free_r+0x42>
 80154bc:	6820      	ldr	r0, [r4, #0]
 80154be:	1821      	adds	r1, r4, r0
 80154c0:	428b      	cmp	r3, r1
 80154c2:	bf01      	itttt	eq
 80154c4:	6819      	ldreq	r1, [r3, #0]
 80154c6:	685b      	ldreq	r3, [r3, #4]
 80154c8:	1809      	addeq	r1, r1, r0
 80154ca:	6021      	streq	r1, [r4, #0]
 80154cc:	e7ed      	b.n	80154aa <_free_r+0x1e>
 80154ce:	461a      	mov	r2, r3
 80154d0:	685b      	ldr	r3, [r3, #4]
 80154d2:	b10b      	cbz	r3, 80154d8 <_free_r+0x4c>
 80154d4:	42a3      	cmp	r3, r4
 80154d6:	d9fa      	bls.n	80154ce <_free_r+0x42>
 80154d8:	6811      	ldr	r1, [r2, #0]
 80154da:	1850      	adds	r0, r2, r1
 80154dc:	42a0      	cmp	r0, r4
 80154de:	d10b      	bne.n	80154f8 <_free_r+0x6c>
 80154e0:	6820      	ldr	r0, [r4, #0]
 80154e2:	4401      	add	r1, r0
 80154e4:	1850      	adds	r0, r2, r1
 80154e6:	4283      	cmp	r3, r0
 80154e8:	6011      	str	r1, [r2, #0]
 80154ea:	d1e0      	bne.n	80154ae <_free_r+0x22>
 80154ec:	6818      	ldr	r0, [r3, #0]
 80154ee:	685b      	ldr	r3, [r3, #4]
 80154f0:	4401      	add	r1, r0
 80154f2:	6011      	str	r1, [r2, #0]
 80154f4:	6053      	str	r3, [r2, #4]
 80154f6:	e7da      	b.n	80154ae <_free_r+0x22>
 80154f8:	d902      	bls.n	8015500 <_free_r+0x74>
 80154fa:	230c      	movs	r3, #12
 80154fc:	602b      	str	r3, [r5, #0]
 80154fe:	e7d6      	b.n	80154ae <_free_r+0x22>
 8015500:	6820      	ldr	r0, [r4, #0]
 8015502:	1821      	adds	r1, r4, r0
 8015504:	428b      	cmp	r3, r1
 8015506:	bf01      	itttt	eq
 8015508:	6819      	ldreq	r1, [r3, #0]
 801550a:	685b      	ldreq	r3, [r3, #4]
 801550c:	1809      	addeq	r1, r1, r0
 801550e:	6021      	streq	r1, [r4, #0]
 8015510:	6063      	str	r3, [r4, #4]
 8015512:	6054      	str	r4, [r2, #4]
 8015514:	e7cb      	b.n	80154ae <_free_r+0x22>
 8015516:	bd38      	pop	{r3, r4, r5, pc}
 8015518:	200070c0 	.word	0x200070c0

0801551c <sbrk_aligned>:
 801551c:	b570      	push	{r4, r5, r6, lr}
 801551e:	4e0e      	ldr	r6, [pc, #56]	; (8015558 <sbrk_aligned+0x3c>)
 8015520:	460c      	mov	r4, r1
 8015522:	6831      	ldr	r1, [r6, #0]
 8015524:	4605      	mov	r5, r0
 8015526:	b911      	cbnz	r1, 801552e <sbrk_aligned+0x12>
 8015528:	f000 fb46 	bl	8015bb8 <_sbrk_r>
 801552c:	6030      	str	r0, [r6, #0]
 801552e:	4621      	mov	r1, r4
 8015530:	4628      	mov	r0, r5
 8015532:	f000 fb41 	bl	8015bb8 <_sbrk_r>
 8015536:	1c43      	adds	r3, r0, #1
 8015538:	d00a      	beq.n	8015550 <sbrk_aligned+0x34>
 801553a:	1cc4      	adds	r4, r0, #3
 801553c:	f024 0403 	bic.w	r4, r4, #3
 8015540:	42a0      	cmp	r0, r4
 8015542:	d007      	beq.n	8015554 <sbrk_aligned+0x38>
 8015544:	1a21      	subs	r1, r4, r0
 8015546:	4628      	mov	r0, r5
 8015548:	f000 fb36 	bl	8015bb8 <_sbrk_r>
 801554c:	3001      	adds	r0, #1
 801554e:	d101      	bne.n	8015554 <sbrk_aligned+0x38>
 8015550:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8015554:	4620      	mov	r0, r4
 8015556:	bd70      	pop	{r4, r5, r6, pc}
 8015558:	200070c4 	.word	0x200070c4

0801555c <_malloc_r>:
 801555c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015560:	1ccd      	adds	r5, r1, #3
 8015562:	f025 0503 	bic.w	r5, r5, #3
 8015566:	3508      	adds	r5, #8
 8015568:	2d0c      	cmp	r5, #12
 801556a:	bf38      	it	cc
 801556c:	250c      	movcc	r5, #12
 801556e:	2d00      	cmp	r5, #0
 8015570:	4607      	mov	r7, r0
 8015572:	db01      	blt.n	8015578 <_malloc_r+0x1c>
 8015574:	42a9      	cmp	r1, r5
 8015576:	d905      	bls.n	8015584 <_malloc_r+0x28>
 8015578:	230c      	movs	r3, #12
 801557a:	2600      	movs	r6, #0
 801557c:	603b      	str	r3, [r7, #0]
 801557e:	4630      	mov	r0, r6
 8015580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015584:	4e2e      	ldr	r6, [pc, #184]	; (8015640 <_malloc_r+0xe4>)
 8015586:	f000 fddb 	bl	8016140 <__malloc_lock>
 801558a:	6833      	ldr	r3, [r6, #0]
 801558c:	461c      	mov	r4, r3
 801558e:	bb34      	cbnz	r4, 80155de <_malloc_r+0x82>
 8015590:	4629      	mov	r1, r5
 8015592:	4638      	mov	r0, r7
 8015594:	f7ff ffc2 	bl	801551c <sbrk_aligned>
 8015598:	1c43      	adds	r3, r0, #1
 801559a:	4604      	mov	r4, r0
 801559c:	d14d      	bne.n	801563a <_malloc_r+0xde>
 801559e:	6834      	ldr	r4, [r6, #0]
 80155a0:	4626      	mov	r6, r4
 80155a2:	2e00      	cmp	r6, #0
 80155a4:	d140      	bne.n	8015628 <_malloc_r+0xcc>
 80155a6:	6823      	ldr	r3, [r4, #0]
 80155a8:	4631      	mov	r1, r6
 80155aa:	4638      	mov	r0, r7
 80155ac:	eb04 0803 	add.w	r8, r4, r3
 80155b0:	f000 fb02 	bl	8015bb8 <_sbrk_r>
 80155b4:	4580      	cmp	r8, r0
 80155b6:	d13a      	bne.n	801562e <_malloc_r+0xd2>
 80155b8:	6821      	ldr	r1, [r4, #0]
 80155ba:	3503      	adds	r5, #3
 80155bc:	1a6d      	subs	r5, r5, r1
 80155be:	f025 0503 	bic.w	r5, r5, #3
 80155c2:	3508      	adds	r5, #8
 80155c4:	2d0c      	cmp	r5, #12
 80155c6:	bf38      	it	cc
 80155c8:	250c      	movcc	r5, #12
 80155ca:	4638      	mov	r0, r7
 80155cc:	4629      	mov	r1, r5
 80155ce:	f7ff ffa5 	bl	801551c <sbrk_aligned>
 80155d2:	3001      	adds	r0, #1
 80155d4:	d02b      	beq.n	801562e <_malloc_r+0xd2>
 80155d6:	6823      	ldr	r3, [r4, #0]
 80155d8:	442b      	add	r3, r5
 80155da:	6023      	str	r3, [r4, #0]
 80155dc:	e00e      	b.n	80155fc <_malloc_r+0xa0>
 80155de:	6822      	ldr	r2, [r4, #0]
 80155e0:	1b52      	subs	r2, r2, r5
 80155e2:	d41e      	bmi.n	8015622 <_malloc_r+0xc6>
 80155e4:	2a0b      	cmp	r2, #11
 80155e6:	d916      	bls.n	8015616 <_malloc_r+0xba>
 80155e8:	1961      	adds	r1, r4, r5
 80155ea:	42a3      	cmp	r3, r4
 80155ec:	6025      	str	r5, [r4, #0]
 80155ee:	bf18      	it	ne
 80155f0:	6059      	strne	r1, [r3, #4]
 80155f2:	6863      	ldr	r3, [r4, #4]
 80155f4:	bf08      	it	eq
 80155f6:	6031      	streq	r1, [r6, #0]
 80155f8:	5162      	str	r2, [r4, r5]
 80155fa:	604b      	str	r3, [r1, #4]
 80155fc:	4638      	mov	r0, r7
 80155fe:	f104 060b 	add.w	r6, r4, #11
 8015602:	f000 fda3 	bl	801614c <__malloc_unlock>
 8015606:	f026 0607 	bic.w	r6, r6, #7
 801560a:	1d23      	adds	r3, r4, #4
 801560c:	1af2      	subs	r2, r6, r3
 801560e:	d0b6      	beq.n	801557e <_malloc_r+0x22>
 8015610:	1b9b      	subs	r3, r3, r6
 8015612:	50a3      	str	r3, [r4, r2]
 8015614:	e7b3      	b.n	801557e <_malloc_r+0x22>
 8015616:	6862      	ldr	r2, [r4, #4]
 8015618:	42a3      	cmp	r3, r4
 801561a:	bf0c      	ite	eq
 801561c:	6032      	streq	r2, [r6, #0]
 801561e:	605a      	strne	r2, [r3, #4]
 8015620:	e7ec      	b.n	80155fc <_malloc_r+0xa0>
 8015622:	4623      	mov	r3, r4
 8015624:	6864      	ldr	r4, [r4, #4]
 8015626:	e7b2      	b.n	801558e <_malloc_r+0x32>
 8015628:	4634      	mov	r4, r6
 801562a:	6876      	ldr	r6, [r6, #4]
 801562c:	e7b9      	b.n	80155a2 <_malloc_r+0x46>
 801562e:	230c      	movs	r3, #12
 8015630:	4638      	mov	r0, r7
 8015632:	603b      	str	r3, [r7, #0]
 8015634:	f000 fd8a 	bl	801614c <__malloc_unlock>
 8015638:	e7a1      	b.n	801557e <_malloc_r+0x22>
 801563a:	6025      	str	r5, [r4, #0]
 801563c:	e7de      	b.n	80155fc <_malloc_r+0xa0>
 801563e:	bf00      	nop
 8015640:	200070c0 	.word	0x200070c0

08015644 <__ssputs_r>:
 8015644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015648:	688e      	ldr	r6, [r1, #8]
 801564a:	4682      	mov	sl, r0
 801564c:	429e      	cmp	r6, r3
 801564e:	460c      	mov	r4, r1
 8015650:	4690      	mov	r8, r2
 8015652:	461f      	mov	r7, r3
 8015654:	d838      	bhi.n	80156c8 <__ssputs_r+0x84>
 8015656:	898a      	ldrh	r2, [r1, #12]
 8015658:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801565c:	d032      	beq.n	80156c4 <__ssputs_r+0x80>
 801565e:	6825      	ldr	r5, [r4, #0]
 8015660:	6909      	ldr	r1, [r1, #16]
 8015662:	3301      	adds	r3, #1
 8015664:	eba5 0901 	sub.w	r9, r5, r1
 8015668:	6965      	ldr	r5, [r4, #20]
 801566a:	444b      	add	r3, r9
 801566c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015670:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015674:	106d      	asrs	r5, r5, #1
 8015676:	429d      	cmp	r5, r3
 8015678:	bf38      	it	cc
 801567a:	461d      	movcc	r5, r3
 801567c:	0553      	lsls	r3, r2, #21
 801567e:	d531      	bpl.n	80156e4 <__ssputs_r+0xa0>
 8015680:	4629      	mov	r1, r5
 8015682:	f7ff ff6b 	bl	801555c <_malloc_r>
 8015686:	4606      	mov	r6, r0
 8015688:	b950      	cbnz	r0, 80156a0 <__ssputs_r+0x5c>
 801568a:	230c      	movs	r3, #12
 801568c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015690:	f8ca 3000 	str.w	r3, [sl]
 8015694:	89a3      	ldrh	r3, [r4, #12]
 8015696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801569a:	81a3      	strh	r3, [r4, #12]
 801569c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156a0:	464a      	mov	r2, r9
 80156a2:	6921      	ldr	r1, [r4, #16]
 80156a4:	f7fc f9bc 	bl	8011a20 <memcpy>
 80156a8:	89a3      	ldrh	r3, [r4, #12]
 80156aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80156ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80156b2:	81a3      	strh	r3, [r4, #12]
 80156b4:	6126      	str	r6, [r4, #16]
 80156b6:	444e      	add	r6, r9
 80156b8:	6026      	str	r6, [r4, #0]
 80156ba:	463e      	mov	r6, r7
 80156bc:	6165      	str	r5, [r4, #20]
 80156be:	eba5 0509 	sub.w	r5, r5, r9
 80156c2:	60a5      	str	r5, [r4, #8]
 80156c4:	42be      	cmp	r6, r7
 80156c6:	d900      	bls.n	80156ca <__ssputs_r+0x86>
 80156c8:	463e      	mov	r6, r7
 80156ca:	4632      	mov	r2, r6
 80156cc:	4641      	mov	r1, r8
 80156ce:	6820      	ldr	r0, [r4, #0]
 80156d0:	f000 fd1c 	bl	801610c <memmove>
 80156d4:	68a3      	ldr	r3, [r4, #8]
 80156d6:	2000      	movs	r0, #0
 80156d8:	1b9b      	subs	r3, r3, r6
 80156da:	60a3      	str	r3, [r4, #8]
 80156dc:	6823      	ldr	r3, [r4, #0]
 80156de:	4433      	add	r3, r6
 80156e0:	6023      	str	r3, [r4, #0]
 80156e2:	e7db      	b.n	801569c <__ssputs_r+0x58>
 80156e4:	462a      	mov	r2, r5
 80156e6:	f000 fd37 	bl	8016158 <_realloc_r>
 80156ea:	4606      	mov	r6, r0
 80156ec:	2800      	cmp	r0, #0
 80156ee:	d1e1      	bne.n	80156b4 <__ssputs_r+0x70>
 80156f0:	4650      	mov	r0, sl
 80156f2:	6921      	ldr	r1, [r4, #16]
 80156f4:	f7ff feca 	bl	801548c <_free_r>
 80156f8:	e7c7      	b.n	801568a <__ssputs_r+0x46>
	...

080156fc <_svfiprintf_r>:
 80156fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015700:	4698      	mov	r8, r3
 8015702:	898b      	ldrh	r3, [r1, #12]
 8015704:	4607      	mov	r7, r0
 8015706:	061b      	lsls	r3, r3, #24
 8015708:	460d      	mov	r5, r1
 801570a:	4614      	mov	r4, r2
 801570c:	b09d      	sub	sp, #116	; 0x74
 801570e:	d50e      	bpl.n	801572e <_svfiprintf_r+0x32>
 8015710:	690b      	ldr	r3, [r1, #16]
 8015712:	b963      	cbnz	r3, 801572e <_svfiprintf_r+0x32>
 8015714:	2140      	movs	r1, #64	; 0x40
 8015716:	f7ff ff21 	bl	801555c <_malloc_r>
 801571a:	6028      	str	r0, [r5, #0]
 801571c:	6128      	str	r0, [r5, #16]
 801571e:	b920      	cbnz	r0, 801572a <_svfiprintf_r+0x2e>
 8015720:	230c      	movs	r3, #12
 8015722:	603b      	str	r3, [r7, #0]
 8015724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015728:	e0d1      	b.n	80158ce <_svfiprintf_r+0x1d2>
 801572a:	2340      	movs	r3, #64	; 0x40
 801572c:	616b      	str	r3, [r5, #20]
 801572e:	2300      	movs	r3, #0
 8015730:	9309      	str	r3, [sp, #36]	; 0x24
 8015732:	2320      	movs	r3, #32
 8015734:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015738:	2330      	movs	r3, #48	; 0x30
 801573a:	f04f 0901 	mov.w	r9, #1
 801573e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015742:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80158e8 <_svfiprintf_r+0x1ec>
 8015746:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801574a:	4623      	mov	r3, r4
 801574c:	469a      	mov	sl, r3
 801574e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015752:	b10a      	cbz	r2, 8015758 <_svfiprintf_r+0x5c>
 8015754:	2a25      	cmp	r2, #37	; 0x25
 8015756:	d1f9      	bne.n	801574c <_svfiprintf_r+0x50>
 8015758:	ebba 0b04 	subs.w	fp, sl, r4
 801575c:	d00b      	beq.n	8015776 <_svfiprintf_r+0x7a>
 801575e:	465b      	mov	r3, fp
 8015760:	4622      	mov	r2, r4
 8015762:	4629      	mov	r1, r5
 8015764:	4638      	mov	r0, r7
 8015766:	f7ff ff6d 	bl	8015644 <__ssputs_r>
 801576a:	3001      	adds	r0, #1
 801576c:	f000 80aa 	beq.w	80158c4 <_svfiprintf_r+0x1c8>
 8015770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015772:	445a      	add	r2, fp
 8015774:	9209      	str	r2, [sp, #36]	; 0x24
 8015776:	f89a 3000 	ldrb.w	r3, [sl]
 801577a:	2b00      	cmp	r3, #0
 801577c:	f000 80a2 	beq.w	80158c4 <_svfiprintf_r+0x1c8>
 8015780:	2300      	movs	r3, #0
 8015782:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801578a:	f10a 0a01 	add.w	sl, sl, #1
 801578e:	9304      	str	r3, [sp, #16]
 8015790:	9307      	str	r3, [sp, #28]
 8015792:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015796:	931a      	str	r3, [sp, #104]	; 0x68
 8015798:	4654      	mov	r4, sl
 801579a:	2205      	movs	r2, #5
 801579c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157a0:	4851      	ldr	r0, [pc, #324]	; (80158e8 <_svfiprintf_r+0x1ec>)
 80157a2:	f7ff f999 	bl	8014ad8 <memchr>
 80157a6:	9a04      	ldr	r2, [sp, #16]
 80157a8:	b9d8      	cbnz	r0, 80157e2 <_svfiprintf_r+0xe6>
 80157aa:	06d0      	lsls	r0, r2, #27
 80157ac:	bf44      	itt	mi
 80157ae:	2320      	movmi	r3, #32
 80157b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80157b4:	0711      	lsls	r1, r2, #28
 80157b6:	bf44      	itt	mi
 80157b8:	232b      	movmi	r3, #43	; 0x2b
 80157ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80157be:	f89a 3000 	ldrb.w	r3, [sl]
 80157c2:	2b2a      	cmp	r3, #42	; 0x2a
 80157c4:	d015      	beq.n	80157f2 <_svfiprintf_r+0xf6>
 80157c6:	4654      	mov	r4, sl
 80157c8:	2000      	movs	r0, #0
 80157ca:	f04f 0c0a 	mov.w	ip, #10
 80157ce:	9a07      	ldr	r2, [sp, #28]
 80157d0:	4621      	mov	r1, r4
 80157d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80157d6:	3b30      	subs	r3, #48	; 0x30
 80157d8:	2b09      	cmp	r3, #9
 80157da:	d94e      	bls.n	801587a <_svfiprintf_r+0x17e>
 80157dc:	b1b0      	cbz	r0, 801580c <_svfiprintf_r+0x110>
 80157de:	9207      	str	r2, [sp, #28]
 80157e0:	e014      	b.n	801580c <_svfiprintf_r+0x110>
 80157e2:	eba0 0308 	sub.w	r3, r0, r8
 80157e6:	fa09 f303 	lsl.w	r3, r9, r3
 80157ea:	4313      	orrs	r3, r2
 80157ec:	46a2      	mov	sl, r4
 80157ee:	9304      	str	r3, [sp, #16]
 80157f0:	e7d2      	b.n	8015798 <_svfiprintf_r+0x9c>
 80157f2:	9b03      	ldr	r3, [sp, #12]
 80157f4:	1d19      	adds	r1, r3, #4
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	9103      	str	r1, [sp, #12]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	bfbb      	ittet	lt
 80157fe:	425b      	neglt	r3, r3
 8015800:	f042 0202 	orrlt.w	r2, r2, #2
 8015804:	9307      	strge	r3, [sp, #28]
 8015806:	9307      	strlt	r3, [sp, #28]
 8015808:	bfb8      	it	lt
 801580a:	9204      	strlt	r2, [sp, #16]
 801580c:	7823      	ldrb	r3, [r4, #0]
 801580e:	2b2e      	cmp	r3, #46	; 0x2e
 8015810:	d10c      	bne.n	801582c <_svfiprintf_r+0x130>
 8015812:	7863      	ldrb	r3, [r4, #1]
 8015814:	2b2a      	cmp	r3, #42	; 0x2a
 8015816:	d135      	bne.n	8015884 <_svfiprintf_r+0x188>
 8015818:	9b03      	ldr	r3, [sp, #12]
 801581a:	3402      	adds	r4, #2
 801581c:	1d1a      	adds	r2, r3, #4
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	9203      	str	r2, [sp, #12]
 8015822:	2b00      	cmp	r3, #0
 8015824:	bfb8      	it	lt
 8015826:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801582a:	9305      	str	r3, [sp, #20]
 801582c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80158ec <_svfiprintf_r+0x1f0>
 8015830:	2203      	movs	r2, #3
 8015832:	4650      	mov	r0, sl
 8015834:	7821      	ldrb	r1, [r4, #0]
 8015836:	f7ff f94f 	bl	8014ad8 <memchr>
 801583a:	b140      	cbz	r0, 801584e <_svfiprintf_r+0x152>
 801583c:	2340      	movs	r3, #64	; 0x40
 801583e:	eba0 000a 	sub.w	r0, r0, sl
 8015842:	fa03 f000 	lsl.w	r0, r3, r0
 8015846:	9b04      	ldr	r3, [sp, #16]
 8015848:	3401      	adds	r4, #1
 801584a:	4303      	orrs	r3, r0
 801584c:	9304      	str	r3, [sp, #16]
 801584e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015852:	2206      	movs	r2, #6
 8015854:	4826      	ldr	r0, [pc, #152]	; (80158f0 <_svfiprintf_r+0x1f4>)
 8015856:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801585a:	f7ff f93d 	bl	8014ad8 <memchr>
 801585e:	2800      	cmp	r0, #0
 8015860:	d038      	beq.n	80158d4 <_svfiprintf_r+0x1d8>
 8015862:	4b24      	ldr	r3, [pc, #144]	; (80158f4 <_svfiprintf_r+0x1f8>)
 8015864:	bb1b      	cbnz	r3, 80158ae <_svfiprintf_r+0x1b2>
 8015866:	9b03      	ldr	r3, [sp, #12]
 8015868:	3307      	adds	r3, #7
 801586a:	f023 0307 	bic.w	r3, r3, #7
 801586e:	3308      	adds	r3, #8
 8015870:	9303      	str	r3, [sp, #12]
 8015872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015874:	4433      	add	r3, r6
 8015876:	9309      	str	r3, [sp, #36]	; 0x24
 8015878:	e767      	b.n	801574a <_svfiprintf_r+0x4e>
 801587a:	460c      	mov	r4, r1
 801587c:	2001      	movs	r0, #1
 801587e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015882:	e7a5      	b.n	80157d0 <_svfiprintf_r+0xd4>
 8015884:	2300      	movs	r3, #0
 8015886:	f04f 0c0a 	mov.w	ip, #10
 801588a:	4619      	mov	r1, r3
 801588c:	3401      	adds	r4, #1
 801588e:	9305      	str	r3, [sp, #20]
 8015890:	4620      	mov	r0, r4
 8015892:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015896:	3a30      	subs	r2, #48	; 0x30
 8015898:	2a09      	cmp	r2, #9
 801589a:	d903      	bls.n	80158a4 <_svfiprintf_r+0x1a8>
 801589c:	2b00      	cmp	r3, #0
 801589e:	d0c5      	beq.n	801582c <_svfiprintf_r+0x130>
 80158a0:	9105      	str	r1, [sp, #20]
 80158a2:	e7c3      	b.n	801582c <_svfiprintf_r+0x130>
 80158a4:	4604      	mov	r4, r0
 80158a6:	2301      	movs	r3, #1
 80158a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80158ac:	e7f0      	b.n	8015890 <_svfiprintf_r+0x194>
 80158ae:	ab03      	add	r3, sp, #12
 80158b0:	9300      	str	r3, [sp, #0]
 80158b2:	462a      	mov	r2, r5
 80158b4:	4638      	mov	r0, r7
 80158b6:	4b10      	ldr	r3, [pc, #64]	; (80158f8 <_svfiprintf_r+0x1fc>)
 80158b8:	a904      	add	r1, sp, #16
 80158ba:	f7fc f965 	bl	8011b88 <_printf_float>
 80158be:	1c42      	adds	r2, r0, #1
 80158c0:	4606      	mov	r6, r0
 80158c2:	d1d6      	bne.n	8015872 <_svfiprintf_r+0x176>
 80158c4:	89ab      	ldrh	r3, [r5, #12]
 80158c6:	065b      	lsls	r3, r3, #25
 80158c8:	f53f af2c 	bmi.w	8015724 <_svfiprintf_r+0x28>
 80158cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80158ce:	b01d      	add	sp, #116	; 0x74
 80158d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158d4:	ab03      	add	r3, sp, #12
 80158d6:	9300      	str	r3, [sp, #0]
 80158d8:	462a      	mov	r2, r5
 80158da:	4638      	mov	r0, r7
 80158dc:	4b06      	ldr	r3, [pc, #24]	; (80158f8 <_svfiprintf_r+0x1fc>)
 80158de:	a904      	add	r1, sp, #16
 80158e0:	f7fc fbee 	bl	80120c0 <_printf_i>
 80158e4:	e7eb      	b.n	80158be <_svfiprintf_r+0x1c2>
 80158e6:	bf00      	nop
 80158e8:	08018824 	.word	0x08018824
 80158ec:	0801882a 	.word	0x0801882a
 80158f0:	0801882e 	.word	0x0801882e
 80158f4:	08011b89 	.word	0x08011b89
 80158f8:	08015645 	.word	0x08015645

080158fc <__sfputc_r>:
 80158fc:	6893      	ldr	r3, [r2, #8]
 80158fe:	b410      	push	{r4}
 8015900:	3b01      	subs	r3, #1
 8015902:	2b00      	cmp	r3, #0
 8015904:	6093      	str	r3, [r2, #8]
 8015906:	da07      	bge.n	8015918 <__sfputc_r+0x1c>
 8015908:	6994      	ldr	r4, [r2, #24]
 801590a:	42a3      	cmp	r3, r4
 801590c:	db01      	blt.n	8015912 <__sfputc_r+0x16>
 801590e:	290a      	cmp	r1, #10
 8015910:	d102      	bne.n	8015918 <__sfputc_r+0x1c>
 8015912:	bc10      	pop	{r4}
 8015914:	f000 b9a4 	b.w	8015c60 <__swbuf_r>
 8015918:	6813      	ldr	r3, [r2, #0]
 801591a:	1c58      	adds	r0, r3, #1
 801591c:	6010      	str	r0, [r2, #0]
 801591e:	7019      	strb	r1, [r3, #0]
 8015920:	4608      	mov	r0, r1
 8015922:	bc10      	pop	{r4}
 8015924:	4770      	bx	lr

08015926 <__sfputs_r>:
 8015926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015928:	4606      	mov	r6, r0
 801592a:	460f      	mov	r7, r1
 801592c:	4614      	mov	r4, r2
 801592e:	18d5      	adds	r5, r2, r3
 8015930:	42ac      	cmp	r4, r5
 8015932:	d101      	bne.n	8015938 <__sfputs_r+0x12>
 8015934:	2000      	movs	r0, #0
 8015936:	e007      	b.n	8015948 <__sfputs_r+0x22>
 8015938:	463a      	mov	r2, r7
 801593a:	4630      	mov	r0, r6
 801593c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015940:	f7ff ffdc 	bl	80158fc <__sfputc_r>
 8015944:	1c43      	adds	r3, r0, #1
 8015946:	d1f3      	bne.n	8015930 <__sfputs_r+0xa>
 8015948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801594c <_vfiprintf_r>:
 801594c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015950:	460d      	mov	r5, r1
 8015952:	4614      	mov	r4, r2
 8015954:	4698      	mov	r8, r3
 8015956:	4606      	mov	r6, r0
 8015958:	b09d      	sub	sp, #116	; 0x74
 801595a:	b118      	cbz	r0, 8015964 <_vfiprintf_r+0x18>
 801595c:	6983      	ldr	r3, [r0, #24]
 801595e:	b90b      	cbnz	r3, 8015964 <_vfiprintf_r+0x18>
 8015960:	f7fe fc94 	bl	801428c <__sinit>
 8015964:	4b89      	ldr	r3, [pc, #548]	; (8015b8c <_vfiprintf_r+0x240>)
 8015966:	429d      	cmp	r5, r3
 8015968:	d11b      	bne.n	80159a2 <_vfiprintf_r+0x56>
 801596a:	6875      	ldr	r5, [r6, #4]
 801596c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801596e:	07d9      	lsls	r1, r3, #31
 8015970:	d405      	bmi.n	801597e <_vfiprintf_r+0x32>
 8015972:	89ab      	ldrh	r3, [r5, #12]
 8015974:	059a      	lsls	r2, r3, #22
 8015976:	d402      	bmi.n	801597e <_vfiprintf_r+0x32>
 8015978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801597a:	f7ff f890 	bl	8014a9e <__retarget_lock_acquire_recursive>
 801597e:	89ab      	ldrh	r3, [r5, #12]
 8015980:	071b      	lsls	r3, r3, #28
 8015982:	d501      	bpl.n	8015988 <_vfiprintf_r+0x3c>
 8015984:	692b      	ldr	r3, [r5, #16]
 8015986:	b9eb      	cbnz	r3, 80159c4 <_vfiprintf_r+0x78>
 8015988:	4629      	mov	r1, r5
 801598a:	4630      	mov	r0, r6
 801598c:	f000 f9da 	bl	8015d44 <__swsetup_r>
 8015990:	b1c0      	cbz	r0, 80159c4 <_vfiprintf_r+0x78>
 8015992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015994:	07dc      	lsls	r4, r3, #31
 8015996:	d50e      	bpl.n	80159b6 <_vfiprintf_r+0x6a>
 8015998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801599c:	b01d      	add	sp, #116	; 0x74
 801599e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159a2:	4b7b      	ldr	r3, [pc, #492]	; (8015b90 <_vfiprintf_r+0x244>)
 80159a4:	429d      	cmp	r5, r3
 80159a6:	d101      	bne.n	80159ac <_vfiprintf_r+0x60>
 80159a8:	68b5      	ldr	r5, [r6, #8]
 80159aa:	e7df      	b.n	801596c <_vfiprintf_r+0x20>
 80159ac:	4b79      	ldr	r3, [pc, #484]	; (8015b94 <_vfiprintf_r+0x248>)
 80159ae:	429d      	cmp	r5, r3
 80159b0:	bf08      	it	eq
 80159b2:	68f5      	ldreq	r5, [r6, #12]
 80159b4:	e7da      	b.n	801596c <_vfiprintf_r+0x20>
 80159b6:	89ab      	ldrh	r3, [r5, #12]
 80159b8:	0598      	lsls	r0, r3, #22
 80159ba:	d4ed      	bmi.n	8015998 <_vfiprintf_r+0x4c>
 80159bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80159be:	f7ff f86f 	bl	8014aa0 <__retarget_lock_release_recursive>
 80159c2:	e7e9      	b.n	8015998 <_vfiprintf_r+0x4c>
 80159c4:	2300      	movs	r3, #0
 80159c6:	9309      	str	r3, [sp, #36]	; 0x24
 80159c8:	2320      	movs	r3, #32
 80159ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80159ce:	2330      	movs	r3, #48	; 0x30
 80159d0:	f04f 0901 	mov.w	r9, #1
 80159d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80159d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8015b98 <_vfiprintf_r+0x24c>
 80159dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80159e0:	4623      	mov	r3, r4
 80159e2:	469a      	mov	sl, r3
 80159e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80159e8:	b10a      	cbz	r2, 80159ee <_vfiprintf_r+0xa2>
 80159ea:	2a25      	cmp	r2, #37	; 0x25
 80159ec:	d1f9      	bne.n	80159e2 <_vfiprintf_r+0x96>
 80159ee:	ebba 0b04 	subs.w	fp, sl, r4
 80159f2:	d00b      	beq.n	8015a0c <_vfiprintf_r+0xc0>
 80159f4:	465b      	mov	r3, fp
 80159f6:	4622      	mov	r2, r4
 80159f8:	4629      	mov	r1, r5
 80159fa:	4630      	mov	r0, r6
 80159fc:	f7ff ff93 	bl	8015926 <__sfputs_r>
 8015a00:	3001      	adds	r0, #1
 8015a02:	f000 80aa 	beq.w	8015b5a <_vfiprintf_r+0x20e>
 8015a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a08:	445a      	add	r2, fp
 8015a0a:	9209      	str	r2, [sp, #36]	; 0x24
 8015a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	f000 80a2 	beq.w	8015b5a <_vfiprintf_r+0x20e>
 8015a16:	2300      	movs	r3, #0
 8015a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015a20:	f10a 0a01 	add.w	sl, sl, #1
 8015a24:	9304      	str	r3, [sp, #16]
 8015a26:	9307      	str	r3, [sp, #28]
 8015a28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015a2c:	931a      	str	r3, [sp, #104]	; 0x68
 8015a2e:	4654      	mov	r4, sl
 8015a30:	2205      	movs	r2, #5
 8015a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a36:	4858      	ldr	r0, [pc, #352]	; (8015b98 <_vfiprintf_r+0x24c>)
 8015a38:	f7ff f84e 	bl	8014ad8 <memchr>
 8015a3c:	9a04      	ldr	r2, [sp, #16]
 8015a3e:	b9d8      	cbnz	r0, 8015a78 <_vfiprintf_r+0x12c>
 8015a40:	06d1      	lsls	r1, r2, #27
 8015a42:	bf44      	itt	mi
 8015a44:	2320      	movmi	r3, #32
 8015a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015a4a:	0713      	lsls	r3, r2, #28
 8015a4c:	bf44      	itt	mi
 8015a4e:	232b      	movmi	r3, #43	; 0x2b
 8015a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015a54:	f89a 3000 	ldrb.w	r3, [sl]
 8015a58:	2b2a      	cmp	r3, #42	; 0x2a
 8015a5a:	d015      	beq.n	8015a88 <_vfiprintf_r+0x13c>
 8015a5c:	4654      	mov	r4, sl
 8015a5e:	2000      	movs	r0, #0
 8015a60:	f04f 0c0a 	mov.w	ip, #10
 8015a64:	9a07      	ldr	r2, [sp, #28]
 8015a66:	4621      	mov	r1, r4
 8015a68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a6c:	3b30      	subs	r3, #48	; 0x30
 8015a6e:	2b09      	cmp	r3, #9
 8015a70:	d94e      	bls.n	8015b10 <_vfiprintf_r+0x1c4>
 8015a72:	b1b0      	cbz	r0, 8015aa2 <_vfiprintf_r+0x156>
 8015a74:	9207      	str	r2, [sp, #28]
 8015a76:	e014      	b.n	8015aa2 <_vfiprintf_r+0x156>
 8015a78:	eba0 0308 	sub.w	r3, r0, r8
 8015a7c:	fa09 f303 	lsl.w	r3, r9, r3
 8015a80:	4313      	orrs	r3, r2
 8015a82:	46a2      	mov	sl, r4
 8015a84:	9304      	str	r3, [sp, #16]
 8015a86:	e7d2      	b.n	8015a2e <_vfiprintf_r+0xe2>
 8015a88:	9b03      	ldr	r3, [sp, #12]
 8015a8a:	1d19      	adds	r1, r3, #4
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	9103      	str	r1, [sp, #12]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	bfbb      	ittet	lt
 8015a94:	425b      	neglt	r3, r3
 8015a96:	f042 0202 	orrlt.w	r2, r2, #2
 8015a9a:	9307      	strge	r3, [sp, #28]
 8015a9c:	9307      	strlt	r3, [sp, #28]
 8015a9e:	bfb8      	it	lt
 8015aa0:	9204      	strlt	r2, [sp, #16]
 8015aa2:	7823      	ldrb	r3, [r4, #0]
 8015aa4:	2b2e      	cmp	r3, #46	; 0x2e
 8015aa6:	d10c      	bne.n	8015ac2 <_vfiprintf_r+0x176>
 8015aa8:	7863      	ldrb	r3, [r4, #1]
 8015aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8015aac:	d135      	bne.n	8015b1a <_vfiprintf_r+0x1ce>
 8015aae:	9b03      	ldr	r3, [sp, #12]
 8015ab0:	3402      	adds	r4, #2
 8015ab2:	1d1a      	adds	r2, r3, #4
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	9203      	str	r2, [sp, #12]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	bfb8      	it	lt
 8015abc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015ac0:	9305      	str	r3, [sp, #20]
 8015ac2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8015b9c <_vfiprintf_r+0x250>
 8015ac6:	2203      	movs	r2, #3
 8015ac8:	4650      	mov	r0, sl
 8015aca:	7821      	ldrb	r1, [r4, #0]
 8015acc:	f7ff f804 	bl	8014ad8 <memchr>
 8015ad0:	b140      	cbz	r0, 8015ae4 <_vfiprintf_r+0x198>
 8015ad2:	2340      	movs	r3, #64	; 0x40
 8015ad4:	eba0 000a 	sub.w	r0, r0, sl
 8015ad8:	fa03 f000 	lsl.w	r0, r3, r0
 8015adc:	9b04      	ldr	r3, [sp, #16]
 8015ade:	3401      	adds	r4, #1
 8015ae0:	4303      	orrs	r3, r0
 8015ae2:	9304      	str	r3, [sp, #16]
 8015ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ae8:	2206      	movs	r2, #6
 8015aea:	482d      	ldr	r0, [pc, #180]	; (8015ba0 <_vfiprintf_r+0x254>)
 8015aec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015af0:	f7fe fff2 	bl	8014ad8 <memchr>
 8015af4:	2800      	cmp	r0, #0
 8015af6:	d03f      	beq.n	8015b78 <_vfiprintf_r+0x22c>
 8015af8:	4b2a      	ldr	r3, [pc, #168]	; (8015ba4 <_vfiprintf_r+0x258>)
 8015afa:	bb1b      	cbnz	r3, 8015b44 <_vfiprintf_r+0x1f8>
 8015afc:	9b03      	ldr	r3, [sp, #12]
 8015afe:	3307      	adds	r3, #7
 8015b00:	f023 0307 	bic.w	r3, r3, #7
 8015b04:	3308      	adds	r3, #8
 8015b06:	9303      	str	r3, [sp, #12]
 8015b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b0a:	443b      	add	r3, r7
 8015b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8015b0e:	e767      	b.n	80159e0 <_vfiprintf_r+0x94>
 8015b10:	460c      	mov	r4, r1
 8015b12:	2001      	movs	r0, #1
 8015b14:	fb0c 3202 	mla	r2, ip, r2, r3
 8015b18:	e7a5      	b.n	8015a66 <_vfiprintf_r+0x11a>
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	f04f 0c0a 	mov.w	ip, #10
 8015b20:	4619      	mov	r1, r3
 8015b22:	3401      	adds	r4, #1
 8015b24:	9305      	str	r3, [sp, #20]
 8015b26:	4620      	mov	r0, r4
 8015b28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015b2c:	3a30      	subs	r2, #48	; 0x30
 8015b2e:	2a09      	cmp	r2, #9
 8015b30:	d903      	bls.n	8015b3a <_vfiprintf_r+0x1ee>
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d0c5      	beq.n	8015ac2 <_vfiprintf_r+0x176>
 8015b36:	9105      	str	r1, [sp, #20]
 8015b38:	e7c3      	b.n	8015ac2 <_vfiprintf_r+0x176>
 8015b3a:	4604      	mov	r4, r0
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015b42:	e7f0      	b.n	8015b26 <_vfiprintf_r+0x1da>
 8015b44:	ab03      	add	r3, sp, #12
 8015b46:	9300      	str	r3, [sp, #0]
 8015b48:	462a      	mov	r2, r5
 8015b4a:	4630      	mov	r0, r6
 8015b4c:	4b16      	ldr	r3, [pc, #88]	; (8015ba8 <_vfiprintf_r+0x25c>)
 8015b4e:	a904      	add	r1, sp, #16
 8015b50:	f7fc f81a 	bl	8011b88 <_printf_float>
 8015b54:	4607      	mov	r7, r0
 8015b56:	1c78      	adds	r0, r7, #1
 8015b58:	d1d6      	bne.n	8015b08 <_vfiprintf_r+0x1bc>
 8015b5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b5c:	07d9      	lsls	r1, r3, #31
 8015b5e:	d405      	bmi.n	8015b6c <_vfiprintf_r+0x220>
 8015b60:	89ab      	ldrh	r3, [r5, #12]
 8015b62:	059a      	lsls	r2, r3, #22
 8015b64:	d402      	bmi.n	8015b6c <_vfiprintf_r+0x220>
 8015b66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b68:	f7fe ff9a 	bl	8014aa0 <__retarget_lock_release_recursive>
 8015b6c:	89ab      	ldrh	r3, [r5, #12]
 8015b6e:	065b      	lsls	r3, r3, #25
 8015b70:	f53f af12 	bmi.w	8015998 <_vfiprintf_r+0x4c>
 8015b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015b76:	e711      	b.n	801599c <_vfiprintf_r+0x50>
 8015b78:	ab03      	add	r3, sp, #12
 8015b7a:	9300      	str	r3, [sp, #0]
 8015b7c:	462a      	mov	r2, r5
 8015b7e:	4630      	mov	r0, r6
 8015b80:	4b09      	ldr	r3, [pc, #36]	; (8015ba8 <_vfiprintf_r+0x25c>)
 8015b82:	a904      	add	r1, sp, #16
 8015b84:	f7fc fa9c 	bl	80120c0 <_printf_i>
 8015b88:	e7e4      	b.n	8015b54 <_vfiprintf_r+0x208>
 8015b8a:	bf00      	nop
 8015b8c:	0801860c 	.word	0x0801860c
 8015b90:	0801862c 	.word	0x0801862c
 8015b94:	080185ec 	.word	0x080185ec
 8015b98:	08018824 	.word	0x08018824
 8015b9c:	0801882a 	.word	0x0801882a
 8015ba0:	0801882e 	.word	0x0801882e
 8015ba4:	08011b89 	.word	0x08011b89
 8015ba8:	08015927 	.word	0x08015927

08015bac <nan>:
 8015bac:	2000      	movs	r0, #0
 8015bae:	4901      	ldr	r1, [pc, #4]	; (8015bb4 <nan+0x8>)
 8015bb0:	4770      	bx	lr
 8015bb2:	bf00      	nop
 8015bb4:	7ff80000 	.word	0x7ff80000

08015bb8 <_sbrk_r>:
 8015bb8:	b538      	push	{r3, r4, r5, lr}
 8015bba:	2300      	movs	r3, #0
 8015bbc:	4d05      	ldr	r5, [pc, #20]	; (8015bd4 <_sbrk_r+0x1c>)
 8015bbe:	4604      	mov	r4, r0
 8015bc0:	4608      	mov	r0, r1
 8015bc2:	602b      	str	r3, [r5, #0]
 8015bc4:	f7ec fdba 	bl	800273c <_sbrk>
 8015bc8:	1c43      	adds	r3, r0, #1
 8015bca:	d102      	bne.n	8015bd2 <_sbrk_r+0x1a>
 8015bcc:	682b      	ldr	r3, [r5, #0]
 8015bce:	b103      	cbz	r3, 8015bd2 <_sbrk_r+0x1a>
 8015bd0:	6023      	str	r3, [r4, #0]
 8015bd2:	bd38      	pop	{r3, r4, r5, pc}
 8015bd4:	200070b8 	.word	0x200070b8

08015bd8 <__sread>:
 8015bd8:	b510      	push	{r4, lr}
 8015bda:	460c      	mov	r4, r1
 8015bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015be0:	f000 faea 	bl	80161b8 <_read_r>
 8015be4:	2800      	cmp	r0, #0
 8015be6:	bfab      	itete	ge
 8015be8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015bea:	89a3      	ldrhlt	r3, [r4, #12]
 8015bec:	181b      	addge	r3, r3, r0
 8015bee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015bf2:	bfac      	ite	ge
 8015bf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8015bf6:	81a3      	strhlt	r3, [r4, #12]
 8015bf8:	bd10      	pop	{r4, pc}

08015bfa <__swrite>:
 8015bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bfe:	461f      	mov	r7, r3
 8015c00:	898b      	ldrh	r3, [r1, #12]
 8015c02:	4605      	mov	r5, r0
 8015c04:	05db      	lsls	r3, r3, #23
 8015c06:	460c      	mov	r4, r1
 8015c08:	4616      	mov	r6, r2
 8015c0a:	d505      	bpl.n	8015c18 <__swrite+0x1e>
 8015c0c:	2302      	movs	r3, #2
 8015c0e:	2200      	movs	r2, #0
 8015c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c14:	f000 fa02 	bl	801601c <_lseek_r>
 8015c18:	89a3      	ldrh	r3, [r4, #12]
 8015c1a:	4632      	mov	r2, r6
 8015c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015c20:	81a3      	strh	r3, [r4, #12]
 8015c22:	4628      	mov	r0, r5
 8015c24:	463b      	mov	r3, r7
 8015c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c2e:	f000 b877 	b.w	8015d20 <_write_r>

08015c32 <__sseek>:
 8015c32:	b510      	push	{r4, lr}
 8015c34:	460c      	mov	r4, r1
 8015c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c3a:	f000 f9ef 	bl	801601c <_lseek_r>
 8015c3e:	1c43      	adds	r3, r0, #1
 8015c40:	89a3      	ldrh	r3, [r4, #12]
 8015c42:	bf15      	itete	ne
 8015c44:	6560      	strne	r0, [r4, #84]	; 0x54
 8015c46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015c4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015c4e:	81a3      	strheq	r3, [r4, #12]
 8015c50:	bf18      	it	ne
 8015c52:	81a3      	strhne	r3, [r4, #12]
 8015c54:	bd10      	pop	{r4, pc}

08015c56 <__sclose>:
 8015c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c5a:	f000 b8ff 	b.w	8015e5c <_close_r>
	...

08015c60 <__swbuf_r>:
 8015c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c62:	460e      	mov	r6, r1
 8015c64:	4614      	mov	r4, r2
 8015c66:	4605      	mov	r5, r0
 8015c68:	b118      	cbz	r0, 8015c72 <__swbuf_r+0x12>
 8015c6a:	6983      	ldr	r3, [r0, #24]
 8015c6c:	b90b      	cbnz	r3, 8015c72 <__swbuf_r+0x12>
 8015c6e:	f7fe fb0d 	bl	801428c <__sinit>
 8015c72:	4b21      	ldr	r3, [pc, #132]	; (8015cf8 <__swbuf_r+0x98>)
 8015c74:	429c      	cmp	r4, r3
 8015c76:	d12b      	bne.n	8015cd0 <__swbuf_r+0x70>
 8015c78:	686c      	ldr	r4, [r5, #4]
 8015c7a:	69a3      	ldr	r3, [r4, #24]
 8015c7c:	60a3      	str	r3, [r4, #8]
 8015c7e:	89a3      	ldrh	r3, [r4, #12]
 8015c80:	071a      	lsls	r2, r3, #28
 8015c82:	d52f      	bpl.n	8015ce4 <__swbuf_r+0x84>
 8015c84:	6923      	ldr	r3, [r4, #16]
 8015c86:	b36b      	cbz	r3, 8015ce4 <__swbuf_r+0x84>
 8015c88:	6923      	ldr	r3, [r4, #16]
 8015c8a:	6820      	ldr	r0, [r4, #0]
 8015c8c:	b2f6      	uxtb	r6, r6
 8015c8e:	1ac0      	subs	r0, r0, r3
 8015c90:	6963      	ldr	r3, [r4, #20]
 8015c92:	4637      	mov	r7, r6
 8015c94:	4283      	cmp	r3, r0
 8015c96:	dc04      	bgt.n	8015ca2 <__swbuf_r+0x42>
 8015c98:	4621      	mov	r1, r4
 8015c9a:	4628      	mov	r0, r5
 8015c9c:	f000 f970 	bl	8015f80 <_fflush_r>
 8015ca0:	bb30      	cbnz	r0, 8015cf0 <__swbuf_r+0x90>
 8015ca2:	68a3      	ldr	r3, [r4, #8]
 8015ca4:	3001      	adds	r0, #1
 8015ca6:	3b01      	subs	r3, #1
 8015ca8:	60a3      	str	r3, [r4, #8]
 8015caa:	6823      	ldr	r3, [r4, #0]
 8015cac:	1c5a      	adds	r2, r3, #1
 8015cae:	6022      	str	r2, [r4, #0]
 8015cb0:	701e      	strb	r6, [r3, #0]
 8015cb2:	6963      	ldr	r3, [r4, #20]
 8015cb4:	4283      	cmp	r3, r0
 8015cb6:	d004      	beq.n	8015cc2 <__swbuf_r+0x62>
 8015cb8:	89a3      	ldrh	r3, [r4, #12]
 8015cba:	07db      	lsls	r3, r3, #31
 8015cbc:	d506      	bpl.n	8015ccc <__swbuf_r+0x6c>
 8015cbe:	2e0a      	cmp	r6, #10
 8015cc0:	d104      	bne.n	8015ccc <__swbuf_r+0x6c>
 8015cc2:	4621      	mov	r1, r4
 8015cc4:	4628      	mov	r0, r5
 8015cc6:	f000 f95b 	bl	8015f80 <_fflush_r>
 8015cca:	b988      	cbnz	r0, 8015cf0 <__swbuf_r+0x90>
 8015ccc:	4638      	mov	r0, r7
 8015cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cd0:	4b0a      	ldr	r3, [pc, #40]	; (8015cfc <__swbuf_r+0x9c>)
 8015cd2:	429c      	cmp	r4, r3
 8015cd4:	d101      	bne.n	8015cda <__swbuf_r+0x7a>
 8015cd6:	68ac      	ldr	r4, [r5, #8]
 8015cd8:	e7cf      	b.n	8015c7a <__swbuf_r+0x1a>
 8015cda:	4b09      	ldr	r3, [pc, #36]	; (8015d00 <__swbuf_r+0xa0>)
 8015cdc:	429c      	cmp	r4, r3
 8015cde:	bf08      	it	eq
 8015ce0:	68ec      	ldreq	r4, [r5, #12]
 8015ce2:	e7ca      	b.n	8015c7a <__swbuf_r+0x1a>
 8015ce4:	4621      	mov	r1, r4
 8015ce6:	4628      	mov	r0, r5
 8015ce8:	f000 f82c 	bl	8015d44 <__swsetup_r>
 8015cec:	2800      	cmp	r0, #0
 8015cee:	d0cb      	beq.n	8015c88 <__swbuf_r+0x28>
 8015cf0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015cf4:	e7ea      	b.n	8015ccc <__swbuf_r+0x6c>
 8015cf6:	bf00      	nop
 8015cf8:	0801860c 	.word	0x0801860c
 8015cfc:	0801862c 	.word	0x0801862c
 8015d00:	080185ec 	.word	0x080185ec

08015d04 <__ascii_wctomb>:
 8015d04:	4603      	mov	r3, r0
 8015d06:	4608      	mov	r0, r1
 8015d08:	b141      	cbz	r1, 8015d1c <__ascii_wctomb+0x18>
 8015d0a:	2aff      	cmp	r2, #255	; 0xff
 8015d0c:	d904      	bls.n	8015d18 <__ascii_wctomb+0x14>
 8015d0e:	228a      	movs	r2, #138	; 0x8a
 8015d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015d14:	601a      	str	r2, [r3, #0]
 8015d16:	4770      	bx	lr
 8015d18:	2001      	movs	r0, #1
 8015d1a:	700a      	strb	r2, [r1, #0]
 8015d1c:	4770      	bx	lr
	...

08015d20 <_write_r>:
 8015d20:	b538      	push	{r3, r4, r5, lr}
 8015d22:	4604      	mov	r4, r0
 8015d24:	4608      	mov	r0, r1
 8015d26:	4611      	mov	r1, r2
 8015d28:	2200      	movs	r2, #0
 8015d2a:	4d05      	ldr	r5, [pc, #20]	; (8015d40 <_write_r+0x20>)
 8015d2c:	602a      	str	r2, [r5, #0]
 8015d2e:	461a      	mov	r2, r3
 8015d30:	f7ec fcb7 	bl	80026a2 <_write>
 8015d34:	1c43      	adds	r3, r0, #1
 8015d36:	d102      	bne.n	8015d3e <_write_r+0x1e>
 8015d38:	682b      	ldr	r3, [r5, #0]
 8015d3a:	b103      	cbz	r3, 8015d3e <_write_r+0x1e>
 8015d3c:	6023      	str	r3, [r4, #0]
 8015d3e:	bd38      	pop	{r3, r4, r5, pc}
 8015d40:	200070b8 	.word	0x200070b8

08015d44 <__swsetup_r>:
 8015d44:	4b32      	ldr	r3, [pc, #200]	; (8015e10 <__swsetup_r+0xcc>)
 8015d46:	b570      	push	{r4, r5, r6, lr}
 8015d48:	681d      	ldr	r5, [r3, #0]
 8015d4a:	4606      	mov	r6, r0
 8015d4c:	460c      	mov	r4, r1
 8015d4e:	b125      	cbz	r5, 8015d5a <__swsetup_r+0x16>
 8015d50:	69ab      	ldr	r3, [r5, #24]
 8015d52:	b913      	cbnz	r3, 8015d5a <__swsetup_r+0x16>
 8015d54:	4628      	mov	r0, r5
 8015d56:	f7fe fa99 	bl	801428c <__sinit>
 8015d5a:	4b2e      	ldr	r3, [pc, #184]	; (8015e14 <__swsetup_r+0xd0>)
 8015d5c:	429c      	cmp	r4, r3
 8015d5e:	d10f      	bne.n	8015d80 <__swsetup_r+0x3c>
 8015d60:	686c      	ldr	r4, [r5, #4]
 8015d62:	89a3      	ldrh	r3, [r4, #12]
 8015d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015d68:	0719      	lsls	r1, r3, #28
 8015d6a:	d42c      	bmi.n	8015dc6 <__swsetup_r+0x82>
 8015d6c:	06dd      	lsls	r5, r3, #27
 8015d6e:	d411      	bmi.n	8015d94 <__swsetup_r+0x50>
 8015d70:	2309      	movs	r3, #9
 8015d72:	6033      	str	r3, [r6, #0]
 8015d74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015d7c:	81a3      	strh	r3, [r4, #12]
 8015d7e:	e03e      	b.n	8015dfe <__swsetup_r+0xba>
 8015d80:	4b25      	ldr	r3, [pc, #148]	; (8015e18 <__swsetup_r+0xd4>)
 8015d82:	429c      	cmp	r4, r3
 8015d84:	d101      	bne.n	8015d8a <__swsetup_r+0x46>
 8015d86:	68ac      	ldr	r4, [r5, #8]
 8015d88:	e7eb      	b.n	8015d62 <__swsetup_r+0x1e>
 8015d8a:	4b24      	ldr	r3, [pc, #144]	; (8015e1c <__swsetup_r+0xd8>)
 8015d8c:	429c      	cmp	r4, r3
 8015d8e:	bf08      	it	eq
 8015d90:	68ec      	ldreq	r4, [r5, #12]
 8015d92:	e7e6      	b.n	8015d62 <__swsetup_r+0x1e>
 8015d94:	0758      	lsls	r0, r3, #29
 8015d96:	d512      	bpl.n	8015dbe <__swsetup_r+0x7a>
 8015d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d9a:	b141      	cbz	r1, 8015dae <__swsetup_r+0x6a>
 8015d9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015da0:	4299      	cmp	r1, r3
 8015da2:	d002      	beq.n	8015daa <__swsetup_r+0x66>
 8015da4:	4630      	mov	r0, r6
 8015da6:	f7ff fb71 	bl	801548c <_free_r>
 8015daa:	2300      	movs	r3, #0
 8015dac:	6363      	str	r3, [r4, #52]	; 0x34
 8015dae:	89a3      	ldrh	r3, [r4, #12]
 8015db0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015db4:	81a3      	strh	r3, [r4, #12]
 8015db6:	2300      	movs	r3, #0
 8015db8:	6063      	str	r3, [r4, #4]
 8015dba:	6923      	ldr	r3, [r4, #16]
 8015dbc:	6023      	str	r3, [r4, #0]
 8015dbe:	89a3      	ldrh	r3, [r4, #12]
 8015dc0:	f043 0308 	orr.w	r3, r3, #8
 8015dc4:	81a3      	strh	r3, [r4, #12]
 8015dc6:	6923      	ldr	r3, [r4, #16]
 8015dc8:	b94b      	cbnz	r3, 8015dde <__swsetup_r+0x9a>
 8015dca:	89a3      	ldrh	r3, [r4, #12]
 8015dcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015dd4:	d003      	beq.n	8015dde <__swsetup_r+0x9a>
 8015dd6:	4621      	mov	r1, r4
 8015dd8:	4630      	mov	r0, r6
 8015dda:	f000 f957 	bl	801608c <__smakebuf_r>
 8015dde:	89a0      	ldrh	r0, [r4, #12]
 8015de0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015de4:	f010 0301 	ands.w	r3, r0, #1
 8015de8:	d00a      	beq.n	8015e00 <__swsetup_r+0xbc>
 8015dea:	2300      	movs	r3, #0
 8015dec:	60a3      	str	r3, [r4, #8]
 8015dee:	6963      	ldr	r3, [r4, #20]
 8015df0:	425b      	negs	r3, r3
 8015df2:	61a3      	str	r3, [r4, #24]
 8015df4:	6923      	ldr	r3, [r4, #16]
 8015df6:	b943      	cbnz	r3, 8015e0a <__swsetup_r+0xc6>
 8015df8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015dfc:	d1ba      	bne.n	8015d74 <__swsetup_r+0x30>
 8015dfe:	bd70      	pop	{r4, r5, r6, pc}
 8015e00:	0781      	lsls	r1, r0, #30
 8015e02:	bf58      	it	pl
 8015e04:	6963      	ldrpl	r3, [r4, #20]
 8015e06:	60a3      	str	r3, [r4, #8]
 8015e08:	e7f4      	b.n	8015df4 <__swsetup_r+0xb0>
 8015e0a:	2000      	movs	r0, #0
 8015e0c:	e7f7      	b.n	8015dfe <__swsetup_r+0xba>
 8015e0e:	bf00      	nop
 8015e10:	20000038 	.word	0x20000038
 8015e14:	0801860c 	.word	0x0801860c
 8015e18:	0801862c 	.word	0x0801862c
 8015e1c:	080185ec 	.word	0x080185ec

08015e20 <__assert_func>:
 8015e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015e22:	4614      	mov	r4, r2
 8015e24:	461a      	mov	r2, r3
 8015e26:	4b09      	ldr	r3, [pc, #36]	; (8015e4c <__assert_func+0x2c>)
 8015e28:	4605      	mov	r5, r0
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	68d8      	ldr	r0, [r3, #12]
 8015e2e:	b14c      	cbz	r4, 8015e44 <__assert_func+0x24>
 8015e30:	4b07      	ldr	r3, [pc, #28]	; (8015e50 <__assert_func+0x30>)
 8015e32:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015e36:	9100      	str	r1, [sp, #0]
 8015e38:	462b      	mov	r3, r5
 8015e3a:	4906      	ldr	r1, [pc, #24]	; (8015e54 <__assert_func+0x34>)
 8015e3c:	f000 f8dc 	bl	8015ff8 <fiprintf>
 8015e40:	f000 f9cc 	bl	80161dc <abort>
 8015e44:	4b04      	ldr	r3, [pc, #16]	; (8015e58 <__assert_func+0x38>)
 8015e46:	461c      	mov	r4, r3
 8015e48:	e7f3      	b.n	8015e32 <__assert_func+0x12>
 8015e4a:	bf00      	nop
 8015e4c:	20000038 	.word	0x20000038
 8015e50:	08018835 	.word	0x08018835
 8015e54:	08018842 	.word	0x08018842
 8015e58:	08018870 	.word	0x08018870

08015e5c <_close_r>:
 8015e5c:	b538      	push	{r3, r4, r5, lr}
 8015e5e:	2300      	movs	r3, #0
 8015e60:	4d05      	ldr	r5, [pc, #20]	; (8015e78 <_close_r+0x1c>)
 8015e62:	4604      	mov	r4, r0
 8015e64:	4608      	mov	r0, r1
 8015e66:	602b      	str	r3, [r5, #0]
 8015e68:	f7ec fc37 	bl	80026da <_close>
 8015e6c:	1c43      	adds	r3, r0, #1
 8015e6e:	d102      	bne.n	8015e76 <_close_r+0x1a>
 8015e70:	682b      	ldr	r3, [r5, #0]
 8015e72:	b103      	cbz	r3, 8015e76 <_close_r+0x1a>
 8015e74:	6023      	str	r3, [r4, #0]
 8015e76:	bd38      	pop	{r3, r4, r5, pc}
 8015e78:	200070b8 	.word	0x200070b8

08015e7c <__sflush_r>:
 8015e7c:	898a      	ldrh	r2, [r1, #12]
 8015e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e80:	4605      	mov	r5, r0
 8015e82:	0710      	lsls	r0, r2, #28
 8015e84:	460c      	mov	r4, r1
 8015e86:	d457      	bmi.n	8015f38 <__sflush_r+0xbc>
 8015e88:	684b      	ldr	r3, [r1, #4]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	dc04      	bgt.n	8015e98 <__sflush_r+0x1c>
 8015e8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	dc01      	bgt.n	8015e98 <__sflush_r+0x1c>
 8015e94:	2000      	movs	r0, #0
 8015e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015e9a:	2e00      	cmp	r6, #0
 8015e9c:	d0fa      	beq.n	8015e94 <__sflush_r+0x18>
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015ea4:	682f      	ldr	r7, [r5, #0]
 8015ea6:	602b      	str	r3, [r5, #0]
 8015ea8:	d032      	beq.n	8015f10 <__sflush_r+0x94>
 8015eaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015eac:	89a3      	ldrh	r3, [r4, #12]
 8015eae:	075a      	lsls	r2, r3, #29
 8015eb0:	d505      	bpl.n	8015ebe <__sflush_r+0x42>
 8015eb2:	6863      	ldr	r3, [r4, #4]
 8015eb4:	1ac0      	subs	r0, r0, r3
 8015eb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015eb8:	b10b      	cbz	r3, 8015ebe <__sflush_r+0x42>
 8015eba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015ebc:	1ac0      	subs	r0, r0, r3
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	4602      	mov	r2, r0
 8015ec2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015ec4:	4628      	mov	r0, r5
 8015ec6:	6a21      	ldr	r1, [r4, #32]
 8015ec8:	47b0      	blx	r6
 8015eca:	1c43      	adds	r3, r0, #1
 8015ecc:	89a3      	ldrh	r3, [r4, #12]
 8015ece:	d106      	bne.n	8015ede <__sflush_r+0x62>
 8015ed0:	6829      	ldr	r1, [r5, #0]
 8015ed2:	291d      	cmp	r1, #29
 8015ed4:	d82c      	bhi.n	8015f30 <__sflush_r+0xb4>
 8015ed6:	4a29      	ldr	r2, [pc, #164]	; (8015f7c <__sflush_r+0x100>)
 8015ed8:	40ca      	lsrs	r2, r1
 8015eda:	07d6      	lsls	r6, r2, #31
 8015edc:	d528      	bpl.n	8015f30 <__sflush_r+0xb4>
 8015ede:	2200      	movs	r2, #0
 8015ee0:	6062      	str	r2, [r4, #4]
 8015ee2:	6922      	ldr	r2, [r4, #16]
 8015ee4:	04d9      	lsls	r1, r3, #19
 8015ee6:	6022      	str	r2, [r4, #0]
 8015ee8:	d504      	bpl.n	8015ef4 <__sflush_r+0x78>
 8015eea:	1c42      	adds	r2, r0, #1
 8015eec:	d101      	bne.n	8015ef2 <__sflush_r+0x76>
 8015eee:	682b      	ldr	r3, [r5, #0]
 8015ef0:	b903      	cbnz	r3, 8015ef4 <__sflush_r+0x78>
 8015ef2:	6560      	str	r0, [r4, #84]	; 0x54
 8015ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015ef6:	602f      	str	r7, [r5, #0]
 8015ef8:	2900      	cmp	r1, #0
 8015efa:	d0cb      	beq.n	8015e94 <__sflush_r+0x18>
 8015efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015f00:	4299      	cmp	r1, r3
 8015f02:	d002      	beq.n	8015f0a <__sflush_r+0x8e>
 8015f04:	4628      	mov	r0, r5
 8015f06:	f7ff fac1 	bl	801548c <_free_r>
 8015f0a:	2000      	movs	r0, #0
 8015f0c:	6360      	str	r0, [r4, #52]	; 0x34
 8015f0e:	e7c2      	b.n	8015e96 <__sflush_r+0x1a>
 8015f10:	6a21      	ldr	r1, [r4, #32]
 8015f12:	2301      	movs	r3, #1
 8015f14:	4628      	mov	r0, r5
 8015f16:	47b0      	blx	r6
 8015f18:	1c41      	adds	r1, r0, #1
 8015f1a:	d1c7      	bne.n	8015eac <__sflush_r+0x30>
 8015f1c:	682b      	ldr	r3, [r5, #0]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d0c4      	beq.n	8015eac <__sflush_r+0x30>
 8015f22:	2b1d      	cmp	r3, #29
 8015f24:	d001      	beq.n	8015f2a <__sflush_r+0xae>
 8015f26:	2b16      	cmp	r3, #22
 8015f28:	d101      	bne.n	8015f2e <__sflush_r+0xb2>
 8015f2a:	602f      	str	r7, [r5, #0]
 8015f2c:	e7b2      	b.n	8015e94 <__sflush_r+0x18>
 8015f2e:	89a3      	ldrh	r3, [r4, #12]
 8015f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f34:	81a3      	strh	r3, [r4, #12]
 8015f36:	e7ae      	b.n	8015e96 <__sflush_r+0x1a>
 8015f38:	690f      	ldr	r7, [r1, #16]
 8015f3a:	2f00      	cmp	r7, #0
 8015f3c:	d0aa      	beq.n	8015e94 <__sflush_r+0x18>
 8015f3e:	0793      	lsls	r3, r2, #30
 8015f40:	bf18      	it	ne
 8015f42:	2300      	movne	r3, #0
 8015f44:	680e      	ldr	r6, [r1, #0]
 8015f46:	bf08      	it	eq
 8015f48:	694b      	ldreq	r3, [r1, #20]
 8015f4a:	1bf6      	subs	r6, r6, r7
 8015f4c:	600f      	str	r7, [r1, #0]
 8015f4e:	608b      	str	r3, [r1, #8]
 8015f50:	2e00      	cmp	r6, #0
 8015f52:	dd9f      	ble.n	8015e94 <__sflush_r+0x18>
 8015f54:	4633      	mov	r3, r6
 8015f56:	463a      	mov	r2, r7
 8015f58:	4628      	mov	r0, r5
 8015f5a:	6a21      	ldr	r1, [r4, #32]
 8015f5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8015f60:	47e0      	blx	ip
 8015f62:	2800      	cmp	r0, #0
 8015f64:	dc06      	bgt.n	8015f74 <__sflush_r+0xf8>
 8015f66:	89a3      	ldrh	r3, [r4, #12]
 8015f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f70:	81a3      	strh	r3, [r4, #12]
 8015f72:	e790      	b.n	8015e96 <__sflush_r+0x1a>
 8015f74:	4407      	add	r7, r0
 8015f76:	1a36      	subs	r6, r6, r0
 8015f78:	e7ea      	b.n	8015f50 <__sflush_r+0xd4>
 8015f7a:	bf00      	nop
 8015f7c:	20400001 	.word	0x20400001

08015f80 <_fflush_r>:
 8015f80:	b538      	push	{r3, r4, r5, lr}
 8015f82:	690b      	ldr	r3, [r1, #16]
 8015f84:	4605      	mov	r5, r0
 8015f86:	460c      	mov	r4, r1
 8015f88:	b913      	cbnz	r3, 8015f90 <_fflush_r+0x10>
 8015f8a:	2500      	movs	r5, #0
 8015f8c:	4628      	mov	r0, r5
 8015f8e:	bd38      	pop	{r3, r4, r5, pc}
 8015f90:	b118      	cbz	r0, 8015f9a <_fflush_r+0x1a>
 8015f92:	6983      	ldr	r3, [r0, #24]
 8015f94:	b90b      	cbnz	r3, 8015f9a <_fflush_r+0x1a>
 8015f96:	f7fe f979 	bl	801428c <__sinit>
 8015f9a:	4b14      	ldr	r3, [pc, #80]	; (8015fec <_fflush_r+0x6c>)
 8015f9c:	429c      	cmp	r4, r3
 8015f9e:	d11b      	bne.n	8015fd8 <_fflush_r+0x58>
 8015fa0:	686c      	ldr	r4, [r5, #4]
 8015fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d0ef      	beq.n	8015f8a <_fflush_r+0xa>
 8015faa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015fac:	07d0      	lsls	r0, r2, #31
 8015fae:	d404      	bmi.n	8015fba <_fflush_r+0x3a>
 8015fb0:	0599      	lsls	r1, r3, #22
 8015fb2:	d402      	bmi.n	8015fba <_fflush_r+0x3a>
 8015fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015fb6:	f7fe fd72 	bl	8014a9e <__retarget_lock_acquire_recursive>
 8015fba:	4628      	mov	r0, r5
 8015fbc:	4621      	mov	r1, r4
 8015fbe:	f7ff ff5d 	bl	8015e7c <__sflush_r>
 8015fc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015fc4:	4605      	mov	r5, r0
 8015fc6:	07da      	lsls	r2, r3, #31
 8015fc8:	d4e0      	bmi.n	8015f8c <_fflush_r+0xc>
 8015fca:	89a3      	ldrh	r3, [r4, #12]
 8015fcc:	059b      	lsls	r3, r3, #22
 8015fce:	d4dd      	bmi.n	8015f8c <_fflush_r+0xc>
 8015fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015fd2:	f7fe fd65 	bl	8014aa0 <__retarget_lock_release_recursive>
 8015fd6:	e7d9      	b.n	8015f8c <_fflush_r+0xc>
 8015fd8:	4b05      	ldr	r3, [pc, #20]	; (8015ff0 <_fflush_r+0x70>)
 8015fda:	429c      	cmp	r4, r3
 8015fdc:	d101      	bne.n	8015fe2 <_fflush_r+0x62>
 8015fde:	68ac      	ldr	r4, [r5, #8]
 8015fe0:	e7df      	b.n	8015fa2 <_fflush_r+0x22>
 8015fe2:	4b04      	ldr	r3, [pc, #16]	; (8015ff4 <_fflush_r+0x74>)
 8015fe4:	429c      	cmp	r4, r3
 8015fe6:	bf08      	it	eq
 8015fe8:	68ec      	ldreq	r4, [r5, #12]
 8015fea:	e7da      	b.n	8015fa2 <_fflush_r+0x22>
 8015fec:	0801860c 	.word	0x0801860c
 8015ff0:	0801862c 	.word	0x0801862c
 8015ff4:	080185ec 	.word	0x080185ec

08015ff8 <fiprintf>:
 8015ff8:	b40e      	push	{r1, r2, r3}
 8015ffa:	b503      	push	{r0, r1, lr}
 8015ffc:	4601      	mov	r1, r0
 8015ffe:	ab03      	add	r3, sp, #12
 8016000:	4805      	ldr	r0, [pc, #20]	; (8016018 <fiprintf+0x20>)
 8016002:	f853 2b04 	ldr.w	r2, [r3], #4
 8016006:	6800      	ldr	r0, [r0, #0]
 8016008:	9301      	str	r3, [sp, #4]
 801600a:	f7ff fc9f 	bl	801594c <_vfiprintf_r>
 801600e:	b002      	add	sp, #8
 8016010:	f85d eb04 	ldr.w	lr, [sp], #4
 8016014:	b003      	add	sp, #12
 8016016:	4770      	bx	lr
 8016018:	20000038 	.word	0x20000038

0801601c <_lseek_r>:
 801601c:	b538      	push	{r3, r4, r5, lr}
 801601e:	4604      	mov	r4, r0
 8016020:	4608      	mov	r0, r1
 8016022:	4611      	mov	r1, r2
 8016024:	2200      	movs	r2, #0
 8016026:	4d05      	ldr	r5, [pc, #20]	; (801603c <_lseek_r+0x20>)
 8016028:	602a      	str	r2, [r5, #0]
 801602a:	461a      	mov	r2, r3
 801602c:	f7ec fb79 	bl	8002722 <_lseek>
 8016030:	1c43      	adds	r3, r0, #1
 8016032:	d102      	bne.n	801603a <_lseek_r+0x1e>
 8016034:	682b      	ldr	r3, [r5, #0]
 8016036:	b103      	cbz	r3, 801603a <_lseek_r+0x1e>
 8016038:	6023      	str	r3, [r4, #0]
 801603a:	bd38      	pop	{r3, r4, r5, pc}
 801603c:	200070b8 	.word	0x200070b8

08016040 <__swhatbuf_r>:
 8016040:	b570      	push	{r4, r5, r6, lr}
 8016042:	460e      	mov	r6, r1
 8016044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016048:	4614      	mov	r4, r2
 801604a:	2900      	cmp	r1, #0
 801604c:	461d      	mov	r5, r3
 801604e:	b096      	sub	sp, #88	; 0x58
 8016050:	da08      	bge.n	8016064 <__swhatbuf_r+0x24>
 8016052:	2200      	movs	r2, #0
 8016054:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016058:	602a      	str	r2, [r5, #0]
 801605a:	061a      	lsls	r2, r3, #24
 801605c:	d410      	bmi.n	8016080 <__swhatbuf_r+0x40>
 801605e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016062:	e00e      	b.n	8016082 <__swhatbuf_r+0x42>
 8016064:	466a      	mov	r2, sp
 8016066:	f000 f8c1 	bl	80161ec <_fstat_r>
 801606a:	2800      	cmp	r0, #0
 801606c:	dbf1      	blt.n	8016052 <__swhatbuf_r+0x12>
 801606e:	9a01      	ldr	r2, [sp, #4]
 8016070:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016074:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016078:	425a      	negs	r2, r3
 801607a:	415a      	adcs	r2, r3
 801607c:	602a      	str	r2, [r5, #0]
 801607e:	e7ee      	b.n	801605e <__swhatbuf_r+0x1e>
 8016080:	2340      	movs	r3, #64	; 0x40
 8016082:	2000      	movs	r0, #0
 8016084:	6023      	str	r3, [r4, #0]
 8016086:	b016      	add	sp, #88	; 0x58
 8016088:	bd70      	pop	{r4, r5, r6, pc}
	...

0801608c <__smakebuf_r>:
 801608c:	898b      	ldrh	r3, [r1, #12]
 801608e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016090:	079d      	lsls	r5, r3, #30
 8016092:	4606      	mov	r6, r0
 8016094:	460c      	mov	r4, r1
 8016096:	d507      	bpl.n	80160a8 <__smakebuf_r+0x1c>
 8016098:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801609c:	6023      	str	r3, [r4, #0]
 801609e:	6123      	str	r3, [r4, #16]
 80160a0:	2301      	movs	r3, #1
 80160a2:	6163      	str	r3, [r4, #20]
 80160a4:	b002      	add	sp, #8
 80160a6:	bd70      	pop	{r4, r5, r6, pc}
 80160a8:	466a      	mov	r2, sp
 80160aa:	ab01      	add	r3, sp, #4
 80160ac:	f7ff ffc8 	bl	8016040 <__swhatbuf_r>
 80160b0:	9900      	ldr	r1, [sp, #0]
 80160b2:	4605      	mov	r5, r0
 80160b4:	4630      	mov	r0, r6
 80160b6:	f7ff fa51 	bl	801555c <_malloc_r>
 80160ba:	b948      	cbnz	r0, 80160d0 <__smakebuf_r+0x44>
 80160bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80160c0:	059a      	lsls	r2, r3, #22
 80160c2:	d4ef      	bmi.n	80160a4 <__smakebuf_r+0x18>
 80160c4:	f023 0303 	bic.w	r3, r3, #3
 80160c8:	f043 0302 	orr.w	r3, r3, #2
 80160cc:	81a3      	strh	r3, [r4, #12]
 80160ce:	e7e3      	b.n	8016098 <__smakebuf_r+0xc>
 80160d0:	4b0d      	ldr	r3, [pc, #52]	; (8016108 <__smakebuf_r+0x7c>)
 80160d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80160d4:	89a3      	ldrh	r3, [r4, #12]
 80160d6:	6020      	str	r0, [r4, #0]
 80160d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80160dc:	81a3      	strh	r3, [r4, #12]
 80160de:	9b00      	ldr	r3, [sp, #0]
 80160e0:	6120      	str	r0, [r4, #16]
 80160e2:	6163      	str	r3, [r4, #20]
 80160e4:	9b01      	ldr	r3, [sp, #4]
 80160e6:	b15b      	cbz	r3, 8016100 <__smakebuf_r+0x74>
 80160e8:	4630      	mov	r0, r6
 80160ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80160ee:	f000 f88f 	bl	8016210 <_isatty_r>
 80160f2:	b128      	cbz	r0, 8016100 <__smakebuf_r+0x74>
 80160f4:	89a3      	ldrh	r3, [r4, #12]
 80160f6:	f023 0303 	bic.w	r3, r3, #3
 80160fa:	f043 0301 	orr.w	r3, r3, #1
 80160fe:	81a3      	strh	r3, [r4, #12]
 8016100:	89a0      	ldrh	r0, [r4, #12]
 8016102:	4305      	orrs	r5, r0
 8016104:	81a5      	strh	r5, [r4, #12]
 8016106:	e7cd      	b.n	80160a4 <__smakebuf_r+0x18>
 8016108:	08014225 	.word	0x08014225

0801610c <memmove>:
 801610c:	4288      	cmp	r0, r1
 801610e:	b510      	push	{r4, lr}
 8016110:	eb01 0402 	add.w	r4, r1, r2
 8016114:	d902      	bls.n	801611c <memmove+0x10>
 8016116:	4284      	cmp	r4, r0
 8016118:	4623      	mov	r3, r4
 801611a:	d807      	bhi.n	801612c <memmove+0x20>
 801611c:	1e43      	subs	r3, r0, #1
 801611e:	42a1      	cmp	r1, r4
 8016120:	d008      	beq.n	8016134 <memmove+0x28>
 8016122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016126:	f803 2f01 	strb.w	r2, [r3, #1]!
 801612a:	e7f8      	b.n	801611e <memmove+0x12>
 801612c:	4601      	mov	r1, r0
 801612e:	4402      	add	r2, r0
 8016130:	428a      	cmp	r2, r1
 8016132:	d100      	bne.n	8016136 <memmove+0x2a>
 8016134:	bd10      	pop	{r4, pc}
 8016136:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801613a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801613e:	e7f7      	b.n	8016130 <memmove+0x24>

08016140 <__malloc_lock>:
 8016140:	4801      	ldr	r0, [pc, #4]	; (8016148 <__malloc_lock+0x8>)
 8016142:	f7fe bcac 	b.w	8014a9e <__retarget_lock_acquire_recursive>
 8016146:	bf00      	nop
 8016148:	200070bc 	.word	0x200070bc

0801614c <__malloc_unlock>:
 801614c:	4801      	ldr	r0, [pc, #4]	; (8016154 <__malloc_unlock+0x8>)
 801614e:	f7fe bca7 	b.w	8014aa0 <__retarget_lock_release_recursive>
 8016152:	bf00      	nop
 8016154:	200070bc 	.word	0x200070bc

08016158 <_realloc_r>:
 8016158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801615c:	4680      	mov	r8, r0
 801615e:	4614      	mov	r4, r2
 8016160:	460e      	mov	r6, r1
 8016162:	b921      	cbnz	r1, 801616e <_realloc_r+0x16>
 8016164:	4611      	mov	r1, r2
 8016166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801616a:	f7ff b9f7 	b.w	801555c <_malloc_r>
 801616e:	b92a      	cbnz	r2, 801617c <_realloc_r+0x24>
 8016170:	f7ff f98c 	bl	801548c <_free_r>
 8016174:	4625      	mov	r5, r4
 8016176:	4628      	mov	r0, r5
 8016178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801617c:	f000 f858 	bl	8016230 <_malloc_usable_size_r>
 8016180:	4284      	cmp	r4, r0
 8016182:	4607      	mov	r7, r0
 8016184:	d802      	bhi.n	801618c <_realloc_r+0x34>
 8016186:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801618a:	d812      	bhi.n	80161b2 <_realloc_r+0x5a>
 801618c:	4621      	mov	r1, r4
 801618e:	4640      	mov	r0, r8
 8016190:	f7ff f9e4 	bl	801555c <_malloc_r>
 8016194:	4605      	mov	r5, r0
 8016196:	2800      	cmp	r0, #0
 8016198:	d0ed      	beq.n	8016176 <_realloc_r+0x1e>
 801619a:	42bc      	cmp	r4, r7
 801619c:	4622      	mov	r2, r4
 801619e:	4631      	mov	r1, r6
 80161a0:	bf28      	it	cs
 80161a2:	463a      	movcs	r2, r7
 80161a4:	f7fb fc3c 	bl	8011a20 <memcpy>
 80161a8:	4631      	mov	r1, r6
 80161aa:	4640      	mov	r0, r8
 80161ac:	f7ff f96e 	bl	801548c <_free_r>
 80161b0:	e7e1      	b.n	8016176 <_realloc_r+0x1e>
 80161b2:	4635      	mov	r5, r6
 80161b4:	e7df      	b.n	8016176 <_realloc_r+0x1e>
	...

080161b8 <_read_r>:
 80161b8:	b538      	push	{r3, r4, r5, lr}
 80161ba:	4604      	mov	r4, r0
 80161bc:	4608      	mov	r0, r1
 80161be:	4611      	mov	r1, r2
 80161c0:	2200      	movs	r2, #0
 80161c2:	4d05      	ldr	r5, [pc, #20]	; (80161d8 <_read_r+0x20>)
 80161c4:	602a      	str	r2, [r5, #0]
 80161c6:	461a      	mov	r2, r3
 80161c8:	f7ec fa4e 	bl	8002668 <_read>
 80161cc:	1c43      	adds	r3, r0, #1
 80161ce:	d102      	bne.n	80161d6 <_read_r+0x1e>
 80161d0:	682b      	ldr	r3, [r5, #0]
 80161d2:	b103      	cbz	r3, 80161d6 <_read_r+0x1e>
 80161d4:	6023      	str	r3, [r4, #0]
 80161d6:	bd38      	pop	{r3, r4, r5, pc}
 80161d8:	200070b8 	.word	0x200070b8

080161dc <abort>:
 80161dc:	2006      	movs	r0, #6
 80161de:	b508      	push	{r3, lr}
 80161e0:	f000 f856 	bl	8016290 <raise>
 80161e4:	2001      	movs	r0, #1
 80161e6:	f7ec fa35 	bl	8002654 <_exit>
	...

080161ec <_fstat_r>:
 80161ec:	b538      	push	{r3, r4, r5, lr}
 80161ee:	2300      	movs	r3, #0
 80161f0:	4d06      	ldr	r5, [pc, #24]	; (801620c <_fstat_r+0x20>)
 80161f2:	4604      	mov	r4, r0
 80161f4:	4608      	mov	r0, r1
 80161f6:	4611      	mov	r1, r2
 80161f8:	602b      	str	r3, [r5, #0]
 80161fa:	f7ec fa79 	bl	80026f0 <_fstat>
 80161fe:	1c43      	adds	r3, r0, #1
 8016200:	d102      	bne.n	8016208 <_fstat_r+0x1c>
 8016202:	682b      	ldr	r3, [r5, #0]
 8016204:	b103      	cbz	r3, 8016208 <_fstat_r+0x1c>
 8016206:	6023      	str	r3, [r4, #0]
 8016208:	bd38      	pop	{r3, r4, r5, pc}
 801620a:	bf00      	nop
 801620c:	200070b8 	.word	0x200070b8

08016210 <_isatty_r>:
 8016210:	b538      	push	{r3, r4, r5, lr}
 8016212:	2300      	movs	r3, #0
 8016214:	4d05      	ldr	r5, [pc, #20]	; (801622c <_isatty_r+0x1c>)
 8016216:	4604      	mov	r4, r0
 8016218:	4608      	mov	r0, r1
 801621a:	602b      	str	r3, [r5, #0]
 801621c:	f7ec fa77 	bl	800270e <_isatty>
 8016220:	1c43      	adds	r3, r0, #1
 8016222:	d102      	bne.n	801622a <_isatty_r+0x1a>
 8016224:	682b      	ldr	r3, [r5, #0]
 8016226:	b103      	cbz	r3, 801622a <_isatty_r+0x1a>
 8016228:	6023      	str	r3, [r4, #0]
 801622a:	bd38      	pop	{r3, r4, r5, pc}
 801622c:	200070b8 	.word	0x200070b8

08016230 <_malloc_usable_size_r>:
 8016230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016234:	1f18      	subs	r0, r3, #4
 8016236:	2b00      	cmp	r3, #0
 8016238:	bfbc      	itt	lt
 801623a:	580b      	ldrlt	r3, [r1, r0]
 801623c:	18c0      	addlt	r0, r0, r3
 801623e:	4770      	bx	lr

08016240 <_raise_r>:
 8016240:	291f      	cmp	r1, #31
 8016242:	b538      	push	{r3, r4, r5, lr}
 8016244:	4604      	mov	r4, r0
 8016246:	460d      	mov	r5, r1
 8016248:	d904      	bls.n	8016254 <_raise_r+0x14>
 801624a:	2316      	movs	r3, #22
 801624c:	6003      	str	r3, [r0, #0]
 801624e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016252:	bd38      	pop	{r3, r4, r5, pc}
 8016254:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016256:	b112      	cbz	r2, 801625e <_raise_r+0x1e>
 8016258:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801625c:	b94b      	cbnz	r3, 8016272 <_raise_r+0x32>
 801625e:	4620      	mov	r0, r4
 8016260:	f000 f830 	bl	80162c4 <_getpid_r>
 8016264:	462a      	mov	r2, r5
 8016266:	4601      	mov	r1, r0
 8016268:	4620      	mov	r0, r4
 801626a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801626e:	f000 b817 	b.w	80162a0 <_kill_r>
 8016272:	2b01      	cmp	r3, #1
 8016274:	d00a      	beq.n	801628c <_raise_r+0x4c>
 8016276:	1c59      	adds	r1, r3, #1
 8016278:	d103      	bne.n	8016282 <_raise_r+0x42>
 801627a:	2316      	movs	r3, #22
 801627c:	6003      	str	r3, [r0, #0]
 801627e:	2001      	movs	r0, #1
 8016280:	e7e7      	b.n	8016252 <_raise_r+0x12>
 8016282:	2400      	movs	r4, #0
 8016284:	4628      	mov	r0, r5
 8016286:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801628a:	4798      	blx	r3
 801628c:	2000      	movs	r0, #0
 801628e:	e7e0      	b.n	8016252 <_raise_r+0x12>

08016290 <raise>:
 8016290:	4b02      	ldr	r3, [pc, #8]	; (801629c <raise+0xc>)
 8016292:	4601      	mov	r1, r0
 8016294:	6818      	ldr	r0, [r3, #0]
 8016296:	f7ff bfd3 	b.w	8016240 <_raise_r>
 801629a:	bf00      	nop
 801629c:	20000038 	.word	0x20000038

080162a0 <_kill_r>:
 80162a0:	b538      	push	{r3, r4, r5, lr}
 80162a2:	2300      	movs	r3, #0
 80162a4:	4d06      	ldr	r5, [pc, #24]	; (80162c0 <_kill_r+0x20>)
 80162a6:	4604      	mov	r4, r0
 80162a8:	4608      	mov	r0, r1
 80162aa:	4611      	mov	r1, r2
 80162ac:	602b      	str	r3, [r5, #0]
 80162ae:	f7ec f9bf 	bl	8002630 <_kill>
 80162b2:	1c43      	adds	r3, r0, #1
 80162b4:	d102      	bne.n	80162bc <_kill_r+0x1c>
 80162b6:	682b      	ldr	r3, [r5, #0]
 80162b8:	b103      	cbz	r3, 80162bc <_kill_r+0x1c>
 80162ba:	6023      	str	r3, [r4, #0]
 80162bc:	bd38      	pop	{r3, r4, r5, pc}
 80162be:	bf00      	nop
 80162c0:	200070b8 	.word	0x200070b8

080162c4 <_getpid_r>:
 80162c4:	f7ec b9ac 	b.w	8002620 <_getpid>

080162c8 <_init>:
 80162c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162ca:	bf00      	nop
 80162cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162ce:	bc08      	pop	{r3}
 80162d0:	469e      	mov	lr, r3
 80162d2:	4770      	bx	lr

080162d4 <_fini>:
 80162d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162d6:	bf00      	nop
 80162d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162da:	bc08      	pop	{r3}
 80162dc:	469e      	mov	lr, r3
 80162de:	4770      	bx	lr
