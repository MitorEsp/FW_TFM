
TFM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015ff0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002594  08016178  08016178  00026178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801870c  0801870c  0003020c  2**0
                  CONTENTS
  4 .ARM          00000008  0801870c  0801870c  0002870c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018714  08018714  0003020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018714  08018714  00028714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018718  08018718  00028718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0801871c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006eb8  20000210  08018928  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200070c8  08018928  000370c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f35e  00000000  00000000  00030235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054cf  00000000  00000000  0004f593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  00054a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001530  00000000  00000000  00056118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cb2e  00000000  00000000  00057648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027fe3  00000000  00000000  00084176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de5e0  00000000  00000000  000ac159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018a739  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007640  00000000  00000000  0018a78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000210 	.word	0x20000210
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08016160 	.word	0x08016160

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000214 	.word	0x20000214
 80001c4:	08016160 	.word	0x08016160

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_frsub>:
 8000bf4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	e002      	b.n	8000c00 <__addsf3>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_fsub>:
 8000bfc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c00 <__addsf3>:
 8000c00:	0042      	lsls	r2, r0, #1
 8000c02:	bf1f      	itttt	ne
 8000c04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c08:	ea92 0f03 	teqne	r2, r3
 8000c0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c14:	d06a      	beq.n	8000cec <__addsf3+0xec>
 8000c16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1e:	bfc1      	itttt	gt
 8000c20:	18d2      	addgt	r2, r2, r3
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	4048      	eorgt	r0, r1
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	bfb8      	it	lt
 8000c2a:	425b      	neglt	r3, r3
 8000c2c:	2b19      	cmp	r3, #25
 8000c2e:	bf88      	it	hi
 8000c30:	4770      	bxhi	lr
 8000c32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3e:	bf18      	it	ne
 8000c40:	4240      	negne	r0, r0
 8000c42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4e:	bf18      	it	ne
 8000c50:	4249      	negne	r1, r1
 8000c52:	ea92 0f03 	teq	r2, r3
 8000c56:	d03f      	beq.n	8000cd8 <__addsf3+0xd8>
 8000c58:	f1a2 0201 	sub.w	r2, r2, #1
 8000c5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c60:	eb10 000c 	adds.w	r0, r0, ip
 8000c64:	f1c3 0320 	rsb	r3, r3, #32
 8000c68:	fa01 f103 	lsl.w	r1, r1, r3
 8000c6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__addsf3+0x78>
 8000c72:	4249      	negs	r1, r1
 8000c74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c7c:	d313      	bcc.n	8000ca6 <__addsf3+0xa6>
 8000c7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c82:	d306      	bcc.n	8000c92 <__addsf3+0x92>
 8000c84:	0840      	lsrs	r0, r0, #1
 8000c86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8a:	f102 0201 	add.w	r2, r2, #1
 8000c8e:	2afe      	cmp	r2, #254	; 0xfe
 8000c90:	d251      	bcs.n	8000d36 <__addsf3+0x136>
 8000c92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9a:	bf08      	it	eq
 8000c9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ca0:	ea40 0003 	orr.w	r0, r0, r3
 8000ca4:	4770      	bx	lr
 8000ca6:	0049      	lsls	r1, r1, #1
 8000ca8:	eb40 0000 	adc.w	r0, r0, r0
 8000cac:	3a01      	subs	r2, #1
 8000cae:	bf28      	it	cs
 8000cb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb4:	d2ed      	bcs.n	8000c92 <__addsf3+0x92>
 8000cb6:	fab0 fc80 	clz	ip, r0
 8000cba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc6:	bfaa      	itet	ge
 8000cc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ccc:	4252      	neglt	r2, r2
 8000cce:	4318      	orrge	r0, r3
 8000cd0:	bfbc      	itt	lt
 8000cd2:	40d0      	lsrlt	r0, r2
 8000cd4:	4318      	orrlt	r0, r3
 8000cd6:	4770      	bx	lr
 8000cd8:	f092 0f00 	teq	r2, #0
 8000cdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ce0:	bf06      	itte	eq
 8000ce2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce6:	3201      	addeq	r2, #1
 8000ce8:	3b01      	subne	r3, #1
 8000cea:	e7b5      	b.n	8000c58 <__addsf3+0x58>
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d021      	beq.n	8000d40 <__addsf3+0x140>
 8000cfc:	ea92 0f03 	teq	r2, r3
 8000d00:	d004      	beq.n	8000d0c <__addsf3+0x10c>
 8000d02:	f092 0f00 	teq	r2, #0
 8000d06:	bf08      	it	eq
 8000d08:	4608      	moveq	r0, r1
 8000d0a:	4770      	bx	lr
 8000d0c:	ea90 0f01 	teq	r0, r1
 8000d10:	bf1c      	itt	ne
 8000d12:	2000      	movne	r0, #0
 8000d14:	4770      	bxne	lr
 8000d16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d1a:	d104      	bne.n	8000d26 <__addsf3+0x126>
 8000d1c:	0040      	lsls	r0, r0, #1
 8000d1e:	bf28      	it	cs
 8000d20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d2a:	bf3c      	itt	cc
 8000d2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d30:	4770      	bxcc	lr
 8000d32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3e:	4770      	bx	lr
 8000d40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d44:	bf16      	itet	ne
 8000d46:	4608      	movne	r0, r1
 8000d48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d4c:	4601      	movne	r1, r0
 8000d4e:	0242      	lsls	r2, r0, #9
 8000d50:	bf06      	itte	eq
 8000d52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d56:	ea90 0f01 	teqeq	r0, r1
 8000d5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_ui2f>:
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e004      	b.n	8000d70 <__aeabi_i2f+0x8>
 8000d66:	bf00      	nop

08000d68 <__aeabi_i2f>:
 8000d68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d6c:	bf48      	it	mi
 8000d6e:	4240      	negmi	r0, r0
 8000d70:	ea5f 0c00 	movs.w	ip, r0
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	e01c      	b.n	8000dbe <__aeabi_l2f+0x2a>

08000d84 <__aeabi_ul2f>:
 8000d84:	ea50 0201 	orrs.w	r2, r0, r1
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e00a      	b.n	8000da8 <__aeabi_l2f+0x14>
 8000d92:	bf00      	nop

08000d94 <__aeabi_l2f>:
 8000d94:	ea50 0201 	orrs.w	r2, r0, r1
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000da0:	d502      	bpl.n	8000da8 <__aeabi_l2f+0x14>
 8000da2:	4240      	negs	r0, r0
 8000da4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da8:	ea5f 0c01 	movs.w	ip, r1
 8000dac:	bf02      	ittt	eq
 8000dae:	4684      	moveq	ip, r0
 8000db0:	4601      	moveq	r1, r0
 8000db2:	2000      	moveq	r0, #0
 8000db4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db8:	bf08      	it	eq
 8000dba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dc2:	fabc f28c 	clz	r2, ip
 8000dc6:	3a08      	subs	r2, #8
 8000dc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dcc:	db10      	blt.n	8000df0 <__aeabi_l2f+0x5c>
 8000dce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd8:	f1c2 0220 	rsb	r2, r2, #32
 8000ddc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000de0:	fa20 f202 	lsr.w	r2, r0, r2
 8000de4:	eb43 0002 	adc.w	r0, r3, r2
 8000de8:	bf08      	it	eq
 8000dea:	f020 0001 	biceq.w	r0, r0, #1
 8000dee:	4770      	bx	lr
 8000df0:	f102 0220 	add.w	r2, r2, #32
 8000df4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df8:	f1c2 0220 	rsb	r2, r2, #32
 8000dfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e00:	fa21 f202 	lsr.w	r2, r1, r2
 8000e04:	eb43 0002 	adc.w	r0, r3, r2
 8000e08:	bf08      	it	eq
 8000e0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_fmul>:
 8000e10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e18:	bf1e      	ittt	ne
 8000e1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1e:	ea92 0f0c 	teqne	r2, ip
 8000e22:	ea93 0f0c 	teqne	r3, ip
 8000e26:	d06f      	beq.n	8000f08 <__aeabi_fmul+0xf8>
 8000e28:	441a      	add	r2, r3
 8000e2a:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2e:	0240      	lsls	r0, r0, #9
 8000e30:	bf18      	it	ne
 8000e32:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e36:	d01e      	beq.n	8000e76 <__aeabi_fmul+0x66>
 8000e38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e3c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e40:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e44:	fba0 3101 	umull	r3, r1, r0, r1
 8000e48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e4c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e50:	bf3e      	ittt	cc
 8000e52:	0049      	lslcc	r1, r1, #1
 8000e54:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e58:	005b      	lslcc	r3, r3, #1
 8000e5a:	ea40 0001 	orr.w	r0, r0, r1
 8000e5e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e62:	2afd      	cmp	r2, #253	; 0xfd
 8000e64:	d81d      	bhi.n	8000ea2 <__aeabi_fmul+0x92>
 8000e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e6e:	bf08      	it	eq
 8000e70:	f020 0001 	biceq.w	r0, r0, #1
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e7e:	bf08      	it	eq
 8000e80:	0249      	lsleq	r1, r1, #9
 8000e82:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e86:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8a:	3a7f      	subs	r2, #127	; 0x7f
 8000e8c:	bfc2      	ittt	gt
 8000e8e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e92:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e96:	4770      	bxgt	lr
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	3a01      	subs	r2, #1
 8000ea2:	dc5d      	bgt.n	8000f60 <__aeabi_fmul+0x150>
 8000ea4:	f112 0f19 	cmn.w	r2, #25
 8000ea8:	bfdc      	itt	le
 8000eaa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eae:	4770      	bxle	lr
 8000eb0:	f1c2 0200 	rsb	r2, r2, #0
 8000eb4:	0041      	lsls	r1, r0, #1
 8000eb6:	fa21 f102 	lsr.w	r1, r1, r2
 8000eba:	f1c2 0220 	rsb	r2, r2, #32
 8000ebe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ec6:	f140 0000 	adc.w	r0, r0, #0
 8000eca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ece:	bf08      	it	eq
 8000ed0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed4:	4770      	bx	lr
 8000ed6:	f092 0f00 	teq	r2, #0
 8000eda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ede:	bf02      	ittt	eq
 8000ee0:	0040      	lsleq	r0, r0, #1
 8000ee2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ee6:	3a01      	subeq	r2, #1
 8000ee8:	d0f9      	beq.n	8000ede <__aeabi_fmul+0xce>
 8000eea:	ea40 000c 	orr.w	r0, r0, ip
 8000eee:	f093 0f00 	teq	r3, #0
 8000ef2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef6:	bf02      	ittt	eq
 8000ef8:	0049      	lsleq	r1, r1, #1
 8000efa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000efe:	3b01      	subeq	r3, #1
 8000f00:	d0f9      	beq.n	8000ef6 <__aeabi_fmul+0xe6>
 8000f02:	ea41 010c 	orr.w	r1, r1, ip
 8000f06:	e78f      	b.n	8000e28 <__aeabi_fmul+0x18>
 8000f08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f0c:	ea92 0f0c 	teq	r2, ip
 8000f10:	bf18      	it	ne
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d00a      	beq.n	8000f2e <__aeabi_fmul+0x11e>
 8000f18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f1c:	bf18      	it	ne
 8000f1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f22:	d1d8      	bne.n	8000ed6 <__aeabi_fmul+0xc6>
 8000f24:	ea80 0001 	eor.w	r0, r0, r1
 8000f28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f2c:	4770      	bx	lr
 8000f2e:	f090 0f00 	teq	r0, #0
 8000f32:	bf17      	itett	ne
 8000f34:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f38:	4608      	moveq	r0, r1
 8000f3a:	f091 0f00 	teqne	r1, #0
 8000f3e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f42:	d014      	beq.n	8000f6e <__aeabi_fmul+0x15e>
 8000f44:	ea92 0f0c 	teq	r2, ip
 8000f48:	d101      	bne.n	8000f4e <__aeabi_fmul+0x13e>
 8000f4a:	0242      	lsls	r2, r0, #9
 8000f4c:	d10f      	bne.n	8000f6e <__aeabi_fmul+0x15e>
 8000f4e:	ea93 0f0c 	teq	r3, ip
 8000f52:	d103      	bne.n	8000f5c <__aeabi_fmul+0x14c>
 8000f54:	024b      	lsls	r3, r1, #9
 8000f56:	bf18      	it	ne
 8000f58:	4608      	movne	r0, r1
 8000f5a:	d108      	bne.n	8000f6e <__aeabi_fmul+0x15e>
 8000f5c:	ea80 0001 	eor.w	r0, r0, r1
 8000f60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f6c:	4770      	bx	lr
 8000f6e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f72:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f76:	4770      	bx	lr

08000f78 <__aeabi_fdiv>:
 8000f78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f80:	bf1e      	ittt	ne
 8000f82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f86:	ea92 0f0c 	teqne	r2, ip
 8000f8a:	ea93 0f0c 	teqne	r3, ip
 8000f8e:	d069      	beq.n	8001064 <__aeabi_fdiv+0xec>
 8000f90:	eba2 0203 	sub.w	r2, r2, r3
 8000f94:	ea80 0c01 	eor.w	ip, r0, r1
 8000f98:	0249      	lsls	r1, r1, #9
 8000f9a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f9e:	d037      	beq.n	8001010 <__aeabi_fdiv+0x98>
 8000fa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fa4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fa8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fb0:	428b      	cmp	r3, r1
 8000fb2:	bf38      	it	cc
 8000fb4:	005b      	lslcc	r3, r3, #1
 8000fb6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fbe:	428b      	cmp	r3, r1
 8000fc0:	bf24      	itt	cs
 8000fc2:	1a5b      	subcs	r3, r3, r1
 8000fc4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fc8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fcc:	bf24      	itt	cs
 8000fce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fd6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fda:	bf24      	itt	cs
 8000fdc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fe8:	bf24      	itt	cs
 8000fea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	bf18      	it	ne
 8000ff6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffa:	d1e0      	bne.n	8000fbe <__aeabi_fdiv+0x46>
 8000ffc:	2afd      	cmp	r2, #253	; 0xfd
 8000ffe:	f63f af50 	bhi.w	8000ea2 <__aeabi_fmul+0x92>
 8001002:	428b      	cmp	r3, r1
 8001004:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001008:	bf08      	it	eq
 800100a:	f020 0001 	biceq.w	r0, r0, #1
 800100e:	4770      	bx	lr
 8001010:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001014:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001018:	327f      	adds	r2, #127	; 0x7f
 800101a:	bfc2      	ittt	gt
 800101c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001020:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001024:	4770      	bxgt	lr
 8001026:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	3a01      	subs	r2, #1
 8001030:	e737      	b.n	8000ea2 <__aeabi_fmul+0x92>
 8001032:	f092 0f00 	teq	r2, #0
 8001036:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800103a:	bf02      	ittt	eq
 800103c:	0040      	lsleq	r0, r0, #1
 800103e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001042:	3a01      	subeq	r2, #1
 8001044:	d0f9      	beq.n	800103a <__aeabi_fdiv+0xc2>
 8001046:	ea40 000c 	orr.w	r0, r0, ip
 800104a:	f093 0f00 	teq	r3, #0
 800104e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001052:	bf02      	ittt	eq
 8001054:	0049      	lsleq	r1, r1, #1
 8001056:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800105a:	3b01      	subeq	r3, #1
 800105c:	d0f9      	beq.n	8001052 <__aeabi_fdiv+0xda>
 800105e:	ea41 010c 	orr.w	r1, r1, ip
 8001062:	e795      	b.n	8000f90 <__aeabi_fdiv+0x18>
 8001064:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001068:	ea92 0f0c 	teq	r2, ip
 800106c:	d108      	bne.n	8001080 <__aeabi_fdiv+0x108>
 800106e:	0242      	lsls	r2, r0, #9
 8001070:	f47f af7d 	bne.w	8000f6e <__aeabi_fmul+0x15e>
 8001074:	ea93 0f0c 	teq	r3, ip
 8001078:	f47f af70 	bne.w	8000f5c <__aeabi_fmul+0x14c>
 800107c:	4608      	mov	r0, r1
 800107e:	e776      	b.n	8000f6e <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	d104      	bne.n	8001090 <__aeabi_fdiv+0x118>
 8001086:	024b      	lsls	r3, r1, #9
 8001088:	f43f af4c 	beq.w	8000f24 <__aeabi_fmul+0x114>
 800108c:	4608      	mov	r0, r1
 800108e:	e76e      	b.n	8000f6e <__aeabi_fmul+0x15e>
 8001090:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001094:	bf18      	it	ne
 8001096:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800109a:	d1ca      	bne.n	8001032 <__aeabi_fdiv+0xba>
 800109c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010a0:	f47f af5c 	bne.w	8000f5c <__aeabi_fmul+0x14c>
 80010a4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010a8:	f47f af3c 	bne.w	8000f24 <__aeabi_fmul+0x114>
 80010ac:	e75f      	b.n	8000f6e <__aeabi_fmul+0x15e>
 80010ae:	bf00      	nop

080010b0 <__gesf2>:
 80010b0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80010b4:	e006      	b.n	80010c4 <__cmpsf2+0x4>
 80010b6:	bf00      	nop

080010b8 <__lesf2>:
 80010b8:	f04f 0c01 	mov.w	ip, #1
 80010bc:	e002      	b.n	80010c4 <__cmpsf2+0x4>
 80010be:	bf00      	nop

080010c0 <__cmpsf2>:
 80010c0:	f04f 0c01 	mov.w	ip, #1
 80010c4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	bf18      	it	ne
 80010d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010da:	d011      	beq.n	8001100 <__cmpsf2+0x40>
 80010dc:	b001      	add	sp, #4
 80010de:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010e2:	bf18      	it	ne
 80010e4:	ea90 0f01 	teqne	r0, r1
 80010e8:	bf58      	it	pl
 80010ea:	ebb2 0003 	subspl.w	r0, r2, r3
 80010ee:	bf88      	it	hi
 80010f0:	17c8      	asrhi	r0, r1, #31
 80010f2:	bf38      	it	cc
 80010f4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010f8:	bf18      	it	ne
 80010fa:	f040 0001 	orrne.w	r0, r0, #1
 80010fe:	4770      	bx	lr
 8001100:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001104:	d102      	bne.n	800110c <__cmpsf2+0x4c>
 8001106:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110a:	d105      	bne.n	8001118 <__cmpsf2+0x58>
 800110c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001110:	d1e4      	bne.n	80010dc <__cmpsf2+0x1c>
 8001112:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001116:	d0e1      	beq.n	80010dc <__cmpsf2+0x1c>
 8001118:	f85d 0b04 	ldr.w	r0, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <__aeabi_cfrcmple>:
 8001120:	4684      	mov	ip, r0
 8001122:	4608      	mov	r0, r1
 8001124:	4661      	mov	r1, ip
 8001126:	e7ff      	b.n	8001128 <__aeabi_cfcmpeq>

08001128 <__aeabi_cfcmpeq>:
 8001128:	b50f      	push	{r0, r1, r2, r3, lr}
 800112a:	f7ff ffc9 	bl	80010c0 <__cmpsf2>
 800112e:	2800      	cmp	r0, #0
 8001130:	bf48      	it	mi
 8001132:	f110 0f00 	cmnmi.w	r0, #0
 8001136:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001138 <__aeabi_fcmpeq>:
 8001138:	f84d ed08 	str.w	lr, [sp, #-8]!
 800113c:	f7ff fff4 	bl	8001128 <__aeabi_cfcmpeq>
 8001140:	bf0c      	ite	eq
 8001142:	2001      	moveq	r0, #1
 8001144:	2000      	movne	r0, #0
 8001146:	f85d fb08 	ldr.w	pc, [sp], #8
 800114a:	bf00      	nop

0800114c <__aeabi_fcmplt>:
 800114c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001150:	f7ff ffea 	bl	8001128 <__aeabi_cfcmpeq>
 8001154:	bf34      	ite	cc
 8001156:	2001      	movcc	r0, #1
 8001158:	2000      	movcs	r0, #0
 800115a:	f85d fb08 	ldr.w	pc, [sp], #8
 800115e:	bf00      	nop

08001160 <__aeabi_fcmple>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff ffe0 	bl	8001128 <__aeabi_cfcmpeq>
 8001168:	bf94      	ite	ls
 800116a:	2001      	movls	r0, #1
 800116c:	2000      	movhi	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmpge>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffd2 	bl	8001120 <__aeabi_cfrcmple>
 800117c:	bf94      	ite	ls
 800117e:	2001      	movls	r0, #1
 8001180:	2000      	movhi	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmpgt>:
 8001188:	f84d ed08 	str.w	lr, [sp, #-8]!
 800118c:	f7ff ffc8 	bl	8001120 <__aeabi_cfrcmple>
 8001190:	bf34      	ite	cc
 8001192:	2001      	movcc	r0, #1
 8001194:	2000      	movcs	r0, #0
 8001196:	f85d fb08 	ldr.w	pc, [sp], #8
 800119a:	bf00      	nop

0800119c <__aeabi_uldivmod>:
 800119c:	b953      	cbnz	r3, 80011b4 <__aeabi_uldivmod+0x18>
 800119e:	b94a      	cbnz	r2, 80011b4 <__aeabi_uldivmod+0x18>
 80011a0:	2900      	cmp	r1, #0
 80011a2:	bf08      	it	eq
 80011a4:	2800      	cmpeq	r0, #0
 80011a6:	bf1c      	itt	ne
 80011a8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80011ac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80011b0:	f000 b9ae 	b.w	8001510 <__aeabi_idiv0>
 80011b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011bc:	f000 f83e 	bl	800123c <__udivmoddi4>
 80011c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011c8:	b004      	add	sp, #16
 80011ca:	4770      	bx	lr

080011cc <__aeabi_d2lz>:
 80011cc:	b538      	push	{r3, r4, r5, lr}
 80011ce:	4605      	mov	r5, r0
 80011d0:	460c      	mov	r4, r1
 80011d2:	2200      	movs	r2, #0
 80011d4:	2300      	movs	r3, #0
 80011d6:	4628      	mov	r0, r5
 80011d8:	4621      	mov	r1, r4
 80011da:	f7ff fc35 	bl	8000a48 <__aeabi_dcmplt>
 80011de:	b928      	cbnz	r0, 80011ec <__aeabi_d2lz+0x20>
 80011e0:	4628      	mov	r0, r5
 80011e2:	4621      	mov	r1, r4
 80011e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e8:	f000 b80a 	b.w	8001200 <__aeabi_d2ulz>
 80011ec:	4628      	mov	r0, r5
 80011ee:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011f2:	f000 f805 	bl	8001200 <__aeabi_d2ulz>
 80011f6:	4240      	negs	r0, r0
 80011f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011fc:	bd38      	pop	{r3, r4, r5, pc}
 80011fe:	bf00      	nop

08001200 <__aeabi_d2ulz>:
 8001200:	b5d0      	push	{r4, r6, r7, lr}
 8001202:	2200      	movs	r2, #0
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <__aeabi_d2ulz+0x34>)
 8001206:	4606      	mov	r6, r0
 8001208:	460f      	mov	r7, r1
 800120a:	f7ff f9ab 	bl	8000564 <__aeabi_dmul>
 800120e:	f7ff fc81 	bl	8000b14 <__aeabi_d2uiz>
 8001212:	4604      	mov	r4, r0
 8001214:	f7ff f92c 	bl	8000470 <__aeabi_ui2d>
 8001218:	2200      	movs	r2, #0
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <__aeabi_d2ulz+0x38>)
 800121c:	f7ff f9a2 	bl	8000564 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4630      	mov	r0, r6
 8001226:	4639      	mov	r1, r7
 8001228:	f7fe ffe4 	bl	80001f4 <__aeabi_dsub>
 800122c:	f7ff fc72 	bl	8000b14 <__aeabi_d2uiz>
 8001230:	4621      	mov	r1, r4
 8001232:	bdd0      	pop	{r4, r6, r7, pc}
 8001234:	3df00000 	.word	0x3df00000
 8001238:	41f00000 	.word	0x41f00000

0800123c <__udivmoddi4>:
 800123c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001240:	9e08      	ldr	r6, [sp, #32]
 8001242:	460d      	mov	r5, r1
 8001244:	4604      	mov	r4, r0
 8001246:	4688      	mov	r8, r1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d14d      	bne.n	80012e8 <__udivmoddi4+0xac>
 800124c:	428a      	cmp	r2, r1
 800124e:	4694      	mov	ip, r2
 8001250:	d968      	bls.n	8001324 <__udivmoddi4+0xe8>
 8001252:	fab2 f282 	clz	r2, r2
 8001256:	b152      	cbz	r2, 800126e <__udivmoddi4+0x32>
 8001258:	fa01 f302 	lsl.w	r3, r1, r2
 800125c:	f1c2 0120 	rsb	r1, r2, #32
 8001260:	fa20 f101 	lsr.w	r1, r0, r1
 8001264:	fa0c fc02 	lsl.w	ip, ip, r2
 8001268:	ea41 0803 	orr.w	r8, r1, r3
 800126c:	4094      	lsls	r4, r2
 800126e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001272:	fbb8 f7f1 	udiv	r7, r8, r1
 8001276:	fa1f fe8c 	uxth.w	lr, ip
 800127a:	fb01 8817 	mls	r8, r1, r7, r8
 800127e:	fb07 f00e 	mul.w	r0, r7, lr
 8001282:	0c23      	lsrs	r3, r4, #16
 8001284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001288:	4298      	cmp	r0, r3
 800128a:	d90a      	bls.n	80012a2 <__udivmoddi4+0x66>
 800128c:	eb1c 0303 	adds.w	r3, ip, r3
 8001290:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8001294:	f080 811e 	bcs.w	80014d4 <__udivmoddi4+0x298>
 8001298:	4298      	cmp	r0, r3
 800129a:	f240 811b 	bls.w	80014d4 <__udivmoddi4+0x298>
 800129e:	3f02      	subs	r7, #2
 80012a0:	4463      	add	r3, ip
 80012a2:	1a1b      	subs	r3, r3, r0
 80012a4:	fbb3 f0f1 	udiv	r0, r3, r1
 80012a8:	fb01 3310 	mls	r3, r1, r0, r3
 80012ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80012b0:	b2a4      	uxth	r4, r4
 80012b2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012b6:	45a6      	cmp	lr, r4
 80012b8:	d90a      	bls.n	80012d0 <__udivmoddi4+0x94>
 80012ba:	eb1c 0404 	adds.w	r4, ip, r4
 80012be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80012c2:	f080 8109 	bcs.w	80014d8 <__udivmoddi4+0x29c>
 80012c6:	45a6      	cmp	lr, r4
 80012c8:	f240 8106 	bls.w	80014d8 <__udivmoddi4+0x29c>
 80012cc:	4464      	add	r4, ip
 80012ce:	3802      	subs	r0, #2
 80012d0:	2100      	movs	r1, #0
 80012d2:	eba4 040e 	sub.w	r4, r4, lr
 80012d6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80012da:	b11e      	cbz	r6, 80012e4 <__udivmoddi4+0xa8>
 80012dc:	2300      	movs	r3, #0
 80012de:	40d4      	lsrs	r4, r2
 80012e0:	e9c6 4300 	strd	r4, r3, [r6]
 80012e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e8:	428b      	cmp	r3, r1
 80012ea:	d908      	bls.n	80012fe <__udivmoddi4+0xc2>
 80012ec:	2e00      	cmp	r6, #0
 80012ee:	f000 80ee 	beq.w	80014ce <__udivmoddi4+0x292>
 80012f2:	2100      	movs	r1, #0
 80012f4:	e9c6 0500 	strd	r0, r5, [r6]
 80012f8:	4608      	mov	r0, r1
 80012fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012fe:	fab3 f183 	clz	r1, r3
 8001302:	2900      	cmp	r1, #0
 8001304:	d14a      	bne.n	800139c <__udivmoddi4+0x160>
 8001306:	42ab      	cmp	r3, r5
 8001308:	d302      	bcc.n	8001310 <__udivmoddi4+0xd4>
 800130a:	4282      	cmp	r2, r0
 800130c:	f200 80fc 	bhi.w	8001508 <__udivmoddi4+0x2cc>
 8001310:	1a84      	subs	r4, r0, r2
 8001312:	eb65 0303 	sbc.w	r3, r5, r3
 8001316:	2001      	movs	r0, #1
 8001318:	4698      	mov	r8, r3
 800131a:	2e00      	cmp	r6, #0
 800131c:	d0e2      	beq.n	80012e4 <__udivmoddi4+0xa8>
 800131e:	e9c6 4800 	strd	r4, r8, [r6]
 8001322:	e7df      	b.n	80012e4 <__udivmoddi4+0xa8>
 8001324:	b902      	cbnz	r2, 8001328 <__udivmoddi4+0xec>
 8001326:	deff      	udf	#255	; 0xff
 8001328:	fab2 f282 	clz	r2, r2
 800132c:	2a00      	cmp	r2, #0
 800132e:	f040 8091 	bne.w	8001454 <__udivmoddi4+0x218>
 8001332:	eba1 000c 	sub.w	r0, r1, ip
 8001336:	2101      	movs	r1, #1
 8001338:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800133c:	fa1f fe8c 	uxth.w	lr, ip
 8001340:	fbb0 f3f7 	udiv	r3, r0, r7
 8001344:	fb07 0013 	mls	r0, r7, r3, r0
 8001348:	0c25      	lsrs	r5, r4, #16
 800134a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800134e:	fb0e f003 	mul.w	r0, lr, r3
 8001352:	42a8      	cmp	r0, r5
 8001354:	d908      	bls.n	8001368 <__udivmoddi4+0x12c>
 8001356:	eb1c 0505 	adds.w	r5, ip, r5
 800135a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800135e:	d202      	bcs.n	8001366 <__udivmoddi4+0x12a>
 8001360:	42a8      	cmp	r0, r5
 8001362:	f200 80ce 	bhi.w	8001502 <__udivmoddi4+0x2c6>
 8001366:	4643      	mov	r3, r8
 8001368:	1a2d      	subs	r5, r5, r0
 800136a:	fbb5 f0f7 	udiv	r0, r5, r7
 800136e:	fb07 5510 	mls	r5, r7, r0, r5
 8001372:	fb0e fe00 	mul.w	lr, lr, r0
 8001376:	b2a4      	uxth	r4, r4
 8001378:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800137c:	45a6      	cmp	lr, r4
 800137e:	d908      	bls.n	8001392 <__udivmoddi4+0x156>
 8001380:	eb1c 0404 	adds.w	r4, ip, r4
 8001384:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001388:	d202      	bcs.n	8001390 <__udivmoddi4+0x154>
 800138a:	45a6      	cmp	lr, r4
 800138c:	f200 80b6 	bhi.w	80014fc <__udivmoddi4+0x2c0>
 8001390:	4628      	mov	r0, r5
 8001392:	eba4 040e 	sub.w	r4, r4, lr
 8001396:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800139a:	e79e      	b.n	80012da <__udivmoddi4+0x9e>
 800139c:	f1c1 0720 	rsb	r7, r1, #32
 80013a0:	408b      	lsls	r3, r1
 80013a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80013a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80013aa:	fa25 fa07 	lsr.w	sl, r5, r7
 80013ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013b2:	fbba f8f9 	udiv	r8, sl, r9
 80013b6:	fa20 f307 	lsr.w	r3, r0, r7
 80013ba:	fb09 aa18 	mls	sl, r9, r8, sl
 80013be:	408d      	lsls	r5, r1
 80013c0:	fa1f fe8c 	uxth.w	lr, ip
 80013c4:	431d      	orrs	r5, r3
 80013c6:	fa00 f301 	lsl.w	r3, r0, r1
 80013ca:	fb08 f00e 	mul.w	r0, r8, lr
 80013ce:	0c2c      	lsrs	r4, r5, #16
 80013d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013d4:	42a0      	cmp	r0, r4
 80013d6:	fa02 f201 	lsl.w	r2, r2, r1
 80013da:	d90b      	bls.n	80013f4 <__udivmoddi4+0x1b8>
 80013dc:	eb1c 0404 	adds.w	r4, ip, r4
 80013e0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80013e4:	f080 8088 	bcs.w	80014f8 <__udivmoddi4+0x2bc>
 80013e8:	42a0      	cmp	r0, r4
 80013ea:	f240 8085 	bls.w	80014f8 <__udivmoddi4+0x2bc>
 80013ee:	f1a8 0802 	sub.w	r8, r8, #2
 80013f2:	4464      	add	r4, ip
 80013f4:	1a24      	subs	r4, r4, r0
 80013f6:	fbb4 f0f9 	udiv	r0, r4, r9
 80013fa:	fb09 4410 	mls	r4, r9, r0, r4
 80013fe:	fb00 fe0e 	mul.w	lr, r0, lr
 8001402:	b2ad      	uxth	r5, r5
 8001404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001408:	45a6      	cmp	lr, r4
 800140a:	d908      	bls.n	800141e <__udivmoddi4+0x1e2>
 800140c:	eb1c 0404 	adds.w	r4, ip, r4
 8001410:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001414:	d26c      	bcs.n	80014f0 <__udivmoddi4+0x2b4>
 8001416:	45a6      	cmp	lr, r4
 8001418:	d96a      	bls.n	80014f0 <__udivmoddi4+0x2b4>
 800141a:	3802      	subs	r0, #2
 800141c:	4464      	add	r4, ip
 800141e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001422:	fba0 9502 	umull	r9, r5, r0, r2
 8001426:	eba4 040e 	sub.w	r4, r4, lr
 800142a:	42ac      	cmp	r4, r5
 800142c:	46c8      	mov	r8, r9
 800142e:	46ae      	mov	lr, r5
 8001430:	d356      	bcc.n	80014e0 <__udivmoddi4+0x2a4>
 8001432:	d053      	beq.n	80014dc <__udivmoddi4+0x2a0>
 8001434:	2e00      	cmp	r6, #0
 8001436:	d069      	beq.n	800150c <__udivmoddi4+0x2d0>
 8001438:	ebb3 0208 	subs.w	r2, r3, r8
 800143c:	eb64 040e 	sbc.w	r4, r4, lr
 8001440:	fa22 f301 	lsr.w	r3, r2, r1
 8001444:	fa04 f707 	lsl.w	r7, r4, r7
 8001448:	431f      	orrs	r7, r3
 800144a:	40cc      	lsrs	r4, r1
 800144c:	e9c6 7400 	strd	r7, r4, [r6]
 8001450:	2100      	movs	r1, #0
 8001452:	e747      	b.n	80012e4 <__udivmoddi4+0xa8>
 8001454:	fa0c fc02 	lsl.w	ip, ip, r2
 8001458:	f1c2 0120 	rsb	r1, r2, #32
 800145c:	fa25 f301 	lsr.w	r3, r5, r1
 8001460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001464:	fa20 f101 	lsr.w	r1, r0, r1
 8001468:	4095      	lsls	r5, r2
 800146a:	430d      	orrs	r5, r1
 800146c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001470:	fb07 3311 	mls	r3, r7, r1, r3
 8001474:	fa1f fe8c 	uxth.w	lr, ip
 8001478:	0c28      	lsrs	r0, r5, #16
 800147a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800147e:	fb01 f30e 	mul.w	r3, r1, lr
 8001482:	4283      	cmp	r3, r0
 8001484:	fa04 f402 	lsl.w	r4, r4, r2
 8001488:	d908      	bls.n	800149c <__udivmoddi4+0x260>
 800148a:	eb1c 0000 	adds.w	r0, ip, r0
 800148e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8001492:	d22f      	bcs.n	80014f4 <__udivmoddi4+0x2b8>
 8001494:	4283      	cmp	r3, r0
 8001496:	d92d      	bls.n	80014f4 <__udivmoddi4+0x2b8>
 8001498:	3902      	subs	r1, #2
 800149a:	4460      	add	r0, ip
 800149c:	1ac0      	subs	r0, r0, r3
 800149e:	fbb0 f3f7 	udiv	r3, r0, r7
 80014a2:	fb07 0013 	mls	r0, r7, r3, r0
 80014a6:	b2ad      	uxth	r5, r5
 80014a8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80014ac:	fb03 f00e 	mul.w	r0, r3, lr
 80014b0:	42a8      	cmp	r0, r5
 80014b2:	d908      	bls.n	80014c6 <__udivmoddi4+0x28a>
 80014b4:	eb1c 0505 	adds.w	r5, ip, r5
 80014b8:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80014bc:	d216      	bcs.n	80014ec <__udivmoddi4+0x2b0>
 80014be:	42a8      	cmp	r0, r5
 80014c0:	d914      	bls.n	80014ec <__udivmoddi4+0x2b0>
 80014c2:	3b02      	subs	r3, #2
 80014c4:	4465      	add	r5, ip
 80014c6:	1a28      	subs	r0, r5, r0
 80014c8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80014cc:	e738      	b.n	8001340 <__udivmoddi4+0x104>
 80014ce:	4631      	mov	r1, r6
 80014d0:	4630      	mov	r0, r6
 80014d2:	e707      	b.n	80012e4 <__udivmoddi4+0xa8>
 80014d4:	462f      	mov	r7, r5
 80014d6:	e6e4      	b.n	80012a2 <__udivmoddi4+0x66>
 80014d8:	4618      	mov	r0, r3
 80014da:	e6f9      	b.n	80012d0 <__udivmoddi4+0x94>
 80014dc:	454b      	cmp	r3, r9
 80014de:	d2a9      	bcs.n	8001434 <__udivmoddi4+0x1f8>
 80014e0:	ebb9 0802 	subs.w	r8, r9, r2
 80014e4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80014e8:	3801      	subs	r0, #1
 80014ea:	e7a3      	b.n	8001434 <__udivmoddi4+0x1f8>
 80014ec:	4643      	mov	r3, r8
 80014ee:	e7ea      	b.n	80014c6 <__udivmoddi4+0x28a>
 80014f0:	4628      	mov	r0, r5
 80014f2:	e794      	b.n	800141e <__udivmoddi4+0x1e2>
 80014f4:	4641      	mov	r1, r8
 80014f6:	e7d1      	b.n	800149c <__udivmoddi4+0x260>
 80014f8:	46d0      	mov	r8, sl
 80014fa:	e77b      	b.n	80013f4 <__udivmoddi4+0x1b8>
 80014fc:	4464      	add	r4, ip
 80014fe:	3802      	subs	r0, #2
 8001500:	e747      	b.n	8001392 <__udivmoddi4+0x156>
 8001502:	3b02      	subs	r3, #2
 8001504:	4465      	add	r5, ip
 8001506:	e72f      	b.n	8001368 <__udivmoddi4+0x12c>
 8001508:	4608      	mov	r0, r1
 800150a:	e706      	b.n	800131a <__udivmoddi4+0xde>
 800150c:	4631      	mov	r1, r6
 800150e:	e6e9      	b.n	80012e4 <__udivmoddi4+0xa8>

08001510 <__aeabi_idiv0>:
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop

08001514 <WG_IDN>:
static errorWaveGenerator WG_INIT(char *bufOut, uint16_t *lenOut, void *cb_arg);
static void resetOwnVars(void);

/* Private user code ---------------------------------------------------------*/

static errorWaveGenerator WG_IDN(char *bufOut, uint16_t *lenOut) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af04      	add	r7, sp, #16
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
	 The response will show the following information:

	 <company name>, <model number>, <serial number>, <firmware revision> */

	/* Get unique ID*/
	uint32_t (*uID_1) = (uint32_t*) 0x1FFF7A10;
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <WG_IDN+0x48>)
 8001520:	617b      	str	r3, [r7, #20]
	uint32_t (*uID_2) = (uint32_t*) 0x1FFF7A14;
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <WG_IDN+0x4c>)
 8001524:	613b      	str	r3, [r7, #16]
	uint32_t (*uID_3) = (uint32_t*) 0x1FFF7A18;
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <WG_IDN+0x50>)
 8001528:	60fb      	str	r3, [r7, #12]

	*lenOut =
			sprintf(bufOut,
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	6819      	ldr	r1, [r3, #0]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2003      	movs	r0, #3
 8001538:	9002      	str	r0, [sp, #8]
 800153a:	2000      	movs	r0, #0
 800153c:	9001      	str	r0, [sp, #4]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	460b      	mov	r3, r1
 8001542:	4909      	ldr	r1, [pc, #36]	; (8001568 <WG_IDN+0x54>)
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f011 f857 	bl	80125f8 <siprintf>
 800154a:	4603      	mov	r3, r0
	*lenOut =
 800154c:	b29a      	uxth	r2, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	801a      	strh	r2, [r3, #0]
					"Company\t= NONE\nPN\t= STM32-F207ZG\nSN\t= %08X%08X%08X\nFW\t= %d.%d",
					(unsigned int) *uID_3, (unsigned int) *uID_2,
					(unsigned int) *uID_1, (int) FW_VERSION,
					(int) FW_SUBVERSION);

	return NO_ERROR;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	1fff7a10 	.word	0x1fff7a10
 8001560:	1fff7a14 	.word	0x1fff7a14
 8001564:	1fff7a18 	.word	0x1fff7a18
 8001568:	08016178 	.word	0x08016178

0800156c <WG_TST>:

static errorWaveGenerator WG_TST(char *bufOut, uint16_t *lenOut, void *cb_arg) {
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]

	uint16_t dataIn = 0, dataOut = 2000;
 8001578:	2300      	movs	r3, #0
 800157a:	83fb      	strh	r3, [r7, #30]
 800157c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001580:	83bb      	strh	r3, [r7, #28]
	ptrHWparams ptrHWp;
	memcpy(&ptrHWp, cb_arg, sizeof(ptrHWp));
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	2208      	movs	r2, #8
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4618      	mov	r0, r3
 800158c:	f010 f994 	bl	80118b8 <memcpy>

	/* Set arbitrary voltage to test the loop-back*/
	HAL_DAC_SetValue(ptrHWp.ptrHdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dataOut);
 8001590:	6978      	ldr	r0, [r7, #20]
 8001592:	8bbb      	ldrh	r3, [r7, #28]
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	f001 feb6 	bl	8003308 <HAL_DAC_SetValue>
	HAL_DAC_Start(ptrHWp.ptrHdac, DAC_CHANNEL_1);
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f001 fe44 	bl	800322e <HAL_DAC_Start>

	/* Measure the loop-back */
	HAL_ADC_Start(ptrHWp.ptrHadc1);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 f9a7 	bl	80028fc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(ptrHWp.ptrHadc1, 1);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	2101      	movs	r1, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f001 fa84 	bl	8002ac0 <HAL_ADC_PollForConversion>
	dataIn = HAL_ADC_GetValue(ptrHWp.ptrHadc1);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f001 fb04 	bl	8002bc8 <HAL_ADC_GetValue>
 80015c0:	4603      	mov	r3, r0
 80015c2:	83fb      	strh	r3, [r7, #30]
	HAL_ADC_Stop(ptrHWp.ptrHadc1);
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f001 fa48 	bl	8002a5c <HAL_ADC_Stop>

	/* Stops the stimulus */
	HAL_DAC_SetValue(ptrHWp.ptrHdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80015cc:	6978      	ldr	r0, [r7, #20]
 80015ce:	2300      	movs	r3, #0
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	f001 fe98 	bl	8003308 <HAL_DAC_SetValue>
	HAL_DAC_Start(ptrHWp.ptrHdac, DAC_CHANNEL_1);
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f001 fe26 	bl	800322e <HAL_DAC_Start>
	HAL_DAC_Stop(ptrHWp.ptrHdac, DAC_CHANNEL_1);
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 fe72 	bl	80032d0 <HAL_DAC_Stop>

	float error =
			dataOut > dataIn ?
					((float) (dataOut - dataIn) / (float) dataOut) * 100.0 :
 80015ec:	8bba      	ldrh	r2, [r7, #28]
 80015ee:	8bfb      	ldrh	r3, [r7, #30]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d916      	bls.n	8001622 <WG_TST+0xb6>
 80015f4:	8bba      	ldrh	r2, [r7, #28]
 80015f6:	8bfb      	ldrh	r3, [r7, #30]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fbb4 	bl	8000d68 <__aeabi_i2f>
 8001600:	4604      	mov	r4, r0
 8001602:	8bbb      	ldrh	r3, [r7, #28]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fbab 	bl	8000d60 <__aeabi_ui2f>
 800160a:	4603      	mov	r3, r0
 800160c:	4619      	mov	r1, r3
 800160e:	4620      	mov	r0, r4
 8001610:	f7ff fcb2 	bl	8000f78 <__aeabi_fdiv>
 8001614:	4603      	mov	r3, r0
 8001616:	4917      	ldr	r1, [pc, #92]	; (8001674 <WG_TST+0x108>)
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fbf9 	bl	8000e10 <__aeabi_fmul>
 800161e:	4603      	mov	r3, r0
 8001620:	e015      	b.n	800164e <WG_TST+0xe2>
					((float) (dataIn - dataOut) / (float) dataOut) * 100.0;
 8001622:	8bfa      	ldrh	r2, [r7, #30]
 8001624:	8bbb      	ldrh	r3, [r7, #28]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fb9d 	bl	8000d68 <__aeabi_i2f>
 800162e:	4604      	mov	r4, r0
 8001630:	8bbb      	ldrh	r3, [r7, #28]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fb94 	bl	8000d60 <__aeabi_ui2f>
 8001638:	4603      	mov	r3, r0
 800163a:	4619      	mov	r1, r3
 800163c:	4620      	mov	r0, r4
 800163e:	f7ff fc9b 	bl	8000f78 <__aeabi_fdiv>
 8001642:	4603      	mov	r3, r0
					((float) (dataOut - dataIn) / (float) dataOut) * 100.0 :
 8001644:	490b      	ldr	r1, [pc, #44]	; (8001674 <WG_TST+0x108>)
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fbe2 	bl	8000e10 <__aeabi_fmul>
 800164c:	4603      	mov	r3, r0
	float error =
 800164e:	61bb      	str	r3, [r7, #24]

	*lenOut = sprintf(bufOut, "DAC-ADC loopback has %.3f%% of error", error);
 8001650:	69b8      	ldr	r0, [r7, #24]
 8001652:	f7fe ff2f 	bl	80004b4 <__aeabi_f2d>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4907      	ldr	r1, [pc, #28]	; (8001678 <WG_TST+0x10c>)
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f010 ffcb 	bl	80125f8 <siprintf>
 8001662:	4603      	mov	r3, r0
 8001664:	b29a      	uxth	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	801a      	strh	r2, [r3, #0]

	return NO_ERROR;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3724      	adds	r7, #36	; 0x24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd90      	pop	{r4, r7, pc}
 8001674:	42c80000 	.word	0x42c80000
 8001678:	080161b8 	.word	0x080161b8

0800167c <WG_ABOR>:

static errorWaveGenerator WG_ABOR(char *bufOut, uint16_t *lenOut, void *cb_arg) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]

	setTestStart(false);
 8001688:	2000      	movs	r0, #0
 800168a:	f000 fcfb 	bl	8002084 <setTestStart>

	ptrHWparams ptrHWp;
	memcpy(&ptrHWp, cb_arg, sizeof(ptrHWp));
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	2208      	movs	r2, #8
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4618      	mov	r0, r3
 8001698:	f010 f90e 	bl	80118b8 <memcpy>

	/* Stops the stimulus and the measurements */
	HAL_DAC_SetValue(ptrHWp.ptrHdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 800169c:	6978      	ldr	r0, [r7, #20]
 800169e:	2300      	movs	r3, #0
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	f001 fe30 	bl	8003308 <HAL_DAC_SetValue>
	HAL_DAC_Start(ptrHWp.ptrHdac, DAC_CHANNEL_1);
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 fdbe 	bl	800322e <HAL_DAC_Start>
	HAL_DAC_Stop(ptrHWp.ptrHdac, DAC_CHANNEL_1);
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f001 fe0a 	bl	80032d0 <HAL_DAC_Stop>
	HAL_ADC_Stop(ptrHWp.ptrHadc1);
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4618      	mov	r0, r3
 80016c0:	f001 f9cc 	bl	8002a5c <HAL_ADC_Stop>

	*lenOut =
			flagEndTest ?
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <WG_ABOR+0x7c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
	*lenOut =
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <WG_ABOR+0x5e>
					sprintf(bufOut, "Test end") :
 80016cc:	490b      	ldr	r1, [pc, #44]	; (80016fc <WG_ABOR+0x80>)
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f010 ff92 	bl	80125f8 <siprintf>
 80016d4:	4603      	mov	r3, r0
	*lenOut =
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	e005      	b.n	80016e6 <WG_ABOR+0x6a>
					sprintf(bufOut, "Test terminated manually");
 80016da:	4909      	ldr	r1, [pc, #36]	; (8001700 <WG_ABOR+0x84>)
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f010 ff8b 	bl	80125f8 <siprintf>
 80016e2:	4603      	mov	r3, r0
	*lenOut =
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	8013      	strh	r3, [r2, #0]

	resetOwnVars();
 80016ea:	f000 f8ff 	bl	80018ec <resetOwnVars>

	return NO_ERROR;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000236 	.word	0x20000236
 80016fc:	080161e0 	.word	0x080161e0
 8001700:	080161ec 	.word	0x080161ec

08001704 <WG_INIT>:

static errorWaveGenerator WG_INIT(char *bufOut, uint16_t *lenOut, void *cb_arg) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]

	resetOwnVars();
 8001710:	f000 f8ec 	bl	80018ec <resetOwnVars>

	ptrHWparams ptrHWp;
	memcpy(&ptrHWp, cb_arg, sizeof(ptrHWp));
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2208      	movs	r2, #8
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4618      	mov	r0, r3
 800171e:	f010 f8cb 	bl	80118b8 <memcpy>
	HAL_ADC_Start(ptrHWp.ptrHadc1);
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4618      	mov	r0, r3
 8001726:	f001 f8e9 	bl	80028fc <HAL_ADC_Start>

	*lenOut = sprintf(bufOut, "Test initialized");
 800172a:	4908      	ldr	r1, [pc, #32]	; (800174c <WG_INIT+0x48>)
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f010 ff63 	bl	80125f8 <siprintf>
 8001732:	4603      	mov	r3, r0
 8001734:	b29a      	uxth	r2, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	801a      	strh	r2, [r3, #0]

	setTestStart(true);
 800173a:	2001      	movs	r0, #1
 800173c:	f000 fca2 	bl	8002084 <setTestStart>

	return NO_ERROR;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	08016208 	.word	0x08016208

08001750 <WG_UPD>:

static errorWaveGenerator WG_UPD(char *bufOut, uint16_t *lenOut) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]

	*lenOut =
			flagEndTest ?
 800175a:	4b29      	ldr	r3, [pc, #164]	; (8001800 <WG_UPD+0xb0>)
 800175c:	781b      	ldrb	r3, [r3, #0]
	*lenOut =
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <WG_UPD+0x26>
					sprintf(bufOut, "END %lu ", actualFreq) :
 8001762:	4b28      	ldr	r3, [pc, #160]	; (8001804 <WG_UPD+0xb4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	4927      	ldr	r1, [pc, #156]	; (8001808 <WG_UPD+0xb8>)
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f010 ff44 	bl	80125f8 <siprintf>
 8001770:	4603      	mov	r3, r0
	*lenOut =
 8001772:	b29b      	uxth	r3, r3
 8001774:	e008      	b.n	8001788 <WG_UPD+0x38>
					sprintf(bufOut, "RUN %lu ", actualFreq);
 8001776:	4b23      	ldr	r3, [pc, #140]	; (8001804 <WG_UPD+0xb4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	4923      	ldr	r1, [pc, #140]	; (800180c <WG_UPD+0xbc>)
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f010 ff3a 	bl	80125f8 <siprintf>
 8001784:	4603      	mov	r3, r0
	*lenOut =
 8001786:	b29b      	uxth	r3, r3
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	8013      	strh	r3, [r2, #0]

	uint8_t auxLen = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	737b      	strb	r3, [r7, #13]

	for (uint16_t findex = 0; findex < sizeof(buffSamples); findex++) {
 8001790:	2300      	movs	r3, #0
 8001792:	81fb      	strh	r3, [r7, #14]
 8001794:	e02a      	b.n	80017ec <WG_UPD+0x9c>
		auxLen = sprintf(bufOut, "%.3f ",
				buffSamples[findex] > 0.0 ? buffSamples[findex] : 0.0);
 8001796:	89fb      	ldrh	r3, [r7, #14]
 8001798:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <WG_UPD+0xc0>)
 800179a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		auxLen = sprintf(bufOut, "%.3f ",
 800179e:	f04f 0100 	mov.w	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fcf0 	bl	8001188 <__aeabi_fcmpgt>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d009      	beq.n	80017c2 <WG_UPD+0x72>
				buffSamples[findex] > 0.0 ? buffSamples[findex] : 0.0);
 80017ae:	89fb      	ldrh	r3, [r7, #14]
 80017b0:	4a17      	ldr	r2, [pc, #92]	; (8001810 <WG_UPD+0xc0>)
 80017b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		auxLen = sprintf(bufOut, "%.3f ",
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fe7c 	bl	80004b4 <__aeabi_f2d>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	e003      	b.n	80017ca <WG_UPD+0x7a>
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	4912      	ldr	r1, [pc, #72]	; (8001814 <WG_UPD+0xc4>)
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f010 ff13 	bl	80125f8 <siprintf>
 80017d2:	4603      	mov	r3, r0
 80017d4:	737b      	strb	r3, [r7, #13]
		*lenOut += auxLen;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	881a      	ldrh	r2, [r3, #0]
 80017da:	7b7b      	ldrb	r3, [r7, #13]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	4413      	add	r3, r2
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	801a      	strh	r2, [r3, #0]
	for (uint16_t findex = 0; findex < sizeof(buffSamples); findex++) {
 80017e6:	89fb      	ldrh	r3, [r7, #14]
 80017e8:	3301      	adds	r3, #1
 80017ea:	81fb      	strh	r3, [r7, #14]
 80017ec:	89fb      	ldrh	r3, [r7, #14]
 80017ee:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 80017f2:	d3d0      	bcc.n	8001796 <WG_UPD+0x46>
	}

	return NO_ERROR;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000236 	.word	0x20000236
 8001804:	2000022c 	.word	0x2000022c
 8001808:	0801621c 	.word	0x0801621c
 800180c:	08016228 	.word	0x08016228
 8001810:	2000024c 	.word	0x2000024c
 8001814:	08016234 	.word	0x08016234

08001818 <WG_Process_Data>:

void WG_Process_Data(char *bufIn, uint16_t lenIn, char *bufOut,
		uint16_t *lenOut, void *cb_arg) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	460b      	mov	r3, r1
 8001826:	817b      	strh	r3, [r7, #10]

	/* Provides the basic device information */
	if (strcmp(bufIn + 4, "*IDN?") == 0) {
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	3304      	adds	r3, #4
 800182c:	4929      	ldr	r1, [pc, #164]	; (80018d4 <WG_Process_Data+0xbc>)
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fcca 	bl	80001c8 <strcmp>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d104      	bne.n	8001844 <WG_Process_Data+0x2c>
		WG_IDN(bufOut, lenOut);
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fe69 	bl	8001514 <WG_IDN>
	/* Default case */
	else {
		*lenOut = sprintf(bufOut, "No valid command has sent");
	}

}
 8001842:	e042      	b.n	80018ca <WG_Process_Data+0xb2>
	else if (strcmp(bufIn + 4, "*TST?") == 0) {
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3304      	adds	r3, #4
 8001848:	4923      	ldr	r1, [pc, #140]	; (80018d8 <WG_Process_Data+0xc0>)
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fcbc 	bl	80001c8 <strcmp>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d105      	bne.n	8001862 <WG_Process_Data+0x4a>
		WG_TST(bufOut, lenOut, cb_arg);
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	6839      	ldr	r1, [r7, #0]
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fe86 	bl	800156c <WG_TST>
}
 8001860:	e033      	b.n	80018ca <WG_Process_Data+0xb2>
	else if (strcmp(bufIn + 4, "ABOR") == 0) {
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3304      	adds	r3, #4
 8001866:	491d      	ldr	r1, [pc, #116]	; (80018dc <WG_Process_Data+0xc4>)
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fcad 	bl	80001c8 <strcmp>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d105      	bne.n	8001880 <WG_Process_Data+0x68>
		WG_ABOR(bufOut, lenOut, cb_arg);
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	6839      	ldr	r1, [r7, #0]
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff feff 	bl	800167c <WG_ABOR>
}
 800187e:	e024      	b.n	80018ca <WG_Process_Data+0xb2>
	else if (strcmp(bufIn + 4, "INIT") == 0) {
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3304      	adds	r3, #4
 8001884:	4916      	ldr	r1, [pc, #88]	; (80018e0 <WG_Process_Data+0xc8>)
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fc9e 	bl	80001c8 <strcmp>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d105      	bne.n	800189e <WG_Process_Data+0x86>
		WG_INIT(bufOut, lenOut, cb_arg);
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	6839      	ldr	r1, [r7, #0]
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ff34 	bl	8001704 <WG_INIT>
}
 800189c:	e015      	b.n	80018ca <WG_Process_Data+0xb2>
	else if (strcmp(bufIn + 4, "UPD") == 0) {
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3304      	adds	r3, #4
 80018a2:	4910      	ldr	r1, [pc, #64]	; (80018e4 <WG_Process_Data+0xcc>)
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fc8f 	bl	80001c8 <strcmp>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d104      	bne.n	80018ba <WG_Process_Data+0xa2>
		WG_UPD(bufOut, lenOut);
 80018b0:	6839      	ldr	r1, [r7, #0]
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ff4c 	bl	8001750 <WG_UPD>
}
 80018b8:	e007      	b.n	80018ca <WG_Process_Data+0xb2>
		*lenOut = sprintf(bufOut, "No valid command has sent");
 80018ba:	490b      	ldr	r1, [pc, #44]	; (80018e8 <WG_Process_Data+0xd0>)
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f010 fe9b 	bl	80125f8 <siprintf>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	801a      	strh	r2, [r3, #0]
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	0801623c 	.word	0x0801623c
 80018d8:	08016244 	.word	0x08016244
 80018dc:	0801624c 	.word	0x0801624c
 80018e0:	08016254 	.word	0x08016254
 80018e4:	0801625c 	.word	0x0801625c
 80018e8:	08016260 	.word	0x08016260

080018ec <resetOwnVars>:

static void resetOwnVars(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	actualFreq = 30;
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <resetOwnVars+0x68>)
 80018f2:	221e      	movs	r2, #30
 80018f4:	601a      	str	r2, [r3, #0]
	actualAmp = 3.0;
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <resetOwnVars+0x6c>)
 80018f8:	4a18      	ldr	r2, [pc, #96]	; (800195c <resetOwnVars+0x70>)
 80018fa:	601a      	str	r2, [r3, #0]
	flagFrecRetries = false;
 80018fc:	4b18      	ldr	r3, [pc, #96]	; (8001960 <resetOwnVars+0x74>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
	cntFrecRetries = 0;
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <resetOwnVars+0x78>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
	flagEndTest = false;
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <resetOwnVars+0x7c>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
	ADCprescaler = 1000000 / (actualFreq * SAMPLES_PERIOD);
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <resetOwnVars+0x68>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	461a      	mov	r2, r3
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <resetOwnVars+0x80>)
 800191e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001922:	b29a      	uxth	r2, r3
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <resetOwnVars+0x84>)
 8001926:	801a      	strh	r2, [r3, #0]
	ADCcount = 0;
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <resetOwnVars+0x88>)
 800192a:	2200      	movs	r2, #0
 800192c:	801a      	strh	r2, [r3, #0]
	mIdx.safeMem = 0;
 800192e:	4912      	ldr	r1, [pc, #72]	; (8001978 <resetOwnVars+0x8c>)
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e9c1 2300 	strd	r2, r3, [r1]
	sIdx = 0;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <resetOwnVars+0x90>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
	memset(buffSamples, 0, sizeof(buffSamples));
 8001942:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8001946:	2100      	movs	r1, #0
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <resetOwnVars+0x94>)
 800194a:	f00f ffc3 	bl	80118d4 <memset>
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2000022c 	.word	0x2000022c
 8001958:	20000230 	.word	0x20000230
 800195c:	40400000 	.word	0x40400000
 8001960:	20000234 	.word	0x20000234
 8001964:	20000235 	.word	0x20000235
 8001968:	20000236 	.word	0x20000236
 800196c:	000f4240 	.word	0x000f4240
 8001970:	20000238 	.word	0x20000238
 8001974:	2000023a 	.word	0x2000023a
 8001978:	20000240 	.word	0x20000240
 800197c:	20000248 	.word	0x20000248
 8001980:	2000024c 	.word	0x2000024c
 8001984:	00000000 	.word	0x00000000

08001988 <WG_Update_Test_Step>:

void WG_Update_Test_Step(void) {
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

	/* if it's needed to repeat the frequency for the feedback */
	if (flagFrecRetries) {
 800198c:	4b4e      	ldr	r3, [pc, #312]	; (8001ac8 <WG_Update_Test_Step+0x140>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <WG_Update_Test_Step+0x18>
		cntFrecRetries++;
 8001994:	4b4d      	ldr	r3, [pc, #308]	; (8001acc <WG_Update_Test_Step+0x144>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b4b      	ldr	r3, [pc, #300]	; (8001acc <WG_Update_Test_Step+0x144>)
 800199e:	701a      	strb	r2, [r3, #0]
	}

	/* Normal step advance or 10 seconds of retries in the same frequency */
	if ((!flagFrecRetries) || (cntFrecRetries > 9)) {
 80019a0:	4b49      	ldr	r3, [pc, #292]	; (8001ac8 <WG_Update_Test_Step+0x140>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	f083 0301 	eor.w	r3, r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d104      	bne.n	80019b8 <WG_Update_Test_Step+0x30>
 80019ae:	4b47      	ldr	r3, [pc, #284]	; (8001acc <WG_Update_Test_Step+0x144>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b09      	cmp	r3, #9
 80019b4:	f240 8081 	bls.w	8001aba <WG_Update_Test_Step+0x132>

		/* if the previous frequency is just 10KHz the test was end */
		if (actualFreq == 100000) {
 80019b8:	4b45      	ldr	r3, [pc, #276]	; (8001ad0 <WG_Update_Test_Step+0x148>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a45      	ldr	r2, [pc, #276]	; (8001ad4 <WG_Update_Test_Step+0x14c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d106      	bne.n	80019d0 <WG_Update_Test_Step+0x48>

			/* Notify the end of the test*/
			flagEndTest = true;
 80019c2:	4b45      	ldr	r3, [pc, #276]	; (8001ad8 <WG_Update_Test_Step+0x150>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]

			/* Stops timers call-backs */
			setTestStart(false);
 80019c8:	2000      	movs	r0, #0
 80019ca:	f000 fb5b 	bl	8002084 <setTestStart>
			if (actualFreq > 100000)
				actualFreq = 100000;
		}

	}
}
 80019ce:	e074      	b.n	8001aba <WG_Update_Test_Step+0x132>
			cntFrecRetries = 0;
 80019d0:	4b3e      	ldr	r3, [pc, #248]	; (8001acc <WG_Update_Test_Step+0x144>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
			flagFrecRetries = false;
 80019d6:	4b3c      	ldr	r3, [pc, #240]	; (8001ac8 <WG_Update_Test_Step+0x140>)
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
			actualFreq = (actualFreq * 1.05);
 80019dc:	4b3c      	ldr	r3, [pc, #240]	; (8001ad0 <WG_Update_Test_Step+0x148>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fd45 	bl	8000470 <__aeabi_ui2d>
 80019e6:	a336      	add	r3, pc, #216	; (adr r3, 8001ac0 <WG_Update_Test_Step+0x138>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fdba 	bl	8000564 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff f88c 	bl	8000b14 <__aeabi_d2uiz>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4a34      	ldr	r2, [pc, #208]	; (8001ad0 <WG_Update_Test_Step+0x148>)
 8001a00:	6013      	str	r3, [r2, #0]
			ADCprescaler = 1000000 / (actualFreq * SAMPLES_PERIOD);
 8001a02:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <WG_Update_Test_Step+0x148>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b32      	ldr	r3, [pc, #200]	; (8001adc <WG_Update_Test_Step+0x154>)
 8001a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <WG_Update_Test_Step+0x158>)
 8001a1a:	801a      	strh	r2, [r3, #0]
			memset(buffSamples, 0, sizeof(buffSamples));
 8001a1c:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8001a20:	2100      	movs	r1, #0
 8001a22:	4830      	ldr	r0, [pc, #192]	; (8001ae4 <WG_Update_Test_Step+0x15c>)
 8001a24:	f00f ff56 	bl	80118d4 <memset>
			mIdx.safeMem = 0;
 8001a28:	492f      	ldr	r1, [pc, #188]	; (8001ae8 <WG_Update_Test_Step+0x160>)
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9c1 2300 	strd	r2, r3, [r1]
			sIdx = 0; /* The máx index achieved in 10 seconds is 10^7, the máx number of uint32 is ~4*10^9 */
 8001a36:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <WG_Update_Test_Step+0x164>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
			if (actualFreq < 50) {
 8001a3c:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <WG_Update_Test_Step+0x148>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b31      	cmp	r3, #49	; 0x31
 8001a42:	d803      	bhi.n	8001a4c <WG_Update_Test_Step+0xc4>
				actualAmp = 3.0;
 8001a44:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <WG_Update_Test_Step+0x168>)
 8001a46:	4a2b      	ldr	r2, [pc, #172]	; (8001af4 <WG_Update_Test_Step+0x16c>)
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e02e      	b.n	8001aaa <WG_Update_Test_Step+0x122>
				actualAmp = 3.0 / sqrt(1 + pow(actualFreq / 50.0, 2));
 8001a4c:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <WG_Update_Test_Step+0x148>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd0d 	bl	8000470 <__aeabi_ui2d>
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <WG_Update_Test_Step+0x170>)
 8001a5c:	f7fe feac 	bl	80007b8 <__aeabi_ddiv>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a70:	f00e f8b0 	bl	800fbd4 <pow>
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	4b20      	ldr	r3, [pc, #128]	; (8001afc <WG_Update_Test_Step+0x174>)
 8001a7a:	f7fe fbbd 	bl	80001f8 <__adddf3>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f00e f90d 	bl	800fca4 <sqrt>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	f04f 0000 	mov.w	r0, #0
 8001a92:	491b      	ldr	r1, [pc, #108]	; (8001b00 <WG_Update_Test_Step+0x178>)
 8001a94:	f7fe fe90 	bl	80007b8 <__aeabi_ddiv>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f7ff f858 	bl	8000b54 <__aeabi_d2f>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <WG_Update_Test_Step+0x168>)
 8001aa8:	6013      	str	r3, [r2, #0]
			if (actualFreq > 100000)
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <WG_Update_Test_Step+0x148>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <WG_Update_Test_Step+0x14c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d902      	bls.n	8001aba <WG_Update_Test_Step+0x132>
				actualFreq = 100000;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <WG_Update_Test_Step+0x148>)
 8001ab6:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <WG_Update_Test_Step+0x14c>)
 8001ab8:	601a      	str	r2, [r3, #0]
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	cccccccd 	.word	0xcccccccd
 8001ac4:	3ff0cccc 	.word	0x3ff0cccc
 8001ac8:	20000234 	.word	0x20000234
 8001acc:	20000235 	.word	0x20000235
 8001ad0:	2000022c 	.word	0x2000022c
 8001ad4:	000186a0 	.word	0x000186a0
 8001ad8:	20000236 	.word	0x20000236
 8001adc:	000f4240 	.word	0x000f4240
 8001ae0:	20000238 	.word	0x20000238
 8001ae4:	2000024c 	.word	0x2000024c
 8001ae8:	20000240 	.word	0x20000240
 8001aec:	20000248 	.word	0x20000248
 8001af0:	20000230 	.word	0x20000230
 8001af4:	40400000 	.word	0x40400000
 8001af8:	40490000 	.word	0x40490000
 8001afc:	3ff00000 	.word	0x3ff00000
 8001b00:	40080000 	.word	0x40080000

08001b04 <WG_Get_Frequency>:

uint32_t WG_Get_Frequency(void) {
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
	return actualFreq;
 8001b08:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <WG_Get_Frequency+0x10>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	2000022c 	.word	0x2000022c

08001b18 <WG_Get_Amplitude>:

float WG_Get_Amplitude(void) {
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
	return actualAmp;
 8001b1c:	4b02      	ldr	r3, [pc, #8]	; (8001b28 <WG_Get_Amplitude+0x10>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	20000230 	.word	0x20000230

08001b2c <WG_Get_ADC_Prescaler>:

uint16_t WG_Get_ADC_Prescaler(void) {
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
	return ADCprescaler;
 8001b30:	4b02      	ldr	r3, [pc, #8]	; (8001b3c <WG_Get_ADC_Prescaler+0x10>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	20000238 	.word	0x20000238

08001b40 <WG_Store_Sample>:

void WG_Store_Sample(float sample) {
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	buffSamples[mIdx.ii++] = sample;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <WG_Store_Sample+0x28>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	b2d1      	uxtb	r1, r2
 8001b50:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <WG_Store_Sample+0x28>)
 8001b52:	7011      	strb	r1, [r2, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <WG_Store_Sample+0x2c>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	20000240 	.word	0x20000240
 8001b6c:	2000024c 	.word	0x2000024c

08001b70 <WG_Get_Index_of_Sample>:

uint32_t WG_Get_Index_of_Sample(void) {
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
	return sIdx;
 8001b74:	4b02      	ldr	r3, [pc, #8]	; (8001b80 <WG_Get_Index_of_Sample+0x10>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	20000248 	.word	0x20000248

08001b84 <WG_Get_ADC_Sample_Count>:

uint32_t WG_Get_ADC_Sample_Count(void) {
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
	return ADCcount;
 8001b88:	4b02      	ldr	r3, [pc, #8]	; (8001b94 <WG_Get_ADC_Sample_Count+0x10>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	2000023a 	.word	0x2000023a

08001b98 <WG_Set_ADC_Sample_Count>:

void WG_Set_ADC_Sample_Count(uint32_t setADCcount) {
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	ADCcount = setADCcount;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <WG_Set_ADC_Sample_Count+0x1c>)
 8001ba6:	801a      	strh	r2, [r3, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	2000023a 	.word	0x2000023a

08001bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bbe:	f000 fdf7 	bl	80027b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bc2:	f000 f821 	bl	8001c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bc6:	f000 f97d 	bl	8001ec4 <MX_GPIO_Init>
  MX_LWIP_Init();
 8001bca:	f004 f901 	bl	8005dd0 <MX_LWIP_Init>
  MX_ADC1_Init();
 8001bce:	f000 f863 	bl	8001c98 <MX_ADC1_Init>
  MX_DAC_Init();
 8001bd2:	f000 f8b3 	bl	8001d3c <MX_DAC_Init>
  MX_TIM2_Init();
 8001bd6:	f000 f8db 	bl	8001d90 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bda:	f000 f927 	bl	8001e2c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	countSamples = 0;
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <main+0x44>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	801a      	strh	r2, [r3, #0]

	ptrHWparams ptrHWp;
	ptrHWp.ptrHadc1 = &hadc1;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <main+0x48>)
 8001be6:	603b      	str	r3, [r7, #0]
	ptrHWp.ptrHdac = &hdac;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <main+0x4c>)
 8001bea:	607b      	str	r3, [r7, #4]

	udpServer_init((void*) &ptrHWp);
 8001bec:	463b      	mov	r3, r7
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f004 f884 	bl	8005cfc <udpServer_init>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		MX_LWIP_Process();
 8001bf4:	f004 fa1e 	bl	8006034 <MX_LWIP_Process>
 8001bf8:	e7fc      	b.n	8001bf4 <main+0x3c>
 8001bfa:	bf00      	nop
 8001bfc:	20000734 	.word	0x20000734
 8001c00:	20000648 	.word	0x20000648
 8001c04:	20000690 	.word	0x20000690

08001c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b092      	sub	sp, #72	; 0x48
 8001c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c0e:	f107 0318 	add.w	r3, r7, #24
 8001c12:	2230      	movs	r2, #48	; 0x30
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f00f fe5c 	bl	80118d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
 8001c28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c32:	2310      	movs	r3, #16
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c36:	2302      	movs	r3, #2
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001c3e:	2310      	movs	r3, #16
 8001c40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001c42:	23f0      	movs	r3, #240	; 0xf0
 8001c44:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c46:	2302      	movs	r3, #2
 8001c48:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c4e:	f107 0318 	add.w	r3, r7, #24
 8001c52:	4618      	mov	r0, r3
 8001c54:	f002 fe92 	bl	800497c <HAL_RCC_OscConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001c5e:	f000 fb23 	bl	80022a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c62:	230f      	movs	r3, #15
 8001c64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c66:	2302      	movs	r3, #2
 8001c68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2103      	movs	r1, #3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 f8ca 	bl	8004e18 <HAL_RCC_ClockConfig>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001c8a:	f000 fb0d 	bl	80022a8 <Error_Handler>
  }
}
 8001c8e:	bf00      	nop
 8001c90:	3748      	adds	r7, #72	; 0x48
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001caa:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cac:	4a21      	ldr	r2, [pc, #132]	; (8001d34 <MX_ADC1_Init+0x9c>)
 8001cae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cd0:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cd6:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cd8:	4a17      	ldr	r2, [pc, #92]	; (8001d38 <MX_ADC1_Init+0xa0>)
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cf6:	480e      	ldr	r0, [pc, #56]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001cf8:	f000 fdbc 	bl	8002874 <HAL_ADC_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001d02:	f000 fad1 	bl	80022a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d06:	2305      	movs	r3, #5
 8001d08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d12:	463b      	mov	r3, r7
 8001d14:	4619      	mov	r1, r3
 8001d16:	4806      	ldr	r0, [pc, #24]	; (8001d30 <MX_ADC1_Init+0x98>)
 8001d18:	f000 ff62 	bl	8002be0 <HAL_ADC_ConfigChannel>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001d22:	f000 fac1 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000648 	.word	0x20000648
 8001d34:	40012000 	.word	0x40012000
 8001d38:	0f000001 	.word	0x0f000001

08001d3c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d42:	463b      	mov	r3, r7
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <MX_DAC_Init+0x4c>)
 8001d4c:	4a0f      	ldr	r2, [pc, #60]	; (8001d8c <MX_DAC_Init+0x50>)
 8001d4e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001d50:	480d      	ldr	r0, [pc, #52]	; (8001d88 <MX_DAC_Init+0x4c>)
 8001d52:	f001 fa4a 	bl	80031ea <HAL_DAC_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001d5c:	f000 faa4 	bl	80022a8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d68:	463b      	mov	r3, r7
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4806      	ldr	r0, [pc, #24]	; (8001d88 <MX_DAC_Init+0x4c>)
 8001d70:	f001 faee 	bl	8003350 <HAL_DAC_ConfigChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001d7a:	f000 fa95 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000690 	.word	0x20000690
 8001d8c:	40007400 	.word	0x40007400

08001d90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da4:	463b      	mov	r3, r7
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001dae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001db2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10422;
 8001db4:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001db6:	f642 02b6 	movw	r2, #10422	; 0x28b6
 8001dba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11512;
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001dc4:	f642 42f8 	movw	r2, #11512	; 0x2cf8
 8001dc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dd6:	4814      	ldr	r0, [pc, #80]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001dd8:	f003 fa72 	bl	80052c0 <HAL_TIM_Base_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001de2:	f000 fa61 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	4619      	mov	r1, r3
 8001df2:	480d      	ldr	r0, [pc, #52]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001df4:	f003 fc58 	bl	80056a8 <HAL_TIM_ConfigClockSource>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001dfe:	f000 fa53 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4806      	ldr	r0, [pc, #24]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001e10:	f003 fe66 	bl	8005ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e1a:	f000 fa45 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200006a4 	.word	0x200006a4

08001e2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e32:	f107 0308 	add.w	r3, r7, #8
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e40:	463b      	mov	r3, r7
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e48:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <MX_TIM3_Init+0x90>)
 8001e4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <MX_TIM3_Init+0x94>)
 8001e4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <MX_TIM3_Init+0x90>)
 8001e50:	2205      	movs	r2, #5
 8001e52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <MX_TIM3_Init+0x90>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19;
 8001e5a:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <MX_TIM3_Init+0x90>)
 8001e5c:	2213      	movs	r2, #19
 8001e5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e60:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <MX_TIM3_Init+0x90>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <MX_TIM3_Init+0x90>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e6c:	4813      	ldr	r0, [pc, #76]	; (8001ebc <MX_TIM3_Init+0x90>)
 8001e6e:	f003 fa27 	bl	80052c0 <HAL_TIM_Base_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001e78:	f000 fa16 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e82:	f107 0308 	add.w	r3, r7, #8
 8001e86:	4619      	mov	r1, r3
 8001e88:	480c      	ldr	r0, [pc, #48]	; (8001ebc <MX_TIM3_Init+0x90>)
 8001e8a:	f003 fc0d 	bl	80056a8 <HAL_TIM_ConfigClockSource>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001e94:	f000 fa08 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_TIM3_Init+0x90>)
 8001ea6:	f003 fe1b 	bl	8005ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001eb0:	f000 f9fa 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	200006ec 	.word	0x200006ec
 8001ec0:	40000400 	.word	0x40000400

08001ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	; 0x30
 8001ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	4b63      	ldr	r3, [pc, #396]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a62      	ldr	r2, [pc, #392]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b60      	ldr	r3, [pc, #384]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	4b5c      	ldr	r3, [pc, #368]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a5b      	ldr	r2, [pc, #364]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b59      	ldr	r3, [pc, #356]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	4b55      	ldr	r3, [pc, #340]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a54      	ldr	r2, [pc, #336]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b52      	ldr	r3, [pc, #328]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b4e      	ldr	r3, [pc, #312]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a4d      	ldr	r2, [pc, #308]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b4b      	ldr	r3, [pc, #300]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a46      	ldr	r2, [pc, #280]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f54:	f043 0308 	orr.w	r3, r3, #8
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b44      	ldr	r3, [pc, #272]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	4b40      	ldr	r3, [pc, #256]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a3f      	ldr	r2, [pc, #252]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b3d      	ldr	r3, [pc, #244]	; (800206c <MX_GPIO_Init+0x1a8>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	f244 0181 	movw	r1, #16513	; 0x4081
 8001f88:	4839      	ldr	r0, [pc, #228]	; (8002070 <MX_GPIO_Init+0x1ac>)
 8001f8a:	f002 fcc5 	bl	8004918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2140      	movs	r1, #64	; 0x40
 8001f92:	4838      	ldr	r0, [pc, #224]	; (8002074 <MX_GPIO_Init+0x1b0>)
 8001f94:	f002 fcc0 	bl	8004918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001f98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	4619      	mov	r1, r3
 8001fae:	4832      	ldr	r0, [pc, #200]	; (8002078 <MX_GPIO_Init+0x1b4>)
 8001fb0:	f002 fb14 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001fb4:	f244 0381 	movw	r3, #16513	; 0x4081
 8001fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4828      	ldr	r0, [pc, #160]	; (8002070 <MX_GPIO_Init+0x1ac>)
 8001fce:	f002 fb05 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001fd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fe4:	2307      	movs	r3, #7
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4619      	mov	r1, r3
 8001fee:	4823      	ldr	r0, [pc, #140]	; (800207c <MX_GPIO_Init+0x1b8>)
 8001ff0:	f002 faf4 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ff4:	2340      	movs	r3, #64	; 0x40
 8001ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	2300      	movs	r3, #0
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	481a      	ldr	r0, [pc, #104]	; (8002074 <MX_GPIO_Init+0x1b0>)
 800200c:	f002 fae6 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800201c:	f107 031c 	add.w	r3, r7, #28
 8002020:	4619      	mov	r1, r3
 8002022:	4814      	ldr	r0, [pc, #80]	; (8002074 <MX_GPIO_Init+0x1b0>)
 8002024:	f002 fada 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002028:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800202c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002036:	2303      	movs	r3, #3
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800203a:	230a      	movs	r3, #10
 800203c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	4619      	mov	r1, r3
 8002044:	480e      	ldr	r0, [pc, #56]	; (8002080 <MX_GPIO_Init+0x1bc>)
 8002046:	f002 fac9 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800204a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800204e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002058:	f107 031c 	add.w	r3, r7, #28
 800205c:	4619      	mov	r1, r3
 800205e:	4808      	ldr	r0, [pc, #32]	; (8002080 <MX_GPIO_Init+0x1bc>)
 8002060:	f002 fabc 	bl	80045dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002064:	bf00      	nop
 8002066:	3730      	adds	r7, #48	; 0x30
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800
 8002070:	40020400 	.word	0x40020400
 8002074:	40021800 	.word	0x40021800
 8002078:	40020800 	.word	0x40020800
 800207c:	40020c00 	.word	0x40020c00
 8002080:	40020000 	.word	0x40020000

08002084 <setTestStart>:

/* USER CODE BEGIN 4 */

void setTestStart(bool start) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
	start ? HAL_TIM_Base_Start_IT(&htim2) : HAL_TIM_Base_Stop_IT(&htim2);
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <setTestStart+0x18>
 8002094:	480a      	ldr	r0, [pc, #40]	; (80020c0 <setTestStart+0x3c>)
 8002096:	f003 f963 	bl	8005360 <HAL_TIM_Base_Start_IT>
 800209a:	e002      	b.n	80020a2 <setTestStart+0x1e>
 800209c:	4808      	ldr	r0, [pc, #32]	; (80020c0 <setTestStart+0x3c>)
 800209e:	f003 f9cd 	bl	800543c <HAL_TIM_Base_Stop_IT>
	start ? HAL_TIM_Base_Start_IT(&htim3) : HAL_TIM_Base_Stop_IT(&htim3);
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <setTestStart+0x2c>
 80020a8:	4806      	ldr	r0, [pc, #24]	; (80020c4 <setTestStart+0x40>)
 80020aa:	f003 f959 	bl	8005360 <HAL_TIM_Base_Start_IT>
}
 80020ae:	e002      	b.n	80020b6 <setTestStart+0x32>
	start ? HAL_TIM_Base_Start_IT(&htim3) : HAL_TIM_Base_Stop_IT(&htim3);
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <setTestStart+0x40>)
 80020b2:	f003 f9c3 	bl	800543c <HAL_TIM_Base_Stop_IT>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200006a4 	.word	0x200006a4
 80020c4:	200006ec 	.word	0x200006ec

080020c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a6c      	ldr	r2, [pc, #432]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d102      	bne.n	80020e2 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
 80020dc:	f000 fb8a 	bl	80027f4 <HAL_IncTick>

		}

	}
  /* USER CODE END Callback 1 */
}
 80020e0:	e0bc      	b.n	800225c <HAL_TIM_PeriodElapsedCallback+0x194>
	else if (htim->Instance == TIM2) {
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ea:	d107      	bne.n	80020fc <HAL_TIM_PeriodElapsedCallback+0x34>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80020ec:	2101      	movs	r1, #1
 80020ee:	4867      	ldr	r0, [pc, #412]	; (800228c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80020f0:	f002 fc2a 	bl	8004948 <HAL_GPIO_TogglePin>
		WG.UpdateTestStep();
 80020f4:	4b66      	ldr	r3, [pc, #408]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4798      	blx	r3
}
 80020fa:	e0af      	b.n	800225c <HAL_TIM_PeriodElapsedCallback+0x194>
	else if (htim->Instance == TIM3) {
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a64      	ldr	r2, [pc, #400]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002102:	4293      	cmp	r3, r2
 8002104:	f040 80aa 	bne.w	800225c <HAL_TIM_PeriodElapsedCallback+0x194>
								+ ((WG.getAmp() / 2.0)
 8002108:	4b61      	ldr	r3, [pc, #388]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4798      	blx	r3
 800210e:	4603      	mov	r3, r0
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe f9cf 	bl	80004b4 <__aeabi_f2d>
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800211e:	f7fe fb4b 	bl	80007b8 <__aeabi_ddiv>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4614      	mov	r4, r2
 8002128:	461d      	mov	r5, r3
														* ((float) WG.getFreq())
 800212a:	4b59      	ldr	r3, [pc, #356]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4798      	blx	r3
 8002130:	4603      	mov	r3, r0
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fe14 	bl	8000d60 <__aeabi_ui2f>
 8002138:	4603      	mov	r3, r0
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f9ba 	bl	80004b4 <__aeabi_f2d>
 8002140:	a349      	add	r3, pc, #292	; (adr r3, 8002268 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002146:	f7fe fa0d 	bl	8000564 <__aeabi_dmul>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4690      	mov	r8, r2
 8002150:	4699      	mov	r9, r3
														* ((float) WG.getIndexofSample())
 8002152:	4b4f      	ldr	r3, [pc, #316]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	4798      	blx	r3
 8002158:	4603      	mov	r3, r0
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fe00 	bl	8000d60 <__aeabi_ui2f>
 8002160:	4603      	mov	r3, r0
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe f9a6 	bl	80004b4 <__aeabi_f2d>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4640      	mov	r0, r8
 800216e:	4649      	mov	r1, r9
 8002170:	f7fe f9f8 	bl	8000564 <__aeabi_dmul>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
										* (cos(
 800217c:	a33c      	add	r3, pc, #240	; (adr r3, 8002270 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fe fb19 	bl	80007b8 <__aeabi_ddiv>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f00d fcdb 	bl	800fb48 <cos>
														/ 1000000.0) + 1)))));
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	4b40      	ldr	r3, [pc, #256]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002198:	f7fe f82e 	bl	80001f8 <__adddf3>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
										* (cos(
 80021a0:	4620      	mov	r0, r4
 80021a2:	4629      	mov	r1, r5
 80021a4:	f7fe f9de 	bl	8000564 <__aeabi_dmul>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
								+ ((WG.getAmp() / 2.0)
 80021b0:	a331      	add	r3, pc, #196	; (adr r3, 8002278 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80021b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b6:	f7fe f81f 	bl	80001f8 <__adddf3>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
						* (OFFSET_UP
 80021c2:	a32f      	add	r3, pc, #188	; (adr r3, 8002280 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80021c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c8:	f7fe f9cc 	bl	8000564 <__aeabi_dmul>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	f7fe fc9e 	bl	8000b14 <__aeabi_d2uiz>
 80021d8:	4603      	mov	r3, r0
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	482f      	ldr	r0, [pc, #188]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80021e0:	f001 f892 	bl	8003308 <HAL_DAC_SetValue>
		HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80021e4:	2100      	movs	r1, #0
 80021e6:	482d      	ldr	r0, [pc, #180]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80021e8:	f001 f821 	bl	800322e <HAL_DAC_Start>
		uint32_t sampleCount = WG.getADCSampleCount();
 80021ec:	4b28      	ldr	r3, [pc, #160]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	4798      	blx	r3
 80021f2:	60f8      	str	r0, [r7, #12]
		if(sampleCount >= WG.getADCPres() ){
 80021f4:	4b26      	ldr	r3, [pc, #152]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	4798      	blx	r3
 80021fa:	4603      	mov	r3, r0
 80021fc:	461a      	mov	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4293      	cmp	r3, r2
 8002202:	d324      	bcc.n	800224e <HAL_TIM_PeriodElapsedCallback+0x186>
			WG.storeSample((HAL_ADC_GetValue(&hadc1)/DAC_CTE_CONV)-OFFSET_UP);
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002206:	695c      	ldr	r4, [r3, #20]
 8002208:	4825      	ldr	r0, [pc, #148]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800220a:	f000 fcdd 	bl	8002bc8 <HAL_ADC_GetValue>
 800220e:	4603      	mov	r3, r0
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe fda5 	bl	8000d60 <__aeabi_ui2f>
 8002216:	4603      	mov	r3, r0
 8002218:	4922      	ldr	r1, [pc, #136]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe feac 	bl	8000f78 <__aeabi_fdiv>
 8002220:	4603      	mov	r3, r0
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe f946 	bl	80004b4 <__aeabi_f2d>
 8002228:	a313      	add	r3, pc, #76	; (adr r3, 8002278 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800222a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222e:	f7fd ffe1 	bl	80001f4 <__aeabi_dsub>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	f7fe fc8b 	bl	8000b54 <__aeabi_d2f>
 800223e:	4603      	mov	r3, r0
 8002240:	4618      	mov	r0, r3
 8002242:	47a0      	blx	r4
			WG.setADCSampleCount(0);
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	2000      	movs	r0, #0
 800224a:	4798      	blx	r3
}
 800224c:	e006      	b.n	800225c <HAL_TIM_PeriodElapsedCallback+0x194>
			sampleCount++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3301      	adds	r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
			WG.setADCSampleCount(sampleCount);
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	4798      	blx	r3
}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002266:	bf00      	nop
 8002268:	54442d18 	.word	0x54442d18
 800226c:	401921fb 	.word	0x401921fb
 8002270:	00000000 	.word	0x00000000
 8002274:	412e8480 	.word	0x412e8480
 8002278:	9999999a 	.word	0x9999999a
 800227c:	3fb99999 	.word	0x3fb99999
 8002280:	e0000000 	.word	0xe0000000
 8002284:	409363a2 	.word	0x409363a2
 8002288:	40010000 	.word	0x40010000
 800228c:	40020400 	.word	0x40020400
 8002290:	20000000 	.word	0x20000000
 8002294:	40000400 	.word	0x40000400
 8002298:	3ff00000 	.word	0x3ff00000
 800229c:	20000690 	.word	0x20000690
 80022a0:	20000648 	.word	0x20000648
 80022a4:	449b1d17 	.word	0x449b1d17

080022a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ac:	b672      	cpsid	i
}
 80022ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022b0:	e7fe      	b.n	80022b0 <Error_Handler+0x8>
	...

080022b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <HAL_MspInit+0x48>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <HAL_MspInit+0x48>)
 80022c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <HAL_MspInit+0x48>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	603b      	str	r3, [r7, #0]
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_MspInit+0x48>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a07      	ldr	r2, [pc, #28]	; (80022fc <HAL_MspInit+0x48>)
 80022e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_MspInit+0x48>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	40023800 	.word	0x40023800

08002300 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a17      	ldr	r2, [pc, #92]	; (800237c <HAL_ADC_MspInit+0x7c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d127      	bne.n	8002372 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <HAL_ADC_MspInit+0x80>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a15      	ldr	r2, [pc, #84]	; (8002380 <HAL_ADC_MspInit+0x80>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b13      	ldr	r3, [pc, #76]	; (8002380 <HAL_ADC_MspInit+0x80>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <HAL_ADC_MspInit+0x80>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <HAL_ADC_MspInit+0x80>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_ADC_MspInit+0x80>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800235a:	2320      	movs	r3, #32
 800235c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800235e:	2303      	movs	r3, #3
 8002360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	4805      	ldr	r0, [pc, #20]	; (8002384 <HAL_ADC_MspInit+0x84>)
 800236e:	f002 f935 	bl	80045dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002372:	bf00      	nop
 8002374:	3728      	adds	r7, #40	; 0x28
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40012000 	.word	0x40012000
 8002380:	40023800 	.word	0x40023800
 8002384:	40020000 	.word	0x40020000

08002388 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a17      	ldr	r2, [pc, #92]	; (8002404 <HAL_DAC_MspInit+0x7c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d127      	bne.n	80023fa <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	4b16      	ldr	r3, [pc, #88]	; (8002408 <HAL_DAC_MspInit+0x80>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a15      	ldr	r2, [pc, #84]	; (8002408 <HAL_DAC_MspInit+0x80>)
 80023b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_DAC_MspInit+0x80>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <HAL_DAC_MspInit+0x80>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <HAL_DAC_MspInit+0x80>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <HAL_DAC_MspInit+0x80>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023e2:	2310      	movs	r3, #16
 80023e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023e6:	2303      	movs	r3, #3
 80023e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4619      	mov	r1, r3
 80023f4:	4805      	ldr	r0, [pc, #20]	; (800240c <HAL_DAC_MspInit+0x84>)
 80023f6:	f002 f8f1 	bl	80045dc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80023fa:	bf00      	nop
 80023fc:	3728      	adds	r7, #40	; 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40007400 	.word	0x40007400
 8002408:	40023800 	.word	0x40023800
 800240c:	40020000 	.word	0x40020000

08002410 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002420:	d10e      	bne.n	8002440 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_TIM_Base_MspInit+0x60>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	4a11      	ldr	r2, [pc, #68]	; (8002470 <HAL_TIM_Base_MspInit+0x60>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6413      	str	r3, [r2, #64]	; 0x40
 8002432:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <HAL_TIM_Base_MspInit+0x60>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800243e:	e012      	b.n	8002466 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <HAL_TIM_Base_MspInit+0x64>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d10d      	bne.n	8002466 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <HAL_TIM_Base_MspInit+0x60>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a07      	ldr	r2, [pc, #28]	; (8002470 <HAL_TIM_Base_MspInit+0x60>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
 800245a:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_TIM_Base_MspInit+0x60>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	68bb      	ldr	r3, [r7, #8]
}
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	40023800 	.word	0x40023800
 8002474:	40000400 	.word	0x40000400

08002478 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08c      	sub	sp, #48	; 0x30
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	4b2f      	ldr	r3, [pc, #188]	; (800254c <HAL_InitTick+0xd4>)
 800248e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002490:	4a2e      	ldr	r2, [pc, #184]	; (800254c <HAL_InitTick+0xd4>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6453      	str	r3, [r2, #68]	; 0x44
 8002498:	4b2c      	ldr	r3, [pc, #176]	; (800254c <HAL_InitTick+0xd4>)
 800249a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024a4:	f107 020c 	add.w	r2, r7, #12
 80024a8:	f107 0310 	add.w	r3, r7, #16
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f002 fed6 	bl	8005260 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80024b4:	f002 feb2 	bl	800521c <HAL_RCC_GetPCLK2Freq>
 80024b8:	4603      	mov	r3, r0
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	4a23      	ldr	r2, [pc, #140]	; (8002550 <HAL_InitTick+0xd8>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	0c9b      	lsrs	r3, r3, #18
 80024c8:	3b01      	subs	r3, #1
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80024cc:	4b21      	ldr	r3, [pc, #132]	; (8002554 <HAL_InitTick+0xdc>)
 80024ce:	4a22      	ldr	r2, [pc, #136]	; (8002558 <HAL_InitTick+0xe0>)
 80024d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80024d2:	4b20      	ldr	r3, [pc, #128]	; (8002554 <HAL_InitTick+0xdc>)
 80024d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80024da:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <HAL_InitTick+0xdc>)
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80024e0:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <HAL_InitTick+0xdc>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e6:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <HAL_InitTick+0xdc>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_InitTick+0xdc>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80024f2:	4818      	ldr	r0, [pc, #96]	; (8002554 <HAL_InitTick+0xdc>)
 80024f4:	f002 fee4 	bl	80052c0 <HAL_TIM_Base_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80024fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002502:	2b00      	cmp	r3, #0
 8002504:	d11b      	bne.n	800253e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002506:	4813      	ldr	r0, [pc, #76]	; (8002554 <HAL_InitTick+0xdc>)
 8002508:	f002 ff2a 	bl	8005360 <HAL_TIM_Base_Start_IT>
 800250c:	4603      	mov	r3, r0
 800250e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002516:	2b00      	cmp	r3, #0
 8002518:	d111      	bne.n	800253e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800251a:	2019      	movs	r0, #25
 800251c:	f000 fe57 	bl	80031ce <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b0f      	cmp	r3, #15
 8002524:	d808      	bhi.n	8002538 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002526:	2200      	movs	r2, #0
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	2019      	movs	r0, #25
 800252c:	f000 fe33 	bl	8003196 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002530:	4a0a      	ldr	r2, [pc, #40]	; (800255c <HAL_InitTick+0xe4>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e002      	b.n	800253e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800253e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002542:	4618      	mov	r0, r3
 8002544:	3730      	adds	r7, #48	; 0x30
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	431bde83 	.word	0x431bde83
 8002554:	20000738 	.word	0x20000738
 8002558:	40010000 	.word	0x40010000
 800255c:	20000028 	.word	0x20000028

08002560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <NMI_Handler+0x4>

08002566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <HardFault_Handler+0x4>

0800256c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <MemManage_Handler+0x4>

08002572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002576:	e7fe      	b.n	8002576 <BusFault_Handler+0x4>

08002578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800257c:	e7fe      	b.n	800257c <UsageFault_Handler+0x4>

0800257e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr

080025a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
	...

080025b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80025b6:	f002 ff6f 	bl	8005498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000738 	.word	0x20000738

080025c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return 1;
 80025c8:	2301      	movs	r3, #1
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
	...

080025d4 <_kill>:

int _kill(int pid, int sig)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <_kill+0x20>)
 80025e0:	2216      	movs	r2, #22
 80025e2:	601a      	str	r2, [r3, #0]
  return -1;
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	200070b8 	.word	0x200070b8

080025f8 <_exit>:

void _exit (int status)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002600:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ffe5 	bl	80025d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800260a:	e7fe      	b.n	800260a <_exit+0x12>

0800260c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	e00a      	b.n	8002634 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800261e:	f3af 8000 	nop.w
 8002622:	4601      	mov	r1, r0
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	60ba      	str	r2, [r7, #8]
 800262a:	b2ca      	uxtb	r2, r1
 800262c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3301      	adds	r3, #1
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	dbf0      	blt.n	800261e <_read+0x12>
  }

  return len;
 800263c:	687b      	ldr	r3, [r7, #4]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b086      	sub	sp, #24
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	e009      	b.n	800266c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	60ba      	str	r2, [r7, #8]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3301      	adds	r3, #1
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	429a      	cmp	r2, r3
 8002672:	dbf1      	blt.n	8002658 <_write+0x12>
  }
  return len;
 8002674:	687b      	ldr	r3, [r7, #4]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <_close>:

int _close(int file)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026a4:	605a      	str	r2, [r3, #4]
  return 0;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr

080026b2 <_isatty>:

int _isatty(int file)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026ba:	2301      	movs	r3, #1
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr

080026c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b085      	sub	sp, #20
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
	...

080026e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026e8:	4a14      	ldr	r2, [pc, #80]	; (800273c <_sbrk+0x5c>)
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <_sbrk+0x60>)
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <_sbrk+0x64>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d102      	bne.n	8002702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <_sbrk+0x64>)
 80026fe:	4a12      	ldr	r2, [pc, #72]	; (8002748 <_sbrk+0x68>)
 8002700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <_sbrk+0x64>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	429a      	cmp	r2, r3
 800270e:	d205      	bcs.n	800271c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002710:	4b0e      	ldr	r3, [pc, #56]	; (800274c <_sbrk+0x6c>)
 8002712:	220c      	movs	r2, #12
 8002714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800271a:	e009      	b.n	8002730 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <_sbrk+0x64>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002722:	4b08      	ldr	r3, [pc, #32]	; (8002744 <_sbrk+0x64>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	4a06      	ldr	r2, [pc, #24]	; (8002744 <_sbrk+0x64>)
 800272c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800272e:	68fb      	ldr	r3, [r7, #12]
}
 8002730:	4618      	mov	r0, r3
 8002732:	371c      	adds	r7, #28
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20020000 	.word	0x20020000
 8002740:	00000400 	.word	0x00000400
 8002744:	20000780 	.word	0x20000780
 8002748:	200070c8 	.word	0x200070c8
 800274c:	200070b8 	.word	0x200070b8

08002750 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800275c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002794 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002760:	480d      	ldr	r0, [pc, #52]	; (8002798 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002762:	490e      	ldr	r1, [pc, #56]	; (800279c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002764:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002768:	e002      	b.n	8002770 <LoopCopyDataInit>

0800276a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800276c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276e:	3304      	adds	r3, #4

08002770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002774:	d3f9      	bcc.n	800276a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002776:	4a0b      	ldr	r2, [pc, #44]	; (80027a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002778:	4c0b      	ldr	r4, [pc, #44]	; (80027a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800277a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800277c:	e001      	b.n	8002782 <LoopFillZerobss>

0800277e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002780:	3204      	adds	r2, #4

08002782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002784:	d3fb      	bcc.n	800277e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002786:	f7ff ffe3 	bl	8002750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800278a:	f00f f861 	bl	8011850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800278e:	f7ff fa13 	bl	8001bb8 <main>
  bx  lr
 8002792:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002794:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800279c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80027a0:	0801871c 	.word	0x0801871c
  ldr r2, =_sbss
 80027a4:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80027a8:	200070c8 	.word	0x200070c8

080027ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027ac:	e7fe      	b.n	80027ac <ADC_IRQHandler>
	...

080027b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027b4:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <HAL_Init+0x40>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0d      	ldr	r2, [pc, #52]	; (80027f0 <HAL_Init+0x40>)
 80027ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_Init+0x40>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <HAL_Init+0x40>)
 80027c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <HAL_Init+0x40>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <HAL_Init+0x40>)
 80027d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d8:	2003      	movs	r0, #3
 80027da:	f000 fcd1 	bl	8003180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027de:	200f      	movs	r0, #15
 80027e0:	f7ff fe4a 	bl	8002478 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80027e4:	f7ff fd66 	bl	80022b4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40023c00 	.word	0x40023c00

080027f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_IncTick+0x1c>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_IncTick+0x20>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4413      	add	r3, r2
 8002804:	4a03      	ldr	r2, [pc, #12]	; (8002814 <HAL_IncTick+0x20>)
 8002806:	6013      	str	r3, [r2, #0]
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	2000002c 	.word	0x2000002c
 8002814:	20000784 	.word	0x20000784

08002818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return uwTick;
 800281c:	4b02      	ldr	r3, [pc, #8]	; (8002828 <HAL_GetTick+0x10>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	20000784 	.word	0x20000784

0800282c <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002834:	f7ff fff0 	bl	8002818 <HAL_GetTick>
 8002838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002844:	d005      	beq.n	8002852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002846:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <HAL_Delay+0x44>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002852:	bf00      	nop
 8002854:	f7ff ffe0 	bl	8002818 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	429a      	cmp	r2, r3
 8002862:	d8f7      	bhi.n	8002854 <HAL_Delay+0x28>
  {
  }
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	2000002c 	.word	0x2000002c

08002874 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e033      	b.n	80028f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff fd34 	bl	8002300 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d118      	bne.n	80028e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028ba:	f023 0302 	bic.w	r3, r3, #2
 80028be:	f043 0202 	orr.w	r2, r3, #2
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 faaa 	bl	8002e20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f023 0303 	bic.w	r3, r3, #3
 80028da:	f043 0201 	orr.w	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
 80028e2:	e001      	b.n	80028e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_ADC_Start+0x1a>
 8002912:	2302      	movs	r3, #2
 8002914:	e095      	b.n	8002a42 <HAL_ADC_Start+0x146>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	d018      	beq.n	800295e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800293c:	4b43      	ldr	r3, [pc, #268]	; (8002a4c <HAL_ADC_Start+0x150>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a43      	ldr	r2, [pc, #268]	; (8002a50 <HAL_ADC_Start+0x154>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	0c9a      	lsrs	r2, r3, #18
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8002950:	e002      	b.n	8002958 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	3b01      	subs	r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f9      	bne.n	8002952 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b01      	cmp	r3, #1
 800296a:	d15d      	bne.n	8002a28 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002996:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029aa:	d106      	bne.n	80029ba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	f023 0206 	bic.w	r2, r3, #6
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	645a      	str	r2, [r3, #68]	; 0x44
 80029b8:	e002      	b.n	80029c0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80029d2:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <HAL_ADC_Start+0x158>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10f      	bne.n	80029fe <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d129      	bne.n	8002a40 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	e020      	b.n	8002a40 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <HAL_ADC_Start+0x15c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d11b      	bne.n	8002a40 <HAL_ADC_Start+0x144>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d114      	bne.n	8002a40 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a24:	609a      	str	r2, [r3, #8]
 8002a26:	e00b      	b.n	8002a40 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f043 0210 	orr.w	r2, r3, #16
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	f043 0201 	orr.w	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	20000024 	.word	0x20000024
 8002a50:	431bde83 	.word	0x431bde83
 8002a54:	40012300 	.word	0x40012300
 8002a58:	40012000 	.word	0x40012000

08002a5c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_Stop+0x16>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e021      	b.n	8002ab6 <HAL_ADC_Stop+0x5a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0201 	bic.w	r2, r2, #1
 8002a88:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002aa0:	f023 0301 	bic.w	r3, r3, #1
 8002aa4:	f043 0201 	orr.w	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002adc:	d113      	bne.n	8002b06 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aec:	d10b      	bne.n	8002b06 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f043 0220 	orr.w	r2, r3, #32
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e05c      	b.n	8002bc0 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002b06:	f7ff fe87 	bl	8002818 <HAL_GetTick>
 8002b0a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b0c:	e01a      	b.n	8002b44 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b14:	d016      	beq.n	8002b44 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d007      	beq.n	8002b2c <HAL_ADC_PollForConversion+0x6c>
 8002b1c:	f7ff fe7c 	bl	8002818 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d20b      	bcs.n	8002b44 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f043 0204 	orr.w	r2, r3, #4
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e03d      	b.n	8002bc0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d1dd      	bne.n	8002b0e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f06f 0212 	mvn.w	r2, #18
 8002b5a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F2, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d123      	bne.n	8002bbe <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d11f      	bne.n	8002bbe <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d006      	beq.n	8002b9a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d111      	bne.n	8002bbe <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d105      	bne.n	8002bbe <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f043 0201 	orr.w	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1c>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e103      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x224>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b09      	cmp	r3, #9
 8002c0a:	d925      	bls.n	8002c58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68d9      	ldr	r1, [r3, #12]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	4413      	add	r3, r2
 8002c20:	3b1e      	subs	r3, #30
 8002c22:	2207      	movs	r2, #7
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43da      	mvns	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	400a      	ands	r2, r1
 8002c30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68d9      	ldr	r1, [r3, #12]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	4618      	mov	r0, r3
 8002c44:	4603      	mov	r3, r0
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4403      	add	r3, r0
 8002c4a:	3b1e      	subs	r3, #30
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	e022      	b.n	8002c9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6919      	ldr	r1, [r3, #16]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	2207      	movs	r2, #7
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43da      	mvns	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	400a      	ands	r2, r1
 8002c7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6919      	ldr	r1, [r3, #16]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4403      	add	r3, r0
 8002c94:	409a      	lsls	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d824      	bhi.n	8002cf0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3b05      	subs	r3, #5
 8002cb8:	221f      	movs	r2, #31
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	400a      	ands	r2, r1
 8002cc6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	3b05      	subs	r3, #5
 8002ce2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	635a      	str	r2, [r3, #52]	; 0x34
 8002cee:	e04c      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b0c      	cmp	r3, #12
 8002cf6:	d824      	bhi.n	8002d42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	3b23      	subs	r3, #35	; 0x23
 8002d0a:	221f      	movs	r2, #31
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43da      	mvns	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	400a      	ands	r2, r1
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	4618      	mov	r0, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	3b23      	subs	r3, #35	; 0x23
 8002d34:	fa00 f203 	lsl.w	r2, r0, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d40:	e023      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	3b41      	subs	r3, #65	; 0x41
 8002d54:	221f      	movs	r2, #31
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	400a      	ands	r2, r1
 8002d62:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	4618      	mov	r0, r3
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3b41      	subs	r3, #65	; 0x41
 8002d7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a20      	ldr	r2, [pc, #128]	; (8002e10 <HAL_ADC_ConfigChannel+0x230>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d109      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x1c8>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b12      	cmp	r3, #18
 8002d9a:	d105      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_ADC_ConfigChannel+0x234>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a1c      	ldr	r2, [pc, #112]	; (8002e14 <HAL_ADC_ConfigChannel+0x234>)
 8002da2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002da6:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a18      	ldr	r2, [pc, #96]	; (8002e10 <HAL_ADC_ConfigChannel+0x230>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d123      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x21a>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b10      	cmp	r3, #16
 8002db8:	d003      	beq.n	8002dc2 <HAL_ADC_ConfigChannel+0x1e2>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2b11      	cmp	r3, #17
 8002dc0:	d11b      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002dc2:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <HAL_ADC_ConfigChannel+0x234>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4a13      	ldr	r2, [pc, #76]	; (8002e14 <HAL_ADC_ConfigChannel+0x234>)
 8002dc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dcc:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b10      	cmp	r3, #16
 8002dd4:	d111      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <HAL_ADC_ConfigChannel+0x238>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a10      	ldr	r2, [pc, #64]	; (8002e1c <HAL_ADC_ConfigChannel+0x23c>)
 8002ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8002de0:	0c9a      	lsrs	r2, r3, #18
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002dec:	e002      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f9      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40012000 	.word	0x40012000
 8002e14:	40012300 	.word	0x40012300
 8002e18:	20000024 	.word	0x20000024
 8002e1c:	431bde83 	.word	0x431bde83

08002e20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002e28:	4b7e      	ldr	r3, [pc, #504]	; (8003024 <ADC_Init+0x204>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4a7d      	ldr	r2, [pc, #500]	; (8003024 <ADC_Init+0x204>)
 8002e2e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e32:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002e34:	4b7b      	ldr	r3, [pc, #492]	; (8003024 <ADC_Init+0x204>)
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4979      	ldr	r1, [pc, #484]	; (8003024 <ADC_Init+0x204>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	021a      	lsls	r2, r3, #8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6899      	ldr	r1, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	4a5e      	ldr	r2, [pc, #376]	; (8003028 <ADC_Init+0x208>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d022      	beq.n	8002efa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ec2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6899      	ldr	r1, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ee4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6899      	ldr	r1, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	e00f      	b.n	8002f1a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0202 	bic.w	r2, r2, #2
 8002f28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6899      	ldr	r1, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7e1b      	ldrb	r3, [r3, #24]
 8002f34:	005a      	lsls	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d027      	beq.n	8002f98 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002f72:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	fa92 f2a2 	rbit	r2, r2
 8002f7a:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	fab2 f282 	clz	r2, r2
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	fa03 f102 	lsl.w	r1, r3, r2
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	e007      	b.n	8002fa8 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	051a      	lsls	r2, r3, #20
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6899      	ldr	r1, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fea:	025a      	lsls	r2, r3, #9
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003002:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6899      	ldr	r1, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	029a      	lsls	r2, r3, #10
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	609a      	str	r2, [r3, #8]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40012300 	.word	0x40012300
 8003028:	0f000001 	.word	0x0f000001

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db0b      	blt.n	80030ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4906      	ldr	r1, [pc, #24]	; (80030c4 <__NVIC_EnableIRQ+0x34>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	e000e100 	.word	0xe000e100

080030c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	6039      	str	r1, [r7, #0]
 80030d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	db0a      	blt.n	80030f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	490c      	ldr	r1, [pc, #48]	; (8003114 <__NVIC_SetPriority+0x4c>)
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	0112      	lsls	r2, r2, #4
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	440b      	add	r3, r1
 80030ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f0:	e00a      	b.n	8003108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	4908      	ldr	r1, [pc, #32]	; (8003118 <__NVIC_SetPriority+0x50>)
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	3b04      	subs	r3, #4
 8003100:	0112      	lsls	r2, r2, #4
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	440b      	add	r3, r1
 8003106:	761a      	strb	r2, [r3, #24]
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	e000e100 	.word	0xe000e100
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800311c:	b480      	push	{r7}
 800311e:	b089      	sub	sp, #36	; 0x24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f1c3 0307 	rsb	r3, r3, #7
 8003136:	2b04      	cmp	r3, #4
 8003138:	bf28      	it	cs
 800313a:	2304      	movcs	r3, #4
 800313c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3304      	adds	r3, #4
 8003142:	2b06      	cmp	r3, #6
 8003144:	d902      	bls.n	800314c <NVIC_EncodePriority+0x30>
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	3b03      	subs	r3, #3
 800314a:	e000      	b.n	800314e <NVIC_EncodePriority+0x32>
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43da      	mvns	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	401a      	ands	r2, r3
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003164:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	fa01 f303 	lsl.w	r3, r1, r3
 800316e:	43d9      	mvns	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003174:	4313      	orrs	r3, r2
         );
}
 8003176:	4618      	mov	r0, r3
 8003178:	3724      	adds	r7, #36	; 0x24
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff ff4f 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031a8:	f7ff ff64 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	6978      	ldr	r0, [r7, #20]
 80031b4:	f7ff ffb2 	bl	800311c <NVIC_EncodePriority>
 80031b8:	4602      	mov	r2, r0
 80031ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff81 	bl	80030c8 <__NVIC_SetPriority>
}
 80031c6:	bf00      	nop
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	4603      	mov	r3, r0
 80031d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff57 	bl	8003090 <__NVIC_EnableIRQ>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e014      	b.n	8003226 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	791b      	ldrb	r3, [r3, #4]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d105      	bne.n	8003212 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff f8bb 	bl	8002388 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2202      	movs	r2, #2
 8003216:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	795b      	ldrb	r3, [r3, #5]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_DAC_Start+0x16>
 8003240:	2302      	movs	r3, #2
 8003242:	e040      	b.n	80032c6 <HAL_DAC_Start+0x98>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2202      	movs	r2, #2
 800324e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6819      	ldr	r1, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2201      	movs	r2, #1
 800325e:	409a      	lsls	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10f      	bne.n	800328e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003278:	2b3c      	cmp	r3, #60	; 0x3c
 800327a:	d11d      	bne.n	80032b8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	605a      	str	r2, [r3, #4]
 800328c:	e014      	b.n	80032b8 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	213c      	movs	r1, #60	; 0x3c
 80032a0:	fa01 f303 	lsl.w	r3, r1, r3
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d107      	bne.n	80032b8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0202 	orr.w	r2, r2, #2
 80032b6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6819      	ldr	r1, [r3, #0]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2201      	movs	r2, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43da      	mvns	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	400a      	ands	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d105      	bne.n	8003332 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4413      	add	r3, r2
 800332c:	3308      	adds	r3, #8
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e004      	b.n	800333c <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4413      	add	r3, r2
 8003338:	3314      	adds	r3, #20
 800333a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	461a      	mov	r2, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	795b      	ldrb	r3, [r3, #5]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_DAC_ConfigChannel+0x18>
 8003364:	2302      	movs	r3, #2
 8003366:	e03c      	b.n	80033e2 <HAL_DAC_ConfigChannel+0x92>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2202      	movs	r2, #2
 8003372:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	4013      	ands	r3, r2
 8003390:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6819      	ldr	r1, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	22c0      	movs	r2, #192	; 0xc0
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	400a      	ands	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80033fc:	4ba3      	ldr	r3, [pc, #652]	; (800368c <HAL_ETH_Init+0x2a0>)
 80033fe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003404:	2300      	movs	r3, #0
 8003406:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e173      	b.n	80036fa <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f002 fe10 	bl	800604c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342c:	2300      	movs	r3, #0
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	4b97      	ldr	r3, [pc, #604]	; (8003690 <HAL_ETH_Init+0x2a4>)
 8003432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003434:	4a96      	ldr	r2, [pc, #600]	; (8003690 <HAL_ETH_Init+0x2a4>)
 8003436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800343a:	6453      	str	r3, [r2, #68]	; 0x44
 800343c:	4b94      	ldr	r3, [pc, #592]	; (8003690 <HAL_ETH_Init+0x2a4>)
 800343e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003448:	4b92      	ldr	r3, [pc, #584]	; (8003694 <HAL_ETH_Init+0x2a8>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	4a91      	ldr	r2, [pc, #580]	; (8003694 <HAL_ETH_Init+0x2a8>)
 800344e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003452:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003454:	4b8f      	ldr	r3, [pc, #572]	; (8003694 <HAL_ETH_Init+0x2a8>)
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	498d      	ldr	r1, [pc, #564]	; (8003694 <HAL_ETH_Init+0x2a8>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003478:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800347a:	f7ff f9cd 	bl	8002818 <HAL_GetTick>
 800347e:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003480:	e011      	b.n	80034a6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8003482:	f7ff f9c9 	bl	8002818 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003490:	d909      	bls.n	80034a6 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2203      	movs	r2, #3
 8003496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e129      	b.n	80036fa <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e4      	bne.n	8003482 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f023 031c 	bic.w	r3, r3, #28
 80034c6:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80034c8:	f001 fe9e 	bl	8005208 <HAL_RCC_GetHCLKFreq>
 80034cc:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	4a71      	ldr	r2, [pc, #452]	; (8003698 <HAL_ETH_Init+0x2ac>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d908      	bls.n	80034e8 <HAL_ETH_Init+0xfc>
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	4a70      	ldr	r2, [pc, #448]	; (800369c <HAL_ETH_Init+0x2b0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d804      	bhi.n	80034e8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	f043 0308 	orr.w	r3, r3, #8
 80034e4:	61fb      	str	r3, [r7, #28]
 80034e6:	e01a      	b.n	800351e <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	4a6c      	ldr	r2, [pc, #432]	; (800369c <HAL_ETH_Init+0x2b0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d908      	bls.n	8003502 <HAL_ETH_Init+0x116>
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	4a66      	ldr	r2, [pc, #408]	; (800368c <HAL_ETH_Init+0x2a0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d204      	bcs.n	8003502 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f043 030c 	orr.w	r3, r3, #12
 80034fe:	61fb      	str	r3, [r7, #28]
 8003500:	e00d      	b.n	800351e <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	4a61      	ldr	r2, [pc, #388]	; (800368c <HAL_ETH_Init+0x2a0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d303      	bcc.n	8003512 <HAL_ETH_Init+0x126>
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	4a64      	ldr	r2, [pc, #400]	; (80036a0 <HAL_ETH_Init+0x2b4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d904      	bls.n	800351c <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f043 0304 	orr.w	r3, r3, #4
 8003518:	61fb      	str	r3, [r7, #28]
 800351a:	e000      	b.n	800351e <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800351c:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003526:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800352a:	2100      	movs	r1, #0
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fb8e 	bl	8003c4e <HAL_ETH_WritePHYRegister>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00b      	beq.n	8003550 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800353c:	6939      	ldr	r1, [r7, #16]
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fd44 	bl	8003fcc <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e0d4      	b.n	80036fa <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003550:	20ff      	movs	r0, #255	; 0xff
 8003552:	f7ff f96b 	bl	800282c <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 80a2 	beq.w	80036a4 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003560:	f7ff f95a 	bl	8002818 <HAL_GetTick>
 8003564:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003566:	f107 030c 	add.w	r3, r7, #12
 800356a:	461a      	mov	r2, r3
 800356c:	2101      	movs	r1, #1
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fb05 	bl	8003b7e <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8003574:	f7ff f950 	bl	8002818 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d90f      	bls.n	80035a6 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800358a:	6939      	ldr	r1, [r7, #16]
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fd1d 	bl	8003fcc <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e0a9      	b.n	80036fa <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0da      	beq.n	8003566 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80035b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035b4:	2100      	movs	r1, #0
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fb49 	bl	8003c4e <HAL_ETH_WritePHYRegister>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80035c6:	6939      	ldr	r1, [r7, #16]
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fcff 	bl	8003fcc <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e08f      	b.n	80036fa <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80035da:	f7ff f91d 	bl	8002818 <HAL_GetTick>
 80035de:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80035e0:	f107 030c 	add.w	r3, r7, #12
 80035e4:	461a      	mov	r2, r3
 80035e6:	2101      	movs	r1, #1
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fac8 	bl	8003b7e <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80035ee:	f7ff f913 	bl	8002818 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d90f      	bls.n	8003620 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003604:	6939      	ldr	r1, [r7, #16]
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fce0 	bl	8003fcc <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e06c      	b.n	80036fa <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0da      	beq.n	80035e0 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800362a:	f107 030c 	add.w	r3, r7, #12
 800362e:	461a      	mov	r2, r3
 8003630:	2110      	movs	r1, #16
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 faa3 	bl	8003b7e <HAL_ETH_ReadPHYRegister>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003642:	6939      	ldr	r1, [r7, #16]
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fcc1 	bl	8003fcc <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e051      	b.n	80036fa <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d004      	beq.n	800366a <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003666:	60da      	str	r2, [r3, #12]
 8003668:	e002      	b.n	8003670 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	e032      	b.n	80036e8 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003688:	609a      	str	r2, [r3, #8]
 800368a:	e02d      	b.n	80036e8 <HAL_ETH_Init+0x2fc>
 800368c:	03938700 	.word	0x03938700
 8003690:	40023800 	.word	0x40023800
 8003694:	40013800 	.word	0x40013800
 8003698:	01312cff 	.word	0x01312cff
 800369c:	02160ebf 	.word	0x02160ebf
 80036a0:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	08db      	lsrs	r3, r3, #3
 80036aa:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80036b4:	4313      	orrs	r3, r2
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	2100      	movs	r1, #0
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fac6 	bl	8003c4e <HAL_ETH_WritePHYRegister>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00b      	beq.n	80036e0 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80036cc:	6939      	ldr	r1, [r7, #16]
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fc7c 	bl	8003fcc <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e00c      	b.n	80036fa <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80036e0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80036e4:	f7ff f8a2 	bl	800282c <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80036e8:	6939      	ldr	r1, [r7, #16]
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fc6e 	bl	8003fcc <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3720      	adds	r7, #32
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop

08003704 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_ETH_DMATxDescListInit+0x20>
 8003720:	2302      	movs	r3, #2
 8003722:	e051      	b.n	80037c8 <HAL_ETH_DMATxDescListInit+0xc4>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	e030      	b.n	80037a2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	015b      	lsls	r3, r3, #5
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	4413      	add	r3, r2
 8003748:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003750:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003758:	fb02 f303 	mul.w	r3, r2, r3
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	461a      	mov	r2, r3
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d105      	bne.n	800377a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	3b01      	subs	r3, #1
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	429a      	cmp	r2, r3
 8003782:	d208      	bcs.n	8003796 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	3301      	adds	r3, #1
 8003788:	015b      	lsls	r3, r3, #5
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	4413      	add	r3, r2
 800378e:	461a      	mov	r2, r3
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	60da      	str	r2, [r3, #12]
 8003794:	e002      	b.n	800379c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	3301      	adds	r3, #1
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d3ca      	bcc.n	8003740 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037b4:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	371c      	adds	r7, #28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr

080037d2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b087      	sub	sp, #28
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	607a      	str	r2, [r7, #4]
 80037de:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_ETH_DMARxDescListInit+0x20>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e055      	b.n	800389e <HAL_ETH_DMARxDescListInit+0xcc>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2202      	movs	r2, #2
 80037fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	e034      	b.n	8003878 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	015b      	lsls	r3, r3, #5
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	4413      	add	r3, r2
 8003816:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800381e:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003826:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800382e:	fb02 f303 	mul.w	r3, r2, r3
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	461a      	mov	r2, r3
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d105      	bne.n	8003850 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	3b01      	subs	r3, #1
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	429a      	cmp	r2, r3
 8003858:	d208      	bcs.n	800386c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	3301      	adds	r3, #1
 800385e:	015b      	lsls	r3, r3, #5
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	4413      	add	r3, r2
 8003864:	461a      	mov	r2, r3
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	e002      	b.n	8003872 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	3301      	adds	r3, #1
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d3c6      	bcc.n	800380e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800388a:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_ETH_TransmitFrame+0x24>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e0cc      	b.n	8003a66 <HAL_ETH_TransmitFrame+0x1be>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0b7      	b.n	8003a66 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	da09      	bge.n	8003914 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2212      	movs	r2, #18
 8003904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0a8      	b.n	8003a66 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800391a:	4293      	cmp	r3, r2
 800391c:	d915      	bls.n	800394a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	4a53      	ldr	r2, [pc, #332]	; (8003a70 <HAL_ETH_TransmitFrame+0x1c8>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	0a9b      	lsrs	r3, r3, #10
 8003928:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	4b50      	ldr	r3, [pc, #320]	; (8003a70 <HAL_ETH_TransmitFrame+0x1c8>)
 800392e:	fba3 1302 	umull	r1, r3, r3, r2
 8003932:	0a9b      	lsrs	r3, r3, #10
 8003934:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	3301      	adds	r3, #1
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	e001      	b.n	800394e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 800394a:	2301      	movs	r3, #1
 800394c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d11c      	bne.n	800398e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003962:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800396e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800397e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	461a      	mov	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	62da      	str	r2, [r3, #44]	; 0x2c
 800398c:	e04b      	b.n	8003a26 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	e044      	b.n	8003a1e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039a2:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d107      	bne.n	80039ba <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039b8:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80039c2:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d116      	bne.n	80039fc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80039dc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	4a24      	ldr	r2, [pc, #144]	; (8003a74 <HAL_ETH_TransmitFrame+0x1cc>)
 80039e2:	fb03 f202 	mul.w	r2, r3, r2
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	4413      	add	r3, r2
 80039ea:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80039ee:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80039fa:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a0a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	461a      	mov	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d3b6      	bcc.n	8003994 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00d      	beq.n	8003a54 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a40:	461a      	mov	r2, r3
 8003a42:	2304      	movs	r3, #4
 8003a44:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a4e:	461a      	mov	r2, r3
 8003a50:	2300      	movs	r3, #0
 8003a52:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr
 8003a70:	ac02b00b 	.word	0xac02b00b
 8003a74:	fffffa0c 	.word	0xfffffa0c

08003a78 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_ETH_GetReceivedFrame+0x1a>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e070      	b.n	8003b74 <HAL_ETH_GetReceivedFrame+0xfc>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	db5a      	blt.n	8003b62 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d030      	beq.n	8003b1c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d103      	bne.n	8003ad4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	0c1b      	lsrs	r3, r3, #16
 8003ae4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003ae8:	3b04      	subs	r3, #4
 8003aea:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	461a      	mov	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	e02b      	b.n	8003b74 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d010      	beq.n	8003b4c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	461a      	mov	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	629a      	str	r2, [r3, #40]	; 0x28
 8003b4a:	e00a      	b.n	8003b62 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr

08003b7e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b086      	sub	sp, #24
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	460b      	mov	r3, r1
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b82      	cmp	r3, #130	; 0x82
 8003b9e:	d101      	bne.n	8003ba4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e050      	b.n	8003c46 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2282      	movs	r2, #130	; 0x82
 8003ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f003 031c 	and.w	r3, r3, #28
 8003bba:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8a1b      	ldrh	r3, [r3, #16]
 8003bc0:	02db      	lsls	r3, r3, #11
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003bca:	897b      	ldrh	r3, [r7, #10]
 8003bcc:	019b      	lsls	r3, r3, #6
 8003bce:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f023 0302 	bic.w	r3, r3, #2
 8003bde:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bf0:	f7fe fe12 	bl	8002818 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003bf6:	e015      	b.n	8003c24 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003bf8:	f7fe fe0e 	bl	8002818 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c06:	d309      	bcc.n	8003c1c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e014      	b.n	8003c46 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1e4      	bne.n	8003bf8 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	460b      	mov	r3, r1
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b42      	cmp	r3, #66	; 0x42
 8003c6e:	d101      	bne.n	8003c74 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003c70:	2302      	movs	r3, #2
 8003c72:	e04e      	b.n	8003d12 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2242      	movs	r2, #66	; 0x42
 8003c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f003 031c 	and.w	r3, r3, #28
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8a1b      	ldrh	r3, [r3, #16]
 8003c90:	02db      	lsls	r3, r3, #11
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003c9a:	897b      	ldrh	r3, [r7, #10]
 8003c9c:	019b      	lsls	r3, r3, #6
 8003c9e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f043 0302 	orr.w	r3, r3, #2
 8003cae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cca:	f7fe fda5 	bl	8002818 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003cd0:	e015      	b.n	8003cfe <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003cd2:	f7fe fda1 	bl	8002818 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce0:	d309      	bcc.n	8003cf6 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e00d      	b.n	8003d12 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e4      	bne.n	8003cd2 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_ETH_Start+0x16>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e01f      	b.n	8003d70 <HAL_ETH_Start+0x56>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fb3f 	bl	80043c4 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fb76 	bl	8004438 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fc01 	bl	8004554 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fbaa 	bl	80044ac <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fbd1 	bl	8004500 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_ETH_Stop+0x16>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e01f      	b.n	8003dce <HAL_ETH_Stop+0x56>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fb99 	bl	80044d6 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fbc0 	bl	800452a <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fb61 	bl	8004472 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fbcf 	bl	8004554 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fb21 	bl	80043fe <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_ETH_ConfigMAC+0x1c>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e0e4      	b.n	8003fbe <HAL_ETH_ConfigMAC+0x1e6>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80b1 	beq.w	8003f6e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4b6c      	ldr	r3, [pc, #432]	; (8003fc8 <HAL_ETH_ConfigMAC+0x1f0>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8003e24:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8003e2a:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8003e30:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8003e36:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8003e3c:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8003e42:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8003e48:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8003e4e:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8003e54:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8003e5a:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 8003e60:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8003e66:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e7e:	2001      	movs	r0, #1
 8003e80:	f7fe fcd4 	bl	800282c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8003e94:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003e9a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003ea0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8003ea6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003eac:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8003eb2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8003ebe:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8003ec0:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003eca:	2001      	movs	r0, #1
 8003ecc:	f7fe fcae 	bl	800282c <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003ee0:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003eea:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003efa:	4013      	ands	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f08:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8003f0e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003f14:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8003f1a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003f20:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f38:	2001      	movs	r0, #1
 8003f3a:	f7fe fc77 	bl	800282c <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f5e:	2001      	movs	r0, #1
 8003f60:	f7fe fc64 	bl	800282c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	61da      	str	r2, [r3, #28]
 8003f6c:	e01e      	b.n	8003fac <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003f7c:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f9e:	2001      	movs	r0, #1
 8003fa0:	f7fe fc44 	bl	800282c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	ff20810f 	.word	0xff20810f

08003fcc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b0b0      	sub	sp, #192	; 0xc0
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fe8:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ff0:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004002:	2300      	movs	r3, #0
 8004004:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004006:	2300      	movs	r3, #0
 8004008:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d103      	bne.n	800401a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004016:	663b      	str	r3, [r7, #96]	; 0x60
 8004018:	e001      	b.n	800401e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800401a:	2300      	movs	r3, #0
 800401c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800401e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004022:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004024:	2300      	movs	r3, #0
 8004026:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004028:	2300      	movs	r3, #0
 800402a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800402c:	2300      	movs	r3, #0
 800402e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004030:	2300      	movs	r3, #0
 8004032:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004034:	2300      	movs	r3, #0
 8004036:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004038:	2340      	movs	r3, #64	; 0x40
 800403a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800403c:	2300      	movs	r3, #0
 800403e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004042:	2300      	movs	r3, #0
 8004044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004048:	2300      	movs	r3, #0
 800404a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800404e:	2300      	movs	r3, #0
 8004050:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004054:	2300      	movs	r3, #0
 8004056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800405a:	2300      	movs	r3, #0
 800405c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8004060:	2300      	movs	r3, #0
 8004062:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8004066:	2300      	movs	r3, #0
 8004068:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004072:	2300      	movs	r3, #0
 8004074:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004078:	2300      	movs	r3, #0
 800407a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800407e:	2300      	movs	r3, #0
 8004080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004084:	2300      	movs	r3, #0
 8004086:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800408a:	2300      	movs	r3, #0
 800408c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8004090:	2300      	movs	r3, #0
 8004092:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80040a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040a4:	4baa      	ldr	r3, [pc, #680]	; (8004350 <ETH_MACDMAConfig+0x384>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80040ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 80040ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80040b0:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 80040b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 80040b4:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 80040b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 80040b8:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 80040be:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 80040c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 80040c2:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 80040c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 80040c6:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 80040cc:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 80040ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 80040d0:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 80040d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 80040d4:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 80040d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 80040d8:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 80040da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 80040dc:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 80040de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 80040e0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80040e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040f4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004100:	2001      	movs	r0, #1
 8004102:	f7fe fb93 	bl	800282c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800410e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8004110:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004112:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8004114:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004116:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004118:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 800411a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800411e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8004124:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004126:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800412a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800412c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004130:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004134:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800413c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800413e:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800414a:	2001      	movs	r0, #1
 800414c:	f7fe fb6e 	bl	800282c <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004158:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004162:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800416c:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004178:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800417c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004180:	4013      	ands	r3, r2
 8004182:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8004186:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800418a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800418c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8004190:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004192:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004196:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8004198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800419c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800419e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 80041a2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 80041a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80041a8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80041aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041bc:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041c8:	2001      	movs	r0, #1
 80041ca:	f7fe fb2f 	bl	800282c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041d6:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80041d8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 80041dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041f2:	2001      	movs	r0, #1
 80041f4:	f7fe fb1a 	bl	800282c <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004200:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004202:	2300      	movs	r3, #0
 8004204:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800420a:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800420c:	2300      	movs	r3, #0
 800420e:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8004210:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004214:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800421e:	2300      	movs	r3, #0
 8004220:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004222:	2300      	movs	r3, #0
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004226:	2304      	movs	r3, #4
 8004228:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800422a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800422e:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004234:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004236:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800423a:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800423c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004240:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004242:	2380      	movs	r3, #128	; 0x80
 8004244:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8004246:	2300      	movs	r3, #0
 8004248:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800424a:	2300      	movs	r3, #0
 800424c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800425c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004260:	4b3c      	ldr	r3, [pc, #240]	; (8004354 <ETH_MACDMAConfig+0x388>)
 8004262:	4013      	ands	r3, r2
 8004264:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8004268:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 800426a:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800426c:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 800426e:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8004270:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8004272:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8004274:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8004276:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8004278:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 800427a:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 800427c:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 800427e:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8004280:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8004284:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8004286:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 8004288:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800428a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800429c:	461a      	mov	r2, r3
 800429e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80042a2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80042b2:	2001      	movs	r0, #1
 80042b4:	f7fe faba 	bl	800282c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c0:	461a      	mov	r2, r3
 80042c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80042c6:	6193      	str	r3, [r2, #24]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80042c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80042cc:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80042ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 80042d0:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 80042d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80042d4:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 80042d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 80042d8:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 80042da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042dc:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 80042de:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 80042e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 80042e2:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042f0:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004300:	2001      	movs	r0, #1
 8004302:	f7fe fa93 	bl	800282c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800430e:	461a      	mov	r2, r3
 8004310:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004314:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d10d      	bne.n	800433a <ETH_MACDMAConfig+0x36e>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004334:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004338:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	461a      	mov	r2, r3
 8004340:	2100      	movs	r1, #0
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f808 	bl	8004358 <ETH_MACAddressConfig>
}
 8004348:	bf00      	nop
 800434a:	37c0      	adds	r7, #192	; 0xc0
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	ff20810f 	.word	0xff20810f
 8004354:	f8de3f23 	.word	0xf8de3f23

08004358 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3305      	adds	r3, #5
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	021b      	lsls	r3, r3, #8
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	3204      	adds	r2, #4
 8004370:	7812      	ldrb	r2, [r2, #0]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	4b10      	ldr	r3, [pc, #64]	; (80043bc <ETH_MACAddressConfig+0x64>)
 800437a:	4413      	add	r3, r2
 800437c:	461a      	mov	r2, r3
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3303      	adds	r3, #3
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	061a      	lsls	r2, r3, #24
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3302      	adds	r3, #2
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	041b      	lsls	r3, r3, #16
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3301      	adds	r3, #1
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	021b      	lsls	r3, r3, #8
 800439c:	4313      	orrs	r3, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	7812      	ldrb	r2, [r2, #0]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <ETH_MACAddressConfig+0x68>)
 80043aa:	4413      	add	r3, r2
 80043ac:	461a      	mov	r2, r3
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	6013      	str	r3, [r2, #0]
}
 80043b2:	bf00      	nop
 80043b4:	371c      	adds	r7, #28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr
 80043bc:	40028040 	.word	0x40028040
 80043c0:	40028044 	.word	0x40028044

080043c4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0208 	orr.w	r2, r2, #8
 80043de:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80043e8:	2001      	movs	r0, #1
 80043ea:	f000 f8d9 	bl	80045a0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	601a      	str	r2, [r3, #0]
}
 80043f6:	bf00      	nop
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0208 	bic.w	r2, r2, #8
 8004418:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004422:	2001      	movs	r0, #1
 8004424:	f000 f8bc 	bl	80045a0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	601a      	str	r2, [r3, #0]
}
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0204 	orr.w	r2, r2, #4
 8004452:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800445c:	2001      	movs	r0, #1
 800445e:	f000 f89f 	bl	80045a0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	601a      	str	r2, [r3, #0]
}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0204 	bic.w	r2, r2, #4
 800448c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004496:	2001      	movs	r0, #1
 8004498:	f000 f882 	bl	80045a0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	601a      	str	r2, [r3, #0]
}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044ca:	6193      	str	r3, [r2, #24]
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bc80      	pop	{r7}
 80044d4:	4770      	bx	lr

080044d6 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6812      	ldr	r2, [r2, #0]
 80044ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044f4:	6193      	str	r3, [r2, #24]
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6812      	ldr	r2, [r2, #0]
 8004516:	f043 0302 	orr.w	r3, r3, #2
 800451a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800451e:	6193      	str	r3, [r2, #24]
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr

0800452a <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	f023 0302 	bic.w	r3, r3, #2
 8004544:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004548:	6193      	str	r3, [r2, #24]
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr

08004554 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004572:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004576:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004584:	2001      	movs	r0, #1
 8004586:	f000 f80b 	bl	80045a0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004594:	6193      	str	r3, [r2, #24]
}
 8004596:	bf00      	nop
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045a8:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <ETH_Delay+0x34>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <ETH_Delay+0x38>)
 80045ae:	fba2 2303 	umull	r2, r3, r2, r3
 80045b2:	0a5b      	lsrs	r3, r3, #9
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045bc:	bf00      	nop
  }
  while (Delay --);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	1e5a      	subs	r2, r3, #1
 80045c2:	60fa      	str	r2, [r7, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1f9      	bne.n	80045bc <ETH_Delay+0x1c>
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr
 80045d4:	20000024 	.word	0x20000024
 80045d8:	10624dd3 	.word	0x10624dd3

080045dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045ea:	e16f      	b.n	80048cc <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	2101      	movs	r1, #1
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	fa01 f303 	lsl.w	r3, r1, r3
 80045f8:	4013      	ands	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8161 	beq.w	80048c6 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d005      	beq.n	800461c <HAL_GPIO_Init+0x40>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d130      	bne.n	800467e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	2203      	movs	r2, #3
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	43db      	mvns	r3, r3
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4013      	ands	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004652:	2201      	movs	r2, #1
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4013      	ands	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	091b      	lsrs	r3, r3, #4
 8004668:	f003 0201 	and.w	r2, r3, #1
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b03      	cmp	r3, #3
 8004688:	d017      	beq.n	80046ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	2203      	movs	r2, #3
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4013      	ands	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d123      	bne.n	800470e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	08da      	lsrs	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3208      	adds	r2, #8
 80046ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	220f      	movs	r2, #15
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43db      	mvns	r3, r3
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4013      	ands	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	08da      	lsrs	r2, r3, #3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3208      	adds	r2, #8
 8004708:	6939      	ldr	r1, [r7, #16]
 800470a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	2203      	movs	r2, #3
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4013      	ands	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f003 0203 	and.w	r2, r3, #3
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 80bb 	beq.w	80048c6 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004750:	2300      	movs	r3, #0
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	4b64      	ldr	r3, [pc, #400]	; (80048e8 <HAL_GPIO_Init+0x30c>)
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	4a63      	ldr	r2, [pc, #396]	; (80048e8 <HAL_GPIO_Init+0x30c>)
 800475a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800475e:	6453      	str	r3, [r2, #68]	; 0x44
 8004760:	4b61      	ldr	r3, [pc, #388]	; (80048e8 <HAL_GPIO_Init+0x30c>)
 8004762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004768:	60bb      	str	r3, [r7, #8]
 800476a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800476c:	4a5f      	ldr	r2, [pc, #380]	; (80048ec <HAL_GPIO_Init+0x310>)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	089b      	lsrs	r3, r3, #2
 8004772:	3302      	adds	r3, #2
 8004774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004778:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	220f      	movs	r2, #15
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43db      	mvns	r3, r3
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4013      	ands	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a57      	ldr	r2, [pc, #348]	; (80048f0 <HAL_GPIO_Init+0x314>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d031      	beq.n	80047fc <HAL_GPIO_Init+0x220>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a56      	ldr	r2, [pc, #344]	; (80048f4 <HAL_GPIO_Init+0x318>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d02b      	beq.n	80047f8 <HAL_GPIO_Init+0x21c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a55      	ldr	r2, [pc, #340]	; (80048f8 <HAL_GPIO_Init+0x31c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d025      	beq.n	80047f4 <HAL_GPIO_Init+0x218>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a54      	ldr	r2, [pc, #336]	; (80048fc <HAL_GPIO_Init+0x320>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d01f      	beq.n	80047f0 <HAL_GPIO_Init+0x214>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a53      	ldr	r2, [pc, #332]	; (8004900 <HAL_GPIO_Init+0x324>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d019      	beq.n	80047ec <HAL_GPIO_Init+0x210>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a52      	ldr	r2, [pc, #328]	; (8004904 <HAL_GPIO_Init+0x328>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d013      	beq.n	80047e8 <HAL_GPIO_Init+0x20c>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a51      	ldr	r2, [pc, #324]	; (8004908 <HAL_GPIO_Init+0x32c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00d      	beq.n	80047e4 <HAL_GPIO_Init+0x208>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a50      	ldr	r2, [pc, #320]	; (800490c <HAL_GPIO_Init+0x330>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d007      	beq.n	80047e0 <HAL_GPIO_Init+0x204>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a4f      	ldr	r2, [pc, #316]	; (8004910 <HAL_GPIO_Init+0x334>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d101      	bne.n	80047dc <HAL_GPIO_Init+0x200>
 80047d8:	2308      	movs	r3, #8
 80047da:	e010      	b.n	80047fe <HAL_GPIO_Init+0x222>
 80047dc:	2309      	movs	r3, #9
 80047de:	e00e      	b.n	80047fe <HAL_GPIO_Init+0x222>
 80047e0:	2307      	movs	r3, #7
 80047e2:	e00c      	b.n	80047fe <HAL_GPIO_Init+0x222>
 80047e4:	2306      	movs	r3, #6
 80047e6:	e00a      	b.n	80047fe <HAL_GPIO_Init+0x222>
 80047e8:	2305      	movs	r3, #5
 80047ea:	e008      	b.n	80047fe <HAL_GPIO_Init+0x222>
 80047ec:	2304      	movs	r3, #4
 80047ee:	e006      	b.n	80047fe <HAL_GPIO_Init+0x222>
 80047f0:	2303      	movs	r3, #3
 80047f2:	e004      	b.n	80047fe <HAL_GPIO_Init+0x222>
 80047f4:	2302      	movs	r3, #2
 80047f6:	e002      	b.n	80047fe <HAL_GPIO_Init+0x222>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <HAL_GPIO_Init+0x222>
 80047fc:	2300      	movs	r3, #0
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	f002 0203 	and.w	r2, r2, #3
 8004804:	0092      	lsls	r2, r2, #2
 8004806:	4093      	lsls	r3, r2
 8004808:	461a      	mov	r2, r3
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004810:	4936      	ldr	r1, [pc, #216]	; (80048ec <HAL_GPIO_Init+0x310>)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	089b      	lsrs	r3, r3, #2
 8004816:	3302      	adds	r3, #2
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800481e:	4b3d      	ldr	r3, [pc, #244]	; (8004914 <HAL_GPIO_Init+0x338>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	43db      	mvns	r3, r3
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4013      	ands	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004842:	4a34      	ldr	r2, [pc, #208]	; (8004914 <HAL_GPIO_Init+0x338>)
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004848:	4b32      	ldr	r3, [pc, #200]	; (8004914 <HAL_GPIO_Init+0x338>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	43db      	mvns	r3, r3
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4013      	ands	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800486c:	4a29      	ldr	r2, [pc, #164]	; (8004914 <HAL_GPIO_Init+0x338>)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004872:	4b28      	ldr	r3, [pc, #160]	; (8004914 <HAL_GPIO_Init+0x338>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	43db      	mvns	r3, r3
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4013      	ands	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004896:	4a1f      	ldr	r2, [pc, #124]	; (8004914 <HAL_GPIO_Init+0x338>)
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800489c:	4b1d      	ldr	r3, [pc, #116]	; (8004914 <HAL_GPIO_Init+0x338>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	43db      	mvns	r3, r3
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4013      	ands	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80048c0:	4a14      	ldr	r2, [pc, #80]	; (8004914 <HAL_GPIO_Init+0x338>)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	3301      	adds	r3, #1
 80048ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	fa22 f303 	lsr.w	r3, r2, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f47f ae88 	bne.w	80045ec <HAL_GPIO_Init+0x10>
  }
}
 80048dc:	bf00      	nop
 80048de:	bf00      	nop
 80048e0:	371c      	adds	r7, #28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr
 80048e8:	40023800 	.word	0x40023800
 80048ec:	40013800 	.word	0x40013800
 80048f0:	40020000 	.word	0x40020000
 80048f4:	40020400 	.word	0x40020400
 80048f8:	40020800 	.word	0x40020800
 80048fc:	40020c00 	.word	0x40020c00
 8004900:	40021000 	.word	0x40021000
 8004904:	40021400 	.word	0x40021400
 8004908:	40021800 	.word	0x40021800
 800490c:	40021c00 	.word	0x40021c00
 8004910:	40022000 	.word	0x40022000
 8004914:	40013c00 	.word	0x40013c00

08004918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	807b      	strh	r3, [r7, #2]
 8004924:	4613      	mov	r3, r2
 8004926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004928:	787b      	ldrb	r3, [r7, #1]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800492e:	887a      	ldrh	r2, [r7, #2]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004934:	e003      	b.n	800493e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004936:	887b      	ldrh	r3, [r7, #2]
 8004938:	041a      	lsls	r2, r3, #16
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	619a      	str	r2, [r3, #24]
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr

08004948 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800495a:	887a      	ldrh	r2, [r7, #2]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4013      	ands	r3, r2
 8004960:	041a      	lsls	r2, r3, #16
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	43d9      	mvns	r1, r3
 8004966:	887b      	ldrh	r3, [r7, #2]
 8004968:	400b      	ands	r3, r1
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	619a      	str	r2, [r3, #24]
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr
	...

0800497c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08a      	sub	sp, #40	; 0x28
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e236      	b.n	8004dfc <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d050      	beq.n	8004a3c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800499a:	4b9e      	ldr	r3, [pc, #632]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 030c 	and.w	r3, r3, #12
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d00c      	beq.n	80049c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049a6:	4b9b      	ldr	r3, [pc, #620]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d112      	bne.n	80049d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049b2:	4b98      	ldr	r3, [pc, #608]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049be:	d10b      	bne.n	80049d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c0:	4b94      	ldr	r3, [pc, #592]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d036      	beq.n	8004a3a <HAL_RCC_OscConfig+0xbe>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d132      	bne.n	8004a3a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e211      	b.n	8004dfc <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	4b8e      	ldr	r3, [pc, #568]	; (8004c18 <HAL_RCC_OscConfig+0x29c>)
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d013      	beq.n	8004a12 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ea:	f7fd ff15 	bl	8002818 <HAL_GetTick>
 80049ee:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f2:	f7fd ff11 	bl	8002818 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b64      	cmp	r3, #100	; 0x64
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e1fb      	b.n	8004dfc <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a04:	4b83      	ldr	r3, [pc, #524]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0f0      	beq.n	80049f2 <HAL_RCC_OscConfig+0x76>
 8004a10:	e014      	b.n	8004a3c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a12:	f7fd ff01 	bl	8002818 <HAL_GetTick>
 8004a16:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a1a:	f7fd fefd 	bl	8002818 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b64      	cmp	r3, #100	; 0x64
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e1e7      	b.n	8004dfc <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a2c:	4b79      	ldr	r3, [pc, #484]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f0      	bne.n	8004a1a <HAL_RCC_OscConfig+0x9e>
 8004a38:	e000      	b.n	8004a3c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d077      	beq.n	8004b38 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a48:	4b72      	ldr	r3, [pc, #456]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 030c 	and.w	r3, r3, #12
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00b      	beq.n	8004a6c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a54:	4b6f      	ldr	r3, [pc, #444]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d126      	bne.n	8004aae <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a60:	4b6c      	ldr	r3, [pc, #432]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d120      	bne.n	8004aae <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a6c:	4b69      	ldr	r3, [pc, #420]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <HAL_RCC_OscConfig+0x108>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e1bb      	b.n	8004dfc <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a84:	4b63      	ldr	r3, [pc, #396]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	21f8      	movs	r1, #248	; 0xf8
 8004a92:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a94:	69b9      	ldr	r1, [r7, #24]
 8004a96:	fa91 f1a1 	rbit	r1, r1
 8004a9a:	6179      	str	r1, [r7, #20]
  return result;
 8004a9c:	6979      	ldr	r1, [r7, #20]
 8004a9e:	fab1 f181 	clz	r1, r1
 8004aa2:	b2c9      	uxtb	r1, r1
 8004aa4:	408b      	lsls	r3, r1
 8004aa6:	495b      	ldr	r1, [pc, #364]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aac:	e044      	b.n	8004b38 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d02a      	beq.n	8004b0c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab6:	4b59      	ldr	r3, [pc, #356]	; (8004c1c <HAL_RCC_OscConfig+0x2a0>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004abc:	f7fd feac 	bl	8002818 <HAL_GetTick>
 8004ac0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ac4:	f7fd fea8 	bl	8002818 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e192      	b.n	8004dfc <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad6:	4b4f      	ldr	r3, [pc, #316]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae2:	4b4c      	ldr	r3, [pc, #304]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	21f8      	movs	r1, #248	; 0xf8
 8004af0:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af2:	6939      	ldr	r1, [r7, #16]
 8004af4:	fa91 f1a1 	rbit	r1, r1
 8004af8:	60f9      	str	r1, [r7, #12]
  return result;
 8004afa:	68f9      	ldr	r1, [r7, #12]
 8004afc:	fab1 f181 	clz	r1, r1
 8004b00:	b2c9      	uxtb	r1, r1
 8004b02:	408b      	lsls	r3, r1
 8004b04:	4943      	ldr	r1, [pc, #268]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	600b      	str	r3, [r1, #0]
 8004b0a:	e015      	b.n	8004b38 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b0c:	4b43      	ldr	r3, [pc, #268]	; (8004c1c <HAL_RCC_OscConfig+0x2a0>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b12:	f7fd fe81 	bl	8002818 <HAL_GetTick>
 8004b16:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b1a:	f7fd fe7d 	bl	8002818 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e167      	b.n	8004dfc <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b2c:	4b39      	ldr	r3, [pc, #228]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f0      	bne.n	8004b1a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d030      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d016      	beq.n	8004b7a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b4c:	4b34      	ldr	r3, [pc, #208]	; (8004c20 <HAL_RCC_OscConfig+0x2a4>)
 8004b4e:	2201      	movs	r2, #1
 8004b50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b52:	f7fd fe61 	bl	8002818 <HAL_GetTick>
 8004b56:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b5a:	f7fd fe5d 	bl	8002818 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e147      	b.n	8004dfc <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b6c:	4b29      	ldr	r3, [pc, #164]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 8004b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f0      	beq.n	8004b5a <HAL_RCC_OscConfig+0x1de>
 8004b78:	e015      	b.n	8004ba6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b7a:	4b29      	ldr	r3, [pc, #164]	; (8004c20 <HAL_RCC_OscConfig+0x2a4>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b80:	f7fd fe4a 	bl	8002818 <HAL_GetTick>
 8004b84:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b88:	f7fd fe46 	bl	8002818 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e130      	b.n	8004dfc <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b9a:	4b1e      	ldr	r3, [pc, #120]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 8004b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 8087 	beq.w	8004cc2 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bba:	4b16      	ldr	r3, [pc, #88]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d110      	bne.n	8004be8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	4a11      	ldr	r2, [pc, #68]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <HAL_RCC_OscConfig+0x298>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004be8:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <HAL_RCC_OscConfig+0x2a8>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a0d      	ldr	r2, [pc, #52]	; (8004c24 <HAL_RCC_OscConfig+0x2a8>)
 8004bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <HAL_RCC_OscConfig+0x2a8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d122      	bne.n	8004c46 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c00:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <HAL_RCC_OscConfig+0x2a8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a07      	ldr	r2, [pc, #28]	; (8004c24 <HAL_RCC_OscConfig+0x2a8>)
 8004c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c0c:	f7fd fe04 	bl	8002818 <HAL_GetTick>
 8004c10:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c12:	e012      	b.n	8004c3a <HAL_RCC_OscConfig+0x2be>
 8004c14:	40023800 	.word	0x40023800
 8004c18:	40023802 	.word	0x40023802
 8004c1c:	42470000 	.word	0x42470000
 8004c20:	42470e80 	.word	0x42470e80
 8004c24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c28:	f7fd fdf6 	bl	8002818 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e0e0      	b.n	8004dfc <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3a:	4b72      	ldr	r3, [pc, #456]	; (8004e04 <HAL_RCC_OscConfig+0x488>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f0      	beq.n	8004c28 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	4b6f      	ldr	r3, [pc, #444]	; (8004e08 <HAL_RCC_OscConfig+0x48c>)
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d015      	beq.n	8004c84 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c58:	f7fd fdde 	bl	8002818 <HAL_GetTick>
 8004c5c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c5e:	e00a      	b.n	8004c76 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c60:	f7fd fdda 	bl	8002818 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e0c2      	b.n	8004dfc <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c76:	4b65      	ldr	r3, [pc, #404]	; (8004e0c <HAL_RCC_OscConfig+0x490>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0ee      	beq.n	8004c60 <HAL_RCC_OscConfig+0x2e4>
 8004c82:	e014      	b.n	8004cae <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c84:	f7fd fdc8 	bl	8002818 <HAL_GetTick>
 8004c88:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c8a:	e00a      	b.n	8004ca2 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c8c:	f7fd fdc4 	bl	8002818 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e0ac      	b.n	8004dfc <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca2:	4b5a      	ldr	r3, [pc, #360]	; (8004e0c <HAL_RCC_OscConfig+0x490>)
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1ee      	bne.n	8004c8c <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d105      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb6:	4b55      	ldr	r3, [pc, #340]	; (8004e0c <HAL_RCC_OscConfig+0x490>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	4a54      	ldr	r2, [pc, #336]	; (8004e0c <HAL_RCC_OscConfig+0x490>)
 8004cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 8097 	beq.w	8004dfa <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ccc:	4b4f      	ldr	r3, [pc, #316]	; (8004e0c <HAL_RCC_OscConfig+0x490>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 030c 	and.w	r3, r3, #12
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d061      	beq.n	8004d9c <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d146      	bne.n	8004d6e <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce0:	4b4b      	ldr	r3, [pc, #300]	; (8004e10 <HAL_RCC_OscConfig+0x494>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce6:	f7fd fd97 	bl	8002818 <HAL_GetTick>
 8004cea:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cee:	f7fd fd93 	bl	8002818 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b64      	cmp	r3, #100	; 0x64
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e07d      	b.n	8004dfc <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d00:	4b42      	ldr	r3, [pc, #264]	; (8004e0c <HAL_RCC_OscConfig+0x490>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f0      	bne.n	8004cee <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d0c:	4b3f      	ldr	r3, [pc, #252]	; (8004e0c <HAL_RCC_OscConfig+0x490>)
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	4b40      	ldr	r3, [pc, #256]	; (8004e14 <HAL_RCC_OscConfig+0x498>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	69d1      	ldr	r1, [r2, #28]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6a12      	ldr	r2, [r2, #32]
 8004d1c:	4311      	orrs	r1, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d22:	0192      	lsls	r2, r2, #6
 8004d24:	4311      	orrs	r1, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d2a:	0612      	lsls	r2, r2, #24
 8004d2c:	4311      	orrs	r1, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004d32:	0852      	lsrs	r2, r2, #1
 8004d34:	3a01      	subs	r2, #1
 8004d36:	0412      	lsls	r2, r2, #16
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	4934      	ldr	r1, [pc, #208]	; (8004e0c <HAL_RCC_OscConfig+0x490>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d40:	4b33      	ldr	r3, [pc, #204]	; (8004e10 <HAL_RCC_OscConfig+0x494>)
 8004d42:	2201      	movs	r2, #1
 8004d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d46:	f7fd fd67 	bl	8002818 <HAL_GetTick>
 8004d4a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d4e:	f7fd fd63 	bl	8002818 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b64      	cmp	r3, #100	; 0x64
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e04d      	b.n	8004dfc <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d60:	4b2a      	ldr	r3, [pc, #168]	; (8004e0c <HAL_RCC_OscConfig+0x490>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f0      	beq.n	8004d4e <HAL_RCC_OscConfig+0x3d2>
 8004d6c:	e045      	b.n	8004dfa <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6e:	4b28      	ldr	r3, [pc, #160]	; (8004e10 <HAL_RCC_OscConfig+0x494>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d74:	f7fd fd50 	bl	8002818 <HAL_GetTick>
 8004d78:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d7c:	f7fd fd4c 	bl	8002818 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b64      	cmp	r3, #100	; 0x64
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e036      	b.n	8004dfc <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d8e:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <HAL_RCC_OscConfig+0x490>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x400>
 8004d9a:	e02e      	b.n	8004dfa <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e029      	b.n	8004dfc <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8004da8:	4b18      	ldr	r3, [pc, #96]	; (8004e0c <HAL_RCC_OscConfig+0x490>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d11c      	bne.n	8004df6 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d115      	bne.n	8004df6 <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	099b      	lsrs	r3, r3, #6
 8004dce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d10d      	bne.n	8004df6 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d106      	bne.n	8004df6 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d001      	beq.n	8004dfa <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3728      	adds	r7, #40	; 0x28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40007000 	.word	0x40007000
 8004e08:	40023870 	.word	0x40023870
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	42470060 	.word	0x42470060
 8004e14:	f0bc8000 	.word	0xf0bc8000

08004e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0d2      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e2c:	4b6b      	ldr	r3, [pc, #428]	; (8004fdc <HAL_RCC_ClockConfig+0x1c4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 030f 	and.w	r3, r3, #15
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d90c      	bls.n	8004e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3a:	4b68      	ldr	r3, [pc, #416]	; (8004fdc <HAL_RCC_ClockConfig+0x1c4>)
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e42:	4b66      	ldr	r3, [pc, #408]	; (8004fdc <HAL_RCC_ClockConfig+0x1c4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e0be      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d020      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e6c:	4b5c      	ldr	r3, [pc, #368]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	4a5b      	ldr	r2, [pc, #364]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8004e84:	4b56      	ldr	r3, [pc, #344]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4a55      	ldr	r2, [pc, #340]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e90:	4b53      	ldr	r3, [pc, #332]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	4950      	ldr	r1, [pc, #320]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d040      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d107      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb6:	4b4a      	ldr	r3, [pc, #296]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d115      	bne.n	8004eee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e085      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d107      	bne.n	8004ede <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ece:	4b44      	ldr	r3, [pc, #272]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e079      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ede:	4b40      	ldr	r3, [pc, #256]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e071      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eee:	4b3c      	ldr	r3, [pc, #240]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f023 0203 	bic.w	r2, r3, #3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	4939      	ldr	r1, [pc, #228]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f00:	f7fd fc8a 	bl	8002818 <HAL_GetTick>
 8004f04:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f06:	e00a      	b.n	8004f1e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f08:	f7fd fc86 	bl	8002818 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e059      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1e:	4b30      	ldr	r3, [pc, #192]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 020c 	and.w	r2, r3, #12
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d1eb      	bne.n	8004f08 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f30:	4b2a      	ldr	r3, [pc, #168]	; (8004fdc <HAL_RCC_ClockConfig+0x1c4>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d20c      	bcs.n	8004f58 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3e:	4b27      	ldr	r3, [pc, #156]	; (8004fdc <HAL_RCC_ClockConfig+0x1c4>)
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f46:	4b25      	ldr	r3, [pc, #148]	; (8004fdc <HAL_RCC_ClockConfig+0x1c4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e03c      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d008      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f64:	4b1e      	ldr	r3, [pc, #120]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	491b      	ldr	r1, [pc, #108]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f82:	4b17      	ldr	r3, [pc, #92]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	4913      	ldr	r1, [pc, #76]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004f96:	f000 f82b 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 8004f9a:	4601      	mov	r1, r0
 8004f9c:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fa4:	22f0      	movs	r2, #240	; 0xf0
 8004fa6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	fa92 f2a2 	rbit	r2, r2
 8004fae:	60fa      	str	r2, [r7, #12]
  return result;
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	fab2 f282 	clz	r2, r2
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	40d3      	lsrs	r3, r2
 8004fba:	4a0a      	ldr	r2, [pc, #40]	; (8004fe4 <HAL_RCC_ClockConfig+0x1cc>)
 8004fbc:	5cd3      	ldrb	r3, [r2, r3]
 8004fbe:	fa21 f303 	lsr.w	r3, r1, r3
 8004fc2:	4a09      	ldr	r2, [pc, #36]	; (8004fe8 <HAL_RCC_ClockConfig+0x1d0>)
 8004fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fc6:	4b09      	ldr	r3, [pc, #36]	; (8004fec <HAL_RCC_ClockConfig+0x1d4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fd fa54 	bl	8002478 <HAL_InitTick>

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40023c00 	.word	0x40023c00
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	08017f34 	.word	0x08017f34
 8004fe8:	20000024 	.word	0x20000024
 8004fec:	20000028 	.word	0x20000028

08004ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff4:	b094      	sub	sp, #80	; 0x50
 8004ff6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005000:	2300      	movs	r3, #0
 8005002:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005008:	4b7c      	ldr	r3, [pc, #496]	; (80051fc <HAL_RCC_GetSysClockFreq+0x20c>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 030c 	and.w	r3, r3, #12
 8005010:	2b08      	cmp	r3, #8
 8005012:	d00d      	beq.n	8005030 <HAL_RCC_GetSysClockFreq+0x40>
 8005014:	2b08      	cmp	r3, #8
 8005016:	f200 80e7 	bhi.w	80051e8 <HAL_RCC_GetSysClockFreq+0x1f8>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_RCC_GetSysClockFreq+0x34>
 800501e:	2b04      	cmp	r3, #4
 8005020:	d003      	beq.n	800502a <HAL_RCC_GetSysClockFreq+0x3a>
 8005022:	e0e1      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005024:	4b76      	ldr	r3, [pc, #472]	; (8005200 <HAL_RCC_GetSysClockFreq+0x210>)
 8005026:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005028:	e0e1      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800502a:	4b76      	ldr	r3, [pc, #472]	; (8005204 <HAL_RCC_GetSysClockFreq+0x214>)
 800502c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800502e:	e0de      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005030:	4b72      	ldr	r3, [pc, #456]	; (80051fc <HAL_RCC_GetSysClockFreq+0x20c>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005038:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800503a:	4b70      	ldr	r3, [pc, #448]	; (80051fc <HAL_RCC_GetSysClockFreq+0x20c>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d065      	beq.n	8005112 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005046:	4b6d      	ldr	r3, [pc, #436]	; (80051fc <HAL_RCC_GetSysClockFreq+0x20c>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	099b      	lsrs	r3, r3, #6
 800504c:	2200      	movs	r2, #0
 800504e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005050:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005058:	633b      	str	r3, [r7, #48]	; 0x30
 800505a:	2300      	movs	r3, #0
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
 800505e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005062:	4622      	mov	r2, r4
 8005064:	462b      	mov	r3, r5
 8005066:	f04f 0000 	mov.w	r0, #0
 800506a:	f04f 0100 	mov.w	r1, #0
 800506e:	0159      	lsls	r1, r3, #5
 8005070:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005074:	0150      	lsls	r0, r2, #5
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4621      	mov	r1, r4
 800507c:	1a51      	subs	r1, r2, r1
 800507e:	6139      	str	r1, [r7, #16]
 8005080:	4629      	mov	r1, r5
 8005082:	eb63 0301 	sbc.w	r3, r3, r1
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005094:	4659      	mov	r1, fp
 8005096:	018b      	lsls	r3, r1, #6
 8005098:	4651      	mov	r1, sl
 800509a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800509e:	4651      	mov	r1, sl
 80050a0:	018a      	lsls	r2, r1, #6
 80050a2:	46d4      	mov	ip, sl
 80050a4:	ebb2 080c 	subs.w	r8, r2, ip
 80050a8:	4659      	mov	r1, fp
 80050aa:	eb63 0901 	sbc.w	r9, r3, r1
 80050ae:	f04f 0200 	mov.w	r2, #0
 80050b2:	f04f 0300 	mov.w	r3, #0
 80050b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050c2:	4690      	mov	r8, r2
 80050c4:	4699      	mov	r9, r3
 80050c6:	4623      	mov	r3, r4
 80050c8:	eb18 0303 	adds.w	r3, r8, r3
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	462b      	mov	r3, r5
 80050d0:	eb49 0303 	adc.w	r3, r9, r3
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050e2:	4629      	mov	r1, r5
 80050e4:	024b      	lsls	r3, r1, #9
 80050e6:	4620      	mov	r0, r4
 80050e8:	4629      	mov	r1, r5
 80050ea:	4604      	mov	r4, r0
 80050ec:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80050f0:	4601      	mov	r1, r0
 80050f2:	024a      	lsls	r2, r1, #9
 80050f4:	4610      	mov	r0, r2
 80050f6:	4619      	mov	r1, r3
 80050f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050fa:	2200      	movs	r2, #0
 80050fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005100:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005104:	f7fc f84a 	bl	800119c <__aeabi_uldivmod>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4613      	mov	r3, r2
 800510e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005110:	e05c      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005112:	4b3a      	ldr	r3, [pc, #232]	; (80051fc <HAL_RCC_GetSysClockFreq+0x20c>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	099b      	lsrs	r3, r3, #6
 8005118:	2200      	movs	r2, #0
 800511a:	4618      	mov	r0, r3
 800511c:	4611      	mov	r1, r2
 800511e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005122:	623b      	str	r3, [r7, #32]
 8005124:	2300      	movs	r3, #0
 8005126:	627b      	str	r3, [r7, #36]	; 0x24
 8005128:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800512c:	4642      	mov	r2, r8
 800512e:	464b      	mov	r3, r9
 8005130:	f04f 0000 	mov.w	r0, #0
 8005134:	f04f 0100 	mov.w	r1, #0
 8005138:	0159      	lsls	r1, r3, #5
 800513a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800513e:	0150      	lsls	r0, r2, #5
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	46c4      	mov	ip, r8
 8005146:	ebb2 0a0c 	subs.w	sl, r2, ip
 800514a:	4640      	mov	r0, r8
 800514c:	4649      	mov	r1, r9
 800514e:	468c      	mov	ip, r1
 8005150:	eb63 0b0c 	sbc.w	fp, r3, ip
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005160:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005164:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005168:	ebb2 040a 	subs.w	r4, r2, sl
 800516c:	eb63 050b 	sbc.w	r5, r3, fp
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	00eb      	lsls	r3, r5, #3
 800517a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800517e:	00e2      	lsls	r2, r4, #3
 8005180:	4614      	mov	r4, r2
 8005182:	461d      	mov	r5, r3
 8005184:	4603      	mov	r3, r0
 8005186:	18e3      	adds	r3, r4, r3
 8005188:	603b      	str	r3, [r7, #0]
 800518a:	460b      	mov	r3, r1
 800518c:	eb45 0303 	adc.w	r3, r5, r3
 8005190:	607b      	str	r3, [r7, #4]
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	f04f 0300 	mov.w	r3, #0
 800519a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800519e:	4629      	mov	r1, r5
 80051a0:	028b      	lsls	r3, r1, #10
 80051a2:	4620      	mov	r0, r4
 80051a4:	4629      	mov	r1, r5
 80051a6:	4604      	mov	r4, r0
 80051a8:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80051ac:	4601      	mov	r1, r0
 80051ae:	028a      	lsls	r2, r1, #10
 80051b0:	4610      	mov	r0, r2
 80051b2:	4619      	mov	r1, r3
 80051b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051b6:	2200      	movs	r2, #0
 80051b8:	61bb      	str	r3, [r7, #24]
 80051ba:	61fa      	str	r2, [r7, #28]
 80051bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051c0:	f7fb ffec 	bl	800119c <__aeabi_uldivmod>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4613      	mov	r3, r2
 80051ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051cc:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <HAL_RCC_GetSysClockFreq+0x20c>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	0c1b      	lsrs	r3, r3, #16
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	3301      	adds	r3, #1
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80051dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051e6:	e002      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <HAL_RCC_GetSysClockFreq+0x210>)
 80051ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3750      	adds	r7, #80	; 0x50
 80051f4:	46bd      	mov	sp, r7
 80051f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051fa:	bf00      	nop
 80051fc:	40023800 	.word	0x40023800
 8005200:	00f42400 	.word	0x00f42400
 8005204:	007a1200 	.word	0x007a1200

08005208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800520c:	4b02      	ldr	r3, [pc, #8]	; (8005218 <HAL_RCC_GetHCLKFreq+0x10>)
 800520e:	681b      	ldr	r3, [r3, #0]
}
 8005210:	4618      	mov	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	bc80      	pop	{r7}
 8005216:	4770      	bx	lr
 8005218:	20000024 	.word	0x20000024

0800521c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8005222:	f7ff fff1 	bl	8005208 <HAL_RCC_GetHCLKFreq>
 8005226:	4601      	mov	r1, r0
 8005228:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005230:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8005234:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	fa92 f2a2 	rbit	r2, r2
 800523c:	603a      	str	r2, [r7, #0]
  return result;
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	fab2 f282 	clz	r2, r2
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	40d3      	lsrs	r3, r2
 8005248:	4a04      	ldr	r2, [pc, #16]	; (800525c <HAL_RCC_GetPCLK2Freq+0x40>)
 800524a:	5cd3      	ldrb	r3, [r2, r3]
 800524c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40023800 	.word	0x40023800
 800525c:	08017f44 	.word	0x08017f44

08005260 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	220f      	movs	r2, #15
 800526e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005270:	4b11      	ldr	r3, [pc, #68]	; (80052b8 <HAL_RCC_GetClockConfig+0x58>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f003 0203 	and.w	r2, r3, #3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800527c:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <HAL_RCC_GetClockConfig+0x58>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <HAL_RCC_GetClockConfig+0x58>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005294:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <HAL_RCC_GetClockConfig+0x58>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	08db      	lsrs	r3, r3, #3
 800529a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80052a2:	4b06      	ldr	r3, [pc, #24]	; (80052bc <HAL_RCC_GetClockConfig+0x5c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 020f 	and.w	r2, r3, #15
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	601a      	str	r2, [r3, #0]
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr
 80052b8:	40023800 	.word	0x40023800
 80052bc:	40023c00 	.word	0x40023c00

080052c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e041      	b.n	8005356 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fd f892 	bl	8002410 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f000 faba 	bl	8005878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	d001      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e04e      	b.n	8005416 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a22      	ldr	r2, [pc, #136]	; (8005420 <HAL_TIM_Base_Start_IT+0xc0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d022      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0x80>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a2:	d01d      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0x80>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a1e      	ldr	r2, [pc, #120]	; (8005424 <HAL_TIM_Base_Start_IT+0xc4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d018      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0x80>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1d      	ldr	r2, [pc, #116]	; (8005428 <HAL_TIM_Base_Start_IT+0xc8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d013      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0x80>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1b      	ldr	r2, [pc, #108]	; (800542c <HAL_TIM_Base_Start_IT+0xcc>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00e      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0x80>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1a      	ldr	r2, [pc, #104]	; (8005430 <HAL_TIM_Base_Start_IT+0xd0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d009      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0x80>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a18      	ldr	r2, [pc, #96]	; (8005434 <HAL_TIM_Base_Start_IT+0xd4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d004      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0x80>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a17      	ldr	r2, [pc, #92]	; (8005438 <HAL_TIM_Base_Start_IT+0xd8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d111      	bne.n	8005404 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b06      	cmp	r3, #6
 80053f0:	d010      	beq.n	8005414 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005402:	e007      	b.n	8005414 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr
 8005420:	40010000 	.word	0x40010000
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40000c00 	.word	0x40000c00
 8005430:	40010400 	.word	0x40010400
 8005434:	40014000 	.word	0x40014000
 8005438:	40001800 	.word	0x40001800

0800543c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0201 	bic.w	r2, r2, #1
 8005452:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6a1a      	ldr	r2, [r3, #32]
 800545a:	f241 1311 	movw	r3, #4369	; 0x1111
 800545e:	4013      	ands	r3, r2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10f      	bne.n	8005484 <HAL_TIM_Base_Stop_IT+0x48>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6a1a      	ldr	r2, [r3, #32]
 800546a:	f240 4344 	movw	r3, #1092	; 0x444
 800546e:	4013      	ands	r3, r2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d107      	bne.n	8005484 <HAL_TIM_Base_Stop_IT+0x48>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0201 	bic.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr

08005498 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d122      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d11b      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0202 	mvn.w	r2, #2
 80054c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f9b1 	bl	8005842 <HAL_TIM_IC_CaptureCallback>
 80054e0:	e005      	b.n	80054ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f9a4 	bl	8005830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f9b3 	bl	8005854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d122      	bne.n	8005548 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b04      	cmp	r3, #4
 800550e:	d11b      	bne.n	8005548 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0204 	mvn.w	r2, #4
 8005518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2202      	movs	r2, #2
 800551e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f987 	bl	8005842 <HAL_TIM_IC_CaptureCallback>
 8005534:	e005      	b.n	8005542 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f97a 	bl	8005830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f989 	bl	8005854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 0308 	and.w	r3, r3, #8
 8005552:	2b08      	cmp	r3, #8
 8005554:	d122      	bne.n	800559c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	2b08      	cmp	r3, #8
 8005562:	d11b      	bne.n	800559c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0208 	mvn.w	r2, #8
 800556c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2204      	movs	r2, #4
 8005572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f95d 	bl	8005842 <HAL_TIM_IC_CaptureCallback>
 8005588:	e005      	b.n	8005596 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f950 	bl	8005830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f95f 	bl	8005854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b10      	cmp	r3, #16
 80055a8:	d122      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b10      	cmp	r3, #16
 80055b6:	d11b      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0210 	mvn.w	r2, #16
 80055c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2208      	movs	r2, #8
 80055c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f933 	bl	8005842 <HAL_TIM_IC_CaptureCallback>
 80055dc:	e005      	b.n	80055ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f926 	bl	8005830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f935 	bl	8005854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d10e      	bne.n	800561c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b01      	cmp	r3, #1
 800560a:	d107      	bne.n	800561c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0201 	mvn.w	r2, #1
 8005614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fc fd56 	bl	80020c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005626:	2b80      	cmp	r3, #128	; 0x80
 8005628:	d10e      	bne.n	8005648 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005634:	2b80      	cmp	r3, #128	; 0x80
 8005636:	d107      	bne.n	8005648 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 facf 	bl	8005be6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005652:	2b40      	cmp	r3, #64	; 0x40
 8005654:	d10e      	bne.n	8005674 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005660:	2b40      	cmp	r3, #64	; 0x40
 8005662:	d107      	bne.n	8005674 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800566c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f8f9 	bl	8005866 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b20      	cmp	r3, #32
 8005680:	d10e      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b20      	cmp	r3, #32
 800568e:	d107      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f06f 0220 	mvn.w	r2, #32
 8005698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fa9a 	bl	8005bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056a0:	bf00      	nop
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d101      	bne.n	80056c0 <HAL_TIM_ConfigClockSource+0x18>
 80056bc:	2302      	movs	r3, #2
 80056be:	e0b3      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x180>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f8:	d03e      	beq.n	8005778 <HAL_TIM_ConfigClockSource+0xd0>
 80056fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056fe:	f200 8087 	bhi.w	8005810 <HAL_TIM_ConfigClockSource+0x168>
 8005702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005706:	f000 8085 	beq.w	8005814 <HAL_TIM_ConfigClockSource+0x16c>
 800570a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570e:	d87f      	bhi.n	8005810 <HAL_TIM_ConfigClockSource+0x168>
 8005710:	2b70      	cmp	r3, #112	; 0x70
 8005712:	d01a      	beq.n	800574a <HAL_TIM_ConfigClockSource+0xa2>
 8005714:	2b70      	cmp	r3, #112	; 0x70
 8005716:	d87b      	bhi.n	8005810 <HAL_TIM_ConfigClockSource+0x168>
 8005718:	2b60      	cmp	r3, #96	; 0x60
 800571a:	d050      	beq.n	80057be <HAL_TIM_ConfigClockSource+0x116>
 800571c:	2b60      	cmp	r3, #96	; 0x60
 800571e:	d877      	bhi.n	8005810 <HAL_TIM_ConfigClockSource+0x168>
 8005720:	2b50      	cmp	r3, #80	; 0x50
 8005722:	d03c      	beq.n	800579e <HAL_TIM_ConfigClockSource+0xf6>
 8005724:	2b50      	cmp	r3, #80	; 0x50
 8005726:	d873      	bhi.n	8005810 <HAL_TIM_ConfigClockSource+0x168>
 8005728:	2b40      	cmp	r3, #64	; 0x40
 800572a:	d058      	beq.n	80057de <HAL_TIM_ConfigClockSource+0x136>
 800572c:	2b40      	cmp	r3, #64	; 0x40
 800572e:	d86f      	bhi.n	8005810 <HAL_TIM_ConfigClockSource+0x168>
 8005730:	2b30      	cmp	r3, #48	; 0x30
 8005732:	d064      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0x156>
 8005734:	2b30      	cmp	r3, #48	; 0x30
 8005736:	d86b      	bhi.n	8005810 <HAL_TIM_ConfigClockSource+0x168>
 8005738:	2b20      	cmp	r3, #32
 800573a:	d060      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0x156>
 800573c:	2b20      	cmp	r3, #32
 800573e:	d867      	bhi.n	8005810 <HAL_TIM_ConfigClockSource+0x168>
 8005740:	2b00      	cmp	r3, #0
 8005742:	d05c      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0x156>
 8005744:	2b10      	cmp	r3, #16
 8005746:	d05a      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005748:	e062      	b.n	8005810 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6818      	ldr	r0, [r3, #0]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	6899      	ldr	r1, [r3, #8]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f000 f9a2 	bl	8005aa2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800576c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	609a      	str	r2, [r3, #8]
      break;
 8005776:	e04e      	b.n	8005816 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	6899      	ldr	r1, [r3, #8]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f000 f98b 	bl	8005aa2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800579a:	609a      	str	r2, [r3, #8]
      break;
 800579c:	e03b      	b.n	8005816 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	6859      	ldr	r1, [r3, #4]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	461a      	mov	r2, r3
 80057ac:	f000 f902 	bl	80059b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2150      	movs	r1, #80	; 0x50
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 f959 	bl	8005a6e <TIM_ITRx_SetConfig>
      break;
 80057bc:	e02b      	b.n	8005816 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	6859      	ldr	r1, [r3, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	461a      	mov	r2, r3
 80057cc:	f000 f920 	bl	8005a10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2160      	movs	r1, #96	; 0x60
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 f949 	bl	8005a6e <TIM_ITRx_SetConfig>
      break;
 80057dc:	e01b      	b.n	8005816 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	6859      	ldr	r1, [r3, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	461a      	mov	r2, r3
 80057ec:	f000 f8e2 	bl	80059b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2140      	movs	r1, #64	; 0x40
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 f939 	bl	8005a6e <TIM_ITRx_SetConfig>
      break;
 80057fc:	e00b      	b.n	8005816 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4619      	mov	r1, r3
 8005808:	4610      	mov	r0, r2
 800580a:	f000 f930 	bl	8005a6e <TIM_ITRx_SetConfig>
        break;
 800580e:	e002      	b.n	8005816 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005810:	bf00      	nop
 8005812:	e000      	b.n	8005816 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005814:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr

08005842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	bc80      	pop	{r7}
 8005864:	4770      	bx	lr

08005866 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a3f      	ldr	r2, [pc, #252]	; (8005988 <TIM_Base_SetConfig+0x110>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d013      	beq.n	80058b8 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005896:	d00f      	beq.n	80058b8 <TIM_Base_SetConfig+0x40>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a3c      	ldr	r2, [pc, #240]	; (800598c <TIM_Base_SetConfig+0x114>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00b      	beq.n	80058b8 <TIM_Base_SetConfig+0x40>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a3b      	ldr	r2, [pc, #236]	; (8005990 <TIM_Base_SetConfig+0x118>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d007      	beq.n	80058b8 <TIM_Base_SetConfig+0x40>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a3a      	ldr	r2, [pc, #232]	; (8005994 <TIM_Base_SetConfig+0x11c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d003      	beq.n	80058b8 <TIM_Base_SetConfig+0x40>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a39      	ldr	r2, [pc, #228]	; (8005998 <TIM_Base_SetConfig+0x120>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d108      	bne.n	80058ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2e      	ldr	r2, [pc, #184]	; (8005988 <TIM_Base_SetConfig+0x110>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d02b      	beq.n	800592a <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d8:	d027      	beq.n	800592a <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a2b      	ldr	r2, [pc, #172]	; (800598c <TIM_Base_SetConfig+0x114>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d023      	beq.n	800592a <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a2a      	ldr	r2, [pc, #168]	; (8005990 <TIM_Base_SetConfig+0x118>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d01f      	beq.n	800592a <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a29      	ldr	r2, [pc, #164]	; (8005994 <TIM_Base_SetConfig+0x11c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d01b      	beq.n	800592a <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a28      	ldr	r2, [pc, #160]	; (8005998 <TIM_Base_SetConfig+0x120>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d017      	beq.n	800592a <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a27      	ldr	r2, [pc, #156]	; (800599c <TIM_Base_SetConfig+0x124>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d013      	beq.n	800592a <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a26      	ldr	r2, [pc, #152]	; (80059a0 <TIM_Base_SetConfig+0x128>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00f      	beq.n	800592a <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a25      	ldr	r2, [pc, #148]	; (80059a4 <TIM_Base_SetConfig+0x12c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d00b      	beq.n	800592a <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a24      	ldr	r2, [pc, #144]	; (80059a8 <TIM_Base_SetConfig+0x130>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d007      	beq.n	800592a <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a23      	ldr	r2, [pc, #140]	; (80059ac <TIM_Base_SetConfig+0x134>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d003      	beq.n	800592a <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a22      	ldr	r2, [pc, #136]	; (80059b0 <TIM_Base_SetConfig+0x138>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d108      	bne.n	800593c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	4313      	orrs	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a09      	ldr	r2, [pc, #36]	; (8005988 <TIM_Base_SetConfig+0x110>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d003      	beq.n	8005970 <TIM_Base_SetConfig+0xf8>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a0b      	ldr	r2, [pc, #44]	; (8005998 <TIM_Base_SetConfig+0x120>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d103      	bne.n	8005978 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	691a      	ldr	r2, [r3, #16]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	615a      	str	r2, [r3, #20]
}
 800597e:	bf00      	nop
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr
 8005988:	40010000 	.word	0x40010000
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800
 8005994:	40000c00 	.word	0x40000c00
 8005998:	40010400 	.word	0x40010400
 800599c:	40014000 	.word	0x40014000
 80059a0:	40014400 	.word	0x40014400
 80059a4:	40014800 	.word	0x40014800
 80059a8:	40001800 	.word	0x40001800
 80059ac:	40001c00 	.word	0x40001c00
 80059b0:	40002000 	.word	0x40002000

080059b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f023 0201 	bic.w	r2, r3, #1
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f023 030a 	bic.w	r3, r3, #10
 80059f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	621a      	str	r2, [r3, #32]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr

08005a10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	f023 0210 	bic.w	r2, r3, #16
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	031b      	lsls	r3, r3, #12
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	011b      	lsls	r3, r3, #4
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	621a      	str	r2, [r3, #32]
}
 8005a64:	bf00      	nop
 8005a66:	371c      	adds	r7, #28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr

08005a6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b085      	sub	sp, #20
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f043 0307 	orr.w	r3, r3, #7
 8005a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	609a      	str	r2, [r3, #8]
}
 8005a98:	bf00      	nop
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bc80      	pop	{r7}
 8005aa0:	4770      	bx	lr

08005aa2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b087      	sub	sp, #28
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
 8005aae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005abc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	021a      	lsls	r2, r3, #8
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	609a      	str	r2, [r3, #8]
}
 8005ad6:	bf00      	nop
 8005ad8:	371c      	adds	r7, #28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e05a      	b.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a20      	ldr	r2, [pc, #128]	; (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d022      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b44:	d01d      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a1c      	ldr	r2, [pc, #112]	; (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d018      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1a      	ldr	r2, [pc, #104]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a19      	ldr	r2, [pc, #100]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00e      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a17      	ldr	r2, [pc, #92]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d009      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a16      	ldr	r2, [pc, #88]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d004      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a14      	ldr	r2, [pc, #80]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d10c      	bne.n	8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr
 8005bb8:	40010000 	.word	0x40010000
 8005bbc:	40000400 	.word	0x40000400
 8005bc0:	40000800 	.word	0x40000800
 8005bc4:	40000c00 	.word	0x40000c00
 8005bc8:	40010400 	.word	0x40010400
 8005bcc:	40014000 	.word	0x40014000
 8005bd0:	40001800 	.word	0x40001800

08005bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bc80      	pop	{r7}
 8005be4:	4770      	bx	lr

08005be6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr

08005bf8 <udp_receive_callback>:
uint8_t GATEWAY_ADDRESS[4];

/* USER CODE BEGIN 2 */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port) {
 8005bf8:	b5b0      	push	{r4, r5, r7, lr}
 8005bfa:	f5ad 6dcc 	sub.w	sp, sp, #1632	; 0x660
 8005bfe:	af02      	add	r7, sp, #8
 8005c00:	f507 64cb 	add.w	r4, r7, #1624	; 0x658
 8005c04:	f2a4 644c 	subw	r4, r4, #1612	; 0x64c
 8005c08:	6020      	str	r0, [r4, #0]
 8005c0a:	f507 60cb 	add.w	r0, r7, #1624	; 0x658
 8005c0e:	f5a0 60ca 	sub.w	r0, r0, #1616	; 0x650
 8005c12:	6001      	str	r1, [r0, #0]
 8005c14:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 8005c18:	f2a1 6154 	subw	r1, r1, #1620	; 0x654
 8005c1c:	600a      	str	r2, [r1, #0]
 8005c1e:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 8005c22:	f5a2 62cb 	sub.w	r2, r2, #1624	; 0x658
 8005c26:	6013      	str	r3, [r2, #0]

	/* Get the IP of the Client */
	//char *remoteIP = ipaddr_ntoa(addr);

	char bufOut[1600];
	uint16_t lenOut = sizeof(bufOut);
 8005c28:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005c2c:	f2a3 6346 	subw	r3, r3, #1606	; 0x646
 8005c30:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005c34:	801a      	strh	r2, [r3, #0]

	WG.ProcessData(p->payload, p->len, bufOut, &lenOut, arg);
 8005c36:	4b30      	ldr	r3, [pc, #192]	; (8005cf8 <udp_receive_callback+0x100>)
 8005c38:	681c      	ldr	r4, [r3, #0]
 8005c3a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005c3e:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6858      	ldr	r0, [r3, #4]
 8005c46:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005c4a:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	8959      	ldrh	r1, [r3, #10]
 8005c52:	f107 0512 	add.w	r5, r7, #18
 8005c56:	f107 0214 	add.w	r2, r7, #20
 8005c5a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005c5e:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	462b      	mov	r3, r5
 8005c68:	47a0      	blx	r4

	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT, lenOut, PBUF_RAM);
 8005c6a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005c6e:	f2a3 6346 	subw	r3, r3, #1606	; 0x646
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	2200      	movs	r2, #0
 8005c76:	4619      	mov	r1, r3
 8005c78:	2000      	movs	r0, #0
 8005c7a:	f001 fbdf 	bl	800743c <pbuf_alloc>
 8005c7e:	f8c7 0654 	str.w	r0, [r7, #1620]	; 0x654

	/* copy the data into the buffer  */
	pbuf_take(txBuf, bufOut, lenOut);
 8005c82:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005c86:	f2a3 6346 	subw	r3, r3, #1606	; 0x646
 8005c8a:	881a      	ldrh	r2, [r3, #0]
 8005c8c:	f107 0314 	add.w	r3, r7, #20
 8005c90:	4619      	mov	r1, r3
 8005c92:	f8d7 0654 	ldr.w	r0, [r7, #1620]	; 0x654
 8005c96:	f002 f9c1 	bl	800801c <pbuf_take>

	/* Connect to the remote client */
	udp_connect(upcb, addr, port);
 8005c9a:	f8b7 2668 	ldrh.w	r2, [r7, #1640]	; 0x668
 8005c9e:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005ca2:	f5a3 61cb 	sub.w	r1, r3, #1624	; 0x658
 8005ca6:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005caa:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 8005cae:	6809      	ldr	r1, [r1, #0]
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	f007 fafb 	bl	800d2ac <udp_connect>

	/* Send a Reply to the Client */
	udp_send(upcb, txBuf);
 8005cb6:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005cba:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 8005cbe:	f8d7 1654 	ldr.w	r1, [r7, #1620]	; 0x654
 8005cc2:	6818      	ldr	r0, [r3, #0]
 8005cc4:	f007 f954 	bl	800cf70 <udp_send>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb);
 8005cc8:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005ccc:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	f007 fb41 	bl	800d358 <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 8005cd6:	f8d7 0654 	ldr.w	r0, [r7, #1620]	; 0x654
 8005cda:	f001 ff27 	bl	8007b2c <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p);
 8005cde:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8005ce2:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8005ce6:	6818      	ldr	r0, [r3, #0]
 8005ce8:	f001 ff20 	bl	8007b2c <pbuf_free>
}
 8005cec:	bf00      	nop
 8005cee:	f507 67cb 	add.w	r7, r7, #1624	; 0x658
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000000 	.word	0x20000000

08005cfc <udpServer_init>:

void udpServer_init(void *rec_arg) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
	// UDP Control Block structure
	struct udp_pcb *upcb;
	err_t err;

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8005d04:	f007 fb82 	bl	800d40c <udp_new>
 8005d08:	6178      	str	r0, [r7, #20]

	/* 2. Bind the upcb to the local port */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005d0a:	4b2f      	ldr	r3, [pc, #188]	; (8005dc8 <udpServer_init+0xcc>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	061a      	lsls	r2, r3, #24
 8005d10:	4b2d      	ldr	r3, [pc, #180]	; (8005dc8 <udpServer_init+0xcc>)
 8005d12:	785b      	ldrb	r3, [r3, #1]
 8005d14:	041b      	lsls	r3, r3, #16
 8005d16:	431a      	orrs	r2, r3
 8005d18:	4b2b      	ldr	r3, [pc, #172]	; (8005dc8 <udpServer_init+0xcc>)
 8005d1a:	789b      	ldrb	r3, [r3, #2]
 8005d1c:	021b      	lsls	r3, r3, #8
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	4a29      	ldr	r2, [pc, #164]	; (8005dc8 <udpServer_init+0xcc>)
 8005d22:	78d2      	ldrb	r2, [r2, #3]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	061a      	lsls	r2, r3, #24
 8005d28:	4b27      	ldr	r3, [pc, #156]	; (8005dc8 <udpServer_init+0xcc>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	0619      	lsls	r1, r3, #24
 8005d2e:	4b26      	ldr	r3, [pc, #152]	; (8005dc8 <udpServer_init+0xcc>)
 8005d30:	785b      	ldrb	r3, [r3, #1]
 8005d32:	041b      	lsls	r3, r3, #16
 8005d34:	4319      	orrs	r1, r3
 8005d36:	4b24      	ldr	r3, [pc, #144]	; (8005dc8 <udpServer_init+0xcc>)
 8005d38:	789b      	ldrb	r3, [r3, #2]
 8005d3a:	021b      	lsls	r3, r3, #8
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	4922      	ldr	r1, [pc, #136]	; (8005dc8 <udpServer_init+0xcc>)
 8005d40:	78c9      	ldrb	r1, [r1, #3]
 8005d42:	430b      	orrs	r3, r1
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	4b1e      	ldr	r3, [pc, #120]	; (8005dc8 <udpServer_init+0xcc>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	0619      	lsls	r1, r3, #24
 8005d52:	4b1d      	ldr	r3, [pc, #116]	; (8005dc8 <udpServer_init+0xcc>)
 8005d54:	785b      	ldrb	r3, [r3, #1]
 8005d56:	041b      	lsls	r3, r3, #16
 8005d58:	4319      	orrs	r1, r3
 8005d5a:	4b1b      	ldr	r3, [pc, #108]	; (8005dc8 <udpServer_init+0xcc>)
 8005d5c:	789b      	ldrb	r3, [r3, #2]
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	430b      	orrs	r3, r1
 8005d62:	4919      	ldr	r1, [pc, #100]	; (8005dc8 <udpServer_init+0xcc>)
 8005d64:	78c9      	ldrb	r1, [r1, #3]
 8005d66:	430b      	orrs	r3, r1
 8005d68:	0a1b      	lsrs	r3, r3, #8
 8005d6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	4b15      	ldr	r3, [pc, #84]	; (8005dc8 <udpServer_init+0xcc>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	0619      	lsls	r1, r3, #24
 8005d76:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <udpServer_init+0xcc>)
 8005d78:	785b      	ldrb	r3, [r3, #1]
 8005d7a:	041b      	lsls	r3, r3, #16
 8005d7c:	4319      	orrs	r1, r3
 8005d7e:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <udpServer_init+0xcc>)
 8005d80:	789b      	ldrb	r3, [r3, #2]
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	430b      	orrs	r3, r1
 8005d86:	4910      	ldr	r1, [pc, #64]	; (8005dc8 <udpServer_init+0xcc>)
 8005d88:	78c9      	ldrb	r1, [r1, #3]
 8005d8a:	430b      	orrs	r3, r1
 8005d8c:	0e1b      	lsrs	r3, r3, #24
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]

	err = udp_bind(upcb, &myIPADDR, 7);  // 7 is the server UDP port
 8005d92:	f107 030c 	add.w	r3, r7, #12
 8005d96:	2207      	movs	r2, #7
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6978      	ldr	r0, [r7, #20]
 8005d9c:	f007 fa16 	bl	800d1cc <udp_bind>
 8005da0:	4603      	mov	r3, r0
 8005da2:	74fb      	strb	r3, [r7, #19]

	/* 3. Set a receive callback for the upcb */
	if (err == ERR_OK) {
 8005da4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d105      	bne.n	8005db8 <udpServer_init+0xbc>
		udp_recv(upcb, udp_receive_callback, rec_arg);
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	4907      	ldr	r1, [pc, #28]	; (8005dcc <udpServer_init+0xd0>)
 8005db0:	6978      	ldr	r0, [r7, #20]
 8005db2:	f007 fae7 	bl	800d384 <udp_recv>
	} else {
		udp_remove(upcb);
	}
}
 8005db6:	e002      	b.n	8005dbe <udpServer_init+0xc2>
		udp_remove(upcb);
 8005db8:	6978      	ldr	r0, [r7, #20]
 8005dba:	f007 faf5 	bl	800d3a8 <udp_remove>
}
 8005dbe:	bf00      	nop
 8005dc0:	3718      	adds	r7, #24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	200007c8 	.word	0x200007c8
 8005dcc:	08005bf9 	.word	0x08005bf9

08005dd0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 16;
 8005dd6:	4b8d      	ldr	r3, [pc, #564]	; (800600c <MX_LWIP_Init+0x23c>)
 8005dd8:	2210      	movs	r2, #16
 8005dda:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8005ddc:	4b8b      	ldr	r3, [pc, #556]	; (800600c <MX_LWIP_Init+0x23c>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8005de2:	4b8a      	ldr	r3, [pc, #552]	; (800600c <MX_LWIP_Init+0x23c>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 16;
 8005de8:	4b88      	ldr	r3, [pc, #544]	; (800600c <MX_LWIP_Init+0x23c>)
 8005dea:	2210      	movs	r2, #16
 8005dec:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005dee:	4b88      	ldr	r3, [pc, #544]	; (8006010 <MX_LWIP_Init+0x240>)
 8005df0:	22ff      	movs	r2, #255	; 0xff
 8005df2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005df4:	4b86      	ldr	r3, [pc, #536]	; (8006010 <MX_LWIP_Init+0x240>)
 8005df6:	22ff      	movs	r2, #255	; 0xff
 8005df8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005dfa:	4b85      	ldr	r3, [pc, #532]	; (8006010 <MX_LWIP_Init+0x240>)
 8005dfc:	22ff      	movs	r2, #255	; 0xff
 8005dfe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005e00:	4b83      	ldr	r3, [pc, #524]	; (8006010 <MX_LWIP_Init+0x240>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 16;
 8005e06:	4b83      	ldr	r3, [pc, #524]	; (8006014 <MX_LWIP_Init+0x244>)
 8005e08:	2210      	movs	r2, #16
 8005e0a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8005e0c:	4b81      	ldr	r3, [pc, #516]	; (8006014 <MX_LWIP_Init+0x244>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005e12:	4b80      	ldr	r3, [pc, #512]	; (8006014 <MX_LWIP_Init+0x244>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005e18:	4b7e      	ldr	r3, [pc, #504]	; (8006014 <MX_LWIP_Init+0x244>)
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8005e1e:	f000 fcd9 	bl	80067d4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005e22:	4b7a      	ldr	r3, [pc, #488]	; (800600c <MX_LWIP_Init+0x23c>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	061a      	lsls	r2, r3, #24
 8005e28:	4b78      	ldr	r3, [pc, #480]	; (800600c <MX_LWIP_Init+0x23c>)
 8005e2a:	785b      	ldrb	r3, [r3, #1]
 8005e2c:	041b      	lsls	r3, r3, #16
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	4b76      	ldr	r3, [pc, #472]	; (800600c <MX_LWIP_Init+0x23c>)
 8005e32:	789b      	ldrb	r3, [r3, #2]
 8005e34:	021b      	lsls	r3, r3, #8
 8005e36:	4313      	orrs	r3, r2
 8005e38:	4a74      	ldr	r2, [pc, #464]	; (800600c <MX_LWIP_Init+0x23c>)
 8005e3a:	78d2      	ldrb	r2, [r2, #3]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	061a      	lsls	r2, r3, #24
 8005e40:	4b72      	ldr	r3, [pc, #456]	; (800600c <MX_LWIP_Init+0x23c>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	0619      	lsls	r1, r3, #24
 8005e46:	4b71      	ldr	r3, [pc, #452]	; (800600c <MX_LWIP_Init+0x23c>)
 8005e48:	785b      	ldrb	r3, [r3, #1]
 8005e4a:	041b      	lsls	r3, r3, #16
 8005e4c:	4319      	orrs	r1, r3
 8005e4e:	4b6f      	ldr	r3, [pc, #444]	; (800600c <MX_LWIP_Init+0x23c>)
 8005e50:	789b      	ldrb	r3, [r3, #2]
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	430b      	orrs	r3, r1
 8005e56:	496d      	ldr	r1, [pc, #436]	; (800600c <MX_LWIP_Init+0x23c>)
 8005e58:	78c9      	ldrb	r1, [r1, #3]
 8005e5a:	430b      	orrs	r3, r1
 8005e5c:	021b      	lsls	r3, r3, #8
 8005e5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e62:	431a      	orrs	r2, r3
 8005e64:	4b69      	ldr	r3, [pc, #420]	; (800600c <MX_LWIP_Init+0x23c>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	0619      	lsls	r1, r3, #24
 8005e6a:	4b68      	ldr	r3, [pc, #416]	; (800600c <MX_LWIP_Init+0x23c>)
 8005e6c:	785b      	ldrb	r3, [r3, #1]
 8005e6e:	041b      	lsls	r3, r3, #16
 8005e70:	4319      	orrs	r1, r3
 8005e72:	4b66      	ldr	r3, [pc, #408]	; (800600c <MX_LWIP_Init+0x23c>)
 8005e74:	789b      	ldrb	r3, [r3, #2]
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	430b      	orrs	r3, r1
 8005e7a:	4964      	ldr	r1, [pc, #400]	; (800600c <MX_LWIP_Init+0x23c>)
 8005e7c:	78c9      	ldrb	r1, [r1, #3]
 8005e7e:	430b      	orrs	r3, r1
 8005e80:	0a1b      	lsrs	r3, r3, #8
 8005e82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005e86:	431a      	orrs	r2, r3
 8005e88:	4b60      	ldr	r3, [pc, #384]	; (800600c <MX_LWIP_Init+0x23c>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	0619      	lsls	r1, r3, #24
 8005e8e:	4b5f      	ldr	r3, [pc, #380]	; (800600c <MX_LWIP_Init+0x23c>)
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	041b      	lsls	r3, r3, #16
 8005e94:	4319      	orrs	r1, r3
 8005e96:	4b5d      	ldr	r3, [pc, #372]	; (800600c <MX_LWIP_Init+0x23c>)
 8005e98:	789b      	ldrb	r3, [r3, #2]
 8005e9a:	021b      	lsls	r3, r3, #8
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	495b      	ldr	r1, [pc, #364]	; (800600c <MX_LWIP_Init+0x23c>)
 8005ea0:	78c9      	ldrb	r1, [r1, #3]
 8005ea2:	430b      	orrs	r3, r1
 8005ea4:	0e1b      	lsrs	r3, r3, #24
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	4a5b      	ldr	r2, [pc, #364]	; (8006018 <MX_LWIP_Init+0x248>)
 8005eaa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005eac:	4b58      	ldr	r3, [pc, #352]	; (8006010 <MX_LWIP_Init+0x240>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	061a      	lsls	r2, r3, #24
 8005eb2:	4b57      	ldr	r3, [pc, #348]	; (8006010 <MX_LWIP_Init+0x240>)
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	041b      	lsls	r3, r3, #16
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	4b55      	ldr	r3, [pc, #340]	; (8006010 <MX_LWIP_Init+0x240>)
 8005ebc:	789b      	ldrb	r3, [r3, #2]
 8005ebe:	021b      	lsls	r3, r3, #8
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	4a53      	ldr	r2, [pc, #332]	; (8006010 <MX_LWIP_Init+0x240>)
 8005ec4:	78d2      	ldrb	r2, [r2, #3]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	061a      	lsls	r2, r3, #24
 8005eca:	4b51      	ldr	r3, [pc, #324]	; (8006010 <MX_LWIP_Init+0x240>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	0619      	lsls	r1, r3, #24
 8005ed0:	4b4f      	ldr	r3, [pc, #316]	; (8006010 <MX_LWIP_Init+0x240>)
 8005ed2:	785b      	ldrb	r3, [r3, #1]
 8005ed4:	041b      	lsls	r3, r3, #16
 8005ed6:	4319      	orrs	r1, r3
 8005ed8:	4b4d      	ldr	r3, [pc, #308]	; (8006010 <MX_LWIP_Init+0x240>)
 8005eda:	789b      	ldrb	r3, [r3, #2]
 8005edc:	021b      	lsls	r3, r3, #8
 8005ede:	430b      	orrs	r3, r1
 8005ee0:	494b      	ldr	r1, [pc, #300]	; (8006010 <MX_LWIP_Init+0x240>)
 8005ee2:	78c9      	ldrb	r1, [r1, #3]
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	021b      	lsls	r3, r3, #8
 8005ee8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005eec:	431a      	orrs	r2, r3
 8005eee:	4b48      	ldr	r3, [pc, #288]	; (8006010 <MX_LWIP_Init+0x240>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	0619      	lsls	r1, r3, #24
 8005ef4:	4b46      	ldr	r3, [pc, #280]	; (8006010 <MX_LWIP_Init+0x240>)
 8005ef6:	785b      	ldrb	r3, [r3, #1]
 8005ef8:	041b      	lsls	r3, r3, #16
 8005efa:	4319      	orrs	r1, r3
 8005efc:	4b44      	ldr	r3, [pc, #272]	; (8006010 <MX_LWIP_Init+0x240>)
 8005efe:	789b      	ldrb	r3, [r3, #2]
 8005f00:	021b      	lsls	r3, r3, #8
 8005f02:	430b      	orrs	r3, r1
 8005f04:	4942      	ldr	r1, [pc, #264]	; (8006010 <MX_LWIP_Init+0x240>)
 8005f06:	78c9      	ldrb	r1, [r1, #3]
 8005f08:	430b      	orrs	r3, r1
 8005f0a:	0a1b      	lsrs	r3, r3, #8
 8005f0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005f10:	431a      	orrs	r2, r3
 8005f12:	4b3f      	ldr	r3, [pc, #252]	; (8006010 <MX_LWIP_Init+0x240>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	0619      	lsls	r1, r3, #24
 8005f18:	4b3d      	ldr	r3, [pc, #244]	; (8006010 <MX_LWIP_Init+0x240>)
 8005f1a:	785b      	ldrb	r3, [r3, #1]
 8005f1c:	041b      	lsls	r3, r3, #16
 8005f1e:	4319      	orrs	r1, r3
 8005f20:	4b3b      	ldr	r3, [pc, #236]	; (8006010 <MX_LWIP_Init+0x240>)
 8005f22:	789b      	ldrb	r3, [r3, #2]
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	430b      	orrs	r3, r1
 8005f28:	4939      	ldr	r1, [pc, #228]	; (8006010 <MX_LWIP_Init+0x240>)
 8005f2a:	78c9      	ldrb	r1, [r1, #3]
 8005f2c:	430b      	orrs	r3, r1
 8005f2e:	0e1b      	lsrs	r3, r3, #24
 8005f30:	4313      	orrs	r3, r2
 8005f32:	4a3a      	ldr	r2, [pc, #232]	; (800601c <MX_LWIP_Init+0x24c>)
 8005f34:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005f36:	4b37      	ldr	r3, [pc, #220]	; (8006014 <MX_LWIP_Init+0x244>)
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	061a      	lsls	r2, r3, #24
 8005f3c:	4b35      	ldr	r3, [pc, #212]	; (8006014 <MX_LWIP_Init+0x244>)
 8005f3e:	785b      	ldrb	r3, [r3, #1]
 8005f40:	041b      	lsls	r3, r3, #16
 8005f42:	431a      	orrs	r2, r3
 8005f44:	4b33      	ldr	r3, [pc, #204]	; (8006014 <MX_LWIP_Init+0x244>)
 8005f46:	789b      	ldrb	r3, [r3, #2]
 8005f48:	021b      	lsls	r3, r3, #8
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	4a31      	ldr	r2, [pc, #196]	; (8006014 <MX_LWIP_Init+0x244>)
 8005f4e:	78d2      	ldrb	r2, [r2, #3]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	061a      	lsls	r2, r3, #24
 8005f54:	4b2f      	ldr	r3, [pc, #188]	; (8006014 <MX_LWIP_Init+0x244>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	0619      	lsls	r1, r3, #24
 8005f5a:	4b2e      	ldr	r3, [pc, #184]	; (8006014 <MX_LWIP_Init+0x244>)
 8005f5c:	785b      	ldrb	r3, [r3, #1]
 8005f5e:	041b      	lsls	r3, r3, #16
 8005f60:	4319      	orrs	r1, r3
 8005f62:	4b2c      	ldr	r3, [pc, #176]	; (8006014 <MX_LWIP_Init+0x244>)
 8005f64:	789b      	ldrb	r3, [r3, #2]
 8005f66:	021b      	lsls	r3, r3, #8
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	492a      	ldr	r1, [pc, #168]	; (8006014 <MX_LWIP_Init+0x244>)
 8005f6c:	78c9      	ldrb	r1, [r1, #3]
 8005f6e:	430b      	orrs	r3, r1
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f76:	431a      	orrs	r2, r3
 8005f78:	4b26      	ldr	r3, [pc, #152]	; (8006014 <MX_LWIP_Init+0x244>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	0619      	lsls	r1, r3, #24
 8005f7e:	4b25      	ldr	r3, [pc, #148]	; (8006014 <MX_LWIP_Init+0x244>)
 8005f80:	785b      	ldrb	r3, [r3, #1]
 8005f82:	041b      	lsls	r3, r3, #16
 8005f84:	4319      	orrs	r1, r3
 8005f86:	4b23      	ldr	r3, [pc, #140]	; (8006014 <MX_LWIP_Init+0x244>)
 8005f88:	789b      	ldrb	r3, [r3, #2]
 8005f8a:	021b      	lsls	r3, r3, #8
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	4921      	ldr	r1, [pc, #132]	; (8006014 <MX_LWIP_Init+0x244>)
 8005f90:	78c9      	ldrb	r1, [r1, #3]
 8005f92:	430b      	orrs	r3, r1
 8005f94:	0a1b      	lsrs	r3, r3, #8
 8005f96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	4b1d      	ldr	r3, [pc, #116]	; (8006014 <MX_LWIP_Init+0x244>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	0619      	lsls	r1, r3, #24
 8005fa2:	4b1c      	ldr	r3, [pc, #112]	; (8006014 <MX_LWIP_Init+0x244>)
 8005fa4:	785b      	ldrb	r3, [r3, #1]
 8005fa6:	041b      	lsls	r3, r3, #16
 8005fa8:	4319      	orrs	r1, r3
 8005faa:	4b1a      	ldr	r3, [pc, #104]	; (8006014 <MX_LWIP_Init+0x244>)
 8005fac:	789b      	ldrb	r3, [r3, #2]
 8005fae:	021b      	lsls	r3, r3, #8
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	4918      	ldr	r1, [pc, #96]	; (8006014 <MX_LWIP_Init+0x244>)
 8005fb4:	78c9      	ldrb	r1, [r1, #3]
 8005fb6:	430b      	orrs	r3, r1
 8005fb8:	0e1b      	lsrs	r3, r3, #24
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	4a18      	ldr	r2, [pc, #96]	; (8006020 <MX_LWIP_Init+0x250>)
 8005fbe:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005fc0:	4b18      	ldr	r3, [pc, #96]	; (8006024 <MX_LWIP_Init+0x254>)
 8005fc2:	9302      	str	r3, [sp, #8]
 8005fc4:	4b18      	ldr	r3, [pc, #96]	; (8006028 <MX_LWIP_Init+0x258>)
 8005fc6:	9301      	str	r3, [sp, #4]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	4b14      	ldr	r3, [pc, #80]	; (8006020 <MX_LWIP_Init+0x250>)
 8005fce:	4a13      	ldr	r2, [pc, #76]	; (800601c <MX_LWIP_Init+0x24c>)
 8005fd0:	4911      	ldr	r1, [pc, #68]	; (8006018 <MX_LWIP_Init+0x248>)
 8005fd2:	4816      	ldr	r0, [pc, #88]	; (800602c <MX_LWIP_Init+0x25c>)
 8005fd4:	f001 f89c 	bl	8007110 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005fd8:	4814      	ldr	r0, [pc, #80]	; (800602c <MX_LWIP_Init+0x25c>)
 8005fda:	f001 f97b 	bl	80072d4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005fde:	4b13      	ldr	r3, [pc, #76]	; (800602c <MX_LWIP_Init+0x25c>)
 8005fe0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005fe4:	089b      	lsrs	r3, r3, #2
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005ff0:	480e      	ldr	r0, [pc, #56]	; (800602c <MX_LWIP_Init+0x25c>)
 8005ff2:	f001 f97d 	bl	80072f0 <netif_set_up>
 8005ff6:	e002      	b.n	8005ffe <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005ff8:	480c      	ldr	r0, [pc, #48]	; (800602c <MX_LWIP_Init+0x25c>)
 8005ffa:	f001 f9bd 	bl	8007378 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005ffe:	490c      	ldr	r1, [pc, #48]	; (8006030 <MX_LWIP_Init+0x260>)
 8006000:	480a      	ldr	r0, [pc, #40]	; (800602c <MX_LWIP_Init+0x25c>)
 8006002:	f001 f9db 	bl	80073bc <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006006:	bf00      	nop
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	200007c8 	.word	0x200007c8
 8006010:	200007cc 	.word	0x200007cc
 8006014:	200007d0 	.word	0x200007d0
 8006018:	200007bc 	.word	0x200007bc
 800601c:	200007c0 	.word	0x200007c0
 8006020:	200007c4 	.word	0x200007c4
 8006024:	0800f931 	.word	0x0800f931
 8006028:	08006615 	.word	0x08006615
 800602c:	20000788 	.word	0x20000788
 8006030:	08006681 	.word	0x08006681

08006034 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8006038:	4803      	ldr	r0, [pc, #12]	; (8006048 <MX_LWIP_Process+0x14>)
 800603a:	f000 facb 	bl	80065d4 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800603e:	f006 fdad 	bl	800cb9c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8006042:	bf00      	nop
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000788 	.word	0x20000788

0800604c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08e      	sub	sp, #56	; 0x38
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	605a      	str	r2, [r3, #4]
 800605e:	609a      	str	r2, [r3, #8]
 8006060:	60da      	str	r2, [r3, #12]
 8006062:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a55      	ldr	r2, [pc, #340]	; (80061c0 <HAL_ETH_MspInit+0x174>)
 800606a:	4293      	cmp	r3, r2
 800606c:	f040 80a4 	bne.w	80061b8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006070:	2300      	movs	r3, #0
 8006072:	623b      	str	r3, [r7, #32]
 8006074:	4b53      	ldr	r3, [pc, #332]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 8006076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006078:	4a52      	ldr	r2, [pc, #328]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 800607a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800607e:	6313      	str	r3, [r2, #48]	; 0x30
 8006080:	4b50      	ldr	r3, [pc, #320]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 8006082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006088:	623b      	str	r3, [r7, #32]
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	2300      	movs	r3, #0
 800608e:	61fb      	str	r3, [r7, #28]
 8006090:	4b4c      	ldr	r3, [pc, #304]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	4a4b      	ldr	r2, [pc, #300]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 8006096:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800609a:	6313      	str	r3, [r2, #48]	; 0x30
 800609c:	4b49      	ldr	r3, [pc, #292]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060a4:	61fb      	str	r3, [r7, #28]
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	2300      	movs	r3, #0
 80060aa:	61bb      	str	r3, [r7, #24]
 80060ac:	4b45      	ldr	r3, [pc, #276]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	4a44      	ldr	r2, [pc, #272]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 80060b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060b6:	6313      	str	r3, [r2, #48]	; 0x30
 80060b8:	4b42      	ldr	r3, [pc, #264]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060c4:	2300      	movs	r3, #0
 80060c6:	617b      	str	r3, [r7, #20]
 80060c8:	4b3e      	ldr	r3, [pc, #248]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	4a3d      	ldr	r2, [pc, #244]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 80060ce:	f043 0304 	orr.w	r3, r3, #4
 80060d2:	6313      	str	r3, [r2, #48]	; 0x30
 80060d4:	4b3b      	ldr	r3, [pc, #236]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 80060d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060e0:	2300      	movs	r3, #0
 80060e2:	613b      	str	r3, [r7, #16]
 80060e4:	4b37      	ldr	r3, [pc, #220]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 80060e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e8:	4a36      	ldr	r2, [pc, #216]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 80060ea:	f043 0301 	orr.w	r3, r3, #1
 80060ee:	6313      	str	r3, [r2, #48]	; 0x30
 80060f0:	4b34      	ldr	r3, [pc, #208]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 80060f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	4b30      	ldr	r3, [pc, #192]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 8006102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006104:	4a2f      	ldr	r2, [pc, #188]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 8006106:	f043 0302 	orr.w	r3, r3, #2
 800610a:	6313      	str	r3, [r2, #48]	; 0x30
 800610c:	4b2d      	ldr	r3, [pc, #180]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 800610e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	60fb      	str	r3, [r7, #12]
 8006116:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006118:	2300      	movs	r3, #0
 800611a:	60bb      	str	r3, [r7, #8]
 800611c:	4b29      	ldr	r3, [pc, #164]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 800611e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006120:	4a28      	ldr	r2, [pc, #160]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 8006122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006126:	6313      	str	r3, [r2, #48]	; 0x30
 8006128:	4b26      	ldr	r3, [pc, #152]	; (80061c4 <HAL_ETH_MspInit+0x178>)
 800612a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006130:	60bb      	str	r3, [r7, #8]
 8006132:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006134:	2332      	movs	r3, #50	; 0x32
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006138:	2302      	movs	r3, #2
 800613a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800613c:	2300      	movs	r3, #0
 800613e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006140:	2303      	movs	r3, #3
 8006142:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006144:	230b      	movs	r3, #11
 8006146:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800614c:	4619      	mov	r1, r3
 800614e:	481e      	ldr	r0, [pc, #120]	; (80061c8 <HAL_ETH_MspInit+0x17c>)
 8006150:	f7fe fa44 	bl	80045dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006154:	2386      	movs	r3, #134	; 0x86
 8006156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006158:	2302      	movs	r3, #2
 800615a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800615c:	2300      	movs	r3, #0
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006160:	2303      	movs	r3, #3
 8006162:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006164:	230b      	movs	r3, #11
 8006166:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800616c:	4619      	mov	r1, r3
 800616e:	4817      	ldr	r0, [pc, #92]	; (80061cc <HAL_ETH_MspInit+0x180>)
 8006170:	f7fe fa34 	bl	80045dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800617a:	2302      	movs	r3, #2
 800617c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800617e:	2300      	movs	r3, #0
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006182:	2303      	movs	r3, #3
 8006184:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006186:	230b      	movs	r3, #11
 8006188:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800618a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800618e:	4619      	mov	r1, r3
 8006190:	480f      	ldr	r0, [pc, #60]	; (80061d0 <HAL_ETH_MspInit+0x184>)
 8006192:	f7fe fa23 	bl	80045dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006196:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800619c:	2302      	movs	r3, #2
 800619e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a0:	2300      	movs	r3, #0
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061a4:	2303      	movs	r3, #3
 80061a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80061a8:	230b      	movs	r3, #11
 80061aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80061ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061b0:	4619      	mov	r1, r3
 80061b2:	4808      	ldr	r0, [pc, #32]	; (80061d4 <HAL_ETH_MspInit+0x188>)
 80061b4:	f7fe fa12 	bl	80045dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80061b8:	bf00      	nop
 80061ba:	3738      	adds	r7, #56	; 0x38
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40028000 	.word	0x40028000
 80061c4:	40023800 	.word	0x40023800
 80061c8:	40020800 	.word	0x40020800
 80061cc:	40020000 	.word	0x40020000
 80061d0:	40020400 	.word	0x40020400
 80061d4:	40021800 	.word	0x40021800

080061d8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80061e4:	4b4d      	ldr	r3, [pc, #308]	; (800631c <low_level_init+0x144>)
 80061e6:	4a4e      	ldr	r2, [pc, #312]	; (8006320 <low_level_init+0x148>)
 80061e8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80061ea:	4b4c      	ldr	r3, [pc, #304]	; (800631c <low_level_init+0x144>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80061f0:	4b4a      	ldr	r3, [pc, #296]	; (800631c <low_level_init+0x144>)
 80061f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061f6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80061f8:	4b48      	ldr	r3, [pc, #288]	; (800631c <low_level_init+0x144>)
 80061fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061fe:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006200:	4b46      	ldr	r3, [pc, #280]	; (800631c <low_level_init+0x144>)
 8006202:	2200      	movs	r2, #0
 8006204:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x56;
 8006206:	2356      	movs	r3, #86	; 0x56
 8006208:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0xCD;
 800620a:	23cd      	movs	r3, #205	; 0xcd
 800620c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x43;
 800620e:	2343      	movs	r3, #67	; 0x43
 8006210:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x54;
 8006212:	2354      	movs	r3, #84	; 0x54
 8006214:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x4F;
 8006216:	234f      	movs	r3, #79	; 0x4f
 8006218:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x52;
 800621a:	2352      	movs	r3, #82	; 0x52
 800621c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800621e:	4a3f      	ldr	r2, [pc, #252]	; (800631c <low_level_init+0x144>)
 8006220:	f107 0308 	add.w	r3, r7, #8
 8006224:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8006226:	4b3d      	ldr	r3, [pc, #244]	; (800631c <low_level_init+0x144>)
 8006228:	2200      	movs	r2, #0
 800622a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800622c:	4b3b      	ldr	r3, [pc, #236]	; (800631c <low_level_init+0x144>)
 800622e:	2200      	movs	r2, #0
 8006230:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006232:	4b3a      	ldr	r3, [pc, #232]	; (800631c <low_level_init+0x144>)
 8006234:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006238:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800623a:	4838      	ldr	r0, [pc, #224]	; (800631c <low_level_init+0x144>)
 800623c:	f7fd f8d6 	bl	80033ec <HAL_ETH_Init>
 8006240:	4603      	mov	r3, r0
 8006242:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8006244:	7dfb      	ldrb	r3, [r7, #23]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d108      	bne.n	800625c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006250:	f043 0304 	orr.w	r3, r3, #4
 8006254:	b2da      	uxtb	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800625c:	2304      	movs	r3, #4
 800625e:	4a31      	ldr	r2, [pc, #196]	; (8006324 <low_level_init+0x14c>)
 8006260:	4931      	ldr	r1, [pc, #196]	; (8006328 <low_level_init+0x150>)
 8006262:	482e      	ldr	r0, [pc, #184]	; (800631c <low_level_init+0x144>)
 8006264:	f7fd fa4e 	bl	8003704 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006268:	2304      	movs	r3, #4
 800626a:	4a30      	ldr	r2, [pc, #192]	; (800632c <low_level_init+0x154>)
 800626c:	4930      	ldr	r1, [pc, #192]	; (8006330 <low_level_init+0x158>)
 800626e:	482b      	ldr	r0, [pc, #172]	; (800631c <low_level_init+0x144>)
 8006270:	f7fd faaf 	bl	80037d2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2206      	movs	r2, #6
 8006278:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800627c:	4b27      	ldr	r3, [pc, #156]	; (800631c <low_level_init+0x144>)
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	781a      	ldrb	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006288:	4b24      	ldr	r3, [pc, #144]	; (800631c <low_level_init+0x144>)
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	785a      	ldrb	r2, [r3, #1]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006294:	4b21      	ldr	r3, [pc, #132]	; (800631c <low_level_init+0x144>)
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	789a      	ldrb	r2, [r3, #2]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80062a0:	4b1e      	ldr	r3, [pc, #120]	; (800631c <low_level_init+0x144>)
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	78da      	ldrb	r2, [r3, #3]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80062ac:	4b1b      	ldr	r3, [pc, #108]	; (800631c <low_level_init+0x144>)
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	791a      	ldrb	r2, [r3, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80062b8:	4b18      	ldr	r3, [pc, #96]	; (800631c <low_level_init+0x144>)
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	795a      	ldrb	r2, [r3, #5]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80062ca:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80062d2:	f043 030a 	orr.w	r3, r3, #10
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80062de:	480f      	ldr	r0, [pc, #60]	; (800631c <low_level_init+0x144>)
 80062e0:	f7fd fd1b 	bl	8003d1a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80062e4:	f107 0310 	add.w	r3, r7, #16
 80062e8:	461a      	mov	r2, r3
 80062ea:	211d      	movs	r1, #29
 80062ec:	480b      	ldr	r0, [pc, #44]	; (800631c <low_level_init+0x144>)
 80062ee:	f7fd fc46 	bl	8003b7e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f043 030b 	orr.w	r3, r3, #11
 80062f8:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	461a      	mov	r2, r3
 80062fe:	211d      	movs	r1, #29
 8006300:	4806      	ldr	r0, [pc, #24]	; (800631c <low_level_init+0x144>)
 8006302:	f7fd fca4 	bl	8003c4e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006306:	f107 0310 	add.w	r3, r7, #16
 800630a:	461a      	mov	r2, r3
 800630c:	211d      	movs	r1, #29
 800630e:	4803      	ldr	r0, [pc, #12]	; (800631c <low_level_init+0x144>)
 8006310:	f7fd fc35 	bl	8003b7e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006314:	bf00      	nop
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	20003874 	.word	0x20003874
 8006320:	40028000 	.word	0x40028000
 8006324:	200020a4 	.word	0x200020a4
 8006328:	20000854 	.word	0x20000854
 800632c:	200008d4 	.word	0x200008d4
 8006330:	200007d4 	.word	0x200007d4

08006334 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b08a      	sub	sp, #40	; 0x28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800633e:	4b4b      	ldr	r3, [pc, #300]	; (800646c <low_level_output+0x138>)
 8006340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800634a:	2300      	movs	r3, #0
 800634c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006352:	2300      	movs	r3, #0
 8006354:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006356:	4b45      	ldr	r3, [pc, #276]	; (800646c <low_level_output+0x138>)
 8006358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	623b      	str	r3, [r7, #32]
 8006364:	e05a      	b.n	800641c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	da03      	bge.n	8006376 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800636e:	23f8      	movs	r3, #248	; 0xf8
 8006370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006374:	e05c      	b.n	8006430 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	895b      	ldrh	r3, [r3, #10]
 800637a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800637c:	2300      	movs	r3, #0
 800637e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006380:	e02f      	b.n	80063e2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	18d0      	adds	r0, r2, r3
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	18d1      	adds	r1, r2, r3
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006396:	3304      	adds	r3, #4
 8006398:	461a      	mov	r2, r3
 800639a:	f00b fa8d 	bl	80118b8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	da03      	bge.n	80063b4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80063ac:	23f8      	movs	r3, #248	; 0xf8
 80063ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80063b2:	e03d      	b.n	8006430 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4413      	add	r3, r2
 80063c0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80063c4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80063d0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80063dc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80063de:	2300      	movs	r3, #0
 80063e0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	4413      	add	r3, r2
 80063e8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d8c8      	bhi.n	8006382 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80063f0:	69fa      	ldr	r2, [r7, #28]
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	18d0      	adds	r0, r2, r3
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	4413      	add	r3, r2
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	4619      	mov	r1, r3
 8006402:	f00b fa59 	bl	80118b8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4413      	add	r3, r2
 8006414:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	623b      	str	r3, [r7, #32]
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1a1      	bne.n	8006366 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006422:	6979      	ldr	r1, [r7, #20]
 8006424:	4811      	ldr	r0, [pc, #68]	; (800646c <low_level_output+0x138>)
 8006426:	f7fd fa3f 	bl	80038a8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006430:	4b0e      	ldr	r3, [pc, #56]	; (800646c <low_level_output+0x138>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00d      	beq.n	800645e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006442:	4b0a      	ldr	r3, [pc, #40]	; (800646c <low_level_output+0x138>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800644a:	461a      	mov	r2, r3
 800644c:	2320      	movs	r3, #32
 800644e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006450:	4b06      	ldr	r3, [pc, #24]	; (800646c <low_level_output+0x138>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006458:	461a      	mov	r2, r3
 800645a:	2300      	movs	r3, #0
 800645c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800645e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006462:	4618      	mov	r0, r3
 8006464:	3728      	adds	r7, #40	; 0x28
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20003874 	.word	0x20003874

08006470 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08c      	sub	sp, #48	; 0x30
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006478:	2300      	movs	r3, #0
 800647a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800647c:	2300      	movs	r3, #0
 800647e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006484:	2300      	movs	r3, #0
 8006486:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006488:	2300      	movs	r3, #0
 800648a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006490:	2300      	movs	r3, #0
 8006492:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8006494:	484e      	ldr	r0, [pc, #312]	; (80065d0 <low_level_input+0x160>)
 8006496:	f7fd faef 	bl	8003a78 <HAL_ETH_GetReceivedFrame>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <low_level_input+0x34>

    return NULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	e090      	b.n	80065c6 <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80064a4:	4b4a      	ldr	r3, [pc, #296]	; (80065d0 <low_level_input+0x160>)
 80064a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80064aa:	4b49      	ldr	r3, [pc, #292]	; (80065d0 <low_level_input+0x160>)
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80064b0:	89fb      	ldrh	r3, [r7, #14]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d006      	beq.n	80064c4 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80064b6:	89fb      	ldrh	r3, [r7, #14]
 80064b8:	2203      	movs	r2, #3
 80064ba:	4619      	mov	r1, r3
 80064bc:	2004      	movs	r0, #4
 80064be:	f000 ffbd 	bl	800743c <pbuf_alloc>
 80064c2:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d04b      	beq.n	8006562 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80064ca:	4b41      	ldr	r3, [pc, #260]	; (80065d0 <low_level_input+0x160>)
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80064d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064d8:	e040      	b.n	800655c <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	895b      	ldrh	r3, [r3, #10]
 80064de:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80064e0:	2300      	movs	r3, #0
 80064e2:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80064e4:	e021      	b.n	800652a <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80064e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	18d0      	adds	r0, r2, r3
 80064ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	18d1      	adds	r1, r2, r3
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80064fa:	3304      	adds	r3, #4
 80064fc:	461a      	mov	r2, r3
 80064fe:	f00b f9db 	bl	80118b8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	4413      	add	r3, r2
 8006514:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006518:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006524:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006526:	2300      	movs	r3, #0
 8006528:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	4413      	add	r3, r2
 8006530:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006534:	4293      	cmp	r3, r2
 8006536:	d8d6      	bhi.n	80064e6 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	18d0      	adds	r0, r2, r3
 8006540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	4413      	add	r3, r2
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	4619      	mov	r1, r3
 800654a:	f00b f9b5 	bl	80118b8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800654e:	69fa      	ldr	r2, [r7, #28]
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	4413      	add	r3, r2
 8006554:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	62bb      	str	r3, [r7, #40]	; 0x28
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1bb      	bne.n	80064da <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006562:	4b1b      	ldr	r3, [pc, #108]	; (80065d0 <low_level_input+0x160>)
 8006564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006566:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006568:	2300      	movs	r3, #0
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	e00b      	b.n	8006586 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	3301      	adds	r3, #1
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	4b12      	ldr	r3, [pc, #72]	; (80065d0 <low_level_input+0x160>)
 8006588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	429a      	cmp	r2, r3
 800658e:	d3ee      	bcc.n	800656e <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8006590:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <low_level_input+0x160>)
 8006592:	2200      	movs	r2, #0
 8006594:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006596:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <low_level_input+0x160>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00d      	beq.n	80065c4 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80065a8:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <low_level_input+0x160>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065b0:	461a      	mov	r2, r3
 80065b2:	2380      	movs	r3, #128	; 0x80
 80065b4:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80065b6:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <low_level_input+0x160>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065be:	461a      	mov	r2, r3
 80065c0:	2300      	movs	r3, #0
 80065c2:	6093      	str	r3, [r2, #8]
  }
  return p;
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3730      	adds	r7, #48	; 0x30
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20003874 	.word	0x20003874

080065d4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7ff ff47 	bl	8006470 <low_level_input>
 80065e2:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d010      	beq.n	800660c <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	4798      	blx	r3
 80065f4:	4603      	mov	r3, r0
 80065f6:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80065f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d006      	beq.n	800660e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f001 fa93 	bl	8007b2c <pbuf_free>
    p = NULL;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	e000      	b.n	800660e <ethernetif_input+0x3a>
  if (p == NULL) return;
 800660c:	bf00      	nop
  }
}
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d106      	bne.n	8006630 <ethernetif_init+0x1c>
 8006622:	4b0e      	ldr	r3, [pc, #56]	; (800665c <ethernetif_init+0x48>)
 8006624:	f44f 7205 	mov.w	r2, #532	; 0x214
 8006628:	490d      	ldr	r1, [pc, #52]	; (8006660 <ethernetif_init+0x4c>)
 800662a:	480e      	ldr	r0, [pc, #56]	; (8006664 <ethernetif_init+0x50>)
 800662c:	f00b ffc8 	bl	80125c0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2273      	movs	r2, #115	; 0x73
 8006634:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2274      	movs	r2, #116	; 0x74
 800663c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a09      	ldr	r2, [pc, #36]	; (8006668 <ethernetif_init+0x54>)
 8006644:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a08      	ldr	r2, [pc, #32]	; (800666c <ethernetif_init+0x58>)
 800664a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff fdc3 	bl	80061d8 <low_level_init>

  return ERR_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	0801627c 	.word	0x0801627c
 8006660:	08016298 	.word	0x08016298
 8006664:	080162a8 	.word	0x080162a8
 8006668:	0800dd0d 	.word	0x0800dd0d
 800666c:	08006335 	.word	0x08006335

08006670 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006674:	f7fc f8d0 	bl	8002818 <HAL_GetTick>
 8006678:	4603      	mov	r3, r0
}
 800667a:	4618      	mov	r0, r3
 800667c:	bd80      	pop	{r7, pc}
	...

08006680 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800668c:	2300      	movs	r3, #0
 800668e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006696:	089b      	lsrs	r3, r3, #2
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d05d      	beq.n	800675e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80066a2:	4b34      	ldr	r3, [pc, #208]	; (8006774 <ethernetif_update_config+0xf4>)
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d03f      	beq.n	800672a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80066aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80066ae:	2100      	movs	r1, #0
 80066b0:	4830      	ldr	r0, [pc, #192]	; (8006774 <ethernetif_update_config+0xf4>)
 80066b2:	f7fd facc 	bl	8003c4e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80066b6:	f7fc f8af 	bl	8002818 <HAL_GetTick>
 80066ba:	4603      	mov	r3, r0
 80066bc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80066be:	f107 0308 	add.w	r3, r7, #8
 80066c2:	461a      	mov	r2, r3
 80066c4:	2101      	movs	r1, #1
 80066c6:	482b      	ldr	r0, [pc, #172]	; (8006774 <ethernetif_update_config+0xf4>)
 80066c8:	f7fd fa59 	bl	8003b7e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80066cc:	f7fc f8a4 	bl	8002818 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066da:	d828      	bhi.n	800672e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0eb      	beq.n	80066be <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80066e6:	f107 0308 	add.w	r3, r7, #8
 80066ea:	461a      	mov	r2, r3
 80066ec:	2110      	movs	r1, #16
 80066ee:	4821      	ldr	r0, [pc, #132]	; (8006774 <ethernetif_update_config+0xf4>)
 80066f0:	f7fd fa45 	bl	8003b7e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f003 0304 	and.w	r3, r3, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d004      	beq.n	8006708 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80066fe:	4b1d      	ldr	r3, [pc, #116]	; (8006774 <ethernetif_update_config+0xf4>)
 8006700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006704:	60da      	str	r2, [r3, #12]
 8006706:	e002      	b.n	800670e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006708:	4b1a      	ldr	r3, [pc, #104]	; (8006774 <ethernetif_update_config+0xf4>)
 800670a:	2200      	movs	r2, #0
 800670c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006718:	4b16      	ldr	r3, [pc, #88]	; (8006774 <ethernetif_update_config+0xf4>)
 800671a:	2200      	movs	r2, #0
 800671c:	609a      	str	r2, [r3, #8]
 800671e:	e016      	b.n	800674e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006720:	4b14      	ldr	r3, [pc, #80]	; (8006774 <ethernetif_update_config+0xf4>)
 8006722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006726:	609a      	str	r2, [r3, #8]
 8006728:	e011      	b.n	800674e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800672a:	bf00      	nop
 800672c:	e000      	b.n	8006730 <ethernetif_update_config+0xb0>
          goto error;
 800672e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006730:	4b10      	ldr	r3, [pc, #64]	; (8006774 <ethernetif_update_config+0xf4>)
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	08db      	lsrs	r3, r3, #3
 8006736:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006738:	4b0e      	ldr	r3, [pc, #56]	; (8006774 <ethernetif_update_config+0xf4>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	085b      	lsrs	r3, r3, #1
 800673e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006740:	4313      	orrs	r3, r2
 8006742:	b29b      	uxth	r3, r3
 8006744:	461a      	mov	r2, r3
 8006746:	2100      	movs	r1, #0
 8006748:	480a      	ldr	r0, [pc, #40]	; (8006774 <ethernetif_update_config+0xf4>)
 800674a:	f7fd fa80 	bl	8003c4e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800674e:	2100      	movs	r1, #0
 8006750:	4808      	ldr	r0, [pc, #32]	; (8006774 <ethernetif_update_config+0xf4>)
 8006752:	f7fd fb41 	bl	8003dd8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006756:	4807      	ldr	r0, [pc, #28]	; (8006774 <ethernetif_update_config+0xf4>)
 8006758:	f7fd fadf 	bl	8003d1a <HAL_ETH_Start>
 800675c:	e002      	b.n	8006764 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800675e:	4805      	ldr	r0, [pc, #20]	; (8006774 <ethernetif_update_config+0xf4>)
 8006760:	f7fd fb0a 	bl	8003d78 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f807 	bl	8006778 <ethernetif_notify_conn_changed>
}
 800676a:	bf00      	nop
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20003874 	.word	0x20003874

08006778 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr

0800678a <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	4603      	mov	r3, r0
 8006792:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8006794:	88fb      	ldrh	r3, [r7, #6]
 8006796:	ba5b      	rev16	r3, r3
 8006798:	b29b      	uxth	r3, r3
}
 800679a:	4618      	mov	r0, r3
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	bc80      	pop	{r7}
 80067a2:	4770      	bx	lr

080067a4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	061a      	lsls	r2, r3, #24
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	0a1b      	lsrs	r3, r3, #8
 80067be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	0e1b      	lsrs	r3, r3, #24
 80067c8:	4313      	orrs	r3, r2
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bc80      	pop	{r7}
 80067d2:	4770      	bx	lr

080067d4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80067da:	2300      	movs	r3, #0
 80067dc:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 80067de:	f001 fcaf 	bl	8008140 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80067e2:	f000 f8a7 	bl	8006934 <mem_init>
  memp_init();
 80067e6:	f000 fba5 	bl	8006f34 <memp_init>
  pbuf_init();
  netif_init();
 80067ea:	f000 fc8b 	bl	8007104 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80067ee:	f006 fa27 	bl	800cc40 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80067f2:	f001 fcab 	bl	800814c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80067f6:	f006 f905 	bl	800ca04 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80067fa:	bf00      	nop
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800680c:	4b40      	ldr	r3, [pc, #256]	; (8006910 <plug_holes+0x10c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	429a      	cmp	r2, r3
 8006814:	d206      	bcs.n	8006824 <plug_holes+0x20>
 8006816:	4b3f      	ldr	r3, [pc, #252]	; (8006914 <plug_holes+0x110>)
 8006818:	f240 125d 	movw	r2, #349	; 0x15d
 800681c:	493e      	ldr	r1, [pc, #248]	; (8006918 <plug_holes+0x114>)
 800681e:	483f      	ldr	r0, [pc, #252]	; (800691c <plug_holes+0x118>)
 8006820:	f00b fece 	bl	80125c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006824:	4b3e      	ldr	r3, [pc, #248]	; (8006920 <plug_holes+0x11c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	429a      	cmp	r2, r3
 800682c:	d306      	bcc.n	800683c <plug_holes+0x38>
 800682e:	4b39      	ldr	r3, [pc, #228]	; (8006914 <plug_holes+0x110>)
 8006830:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006834:	493b      	ldr	r1, [pc, #236]	; (8006924 <plug_holes+0x120>)
 8006836:	4839      	ldr	r0, [pc, #228]	; (800691c <plug_holes+0x118>)
 8006838:	f00b fec2 	bl	80125c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	791b      	ldrb	r3, [r3, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d006      	beq.n	8006852 <plug_holes+0x4e>
 8006844:	4b33      	ldr	r3, [pc, #204]	; (8006914 <plug_holes+0x110>)
 8006846:	f240 125f 	movw	r2, #351	; 0x15f
 800684a:	4937      	ldr	r1, [pc, #220]	; (8006928 <plug_holes+0x124>)
 800684c:	4833      	ldr	r0, [pc, #204]	; (800691c <plug_holes+0x118>)
 800684e:	f00b feb7 	bl	80125c0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800685a:	d906      	bls.n	800686a <plug_holes+0x66>
 800685c:	4b2d      	ldr	r3, [pc, #180]	; (8006914 <plug_holes+0x110>)
 800685e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8006862:	4932      	ldr	r1, [pc, #200]	; (800692c <plug_holes+0x128>)
 8006864:	482d      	ldr	r0, [pc, #180]	; (800691c <plug_holes+0x118>)
 8006866:	f00b feab 	bl	80125c0 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800686a:	4b29      	ldr	r3, [pc, #164]	; (8006910 <plug_holes+0x10c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	8812      	ldrh	r2, [r2, #0]
 8006872:	4413      	add	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	429a      	cmp	r2, r3
 800687c:	d01f      	beq.n	80068be <plug_holes+0xba>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	791b      	ldrb	r3, [r3, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d11b      	bne.n	80068be <plug_holes+0xba>
 8006886:	4b26      	ldr	r3, [pc, #152]	; (8006920 <plug_holes+0x11c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	429a      	cmp	r2, r3
 800688e:	d016      	beq.n	80068be <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006890:	4b27      	ldr	r3, [pc, #156]	; (8006930 <plug_holes+0x12c>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	429a      	cmp	r2, r3
 8006898:	d102      	bne.n	80068a0 <plug_holes+0x9c>
      lfree = mem;
 800689a:	4a25      	ldr	r2, [pc, #148]	; (8006930 <plug_holes+0x12c>)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	881a      	ldrh	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80068a8:	4b19      	ldr	r3, [pc, #100]	; (8006910 <plug_holes+0x10c>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	1ad1      	subs	r1, r2, r3
 80068b0:	4b17      	ldr	r3, [pc, #92]	; (8006910 <plug_holes+0x10c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	8812      	ldrh	r2, [r2, #0]
 80068b8:	4413      	add	r3, r2
 80068ba:	b28a      	uxth	r2, r1
 80068bc:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80068be:	4b14      	ldr	r3, [pc, #80]	; (8006910 <plug_holes+0x10c>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	8852      	ldrh	r2, [r2, #2]
 80068c6:	4413      	add	r3, r2
 80068c8:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d01a      	beq.n	8006908 <plug_holes+0x104>
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	791b      	ldrb	r3, [r3, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d116      	bne.n	8006908 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80068da:	4b15      	ldr	r3, [pc, #84]	; (8006930 <plug_holes+0x12c>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d102      	bne.n	80068ea <plug_holes+0xe6>
      lfree = pmem;
 80068e4:	4a12      	ldr	r2, [pc, #72]	; (8006930 <plug_holes+0x12c>)
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	881a      	ldrh	r2, [r3, #0]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80068f2:	4b07      	ldr	r3, [pc, #28]	; (8006910 <plug_holes+0x10c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	1ad1      	subs	r1, r2, r3
 80068fa:	4b05      	ldr	r3, [pc, #20]	; (8006910 <plug_holes+0x10c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	8812      	ldrh	r2, [r2, #0]
 8006902:	4413      	add	r3, r2
 8006904:	b28a      	uxth	r2, r1
 8006906:	805a      	strh	r2, [r3, #2]
  }
}
 8006908:	bf00      	nop
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	20003f28 	.word	0x20003f28
 8006914:	080162d0 	.word	0x080162d0
 8006918:	08016300 	.word	0x08016300
 800691c:	08016318 	.word	0x08016318
 8006920:	20003f2c 	.word	0x20003f2c
 8006924:	08016340 	.word	0x08016340
 8006928:	0801635c 	.word	0x0801635c
 800692c:	08016378 	.word	0x08016378
 8006930:	20003f30 	.word	0x20003f30

08006934 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800693a:	4b1b      	ldr	r3, [pc, #108]	; (80069a8 <mem_init+0x74>)
 800693c:	3303      	adds	r3, #3
 800693e:	f023 0303 	bic.w	r3, r3, #3
 8006942:	461a      	mov	r2, r3
 8006944:	4b19      	ldr	r3, [pc, #100]	; (80069ac <mem_init+0x78>)
 8006946:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006948:	4b18      	ldr	r3, [pc, #96]	; (80069ac <mem_init+0x78>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006954:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8006962:	4b12      	ldr	r3, [pc, #72]	; (80069ac <mem_init+0x78>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800696a:	4a11      	ldr	r2, [pc, #68]	; (80069b0 <mem_init+0x7c>)
 800696c:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800696e:	4b10      	ldr	r3, [pc, #64]	; (80069b0 <mem_init+0x7c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2201      	movs	r2, #1
 8006974:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006976:	4b0e      	ldr	r3, [pc, #56]	; (80069b0 <mem_init+0x7c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800697e:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006980:	4b0b      	ldr	r3, [pc, #44]	; (80069b0 <mem_init+0x7c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006988:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800698a:	4b08      	ldr	r3, [pc, #32]	; (80069ac <mem_init+0x78>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a09      	ldr	r2, [pc, #36]	; (80069b4 <mem_init+0x80>)
 8006990:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8006992:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <mem_init+0x84>)
 8006994:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006998:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bc80      	pop	{r7}
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	200038d4 	.word	0x200038d4
 80069ac:	20003f28 	.word	0x20003f28
 80069b0:	20003f2c 	.word	0x20003f2c
 80069b4:	20003f30 	.word	0x20003f30
 80069b8:	20006e84 	.word	0x20006e84

080069bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d05d      	beq.n	8006a86 <mem_free+0xca>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d006      	beq.n	80069e2 <mem_free+0x26>
 80069d4:	4b2e      	ldr	r3, [pc, #184]	; (8006a90 <mem_free+0xd4>)
 80069d6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80069da:	492e      	ldr	r1, [pc, #184]	; (8006a94 <mem_free+0xd8>)
 80069dc:	482e      	ldr	r0, [pc, #184]	; (8006a98 <mem_free+0xdc>)
 80069de:	f00b fdef 	bl	80125c0 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80069e2:	4b2e      	ldr	r3, [pc, #184]	; (8006a9c <mem_free+0xe0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d304      	bcc.n	80069f6 <mem_free+0x3a>
 80069ec:	4b2c      	ldr	r3, [pc, #176]	; (8006aa0 <mem_free+0xe4>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d306      	bcc.n	8006a04 <mem_free+0x48>
 80069f6:	4b26      	ldr	r3, [pc, #152]	; (8006a90 <mem_free+0xd4>)
 80069f8:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80069fc:	4929      	ldr	r1, [pc, #164]	; (8006aa4 <mem_free+0xe8>)
 80069fe:	4826      	ldr	r0, [pc, #152]	; (8006a98 <mem_free+0xdc>)
 8006a00:	f00b fdde 	bl	80125c0 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006a04:	4b25      	ldr	r3, [pc, #148]	; (8006a9c <mem_free+0xe0>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d304      	bcc.n	8006a18 <mem_free+0x5c>
 8006a0e:	4b24      	ldr	r3, [pc, #144]	; (8006aa0 <mem_free+0xe4>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d308      	bcc.n	8006a2a <mem_free+0x6e>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8006a18:	4b23      	ldr	r3, [pc, #140]	; (8006aa8 <mem_free+0xec>)
 8006a1a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8006a1e:	3301      	adds	r3, #1
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	4b21      	ldr	r3, [pc, #132]	; (8006aa8 <mem_free+0xec>)
 8006a24:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return;
 8006a28:	e02e      	b.n	8006a88 <mem_free+0xcc>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	3b08      	subs	r3, #8
 8006a2e:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	791b      	ldrb	r3, [r3, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d106      	bne.n	8006a46 <mem_free+0x8a>
 8006a38:	4b15      	ldr	r3, [pc, #84]	; (8006a90 <mem_free+0xd4>)
 8006a3a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8006a3e:	491b      	ldr	r1, [pc, #108]	; (8006aac <mem_free+0xf0>)
 8006a40:	4815      	ldr	r0, [pc, #84]	; (8006a98 <mem_free+0xdc>)
 8006a42:	f00b fdbd 	bl	80125c0 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006a4c:	4b18      	ldr	r3, [pc, #96]	; (8006ab0 <mem_free+0xf4>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d202      	bcs.n	8006a5c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006a56:	4a16      	ldr	r2, [pc, #88]	; (8006ab0 <mem_free+0xf4>)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8006a5c:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <mem_free+0xec>)
 8006a5e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006a62:	4b0e      	ldr	r3, [pc, #56]	; (8006a9c <mem_free+0xe0>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68f9      	ldr	r1, [r7, #12]
 8006a68:	1acb      	subs	r3, r1, r3
 8006a6a:	b299      	uxth	r1, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	1acb      	subs	r3, r1, r3
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	4413      	add	r3, r2
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <mem_free+0xec>)
 8006a7a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7ff fec0 	bl	8006804 <plug_holes>
 8006a84:	e000      	b.n	8006a88 <mem_free+0xcc>
    return;
 8006a86:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	080162d0 	.word	0x080162d0
 8006a94:	080163a4 	.word	0x080163a4
 8006a98:	08016318 	.word	0x08016318
 8006a9c:	20003f28 	.word	0x20003f28
 8006aa0:	20003f2c 	.word	0x20003f2c
 8006aa4:	080163c8 	.word	0x080163c8
 8006aa8:	20006e84 	.word	0x20006e84
 8006aac:	080163e0 	.word	0x080163e0
 8006ab0:	20003f30 	.word	0x20003f30

08006ab4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8006ac0:	887b      	ldrh	r3, [r7, #2]
 8006ac2:	3303      	adds	r3, #3
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	f023 0303 	bic.w	r3, r3, #3
 8006aca:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8006acc:	887b      	ldrh	r3, [r7, #2]
 8006ace:	2b0b      	cmp	r3, #11
 8006ad0:	d801      	bhi.n	8006ad6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006ad2:	230c      	movs	r3, #12
 8006ad4:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8006ad6:	887b      	ldrh	r3, [r7, #2]
 8006ad8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006adc:	d901      	bls.n	8006ae2 <mem_trim+0x2e>
    return NULL;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	e0d1      	b.n	8006c86 <mem_trim+0x1d2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006ae2:	4b6b      	ldr	r3, [pc, #428]	; (8006c90 <mem_trim+0x1dc>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d304      	bcc.n	8006af6 <mem_trim+0x42>
 8006aec:	4b69      	ldr	r3, [pc, #420]	; (8006c94 <mem_trim+0x1e0>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d306      	bcc.n	8006b04 <mem_trim+0x50>
 8006af6:	4b68      	ldr	r3, [pc, #416]	; (8006c98 <mem_trim+0x1e4>)
 8006af8:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006afc:	4967      	ldr	r1, [pc, #412]	; (8006c9c <mem_trim+0x1e8>)
 8006afe:	4868      	ldr	r0, [pc, #416]	; (8006ca0 <mem_trim+0x1ec>)
 8006b00:	f00b fd5e 	bl	80125c0 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006b04:	4b62      	ldr	r3, [pc, #392]	; (8006c90 <mem_trim+0x1dc>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d304      	bcc.n	8006b18 <mem_trim+0x64>
 8006b0e:	4b61      	ldr	r3, [pc, #388]	; (8006c94 <mem_trim+0x1e0>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d309      	bcc.n	8006b2c <mem_trim+0x78>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8006b18:	4b62      	ldr	r3, [pc, #392]	; (8006ca4 <mem_trim+0x1f0>)
 8006b1a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8006b1e:	3301      	adds	r3, #1
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	4b60      	ldr	r3, [pc, #384]	; (8006ca4 <mem_trim+0x1f0>)
 8006b24:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	e0ac      	b.n	8006c86 <mem_trim+0x1d2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3b08      	subs	r3, #8
 8006b30:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8006b32:	4b57      	ldr	r3, [pc, #348]	; (8006c90 <mem_trim+0x1dc>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	881a      	ldrh	r2, [r3, #0]
 8006b40:	8a7b      	ldrh	r3, [r7, #18]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	3b08      	subs	r3, #8
 8006b48:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006b4a:	887a      	ldrh	r2, [r7, #2]
 8006b4c:	8a3b      	ldrh	r3, [r7, #16]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d906      	bls.n	8006b60 <mem_trim+0xac>
 8006b52:	4b51      	ldr	r3, [pc, #324]	; (8006c98 <mem_trim+0x1e4>)
 8006b54:	f240 2206 	movw	r2, #518	; 0x206
 8006b58:	4953      	ldr	r1, [pc, #332]	; (8006ca8 <mem_trim+0x1f4>)
 8006b5a:	4851      	ldr	r0, [pc, #324]	; (8006ca0 <mem_trim+0x1ec>)
 8006b5c:	f00b fd30 	bl	80125c0 <iprintf>
  if (newsize > size) {
 8006b60:	887a      	ldrh	r2, [r7, #2]
 8006b62:	8a3b      	ldrh	r3, [r7, #16]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d901      	bls.n	8006b6c <mem_trim+0xb8>
    /* not supported */
    return NULL;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	e08c      	b.n	8006c86 <mem_trim+0x1d2>
  }
  if (newsize == size) {
 8006b6c:	887a      	ldrh	r2, [r7, #2]
 8006b6e:	8a3b      	ldrh	r3, [r7, #16]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d101      	bne.n	8006b78 <mem_trim+0xc4>
    /* No change in size, simply return */
    return rmem;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	e086      	b.n	8006c86 <mem_trim+0x1d2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8006b78:	4b45      	ldr	r3, [pc, #276]	; (8006c90 <mem_trim+0x1dc>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	8812      	ldrh	r2, [r2, #0]
 8006b80:	4413      	add	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	791b      	ldrb	r3, [r3, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d13d      	bne.n	8006c08 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006b92:	8a7a      	ldrh	r2, [r7, #18]
 8006b94:	887b      	ldrh	r3, [r7, #2]
 8006b96:	4413      	add	r3, r2
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8006b9e:	4b43      	ldr	r3, [pc, #268]	; (8006cac <mem_trim+0x1f8>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d105      	bne.n	8006bb4 <mem_trim+0x100>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8006ba8:	4b39      	ldr	r3, [pc, #228]	; (8006c90 <mem_trim+0x1dc>)
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	897b      	ldrh	r3, [r7, #10]
 8006bae:	4413      	add	r3, r2
 8006bb0:	4a3e      	ldr	r2, [pc, #248]	; (8006cac <mem_trim+0x1f8>)
 8006bb2:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8006bb4:	4b36      	ldr	r3, [pc, #216]	; (8006c90 <mem_trim+0x1dc>)
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	897b      	ldrh	r3, [r7, #10]
 8006bba:	4413      	add	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	893a      	ldrh	r2, [r7, #8]
 8006bc8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8a7a      	ldrh	r2, [r7, #18]
 8006bce:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	897a      	ldrh	r2, [r7, #10]
 8006bd4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006bde:	d006      	beq.n	8006bee <mem_trim+0x13a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006be0:	4b2b      	ldr	r3, [pc, #172]	; (8006c90 <mem_trim+0x1dc>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	8812      	ldrh	r2, [r2, #0]
 8006be8:	4413      	add	r3, r2
 8006bea:	897a      	ldrh	r2, [r7, #10]
 8006bec:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8006bee:	4b2d      	ldr	r3, [pc, #180]	; (8006ca4 <mem_trim+0x1f0>)
 8006bf0:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006bf4:	8879      	ldrh	r1, [r7, #2]
 8006bf6:	8a3b      	ldrh	r3, [r7, #16]
 8006bf8:	1acb      	subs	r3, r1, r3
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	4413      	add	r3, r2
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	4b28      	ldr	r3, [pc, #160]	; (8006ca4 <mem_trim+0x1f0>)
 8006c02:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8006c06:	e03d      	b.n	8006c84 <mem_trim+0x1d0>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006c08:	887b      	ldrh	r3, [r7, #2]
 8006c0a:	f103 0214 	add.w	r2, r3, #20
 8006c0e:	8a3b      	ldrh	r3, [r7, #16]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d837      	bhi.n	8006c84 <mem_trim+0x1d0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006c14:	8a7a      	ldrh	r2, [r7, #18]
 8006c16:	887b      	ldrh	r3, [r7, #2]
 8006c18:	4413      	add	r3, r2
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	3308      	adds	r3, #8
 8006c1e:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8006c20:	4b1b      	ldr	r3, [pc, #108]	; (8006c90 <mem_trim+0x1dc>)
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	897b      	ldrh	r3, [r7, #10]
 8006c26:	4413      	add	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8006c2a:	4b20      	ldr	r3, [pc, #128]	; (8006cac <mem_trim+0x1f8>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d202      	bcs.n	8006c3a <mem_trim+0x186>
      lfree = mem2;
 8006c34:	4a1d      	ldr	r2, [pc, #116]	; (8006cac <mem_trim+0x1f8>)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	881a      	ldrh	r2, [r3, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8a7a      	ldrh	r2, [r7, #18]
 8006c4c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	897a      	ldrh	r2, [r7, #10]
 8006c52:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006c5c:	d006      	beq.n	8006c6c <mem_trim+0x1b8>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <mem_trim+0x1dc>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	8812      	ldrh	r2, [r2, #0]
 8006c66:	4413      	add	r3, r2
 8006c68:	897a      	ldrh	r2, [r7, #10]
 8006c6a:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8006c6c:	4b0d      	ldr	r3, [pc, #52]	; (8006ca4 <mem_trim+0x1f0>)
 8006c6e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006c72:	8879      	ldrh	r1, [r7, #2]
 8006c74:	8a3b      	ldrh	r3, [r7, #16]
 8006c76:	1acb      	subs	r3, r1, r3
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	4413      	add	r3, r2
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <mem_trim+0x1f0>)
 8006c80:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006c84:	687b      	ldr	r3, [r7, #4]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	20003f28 	.word	0x20003f28
 8006c94:	20003f2c 	.word	0x20003f2c
 8006c98:	080162d0 	.word	0x080162d0
 8006c9c:	080163f4 	.word	0x080163f4
 8006ca0:	08016318 	.word	0x08016318
 8006ca4:	20006e84 	.word	0x20006e84
 8006ca8:	0801640c 	.word	0x0801640c
 8006cac:	20003f30 	.word	0x20003f30

08006cb0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b088      	sub	sp, #32
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8006cba:	88fb      	ldrh	r3, [r7, #6]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <mem_malloc+0x14>
    return NULL;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	e0eb      	b.n	8006e9c <mem_malloc+0x1ec>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	3303      	adds	r3, #3
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	f023 0303 	bic.w	r3, r3, #3
 8006cce:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8006cd0:	88fb      	ldrh	r3, [r7, #6]
 8006cd2:	2b0b      	cmp	r3, #11
 8006cd4:	d801      	bhi.n	8006cda <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006cd6:	230c      	movs	r3, #12
 8006cd8:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8006cda:	88fb      	ldrh	r3, [r7, #6]
 8006cdc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006ce0:	d901      	bls.n	8006ce6 <mem_malloc+0x36>
    return NULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	e0da      	b.n	8006e9c <mem_malloc+0x1ec>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8006ce6:	4b6f      	ldr	r3, [pc, #444]	; (8006ea4 <mem_malloc+0x1f4>)
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	4b6f      	ldr	r3, [pc, #444]	; (8006ea8 <mem_malloc+0x1f8>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	83fb      	strh	r3, [r7, #30]
 8006cf2:	e0c3      	b.n	8006e7c <mem_malloc+0x1cc>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8006cf4:	4b6c      	ldr	r3, [pc, #432]	; (8006ea8 <mem_malloc+0x1f8>)
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	8bfb      	ldrh	r3, [r7, #30]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	791b      	ldrb	r3, [r3, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f040 80b4 	bne.w	8006e70 <mem_malloc+0x1c0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	8bfb      	ldrh	r3, [r7, #30]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	f1a3 0208 	sub.w	r2, r3, #8
 8006d16:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	f0c0 80a9 	bcc.w	8006e70 <mem_malloc+0x1c0>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	461a      	mov	r2, r3
 8006d24:	8bfb      	ldrh	r3, [r7, #30]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	f1a3 0208 	sub.w	r2, r3, #8
 8006d2c:	88fb      	ldrh	r3, [r7, #6]
 8006d2e:	3314      	adds	r3, #20
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d332      	bcc.n	8006d9a <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8006d34:	8bfa      	ldrh	r2, [r7, #30]
 8006d36:	88fb      	ldrh	r3, [r7, #6]
 8006d38:	4413      	add	r3, r2
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8006d40:	4b59      	ldr	r3, [pc, #356]	; (8006ea8 <mem_malloc+0x1f8>)
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	8a7b      	ldrh	r3, [r7, #18]
 8006d46:	4413      	add	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	881a      	ldrh	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	8bfa      	ldrh	r2, [r7, #30]
 8006d5c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	8a7a      	ldrh	r2, [r7, #18]
 8006d62:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	2201      	movs	r2, #1
 8006d68:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006d72:	d006      	beq.n	8006d82 <mem_malloc+0xd2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006d74:	4b4c      	ldr	r3, [pc, #304]	; (8006ea8 <mem_malloc+0x1f8>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	8812      	ldrh	r2, [r2, #0]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	8a7a      	ldrh	r2, [r7, #18]
 8006d80:	805a      	strh	r2, [r3, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8006d82:	4b4a      	ldr	r3, [pc, #296]	; (8006eac <mem_malloc+0x1fc>)
 8006d84:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006d88:	88fb      	ldrh	r3, [r7, #6]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	3308      	adds	r3, #8
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	4b46      	ldr	r3, [pc, #280]	; (8006eac <mem_malloc+0x1fc>)
 8006d94:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8006d98:	e013      	b.n	8006dc2 <mem_malloc+0x112>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 8006da0:	4b42      	ldr	r3, [pc, #264]	; (8006eac <mem_malloc+0x1fc>)
 8006da2:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	8819      	ldrh	r1, [r3, #0]
 8006daa:	4b3f      	ldr	r3, [pc, #252]	; (8006ea8 <mem_malloc+0x1f8>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6978      	ldr	r0, [r7, #20]
 8006db0:	1ac3      	subs	r3, r0, r3
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	1acb      	subs	r3, r1, r3
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	4413      	add	r3, r2
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	4b3b      	ldr	r3, [pc, #236]	; (8006eac <mem_malloc+0x1fc>)
 8006dbe:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006dc2:	4b38      	ldr	r3, [pc, #224]	; (8006ea4 <mem_malloc+0x1f4>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d127      	bne.n	8006e1c <mem_malloc+0x16c>
          struct mem *cur = lfree;
 8006dcc:	4b35      	ldr	r3, [pc, #212]	; (8006ea4 <mem_malloc+0x1f4>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006dd2:	e005      	b.n	8006de0 <mem_malloc+0x130>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8006dd4:	4b34      	ldr	r3, [pc, #208]	; (8006ea8 <mem_malloc+0x1f8>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	8812      	ldrh	r2, [r2, #0]
 8006ddc:	4413      	add	r3, r2
 8006dde:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	791b      	ldrb	r3, [r3, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d004      	beq.n	8006df2 <mem_malloc+0x142>
 8006de8:	4b31      	ldr	r3, [pc, #196]	; (8006eb0 <mem_malloc+0x200>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d1f0      	bne.n	8006dd4 <mem_malloc+0x124>
          }
          lfree = cur;
 8006df2:	4a2c      	ldr	r2, [pc, #176]	; (8006ea4 <mem_malloc+0x1f4>)
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006df8:	4b2a      	ldr	r3, [pc, #168]	; (8006ea4 <mem_malloc+0x1f4>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	4b2c      	ldr	r3, [pc, #176]	; (8006eb0 <mem_malloc+0x200>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d00b      	beq.n	8006e1c <mem_malloc+0x16c>
 8006e04:	4b27      	ldr	r3, [pc, #156]	; (8006ea4 <mem_malloc+0x1f4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	791b      	ldrb	r3, [r3, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d006      	beq.n	8006e1c <mem_malloc+0x16c>
 8006e0e:	4b29      	ldr	r3, [pc, #164]	; (8006eb4 <mem_malloc+0x204>)
 8006e10:	f240 22cf 	movw	r2, #719	; 0x2cf
 8006e14:	4928      	ldr	r1, [pc, #160]	; (8006eb8 <mem_malloc+0x208>)
 8006e16:	4829      	ldr	r0, [pc, #164]	; (8006ebc <mem_malloc+0x20c>)
 8006e18:	f00b fbd2 	bl	80125c0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006e1c:	88fa      	ldrh	r2, [r7, #6]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	4413      	add	r3, r2
 8006e22:	3308      	adds	r3, #8
 8006e24:	4a22      	ldr	r2, [pc, #136]	; (8006eb0 <mem_malloc+0x200>)
 8006e26:	6812      	ldr	r2, [r2, #0]
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d906      	bls.n	8006e3a <mem_malloc+0x18a>
 8006e2c:	4b21      	ldr	r3, [pc, #132]	; (8006eb4 <mem_malloc+0x204>)
 8006e2e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8006e32:	4923      	ldr	r1, [pc, #140]	; (8006ec0 <mem_malloc+0x210>)
 8006e34:	4821      	ldr	r0, [pc, #132]	; (8006ebc <mem_malloc+0x20c>)
 8006e36:	f00b fbc3 	bl	80125c0 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f003 0303 	and.w	r3, r3, #3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d006      	beq.n	8006e52 <mem_malloc+0x1a2>
 8006e44:	4b1b      	ldr	r3, [pc, #108]	; (8006eb4 <mem_malloc+0x204>)
 8006e46:	f240 22d5 	movw	r2, #725	; 0x2d5
 8006e4a:	491e      	ldr	r1, [pc, #120]	; (8006ec4 <mem_malloc+0x214>)
 8006e4c:	481b      	ldr	r0, [pc, #108]	; (8006ebc <mem_malloc+0x20c>)
 8006e4e:	f00b fbb7 	bl	80125c0 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f003 0303 	and.w	r3, r3, #3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d006      	beq.n	8006e6a <mem_malloc+0x1ba>
 8006e5c:	4b15      	ldr	r3, [pc, #84]	; (8006eb4 <mem_malloc+0x204>)
 8006e5e:	f240 22d7 	movw	r2, #727	; 0x2d7
 8006e62:	4919      	ldr	r1, [pc, #100]	; (8006ec8 <mem_malloc+0x218>)
 8006e64:	4815      	ldr	r0, [pc, #84]	; (8006ebc <mem_malloc+0x20c>)
 8006e66:	f00b fbab 	bl	80125c0 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	e015      	b.n	8006e9c <mem_malloc+0x1ec>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8006e70:	4b0d      	ldr	r3, [pc, #52]	; (8006ea8 <mem_malloc+0x1f8>)
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	8bfb      	ldrh	r3, [r7, #30]
 8006e76:	4413      	add	r3, r2
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8006e7c:	8bfa      	ldrh	r2, [r7, #30]
 8006e7e:	88fb      	ldrh	r3, [r7, #6]
 8006e80:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006e84:	429a      	cmp	r2, r3
 8006e86:	f4ff af35 	bcc.w	8006cf4 <mem_malloc+0x44>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
 8006e8a:	4b08      	ldr	r3, [pc, #32]	; (8006eac <mem_malloc+0x1fc>)
 8006e8c:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8006e90:	3301      	adds	r3, #1
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <mem_malloc+0x1fc>)
 8006e96:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3720      	adds	r7, #32
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	20003f30 	.word	0x20003f30
 8006ea8:	20003f28 	.word	0x20003f28
 8006eac:	20006e84 	.word	0x20006e84
 8006eb0:	20003f2c 	.word	0x20003f2c
 8006eb4:	080162d0 	.word	0x080162d0
 8006eb8:	0801642c 	.word	0x0801642c
 8006ebc:	08016318 	.word	0x08016318
 8006ec0:	08016448 	.word	0x08016448
 8006ec4:	08016478 	.word	0x08016478
 8006ec8:	080164a8 	.word	0x080164a8

08006ecc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	3303      	adds	r3, #3
 8006ee2:	f023 0303 	bic.w	r3, r3, #3
 8006ee6:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	e011      	b.n	8006f12 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	889b      	ldrh	r3, [r3, #4]
 8006f04:	461a      	mov	r2, r3
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	4413      	add	r3, r2
 8006f0a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	88db      	ldrh	r3, [r3, #6]
 8006f16:	461a      	mov	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	dbe7      	blt.n	8006eee <memp_init_pool+0x22>
      + MEMP_SANITY_REGION_AFTER_ALIGNED
#endif
    );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	88d2      	ldrh	r2, [r2, #6]
 8006f26:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006f28:	bf00      	nop
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bc80      	pop	{r7}
 8006f30:	4770      	bx	lr
	...

08006f34 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	80fb      	strh	r3, [r7, #6]
 8006f3e:	e014      	b.n	8006f6a <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 8006f40:	88fb      	ldrh	r3, [r7, #6]
 8006f42:	4a0e      	ldr	r2, [pc, #56]	; (8006f7c <memp_init+0x48>)
 8006f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff ffbf 	bl	8006ecc <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8006f4e:	88fb      	ldrh	r3, [r7, #6]
 8006f50:	4a0a      	ldr	r2, [pc, #40]	; (8006f7c <memp_init+0x48>)
 8006f52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006f56:	88fb      	ldrh	r3, [r7, #6]
 8006f58:	6812      	ldr	r2, [r2, #0]
 8006f5a:	4909      	ldr	r1, [pc, #36]	; (8006f80 <memp_init+0x4c>)
 8006f5c:	332c      	adds	r3, #44	; 0x2c
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006f64:	88fb      	ldrh	r3, [r7, #6]
 8006f66:	3301      	adds	r3, #1
 8006f68:	80fb      	strh	r3, [r7, #6]
 8006f6a:	88fb      	ldrh	r3, [r7, #6]
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d9e7      	bls.n	8006f40 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006f70:	bf00      	nop
 8006f72:	bf00      	nop
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	08017fdc 	.word	0x08017fdc
 8006f80:	20006e84 	.word	0x20006e84

08006f84 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d026      	beq.n	8006fe8 <do_memp_malloc_pool+0x64>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	6812      	ldr	r2, [r2, #0]
 8006fa2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d006      	beq.n	8006fbc <do_memp_malloc_pool+0x38>
 8006fae:	4b14      	ldr	r3, [pc, #80]	; (8007000 <do_memp_malloc_pool+0x7c>)
 8006fb0:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8006fb4:	4913      	ldr	r1, [pc, #76]	; (8007004 <do_memp_malloc_pool+0x80>)
 8006fb6:	4814      	ldr	r0, [pc, #80]	; (8007008 <do_memp_malloc_pool+0x84>)
 8006fb8:	f00b fb02 	bl	80125c0 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	889a      	ldrh	r2, [r3, #4]
 8006fc2:	3201      	adds	r2, #1
 8006fc4:	b292      	uxth	r2, r2
 8006fc6:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	889a      	ldrh	r2, [r3, #4]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	88db      	ldrh	r3, [r3, #6]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d905      	bls.n	8006fe4 <do_memp_malloc_pool+0x60>
      desc->stats->max = desc->stats->used;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	8892      	ldrh	r2, [r2, #4]
 8006fe2:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	e006      	b.n	8006ff6 <do_memp_malloc_pool+0x72>
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
#if MEMP_STATS
    desc->stats->err++;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	881a      	ldrh	r2, [r3, #0]
 8006fee:	3201      	adds	r2, #1
 8006ff0:	b292      	uxth	r2, r2
 8006ff2:	801a      	strh	r2, [r3, #0]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	080164cc 	.word	0x080164cc
 8007004:	080164fc 	.word	0x080164fc
 8007008:	08016520 	.word	0x08016520

0800700c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	2b08      	cmp	r3, #8
 800701a:	d908      	bls.n	800702e <memp_malloc+0x22>
 800701c:	4b0a      	ldr	r3, [pc, #40]	; (8007048 <memp_malloc+0x3c>)
 800701e:	f240 1287 	movw	r2, #391	; 0x187
 8007022:	490a      	ldr	r1, [pc, #40]	; (800704c <memp_malloc+0x40>)
 8007024:	480a      	ldr	r0, [pc, #40]	; (8007050 <memp_malloc+0x44>)
 8007026:	f00b facb 	bl	80125c0 <iprintf>
 800702a:	2300      	movs	r3, #0
 800702c:	e008      	b.n	8007040 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	4a08      	ldr	r2, [pc, #32]	; (8007054 <memp_malloc+0x48>)
 8007032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007036:	4618      	mov	r0, r3
 8007038:	f7ff ffa4 	bl	8006f84 <do_memp_malloc_pool>
 800703c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800703e:	68fb      	ldr	r3, [r7, #12]
}
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	080164cc 	.word	0x080164cc
 800704c:	0801655c 	.word	0x0801655c
 8007050:	08016520 	.word	0x08016520
 8007054:	08017fdc 	.word	0x08017fdc

08007058 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	f003 0303 	and.w	r3, r3, #3
 8007068:	2b00      	cmp	r3, #0
 800706a:	d006      	beq.n	800707a <do_memp_free_pool+0x22>
 800706c:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <do_memp_free_pool+0x4c>)
 800706e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007072:	490d      	ldr	r1, [pc, #52]	; (80070a8 <do_memp_free_pool+0x50>)
 8007074:	480d      	ldr	r0, [pc, #52]	; (80070ac <do_memp_free_pool+0x54>)
 8007076:	f00b faa3 	bl	80125c0 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	60fb      	str	r3, [r7, #12]
  memp_overflow_check_element_overflow(memp, desc);
  memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	889a      	ldrh	r2, [r3, #4]
 8007084:	3a01      	subs	r2, #1
 8007086:	b292      	uxth	r2, r2
 8007088:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800709c:	bf00      	nop
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	080164cc 	.word	0x080164cc
 80070a8:	0801657c 	.word	0x0801657c
 80070ac:	08016520 	.word	0x08016520

080070b0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	4603      	mov	r3, r0
 80070b8:	6039      	str	r1, [r7, #0]
 80070ba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80070bc:	79fb      	ldrb	r3, [r7, #7]
 80070be:	2b08      	cmp	r3, #8
 80070c0:	d907      	bls.n	80070d2 <memp_free+0x22>
 80070c2:	4b0c      	ldr	r3, [pc, #48]	; (80070f4 <memp_free+0x44>)
 80070c4:	f240 12db 	movw	r2, #475	; 0x1db
 80070c8:	490b      	ldr	r1, [pc, #44]	; (80070f8 <memp_free+0x48>)
 80070ca:	480c      	ldr	r0, [pc, #48]	; (80070fc <memp_free+0x4c>)
 80070cc:	f00b fa78 	bl	80125c0 <iprintf>
 80070d0:	e00c      	b.n	80070ec <memp_free+0x3c>

  if (mem == NULL) {
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d008      	beq.n	80070ea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80070d8:	79fb      	ldrb	r3, [r7, #7]
 80070da:	4a09      	ldr	r2, [pc, #36]	; (8007100 <memp_free+0x50>)
 80070dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7ff ffb8 	bl	8007058 <do_memp_free_pool>
 80070e8:	e000      	b.n	80070ec <memp_free+0x3c>
    return;
 80070ea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	080164cc 	.word	0x080164cc
 80070f8:	0801659c 	.word	0x0801659c
 80070fc:	08016520 	.word	0x08016520
 8007100:	08017fdc 	.word	0x08017fdc

08007104 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007108:	bf00      	nop
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr

08007110 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d105      	bne.n	8007130 <netif_add+0x20>
 8007124:	4b21      	ldr	r3, [pc, #132]	; (80071ac <netif_add+0x9c>)
 8007126:	22fb      	movs	r2, #251	; 0xfb
 8007128:	4921      	ldr	r1, [pc, #132]	; (80071b0 <netif_add+0xa0>)
 800712a:	4822      	ldr	r0, [pc, #136]	; (80071b4 <netif_add+0xa4>)
 800712c:	f00b fa48 	bl	80125c0 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2203      	movs	r2, #3
 800714e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 800715e:	4b16      	ldr	r3, [pc, #88]	; (80071b8 <netif_add+0xa8>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	b2d1      	uxtb	r1, r2
 8007166:	4a14      	ldr	r2, [pc, #80]	; (80071b8 <netif_add+0xa8>)
 8007168:	7011      	strb	r1, [r2, #0]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a3a      	ldr	r2, [r7, #32]
 8007174:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	68b9      	ldr	r1, [r7, #8]
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 f81f 	bl	80071c0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	4798      	blx	r3
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <netif_add+0x82>
    return NULL;
 800718e:	2300      	movs	r3, #0
 8007190:	e007      	b.n	80071a2 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007192:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <netif_add+0xac>)
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800719a:	4a08      	ldr	r2, [pc, #32]	; (80071bc <netif_add+0xac>)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80071a0:	68fb      	ldr	r3, [r7, #12]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	080165b8 	.word	0x080165b8
 80071b0:	080165ec 	.word	0x080165ec
 80071b4:	08016604 	.word	0x08016604
 80071b8:	20006e80 	.word	0x20006e80
 80071bc:	20006e78 	.word	0x20006e78

080071c0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d003      	beq.n	80071dc <netif_set_addr+0x1c>
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10c      	bne.n	80071f6 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 80071dc:	68b9      	ldr	r1, [r7, #8]
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 f81a 	bl	8007218 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 80071e4:	6879      	ldr	r1, [r7, #4]
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 f861 	bl	80072ae <netif_set_netmask>
    netif_set_gw(netif, gw);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 f84a 	bl	8007288 <netif_set_gw>
 80071f4:	e00c      	b.n	8007210 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 f858 	bl	80072ae <netif_set_netmask>
    netif_set_gw(netif, gw);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 f841 	bl	8007288 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8007206:	68b9      	ldr	r1, [r7, #8]
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 f805 	bl	8007218 <netif_set_ipaddr>
  }
}
 800720e:	bf00      	nop
 8007210:	bf00      	nop
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <netif_set_ipaddr+0x18>
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	e002      	b.n	8007236 <netif_set_ipaddr+0x1e>
 8007230:	4b14      	ldr	r3, [pc, #80]	; (8007284 <netif_set_ipaddr+0x6c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3304      	adds	r3, #4
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	429a      	cmp	r2, r3
 8007240:	d01c      	beq.n	800727c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	3304      	adds	r3, #4
 8007246:	f107 020c 	add.w	r2, r7, #12
 800724a:	4611      	mov	r1, r2
 800724c:	4618      	mov	r0, r3
 800724e:	f002 f93b 	bl	80094c8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3304      	adds	r3, #4
 8007256:	f107 020c 	add.w	r2, r7, #12
 800725a:	4611      	mov	r1, r2
 800725c:	4618      	mov	r0, r3
 800725e:	f006 f8ed 	bl	800d43c <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <netif_set_ipaddr+0x56>
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	e000      	b.n	8007270 <netif_set_ipaddr+0x58>
 800726e:	2300      	movs	r3, #0
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007274:	2101      	movs	r1, #1
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f85d 	bl	8007336 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800727c:	bf00      	nop
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	08018040 	.word	0x08018040

08007288 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <netif_set_gw+0x16>
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	e000      	b.n	80072a0 <netif_set_gw+0x18>
 800729e:	2300      	movs	r3, #0
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bc80      	pop	{r7}
 80072ac:	4770      	bx	lr

080072ae <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b083      	sub	sp, #12
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <netif_set_netmask+0x16>
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	e000      	b.n	80072c6 <netif_set_netmask+0x18>
 80072c4:	2300      	movs	r3, #0
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80072ca:	bf00      	nop
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bc80      	pop	{r7}
 80072d2:	4770      	bx	lr

080072d4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80072dc:	4a03      	ldr	r2, [pc, #12]	; (80072ec <netif_set_default+0x18>)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80072e2:	bf00      	nop
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bc80      	pop	{r7}
 80072ea:	4770      	bx	lr
 80072ec:	20006e7c 	.word	0x20006e7c

080072f0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b00      	cmp	r3, #0
 8007304:	d113      	bne.n	800732e <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800730c:	f043 0301 	orr.w	r3, r3, #1
 8007310:	b2da      	uxtb	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800731e:	f003 0304 	and.w	r3, r3, #4
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8007326:	2103      	movs	r1, #3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f804 	bl	8007336 <netif_issue_reports>
    }
  }
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	460b      	mov	r3, r1
 8007340:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007342:	78fb      	ldrb	r3, [r7, #3]
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b00      	cmp	r3, #0
 800734a:	d011      	beq.n	8007370 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3304      	adds	r3, #4
 8007350:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00c      	beq.n	8007370 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b00      	cmp	r3, #0
 8007362:	d005      	beq.n	8007370 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3304      	adds	r3, #4
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f006 ffda 	bl	800e324 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8007370:	bf00      	nop
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d012      	beq.n	80073b4 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007394:	f023 0301 	bic.w	r3, r3, #1
 8007398:	b2da      	uxtb	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80073a6:	f003 0308 	and.w	r3, r3, #8
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f006 fb3c 	bl	800da2c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80073b4:	bf00      	nop
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  if (netif) {
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	61da      	str	r2, [r3, #28]
  }
}
 80073d2:	bf00      	nop
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bc80      	pop	{r7}
 80073da:	4770      	bx	lr

080073dc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80073e2:	4b0e      	ldr	r3, [pc, #56]	; (800741c <pbuf_free_ooseq+0x40>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80073e8:	4b0d      	ldr	r3, [pc, #52]	; (8007420 <pbuf_free_ooseq+0x44>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	607b      	str	r3, [r7, #4]
 80073ee:	e00f      	b.n	8007410 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d008      	beq.n	800740a <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073fc:	4618      	mov	r0, r3
 80073fe:	f001 fd76 	bl	8008eee <tcp_segs_free>
      pcb->ooseq = NULL;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8007408:	e005      	b.n	8007416 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	607b      	str	r3, [r7, #4]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1ec      	bne.n	80073f0 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	20006e81 	.word	0x20006e81
 8007420:	20006f68 	.word	0x20006f68

08007424 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007428:	4b03      	ldr	r3, [pc, #12]	; (8007438 <pbuf_pool_is_empty+0x14>)
 800742a:	2201      	movs	r2, #1
 800742c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800742e:	bf00      	nop
 8007430:	46bd      	mov	sp, r7
 8007432:	bc80      	pop	{r7}
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	20006e81 	.word	0x20006e81

0800743c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af00      	add	r7, sp, #0
 8007442:	4603      	mov	r3, r0
 8007444:	71fb      	strb	r3, [r7, #7]
 8007446:	460b      	mov	r3, r1
 8007448:	80bb      	strh	r3, [r7, #4]
 800744a:	4613      	mov	r3, r2
 800744c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	2b04      	cmp	r3, #4
 8007452:	d81c      	bhi.n	800748e <pbuf_alloc+0x52>
 8007454:	a201      	add	r2, pc, #4	; (adr r2, 800745c <pbuf_alloc+0x20>)
 8007456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745a:	bf00      	nop
 800745c:	08007471 	.word	0x08007471
 8007460:	08007477 	.word	0x08007477
 8007464:	0800747d 	.word	0x0800747d
 8007468:	08007483 	.word	0x08007483
 800746c:	08007489 	.word	0x08007489
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8007470:	2336      	movs	r3, #54	; 0x36
 8007472:	82fb      	strh	r3, [r7, #22]
    break;
 8007474:	e014      	b.n	80074a0 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8007476:	2322      	movs	r3, #34	; 0x22
 8007478:	82fb      	strh	r3, [r7, #22]
    break;
 800747a:	e011      	b.n	80074a0 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800747c:	230e      	movs	r3, #14
 800747e:	82fb      	strh	r3, [r7, #22]
    break;
 8007480:	e00e      	b.n	80074a0 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8007482:	2300      	movs	r3, #0
 8007484:	82fb      	strh	r3, [r7, #22]
    break;
 8007486:	e00b      	b.n	80074a0 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8007488:	2300      	movs	r3, #0
 800748a:	82fb      	strh	r3, [r7, #22]
    break;
 800748c:	e008      	b.n	80074a0 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800748e:	4ba1      	ldr	r3, [pc, #644]	; (8007714 <pbuf_alloc+0x2d8>)
 8007490:	f44f 728b 	mov.w	r2, #278	; 0x116
 8007494:	49a0      	ldr	r1, [pc, #640]	; (8007718 <pbuf_alloc+0x2dc>)
 8007496:	48a1      	ldr	r0, [pc, #644]	; (800771c <pbuf_alloc+0x2e0>)
 8007498:	f00b f892 	bl	80125c0 <iprintf>
    return NULL;
 800749c:	2300      	movs	r3, #0
 800749e:	e15c      	b.n	800775a <pbuf_alloc+0x31e>
  }

  switch (type) {
 80074a0:	79bb      	ldrb	r3, [r7, #6]
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d00d      	beq.n	80074c2 <pbuf_alloc+0x86>
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	f300 8146 	bgt.w	8007738 <pbuf_alloc+0x2fc>
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 80d0 	beq.w	8007652 <pbuf_alloc+0x216>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f2c0 8140 	blt.w	8007738 <pbuf_alloc+0x2fc>
 80074b8:	3b01      	subs	r3, #1
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	f200 813c 	bhi.w	8007738 <pbuf_alloc+0x2fc>
 80074c0:	e10d      	b.n	80076de <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80074c2:	2008      	movs	r0, #8
 80074c4:	f7ff fda2 	bl	800700c <memp_malloc>
 80074c8:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d103      	bne.n	80074d8 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 80074d0:	f7ff ffa8 	bl	8007424 <pbuf_pool_is_empty>
      return NULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	e140      	b.n	800775a <pbuf_alloc+0x31e>
    }
    p->type = type;
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	79ba      	ldrb	r2, [r7, #6]
 80074dc:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80074e4:	8afb      	ldrh	r3, [r7, #22]
 80074e6:	3310      	adds	r3, #16
 80074e8:	69fa      	ldr	r2, [r7, #28]
 80074ea:	4413      	add	r3, r2
 80074ec:	3303      	adds	r3, #3
 80074ee:	f023 0303 	bic.w	r3, r3, #3
 80074f2:	461a      	mov	r2, r3
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f003 0303 	and.w	r3, r3, #3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d006      	beq.n	8007512 <pbuf_alloc+0xd6>
 8007504:	4b83      	ldr	r3, [pc, #524]	; (8007714 <pbuf_alloc+0x2d8>)
 8007506:	f44f 7294 	mov.w	r2, #296	; 0x128
 800750a:	4985      	ldr	r1, [pc, #532]	; (8007720 <pbuf_alloc+0x2e4>)
 800750c:	4883      	ldr	r0, [pc, #524]	; (800771c <pbuf_alloc+0x2e0>)
 800750e:	f00b f857 	bl	80125c0 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	88ba      	ldrh	r2, [r7, #4]
 8007516:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8007518:	8afb      	ldrh	r3, [r7, #22]
 800751a:	3303      	adds	r3, #3
 800751c:	f023 0303 	bic.w	r3, r3, #3
 8007520:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8007524:	88bb      	ldrh	r3, [r7, #4]
 8007526:	4293      	cmp	r3, r2
 8007528:	bf28      	it	cs
 800752a:	4613      	movcs	r3, r2
 800752c:	b29a      	uxth	r2, r3
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	69fa      	ldr	r2, [r7, #28]
 8007538:	8952      	ldrh	r2, [r2, #10]
 800753a:	441a      	add	r2, r3
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007542:	429a      	cmp	r2, r3
 8007544:	d906      	bls.n	8007554 <pbuf_alloc+0x118>
 8007546:	4b73      	ldr	r3, [pc, #460]	; (8007714 <pbuf_alloc+0x2d8>)
 8007548:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800754c:	4975      	ldr	r1, [pc, #468]	; (8007724 <pbuf_alloc+0x2e8>)
 800754e:	4873      	ldr	r0, [pc, #460]	; (800771c <pbuf_alloc+0x2e0>)
 8007550:	f00b f836 	bl	80125c0 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007554:	8afb      	ldrh	r3, [r7, #22]
 8007556:	3303      	adds	r3, #3
 8007558:	f023 0303 	bic.w	r3, r3, #3
 800755c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8007560:	d106      	bne.n	8007570 <pbuf_alloc+0x134>
 8007562:	4b6c      	ldr	r3, [pc, #432]	; (8007714 <pbuf_alloc+0x2d8>)
 8007564:	f240 1231 	movw	r2, #305	; 0x131
 8007568:	496f      	ldr	r1, [pc, #444]	; (8007728 <pbuf_alloc+0x2ec>)
 800756a:	486c      	ldr	r0, [pc, #432]	; (800771c <pbuf_alloc+0x2e0>)
 800756c:	f00b f828 	bl	80125c0 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	2201      	movs	r2, #1
 8007574:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800757a:	88bb      	ldrh	r3, [r7, #4]
 800757c:	69fa      	ldr	r2, [r7, #28]
 800757e:	8952      	ldrh	r2, [r2, #10]
 8007580:	1a9b      	subs	r3, r3, r2
 8007582:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8007584:	e061      	b.n	800764a <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007586:	2008      	movs	r0, #8
 8007588:	f7ff fd40 	bl	800700c <memp_malloc>
 800758c:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d106      	bne.n	80075a2 <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 8007594:	f7ff ff46 	bl	8007424 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8007598:	69f8      	ldr	r0, [r7, #28]
 800759a:	f000 fac7 	bl	8007b2c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800759e:	2300      	movs	r3, #0
 80075a0:	e0db      	b.n	800775a <pbuf_alloc+0x31e>
      }
      q->type = type;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	79ba      	ldrb	r2, [r7, #6]
 80075a6:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80075c0:	4293      	cmp	r3, r2
 80075c2:	dd06      	ble.n	80075d2 <pbuf_alloc+0x196>
 80075c4:	4b53      	ldr	r3, [pc, #332]	; (8007714 <pbuf_alloc+0x2d8>)
 80075c6:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80075ca:	4958      	ldr	r1, [pc, #352]	; (800772c <pbuf_alloc+0x2f0>)
 80075cc:	4853      	ldr	r0, [pc, #332]	; (800771c <pbuf_alloc+0x2e0>)
 80075ce:	f00a fff7 	bl	80125c0 <iprintf>
      q->tot_len = (u16_t)rem_len;
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	b29b      	uxth	r3, r3
 80075de:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80075e2:	bf28      	it	cs
 80075e4:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f103 0210 	add.w	r2, r3, #16
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f003 0303 	and.w	r3, r3, #3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d006      	beq.n	8007612 <pbuf_alloc+0x1d6>
 8007604:	4b43      	ldr	r3, [pc, #268]	; (8007714 <pbuf_alloc+0x2d8>)
 8007606:	f240 1251 	movw	r2, #337	; 0x151
 800760a:	4949      	ldr	r1, [pc, #292]	; (8007730 <pbuf_alloc+0x2f4>)
 800760c:	4843      	ldr	r0, [pc, #268]	; (800771c <pbuf_alloc+0x2e0>)
 800760e:	f00a ffd7 	bl	80125c0 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	69fa      	ldr	r2, [r7, #28]
 8007618:	8952      	ldrh	r2, [r2, #10]
 800761a:	441a      	add	r2, r3
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007622:	429a      	cmp	r2, r3
 8007624:	d906      	bls.n	8007634 <pbuf_alloc+0x1f8>
 8007626:	4b3b      	ldr	r3, [pc, #236]	; (8007714 <pbuf_alloc+0x2d8>)
 8007628:	f240 1253 	movw	r2, #339	; 0x153
 800762c:	493d      	ldr	r1, [pc, #244]	; (8007724 <pbuf_alloc+0x2e8>)
 800762e:	483b      	ldr	r0, [pc, #236]	; (800771c <pbuf_alloc+0x2e0>)
 8007630:	f00a ffc6 	bl	80125c0 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2201      	movs	r2, #1
 8007638:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	895b      	ldrh	r3, [r3, #10]
 800763e:	461a      	mov	r2, r3
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	1a9b      	subs	r3, r3, r2
 8007644:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	dc9a      	bgt.n	8007586 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8007650:	e07c      	b.n	800774c <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8007652:	8afb      	ldrh	r3, [r7, #22]
 8007654:	3313      	adds	r3, #19
 8007656:	b29b      	uxth	r3, r3
 8007658:	f023 0303 	bic.w	r3, r3, #3
 800765c:	b29a      	uxth	r2, r3
 800765e:	88bb      	ldrh	r3, [r7, #4]
 8007660:	3303      	adds	r3, #3
 8007662:	b29b      	uxth	r3, r3
 8007664:	f023 0303 	bic.w	r3, r3, #3
 8007668:	b29b      	uxth	r3, r3
 800766a:	4413      	add	r3, r2
 800766c:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800766e:	897a      	ldrh	r2, [r7, #10]
 8007670:	88bb      	ldrh	r3, [r7, #4]
 8007672:	3303      	adds	r3, #3
 8007674:	f023 0303 	bic.w	r3, r3, #3
 8007678:	429a      	cmp	r2, r3
 800767a:	d201      	bcs.n	8007680 <pbuf_alloc+0x244>
        return NULL;
 800767c:	2300      	movs	r3, #0
 800767e:	e06c      	b.n	800775a <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8007680:	897b      	ldrh	r3, [r7, #10]
 8007682:	4618      	mov	r0, r3
 8007684:	f7ff fb14 	bl	8006cb0 <mem_malloc>
 8007688:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <pbuf_alloc+0x258>
      return NULL;
 8007690:	2300      	movs	r3, #0
 8007692:	e062      	b.n	800775a <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8007694:	8afb      	ldrh	r3, [r7, #22]
 8007696:	3310      	adds	r3, #16
 8007698:	69fa      	ldr	r2, [r7, #28]
 800769a:	4413      	add	r3, r2
 800769c:	3303      	adds	r3, #3
 800769e:	f023 0303 	bic.w	r3, r3, #3
 80076a2:	461a      	mov	r2, r3
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	88ba      	ldrh	r2, [r7, #4]
 80076ac:	811a      	strh	r2, [r3, #8]
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	891a      	ldrh	r2, [r3, #8]
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	2200      	movs	r2, #0
 80076ba:	601a      	str	r2, [r3, #0]
    p->type = type;
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	79ba      	ldrb	r2, [r7, #6]
 80076c0:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f003 0303 	and.w	r3, r3, #3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d03d      	beq.n	800774a <pbuf_alloc+0x30e>
 80076ce:	4b11      	ldr	r3, [pc, #68]	; (8007714 <pbuf_alloc+0x2d8>)
 80076d0:	f44f 72bb 	mov.w	r2, #374	; 0x176
 80076d4:	4917      	ldr	r1, [pc, #92]	; (8007734 <pbuf_alloc+0x2f8>)
 80076d6:	4811      	ldr	r0, [pc, #68]	; (800771c <pbuf_alloc+0x2e0>)
 80076d8:	f00a ff72 	bl	80125c0 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80076dc:	e035      	b.n	800774a <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80076de:	2007      	movs	r0, #7
 80076e0:	f7ff fc94 	bl	800700c <memp_malloc>
 80076e4:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80076ec:	2300      	movs	r3, #0
 80076ee:	e034      	b.n	800775a <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	2200      	movs	r2, #0
 80076f4:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	88ba      	ldrh	r2, [r7, #4]
 80076fa:	811a      	strh	r2, [r3, #8]
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	891a      	ldrh	r2, [r3, #8]
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	2200      	movs	r2, #0
 8007708:	601a      	str	r2, [r3, #0]
    p->type = type;
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	79ba      	ldrb	r2, [r7, #6]
 800770e:	731a      	strb	r2, [r3, #12]
    break;
 8007710:	e01c      	b.n	800774c <pbuf_alloc+0x310>
 8007712:	bf00      	nop
 8007714:	0801662c 	.word	0x0801662c
 8007718:	0801665c 	.word	0x0801665c
 800771c:	08016678 	.word	0x08016678
 8007720:	080166a0 	.word	0x080166a0
 8007724:	080166d0 	.word	0x080166d0
 8007728:	08016704 	.word	0x08016704
 800772c:	08016738 	.word	0x08016738
 8007730:	0801674c 	.word	0x0801674c
 8007734:	0801677c 	.word	0x0801677c
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007738:	4b0a      	ldr	r3, [pc, #40]	; (8007764 <pbuf_alloc+0x328>)
 800773a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800773e:	490a      	ldr	r1, [pc, #40]	; (8007768 <pbuf_alloc+0x32c>)
 8007740:	480a      	ldr	r0, [pc, #40]	; (800776c <pbuf_alloc+0x330>)
 8007742:	f00a ff3d 	bl	80125c0 <iprintf>
    return NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	e007      	b.n	800775a <pbuf_alloc+0x31e>
    break;
 800774a:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	2201      	movs	r2, #1
 8007750:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	2200      	movs	r2, #0
 8007756:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007758:	69fb      	ldr	r3, [r7, #28]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3720      	adds	r7, #32
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	0801662c 	.word	0x0801662c
 8007768:	080167a8 	.word	0x080167a8
 800776c:	08016678 	.word	0x08016678

08007770 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	603b      	str	r3, [r7, #0]
 8007778:	4603      	mov	r3, r0
 800777a:	71fb      	strb	r3, [r7, #7]
 800777c:	460b      	mov	r3, r1
 800777e:	80bb      	strh	r3, [r7, #4]
 8007780:	4613      	mov	r3, r2
 8007782:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8007784:	79fb      	ldrb	r3, [r7, #7]
 8007786:	2b04      	cmp	r3, #4
 8007788:	d81b      	bhi.n	80077c2 <pbuf_alloced_custom+0x52>
 800778a:	a201      	add	r2, pc, #4	; (adr r2, 8007790 <pbuf_alloced_custom+0x20>)
 800778c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007790:	080077a5 	.word	0x080077a5
 8007794:	080077ab 	.word	0x080077ab
 8007798:	080077b1 	.word	0x080077b1
 800779c:	080077b7 	.word	0x080077b7
 80077a0:	080077bd 	.word	0x080077bd
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80077a4:	2336      	movs	r3, #54	; 0x36
 80077a6:	81fb      	strh	r3, [r7, #14]
    break;
 80077a8:	e014      	b.n	80077d4 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80077aa:	2322      	movs	r3, #34	; 0x22
 80077ac:	81fb      	strh	r3, [r7, #14]
    break;
 80077ae:	e011      	b.n	80077d4 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80077b0:	230e      	movs	r3, #14
 80077b2:	81fb      	strh	r3, [r7, #14]
    break;
 80077b4:	e00e      	b.n	80077d4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80077b6:	2300      	movs	r3, #0
 80077b8:	81fb      	strh	r3, [r7, #14]
    break;
 80077ba:	e00b      	b.n	80077d4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	81fb      	strh	r3, [r7, #14]
    break;
 80077c0:	e008      	b.n	80077d4 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80077c2:	4b1d      	ldr	r3, [pc, #116]	; (8007838 <pbuf_alloced_custom+0xc8>)
 80077c4:	f240 12c5 	movw	r2, #453	; 0x1c5
 80077c8:	491c      	ldr	r1, [pc, #112]	; (800783c <pbuf_alloced_custom+0xcc>)
 80077ca:	481d      	ldr	r0, [pc, #116]	; (8007840 <pbuf_alloced_custom+0xd0>)
 80077cc:	f00a fef8 	bl	80125c0 <iprintf>
    return NULL;
 80077d0:	2300      	movs	r3, #0
 80077d2:	e02d      	b.n	8007830 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80077d4:	89fb      	ldrh	r3, [r7, #14]
 80077d6:	3303      	adds	r3, #3
 80077d8:	f023 0203 	bic.w	r2, r3, #3
 80077dc:	88bb      	ldrh	r3, [r7, #4]
 80077de:	441a      	add	r2, r3
 80077e0:	8bbb      	ldrh	r3, [r7, #28]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d901      	bls.n	80077ea <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	e022      	b.n	8007830 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2200      	movs	r2, #0
 80077ee:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d008      	beq.n	8007808 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80077f6:	89fb      	ldrh	r3, [r7, #14]
 80077f8:	3303      	adds	r3, #3
 80077fa:	f023 0303 	bic.w	r3, r3, #3
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	441a      	add	r2, r3
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	605a      	str	r2, [r3, #4]
 8007806:	e002      	b.n	800780e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	2200      	movs	r2, #0
 800780c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2202      	movs	r2, #2
 8007812:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	88ba      	ldrh	r2, [r7, #4]
 8007818:	811a      	strh	r2, [r3, #8]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	891a      	ldrh	r2, [r3, #8]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	79ba      	ldrb	r2, [r7, #6]
 8007826:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2201      	movs	r2, #1
 800782c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800782e:	683b      	ldr	r3, [r7, #0]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	0801662c 	.word	0x0801662c
 800783c:	080167c4 	.word	0x080167c4
 8007840:	08016678 	.word	0x08016678

08007844 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d106      	bne.n	8007864 <pbuf_realloc+0x20>
 8007856:	4b4b      	ldr	r3, [pc, #300]	; (8007984 <pbuf_realloc+0x140>)
 8007858:	f240 12f3 	movw	r2, #499	; 0x1f3
 800785c:	494a      	ldr	r1, [pc, #296]	; (8007988 <pbuf_realloc+0x144>)
 800785e:	484b      	ldr	r0, [pc, #300]	; (800798c <pbuf_realloc+0x148>)
 8007860:	f00a feae 	bl	80125c0 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	7b1b      	ldrb	r3, [r3, #12]
 8007868:	2b03      	cmp	r3, #3
 800786a:	d012      	beq.n	8007892 <pbuf_realloc+0x4e>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	7b1b      	ldrb	r3, [r3, #12]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d00e      	beq.n	8007892 <pbuf_realloc+0x4e>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	7b1b      	ldrb	r3, [r3, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00a      	beq.n	8007892 <pbuf_realloc+0x4e>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	7b1b      	ldrb	r3, [r3, #12]
 8007880:	2b02      	cmp	r3, #2
 8007882:	d006      	beq.n	8007892 <pbuf_realloc+0x4e>
 8007884:	4b3f      	ldr	r3, [pc, #252]	; (8007984 <pbuf_realloc+0x140>)
 8007886:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800788a:	4941      	ldr	r1, [pc, #260]	; (8007990 <pbuf_realloc+0x14c>)
 800788c:	483f      	ldr	r0, [pc, #252]	; (800798c <pbuf_realloc+0x148>)
 800788e:	f00a fe97 	bl	80125c0 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	891b      	ldrh	r3, [r3, #8]
 8007896:	887a      	ldrh	r2, [r7, #2]
 8007898:	429a      	cmp	r2, r3
 800789a:	d26e      	bcs.n	800797a <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800789c:	887b      	ldrh	r3, [r7, #2]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	8912      	ldrh	r2, [r2, #8]
 80078a2:	1a9b      	subs	r3, r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80078a6:	887b      	ldrh	r3, [r7, #2]
 80078a8:	827b      	strh	r3, [r7, #18]
  q = p;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80078ae:	e025      	b.n	80078fc <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	895b      	ldrh	r3, [r3, #10]
 80078b4:	8a7a      	ldrh	r2, [r7, #18]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80078c0:	4293      	cmp	r3, r2
 80078c2:	dd06      	ble.n	80078d2 <pbuf_realloc+0x8e>
 80078c4:	4b2f      	ldr	r3, [pc, #188]	; (8007984 <pbuf_realloc+0x140>)
 80078c6:	f240 220b 	movw	r2, #523	; 0x20b
 80078ca:	4932      	ldr	r1, [pc, #200]	; (8007994 <pbuf_realloc+0x150>)
 80078cc:	482f      	ldr	r0, [pc, #188]	; (800798c <pbuf_realloc+0x148>)
 80078ce:	f00a fe77 	bl	80125c0 <iprintf>
    q->tot_len += (u16_t)grow;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	891a      	ldrh	r2, [r3, #8]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	4413      	add	r3, r2
 80078dc:	b29a      	uxth	r2, r3
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d106      	bne.n	80078fc <pbuf_realloc+0xb8>
 80078ee:	4b25      	ldr	r3, [pc, #148]	; (8007984 <pbuf_realloc+0x140>)
 80078f0:	f240 220f 	movw	r2, #527	; 0x20f
 80078f4:	4928      	ldr	r1, [pc, #160]	; (8007998 <pbuf_realloc+0x154>)
 80078f6:	4825      	ldr	r0, [pc, #148]	; (800798c <pbuf_realloc+0x148>)
 80078f8:	f00a fe62 	bl	80125c0 <iprintf>
  while (rem_len > q->len) {
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	895b      	ldrh	r3, [r3, #10]
 8007900:	8a7a      	ldrh	r2, [r7, #18]
 8007902:	429a      	cmp	r2, r3
 8007904:	d8d4      	bhi.n	80078b0 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	7b1b      	ldrb	r3, [r3, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d121      	bne.n	8007952 <pbuf_realloc+0x10e>
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	895b      	ldrh	r3, [r3, #10]
 8007912:	8a7a      	ldrh	r2, [r7, #18]
 8007914:	429a      	cmp	r2, r3
 8007916:	d01c      	beq.n	8007952 <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	7b5b      	ldrb	r3, [r3, #13]
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d116      	bne.n	8007952 <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	b29a      	uxth	r2, r3
 800792e:	8a7b      	ldrh	r3, [r7, #18]
 8007930:	4413      	add	r3, r2
 8007932:	b29b      	uxth	r3, r3
 8007934:	4619      	mov	r1, r3
 8007936:	6978      	ldr	r0, [r7, #20]
 8007938:	f7ff f8bc 	bl	8006ab4 <mem_trim>
 800793c:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d106      	bne.n	8007952 <pbuf_realloc+0x10e>
 8007944:	4b0f      	ldr	r3, [pc, #60]	; (8007984 <pbuf_realloc+0x140>)
 8007946:	f240 221d 	movw	r2, #541	; 0x21d
 800794a:	4914      	ldr	r1, [pc, #80]	; (800799c <pbuf_realloc+0x158>)
 800794c:	480f      	ldr	r0, [pc, #60]	; (800798c <pbuf_realloc+0x148>)
 800794e:	f00a fe37 	bl	80125c0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	8a7a      	ldrh	r2, [r7, #18]
 8007956:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	895a      	ldrh	r2, [r3, #10]
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d004      	beq.n	8007972 <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4618      	mov	r0, r3
 800796e:	f000 f8dd 	bl	8007b2c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2200      	movs	r2, #0
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	e000      	b.n	800797c <pbuf_realloc+0x138>
    return;
 800797a:	bf00      	nop

}
 800797c:	3718      	adds	r7, #24
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	0801662c 	.word	0x0801662c
 8007988:	080167e8 	.word	0x080167e8
 800798c:	08016678 	.word	0x08016678
 8007990:	08016800 	.word	0x08016800
 8007994:	0801681c 	.word	0x0801681c
 8007998:	08016830 	.word	0x08016830
 800799c:	08016848 	.word	0x08016848

080079a0 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	807b      	strh	r3, [r7, #2]
 80079ac:	4613      	mov	r3, r2
 80079ae:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d106      	bne.n	80079c4 <pbuf_header_impl+0x24>
 80079b6:	4b46      	ldr	r3, [pc, #280]	; (8007ad0 <pbuf_header_impl+0x130>)
 80079b8:	f240 223f 	movw	r2, #575	; 0x23f
 80079bc:	4945      	ldr	r1, [pc, #276]	; (8007ad4 <pbuf_header_impl+0x134>)
 80079be:	4846      	ldr	r0, [pc, #280]	; (8007ad8 <pbuf_header_impl+0x138>)
 80079c0:	f00a fdfe 	bl	80125c0 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80079c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <pbuf_header_impl+0x32>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <pbuf_header_impl+0x36>
    return 0;
 80079d2:	2300      	movs	r3, #0
 80079d4:	e078      	b.n	8007ac8 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80079d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	da10      	bge.n	8007a00 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80079de:	887b      	ldrh	r3, [r7, #2]
 80079e0:	425b      	negs	r3, r3
 80079e2:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	895b      	ldrh	r3, [r3, #10]
 80079e8:	89fa      	ldrh	r2, [r7, #14]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d90a      	bls.n	8007a04 <pbuf_header_impl+0x64>
 80079ee:	4b38      	ldr	r3, [pc, #224]	; (8007ad0 <pbuf_header_impl+0x130>)
 80079f0:	f240 2247 	movw	r2, #583	; 0x247
 80079f4:	4939      	ldr	r1, [pc, #228]	; (8007adc <pbuf_header_impl+0x13c>)
 80079f6:	4838      	ldr	r0, [pc, #224]	; (8007ad8 <pbuf_header_impl+0x138>)
 80079f8:	f00a fde2 	bl	80125c0 <iprintf>
 80079fc:	2301      	movs	r3, #1
 80079fe:	e063      	b.n	8007ac8 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8007a00:	887b      	ldrh	r3, [r7, #2]
 8007a02:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	7b1b      	ldrb	r3, [r3, #12]
 8007a08:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8007a10:	89bb      	ldrh	r3, [r7, #12]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <pbuf_header_impl+0x7c>
 8007a16:	89bb      	ldrh	r3, [r7, #12]
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d112      	bne.n	8007a42 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a24:	425b      	negs	r3, r3
 8007a26:	441a      	add	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	3310      	adds	r3, #16
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d238      	bcs.n	8007aaa <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e042      	b.n	8007ac8 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8007a42:	89bb      	ldrh	r3, [r7, #12]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d002      	beq.n	8007a4e <pbuf_header_impl+0xae>
 8007a48:	89bb      	ldrh	r3, [r7, #12]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d124      	bne.n	8007a98 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8007a4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	da0d      	bge.n	8007a72 <pbuf_header_impl+0xd2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	895b      	ldrh	r3, [r3, #10]
 8007a5a:	89fa      	ldrh	r2, [r7, #14]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d808      	bhi.n	8007a72 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a68:	425b      	negs	r3, r3
 8007a6a:	441a      	add	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	605a      	str	r2, [r3, #4]
 8007a70:	e011      	b.n	8007a96 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8007a72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dd0b      	ble.n	8007a92 <pbuf_header_impl+0xf2>
 8007a7a:	787b      	ldrb	r3, [r7, #1]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d008      	beq.n	8007a92 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a88:	425b      	negs	r3, r3
 8007a8a:	441a      	add	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	605a      	str	r2, [r3, #4]
 8007a90:	e001      	b.n	8007a96 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e018      	b.n	8007ac8 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8007a96:	e008      	b.n	8007aaa <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8007a98:	4b0d      	ldr	r3, [pc, #52]	; (8007ad0 <pbuf_header_impl+0x130>)
 8007a9a:	f240 2277 	movw	r2, #631	; 0x277
 8007a9e:	4910      	ldr	r1, [pc, #64]	; (8007ae0 <pbuf_header_impl+0x140>)
 8007aa0:	480d      	ldr	r0, [pc, #52]	; (8007ad8 <pbuf_header_impl+0x138>)
 8007aa2:	f00a fd8d 	bl	80125c0 <iprintf>
    return 1;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e00e      	b.n	8007ac8 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	895a      	ldrh	r2, [r3, #10]
 8007aae:	887b      	ldrh	r3, [r7, #2]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	891a      	ldrh	r2, [r3, #8]
 8007abc:	887b      	ldrh	r3, [r7, #2]
 8007abe:	4413      	add	r3, r2
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	0801662c 	.word	0x0801662c
 8007ad4:	08016864 	.word	0x08016864
 8007ad8:	08016678 	.word	0x08016678
 8007adc:	08016870 	.word	0x08016870
 8007ae0:	08016890 	.word	0x08016890

08007ae4 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	460b      	mov	r3, r1
 8007aee:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8007af0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007af4:	2200      	movs	r2, #0
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff ff51 	bl	80079a0 <pbuf_header_impl>
 8007afe:	4603      	mov	r3, r0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8007b14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7ff ff3f 	bl	80079a0 <pbuf_header_impl>
 8007b22:	4603      	mov	r3, r0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10b      	bne.n	8007b52 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d106      	bne.n	8007b4e <pbuf_free+0x22>
 8007b40:	4b3e      	ldr	r3, [pc, #248]	; (8007c3c <pbuf_free+0x110>)
 8007b42:	f240 22d2 	movw	r2, #722	; 0x2d2
 8007b46:	493e      	ldr	r1, [pc, #248]	; (8007c40 <pbuf_free+0x114>)
 8007b48:	483e      	ldr	r0, [pc, #248]	; (8007c44 <pbuf_free+0x118>)
 8007b4a:	f00a fd39 	bl	80125c0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	e070      	b.n	8007c34 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	7b1b      	ldrb	r3, [r3, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d012      	beq.n	8007b80 <pbuf_free+0x54>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	7b1b      	ldrb	r3, [r3, #12]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d00e      	beq.n	8007b80 <pbuf_free+0x54>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	7b1b      	ldrb	r3, [r3, #12]
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d00a      	beq.n	8007b80 <pbuf_free+0x54>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	7b1b      	ldrb	r3, [r3, #12]
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d006      	beq.n	8007b80 <pbuf_free+0x54>
 8007b72:	4b32      	ldr	r3, [pc, #200]	; (8007c3c <pbuf_free+0x110>)
 8007b74:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007b78:	4933      	ldr	r1, [pc, #204]	; (8007c48 <pbuf_free+0x11c>)
 8007b7a:	4832      	ldr	r0, [pc, #200]	; (8007c44 <pbuf_free+0x118>)
 8007b7c:	f00a fd20 	bl	80125c0 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007b84:	e052      	b.n	8007c2c <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	89db      	ldrh	r3, [r3, #14]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d106      	bne.n	8007b9c <pbuf_free+0x70>
 8007b8e:	4b2b      	ldr	r3, [pc, #172]	; (8007c3c <pbuf_free+0x110>)
 8007b90:	f240 22eb 	movw	r2, #747	; 0x2eb
 8007b94:	492d      	ldr	r1, [pc, #180]	; (8007c4c <pbuf_free+0x120>)
 8007b96:	482b      	ldr	r0, [pc, #172]	; (8007c44 <pbuf_free+0x118>)
 8007b98:	f00a fd12 	bl	80125c0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	89db      	ldrh	r3, [r3, #14]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	81da      	strh	r2, [r3, #14]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	89db      	ldrh	r3, [r3, #14]
 8007bac:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007bae:	8abb      	ldrh	r3, [r7, #20]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d139      	bne.n	8007c28 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	7b1b      	ldrb	r3, [r3, #12]
 8007bbe:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	7b5b      	ldrb	r3, [r3, #13]
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d011      	beq.n	8007bf0 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d106      	bne.n	8007be6 <pbuf_free+0xba>
 8007bd8:	4b18      	ldr	r3, [pc, #96]	; (8007c3c <pbuf_free+0x110>)
 8007bda:	f240 22f9 	movw	r2, #761	; 0x2f9
 8007bde:	491c      	ldr	r1, [pc, #112]	; (8007c50 <pbuf_free+0x124>)
 8007be0:	4818      	ldr	r0, [pc, #96]	; (8007c44 <pbuf_free+0x118>)
 8007be2:	f00a fced 	bl	80125c0 <iprintf>
        pc->custom_free_function(p);
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	4798      	blx	r3
 8007bee:	e015      	b.n	8007c1c <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8007bf0:	89fb      	ldrh	r3, [r7, #14]
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d104      	bne.n	8007c00 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8007bf6:	6879      	ldr	r1, [r7, #4]
 8007bf8:	2008      	movs	r0, #8
 8007bfa:	f7ff fa59 	bl	80070b0 <memp_free>
 8007bfe:	e00d      	b.n	8007c1c <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8007c00:	89fb      	ldrh	r3, [r7, #14]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d002      	beq.n	8007c0c <pbuf_free+0xe0>
 8007c06:	89fb      	ldrh	r3, [r7, #14]
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d104      	bne.n	8007c16 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8007c0c:	6879      	ldr	r1, [r7, #4]
 8007c0e:	2007      	movs	r0, #7
 8007c10:	f7ff fa4e 	bl	80070b0 <memp_free>
 8007c14:	e002      	b.n	8007c1c <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7fe fed0 	bl	80069bc <mem_free>
        }
      }
      count++;
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	607b      	str	r3, [r7, #4]
 8007c26:	e001      	b.n	8007c2c <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1a9      	bne.n	8007b86 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3718      	adds	r7, #24
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	0801662c 	.word	0x0801662c
 8007c40:	08016864 	.word	0x08016864
 8007c44:	08016678 	.word	0x08016678
 8007c48:	080168a0 	.word	0x080168a0
 8007c4c:	080168b8 	.word	0x080168b8
 8007c50:	080168d0 	.word	0x080168d0

08007c54 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007c60:	e005      	b.n	8007c6e <pbuf_clen+0x1a>
    ++len;
 8007c62:	89fb      	ldrh	r3, [r7, #14]
 8007c64:	3301      	adds	r3, #1
 8007c66:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1f6      	bne.n	8007c62 <pbuf_clen+0xe>
  }
  return len;
 8007c74:	89fb      	ldrh	r3, [r7, #14]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bc80      	pop	{r7}
 8007c7e:	4770      	bx	lr

08007c80 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d010      	beq.n	8007cb0 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	89db      	ldrh	r3, [r3, #14]
 8007c92:	3301      	adds	r3, #1
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	89db      	ldrh	r3, [r3, #14]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d106      	bne.n	8007cb0 <pbuf_ref+0x30>
 8007ca2:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <pbuf_ref+0x38>)
 8007ca4:	f240 3239 	movw	r2, #825	; 0x339
 8007ca8:	4904      	ldr	r1, [pc, #16]	; (8007cbc <pbuf_ref+0x3c>)
 8007caa:	4805      	ldr	r0, [pc, #20]	; (8007cc0 <pbuf_ref+0x40>)
 8007cac:	f00a fc88 	bl	80125c0 <iprintf>
  }
}
 8007cb0:	bf00      	nop
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	0801662c 	.word	0x0801662c
 8007cbc:	080168f4 	.word	0x080168f4
 8007cc0:	08016678 	.word	0x08016678

08007cc4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <pbuf_cat+0x16>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d107      	bne.n	8007cea <pbuf_cat+0x26>
 8007cda:	4b20      	ldr	r3, [pc, #128]	; (8007d5c <pbuf_cat+0x98>)
 8007cdc:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8007ce0:	491f      	ldr	r1, [pc, #124]	; (8007d60 <pbuf_cat+0x9c>)
 8007ce2:	4820      	ldr	r0, [pc, #128]	; (8007d64 <pbuf_cat+0xa0>)
 8007ce4:	f00a fc6c 	bl	80125c0 <iprintf>
 8007ce8:	e034      	b.n	8007d54 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	60fb      	str	r3, [r7, #12]
 8007cee:	e00a      	b.n	8007d06 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	891a      	ldrh	r2, [r3, #8]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	891b      	ldrh	r3, [r3, #8]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1f0      	bne.n	8007cf0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	891a      	ldrh	r2, [r3, #8]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	895b      	ldrh	r3, [r3, #10]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d006      	beq.n	8007d28 <pbuf_cat+0x64>
 8007d1a:	4b10      	ldr	r3, [pc, #64]	; (8007d5c <pbuf_cat+0x98>)
 8007d1c:	f240 3255 	movw	r2, #853	; 0x355
 8007d20:	4911      	ldr	r1, [pc, #68]	; (8007d68 <pbuf_cat+0xa4>)
 8007d22:	4810      	ldr	r0, [pc, #64]	; (8007d64 <pbuf_cat+0xa0>)
 8007d24:	f00a fc4c 	bl	80125c0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d006      	beq.n	8007d3e <pbuf_cat+0x7a>
 8007d30:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <pbuf_cat+0x98>)
 8007d32:	f240 3256 	movw	r2, #854	; 0x356
 8007d36:	490d      	ldr	r1, [pc, #52]	; (8007d6c <pbuf_cat+0xa8>)
 8007d38:	480a      	ldr	r0, [pc, #40]	; (8007d64 <pbuf_cat+0xa0>)
 8007d3a:	f00a fc41 	bl	80125c0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	891a      	ldrh	r2, [r3, #8]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	891b      	ldrh	r3, [r3, #8]
 8007d46:	4413      	add	r3, r2
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	0801662c 	.word	0x0801662c
 8007d60:	08016908 	.word	0x08016908
 8007d64:	08016678 	.word	0x08016678
 8007d68:	08016940 	.word	0x08016940
 8007d6c:	08016970 	.word	0x08016970

08007d70 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff ffa1 	bl	8007cc4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007d82:	6838      	ldr	r0, [r7, #0]
 8007d84:	f7ff ff7c 	bl	8007c80 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007d88:	bf00      	nop
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	81fb      	strh	r3, [r7, #14]
 8007d9e:	2300      	movs	r3, #0
 8007da0:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d008      	beq.n	8007dba <pbuf_copy+0x2a>
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d005      	beq.n	8007dba <pbuf_copy+0x2a>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	891a      	ldrh	r2, [r3, #8]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	891b      	ldrh	r3, [r3, #8]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d209      	bcs.n	8007dce <pbuf_copy+0x3e>
 8007dba:	4b54      	ldr	r3, [pc, #336]	; (8007f0c <pbuf_copy+0x17c>)
 8007dbc:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8007dc0:	4953      	ldr	r1, [pc, #332]	; (8007f10 <pbuf_copy+0x180>)
 8007dc2:	4854      	ldr	r0, [pc, #336]	; (8007f14 <pbuf_copy+0x184>)
 8007dc4:	f00a fbfc 	bl	80125c0 <iprintf>
 8007dc8:	f06f 030f 	mvn.w	r3, #15
 8007dcc:	e099      	b.n	8007f02 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	895b      	ldrh	r3, [r3, #10]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	89fb      	ldrh	r3, [r7, #14]
 8007dd6:	1ad2      	subs	r2, r2, r3
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	895b      	ldrh	r3, [r3, #10]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	89bb      	ldrh	r3, [r7, #12]
 8007de0:	1acb      	subs	r3, r1, r3
 8007de2:	429a      	cmp	r2, r3
 8007de4:	db05      	blt.n	8007df2 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	895a      	ldrh	r2, [r3, #10]
 8007dea:	89bb      	ldrh	r3, [r7, #12]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	817b      	strh	r3, [r7, #10]
 8007df0:	e004      	b.n	8007dfc <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	895a      	ldrh	r2, [r3, #10]
 8007df6:	89fb      	ldrh	r3, [r7, #14]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	89fb      	ldrh	r3, [r7, #14]
 8007e02:	18d0      	adds	r0, r2, r3
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	89bb      	ldrh	r3, [r7, #12]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	897a      	ldrh	r2, [r7, #10]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	f009 fd52 	bl	80118b8 <memcpy>
    offset_to += len;
 8007e14:	89fa      	ldrh	r2, [r7, #14]
 8007e16:	897b      	ldrh	r3, [r7, #10]
 8007e18:	4413      	add	r3, r2
 8007e1a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8007e1c:	89ba      	ldrh	r2, [r7, #12]
 8007e1e:	897b      	ldrh	r3, [r7, #10]
 8007e20:	4413      	add	r3, r2
 8007e22:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	895b      	ldrh	r3, [r3, #10]
 8007e28:	89fa      	ldrh	r2, [r7, #14]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d906      	bls.n	8007e3c <pbuf_copy+0xac>
 8007e2e:	4b37      	ldr	r3, [pc, #220]	; (8007f0c <pbuf_copy+0x17c>)
 8007e30:	f240 32cd 	movw	r2, #973	; 0x3cd
 8007e34:	4938      	ldr	r1, [pc, #224]	; (8007f18 <pbuf_copy+0x188>)
 8007e36:	4837      	ldr	r0, [pc, #220]	; (8007f14 <pbuf_copy+0x184>)
 8007e38:	f00a fbc2 	bl	80125c0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	895b      	ldrh	r3, [r3, #10]
 8007e40:	89ba      	ldrh	r2, [r7, #12]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d906      	bls.n	8007e54 <pbuf_copy+0xc4>
 8007e46:	4b31      	ldr	r3, [pc, #196]	; (8007f0c <pbuf_copy+0x17c>)
 8007e48:	f240 32ce 	movw	r2, #974	; 0x3ce
 8007e4c:	4933      	ldr	r1, [pc, #204]	; (8007f1c <pbuf_copy+0x18c>)
 8007e4e:	4831      	ldr	r0, [pc, #196]	; (8007f14 <pbuf_copy+0x184>)
 8007e50:	f00a fbb6 	bl	80125c0 <iprintf>
    if (offset_from >= p_from->len) {
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	895b      	ldrh	r3, [r3, #10]
 8007e58:	89ba      	ldrh	r2, [r7, #12]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d304      	bcc.n	8007e68 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	895b      	ldrh	r3, [r3, #10]
 8007e6c:	89fa      	ldrh	r2, [r7, #14]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d114      	bne.n	8007e9c <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10c      	bne.n	8007e9c <pbuf_copy+0x10c>
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d009      	beq.n	8007e9c <pbuf_copy+0x10c>
 8007e88:	4b20      	ldr	r3, [pc, #128]	; (8007f0c <pbuf_copy+0x17c>)
 8007e8a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8007e8e:	4924      	ldr	r1, [pc, #144]	; (8007f20 <pbuf_copy+0x190>)
 8007e90:	4820      	ldr	r0, [pc, #128]	; (8007f14 <pbuf_copy+0x184>)
 8007e92:	f00a fb95 	bl	80125c0 <iprintf>
 8007e96:	f06f 030f 	mvn.w	r3, #15
 8007e9a:	e032      	b.n	8007f02 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d013      	beq.n	8007eca <pbuf_copy+0x13a>
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	895a      	ldrh	r2, [r3, #10]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	891b      	ldrh	r3, [r3, #8]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d10d      	bne.n	8007eca <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d009      	beq.n	8007eca <pbuf_copy+0x13a>
 8007eb6:	4b15      	ldr	r3, [pc, #84]	; (8007f0c <pbuf_copy+0x17c>)
 8007eb8:	f240 32dd 	movw	r2, #989	; 0x3dd
 8007ebc:	4919      	ldr	r1, [pc, #100]	; (8007f24 <pbuf_copy+0x194>)
 8007ebe:	4815      	ldr	r0, [pc, #84]	; (8007f14 <pbuf_copy+0x184>)
 8007ec0:	f00a fb7e 	bl	80125c0 <iprintf>
 8007ec4:	f06f 0305 	mvn.w	r3, #5
 8007ec8:	e01b      	b.n	8007f02 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d013      	beq.n	8007ef8 <pbuf_copy+0x168>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	895a      	ldrh	r2, [r3, #10]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	891b      	ldrh	r3, [r3, #8]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d10d      	bne.n	8007ef8 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d009      	beq.n	8007ef8 <pbuf_copy+0x168>
 8007ee4:	4b09      	ldr	r3, [pc, #36]	; (8007f0c <pbuf_copy+0x17c>)
 8007ee6:	f240 32e2 	movw	r2, #994	; 0x3e2
 8007eea:	490e      	ldr	r1, [pc, #56]	; (8007f24 <pbuf_copy+0x194>)
 8007eec:	4809      	ldr	r0, [pc, #36]	; (8007f14 <pbuf_copy+0x184>)
 8007eee:	f00a fb67 	bl	80125c0 <iprintf>
 8007ef2:	f06f 0305 	mvn.w	r3, #5
 8007ef6:	e004      	b.n	8007f02 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f47f af67 	bne.w	8007dce <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	0801662c 	.word	0x0801662c
 8007f10:	080169bc 	.word	0x080169bc
 8007f14:	08016678 	.word	0x08016678
 8007f18:	080169ec 	.word	0x080169ec
 8007f1c:	08016a04 	.word	0x08016a04
 8007f20:	08016a20 	.word	0x08016a20
 8007f24:	08016a30 	.word	0x08016a30

08007f28 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b088      	sub	sp, #32
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	4611      	mov	r1, r2
 8007f34:	461a      	mov	r2, r3
 8007f36:	460b      	mov	r3, r1
 8007f38:	80fb      	strh	r3, [r7, #6]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d108      	bne.n	8007f5a <pbuf_copy_partial+0x32>
 8007f48:	4b30      	ldr	r3, [pc, #192]	; (800800c <pbuf_copy_partial+0xe4>)
 8007f4a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007f4e:	4930      	ldr	r1, [pc, #192]	; (8008010 <pbuf_copy_partial+0xe8>)
 8007f50:	4830      	ldr	r0, [pc, #192]	; (8008014 <pbuf_copy_partial+0xec>)
 8007f52:	f00a fb35 	bl	80125c0 <iprintf>
 8007f56:	2300      	movs	r3, #0
 8007f58:	e054      	b.n	8008004 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d108      	bne.n	8007f72 <pbuf_copy_partial+0x4a>
 8007f60:	4b2a      	ldr	r3, [pc, #168]	; (800800c <pbuf_copy_partial+0xe4>)
 8007f62:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007f66:	492c      	ldr	r1, [pc, #176]	; (8008018 <pbuf_copy_partial+0xf0>)
 8007f68:	482a      	ldr	r0, [pc, #168]	; (8008014 <pbuf_copy_partial+0xec>)
 8007f6a:	f00a fb29 	bl	80125c0 <iprintf>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e048      	b.n	8008004 <pbuf_copy_partial+0xdc>

  left = 0;
 8007f72:	2300      	movs	r3, #0
 8007f74:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d002      	beq.n	8007f82 <pbuf_copy_partial+0x5a>
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <pbuf_copy_partial+0x5e>
    return 0;
 8007f82:	2300      	movs	r3, #0
 8007f84:	e03e      	b.n	8008004 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	61fb      	str	r3, [r7, #28]
 8007f8a:	e034      	b.n	8007ff6 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8007f8c:	88bb      	ldrh	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00a      	beq.n	8007fa8 <pbuf_copy_partial+0x80>
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	895b      	ldrh	r3, [r3, #10]
 8007f96:	88ba      	ldrh	r2, [r7, #4]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d305      	bcc.n	8007fa8 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	895b      	ldrh	r3, [r3, #10]
 8007fa0:	88ba      	ldrh	r2, [r7, #4]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	80bb      	strh	r3, [r7, #4]
 8007fa6:	e023      	b.n	8007ff0 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	895a      	ldrh	r2, [r3, #10]
 8007fac:	88bb      	ldrh	r3, [r7, #4]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007fb2:	8b3a      	ldrh	r2, [r7, #24]
 8007fb4:	88fb      	ldrh	r3, [r7, #6]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d901      	bls.n	8007fbe <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8007fba:	88fb      	ldrh	r3, [r7, #6]
 8007fbc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007fbe:	8b7b      	ldrh	r3, [r7, #26]
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	18d0      	adds	r0, r2, r3
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	88bb      	ldrh	r3, [r7, #4]
 8007fca:	4413      	add	r3, r2
 8007fcc:	8b3a      	ldrh	r2, [r7, #24]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	f009 fc72 	bl	80118b8 <memcpy>
      copied_total += buf_copy_len;
 8007fd4:	8afa      	ldrh	r2, [r7, #22]
 8007fd6:	8b3b      	ldrh	r3, [r7, #24]
 8007fd8:	4413      	add	r3, r2
 8007fda:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8007fdc:	8b7a      	ldrh	r2, [r7, #26]
 8007fde:	8b3b      	ldrh	r3, [r7, #24]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8007fe4:	88fa      	ldrh	r2, [r7, #6]
 8007fe6:	8b3b      	ldrh	r3, [r7, #24]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	61fb      	str	r3, [r7, #28]
 8007ff6:	88fb      	ldrh	r3, [r7, #6]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <pbuf_copy_partial+0xda>
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1c4      	bne.n	8007f8c <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8008002:	8afb      	ldrh	r3, [r7, #22]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3720      	adds	r7, #32
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	0801662c 	.word	0x0801662c
 8008010:	08016a5c 	.word	0x08016a5c
 8008014:	08016678 	.word	0x08016678
 8008018:	08016a7c 	.word	0x08016a7c

0800801c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b088      	sub	sp, #32
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	4613      	mov	r3, r2
 8008028:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 800802a:	88fb      	ldrh	r3, [r7, #6]
 800802c:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 800802e:	2300      	movs	r3, #0
 8008030:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d109      	bne.n	800804c <pbuf_take+0x30>
 8008038:	4b3a      	ldr	r3, [pc, #232]	; (8008124 <pbuf_take+0x108>)
 800803a:	f240 4284 	movw	r2, #1156	; 0x484
 800803e:	493a      	ldr	r1, [pc, #232]	; (8008128 <pbuf_take+0x10c>)
 8008040:	483a      	ldr	r0, [pc, #232]	; (800812c <pbuf_take+0x110>)
 8008042:	f00a fabd 	bl	80125c0 <iprintf>
 8008046:	f06f 030f 	mvn.w	r3, #15
 800804a:	e066      	b.n	800811a <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d109      	bne.n	8008066 <pbuf_take+0x4a>
 8008052:	4b34      	ldr	r3, [pc, #208]	; (8008124 <pbuf_take+0x108>)
 8008054:	f240 4285 	movw	r2, #1157	; 0x485
 8008058:	4935      	ldr	r1, [pc, #212]	; (8008130 <pbuf_take+0x114>)
 800805a:	4834      	ldr	r0, [pc, #208]	; (800812c <pbuf_take+0x110>)
 800805c:	f00a fab0 	bl	80125c0 <iprintf>
 8008060:	f06f 030f 	mvn.w	r3, #15
 8008064:	e059      	b.n	800811a <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	891b      	ldrh	r3, [r3, #8]
 800806a:	88fa      	ldrh	r2, [r7, #6]
 800806c:	429a      	cmp	r2, r3
 800806e:	d909      	bls.n	8008084 <pbuf_take+0x68>
 8008070:	4b2c      	ldr	r3, [pc, #176]	; (8008124 <pbuf_take+0x108>)
 8008072:	f240 4286 	movw	r2, #1158	; 0x486
 8008076:	492f      	ldr	r1, [pc, #188]	; (8008134 <pbuf_take+0x118>)
 8008078:	482c      	ldr	r0, [pc, #176]	; (800812c <pbuf_take+0x110>)
 800807a:	f00a faa1 	bl	80125c0 <iprintf>
 800807e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008082:	e04a      	b.n	800811a <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d007      	beq.n	800809a <pbuf_take+0x7e>
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d004      	beq.n	800809a <pbuf_take+0x7e>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	891b      	ldrh	r3, [r3, #8]
 8008094:	88fa      	ldrh	r2, [r7, #6]
 8008096:	429a      	cmp	r2, r3
 8008098:	d902      	bls.n	80080a0 <pbuf_take+0x84>
    return ERR_ARG;
 800809a:	f06f 030f 	mvn.w	r3, #15
 800809e:	e03c      	b.n	800811a <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	61fb      	str	r3, [r7, #28]
 80080a4:	e027      	b.n	80080f6 <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d106      	bne.n	80080ba <pbuf_take+0x9e>
 80080ac:	4b1d      	ldr	r3, [pc, #116]	; (8008124 <pbuf_take+0x108>)
 80080ae:	f240 428e 	movw	r2, #1166	; 0x48e
 80080b2:	4921      	ldr	r1, [pc, #132]	; (8008138 <pbuf_take+0x11c>)
 80080b4:	481d      	ldr	r0, [pc, #116]	; (800812c <pbuf_take+0x110>)
 80080b6:	f00a fa83 	bl	80125c0 <iprintf>
    buf_copy_len = total_copy_len;
 80080ba:	8b3b      	ldrh	r3, [r7, #24]
 80080bc:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	895b      	ldrh	r3, [r3, #10]
 80080c2:	8b7a      	ldrh	r2, [r7, #26]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d902      	bls.n	80080ce <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	895b      	ldrh	r3, [r3, #10]
 80080cc:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	6858      	ldr	r0, [r3, #4]
 80080d2:	8afb      	ldrh	r3, [r7, #22]
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	4413      	add	r3, r2
 80080d8:	8b7a      	ldrh	r2, [r7, #26]
 80080da:	4619      	mov	r1, r3
 80080dc:	f009 fbec 	bl	80118b8 <memcpy>
    total_copy_len -= buf_copy_len;
 80080e0:	8b3a      	ldrh	r2, [r7, #24]
 80080e2:	8b7b      	ldrh	r3, [r7, #26]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 80080e8:	8afa      	ldrh	r2, [r7, #22]
 80080ea:	8b7b      	ldrh	r3, [r7, #26]
 80080ec:	4413      	add	r3, r2
 80080ee:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	61fb      	str	r3, [r7, #28]
 80080f6:	8b3b      	ldrh	r3, [r7, #24]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1d4      	bne.n	80080a6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80080fc:	8b3b      	ldrh	r3, [r7, #24]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d103      	bne.n	800810a <pbuf_take+0xee>
 8008102:	8afa      	ldrh	r2, [r7, #22]
 8008104:	88fb      	ldrh	r3, [r7, #6]
 8008106:	429a      	cmp	r2, r3
 8008108:	d006      	beq.n	8008118 <pbuf_take+0xfc>
 800810a:	4b06      	ldr	r3, [pc, #24]	; (8008124 <pbuf_take+0x108>)
 800810c:	f240 4299 	movw	r2, #1177	; 0x499
 8008110:	490a      	ldr	r1, [pc, #40]	; (800813c <pbuf_take+0x120>)
 8008112:	4806      	ldr	r0, [pc, #24]	; (800812c <pbuf_take+0x110>)
 8008114:	f00a fa54 	bl	80125c0 <iprintf>
  return ERR_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3720      	adds	r7, #32
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	0801662c 	.word	0x0801662c
 8008128:	08016aa0 	.word	0x08016aa0
 800812c:	08016678 	.word	0x08016678
 8008130:	08016ab8 	.word	0x08016ab8
 8008134:	08016ad4 	.word	0x08016ad4
 8008138:	08016af4 	.word	0x08016af4
 800813c:	08016b0c 	.word	0x08016b0c

08008140 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8008140:	b480      	push	{r7}
 8008142:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8008144:	bf00      	nop
 8008146:	46bd      	mov	sp, r7
 8008148:	bc80      	pop	{r7}
 800814a:	4770      	bx	lr

0800814c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800814c:	b480      	push	{r7}
 800814e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8008150:	bf00      	nop
 8008152:	46bd      	mov	sp, r7
 8008154:	bc80      	pop	{r7}
 8008156:	4770      	bx	lr

08008158 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800815c:	f000 fdfa 	bl	8008d54 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008160:	4b07      	ldr	r3, [pc, #28]	; (8008180 <tcp_tmr+0x28>)
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	3301      	adds	r3, #1
 8008166:	b2da      	uxtb	r2, r3
 8008168:	4b05      	ldr	r3, [pc, #20]	; (8008180 <tcp_tmr+0x28>)
 800816a:	701a      	strb	r2, [r3, #0]
 800816c:	4b04      	ldr	r3, [pc, #16]	; (8008180 <tcp_tmr+0x28>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008178:	f000 fb2a 	bl	80087d0 <tcp_slowtmr>
  }
}
 800817c:	bf00      	nop
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20006f71 	.word	0x20006f71

08008184 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	e00a      	b.n	80081aa <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	429a      	cmp	r2, r3
 800819c:	d102      	bne.n	80081a4 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1f1      	bne.n	8008194 <tcp_remove_listener+0x10>
      }
   }
}
 80081b0:	bf00      	nop
 80081b2:	bf00      	nop
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bc80      	pop	{r7}
 80081ba:	4770      	bx	lr

080081bc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d105      	bne.n	80081d6 <tcp_listen_closed+0x1a>
 80081ca:	4b13      	ldr	r3, [pc, #76]	; (8008218 <tcp_listen_closed+0x5c>)
 80081cc:	22c0      	movs	r2, #192	; 0xc0
 80081ce:	4913      	ldr	r1, [pc, #76]	; (800821c <tcp_listen_closed+0x60>)
 80081d0:	4813      	ldr	r0, [pc, #76]	; (8008220 <tcp_listen_closed+0x64>)
 80081d2:	f00a f9f5 	bl	80125c0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	7d1b      	ldrb	r3, [r3, #20]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d005      	beq.n	80081ea <tcp_listen_closed+0x2e>
 80081de:	4b0e      	ldr	r3, [pc, #56]	; (8008218 <tcp_listen_closed+0x5c>)
 80081e0:	22c1      	movs	r2, #193	; 0xc1
 80081e2:	4910      	ldr	r1, [pc, #64]	; (8008224 <tcp_listen_closed+0x68>)
 80081e4:	480e      	ldr	r0, [pc, #56]	; (8008220 <tcp_listen_closed+0x64>)
 80081e6:	f00a f9eb 	bl	80125c0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80081ea:	2301      	movs	r3, #1
 80081ec:	60fb      	str	r3, [r7, #12]
 80081ee:	e00b      	b.n	8008208 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80081f0:	4a0d      	ldr	r2, [pc, #52]	; (8008228 <tcp_listen_closed+0x6c>)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff ffc1 	bl	8008184 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3301      	adds	r3, #1
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2b03      	cmp	r3, #3
 800820c:	d9f0      	bls.n	80081f0 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800820e:	bf00      	nop
 8008210:	bf00      	nop
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	08016bb0 	.word	0x08016bb0
 800821c:	08016be0 	.word	0x08016be0
 8008220:	08016bec 	.word	0x08016bec
 8008224:	08016c14 	.word	0x08016c14
 8008228:	08018018 	.word	0x08018018

0800822c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800822c:	b5b0      	push	{r4, r5, r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af02      	add	r7, sp, #8
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d075      	beq.n	800832a <tcp_close_shutdown+0xfe>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	7d1b      	ldrb	r3, [r3, #20]
 8008242:	2b04      	cmp	r3, #4
 8008244:	d003      	beq.n	800824e <tcp_close_shutdown+0x22>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	7d1b      	ldrb	r3, [r3, #20]
 800824a:	2b07      	cmp	r3, #7
 800824c:	d16d      	bne.n	800832a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008252:	2b00      	cmp	r3, #0
 8008254:	d104      	bne.n	8008260 <tcp_close_shutdown+0x34>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800825a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800825e:	d064      	beq.n	800832a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	7e9b      	ldrb	r3, [r3, #26]
 8008264:	f003 0310 	and.w	r3, r3, #16
 8008268:	2b00      	cmp	r3, #0
 800826a:	d106      	bne.n	800827a <tcp_close_shutdown+0x4e>
 800826c:	4b5b      	ldr	r3, [pc, #364]	; (80083dc <tcp_close_shutdown+0x1b0>)
 800826e:	f240 120f 	movw	r2, #271	; 0x10f
 8008272:	495b      	ldr	r1, [pc, #364]	; (80083e0 <tcp_close_shutdown+0x1b4>)
 8008274:	485b      	ldr	r0, [pc, #364]	; (80083e4 <tcp_close_shutdown+0x1b8>)
 8008276:	f00a f9a3 	bl	80125c0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008282:	687c      	ldr	r4, [r7, #4]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	1d1d      	adds	r5, r3, #4
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	8adb      	ldrh	r3, [r3, #22]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	8b12      	ldrh	r2, [r2, #24]
 8008290:	9201      	str	r2, [sp, #4]
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	462b      	mov	r3, r5
 8008296:	4622      	mov	r2, r4
 8008298:	f004 f918 	bl	800c4cc <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fff9 	bl	8009294 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80082a2:	4b51      	ldr	r3, [pc, #324]	; (80083e8 <tcp_close_shutdown+0x1bc>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d105      	bne.n	80082b8 <tcp_close_shutdown+0x8c>
 80082ac:	4b4e      	ldr	r3, [pc, #312]	; (80083e8 <tcp_close_shutdown+0x1bc>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	4a4d      	ldr	r2, [pc, #308]	; (80083e8 <tcp_close_shutdown+0x1bc>)
 80082b4:	6013      	str	r3, [r2, #0]
 80082b6:	e013      	b.n	80082e0 <tcp_close_shutdown+0xb4>
 80082b8:	4b4b      	ldr	r3, [pc, #300]	; (80083e8 <tcp_close_shutdown+0x1bc>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	60fb      	str	r3, [r7, #12]
 80082be:	e00c      	b.n	80082da <tcp_close_shutdown+0xae>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d104      	bne.n	80082d4 <tcp_close_shutdown+0xa8>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	60da      	str	r2, [r3, #12]
 80082d2:	e005      	b.n	80082e0 <tcp_close_shutdown+0xb4>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1ef      	bne.n	80082c0 <tcp_close_shutdown+0x94>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	60da      	str	r2, [r3, #12]
 80082e6:	4b41      	ldr	r3, [pc, #260]	; (80083ec <tcp_close_shutdown+0x1c0>)
 80082e8:	2201      	movs	r2, #1
 80082ea:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	7d1b      	ldrb	r3, [r3, #20]
 80082f0:	2b04      	cmp	r3, #4
 80082f2:	d10c      	bne.n	800830e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	220a      	movs	r2, #10
 80082f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80082fa:	4b3d      	ldr	r3, [pc, #244]	; (80083f0 <tcp_close_shutdown+0x1c4>)
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	60da      	str	r2, [r3, #12]
 8008302:	4a3b      	ldr	r2, [pc, #236]	; (80083f0 <tcp_close_shutdown+0x1c4>)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	f004 fb46 	bl	800c998 <tcp_timer_needed>
 800830c:	e00b      	b.n	8008326 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800830e:	4b39      	ldr	r3, [pc, #228]	; (80083f4 <tcp_close_shutdown+0x1c8>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	429a      	cmp	r2, r3
 8008316:	d102      	bne.n	800831e <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8008318:	f003 fb7c 	bl	800ba14 <tcp_trigger_input_pcb_close>
 800831c:	e003      	b.n	8008326 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	2001      	movs	r0, #1
 8008322:	f7fe fec5 	bl	80070b0 <memp_free>
        }
      }
      return ERR_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	e053      	b.n	80083d2 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	7d1b      	ldrb	r3, [r3, #20]
 800832e:	2b02      	cmp	r3, #2
 8008330:	d03d      	beq.n	80083ae <tcp_close_shutdown+0x182>
 8008332:	2b02      	cmp	r3, #2
 8008334:	dc47      	bgt.n	80083c6 <tcp_close_shutdown+0x19a>
 8008336:	2b00      	cmp	r3, #0
 8008338:	d002      	beq.n	8008340 <tcp_close_shutdown+0x114>
 800833a:	2b01      	cmp	r3, #1
 800833c:	d02b      	beq.n	8008396 <tcp_close_shutdown+0x16a>
 800833e:	e042      	b.n	80083c6 <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	8adb      	ldrh	r3, [r3, #22]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d021      	beq.n	800838c <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008348:	4b2b      	ldr	r3, [pc, #172]	; (80083f8 <tcp_close_shutdown+0x1cc>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	429a      	cmp	r2, r3
 8008350:	d105      	bne.n	800835e <tcp_close_shutdown+0x132>
 8008352:	4b29      	ldr	r3, [pc, #164]	; (80083f8 <tcp_close_shutdown+0x1cc>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	4a27      	ldr	r2, [pc, #156]	; (80083f8 <tcp_close_shutdown+0x1cc>)
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	e013      	b.n	8008386 <tcp_close_shutdown+0x15a>
 800835e:	4b26      	ldr	r3, [pc, #152]	; (80083f8 <tcp_close_shutdown+0x1cc>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	60bb      	str	r3, [r7, #8]
 8008364:	e00c      	b.n	8008380 <tcp_close_shutdown+0x154>
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	429a      	cmp	r2, r3
 800836e:	d104      	bne.n	800837a <tcp_close_shutdown+0x14e>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68da      	ldr	r2, [r3, #12]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	60da      	str	r2, [r3, #12]
 8008378:	e005      	b.n	8008386 <tcp_close_shutdown+0x15a>
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	60bb      	str	r3, [r7, #8]
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1ef      	bne.n	8008366 <tcp_close_shutdown+0x13a>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800838c:	6879      	ldr	r1, [r7, #4]
 800838e:	2001      	movs	r0, #1
 8008390:	f7fe fe8e 	bl	80070b0 <memp_free>
    break;
 8008394:	e01c      	b.n	80083d0 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff ff10 	bl	80081bc <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	4817      	ldr	r0, [pc, #92]	; (80083fc <tcp_close_shutdown+0x1d0>)
 80083a0:	f000 ffba 	bl	8009318 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80083a4:	6879      	ldr	r1, [r7, #4]
 80083a6:	2002      	movs	r0, #2
 80083a8:	f7fe fe82 	bl	80070b0 <memp_free>
    break;
 80083ac:	e010      	b.n	80083d0 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	480d      	ldr	r0, [pc, #52]	; (80083e8 <tcp_close_shutdown+0x1bc>)
 80083b2:	f000 ffb1 	bl	8009318 <tcp_pcb_remove>
 80083b6:	4b0d      	ldr	r3, [pc, #52]	; (80083ec <tcp_close_shutdown+0x1c0>)
 80083b8:	2201      	movs	r2, #1
 80083ba:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80083bc:	6879      	ldr	r1, [r7, #4]
 80083be:	2001      	movs	r0, #1
 80083c0:	f7fe fe76 	bl	80070b0 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 80083c4:	e004      	b.n	80083d0 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f81a 	bl	8008400 <tcp_close_shutdown_fin>
 80083cc:	4603      	mov	r3, r0
 80083ce:	e000      	b.n	80083d2 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bdb0      	pop	{r4, r5, r7, pc}
 80083da:	bf00      	nop
 80083dc:	08016bb0 	.word	0x08016bb0
 80083e0:	08016c2c 	.word	0x08016c2c
 80083e4:	08016bec 	.word	0x08016bec
 80083e8:	20006f68 	.word	0x20006f68
 80083ec:	20006f70 	.word	0x20006f70
 80083f0:	20006f6c 	.word	0x20006f6c
 80083f4:	20006fa8 	.word	0x20006fa8
 80083f8:	20006f60 	.word	0x20006f60
 80083fc:	20006f64 	.word	0x20006f64

08008400 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d106      	bne.n	800841c <tcp_close_shutdown_fin+0x1c>
 800840e:	4b2e      	ldr	r3, [pc, #184]	; (80084c8 <tcp_close_shutdown_fin+0xc8>)
 8008410:	f240 124d 	movw	r2, #333	; 0x14d
 8008414:	492d      	ldr	r1, [pc, #180]	; (80084cc <tcp_close_shutdown_fin+0xcc>)
 8008416:	482e      	ldr	r0, [pc, #184]	; (80084d0 <tcp_close_shutdown_fin+0xd0>)
 8008418:	f00a f8d2 	bl	80125c0 <iprintf>

  switch (pcb->state) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	7d1b      	ldrb	r3, [r3, #20]
 8008420:	2b07      	cmp	r3, #7
 8008422:	d020      	beq.n	8008466 <tcp_close_shutdown_fin+0x66>
 8008424:	2b07      	cmp	r3, #7
 8008426:	dc2b      	bgt.n	8008480 <tcp_close_shutdown_fin+0x80>
 8008428:	2b03      	cmp	r3, #3
 800842a:	d002      	beq.n	8008432 <tcp_close_shutdown_fin+0x32>
 800842c:	2b04      	cmp	r3, #4
 800842e:	d00d      	beq.n	800844c <tcp_close_shutdown_fin+0x4c>
 8008430:	e026      	b.n	8008480 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f003 fb78 	bl	800bb28 <tcp_send_fin>
 8008438:	4603      	mov	r3, r0
 800843a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800843c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d11f      	bne.n	8008484 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2205      	movs	r2, #5
 8008448:	751a      	strb	r2, [r3, #20]
    }
    break;
 800844a:	e01b      	b.n	8008484 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f003 fb6b 	bl	800bb28 <tcp_send_fin>
 8008452:	4603      	mov	r3, r0
 8008454:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d114      	bne.n	8008488 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2205      	movs	r2, #5
 8008462:	751a      	strb	r2, [r3, #20]
    }
    break;
 8008464:	e010      	b.n	8008488 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f003 fb5e 	bl	800bb28 <tcp_send_fin>
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d109      	bne.n	800848c <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2209      	movs	r2, #9
 800847c:	751a      	strb	r2, [r3, #20]
    }
    break;
 800847e:	e005      	b.n	800848c <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	e01c      	b.n	80084be <tcp_close_shutdown_fin+0xbe>
    break;
 8008484:	bf00      	nop
 8008486:	e002      	b.n	800848e <tcp_close_shutdown_fin+0x8e>
    break;
 8008488:	bf00      	nop
 800848a:	e000      	b.n	800848e <tcp_close_shutdown_fin+0x8e>
    break;
 800848c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800848e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d103      	bne.n	800849e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f003 fd8a 	bl	800bfb0 <tcp_output>
 800849c:	e00d      	b.n	80084ba <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800849e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084a6:	d108      	bne.n	80084ba <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	7e9b      	ldrb	r3, [r3, #26]
 80084ac:	f043 0308 	orr.w	r3, r3, #8
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	e001      	b.n	80084be <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80084ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	08016bb0 	.word	0x08016bb0
 80084cc:	08016be0 	.word	0x08016be0
 80084d0:	08016bec 	.word	0x08016bec

080084d4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	7d1b      	ldrb	r3, [r3, #20]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d006      	beq.n	80084f2 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	7e9b      	ldrb	r3, [r3, #26]
 80084e8:	f043 0310 	orr.w	r3, r3, #16
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80084f2:	2101      	movs	r1, #1
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f7ff fe99 	bl	800822c <tcp_close_shutdown>
 80084fa:	4603      	mov	r3, r0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b08c      	sub	sp, #48	; 0x30
 8008508:	af02      	add	r7, sp, #8
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	7d1b      	ldrb	r3, [r3, #20]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d106      	bne.n	8008524 <tcp_abandon+0x20>
 8008516:	4b4d      	ldr	r3, [pc, #308]	; (800864c <tcp_abandon+0x148>)
 8008518:	f240 12df 	movw	r2, #479	; 0x1df
 800851c:	494c      	ldr	r1, [pc, #304]	; (8008650 <tcp_abandon+0x14c>)
 800851e:	484d      	ldr	r0, [pc, #308]	; (8008654 <tcp_abandon+0x150>)
 8008520:	f00a f84e 	bl	80125c0 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	7d1b      	ldrb	r3, [r3, #20]
 8008528:	2b0a      	cmp	r3, #10
 800852a:	d108      	bne.n	800853e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800852c:	6879      	ldr	r1, [r7, #4]
 800852e:	484a      	ldr	r0, [pc, #296]	; (8008658 <tcp_abandon+0x154>)
 8008530:	f000 fef2 	bl	8009318 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8008534:	6879      	ldr	r1, [r7, #4]
 8008536:	2001      	movs	r0, #1
 8008538:	f7fe fdba 	bl	80070b0 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800853c:	e081      	b.n	8008642 <tcp_abandon+0x13e>
    int send_rst = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800854a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008550:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008558:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	7d1b      	ldrb	r3, [r3, #20]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d126      	bne.n	80085b6 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	8adb      	ldrh	r3, [r3, #22]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d02e      	beq.n	80085ce <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008570:	4b3a      	ldr	r3, [pc, #232]	; (800865c <tcp_abandon+0x158>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	429a      	cmp	r2, r3
 8008578:	d105      	bne.n	8008586 <tcp_abandon+0x82>
 800857a:	4b38      	ldr	r3, [pc, #224]	; (800865c <tcp_abandon+0x158>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	4a36      	ldr	r2, [pc, #216]	; (800865c <tcp_abandon+0x158>)
 8008582:	6013      	str	r3, [r2, #0]
 8008584:	e013      	b.n	80085ae <tcp_abandon+0xaa>
 8008586:	4b35      	ldr	r3, [pc, #212]	; (800865c <tcp_abandon+0x158>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	61fb      	str	r3, [r7, #28]
 800858c:	e00c      	b.n	80085a8 <tcp_abandon+0xa4>
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	429a      	cmp	r2, r3
 8008596:	d104      	bne.n	80085a2 <tcp_abandon+0x9e>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68da      	ldr	r2, [r3, #12]
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	60da      	str	r2, [r3, #12]
 80085a0:	e005      	b.n	80085ae <tcp_abandon+0xaa>
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	61fb      	str	r3, [r7, #28]
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1ef      	bne.n	800858e <tcp_abandon+0x8a>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	60da      	str	r2, [r3, #12]
 80085b4:	e00b      	b.n	80085ce <tcp_abandon+0xca>
      send_rst = reset;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	8adb      	ldrh	r3, [r3, #22]
 80085be:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80085c0:	6879      	ldr	r1, [r7, #4]
 80085c2:	4827      	ldr	r0, [pc, #156]	; (8008660 <tcp_abandon+0x15c>)
 80085c4:	f000 fea8 	bl	8009318 <tcp_pcb_remove>
 80085c8:	4b26      	ldr	r3, [pc, #152]	; (8008664 <tcp_abandon+0x160>)
 80085ca:	2201      	movs	r2, #1
 80085cc:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d004      	beq.n	80085e0 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 fc87 	bl	8008eee <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d004      	beq.n	80085f2 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 fc7e 	bl	8008eee <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d004      	beq.n	8008604 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 fc75 	bl	8008eee <tcp_segs_free>
    if (send_rst) {
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00c      	beq.n	8008624 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	1d19      	adds	r1, r3, #4
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	8b1b      	ldrh	r3, [r3, #24]
 8008614:	9301      	str	r3, [sp, #4]
 8008616:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	460b      	mov	r3, r1
 800861c:	6979      	ldr	r1, [r7, #20]
 800861e:	69b8      	ldr	r0, [r7, #24]
 8008620:	f003 ff54 	bl	800c4cc <tcp_rst>
    last_state = pcb->state;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	7d1b      	ldrb	r3, [r3, #20]
 8008628:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800862a:	6879      	ldr	r1, [r7, #4]
 800862c:	2001      	movs	r0, #1
 800862e:	f7fe fd3f 	bl	80070b0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d004      	beq.n	8008642 <tcp_abandon+0x13e>
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	f06f 010c 	mvn.w	r1, #12
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	4798      	blx	r3
}
 8008642:	bf00      	nop
 8008644:	3728      	adds	r7, #40	; 0x28
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	08016bb0 	.word	0x08016bb0
 8008650:	08016c48 	.word	0x08016c48
 8008654:	08016bec 	.word	0x08016bec
 8008658:	20006f6c 	.word	0x20006f6c
 800865c:	20006f60 	.word	0x20006f60
 8008660:	20006f68 	.word	0x20006f68
 8008664:	20006f70 	.word	0x20006f70

08008668 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008670:	2101      	movs	r1, #1
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7ff ff46 	bl	8008504 <tcp_abandon>
}
 8008678:	bf00      	nop
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008690:	4413      	add	r3, r2
 8008692:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800869c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80086a0:	bf28      	it	cs
 80086a2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80086a6:	b292      	uxth	r2, r2
 80086a8:	4413      	add	r3, r2
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	db08      	blt.n	80086c4 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	e020      	b.n	8008706 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	dd03      	ble.n	80086da <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80086d8:	e014      	b.n	8008704 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ec:	d306      	bcc.n	80086fc <tcp_update_rcv_ann_wnd+0x7c>
 80086ee:	4b08      	ldr	r3, [pc, #32]	; (8008710 <tcp_update_rcv_ann_wnd+0x90>)
 80086f0:	f44f 7242 	mov.w	r2, #776	; 0x308
 80086f4:	4907      	ldr	r1, [pc, #28]	; (8008714 <tcp_update_rcv_ann_wnd+0x94>)
 80086f6:	4808      	ldr	r0, [pc, #32]	; (8008718 <tcp_update_rcv_ann_wnd+0x98>)
 80086f8:	f009 ff62 	bl	80125c0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	b29a      	uxth	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008704:	2300      	movs	r3, #0
  }
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	08016bb0 	.word	0x08016bb0
 8008714:	08016cc8 	.word	0x08016cc8
 8008718:	08016bec 	.word	0x08016bec

0800871c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	460b      	mov	r3, r1
 8008726:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	7d1b      	ldrb	r3, [r3, #20]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d106      	bne.n	800873e <tcp_recved+0x22>
 8008730:	4b23      	ldr	r3, [pc, #140]	; (80087c0 <tcp_recved+0xa4>)
 8008732:	f240 321f 	movw	r2, #799	; 0x31f
 8008736:	4923      	ldr	r1, [pc, #140]	; (80087c4 <tcp_recved+0xa8>)
 8008738:	4823      	ldr	r0, [pc, #140]	; (80087c8 <tcp_recved+0xac>)
 800873a:	f009 ff41 	bl	80125c0 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008742:	887b      	ldrh	r3, [r7, #2]
 8008744:	4413      	add	r3, r2
 8008746:	b29a      	uxth	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008750:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008754:	d904      	bls.n	8008760 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800875c:	851a      	strh	r2, [r3, #40]	; 0x28
 800875e:	e017      	b.n	8008790 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008764:	2b00      	cmp	r3, #0
 8008766:	d113      	bne.n	8008790 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	7d1b      	ldrb	r3, [r3, #20]
 800876c:	2b07      	cmp	r3, #7
 800876e:	d003      	beq.n	8008778 <tcp_recved+0x5c>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	7d1b      	ldrb	r3, [r3, #20]
 8008774:	2b09      	cmp	r3, #9
 8008776:	d104      	bne.n	8008782 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800877e:	851a      	strh	r2, [r3, #40]	; 0x28
 8008780:	e006      	b.n	8008790 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8008782:	4b0f      	ldr	r3, [pc, #60]	; (80087c0 <tcp_recved+0xa4>)
 8008784:	f240 322d 	movw	r2, #813	; 0x32d
 8008788:	4910      	ldr	r1, [pc, #64]	; (80087cc <tcp_recved+0xb0>)
 800878a:	480f      	ldr	r0, [pc, #60]	; (80087c8 <tcp_recved+0xac>)
 800878c:	f009 ff18 	bl	80125c0 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7ff ff75 	bl	8008680 <tcp_update_rcv_ann_wnd>
 8008796:	4603      	mov	r3, r0
 8008798:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80087a0:	db09      	blt.n	80087b6 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	7e9b      	ldrb	r3, [r3, #26]
 80087a6:	f043 0302 	orr.w	r3, r3, #2
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f003 fbfd 	bl	800bfb0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80087b6:	bf00      	nop
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	08016bb0 	.word	0x08016bb0
 80087c4:	08016ce4 	.word	0x08016ce4
 80087c8:	08016bec 	.word	0x08016bec
 80087cc:	08016d0c 	.word	0x08016d0c

080087d0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80087d0:	b5b0      	push	{r4, r5, r7, lr}
 80087d2:	b08c      	sub	sp, #48	; 0x30
 80087d4:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 80087da:	4b97      	ldr	r3, [pc, #604]	; (8008a38 <tcp_slowtmr+0x268>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3301      	adds	r3, #1
 80087e0:	4a95      	ldr	r2, [pc, #596]	; (8008a38 <tcp_slowtmr+0x268>)
 80087e2:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80087e4:	4b95      	ldr	r3, [pc, #596]	; (8008a3c <tcp_slowtmr+0x26c>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	3301      	adds	r3, #1
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	4b93      	ldr	r3, [pc, #588]	; (8008a3c <tcp_slowtmr+0x26c>)
 80087ee:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80087f0:	2300      	movs	r3, #0
 80087f2:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 80087f4:	4b92      	ldr	r3, [pc, #584]	; (8008a40 <tcp_slowtmr+0x270>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80087fa:	e227      	b.n	8008c4c <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	7d1b      	ldrb	r3, [r3, #20]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d106      	bne.n	8008812 <tcp_slowtmr+0x42>
 8008804:	4b8f      	ldr	r3, [pc, #572]	; (8008a44 <tcp_slowtmr+0x274>)
 8008806:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800880a:	498f      	ldr	r1, [pc, #572]	; (8008a48 <tcp_slowtmr+0x278>)
 800880c:	488f      	ldr	r0, [pc, #572]	; (8008a4c <tcp_slowtmr+0x27c>)
 800880e:	f009 fed7 	bl	80125c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	7d1b      	ldrb	r3, [r3, #20]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d106      	bne.n	8008828 <tcp_slowtmr+0x58>
 800881a:	4b8a      	ldr	r3, [pc, #552]	; (8008a44 <tcp_slowtmr+0x274>)
 800881c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8008820:	498b      	ldr	r1, [pc, #556]	; (8008a50 <tcp_slowtmr+0x280>)
 8008822:	488a      	ldr	r0, [pc, #552]	; (8008a4c <tcp_slowtmr+0x27c>)
 8008824:	f009 fecc 	bl	80125c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882a:	7d1b      	ldrb	r3, [r3, #20]
 800882c:	2b0a      	cmp	r3, #10
 800882e:	d106      	bne.n	800883e <tcp_slowtmr+0x6e>
 8008830:	4b84      	ldr	r3, [pc, #528]	; (8008a44 <tcp_slowtmr+0x274>)
 8008832:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8008836:	4987      	ldr	r1, [pc, #540]	; (8008a54 <tcp_slowtmr+0x284>)
 8008838:	4884      	ldr	r0, [pc, #528]	; (8008a4c <tcp_slowtmr+0x27c>)
 800883a:	f009 fec1 	bl	80125c0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	7f5a      	ldrb	r2, [r3, #29]
 8008842:	4b7e      	ldr	r3, [pc, #504]	; (8008a3c <tcp_slowtmr+0x26c>)
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	429a      	cmp	r2, r3
 8008848:	d103      	bne.n	8008852 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8008850:	e1fc      	b.n	8008c4c <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008852:	4b7a      	ldr	r3, [pc, #488]	; (8008a3c <tcp_slowtmr+0x26c>)
 8008854:	781a      	ldrb	r2, [r3, #0]
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800885a:	2300      	movs	r3, #0
 800885c:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800885e:	2300      	movs	r3, #0
 8008860:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	7d1b      	ldrb	r3, [r3, #20]
 8008866:	2b02      	cmp	r3, #2
 8008868:	d108      	bne.n	800887c <tcp_slowtmr+0xac>
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008870:	2b05      	cmp	r3, #5
 8008872:	d903      	bls.n	800887c <tcp_slowtmr+0xac>
      ++pcb_remove;
 8008874:	7ffb      	ldrb	r3, [r7, #31]
 8008876:	3301      	adds	r3, #1
 8008878:	77fb      	strb	r3, [r7, #31]
 800887a:	e0a2      	b.n	80089c2 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008882:	2b0b      	cmp	r3, #11
 8008884:	d903      	bls.n	800888e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8008886:	7ffb      	ldrb	r3, [r7, #31]
 8008888:	3301      	adds	r3, #1
 800888a:	77fb      	strb	r3, [r7, #31]
 800888c:	e099      	b.n	80089c2 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008894:	2b00      	cmp	r3, #0
 8008896:	d032      	beq.n	80088fe <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800889e:	3b01      	subs	r3, #1
 80088a0:	4a6d      	ldr	r2, [pc, #436]	; (8008a58 <tcp_slowtmr+0x288>)
 80088a2:	5cd3      	ldrb	r3, [r2, r3]
 80088a4:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80088ac:	7cfa      	ldrb	r2, [r7, #19]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d907      	bls.n	80088c2 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80088b8:	3301      	adds	r3, #1
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80088c8:	7cfa      	ldrb	r2, [r7, #19]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d879      	bhi.n	80089c2 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80088ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088d0:	f003 ff98 	bl	800c804 <tcp_zero_window_probe>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d173      	bne.n	80089c2 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80088e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80088e8:	2b06      	cmp	r3, #6
 80088ea:	d86a      	bhi.n	80089c2 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80088f2:	3301      	adds	r3, #1
 80088f4:	b2da      	uxtb	r2, r3
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80088fc:	e061      	b.n	80089c2 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 80088fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008900:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008904:	2b00      	cmp	r3, #0
 8008906:	db08      	blt.n	800891a <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800890e:	b29b      	uxth	r3, r3
 8008910:	3301      	adds	r3, #1
 8008912:	b29b      	uxth	r3, r3
 8008914:	b21a      	sxth	r2, r3
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800891a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800891e:	2b00      	cmp	r3, #0
 8008920:	d04f      	beq.n	80089c2 <tcp_slowtmr+0x1f2>
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800892e:	429a      	cmp	r2, r3
 8008930:	db47      	blt.n	80089c2 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8008932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008934:	7d1b      	ldrb	r3, [r3, #20]
 8008936:	2b02      	cmp	r3, #2
 8008938:	d018      	beq.n	800896c <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008940:	2b0c      	cmp	r3, #12
 8008942:	bf28      	it	cs
 8008944:	230c      	movcs	r3, #12
 8008946:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800894e:	10db      	asrs	r3, r3, #3
 8008950:	b21b      	sxth	r3, r3
 8008952:	461a      	mov	r2, r3
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800895a:	4413      	add	r3, r2
 800895c:	7dfa      	ldrb	r2, [r7, #23]
 800895e:	493f      	ldr	r1, [pc, #252]	; (8008a5c <tcp_slowtmr+0x28c>)
 8008960:	5c8a      	ldrb	r2, [r1, r2]
 8008962:	4093      	lsls	r3, r2
 8008964:	b21a      	sxth	r2, r3
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896e:	2200      	movs	r2, #0
 8008970:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800897e:	4293      	cmp	r3, r2
 8008980:	bf28      	it	cs
 8008982:	4613      	movcs	r3, r2
 8008984:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8008986:	8abb      	ldrh	r3, [r7, #20]
 8008988:	085b      	lsrs	r3, r3, #1
 800898a:	b29a      	uxth	r2, r3
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008994:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800899c:	005b      	lsls	r3, r3, #1
 800899e:	b29b      	uxth	r3, r3
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d206      	bcs.n	80089b2 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 80089b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 80089bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089be:	f003 fe05 	bl	800c5cc <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	7d1b      	ldrb	r3, [r3, #20]
 80089c6:	2b06      	cmp	r3, #6
 80089c8:	d10f      	bne.n	80089ea <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	7e9b      	ldrb	r3, [r3, #26]
 80089ce:	f003 0310 	and.w	r3, r3, #16
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d009      	beq.n	80089ea <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80089d6:	4b18      	ldr	r3, [pc, #96]	; (8008a38 <tcp_slowtmr+0x268>)
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	2b28      	cmp	r3, #40	; 0x28
 80089e2:	d902      	bls.n	80089ea <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80089e4:	7ffb      	ldrb	r3, [r7, #31]
 80089e6:	3301      	adds	r3, #1
 80089e8:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	7a1b      	ldrb	r3, [r3, #8]
 80089ee:	f003 0308 	and.w	r3, r3, #8
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d05d      	beq.n	8008ab2 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80089fa:	2b04      	cmp	r3, #4
 80089fc:	d003      	beq.n	8008a06 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 80089fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a00:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8008a02:	2b07      	cmp	r3, #7
 8008a04:	d155      	bne.n	8008ab2 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008a06:	4b0c      	ldr	r3, [pc, #48]	; (8008a38 <tcp_slowtmr+0x268>)
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a16:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8008a1a:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8008a1e:	4910      	ldr	r1, [pc, #64]	; (8008a60 <tcp_slowtmr+0x290>)
 8008a20:	fba1 1303 	umull	r1, r3, r1, r3
 8008a24:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d91c      	bls.n	8008a64 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008a2a:	7ffb      	ldrb	r3, [r7, #31]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8008a30:	7fbb      	ldrb	r3, [r7, #30]
 8008a32:	3301      	adds	r3, #1
 8008a34:	77bb      	strb	r3, [r7, #30]
 8008a36:	e03c      	b.n	8008ab2 <tcp_slowtmr+0x2e2>
 8008a38:	20006f5c 	.word	0x20006f5c
 8008a3c:	20006f72 	.word	0x20006f72
 8008a40:	20006f68 	.word	0x20006f68
 8008a44:	08016bb0 	.word	0x08016bb0
 8008a48:	08016d60 	.word	0x08016d60
 8008a4c:	08016bec 	.word	0x08016bec
 8008a50:	08016d8c 	.word	0x08016d8c
 8008a54:	08016db8 	.word	0x08016db8
 8008a58:	08018010 	.word	0x08018010
 8008a5c:	08018000 	.word	0x08018000
 8008a60:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008a64:	4b97      	ldr	r3, [pc, #604]	; (8008cc4 <tcp_slowtmr+0x4f4>)
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	4b92      	ldr	r3, [pc, #584]	; (8008cc8 <tcp_slowtmr+0x4f8>)
 8008a7e:	fb00 f303 	mul.w	r3, r0, r3
 8008a82:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8008a84:	4991      	ldr	r1, [pc, #580]	; (8008ccc <tcp_slowtmr+0x4fc>)
 8008a86:	fba1 1303 	umull	r1, r3, r1, r3
 8008a8a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d910      	bls.n	8008ab2 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8008a90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a92:	f003 fe6f 	bl	800c774 <tcp_keepalive>
 8008a96:	4603      	mov	r3, r0
 8008a98:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8008a9a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d107      	bne.n	8008ab2 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d016      	beq.n	8008ae8 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8008aba:	4b82      	ldr	r3, [pc, #520]	; (8008cc4 <tcp_slowtmr+0x4f4>)
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	1ad2      	subs	r2, r2, r3
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008aca:	4619      	mov	r1, r3
 8008acc:	460b      	mov	r3, r1
 8008ace:	005b      	lsls	r3, r3, #1
 8008ad0:	440b      	add	r3, r1
 8008ad2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d307      	bcc.n	8008ae8 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008adc:	4618      	mov	r0, r3
 8008ade:	f000 fa06 	bl	8008eee <tcp_segs_free>
      pcb->ooseq = NULL;
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	7d1b      	ldrb	r3, [r3, #20]
 8008aec:	2b03      	cmp	r3, #3
 8008aee:	d109      	bne.n	8008b04 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008af0:	4b74      	ldr	r3, [pc, #464]	; (8008cc4 <tcp_slowtmr+0x4f4>)
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	6a1b      	ldr	r3, [r3, #32]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	2b28      	cmp	r3, #40	; 0x28
 8008afc:	d902      	bls.n	8008b04 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008afe:	7ffb      	ldrb	r3, [r7, #31]
 8008b00:	3301      	adds	r3, #1
 8008b02:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b06:	7d1b      	ldrb	r3, [r3, #20]
 8008b08:	2b09      	cmp	r3, #9
 8008b0a:	d109      	bne.n	8008b20 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008b0c:	4b6d      	ldr	r3, [pc, #436]	; (8008cc4 <tcp_slowtmr+0x4f4>)
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	6a1b      	ldr	r3, [r3, #32]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	2bf0      	cmp	r3, #240	; 0xf0
 8008b18:	d902      	bls.n	8008b20 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8008b1a:	7ffb      	ldrb	r3, [r7, #31]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008b20:	7ffb      	ldrb	r3, [r7, #31]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d05d      	beq.n	8008be2 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b2c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008b2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b30:	f000 fbb0 	bl	8009294 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008b34:	6a3b      	ldr	r3, [r7, #32]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d010      	beq.n	8008b5c <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008b3a:	4b65      	ldr	r3, [pc, #404]	; (8008cd0 <tcp_slowtmr+0x500>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d106      	bne.n	8008b52 <tcp_slowtmr+0x382>
 8008b44:	4b63      	ldr	r3, [pc, #396]	; (8008cd4 <tcp_slowtmr+0x504>)
 8008b46:	f240 4289 	movw	r2, #1161	; 0x489
 8008b4a:	4963      	ldr	r1, [pc, #396]	; (8008cd8 <tcp_slowtmr+0x508>)
 8008b4c:	4863      	ldr	r0, [pc, #396]	; (8008cdc <tcp_slowtmr+0x50c>)
 8008b4e:	f009 fd37 	bl	80125c0 <iprintf>
        prev->next = pcb->next;
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	6a3b      	ldr	r3, [r7, #32]
 8008b58:	60da      	str	r2, [r3, #12]
 8008b5a:	e00f      	b.n	8008b7c <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008b5c:	4b5c      	ldr	r3, [pc, #368]	; (8008cd0 <tcp_slowtmr+0x500>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d006      	beq.n	8008b74 <tcp_slowtmr+0x3a4>
 8008b66:	4b5b      	ldr	r3, [pc, #364]	; (8008cd4 <tcp_slowtmr+0x504>)
 8008b68:	f240 428d 	movw	r2, #1165	; 0x48d
 8008b6c:	495c      	ldr	r1, [pc, #368]	; (8008ce0 <tcp_slowtmr+0x510>)
 8008b6e:	485b      	ldr	r0, [pc, #364]	; (8008cdc <tcp_slowtmr+0x50c>)
 8008b70:	f009 fd26 	bl	80125c0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	4a55      	ldr	r2, [pc, #340]	; (8008cd0 <tcp_slowtmr+0x500>)
 8008b7a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008b7c:	7fbb      	ldrb	r3, [r7, #30]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d010      	beq.n	8008ba4 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b84:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008b8a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8e:	1d1d      	adds	r5, r3, #4
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b92:	8adb      	ldrh	r3, [r3, #22]
 8008b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b96:	8b12      	ldrh	r2, [r2, #24]
 8008b98:	9201      	str	r2, [sp, #4]
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	462b      	mov	r3, r5
 8008b9e:	4622      	mov	r2, r4
 8008ba0:	f003 fc94 	bl	800c4cc <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	7d1b      	ldrb	r3, [r3, #20]
 8008bae:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	2001      	movs	r0, #1
 8008bbe:	f7fe fa77 	bl	80070b0 <memp_free>

      tcp_active_pcbs_changed = 0;
 8008bc2:	4b48      	ldr	r3, [pc, #288]	; (8008ce4 <tcp_slowtmr+0x514>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d004      	beq.n	8008bd8 <tcp_slowtmr+0x408>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f06f 010c 	mvn.w	r1, #12
 8008bd4:	68b8      	ldr	r0, [r7, #8]
 8008bd6:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008bd8:	4b42      	ldr	r3, [pc, #264]	; (8008ce4 <tcp_slowtmr+0x514>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d035      	beq.n	8008c4c <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8008be0:	e606      	b.n	80087f0 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008bec:	6a3b      	ldr	r3, [r7, #32]
 8008bee:	7edb      	ldrb	r3, [r3, #27]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	6a3b      	ldr	r3, [r7, #32]
 8008bf6:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	7eda      	ldrb	r2, [r3, #27]
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	7f1b      	ldrb	r3, [r3, #28]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d323      	bcc.n	8008c4c <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	2200      	movs	r2, #0
 8008c08:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008c0a:	4b36      	ldr	r3, [pc, #216]	; (8008ce4 <tcp_slowtmr+0x514>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008c10:	6a3b      	ldr	r3, [r7, #32]
 8008c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <tcp_slowtmr+0x460>
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c20:	6a3a      	ldr	r2, [r7, #32]
 8008c22:	6912      	ldr	r2, [r2, #16]
 8008c24:	6a39      	ldr	r1, [r7, #32]
 8008c26:	4610      	mov	r0, r2
 8008c28:	4798      	blx	r3
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	777b      	strb	r3, [r7, #29]
 8008c2e:	e001      	b.n	8008c34 <tcp_slowtmr+0x464>
 8008c30:	2300      	movs	r3, #0
 8008c32:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8008c34:	4b2b      	ldr	r3, [pc, #172]	; (8008ce4 <tcp_slowtmr+0x514>)
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d000      	beq.n	8008c3e <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8008c3c:	e5d8      	b.n	80087f0 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008c3e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d102      	bne.n	8008c4c <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8008c46:	6a38      	ldr	r0, [r7, #32]
 8008c48:	f003 f9b2 	bl	800bfb0 <tcp_output>
  while (pcb != NULL) {
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f47f add4 	bne.w	80087fc <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008c54:	2300      	movs	r3, #0
 8008c56:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8008c58:	4b23      	ldr	r3, [pc, #140]	; (8008ce8 <tcp_slowtmr+0x518>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8008c5e:	e068      	b.n	8008d32 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	7d1b      	ldrb	r3, [r3, #20]
 8008c64:	2b0a      	cmp	r3, #10
 8008c66:	d006      	beq.n	8008c76 <tcp_slowtmr+0x4a6>
 8008c68:	4b1a      	ldr	r3, [pc, #104]	; (8008cd4 <tcp_slowtmr+0x504>)
 8008c6a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8008c6e:	491f      	ldr	r1, [pc, #124]	; (8008cec <tcp_slowtmr+0x51c>)
 8008c70:	481a      	ldr	r0, [pc, #104]	; (8008cdc <tcp_slowtmr+0x50c>)
 8008c72:	f009 fca5 	bl	80125c0 <iprintf>
    pcb_remove = 0;
 8008c76:	2300      	movs	r3, #0
 8008c78:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008c7a:	4b12      	ldr	r3, [pc, #72]	; (8008cc4 <tcp_slowtmr+0x4f4>)
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	6a1b      	ldr	r3, [r3, #32]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	2bf0      	cmp	r3, #240	; 0xf0
 8008c86:	d902      	bls.n	8008c8e <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8008c88:	7ffb      	ldrb	r3, [r7, #31]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008c8e:	7ffb      	ldrb	r3, [r7, #31]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d049      	beq.n	8008d28 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c96:	f000 fafd 	bl	8009294 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d029      	beq.n	8008cf4 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008ca0:	4b11      	ldr	r3, [pc, #68]	; (8008ce8 <tcp_slowtmr+0x518>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d106      	bne.n	8008cb8 <tcp_slowtmr+0x4e8>
 8008caa:	4b0a      	ldr	r3, [pc, #40]	; (8008cd4 <tcp_slowtmr+0x504>)
 8008cac:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8008cb0:	490f      	ldr	r1, [pc, #60]	; (8008cf0 <tcp_slowtmr+0x520>)
 8008cb2:	480a      	ldr	r0, [pc, #40]	; (8008cdc <tcp_slowtmr+0x50c>)
 8008cb4:	f009 fc84 	bl	80125c0 <iprintf>
        prev->next = pcb->next;
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cba:	68da      	ldr	r2, [r3, #12]
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	60da      	str	r2, [r3, #12]
 8008cc0:	e028      	b.n	8008d14 <tcp_slowtmr+0x544>
 8008cc2:	bf00      	nop
 8008cc4:	20006f5c 	.word	0x20006f5c
 8008cc8:	000124f8 	.word	0x000124f8
 8008ccc:	10624dd3 	.word	0x10624dd3
 8008cd0:	20006f68 	.word	0x20006f68
 8008cd4:	08016bb0 	.word	0x08016bb0
 8008cd8:	08016de8 	.word	0x08016de8
 8008cdc:	08016bec 	.word	0x08016bec
 8008ce0:	08016e14 	.word	0x08016e14
 8008ce4:	20006f70 	.word	0x20006f70
 8008ce8:	20006f6c 	.word	0x20006f6c
 8008cec:	08016e40 	.word	0x08016e40
 8008cf0:	08016e70 	.word	0x08016e70
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008cf4:	4b13      	ldr	r3, [pc, #76]	; (8008d44 <tcp_slowtmr+0x574>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d006      	beq.n	8008d0c <tcp_slowtmr+0x53c>
 8008cfe:	4b12      	ldr	r3, [pc, #72]	; (8008d48 <tcp_slowtmr+0x578>)
 8008d00:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8008d04:	4911      	ldr	r1, [pc, #68]	; (8008d4c <tcp_slowtmr+0x57c>)
 8008d06:	4812      	ldr	r0, [pc, #72]	; (8008d50 <tcp_slowtmr+0x580>)
 8008d08:	f009 fc5a 	bl	80125c0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	4a0c      	ldr	r2, [pc, #48]	; (8008d44 <tcp_slowtmr+0x574>)
 8008d12:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8008d1e:	69b9      	ldr	r1, [r7, #24]
 8008d20:	2001      	movs	r0, #1
 8008d22:	f7fe f9c5 	bl	80070b0 <memp_free>
 8008d26:	e004      	b.n	8008d32 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8008d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2a:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8008d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d193      	bne.n	8008c60 <tcp_slowtmr+0x490>
    }
  }
}
 8008d38:	bf00      	nop
 8008d3a:	bf00      	nop
 8008d3c:	3728      	adds	r7, #40	; 0x28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bdb0      	pop	{r4, r5, r7, pc}
 8008d42:	bf00      	nop
 8008d44:	20006f6c 	.word	0x20006f6c
 8008d48:	08016bb0 	.word	0x08016bb0
 8008d4c:	08016e98 	.word	0x08016e98
 8008d50:	08016bec 	.word	0x08016bec

08008d54 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008d5a:	4b2d      	ldr	r3, [pc, #180]	; (8008e10 <tcp_fasttmr+0xbc>)
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	4b2b      	ldr	r3, [pc, #172]	; (8008e10 <tcp_fasttmr+0xbc>)
 8008d64:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008d66:	4b2b      	ldr	r3, [pc, #172]	; (8008e14 <tcp_fasttmr+0xc0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008d6c:	e048      	b.n	8008e00 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	7f5a      	ldrb	r2, [r3, #29]
 8008d72:	4b27      	ldr	r3, [pc, #156]	; (8008e10 <tcp_fasttmr+0xbc>)
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d03f      	beq.n	8008dfa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008d7a:	4b25      	ldr	r3, [pc, #148]	; (8008e10 <tcp_fasttmr+0xbc>)
 8008d7c:	781a      	ldrb	r2, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	7e9b      	ldrb	r3, [r3, #26]
 8008d86:	f003 0301 	and.w	r3, r3, #1
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d010      	beq.n	8008db0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	7e9b      	ldrb	r3, [r3, #26]
 8008d92:	f043 0302 	orr.w	r3, r3, #2
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f003 f907 	bl	800bfb0 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	7e9b      	ldrb	r3, [r3, #26]
 8008da6:	f023 0303 	bic.w	r3, r3, #3
 8008daa:	b2da      	uxtb	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	7e9b      	ldrb	r3, [r3, #26]
 8008db4:	f003 0308 	and.w	r3, r3, #8
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d009      	beq.n	8008dd0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	7e9b      	ldrb	r3, [r3, #26]
 8008dc0:	f023 0308 	bic.w	r3, r3, #8
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f7ff fb18 	bl	8008400 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00a      	beq.n	8008df4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008dde:	4b0e      	ldr	r3, [pc, #56]	; (8008e18 <tcp_fasttmr+0xc4>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f819 	bl	8008e1c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008dea:	4b0b      	ldr	r3, [pc, #44]	; (8008e18 <tcp_fasttmr+0xc4>)
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d000      	beq.n	8008df4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008df2:	e7b8      	b.n	8008d66 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	607b      	str	r3, [r7, #4]
 8008df8:	e002      	b.n	8008e00 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1b3      	bne.n	8008d6e <tcp_fasttmr+0x1a>
    }
  }
}
 8008e06:	bf00      	nop
 8008e08:	bf00      	nop
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	20006f72 	.word	0x20006f72
 8008e14:	20006f68 	.word	0x20006f68
 8008e18:	20006f70 	.word	0x20006f70

08008e1c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008e1c:	b590      	push	{r4, r7, lr}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e28:	7b5b      	ldrb	r3, [r3, #13]
 8008e2a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e30:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <tcp_process_refused_data+0x3e>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6918      	ldr	r0, [r3, #16]
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	6879      	ldr	r1, [r7, #4]
 8008e52:	47a0      	blx	r4
 8008e54:	4603      	mov	r3, r0
 8008e56:	73fb      	strb	r3, [r7, #15]
 8008e58:	e007      	b.n	8008e6a <tcp_process_refused_data+0x4e>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	6879      	ldr	r1, [r7, #4]
 8008e60:	2000      	movs	r0, #0
 8008e62:	f000 f88d 	bl	8008f80 <tcp_recv_null>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d12a      	bne.n	8008ec8 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
 8008e74:	f003 0320 	and.w	r3, r3, #32
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d033      	beq.n	8008ee4 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e80:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008e84:	d005      	beq.n	8008e92 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00b      	beq.n	8008eb4 <tcp_process_refused_data+0x98>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6918      	ldr	r0, [r3, #16]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	6879      	ldr	r1, [r7, #4]
 8008eac:	47a0      	blx	r4
 8008eae:	4603      	mov	r3, r0
 8008eb0:	73fb      	strb	r3, [r7, #15]
 8008eb2:	e001      	b.n	8008eb8 <tcp_process_refused_data+0x9c>
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ebc:	f113 0f0d 	cmn.w	r3, #13
 8008ec0:	d110      	bne.n	8008ee4 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8008ec2:	f06f 030c 	mvn.w	r3, #12
 8008ec6:	e00e      	b.n	8008ee6 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8008ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ecc:	f113 0f0d 	cmn.w	r3, #13
 8008ed0:	d102      	bne.n	8008ed8 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008ed2:	f06f 030c 	mvn.w	r3, #12
 8008ed6:	e006      	b.n	8008ee6 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8008ede:	f06f 0304 	mvn.w	r3, #4
 8008ee2:	e000      	b.n	8008ee6 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd90      	pop	{r4, r7, pc}

08008eee <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b084      	sub	sp, #16
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008ef6:	e007      	b.n	8008f08 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f80a 	bl	8008f18 <tcp_seg_free>
    seg = next;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1f4      	bne.n	8008ef8 <tcp_segs_free+0xa>
  }
}
 8008f0e:	bf00      	nop
 8008f10:	bf00      	nop
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00c      	beq.n	8008f40 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d004      	beq.n	8008f38 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fe fdfa 	bl	8007b2c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008f38:	6879      	ldr	r1, [r7, #4]
 8008f3a:	2003      	movs	r0, #3
 8008f3c:	f7fe f8b8 	bl	80070b0 <memp_free>
  }
}
 8008f40:	bf00      	nop
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008f50:	2003      	movs	r0, #3
 8008f52:	f7fe f85b 	bl	800700c <memp_malloc>
 8008f56:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <tcp_seg_copy+0x1a>
    return NULL;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	e00a      	b.n	8008f78 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008f62:	2210      	movs	r2, #16
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f008 fca6 	bl	80118b8 <memcpy>
  pbuf_ref(cseg->p);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe fe85 	bl	8007c80 <pbuf_ref>
  return cseg;
 8008f76:	68fb      	ldr	r3, [r7, #12]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d009      	beq.n	8008fa8 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	891b      	ldrh	r3, [r3, #8]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	68b8      	ldr	r0, [r7, #8]
 8008f9c:	f7ff fbbe 	bl	800871c <tcp_recved>
    pbuf_free(p);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7fe fdc3 	bl	8007b2c <pbuf_free>
 8008fa6:	e008      	b.n	8008fba <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8008fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d104      	bne.n	8008fba <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8008fb0:	68b8      	ldr	r0, [r7, #8]
 8008fb2:	f7ff fa8f 	bl	80084d4 <tcp_close>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	e000      	b.n	8008fbc <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	db01      	blt.n	8008fda <tcp_kill_prio+0x16>
 8008fd6:	79fb      	ldrb	r3, [r7, #7]
 8008fd8:	e000      	b.n	8008fdc <tcp_kill_prio+0x18>
 8008fda:	237f      	movs	r3, #127	; 0x7f
 8008fdc:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008fe6:	4b16      	ldr	r3, [pc, #88]	; (8009040 <tcp_kill_prio+0x7c>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	617b      	str	r3, [r7, #20]
 8008fec:	e01a      	b.n	8009024 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	7d5b      	ldrb	r3, [r3, #21]
 8008ff2:	7afa      	ldrb	r2, [r7, #11]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d312      	bcc.n	800901e <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008ff8:	4b12      	ldr	r3, [pc, #72]	; (8009044 <tcp_kill_prio+0x80>)
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	6a1b      	ldr	r3, [r3, #32]
 8009000:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	429a      	cmp	r2, r3
 8009006:	d80a      	bhi.n	800901e <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8009008:	4b0e      	ldr	r3, [pc, #56]	; (8009044 <tcp_kill_prio+0x80>)
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	6a1b      	ldr	r3, [r3, #32]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	7d5b      	ldrb	r3, [r3, #21]
 800901c:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	617b      	str	r3, [r7, #20]
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1e1      	bne.n	8008fee <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d002      	beq.n	8009036 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009030:	6938      	ldr	r0, [r7, #16]
 8009032:	f7ff fb19 	bl	8008668 <tcp_abort>
  }
}
 8009036:	bf00      	nop
 8009038:	3718      	adds	r7, #24
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	20006f68 	.word	0x20006f68
 8009044:	20006f5c 	.word	0x20006f5c

08009048 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009052:	79fb      	ldrb	r3, [r7, #7]
 8009054:	2b08      	cmp	r3, #8
 8009056:	d009      	beq.n	800906c <tcp_kill_state+0x24>
 8009058:	79fb      	ldrb	r3, [r7, #7]
 800905a:	2b09      	cmp	r3, #9
 800905c:	d006      	beq.n	800906c <tcp_kill_state+0x24>
 800905e:	4b1a      	ldr	r3, [pc, #104]	; (80090c8 <tcp_kill_state+0x80>)
 8009060:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009064:	4919      	ldr	r1, [pc, #100]	; (80090cc <tcp_kill_state+0x84>)
 8009066:	481a      	ldr	r0, [pc, #104]	; (80090d0 <tcp_kill_state+0x88>)
 8009068:	f009 faaa 	bl	80125c0 <iprintf>

  inactivity = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009070:	2300      	movs	r3, #0
 8009072:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009074:	4b17      	ldr	r3, [pc, #92]	; (80090d4 <tcp_kill_state+0x8c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	617b      	str	r3, [r7, #20]
 800907a:	e017      	b.n	80090ac <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	7d1b      	ldrb	r3, [r3, #20]
 8009080:	79fa      	ldrb	r2, [r7, #7]
 8009082:	429a      	cmp	r2, r3
 8009084:	d10f      	bne.n	80090a6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009086:	4b14      	ldr	r3, [pc, #80]	; (80090d8 <tcp_kill_state+0x90>)
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	429a      	cmp	r2, r3
 8009094:	d807      	bhi.n	80090a6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009096:	4b10      	ldr	r3, [pc, #64]	; (80090d8 <tcp_kill_state+0x90>)
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	617b      	str	r3, [r7, #20]
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1e4      	bne.n	800907c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d003      	beq.n	80090c0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80090b8:	2100      	movs	r1, #0
 80090ba:	6938      	ldr	r0, [r7, #16]
 80090bc:	f7ff fa22 	bl	8008504 <tcp_abandon>
  }
}
 80090c0:	bf00      	nop
 80090c2:	3718      	adds	r7, #24
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	08016bb0 	.word	0x08016bb0
 80090cc:	08016ec0 	.word	0x08016ec0
 80090d0:	08016bec 	.word	0x08016bec
 80090d4:	20006f68 	.word	0x20006f68
 80090d8:	20006f5c 	.word	0x20006f5c

080090dc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80090e6:	2300      	movs	r3, #0
 80090e8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80090ea:	4b12      	ldr	r3, [pc, #72]	; (8009134 <tcp_kill_timewait+0x58>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	e012      	b.n	8009118 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80090f2:	4b11      	ldr	r3, [pc, #68]	; (8009138 <tcp_kill_timewait+0x5c>)
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d807      	bhi.n	8009112 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009102:	4b0d      	ldr	r3, [pc, #52]	; (8009138 <tcp_kill_timewait+0x5c>)
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	60fb      	str	r3, [r7, #12]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1e9      	bne.n	80090f2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d002      	beq.n	800912a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009124:	68b8      	ldr	r0, [r7, #8]
 8009126:	f7ff fa9f 	bl	8008668 <tcp_abort>
  }
}
 800912a:	bf00      	nop
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	20006f6c 	.word	0x20006f6c
 8009138:	20006f5c 	.word	0x20006f5c

0800913c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	4603      	mov	r3, r0
 8009144:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009146:	2001      	movs	r0, #1
 8009148:	f7fd ff60 	bl	800700c <memp_malloc>
 800914c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d14c      	bne.n	80091ee <tcp_alloc+0xb2>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009154:	f7ff ffc2 	bl	80090dc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009158:	2001      	movs	r0, #1
 800915a:	f7fd ff57 	bl	800700c <memp_malloc>
 800915e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d139      	bne.n	80091da <tcp_alloc+0x9e>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009166:	2009      	movs	r0, #9
 8009168:	f7ff ff6e 	bl	8009048 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800916c:	2001      	movs	r0, #1
 800916e:	f7fd ff4d 	bl	800700c <memp_malloc>
 8009172:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d125      	bne.n	80091c6 <tcp_alloc+0x8a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800917a:	2008      	movs	r0, #8
 800917c:	f7ff ff64 	bl	8009048 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009180:	2001      	movs	r0, #1
 8009182:	f7fd ff43 	bl	800700c <memp_malloc>
 8009186:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d111      	bne.n	80091b2 <tcp_alloc+0x76>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800918e:	79fb      	ldrb	r3, [r7, #7]
 8009190:	4618      	mov	r0, r3
 8009192:	f7ff ff17 	bl	8008fc4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009196:	2001      	movs	r0, #1
 8009198:	f7fd ff38 	bl	800700c <memp_malloc>
 800919c:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d006      	beq.n	80091b2 <tcp_alloc+0x76>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80091a4:	4b36      	ldr	r3, [pc, #216]	; (8009280 <tcp_alloc+0x144>)
 80091a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80091aa:	881a      	ldrh	r2, [r3, #0]
 80091ac:	3a01      	subs	r2, #1
 80091ae:	b292      	uxth	r2, r2
 80091b0:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d006      	beq.n	80091c6 <tcp_alloc+0x8a>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80091b8:	4b31      	ldr	r3, [pc, #196]	; (8009280 <tcp_alloc+0x144>)
 80091ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80091be:	881a      	ldrh	r2, [r3, #0]
 80091c0:	3a01      	subs	r2, #1
 80091c2:	b292      	uxth	r2, r2
 80091c4:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d006      	beq.n	80091da <tcp_alloc+0x9e>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80091cc:	4b2c      	ldr	r3, [pc, #176]	; (8009280 <tcp_alloc+0x144>)
 80091ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80091d2:	881a      	ldrh	r2, [r3, #0]
 80091d4:	3a01      	subs	r2, #1
 80091d6:	b292      	uxth	r2, r2
 80091d8:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d006      	beq.n	80091ee <tcp_alloc+0xb2>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80091e0:	4b27      	ldr	r3, [pc, #156]	; (8009280 <tcp_alloc+0x144>)
 80091e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80091e6:	881a      	ldrh	r2, [r3, #0]
 80091e8:	3a01      	subs	r2, #1
 80091ea:	b292      	uxth	r2, r2
 80091ec:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d03f      	beq.n	8009274 <tcp_alloc+0x138>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80091f4:	2298      	movs	r2, #152	; 0x98
 80091f6:	2100      	movs	r1, #0
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f008 fb6b 	bl	80118d4 <memset>
    pcb->prio = prio;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	79fa      	ldrb	r2, [r7, #7]
 8009202:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800920a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009214:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	22ff      	movs	r2, #255	; 0xff
 8009222:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f44f 7206 	mov.w	r2, #536	; 0x218
 800922a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2206      	movs	r2, #6
 8009230:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2206      	movs	r2, #6
 8009238:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009240:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2201      	movs	r2, #1
 8009246:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800924a:	4b0e      	ldr	r3, [pc, #56]	; (8009284 <tcp_alloc+0x148>)
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009252:	4b0d      	ldr	r3, [pc, #52]	; (8009288 <tcp_alloc+0x14c>)
 8009254:	781a      	ldrb	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009260:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4a09      	ldr	r2, [pc, #36]	; (800928c <tcp_alloc+0x150>)
 8009268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4a08      	ldr	r2, [pc, #32]	; (8009290 <tcp_alloc+0x154>)
 8009270:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009274:	68fb      	ldr	r3, [r7, #12]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	20006e84 	.word	0x20006e84
 8009284:	20006f5c 	.word	0x20006f5c
 8009288:	20006f72 	.word	0x20006f72
 800928c:	08008f81 	.word	0x08008f81
 8009290:	006ddd00 	.word	0x006ddd00

08009294 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	7d1b      	ldrb	r3, [r3, #20]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d034      	beq.n	800930e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80092a8:	2b0a      	cmp	r3, #10
 80092aa:	d030      	beq.n	800930e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d02c      	beq.n	800930e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d007      	beq.n	80092cc <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fe fc33 	bl	8007b2c <pbuf_free>
      pcb->refused_data = NULL;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7ff fe0c 	bl	8008eee <tcp_segs_free>
    pcb->ooseq = NULL;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092e2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7ff fe00 	bl	8008eee <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7ff fdfb 	bl	8008eee <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	669a      	str	r2, [r3, #104]	; 0x68
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800930e:	bf00      	nop
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	429a      	cmp	r2, r3
 800932a:	d105      	bne.n	8009338 <tcp_pcb_remove+0x20>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68da      	ldr	r2, [r3, #12]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	e013      	b.n	8009360 <tcp_pcb_remove+0x48>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	60fb      	str	r3, [r7, #12]
 800933e:	e00c      	b.n	800935a <tcp_pcb_remove+0x42>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	683a      	ldr	r2, [r7, #0]
 8009346:	429a      	cmp	r2, r3
 8009348:	d104      	bne.n	8009354 <tcp_pcb_remove+0x3c>
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	68da      	ldr	r2, [r3, #12]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	60da      	str	r2, [r3, #12]
 8009352:	e005      	b.n	8009360 <tcp_pcb_remove+0x48>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	60fb      	str	r3, [r7, #12]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1ef      	bne.n	8009340 <tcp_pcb_remove+0x28>
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	2200      	movs	r2, #0
 8009364:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009366:	6838      	ldr	r0, [r7, #0]
 8009368:	f7ff ff94 	bl	8009294 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	7d1b      	ldrb	r3, [r3, #20]
 8009370:	2b0a      	cmp	r3, #10
 8009372:	d013      	beq.n	800939c <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8009378:	2b01      	cmp	r3, #1
 800937a:	d00f      	beq.n	800939c <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	7e9b      	ldrb	r3, [r3, #26]
 8009380:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8009384:	2b00      	cmp	r3, #0
 8009386:	d009      	beq.n	800939c <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	7e9b      	ldrb	r3, [r3, #26]
 800938c:	f043 0302 	orr.w	r3, r3, #2
 8009390:	b2da      	uxtb	r2, r3
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8009396:	6838      	ldr	r0, [r7, #0]
 8009398:	f002 fe0a 	bl	800bfb0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	7d1b      	ldrb	r3, [r3, #20]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d020      	beq.n	80093e6 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d006      	beq.n	80093ba <tcp_pcb_remove+0xa2>
 80093ac:	4b13      	ldr	r3, [pc, #76]	; (80093fc <tcp_pcb_remove+0xe4>)
 80093ae:	f240 7253 	movw	r2, #1875	; 0x753
 80093b2:	4913      	ldr	r1, [pc, #76]	; (8009400 <tcp_pcb_remove+0xe8>)
 80093b4:	4813      	ldr	r0, [pc, #76]	; (8009404 <tcp_pcb_remove+0xec>)
 80093b6:	f009 f903 	bl	80125c0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d006      	beq.n	80093d0 <tcp_pcb_remove+0xb8>
 80093c2:	4b0e      	ldr	r3, [pc, #56]	; (80093fc <tcp_pcb_remove+0xe4>)
 80093c4:	f240 7254 	movw	r2, #1876	; 0x754
 80093c8:	490f      	ldr	r1, [pc, #60]	; (8009408 <tcp_pcb_remove+0xf0>)
 80093ca:	480e      	ldr	r0, [pc, #56]	; (8009404 <tcp_pcb_remove+0xec>)
 80093cc:	f009 f8f8 	bl	80125c0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d006      	beq.n	80093e6 <tcp_pcb_remove+0xce>
 80093d8:	4b08      	ldr	r3, [pc, #32]	; (80093fc <tcp_pcb_remove+0xe4>)
 80093da:	f240 7256 	movw	r2, #1878	; 0x756
 80093de:	490b      	ldr	r1, [pc, #44]	; (800940c <tcp_pcb_remove+0xf4>)
 80093e0:	4808      	ldr	r0, [pc, #32]	; (8009404 <tcp_pcb_remove+0xec>)
 80093e2:	f009 f8ed 	bl	80125c0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	2200      	movs	r2, #0
 80093ea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2200      	movs	r2, #0
 80093f0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80093f2:	bf00      	nop
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	08016bb0 	.word	0x08016bb0
 8009400:	08016f68 	.word	0x08016f68
 8009404:	08016bec 	.word	0x08016bec
 8009408:	08016f80 	.word	0x08016f80
 800940c:	08016f9c 	.word	0x08016f9c

08009410 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009418:	4b06      	ldr	r3, [pc, #24]	; (8009434 <tcp_next_iss+0x24>)
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	4b06      	ldr	r3, [pc, #24]	; (8009438 <tcp_next_iss+0x28>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4413      	add	r3, r2
 8009422:	4a04      	ldr	r2, [pc, #16]	; (8009434 <tcp_next_iss+0x24>)
 8009424:	6013      	str	r3, [r2, #0]
  return iss;
 8009426:	4b03      	ldr	r3, [pc, #12]	; (8009434 <tcp_next_iss+0x24>)
 8009428:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800942a:	4618      	mov	r0, r3
 800942c:	370c      	adds	r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	bc80      	pop	{r7}
 8009432:	4770      	bx	lr
 8009434:	20000030 	.word	0x20000030
 8009438:	20006f5c 	.word	0x20006f5c

0800943c <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	6039      	str	r1, [r7, #0]
 8009446:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8009448:	6838      	ldr	r0, [r7, #0]
 800944a:	f005 f949 	bl	800e6e0 <ip4_route>
 800944e:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d101      	bne.n	800945a <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8009456:	88fb      	ldrh	r3, [r7, #6]
 8009458:	e010      	b.n	800947c <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800945e:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009460:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d008      	beq.n	800947a <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8009468:	897b      	ldrh	r3, [r7, #10]
 800946a:	3b28      	subs	r3, #40	; 0x28
 800946c:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800946e:	893a      	ldrh	r2, [r7, #8]
 8009470:	88fb      	ldrh	r3, [r7, #6]
 8009472:	4293      	cmp	r3, r2
 8009474:	bf28      	it	cs
 8009476:	4613      	movcs	r3, r2
 8009478:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800947a:	88fb      	ldrh	r3, [r7, #6]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009492:	e011      	b.n	80094b8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	429a      	cmp	r2, r3
 800949e:	d108      	bne.n	80094b2 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f7ff f8de 	bl	8008668 <tcp_abort>
      pcb = next;
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	60fb      	str	r3, [r7, #12]
 80094b0:	e002      	b.n	80094b8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1ea      	bne.n	8009494 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80094be:	bf00      	nop
 80094c0:	bf00      	nop
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d02c      	beq.n	8009532 <tcp_netif_ip_addr_changed+0x6a>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d028      	beq.n	8009532 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80094e0:	4b16      	ldr	r3, [pc, #88]	; (800953c <tcp_netif_ip_addr_changed+0x74>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7ff ffcc 	bl	8009484 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80094ec:	4b14      	ldr	r3, [pc, #80]	; (8009540 <tcp_netif_ip_addr_changed+0x78>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7ff ffc6 	bl	8009484 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d019      	beq.n	8009532 <tcp_netif_ip_addr_changed+0x6a>
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d015      	beq.n	8009532 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8009506:	4b0f      	ldr	r3, [pc, #60]	; (8009544 <tcp_netif_ip_addr_changed+0x7c>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	60fb      	str	r3, [r7, #12]
 800950c:	e00e      	b.n	800952c <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	429a      	cmp	r2, r3
 800951e:	d103      	bne.n	8009528 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	60fb      	str	r3, [r7, #12]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1ed      	bne.n	800950e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009532:	bf00      	nop
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	20006f68 	.word	0x20006f68
 8009540:	20006f60 	.word	0x20006f60
 8009544:	20006f64 	.word	0x20006f64

08009548 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009548:	b590      	push	{r4, r7, lr}
 800954a:	b08b      	sub	sp, #44	; 0x2c
 800954c:	af02      	add	r7, sp, #8
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8009552:	4b96      	ldr	r3, [pc, #600]	; (80097ac <tcp_input+0x264>)
 8009554:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8009558:	3301      	adds	r3, #1
 800955a:	b29a      	uxth	r2, r3
 800955c:	4b93      	ldr	r3, [pc, #588]	; (80097ac <tcp_input+0x264>)
 800955e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	4a92      	ldr	r2, [pc, #584]	; (80097b0 <tcp_input+0x268>)
 8009568:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	895b      	ldrh	r3, [r3, #10]
 800956e:	2b13      	cmp	r3, #19
 8009570:	d808      	bhi.n	8009584 <tcp_input+0x3c>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8009572:	4b8e      	ldr	r3, [pc, #568]	; (80097ac <tcp_input+0x264>)
 8009574:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8009578:	3301      	adds	r3, #1
 800957a:	b29a      	uxth	r2, r3
 800957c:	4b8b      	ldr	r3, [pc, #556]	; (80097ac <tcp_input+0x264>)
 800957e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 8009582:	e3db      	b.n	8009d3c <tcp_input+0x7f4>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009584:	4b8b      	ldr	r3, [pc, #556]	; (80097b4 <tcp_input+0x26c>)
 8009586:	695b      	ldr	r3, [r3, #20]
 8009588:	4a8a      	ldr	r2, [pc, #552]	; (80097b4 <tcp_input+0x26c>)
 800958a:	6812      	ldr	r2, [r2, #0]
 800958c:	4611      	mov	r1, r2
 800958e:	4618      	mov	r0, r3
 8009590:	f005 fb8c 	bl	800ecac <ip4_addr_isbroadcast_u32>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d105      	bne.n	80095a6 <tcp_input+0x5e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800959a:	4b86      	ldr	r3, [pc, #536]	; (80097b4 <tcp_input+0x26c>)
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80095a2:	2be0      	cmp	r3, #224	; 0xe0
 80095a4:	d108      	bne.n	80095b8 <tcp_input+0x70>
    TCP_STATS_INC(tcp.proterr);
 80095a6:	4b81      	ldr	r3, [pc, #516]	; (80097ac <tcp_input+0x264>)
 80095a8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80095ac:	3301      	adds	r3, #1
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	4b7e      	ldr	r3, [pc, #504]	; (80097ac <tcp_input+0x264>)
 80095b2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    goto dropped;
 80095b6:	e3c1      	b.n	8009d3c <tcp_input+0x7f4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80095b8:	4b7d      	ldr	r3, [pc, #500]	; (80097b0 <tcp_input+0x268>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	899b      	ldrh	r3, [r3, #12]
 80095be:	b29b      	uxth	r3, r3
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fd f8e2 	bl	800678a <lwip_htons>
 80095c6:	4603      	mov	r3, r0
 80095c8:	0b1b      	lsrs	r3, r3, #12
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80095d2:	7cbb      	ldrb	r3, [r7, #18]
 80095d4:	2b13      	cmp	r3, #19
 80095d6:	d905      	bls.n	80095e4 <tcp_input+0x9c>
 80095d8:	7cbb      	ldrb	r3, [r7, #18]
 80095da:	b29a      	uxth	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	891b      	ldrh	r3, [r3, #8]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d908      	bls.n	80095f6 <tcp_input+0xae>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 80095e4:	4b71      	ldr	r3, [pc, #452]	; (80097ac <tcp_input+0x264>)
 80095e6:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80095ea:	3301      	adds	r3, #1
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	4b6f      	ldr	r3, [pc, #444]	; (80097ac <tcp_input+0x264>)
 80095f0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 80095f4:	e3a2      	b.n	8009d3c <tcp_input+0x7f4>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80095f6:	7cbb      	ldrb	r3, [r7, #18]
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	3b14      	subs	r3, #20
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	4b6e      	ldr	r3, [pc, #440]	; (80097b8 <tcp_input+0x270>)
 8009600:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009602:	4b6e      	ldr	r3, [pc, #440]	; (80097bc <tcp_input+0x274>)
 8009604:	2200      	movs	r2, #0
 8009606:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	895a      	ldrh	r2, [r3, #10]
 800960c:	7cbb      	ldrb	r3, [r7, #18]
 800960e:	b29b      	uxth	r3, r3
 8009610:	429a      	cmp	r2, r3
 8009612:	d30d      	bcc.n	8009630 <tcp_input+0xe8>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009614:	4b68      	ldr	r3, [pc, #416]	; (80097b8 <tcp_input+0x270>)
 8009616:	881a      	ldrh	r2, [r3, #0]
 8009618:	4b69      	ldr	r3, [pc, #420]	; (80097c0 <tcp_input+0x278>)
 800961a:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800961c:	7cbb      	ldrb	r3, [r7, #18]
 800961e:	b29b      	uxth	r3, r3
 8009620:	425b      	negs	r3, r3
 8009622:	b29b      	uxth	r3, r3
 8009624:	b21b      	sxth	r3, r3
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7fe fa5b 	bl	8007ae4 <pbuf_header>
 800962e:	e05d      	b.n	80096ec <tcp_input+0x1a4>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d105      	bne.n	8009644 <tcp_input+0xfc>
 8009638:	4b62      	ldr	r3, [pc, #392]	; (80097c4 <tcp_input+0x27c>)
 800963a:	22b2      	movs	r2, #178	; 0xb2
 800963c:	4962      	ldr	r1, [pc, #392]	; (80097c8 <tcp_input+0x280>)
 800963e:	4863      	ldr	r0, [pc, #396]	; (80097cc <tcp_input+0x284>)
 8009640:	f008 ffbe 	bl	80125c0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8009644:	f06f 0113 	mvn.w	r1, #19
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f7fe fa4b 	bl	8007ae4 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	895a      	ldrh	r2, [r3, #10]
 8009652:	4b5b      	ldr	r3, [pc, #364]	; (80097c0 <tcp_input+0x278>)
 8009654:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8009656:	4b58      	ldr	r3, [pc, #352]	; (80097b8 <tcp_input+0x270>)
 8009658:	881a      	ldrh	r2, [r3, #0]
 800965a:	4b59      	ldr	r3, [pc, #356]	; (80097c0 <tcp_input+0x278>)
 800965c:	881b      	ldrh	r3, [r3, #0]
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8009662:	4b57      	ldr	r3, [pc, #348]	; (80097c0 <tcp_input+0x278>)
 8009664:	881b      	ldrh	r3, [r3, #0]
 8009666:	425b      	negs	r3, r3
 8009668:	b29b      	uxth	r3, r3
 800966a:	b21b      	sxth	r3, r3
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7fe fa38 	bl	8007ae4 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	895b      	ldrh	r3, [r3, #10]
 800967a:	8a3a      	ldrh	r2, [r7, #16]
 800967c:	429a      	cmp	r2, r3
 800967e:	d908      	bls.n	8009692 <tcp_input+0x14a>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8009680:	4b4a      	ldr	r3, [pc, #296]	; (80097ac <tcp_input+0x264>)
 8009682:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8009686:	3301      	adds	r3, #1
 8009688:	b29a      	uxth	r2, r3
 800968a:	4b48      	ldr	r3, [pc, #288]	; (80097ac <tcp_input+0x264>)
 800968c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 8009690:	e354      	b.n	8009d3c <tcp_input+0x7f4>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	4a48      	ldr	r2, [pc, #288]	; (80097bc <tcp_input+0x274>)
 800969a:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	8a3b      	ldrh	r3, [r7, #16]
 80096a2:	425b      	negs	r3, r3
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	b21b      	sxth	r3, r3
 80096a8:	4619      	mov	r1, r3
 80096aa:	4610      	mov	r0, r2
 80096ac:	f7fe fa1a 	bl	8007ae4 <pbuf_header>
    p->tot_len -= opt2len;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	891a      	ldrh	r2, [r3, #8]
 80096b4:	8a3b      	ldrh	r3, [r7, #16]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	895b      	ldrh	r3, [r3, #10]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d005      	beq.n	80096d2 <tcp_input+0x18a>
 80096c6:	4b3f      	ldr	r3, [pc, #252]	; (80097c4 <tcp_input+0x27c>)
 80096c8:	22cf      	movs	r2, #207	; 0xcf
 80096ca:	4941      	ldr	r1, [pc, #260]	; (80097d0 <tcp_input+0x288>)
 80096cc:	483f      	ldr	r0, [pc, #252]	; (80097cc <tcp_input+0x284>)
 80096ce:	f008 ff77 	bl	80125c0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	891a      	ldrh	r2, [r3, #8]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	891b      	ldrh	r3, [r3, #8]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d005      	beq.n	80096ec <tcp_input+0x1a4>
 80096e0:	4b38      	ldr	r3, [pc, #224]	; (80097c4 <tcp_input+0x27c>)
 80096e2:	22d0      	movs	r2, #208	; 0xd0
 80096e4:	493b      	ldr	r1, [pc, #236]	; (80097d4 <tcp_input+0x28c>)
 80096e6:	4839      	ldr	r0, [pc, #228]	; (80097cc <tcp_input+0x284>)
 80096e8:	f008 ff6a 	bl	80125c0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80096ec:	4b30      	ldr	r3, [pc, #192]	; (80097b0 <tcp_input+0x268>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	881b      	ldrh	r3, [r3, #0]
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	4a2e      	ldr	r2, [pc, #184]	; (80097b0 <tcp_input+0x268>)
 80096f6:	6814      	ldr	r4, [r2, #0]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fd f846 	bl	800678a <lwip_htons>
 80096fe:	4603      	mov	r3, r0
 8009700:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009702:	4b2b      	ldr	r3, [pc, #172]	; (80097b0 <tcp_input+0x268>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	885b      	ldrh	r3, [r3, #2]
 8009708:	b29b      	uxth	r3, r3
 800970a:	4a29      	ldr	r2, [pc, #164]	; (80097b0 <tcp_input+0x268>)
 800970c:	6814      	ldr	r4, [r2, #0]
 800970e:	4618      	mov	r0, r3
 8009710:	f7fd f83b 	bl	800678a <lwip_htons>
 8009714:	4603      	mov	r3, r0
 8009716:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009718:	4b25      	ldr	r3, [pc, #148]	; (80097b0 <tcp_input+0x268>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	4a24      	ldr	r2, [pc, #144]	; (80097b0 <tcp_input+0x268>)
 8009720:	6814      	ldr	r4, [r2, #0]
 8009722:	4618      	mov	r0, r3
 8009724:	f7fd f83e 	bl	80067a4 <lwip_htonl>
 8009728:	4603      	mov	r3, r0
 800972a:	6063      	str	r3, [r4, #4]
 800972c:	6863      	ldr	r3, [r4, #4]
 800972e:	4a2a      	ldr	r2, [pc, #168]	; (80097d8 <tcp_input+0x290>)
 8009730:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009732:	4b1f      	ldr	r3, [pc, #124]	; (80097b0 <tcp_input+0x268>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	4a1d      	ldr	r2, [pc, #116]	; (80097b0 <tcp_input+0x268>)
 800973a:	6814      	ldr	r4, [r2, #0]
 800973c:	4618      	mov	r0, r3
 800973e:	f7fd f831 	bl	80067a4 <lwip_htonl>
 8009742:	4603      	mov	r3, r0
 8009744:	60a3      	str	r3, [r4, #8]
 8009746:	68a3      	ldr	r3, [r4, #8]
 8009748:	4a24      	ldr	r2, [pc, #144]	; (80097dc <tcp_input+0x294>)
 800974a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800974c:	4b18      	ldr	r3, [pc, #96]	; (80097b0 <tcp_input+0x268>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	89db      	ldrh	r3, [r3, #14]
 8009752:	b29b      	uxth	r3, r3
 8009754:	4a16      	ldr	r2, [pc, #88]	; (80097b0 <tcp_input+0x268>)
 8009756:	6814      	ldr	r4, [r2, #0]
 8009758:	4618      	mov	r0, r3
 800975a:	f7fd f816 	bl	800678a <lwip_htons>
 800975e:	4603      	mov	r3, r0
 8009760:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009762:	4b13      	ldr	r3, [pc, #76]	; (80097b0 <tcp_input+0x268>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	899b      	ldrh	r3, [r3, #12]
 8009768:	b29b      	uxth	r3, r3
 800976a:	4618      	mov	r0, r3
 800976c:	f7fd f80d 	bl	800678a <lwip_htons>
 8009770:	4603      	mov	r3, r0
 8009772:	b2db      	uxtb	r3, r3
 8009774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009778:	b2da      	uxtb	r2, r3
 800977a:	4b19      	ldr	r3, [pc, #100]	; (80097e0 <tcp_input+0x298>)
 800977c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	891a      	ldrh	r2, [r3, #8]
 8009782:	4b17      	ldr	r3, [pc, #92]	; (80097e0 <tcp_input+0x298>)
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	f003 0303 	and.w	r3, r3, #3
 800978a:	2b00      	cmp	r3, #0
 800978c:	bf14      	ite	ne
 800978e:	2301      	movne	r3, #1
 8009790:	2300      	moveq	r3, #0
 8009792:	b2db      	uxtb	r3, r3
 8009794:	b29b      	uxth	r3, r3
 8009796:	4413      	add	r3, r2
 8009798:	b29a      	uxth	r2, r3
 800979a:	4b12      	ldr	r3, [pc, #72]	; (80097e4 <tcp_input+0x29c>)
 800979c:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800979e:	2300      	movs	r3, #0
 80097a0:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80097a2:	4b11      	ldr	r3, [pc, #68]	; (80097e8 <tcp_input+0x2a0>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	61fb      	str	r3, [r7, #28]
 80097a8:	e08d      	b.n	80098c6 <tcp_input+0x37e>
 80097aa:	bf00      	nop
 80097ac:	20006e84 	.word	0x20006e84
 80097b0:	20006f84 	.word	0x20006f84
 80097b4:	200038bc 	.word	0x200038bc
 80097b8:	20006f88 	.word	0x20006f88
 80097bc:	20006f8c 	.word	0x20006f8c
 80097c0:	20006f8a 	.word	0x20006f8a
 80097c4:	08016fb4 	.word	0x08016fb4
 80097c8:	08016fe8 	.word	0x08016fe8
 80097cc:	08016ff8 	.word	0x08016ff8
 80097d0:	08017020 	.word	0x08017020
 80097d4:	0801702c 	.word	0x0801702c
 80097d8:	20006f94 	.word	0x20006f94
 80097dc:	20006f98 	.word	0x20006f98
 80097e0:	20006fa0 	.word	0x20006fa0
 80097e4:	20006f9e 	.word	0x20006f9e
 80097e8:	20006f68 	.word	0x20006f68
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	7d1b      	ldrb	r3, [r3, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d105      	bne.n	8009800 <tcp_input+0x2b8>
 80097f4:	4b77      	ldr	r3, [pc, #476]	; (80099d4 <tcp_input+0x48c>)
 80097f6:	22e2      	movs	r2, #226	; 0xe2
 80097f8:	4977      	ldr	r1, [pc, #476]	; (80099d8 <tcp_input+0x490>)
 80097fa:	4878      	ldr	r0, [pc, #480]	; (80099dc <tcp_input+0x494>)
 80097fc:	f008 fee0 	bl	80125c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	7d1b      	ldrb	r3, [r3, #20]
 8009804:	2b0a      	cmp	r3, #10
 8009806:	d105      	bne.n	8009814 <tcp_input+0x2cc>
 8009808:	4b72      	ldr	r3, [pc, #456]	; (80099d4 <tcp_input+0x48c>)
 800980a:	22e3      	movs	r2, #227	; 0xe3
 800980c:	4974      	ldr	r1, [pc, #464]	; (80099e0 <tcp_input+0x498>)
 800980e:	4873      	ldr	r0, [pc, #460]	; (80099dc <tcp_input+0x494>)
 8009810:	f008 fed6 	bl	80125c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	7d1b      	ldrb	r3, [r3, #20]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d105      	bne.n	8009828 <tcp_input+0x2e0>
 800981c:	4b6d      	ldr	r3, [pc, #436]	; (80099d4 <tcp_input+0x48c>)
 800981e:	22e4      	movs	r2, #228	; 0xe4
 8009820:	4970      	ldr	r1, [pc, #448]	; (80099e4 <tcp_input+0x49c>)
 8009822:	486e      	ldr	r0, [pc, #440]	; (80099dc <tcp_input+0x494>)
 8009824:	f008 fecc 	bl	80125c0 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	8b1a      	ldrh	r2, [r3, #24]
 800982c:	4b6e      	ldr	r3, [pc, #440]	; (80099e8 <tcp_input+0x4a0>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	881b      	ldrh	r3, [r3, #0]
 8009832:	b29b      	uxth	r3, r3
 8009834:	429a      	cmp	r2, r3
 8009836:	d141      	bne.n	80098bc <tcp_input+0x374>
        pcb->local_port == tcphdr->dest &&
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	8ada      	ldrh	r2, [r3, #22]
 800983c:	4b6a      	ldr	r3, [pc, #424]	; (80099e8 <tcp_input+0x4a0>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	885b      	ldrh	r3, [r3, #2]
 8009842:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009844:	429a      	cmp	r2, r3
 8009846:	d139      	bne.n	80098bc <tcp_input+0x374>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	685a      	ldr	r2, [r3, #4]
 800984c:	4b67      	ldr	r3, [pc, #412]	; (80099ec <tcp_input+0x4a4>)
 800984e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009850:	429a      	cmp	r2, r3
 8009852:	d133      	bne.n	80098bc <tcp_input+0x374>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	4b64      	ldr	r3, [pc, #400]	; (80099ec <tcp_input+0x4a4>)
 800985a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800985c:	429a      	cmp	r2, r3
 800985e:	d12d      	bne.n	80098bc <tcp_input+0x374>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	69fa      	ldr	r2, [r7, #28]
 8009866:	429a      	cmp	r2, r3
 8009868:	d105      	bne.n	8009876 <tcp_input+0x32e>
 800986a:	4b5a      	ldr	r3, [pc, #360]	; (80099d4 <tcp_input+0x48c>)
 800986c:	22ec      	movs	r2, #236	; 0xec
 800986e:	4960      	ldr	r1, [pc, #384]	; (80099f0 <tcp_input+0x4a8>)
 8009870:	485a      	ldr	r0, [pc, #360]	; (80099dc <tcp_input+0x494>)
 8009872:	f008 fea5 	bl	80125c0 <iprintf>
      if (prev != NULL) {
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00b      	beq.n	8009894 <tcp_input+0x34c>
        prev->next = pcb->next;
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	68da      	ldr	r2, [r3, #12]
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009884:	4b5b      	ldr	r3, [pc, #364]	; (80099f4 <tcp_input+0x4ac>)
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800988c:	4a59      	ldr	r2, [pc, #356]	; (80099f4 <tcp_input+0x4ac>)
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	6013      	str	r3, [r2, #0]
 8009892:	e007      	b.n	80098a4 <tcp_input+0x35c>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8009894:	4b58      	ldr	r3, [pc, #352]	; (80099f8 <tcp_input+0x4b0>)
 8009896:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800989a:	3301      	adds	r3, #1
 800989c:	b29a      	uxth	r2, r3
 800989e:	4b56      	ldr	r3, [pc, #344]	; (80099f8 <tcp_input+0x4b0>)
 80098a0:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	69fa      	ldr	r2, [r7, #28]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d10f      	bne.n	80098ce <tcp_input+0x386>
 80098ae:	4b49      	ldr	r3, [pc, #292]	; (80099d4 <tcp_input+0x48c>)
 80098b0:	22f4      	movs	r2, #244	; 0xf4
 80098b2:	4952      	ldr	r1, [pc, #328]	; (80099fc <tcp_input+0x4b4>)
 80098b4:	4849      	ldr	r0, [pc, #292]	; (80099dc <tcp_input+0x494>)
 80098b6:	f008 fe83 	bl	80125c0 <iprintf>
      break;
 80098ba:	e008      	b.n	80098ce <tcp_input+0x386>
    }
    prev = pcb;
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	61fb      	str	r3, [r7, #28]
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d18f      	bne.n	80097ec <tcp_input+0x2a4>
 80098cc:	e000      	b.n	80098d0 <tcp_input+0x388>
      break;
 80098ce:	bf00      	nop
  }

  if (pcb == NULL) {
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f040 809a 	bne.w	8009a0c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80098d8:	4b49      	ldr	r3, [pc, #292]	; (8009a00 <tcp_input+0x4b8>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	61fb      	str	r3, [r7, #28]
 80098de:	e02f      	b.n	8009940 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	7d1b      	ldrb	r3, [r3, #20]
 80098e4:	2b0a      	cmp	r3, #10
 80098e6:	d005      	beq.n	80098f4 <tcp_input+0x3ac>
 80098e8:	4b3a      	ldr	r3, [pc, #232]	; (80099d4 <tcp_input+0x48c>)
 80098ea:	22fe      	movs	r2, #254	; 0xfe
 80098ec:	4945      	ldr	r1, [pc, #276]	; (8009a04 <tcp_input+0x4bc>)
 80098ee:	483b      	ldr	r0, [pc, #236]	; (80099dc <tcp_input+0x494>)
 80098f0:	f008 fe66 	bl	80125c0 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	8b1a      	ldrh	r2, [r3, #24]
 80098f8:	4b3b      	ldr	r3, [pc, #236]	; (80099e8 <tcp_input+0x4a0>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	881b      	ldrh	r3, [r3, #0]
 80098fe:	b29b      	uxth	r3, r3
 8009900:	429a      	cmp	r2, r3
 8009902:	d11a      	bne.n	800993a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	8ada      	ldrh	r2, [r3, #22]
 8009908:	4b37      	ldr	r3, [pc, #220]	; (80099e8 <tcp_input+0x4a0>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	885b      	ldrh	r3, [r3, #2]
 800990e:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009910:	429a      	cmp	r2, r3
 8009912:	d112      	bne.n	800993a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	685a      	ldr	r2, [r3, #4]
 8009918:	4b34      	ldr	r3, [pc, #208]	; (80099ec <tcp_input+0x4a4>)
 800991a:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800991c:	429a      	cmp	r2, r3
 800991e:	d10c      	bne.n	800993a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	4b31      	ldr	r3, [pc, #196]	; (80099ec <tcp_input+0x4a4>)
 8009926:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009928:	429a      	cmp	r2, r3
 800992a:	d106      	bne.n	800993a <tcp_input+0x3f2>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800992c:	69f8      	ldr	r0, [r7, #28]
 800992e:	f000 fb45 	bl	8009fbc <tcp_timewait_input>
        pbuf_free(p);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7fe f8fa 	bl	8007b2c <pbuf_free>
        return;
 8009938:	e20d      	b.n	8009d56 <tcp_input+0x80e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	61fb      	str	r3, [r7, #28]
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1cc      	bne.n	80098e0 <tcp_input+0x398>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009946:	2300      	movs	r3, #0
 8009948:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800994a:	4b2f      	ldr	r3, [pc, #188]	; (8009a08 <tcp_input+0x4c0>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	617b      	str	r3, [r7, #20]
 8009950:	e019      	b.n	8009986 <tcp_input+0x43e>
      if (lpcb->local_port == tcphdr->dest) {
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	8ada      	ldrh	r2, [r3, #22]
 8009956:	4b24      	ldr	r3, [pc, #144]	; (80099e8 <tcp_input+0x4a0>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	885b      	ldrh	r3, [r3, #2]
 800995c:	b29b      	uxth	r3, r3
 800995e:	429a      	cmp	r2, r3
 8009960:	d10c      	bne.n	800997c <tcp_input+0x434>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	4b21      	ldr	r3, [pc, #132]	; (80099ec <tcp_input+0x4a4>)
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	429a      	cmp	r2, r3
 800996c:	d00f      	beq.n	800998e <tcp_input+0x446>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00d      	beq.n	8009990 <tcp_input+0x448>
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d009      	beq.n	8009990 <tcp_input+0x448>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	617b      	str	r3, [r7, #20]
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1e2      	bne.n	8009952 <tcp_input+0x40a>
 800998c:	e000      	b.n	8009990 <tcp_input+0x448>
            break;
 800998e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d03a      	beq.n	8009a0c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00b      	beq.n	80099b4 <tcp_input+0x46c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	68da      	ldr	r2, [r3, #12]
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80099a4:	4b18      	ldr	r3, [pc, #96]	; (8009a08 <tcp_input+0x4c0>)
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80099ac:	4a16      	ldr	r2, [pc, #88]	; (8009a08 <tcp_input+0x4c0>)
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	6013      	str	r3, [r2, #0]
 80099b2:	e007      	b.n	80099c4 <tcp_input+0x47c>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 80099b4:	4b10      	ldr	r3, [pc, #64]	; (80099f8 <tcp_input+0x4b0>)
 80099b6:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80099ba:	3301      	adds	r3, #1
 80099bc:	b29a      	uxth	r2, r3
 80099be:	4b0e      	ldr	r3, [pc, #56]	; (80099f8 <tcp_input+0x4b0>)
 80099c0:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 80099c4:	6978      	ldr	r0, [r7, #20]
 80099c6:	f000 fa0f 	bl	8009de8 <tcp_listen_input>
      pbuf_free(p);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7fe f8ae 	bl	8007b2c <pbuf_free>
      return;
 80099d0:	e1c1      	b.n	8009d56 <tcp_input+0x80e>
 80099d2:	bf00      	nop
 80099d4:	08016fb4 	.word	0x08016fb4
 80099d8:	0801704c 	.word	0x0801704c
 80099dc:	08016ff8 	.word	0x08016ff8
 80099e0:	08017074 	.word	0x08017074
 80099e4:	080170a0 	.word	0x080170a0
 80099e8:	20006f84 	.word	0x20006f84
 80099ec:	200038bc 	.word	0x200038bc
 80099f0:	080170c8 	.word	0x080170c8
 80099f4:	20006f68 	.word	0x20006f68
 80099f8:	20006e84 	.word	0x20006e84
 80099fc:	080170f4 	.word	0x080170f4
 8009a00:	20006f6c 	.word	0x20006f6c
 8009a04:	08017120 	.word	0x08017120
 8009a08:	20006f64 	.word	0x20006f64
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f000 815e 	beq.w	8009cd0 <tcp_input+0x788>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009a14:	4b97      	ldr	r3, [pc, #604]	; (8009c74 <tcp_input+0x72c>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	891a      	ldrh	r2, [r3, #8]
 8009a1e:	4b95      	ldr	r3, [pc, #596]	; (8009c74 <tcp_input+0x72c>)
 8009a20:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009a22:	4a94      	ldr	r2, [pc, #592]	; (8009c74 <tcp_input+0x72c>)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009a28:	4b93      	ldr	r3, [pc, #588]	; (8009c78 <tcp_input+0x730>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a91      	ldr	r2, [pc, #580]	; (8009c74 <tcp_input+0x72c>)
 8009a2e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009a30:	4b92      	ldr	r3, [pc, #584]	; (8009c7c <tcp_input+0x734>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009a36:	4b92      	ldr	r3, [pc, #584]	; (8009c80 <tcp_input+0x738>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009a3c:	4b91      	ldr	r3, [pc, #580]	; (8009c84 <tcp_input+0x73c>)
 8009a3e:	2200      	movs	r2, #0
 8009a40:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009a42:	4b91      	ldr	r3, [pc, #580]	; (8009c88 <tcp_input+0x740>)
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	f003 0308 	and.w	r3, r3, #8
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d006      	beq.n	8009a5c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	7b5b      	ldrb	r3, [r3, #13]
 8009a52:	f043 0301 	orr.w	r3, r3, #1
 8009a56:	b2da      	uxtb	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d01e      	beq.n	8009aa2 <tcp_input+0x55a>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009a64:	69f8      	ldr	r0, [r7, #28]
 8009a66:	f7ff f9d9 	bl	8008e1c <tcp_process_refused_data>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	f113 0f0d 	cmn.w	r3, #13
 8009a70:	d007      	beq.n	8009a82 <tcp_input+0x53a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d013      	beq.n	8009aa2 <tcp_input+0x55a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009a7a:	4b84      	ldr	r3, [pc, #528]	; (8009c8c <tcp_input+0x744>)
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00f      	beq.n	8009aa2 <tcp_input+0x55a>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d102      	bne.n	8009a90 <tcp_input+0x548>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009a8a:	69f8      	ldr	r0, [r7, #28]
 8009a8c:	f002 fa34 	bl	800bef8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8009a90:	4b7f      	ldr	r3, [pc, #508]	; (8009c90 <tcp_input+0x748>)
 8009a92:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8009a96:	3301      	adds	r3, #1
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	4b7d      	ldr	r3, [pc, #500]	; (8009c90 <tcp_input+0x748>)
 8009a9c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009aa0:	e103      	b.n	8009caa <tcp_input+0x762>
      }
    }
    tcp_input_pcb = pcb;
 8009aa2:	4a7c      	ldr	r2, [pc, #496]	; (8009c94 <tcp_input+0x74c>)
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009aa8:	69f8      	ldr	r0, [r7, #28]
 8009aaa:	f000 faef 	bl	800a08c <tcp_process>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009ab2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ab6:	f113 0f0d 	cmn.w	r3, #13
 8009aba:	f000 80d0 	beq.w	8009c5e <tcp_input+0x716>
      if (recv_flags & TF_RESET) {
 8009abe:	4b70      	ldr	r3, [pc, #448]	; (8009c80 <tcp_input+0x738>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	f003 0308 	and.w	r3, r3, #8
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d016      	beq.n	8009af8 <tcp_input+0x5b0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d008      	beq.n	8009ae6 <tcp_input+0x59e>
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ada:	69fa      	ldr	r2, [r7, #28]
 8009adc:	6912      	ldr	r2, [r2, #16]
 8009ade:	f06f 010d 	mvn.w	r1, #13
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009ae6:	69f9      	ldr	r1, [r7, #28]
 8009ae8:	486b      	ldr	r0, [pc, #428]	; (8009c98 <tcp_input+0x750>)
 8009aea:	f7ff fc15 	bl	8009318 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8009aee:	69f9      	ldr	r1, [r7, #28]
 8009af0:	2001      	movs	r0, #1
 8009af2:	f7fd fadd 	bl	80070b0 <memp_free>
 8009af6:	e0d8      	b.n	8009caa <tcp_input+0x762>
      } else {
        err = ERR_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009afc:	4b61      	ldr	r3, [pc, #388]	; (8009c84 <tcp_input+0x73c>)
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d01b      	beq.n	8009b3c <tcp_input+0x5f4>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009b04:	4b5f      	ldr	r3, [pc, #380]	; (8009c84 <tcp_input+0x73c>)
 8009b06:	881b      	ldrh	r3, [r3, #0]
 8009b08:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d009      	beq.n	8009b26 <tcp_input+0x5de>
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b16:	69fa      	ldr	r2, [r7, #28]
 8009b18:	6910      	ldr	r0, [r2, #16]
 8009b1a:	89fa      	ldrh	r2, [r7, #14]
 8009b1c:	69f9      	ldr	r1, [r7, #28]
 8009b1e:	4798      	blx	r3
 8009b20:	4603      	mov	r3, r0
 8009b22:	74fb      	strb	r3, [r7, #19]
 8009b24:	e001      	b.n	8009b2a <tcp_input+0x5e2>
 8009b26:	2300      	movs	r3, #0
 8009b28:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009b2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009b2e:	f113 0f0d 	cmn.w	r3, #13
 8009b32:	f000 8096 	beq.w	8009c62 <tcp_input+0x71a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009b36:	4b53      	ldr	r3, [pc, #332]	; (8009c84 <tcp_input+0x73c>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009b3c:	69f8      	ldr	r0, [r7, #28]
 8009b3e:	f000 f921 	bl	8009d84 <tcp_input_delayed_close>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f040 808e 	bne.w	8009c66 <tcp_input+0x71e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009b4a:	4b4c      	ldr	r3, [pc, #304]	; (8009c7c <tcp_input+0x734>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d041      	beq.n	8009bd6 <tcp_input+0x68e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d006      	beq.n	8009b68 <tcp_input+0x620>
 8009b5a:	4b50      	ldr	r3, [pc, #320]	; (8009c9c <tcp_input+0x754>)
 8009b5c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8009b60:	494f      	ldr	r1, [pc, #316]	; (8009ca0 <tcp_input+0x758>)
 8009b62:	4850      	ldr	r0, [pc, #320]	; (8009ca4 <tcp_input+0x75c>)
 8009b64:	f008 fd2c 	bl	80125c0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	7e9b      	ldrb	r3, [r3, #26]
 8009b6c:	f003 0310 	and.w	r3, r3, #16
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d008      	beq.n	8009b86 <tcp_input+0x63e>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009b74:	4b41      	ldr	r3, [pc, #260]	; (8009c7c <tcp_input+0x734>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fd ffd7 	bl	8007b2c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009b7e:	69f8      	ldr	r0, [r7, #28]
 8009b80:	f7fe fd72 	bl	8008668 <tcp_abort>
            goto aborted;
 8009b84:	e091      	b.n	8009caa <tcp_input+0x762>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00c      	beq.n	8009baa <tcp_input+0x662>
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	6918      	ldr	r0, [r3, #16]
 8009b9a:	4b38      	ldr	r3, [pc, #224]	; (8009c7c <tcp_input+0x734>)
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	69f9      	ldr	r1, [r7, #28]
 8009ba2:	47a0      	blx	r4
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	74fb      	strb	r3, [r7, #19]
 8009ba8:	e008      	b.n	8009bbc <tcp_input+0x674>
 8009baa:	4b34      	ldr	r3, [pc, #208]	; (8009c7c <tcp_input+0x734>)
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	2300      	movs	r3, #0
 8009bb0:	69f9      	ldr	r1, [r7, #28]
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	f7ff f9e4 	bl	8008f80 <tcp_recv_null>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009bbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bc0:	f113 0f0d 	cmn.w	r3, #13
 8009bc4:	d051      	beq.n	8009c6a <tcp_input+0x722>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009bc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d003      	beq.n	8009bd6 <tcp_input+0x68e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009bce:	4b2b      	ldr	r3, [pc, #172]	; (8009c7c <tcp_input+0x734>)
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009bd6:	4b2a      	ldr	r3, [pc, #168]	; (8009c80 <tcp_input+0x738>)
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	f003 0320 	and.w	r3, r3, #32
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d030      	beq.n	8009c44 <tcp_input+0x6fc>
          if (pcb->refused_data != NULL) {
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d009      	beq.n	8009bfe <tcp_input+0x6b6>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bee:	7b5a      	ldrb	r2, [r3, #13]
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bf4:	f042 0220 	orr.w	r2, r2, #32
 8009bf8:	b2d2      	uxtb	r2, r2
 8009bfa:	735a      	strb	r2, [r3, #13]
 8009bfc:	e022      	b.n	8009c44 <tcp_input+0x6fc>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c02:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009c06:	d005      	beq.n	8009c14 <tcp_input+0x6cc>
              pcb->rcv_wnd++;
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00b      	beq.n	8009c36 <tcp_input+0x6ee>
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	6918      	ldr	r0, [r3, #16]
 8009c28:	2300      	movs	r3, #0
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	69f9      	ldr	r1, [r7, #28]
 8009c2e:	47a0      	blx	r4
 8009c30:	4603      	mov	r3, r0
 8009c32:	74fb      	strb	r3, [r7, #19]
 8009c34:	e001      	b.n	8009c3a <tcp_input+0x6f2>
 8009c36:	2300      	movs	r3, #0
 8009c38:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009c3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c3e:	f113 0f0d 	cmn.w	r3, #13
 8009c42:	d014      	beq.n	8009c6e <tcp_input+0x726>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009c44:	4b13      	ldr	r3, [pc, #76]	; (8009c94 <tcp_input+0x74c>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009c4a:	69f8      	ldr	r0, [r7, #28]
 8009c4c:	f000 f89a 	bl	8009d84 <tcp_input_delayed_close>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d128      	bne.n	8009ca8 <tcp_input+0x760>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009c56:	69f8      	ldr	r0, [r7, #28]
 8009c58:	f002 f9aa 	bl	800bfb0 <tcp_output>
 8009c5c:	e025      	b.n	8009caa <tcp_input+0x762>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009c5e:	bf00      	nop
 8009c60:	e023      	b.n	8009caa <tcp_input+0x762>
              goto aborted;
 8009c62:	bf00      	nop
 8009c64:	e021      	b.n	8009caa <tcp_input+0x762>
          goto aborted;
 8009c66:	bf00      	nop
 8009c68:	e01f      	b.n	8009caa <tcp_input+0x762>
            goto aborted;
 8009c6a:	bf00      	nop
 8009c6c:	e01d      	b.n	8009caa <tcp_input+0x762>
              goto aborted;
 8009c6e:	bf00      	nop
 8009c70:	e01b      	b.n	8009caa <tcp_input+0x762>
 8009c72:	bf00      	nop
 8009c74:	20006f74 	.word	0x20006f74
 8009c78:	20006f84 	.word	0x20006f84
 8009c7c:	20006fa4 	.word	0x20006fa4
 8009c80:	20006fa1 	.word	0x20006fa1
 8009c84:	20006f9c 	.word	0x20006f9c
 8009c88:	20006fa0 	.word	0x20006fa0
 8009c8c:	20006f9e 	.word	0x20006f9e
 8009c90:	20006e84 	.word	0x20006e84
 8009c94:	20006fa8 	.word	0x20006fa8
 8009c98:	20006f68 	.word	0x20006f68
 8009c9c:	08016fb4 	.word	0x08016fb4
 8009ca0:	08017150 	.word	0x08017150
 8009ca4:	08016ff8 	.word	0x08016ff8
          goto aborted;
 8009ca8:	bf00      	nop
    tcp_input_pcb = NULL;
 8009caa:	4b2c      	ldr	r3, [pc, #176]	; (8009d5c <tcp_input+0x814>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009cb0:	4b2b      	ldr	r3, [pc, #172]	; (8009d60 <tcp_input+0x818>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8009cb6:	4b2b      	ldr	r3, [pc, #172]	; (8009d64 <tcp_input+0x81c>)
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d04a      	beq.n	8009d54 <tcp_input+0x80c>
    {
      pbuf_free(inseg.p);
 8009cbe:	4b29      	ldr	r3, [pc, #164]	; (8009d64 <tcp_input+0x81c>)
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fd ff32 	bl	8007b2c <pbuf_free>
      inseg.p = NULL;
 8009cc8:	4b26      	ldr	r3, [pc, #152]	; (8009d64 <tcp_input+0x81c>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009cce:	e041      	b.n	8009d54 <tcp_input+0x80c>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009cd0:	4b25      	ldr	r3, [pc, #148]	; (8009d68 <tcp_input+0x820>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	899b      	ldrh	r3, [r3, #12]
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7fc fd56 	bl	800678a <lwip_htons>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	f003 0304 	and.w	r3, r3, #4
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d125      	bne.n	8009d34 <tcp_input+0x7ec>
      TCP_STATS_INC(tcp.proterr);
 8009ce8:	4b20      	ldr	r3, [pc, #128]	; (8009d6c <tcp_input+0x824>)
 8009cea:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8009cee:	3301      	adds	r3, #1
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	4b1e      	ldr	r3, [pc, #120]	; (8009d6c <tcp_input+0x824>)
 8009cf4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 8009cf8:	4b1c      	ldr	r3, [pc, #112]	; (8009d6c <tcp_input+0x824>)
 8009cfa:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8009cfe:	3301      	adds	r3, #1
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	4b1a      	ldr	r3, [pc, #104]	; (8009d6c <tcp_input+0x824>)
 8009d04:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d08:	4b19      	ldr	r3, [pc, #100]	; (8009d70 <tcp_input+0x828>)
 8009d0a:	6818      	ldr	r0, [r3, #0]
 8009d0c:	4b19      	ldr	r3, [pc, #100]	; (8009d74 <tcp_input+0x82c>)
 8009d0e:	881b      	ldrh	r3, [r3, #0]
 8009d10:	461a      	mov	r2, r3
 8009d12:	4b19      	ldr	r3, [pc, #100]	; (8009d78 <tcp_input+0x830>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009d18:	4b13      	ldr	r3, [pc, #76]	; (8009d68 <tcp_input+0x820>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d1c:	885b      	ldrh	r3, [r3, #2]
 8009d1e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009d20:	4a11      	ldr	r2, [pc, #68]	; (8009d68 <tcp_input+0x820>)
 8009d22:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d24:	8812      	ldrh	r2, [r2, #0]
 8009d26:	b292      	uxth	r2, r2
 8009d28:	9201      	str	r2, [sp, #4]
 8009d2a:	9300      	str	r3, [sp, #0]
 8009d2c:	4b13      	ldr	r3, [pc, #76]	; (8009d7c <tcp_input+0x834>)
 8009d2e:	4a14      	ldr	r2, [pc, #80]	; (8009d80 <tcp_input+0x838>)
 8009d30:	f002 fbcc 	bl	800c4cc <tcp_rst>
    pbuf_free(p);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f7fd fef9 	bl	8007b2c <pbuf_free>
  return;
 8009d3a:	e00b      	b.n	8009d54 <tcp_input+0x80c>
dropped:
  TCP_STATS_INC(tcp.drop);
 8009d3c:	4b0b      	ldr	r3, [pc, #44]	; (8009d6c <tcp_input+0x824>)
 8009d3e:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8009d42:	3301      	adds	r3, #1
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	4b09      	ldr	r3, [pc, #36]	; (8009d6c <tcp_input+0x824>)
 8009d48:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7fd feed 	bl	8007b2c <pbuf_free>
 8009d52:	e000      	b.n	8009d56 <tcp_input+0x80e>
  return;
 8009d54:	bf00      	nop
}
 8009d56:	3724      	adds	r7, #36	; 0x24
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd90      	pop	{r4, r7, pc}
 8009d5c:	20006fa8 	.word	0x20006fa8
 8009d60:	20006fa4 	.word	0x20006fa4
 8009d64:	20006f74 	.word	0x20006f74
 8009d68:	20006f84 	.word	0x20006f84
 8009d6c:	20006e84 	.word	0x20006e84
 8009d70:	20006f98 	.word	0x20006f98
 8009d74:	20006f9e 	.word	0x20006f9e
 8009d78:	20006f94 	.word	0x20006f94
 8009d7c:	200038cc 	.word	0x200038cc
 8009d80:	200038d0 	.word	0x200038d0

08009d84 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8009d8c:	4b14      	ldr	r3, [pc, #80]	; (8009de0 <tcp_input_delayed_close+0x5c>)
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	f003 0310 	and.w	r3, r3, #16
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d01d      	beq.n	8009dd4 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	7e9b      	ldrb	r3, [r3, #26]
 8009d9c:	f003 0310 	and.w	r3, r3, #16
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10d      	bne.n	8009dc0 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d008      	beq.n	8009dc0 <tcp_input_delayed_close+0x3c>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	6912      	ldr	r2, [r2, #16]
 8009db8:	f06f 010e 	mvn.w	r1, #14
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009dc0:	6879      	ldr	r1, [r7, #4]
 8009dc2:	4808      	ldr	r0, [pc, #32]	; (8009de4 <tcp_input_delayed_close+0x60>)
 8009dc4:	f7ff faa8 	bl	8009318 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8009dc8:	6879      	ldr	r1, [r7, #4]
 8009dca:	2001      	movs	r0, #1
 8009dcc:	f7fd f970 	bl	80070b0 <memp_free>
    return 1;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e000      	b.n	8009dd6 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	20006fa1 	.word	0x20006fa1
 8009de4:	20006f68 	.word	0x20006f68

08009de8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b088      	sub	sp, #32
 8009dec:	af02      	add	r7, sp, #8
 8009dee:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009df0:	4b67      	ldr	r3, [pc, #412]	; (8009f90 <tcp_listen_input+0x1a8>)
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	f003 0304 	and.w	r3, r3, #4
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f040 80c3 	bne.w	8009f84 <tcp_listen_input+0x19c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009dfe:	4b64      	ldr	r3, [pc, #400]	; (8009f90 <tcp_listen_input+0x1a8>)
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	f003 0310 	and.w	r3, r3, #16
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d016      	beq.n	8009e38 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e0a:	4b62      	ldr	r3, [pc, #392]	; (8009f94 <tcp_listen_input+0x1ac>)
 8009e0c:	6818      	ldr	r0, [r3, #0]
 8009e0e:	4b62      	ldr	r3, [pc, #392]	; (8009f98 <tcp_listen_input+0x1b0>)
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	461a      	mov	r2, r3
 8009e14:	4b61      	ldr	r3, [pc, #388]	; (8009f9c <tcp_listen_input+0x1b4>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e1a:	4b61      	ldr	r3, [pc, #388]	; (8009fa0 <tcp_listen_input+0x1b8>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e1e:	885b      	ldrh	r3, [r3, #2]
 8009e20:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e22:	4a5f      	ldr	r2, [pc, #380]	; (8009fa0 <tcp_listen_input+0x1b8>)
 8009e24:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e26:	8812      	ldrh	r2, [r2, #0]
 8009e28:	b292      	uxth	r2, r2
 8009e2a:	9201      	str	r2, [sp, #4]
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	4b5d      	ldr	r3, [pc, #372]	; (8009fa4 <tcp_listen_input+0x1bc>)
 8009e30:	4a5d      	ldr	r2, [pc, #372]	; (8009fa8 <tcp_listen_input+0x1c0>)
 8009e32:	f002 fb4b 	bl	800c4cc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009e36:	e0a7      	b.n	8009f88 <tcp_listen_input+0x1a0>
  } else if (flags & TCP_SYN) {
 8009e38:	4b55      	ldr	r3, [pc, #340]	; (8009f90 <tcp_listen_input+0x1a8>)
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	f003 0302 	and.w	r3, r3, #2
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f000 80a1 	beq.w	8009f88 <tcp_listen_input+0x1a0>
    npcb = tcp_alloc(pcb->prio);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	7d5b      	ldrb	r3, [r3, #21]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7ff f976 	bl	800913c <tcp_alloc>
 8009e50:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d119      	bne.n	8009e8c <tcp_listen_input+0xa4>
      TCP_STATS_INC(tcp.memerr);
 8009e58:	4b54      	ldr	r3, [pc, #336]	; (8009fac <tcp_listen_input+0x1c4>)
 8009e5a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8009e5e:	3301      	adds	r3, #1
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	4b52      	ldr	r3, [pc, #328]	; (8009fac <tcp_listen_input+0x1c4>)
 8009e64:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00a      	beq.n	8009e86 <tcp_listen_input+0x9e>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	6910      	ldr	r0, [r2, #16]
 8009e78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	4798      	blx	r3
 8009e80:	4603      	mov	r3, r0
 8009e82:	73bb      	strb	r3, [r7, #14]
      return;
 8009e84:	e081      	b.n	8009f8a <tcp_listen_input+0x1a2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009e86:	23f0      	movs	r3, #240	; 0xf0
 8009e88:	73bb      	strb	r3, [r7, #14]
      return;
 8009e8a:	e07e      	b.n	8009f8a <tcp_listen_input+0x1a2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009e8c:	4b48      	ldr	r3, [pc, #288]	; (8009fb0 <tcp_listen_input+0x1c8>)
 8009e8e:	695a      	ldr	r2, [r3, #20]
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009e94:	4b46      	ldr	r3, [pc, #280]	; (8009fb0 <tcp_listen_input+0x1c8>)
 8009e96:	691a      	ldr	r2, [r3, #16]
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	8ada      	ldrh	r2, [r3, #22]
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009ea4:	4b3e      	ldr	r3, [pc, #248]	; (8009fa0 <tcp_listen_input+0x1b8>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	881b      	ldrh	r3, [r3, #0]
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	2203      	movs	r2, #3
 8009eb4:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009eb6:	4b39      	ldr	r3, [pc, #228]	; (8009f9c <tcp_listen_input+0x1b4>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	1c5a      	adds	r2, r3, #1
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009ec8:	6978      	ldr	r0, [r7, #20]
 8009eca:	f7ff faa1 	bl	8009410 <tcp_next_iss>
 8009ece:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009ee8:	4b2c      	ldr	r3, [pc, #176]	; (8009f9c <tcp_listen_input+0x1b4>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	1e5a      	subs	r2, r3, #1
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	691a      	ldr	r2, [r3, #16]
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	7a1b      	ldrb	r3, [r3, #8]
 8009f04:	f003 030c 	and.w	r3, r3, #12
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009f0e:	4b29      	ldr	r3, [pc, #164]	; (8009fb4 <tcp_listen_input+0x1cc>)
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	60da      	str	r2, [r3, #12]
 8009f16:	4a27      	ldr	r2, [pc, #156]	; (8009fb4 <tcp_listen_input+0x1cc>)
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	6013      	str	r3, [r2, #0]
 8009f1c:	f002 fd3c 	bl	800c998 <tcp_timer_needed>
 8009f20:	4b25      	ldr	r3, [pc, #148]	; (8009fb8 <tcp_listen_input+0x1d0>)
 8009f22:	2201      	movs	r2, #1
 8009f24:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009f26:	6978      	ldr	r0, [r7, #20]
 8009f28:	f001 fd0e 	bl	800b948 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009f2c:	4b1c      	ldr	r3, [pc, #112]	; (8009fa0 <tcp_listen_input+0x1b8>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	89db      	ldrh	r3, [r3, #14]
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	4619      	mov	r1, r3
 8009f50:	4610      	mov	r0, r2
 8009f52:	f7ff fa73 	bl	800943c <tcp_eff_send_mss_impl>
 8009f56:	4603      	mov	r3, r0
 8009f58:	461a      	mov	r2, r3
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009f5e:	2112      	movs	r1, #18
 8009f60:	6978      	ldr	r0, [r7, #20]
 8009f62:	f001 feb3 	bl	800bccc <tcp_enqueue_flags>
 8009f66:	4603      	mov	r3, r0
 8009f68:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d004      	beq.n	8009f7c <tcp_listen_input+0x194>
      tcp_abandon(npcb, 0);
 8009f72:	2100      	movs	r1, #0
 8009f74:	6978      	ldr	r0, [r7, #20]
 8009f76:	f7fe fac5 	bl	8008504 <tcp_abandon>
      return;
 8009f7a:	e006      	b.n	8009f8a <tcp_listen_input+0x1a2>
    tcp_output(npcb);
 8009f7c:	6978      	ldr	r0, [r7, #20]
 8009f7e:	f002 f817 	bl	800bfb0 <tcp_output>
  return;
 8009f82:	e001      	b.n	8009f88 <tcp_listen_input+0x1a0>
    return;
 8009f84:	bf00      	nop
 8009f86:	e000      	b.n	8009f8a <tcp_listen_input+0x1a2>
  return;
 8009f88:	bf00      	nop
}
 8009f8a:	3718      	adds	r7, #24
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	20006fa0 	.word	0x20006fa0
 8009f94:	20006f98 	.word	0x20006f98
 8009f98:	20006f9e 	.word	0x20006f9e
 8009f9c:	20006f94 	.word	0x20006f94
 8009fa0:	20006f84 	.word	0x20006f84
 8009fa4:	200038cc 	.word	0x200038cc
 8009fa8:	200038d0 	.word	0x200038d0
 8009fac:	20006e84 	.word	0x20006e84
 8009fb0:	200038bc 	.word	0x200038bc
 8009fb4:	20006f68 	.word	0x20006f68
 8009fb8:	20006f70 	.word	0x20006f70

08009fbc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af02      	add	r7, sp, #8
 8009fc2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009fc4:	4b29      	ldr	r3, [pc, #164]	; (800a06c <tcp_timewait_input+0xb0>)
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	f003 0304 	and.w	r3, r3, #4
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d146      	bne.n	800a05e <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009fd0:	4b26      	ldr	r3, [pc, #152]	; (800a06c <tcp_timewait_input+0xb0>)
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	f003 0302 	and.w	r3, r3, #2
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d027      	beq.n	800a02c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009fdc:	4b24      	ldr	r3, [pc, #144]	; (800a070 <tcp_timewait_input+0xb4>)
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe4:	1ad3      	subs	r3, r2, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	db2a      	blt.n	800a040 <tcp_timewait_input+0x84>
 8009fea:	4b21      	ldr	r3, [pc, #132]	; (800a070 <tcp_timewait_input+0xb4>)
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff2:	6879      	ldr	r1, [r7, #4]
 8009ff4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009ff6:	440b      	add	r3, r1
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	dc20      	bgt.n	800a040 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ffe:	4b1d      	ldr	r3, [pc, #116]	; (800a074 <tcp_timewait_input+0xb8>)
 800a000:	6818      	ldr	r0, [r3, #0]
 800a002:	4b1d      	ldr	r3, [pc, #116]	; (800a078 <tcp_timewait_input+0xbc>)
 800a004:	881b      	ldrh	r3, [r3, #0]
 800a006:	461a      	mov	r2, r3
 800a008:	4b19      	ldr	r3, [pc, #100]	; (800a070 <tcp_timewait_input+0xb4>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a00e:	4b1b      	ldr	r3, [pc, #108]	; (800a07c <tcp_timewait_input+0xc0>)
 800a010:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a012:	885b      	ldrh	r3, [r3, #2]
 800a014:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a016:	4a19      	ldr	r2, [pc, #100]	; (800a07c <tcp_timewait_input+0xc0>)
 800a018:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a01a:	8812      	ldrh	r2, [r2, #0]
 800a01c:	b292      	uxth	r2, r2
 800a01e:	9201      	str	r2, [sp, #4]
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	4b17      	ldr	r3, [pc, #92]	; (800a080 <tcp_timewait_input+0xc4>)
 800a024:	4a17      	ldr	r2, [pc, #92]	; (800a084 <tcp_timewait_input+0xc8>)
 800a026:	f002 fa51 	bl	800c4cc <tcp_rst>
      return;
 800a02a:	e01b      	b.n	800a064 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 800a02c:	4b0f      	ldr	r3, [pc, #60]	; (800a06c <tcp_timewait_input+0xb0>)
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	f003 0301 	and.w	r3, r3, #1
 800a034:	2b00      	cmp	r3, #0
 800a036:	d003      	beq.n	800a040 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a038:	4b13      	ldr	r3, [pc, #76]	; (800a088 <tcp_timewait_input+0xcc>)
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a040:	4b0d      	ldr	r3, [pc, #52]	; (800a078 <tcp_timewait_input+0xbc>)
 800a042:	881b      	ldrh	r3, [r3, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00c      	beq.n	800a062 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	7e9b      	ldrb	r3, [r3, #26]
 800a04c:	f043 0302 	orr.w	r3, r3, #2
 800a050:	b2da      	uxtb	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f001 ffaa 	bl	800bfb0 <tcp_output>
  }
  return;
 800a05c:	e001      	b.n	800a062 <tcp_timewait_input+0xa6>
    return;
 800a05e:	bf00      	nop
 800a060:	e000      	b.n	800a064 <tcp_timewait_input+0xa8>
  return;
 800a062:	bf00      	nop
}
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20006fa0 	.word	0x20006fa0
 800a070:	20006f94 	.word	0x20006f94
 800a074:	20006f98 	.word	0x20006f98
 800a078:	20006f9e 	.word	0x20006f9e
 800a07c:	20006f84 	.word	0x20006f84
 800a080:	200038cc 	.word	0x200038cc
 800a084:	200038d0 	.word	0x200038d0
 800a088:	20006f5c 	.word	0x20006f5c

0800a08c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b08a      	sub	sp, #40	; 0x28
 800a090:	af02      	add	r7, sp, #8
 800a092:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a094:	2300      	movs	r3, #0
 800a096:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a098:	2300      	movs	r3, #0
 800a09a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a09c:	4b93      	ldr	r3, [pc, #588]	; (800a2ec <tcp_process+0x260>)
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	f003 0304 	and.w	r3, r3, #4
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d04e      	beq.n	800a146 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	7d1b      	ldrb	r3, [r3, #20]
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d108      	bne.n	800a0c2 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0b4:	4b8e      	ldr	r3, [pc, #568]	; (800a2f0 <tcp_process+0x264>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d123      	bne.n	800a104 <tcp_process+0x78>
        acceptable = 1;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	76fb      	strb	r3, [r7, #27]
 800a0c0:	e020      	b.n	800a104 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0c6:	4b8b      	ldr	r3, [pc, #556]	; (800a2f4 <tcp_process+0x268>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d102      	bne.n	800a0d4 <tcp_process+0x48>
        acceptable = 1;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	76fb      	strb	r3, [r7, #27]
 800a0d2:	e017      	b.n	800a104 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a0d4:	4b87      	ldr	r3, [pc, #540]	; (800a2f4 <tcp_process+0x268>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0dc:	1ad3      	subs	r3, r2, r3
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	db10      	blt.n	800a104 <tcp_process+0x78>
 800a0e2:	4b84      	ldr	r3, [pc, #528]	; (800a2f4 <tcp_process+0x268>)
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ea:	6879      	ldr	r1, [r7, #4]
 800a0ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a0ee:	440b      	add	r3, r1
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	dc06      	bgt.n	800a104 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	7e9b      	ldrb	r3, [r3, #26]
 800a0fa:	f043 0302 	orr.w	r3, r3, #2
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a104:	7efb      	ldrb	r3, [r7, #27]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d01b      	beq.n	800a142 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	7d1b      	ldrb	r3, [r3, #20]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d106      	bne.n	800a120 <tcp_process+0x94>
 800a112:	4b79      	ldr	r3, [pc, #484]	; (800a2f8 <tcp_process+0x26c>)
 800a114:	f240 22e7 	movw	r2, #743	; 0x2e7
 800a118:	4978      	ldr	r1, [pc, #480]	; (800a2fc <tcp_process+0x270>)
 800a11a:	4879      	ldr	r0, [pc, #484]	; (800a300 <tcp_process+0x274>)
 800a11c:	f008 fa50 	bl	80125c0 <iprintf>
      recv_flags |= TF_RESET;
 800a120:	4b78      	ldr	r3, [pc, #480]	; (800a304 <tcp_process+0x278>)
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	f043 0308 	orr.w	r3, r3, #8
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	4b76      	ldr	r3, [pc, #472]	; (800a304 <tcp_process+0x278>)
 800a12c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	7e9b      	ldrb	r3, [r3, #26]
 800a132:	f023 0301 	bic.w	r3, r3, #1
 800a136:	b2da      	uxtb	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800a13c:	f06f 030d 	mvn.w	r3, #13
 800a140:	e348      	b.n	800a7d4 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	e346      	b.n	800a7d4 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a146:	4b69      	ldr	r3, [pc, #420]	; (800a2ec <tcp_process+0x260>)
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	f003 0302 	and.w	r3, r3, #2
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d010      	beq.n	800a174 <tcp_process+0xe8>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	7d1b      	ldrb	r3, [r3, #20]
 800a156:	2b02      	cmp	r3, #2
 800a158:	d00c      	beq.n	800a174 <tcp_process+0xe8>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	7d1b      	ldrb	r3, [r3, #20]
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d008      	beq.n	800a174 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	7e9b      	ldrb	r3, [r3, #26]
 800a166:	f043 0302 	orr.w	r3, r3, #2
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	e32f      	b.n	800a7d4 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	7e9b      	ldrb	r3, [r3, #26]
 800a178:	f003 0310 	and.w	r3, r3, #16
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d103      	bne.n	800a188 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a180:	4b61      	ldr	r3, [pc, #388]	; (800a308 <tcp_process+0x27c>)
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f001 fbd9 	bl	800b948 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	7d1b      	ldrb	r3, [r3, #20]
 800a19a:	3b02      	subs	r3, #2
 800a19c:	2b07      	cmp	r3, #7
 800a19e:	f200 8309 	bhi.w	800a7b4 <tcp_process+0x728>
 800a1a2:	a201      	add	r2, pc, #4	; (adr r2, 800a1a8 <tcp_process+0x11c>)
 800a1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a8:	0800a1c9 	.word	0x0800a1c9
 800a1ac:	0800a3bf 	.word	0x0800a3bf
 800a1b0:	0800a517 	.word	0x0800a517
 800a1b4:	0800a541 	.word	0x0800a541
 800a1b8:	0800a663 	.word	0x0800a663
 800a1bc:	0800a517 	.word	0x0800a517
 800a1c0:	0800a6ef 	.word	0x0800a6ef
 800a1c4:	0800a77f 	.word	0x0800a77f
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a1c8:	4b48      	ldr	r3, [pc, #288]	; (800a2ec <tcp_process+0x260>)
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	f003 0310 	and.w	r3, r3, #16
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f000 80ca 	beq.w	800a36a <tcp_process+0x2de>
 800a1d6:	4b45      	ldr	r3, [pc, #276]	; (800a2ec <tcp_process+0x260>)
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	f003 0302 	and.w	r3, r3, #2
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f000 80c3 	beq.w	800a36a <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1e8:	1c5a      	adds	r2, r3, #1
 800a1ea:	4b41      	ldr	r3, [pc, #260]	; (800a2f0 <tcp_process+0x264>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	f040 80bb 	bne.w	800a36a <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 800a1f4:	4b3f      	ldr	r3, [pc, #252]	; (800a2f4 <tcp_process+0x268>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	1c5a      	adds	r2, r3, #1
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800a206:	4b3a      	ldr	r3, [pc, #232]	; (800a2f0 <tcp_process+0x264>)
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800a20e:	4b3f      	ldr	r3, [pc, #252]	; (800a30c <tcp_process+0x280>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	89db      	ldrh	r3, [r3, #14]
 800a214:	b29a      	uxth	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a228:	4b32      	ldr	r3, [pc, #200]	; (800a2f4 <tcp_process+0x268>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	1e5a      	subs	r2, r3, #1
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2204      	movs	r2, #4
 800a236:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	3304      	adds	r3, #4
 800a240:	4619      	mov	r1, r3
 800a242:	4610      	mov	r0, r2
 800a244:	f7ff f8fa 	bl	800943c <tcp_eff_send_mss_impl>
 800a248:	4603      	mov	r3, r0
 800a24a:	461a      	mov	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a254:	005b      	lsls	r3, r3, #1
 800a256:	f241 121c 	movw	r2, #4380	; 0x111c
 800a25a:	429a      	cmp	r2, r3
 800a25c:	bf38      	it	cc
 800a25e:	461a      	movcc	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4293      	cmp	r3, r2
 800a268:	bf28      	it	cs
 800a26a:	4613      	movcs	r3, r2
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d106      	bne.n	800a28c <tcp_process+0x200>
 800a27e:	4b1e      	ldr	r3, [pc, #120]	; (800a2f8 <tcp_process+0x26c>)
 800a280:	f240 321a 	movw	r2, #794	; 0x31a
 800a284:	4922      	ldr	r1, [pc, #136]	; (800a310 <tcp_process+0x284>)
 800a286:	481e      	ldr	r0, [pc, #120]	; (800a300 <tcp_process+0x274>)
 800a288:	f008 f99a 	bl	80125c0 <iprintf>
      --pcb->snd_queuelen;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a292:	3b01      	subs	r3, #1
 800a294:	b29a      	uxth	r2, r3
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2a0:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d111      	bne.n	800a2cc <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2ac:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d106      	bne.n	800a2c2 <tcp_process+0x236>
 800a2b4:	4b10      	ldr	r3, [pc, #64]	; (800a2f8 <tcp_process+0x26c>)
 800a2b6:	f240 3222 	movw	r2, #802	; 0x322
 800a2ba:	4916      	ldr	r1, [pc, #88]	; (800a314 <tcp_process+0x288>)
 800a2bc:	4810      	ldr	r0, [pc, #64]	; (800a300 <tcp_process+0x274>)
 800a2be:	f008 f97f 	bl	80125c0 <iprintf>
        pcb->unsent = rseg->next;
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	669a      	str	r2, [r3, #104]	; 0x68
 800a2ca:	e003      	b.n	800a2d4 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800a2d4:	69f8      	ldr	r0, [r7, #28]
 800a2d6:	f7fe fe1f 	bl	8008f18 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d11a      	bne.n	800a318 <tcp_process+0x28c>
        pcb->rtime = -1;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2e8:	861a      	strh	r2, [r3, #48]	; 0x30
 800a2ea:	e01c      	b.n	800a326 <tcp_process+0x29a>
 800a2ec:	20006fa0 	.word	0x20006fa0
 800a2f0:	20006f98 	.word	0x20006f98
 800a2f4:	20006f94 	.word	0x20006f94
 800a2f8:	08016fb4 	.word	0x08016fb4
 800a2fc:	0801716c 	.word	0x0801716c
 800a300:	08016ff8 	.word	0x08016ff8
 800a304:	20006fa1 	.word	0x20006fa1
 800a308:	20006f5c 	.word	0x20006f5c
 800a30c:	20006f84 	.word	0x20006f84
 800a310:	0801718c 	.word	0x0801718c
 800a314:	080171a4 	.word	0x080171a4
      } else {
        pcb->rtime = 0;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00a      	beq.n	800a346 <tcp_process+0x2ba>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	6910      	ldr	r0, [r2, #16]
 800a33a:	2200      	movs	r2, #0
 800a33c:	6879      	ldr	r1, [r7, #4]
 800a33e:	4798      	blx	r3
 800a340:	4603      	mov	r3, r0
 800a342:	76bb      	strb	r3, [r7, #26]
 800a344:	e001      	b.n	800a34a <tcp_process+0x2be>
 800a346:	2300      	movs	r3, #0
 800a348:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800a34a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a34e:	f113 0f0d 	cmn.w	r3, #13
 800a352:	d102      	bne.n	800a35a <tcp_process+0x2ce>
        return ERR_ABRT;
 800a354:	f06f 030c 	mvn.w	r3, #12
 800a358:	e23c      	b.n	800a7d4 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	7e9b      	ldrb	r3, [r3, #26]
 800a35e:	f043 0302 	orr.w	r3, r3, #2
 800a362:	b2da      	uxtb	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800a368:	e226      	b.n	800a7b8 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 800a36a:	4b93      	ldr	r3, [pc, #588]	; (800a5b8 <tcp_process+0x52c>)
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	f003 0310 	and.w	r3, r3, #16
 800a372:	2b00      	cmp	r3, #0
 800a374:	f000 8220 	beq.w	800a7b8 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a378:	4b90      	ldr	r3, [pc, #576]	; (800a5bc <tcp_process+0x530>)
 800a37a:	6818      	ldr	r0, [r3, #0]
 800a37c:	4b90      	ldr	r3, [pc, #576]	; (800a5c0 <tcp_process+0x534>)
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	461a      	mov	r2, r3
 800a382:	4b90      	ldr	r3, [pc, #576]	; (800a5c4 <tcp_process+0x538>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a388:	4b8f      	ldr	r3, [pc, #572]	; (800a5c8 <tcp_process+0x53c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a38c:	885b      	ldrh	r3, [r3, #2]
 800a38e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a390:	4a8d      	ldr	r2, [pc, #564]	; (800a5c8 <tcp_process+0x53c>)
 800a392:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a394:	8812      	ldrh	r2, [r2, #0]
 800a396:	b292      	uxth	r2, r2
 800a398:	9201      	str	r2, [sp, #4]
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	4b8b      	ldr	r3, [pc, #556]	; (800a5cc <tcp_process+0x540>)
 800a39e:	4a8c      	ldr	r2, [pc, #560]	; (800a5d0 <tcp_process+0x544>)
 800a3a0:	f002 f894 	bl	800c4cc <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3aa:	2b05      	cmp	r3, #5
 800a3ac:	f200 8204 	bhi.w	800a7b8 <tcp_process+0x72c>
        pcb->rtime = 0;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f002 f908 	bl	800c5cc <tcp_rexmit_rto>
    break;
 800a3bc:	e1fc      	b.n	800a7b8 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800a3be:	4b7e      	ldr	r3, [pc, #504]	; (800a5b8 <tcp_process+0x52c>)
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	f003 0310 	and.w	r3, r3, #16
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f000 8091 	beq.w	800a4ee <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800a3cc:	4b7b      	ldr	r3, [pc, #492]	; (800a5bc <tcp_process+0x530>)
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	db71      	blt.n	800a4c0 <tcp_process+0x434>
 800a3dc:	4b77      	ldr	r3, [pc, #476]	; (800a5bc <tcp_process+0x530>)
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	dc6a      	bgt.n	800a4c0 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2204      	movs	r2, #4
 800a3ee:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00b      	beq.n	800a410 <tcp_process+0x384>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3fc:	699b      	ldr	r3, [r3, #24]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d106      	bne.n	800a410 <tcp_process+0x384>
 800a402:	4b74      	ldr	r3, [pc, #464]	; (800a5d4 <tcp_process+0x548>)
 800a404:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a408:	4973      	ldr	r1, [pc, #460]	; (800a5d8 <tcp_process+0x54c>)
 800a40a:	4874      	ldr	r0, [pc, #464]	; (800a5dc <tcp_process+0x550>)
 800a40c:	f008 f8d8 	bl	80125c0 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a414:	2b00      	cmp	r3, #0
 800a416:	d102      	bne.n	800a41e <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800a418:	23fa      	movs	r3, #250	; 0xfa
 800a41a:	76bb      	strb	r3, [r7, #26]
 800a41c:	e011      	b.n	800a442 <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00a      	beq.n	800a43e <tcp_process+0x3b2>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	6910      	ldr	r0, [r2, #16]
 800a432:	2200      	movs	r2, #0
 800a434:	6879      	ldr	r1, [r7, #4]
 800a436:	4798      	blx	r3
 800a438:	4603      	mov	r3, r0
 800a43a:	76bb      	strb	r3, [r7, #26]
 800a43c:	e001      	b.n	800a442 <tcp_process+0x3b6>
 800a43e:	23f0      	movs	r3, #240	; 0xf0
 800a440:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800a442:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00a      	beq.n	800a460 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800a44a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a44e:	f113 0f0d 	cmn.w	r3, #13
 800a452:	d002      	beq.n	800a45a <tcp_process+0x3ce>
            tcp_abort(pcb);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7fe f907 	bl	8008668 <tcp_abort>
          }
          return ERR_ABRT;
 800a45a:	f06f 030c 	mvn.w	r3, #12
 800a45e:	e1b9      	b.n	800a7d4 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 fa3d 	bl	800a8e0 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800a466:	4b5e      	ldr	r3, [pc, #376]	; (800a5e0 <tcp_process+0x554>)
 800a468:	881b      	ldrh	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d005      	beq.n	800a47a <tcp_process+0x3ee>
          recv_acked--;
 800a46e:	4b5c      	ldr	r3, [pc, #368]	; (800a5e0 <tcp_process+0x554>)
 800a470:	881b      	ldrh	r3, [r3, #0]
 800a472:	3b01      	subs	r3, #1
 800a474:	b29a      	uxth	r2, r3
 800a476:	4b5a      	ldr	r3, [pc, #360]	; (800a5e0 <tcp_process+0x554>)
 800a478:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a47e:	005b      	lsls	r3, r3, #1
 800a480:	f241 121c 	movw	r2, #4380	; 0x111c
 800a484:	429a      	cmp	r2, r3
 800a486:	bf38      	it	cc
 800a488:	461a      	movcc	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4293      	cmp	r3, r2
 800a492:	bf28      	it	cs
 800a494:	4613      	movcs	r3, r2
 800a496:	b29a      	uxth	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800a49e:	4b51      	ldr	r3, [pc, #324]	; (800a5e4 <tcp_process+0x558>)
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	f003 0320 	and.w	r3, r3, #32
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d034      	beq.n	800a514 <tcp_process+0x488>
          tcp_ack_now(pcb);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	7e9b      	ldrb	r3, [r3, #26]
 800a4ae:	f043 0302 	orr.w	r3, r3, #2
 800a4b2:	b2da      	uxtb	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2207      	movs	r2, #7
 800a4bc:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800a4be:	e029      	b.n	800a514 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4c0:	4b3e      	ldr	r3, [pc, #248]	; (800a5bc <tcp_process+0x530>)
 800a4c2:	6818      	ldr	r0, [r3, #0]
 800a4c4:	4b3e      	ldr	r3, [pc, #248]	; (800a5c0 <tcp_process+0x534>)
 800a4c6:	881b      	ldrh	r3, [r3, #0]
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	4b3e      	ldr	r3, [pc, #248]	; (800a5c4 <tcp_process+0x538>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a4d0:	4b3d      	ldr	r3, [pc, #244]	; (800a5c8 <tcp_process+0x53c>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4d4:	885b      	ldrh	r3, [r3, #2]
 800a4d6:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a4d8:	4a3b      	ldr	r2, [pc, #236]	; (800a5c8 <tcp_process+0x53c>)
 800a4da:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4dc:	8812      	ldrh	r2, [r2, #0]
 800a4de:	b292      	uxth	r2, r2
 800a4e0:	9201      	str	r2, [sp, #4]
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	4b39      	ldr	r3, [pc, #228]	; (800a5cc <tcp_process+0x540>)
 800a4e6:	4a3a      	ldr	r2, [pc, #232]	; (800a5d0 <tcp_process+0x544>)
 800a4e8:	f001 fff0 	bl	800c4cc <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800a4ec:	e166      	b.n	800a7bc <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a4ee:	4b32      	ldr	r3, [pc, #200]	; (800a5b8 <tcp_process+0x52c>)
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	f003 0302 	and.w	r3, r3, #2
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	f000 8160 	beq.w	800a7bc <tcp_process+0x730>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a500:	1e5a      	subs	r2, r3, #1
 800a502:	4b30      	ldr	r3, [pc, #192]	; (800a5c4 <tcp_process+0x538>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	429a      	cmp	r2, r3
 800a508:	f040 8158 	bne.w	800a7bc <tcp_process+0x730>
      tcp_rexmit(pcb);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f002 f893 	bl	800c638 <tcp_rexmit>
    break;
 800a512:	e153      	b.n	800a7bc <tcp_process+0x730>
 800a514:	e152      	b.n	800a7bc <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f9e2 	bl	800a8e0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a51c:	4b31      	ldr	r3, [pc, #196]	; (800a5e4 <tcp_process+0x558>)
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	f003 0320 	and.w	r3, r3, #32
 800a524:	2b00      	cmp	r3, #0
 800a526:	f000 814b 	beq.w	800a7c0 <tcp_process+0x734>
      tcp_ack_now(pcb);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	7e9b      	ldrb	r3, [r3, #26]
 800a52e:	f043 0302 	orr.w	r3, r3, #2
 800a532:	b2da      	uxtb	r2, r3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2207      	movs	r2, #7
 800a53c:	751a      	strb	r2, [r3, #20]
    }
    break;
 800a53e:	e13f      	b.n	800a7c0 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f9cd 	bl	800a8e0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800a546:	4b27      	ldr	r3, [pc, #156]	; (800a5e4 <tcp_process+0x558>)
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	f003 0320 	and.w	r3, r3, #32
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d070      	beq.n	800a634 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a552:	4b19      	ldr	r3, [pc, #100]	; (800a5b8 <tcp_process+0x52c>)
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	f003 0310 	and.w	r3, r3, #16
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d05f      	beq.n	800a61e <tcp_process+0x592>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a562:	4b16      	ldr	r3, [pc, #88]	; (800a5bc <tcp_process+0x530>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	429a      	cmp	r2, r3
 800a568:	d159      	bne.n	800a61e <tcp_process+0x592>
          pcb->unsent == NULL) {
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d155      	bne.n	800a61e <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	7e9b      	ldrb	r3, [r3, #26]
 800a576:	f043 0302 	orr.w	r3, r3, #2
 800a57a:	b2da      	uxtb	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f7fe fe87 	bl	8009294 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a586:	4b18      	ldr	r3, [pc, #96]	; (800a5e8 <tcp_process+0x55c>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d105      	bne.n	800a59c <tcp_process+0x510>
 800a590:	4b15      	ldr	r3, [pc, #84]	; (800a5e8 <tcp_process+0x55c>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	4a14      	ldr	r2, [pc, #80]	; (800a5e8 <tcp_process+0x55c>)
 800a598:	6013      	str	r3, [r2, #0]
 800a59a:	e02d      	b.n	800a5f8 <tcp_process+0x56c>
 800a59c:	4b12      	ldr	r3, [pc, #72]	; (800a5e8 <tcp_process+0x55c>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	617b      	str	r3, [r7, #20]
 800a5a2:	e026      	b.n	800a5f2 <tcp_process+0x566>
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d11e      	bne.n	800a5ec <tcp_process+0x560>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68da      	ldr	r2, [r3, #12]
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	60da      	str	r2, [r3, #12]
 800a5b6:	e01f      	b.n	800a5f8 <tcp_process+0x56c>
 800a5b8:	20006fa0 	.word	0x20006fa0
 800a5bc:	20006f98 	.word	0x20006f98
 800a5c0:	20006f9e 	.word	0x20006f9e
 800a5c4:	20006f94 	.word	0x20006f94
 800a5c8:	20006f84 	.word	0x20006f84
 800a5cc:	200038cc 	.word	0x200038cc
 800a5d0:	200038d0 	.word	0x200038d0
 800a5d4:	08016fb4 	.word	0x08016fb4
 800a5d8:	080171b8 	.word	0x080171b8
 800a5dc:	08016ff8 	.word	0x08016ff8
 800a5e0:	20006f9c 	.word	0x20006f9c
 800a5e4:	20006fa1 	.word	0x20006fa1
 800a5e8:	20006f68 	.word	0x20006f68
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	617b      	str	r3, [r7, #20]
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d1d5      	bne.n	800a5a4 <tcp_process+0x518>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	60da      	str	r2, [r3, #12]
 800a5fe:	4b77      	ldr	r3, [pc, #476]	; (800a7dc <tcp_process+0x750>)
 800a600:	2201      	movs	r2, #1
 800a602:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	220a      	movs	r2, #10
 800a608:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a60a:	4b75      	ldr	r3, [pc, #468]	; (800a7e0 <tcp_process+0x754>)
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	60da      	str	r2, [r3, #12]
 800a612:	4a73      	ldr	r2, [pc, #460]	; (800a7e0 <tcp_process+0x754>)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6013      	str	r3, [r2, #0]
 800a618:	f002 f9be 	bl	800c998 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800a61c:	e0d2      	b.n	800a7c4 <tcp_process+0x738>
        tcp_ack_now(pcb);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	7e9b      	ldrb	r3, [r3, #26]
 800a622:	f043 0302 	orr.w	r3, r3, #2
 800a626:	b2da      	uxtb	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2208      	movs	r2, #8
 800a630:	751a      	strb	r2, [r3, #20]
    break;
 800a632:	e0c7      	b.n	800a7c4 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a634:	4b6b      	ldr	r3, [pc, #428]	; (800a7e4 <tcp_process+0x758>)
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	f003 0310 	and.w	r3, r3, #16
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f000 80c1 	beq.w	800a7c4 <tcp_process+0x738>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a646:	4b68      	ldr	r3, [pc, #416]	; (800a7e8 <tcp_process+0x75c>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	f040 80ba 	bne.w	800a7c4 <tcp_process+0x738>
               pcb->unsent == NULL) {
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a654:	2b00      	cmp	r3, #0
 800a656:	f040 80b5 	bne.w	800a7c4 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2206      	movs	r2, #6
 800a65e:	751a      	strb	r2, [r3, #20]
    break;
 800a660:	e0b0      	b.n	800a7c4 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f93c 	bl	800a8e0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800a668:	4b60      	ldr	r3, [pc, #384]	; (800a7ec <tcp_process+0x760>)
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	f003 0320 	and.w	r3, r3, #32
 800a670:	2b00      	cmp	r3, #0
 800a672:	f000 80a9 	beq.w	800a7c8 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	7e9b      	ldrb	r3, [r3, #26]
 800a67a:	f043 0302 	orr.w	r3, r3, #2
 800a67e:	b2da      	uxtb	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f7fe fe05 	bl	8009294 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a68a:	4b59      	ldr	r3, [pc, #356]	; (800a7f0 <tcp_process+0x764>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	429a      	cmp	r2, r3
 800a692:	d105      	bne.n	800a6a0 <tcp_process+0x614>
 800a694:	4b56      	ldr	r3, [pc, #344]	; (800a7f0 <tcp_process+0x764>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	4a55      	ldr	r2, [pc, #340]	; (800a7f0 <tcp_process+0x764>)
 800a69c:	6013      	str	r3, [r2, #0]
 800a69e:	e013      	b.n	800a6c8 <tcp_process+0x63c>
 800a6a0:	4b53      	ldr	r3, [pc, #332]	; (800a7f0 <tcp_process+0x764>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	613b      	str	r3, [r7, #16]
 800a6a6:	e00c      	b.n	800a6c2 <tcp_process+0x636>
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d104      	bne.n	800a6bc <tcp_process+0x630>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68da      	ldr	r2, [r3, #12]
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	60da      	str	r2, [r3, #12]
 800a6ba:	e005      	b.n	800a6c8 <tcp_process+0x63c>
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	613b      	str	r3, [r7, #16]
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d1ef      	bne.n	800a6a8 <tcp_process+0x61c>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	60da      	str	r2, [r3, #12]
 800a6ce:	4b43      	ldr	r3, [pc, #268]	; (800a7dc <tcp_process+0x750>)
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	220a      	movs	r2, #10
 800a6d8:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800a6da:	4b41      	ldr	r3, [pc, #260]	; (800a7e0 <tcp_process+0x754>)
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	60da      	str	r2, [r3, #12]
 800a6e2:	4a3f      	ldr	r2, [pc, #252]	; (800a7e0 <tcp_process+0x754>)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6013      	str	r3, [r2, #0]
 800a6e8:	f002 f956 	bl	800c998 <tcp_timer_needed>
    }
    break;
 800a6ec:	e06c      	b.n	800a7c8 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f8f6 	bl	800a8e0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a6f4:	4b3b      	ldr	r3, [pc, #236]	; (800a7e4 <tcp_process+0x758>)
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	f003 0310 	and.w	r3, r3, #16
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d065      	beq.n	800a7cc <tcp_process+0x740>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a704:	4b38      	ldr	r3, [pc, #224]	; (800a7e8 <tcp_process+0x75c>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d15f      	bne.n	800a7cc <tcp_process+0x740>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a710:	2b00      	cmp	r3, #0
 800a712:	d15b      	bne.n	800a7cc <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7fe fdbd 	bl	8009294 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a71a:	4b35      	ldr	r3, [pc, #212]	; (800a7f0 <tcp_process+0x764>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	429a      	cmp	r2, r3
 800a722:	d105      	bne.n	800a730 <tcp_process+0x6a4>
 800a724:	4b32      	ldr	r3, [pc, #200]	; (800a7f0 <tcp_process+0x764>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	4a31      	ldr	r2, [pc, #196]	; (800a7f0 <tcp_process+0x764>)
 800a72c:	6013      	str	r3, [r2, #0]
 800a72e:	e013      	b.n	800a758 <tcp_process+0x6cc>
 800a730:	4b2f      	ldr	r3, [pc, #188]	; (800a7f0 <tcp_process+0x764>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	60fb      	str	r3, [r7, #12]
 800a736:	e00c      	b.n	800a752 <tcp_process+0x6c6>
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d104      	bne.n	800a74c <tcp_process+0x6c0>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	68da      	ldr	r2, [r3, #12]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	60da      	str	r2, [r3, #12]
 800a74a:	e005      	b.n	800a758 <tcp_process+0x6cc>
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	60fb      	str	r3, [r7, #12]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d1ef      	bne.n	800a738 <tcp_process+0x6ac>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	60da      	str	r2, [r3, #12]
 800a75e:	4b1f      	ldr	r3, [pc, #124]	; (800a7dc <tcp_process+0x750>)
 800a760:	2201      	movs	r2, #1
 800a762:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	220a      	movs	r2, #10
 800a768:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800a76a:	4b1d      	ldr	r3, [pc, #116]	; (800a7e0 <tcp_process+0x754>)
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	60da      	str	r2, [r3, #12]
 800a772:	4a1b      	ldr	r2, [pc, #108]	; (800a7e0 <tcp_process+0x754>)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6013      	str	r3, [r2, #0]
 800a778:	f002 f90e 	bl	800c998 <tcp_timer_needed>
    }
    break;
 800a77c:	e026      	b.n	800a7cc <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f8ae 	bl	800a8e0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a784:	4b17      	ldr	r3, [pc, #92]	; (800a7e4 <tcp_process+0x758>)
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	f003 0310 	and.w	r3, r3, #16
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d01f      	beq.n	800a7d0 <tcp_process+0x744>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a794:	4b14      	ldr	r3, [pc, #80]	; (800a7e8 <tcp_process+0x75c>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d119      	bne.n	800a7d0 <tcp_process+0x744>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d115      	bne.n	800a7d0 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800a7a4:	4b11      	ldr	r3, [pc, #68]	; (800a7ec <tcp_process+0x760>)
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	f043 0310 	orr.w	r3, r3, #16
 800a7ac:	b2da      	uxtb	r2, r3
 800a7ae:	4b0f      	ldr	r3, [pc, #60]	; (800a7ec <tcp_process+0x760>)
 800a7b0:	701a      	strb	r2, [r3, #0]
    }
    break;
 800a7b2:	e00d      	b.n	800a7d0 <tcp_process+0x744>
  default:
    break;
 800a7b4:	bf00      	nop
 800a7b6:	e00c      	b.n	800a7d2 <tcp_process+0x746>
    break;
 800a7b8:	bf00      	nop
 800a7ba:	e00a      	b.n	800a7d2 <tcp_process+0x746>
    break;
 800a7bc:	bf00      	nop
 800a7be:	e008      	b.n	800a7d2 <tcp_process+0x746>
    break;
 800a7c0:	bf00      	nop
 800a7c2:	e006      	b.n	800a7d2 <tcp_process+0x746>
    break;
 800a7c4:	bf00      	nop
 800a7c6:	e004      	b.n	800a7d2 <tcp_process+0x746>
    break;
 800a7c8:	bf00      	nop
 800a7ca:	e002      	b.n	800a7d2 <tcp_process+0x746>
    break;
 800a7cc:	bf00      	nop
 800a7ce:	e000      	b.n	800a7d2 <tcp_process+0x746>
    break;
 800a7d0:	bf00      	nop
  }
  return ERR_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3720      	adds	r7, #32
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	20006f70 	.word	0x20006f70
 800a7e0:	20006f6c 	.word	0x20006f6c
 800a7e4:	20006fa0 	.word	0x20006fa0
 800a7e8:	20006f98 	.word	0x20006f98
 800a7ec:	20006fa1 	.word	0x20006fa1
 800a7f0:	20006f68 	.word	0x20006f68

0800a7f4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a7f4:	b590      	push	{r4, r7, lr}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	899b      	ldrh	r3, [r3, #12]
 800a804:	b29b      	uxth	r3, r3
 800a806:	4618      	mov	r0, r3
 800a808:	f7fb ffbf 	bl	800678a <lwip_htons>
 800a80c:	4603      	mov	r3, r0
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	2b00      	cmp	r3, #0
 800a814:	d027      	beq.n	800a866 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a816:	6838      	ldr	r0, [r7, #0]
 800a818:	f7fe fb69 	bl	8008eee <tcp_segs_free>
    next = NULL;
 800a81c:	2300      	movs	r3, #0
 800a81e:	603b      	str	r3, [r7, #0]
 800a820:	e055      	b.n	800a8ce <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	899b      	ldrh	r3, [r3, #12]
 800a828:	b29b      	uxth	r3, r3
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fb ffad 	bl	800678a <lwip_htons>
 800a830:	4603      	mov	r3, r0
 800a832:	f003 0301 	and.w	r3, r3, #1
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00d      	beq.n	800a856 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	899b      	ldrh	r3, [r3, #12]
 800a840:	b29c      	uxth	r4, r3
 800a842:	2001      	movs	r0, #1
 800a844:	f7fb ffa1 	bl	800678a <lwip_htons>
 800a848:	4603      	mov	r3, r0
 800a84a:	461a      	mov	r2, r3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	4322      	orrs	r2, r4
 800a852:	b292      	uxth	r2, r2
 800a854:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f7fe fb59 	bl	8008f18 <tcp_seg_free>
    while (next &&
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00e      	beq.n	800a88a <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	891b      	ldrh	r3, [r3, #8]
 800a870:	461a      	mov	r2, r3
 800a872:	4b1a      	ldr	r3, [pc, #104]	; (800a8dc <tcp_oos_insert_segment+0xe8>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	441a      	add	r2, r3
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	6839      	ldr	r1, [r7, #0]
 800a880:	8909      	ldrh	r1, [r1, #8]
 800a882:	440b      	add	r3, r1
 800a884:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a886:	2b00      	cmp	r3, #0
 800a888:	dacb      	bge.n	800a822 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d01e      	beq.n	800a8ce <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	891b      	ldrh	r3, [r3, #8]
 800a894:	461a      	mov	r2, r3
 800a896:	4b11      	ldr	r3, [pc, #68]	; (800a8dc <tcp_oos_insert_segment+0xe8>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	441a      	add	r2, r3
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	dd12      	ble.n	800a8ce <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	4b0a      	ldr	r3, [pc, #40]	; (800a8dc <tcp_oos_insert_segment+0xe8>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	685a      	ldr	r2, [r3, #4]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	891b      	ldrh	r3, [r3, #8]
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	f7fc ffbb 	bl	8007844 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	683a      	ldr	r2, [r7, #0]
 800a8d2:	601a      	str	r2, [r3, #0]
}
 800a8d4:	bf00      	nop
 800a8d6:	3714      	adds	r7, #20
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd90      	pop	{r4, r7, pc}
 800a8dc:	20006f94 	.word	0x20006f94

0800a8e0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8e2:	b08d      	sub	sp, #52	; 0x34
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	7d1b      	ldrb	r3, [r3, #20]
 800a8f0:	2b03      	cmp	r3, #3
 800a8f2:	d806      	bhi.n	800a902 <tcp_receive+0x22>
 800a8f4:	4b98      	ldr	r3, [pc, #608]	; (800ab58 <tcp_receive+0x278>)
 800a8f6:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800a8fa:	4998      	ldr	r1, [pc, #608]	; (800ab5c <tcp_receive+0x27c>)
 800a8fc:	4898      	ldr	r0, [pc, #608]	; (800ab60 <tcp_receive+0x280>)
 800a8fe:	f007 fe5f 	bl	80125c0 <iprintf>

  if (flags & TCP_ACK) {
 800a902:	4b98      	ldr	r3, [pc, #608]	; (800ab64 <tcp_receive+0x284>)
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	f003 0310 	and.w	r3, r3, #16
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f000 82c1 	beq.w	800ae92 <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a916:	461a      	mov	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a91c:	4413      	add	r3, r2
 800a91e:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a924:	4b90      	ldr	r3, [pc, #576]	; (800ab68 <tcp_receive+0x288>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	db1b      	blt.n	800a966 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a932:	4b8d      	ldr	r3, [pc, #564]	; (800ab68 <tcp_receive+0x288>)
 800a934:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a936:	429a      	cmp	r2, r3
 800a938:	d106      	bne.n	800a948 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a93e:	4b8b      	ldr	r3, [pc, #556]	; (800ab6c <tcp_receive+0x28c>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	1ad3      	subs	r3, r2, r3
 800a944:	2b00      	cmp	r3, #0
 800a946:	db0e      	blt.n	800a966 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a94c:	4b87      	ldr	r3, [pc, #540]	; (800ab6c <tcp_receive+0x28c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a950:	429a      	cmp	r2, r3
 800a952:	d141      	bne.n	800a9d8 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a954:	4b86      	ldr	r3, [pc, #536]	; (800ab70 <tcp_receive+0x290>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	89db      	ldrh	r3, [r3, #14]
 800a95a:	b29a      	uxth	r2, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a962:	429a      	cmp	r2, r3
 800a964:	d938      	bls.n	800a9d8 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a966:	4b82      	ldr	r3, [pc, #520]	; (800ab70 <tcp_receive+0x290>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	89db      	ldrh	r3, [r3, #14]
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a980:	429a      	cmp	r2, r3
 800a982:	d205      	bcs.n	800a990 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800a990:	4b75      	ldr	r3, [pc, #468]	; (800ab68 <tcp_receive+0x288>)
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800a998:	4b74      	ldr	r3, [pc, #464]	; (800ab6c <tcp_receive+0x28c>)
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d10d      	bne.n	800a9c6 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d111      	bne.n	800a9d8 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800a9c4:	e008      	b.n	800a9d8 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d003      	beq.n	800a9d8 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a9d8:	4b64      	ldr	r3, [pc, #400]	; (800ab6c <tcp_receive+0x28c>)
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	dc53      	bgt.n	800aa8e <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800a9e6:	4b63      	ldr	r3, [pc, #396]	; (800ab74 <tcp_receive+0x294>)
 800a9e8:	881b      	ldrh	r3, [r3, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d146      	bne.n	800aa7c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800a9f8:	4413      	add	r3, r2
 800a9fa:	697a      	ldr	r2, [r7, #20]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d13d      	bne.n	800aa7c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	db38      	blt.n	800aa7c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa0e:	4b57      	ldr	r3, [pc, #348]	; (800ab6c <tcp_receive+0x28c>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d132      	bne.n	800aa7c <tcp_receive+0x19c>
              found_dupack = 1;
 800aa16:	2301      	movs	r3, #1
 800aa18:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aa20:	2bff      	cmp	r3, #255	; 0xff
 800aa22:	d007      	beq.n	800aa34 <tcp_receive+0x154>
                ++pcb->dupacks;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	b2da      	uxtb	r2, r3
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aa3a:	2b03      	cmp	r3, #3
 800aa3c:	d916      	bls.n	800aa6c <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa48:	4413      	add	r3, r2
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d912      	bls.n	800aa7c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa60:	4413      	add	r3, r2
 800aa62:	b29a      	uxth	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800aa6a:	e007      	b.n	800aa7c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aa72:	2b03      	cmp	r3, #3
 800aa74:	d102      	bne.n	800aa7c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f001 fe2e 	bl	800c6d8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	f040 816a 	bne.w	800ad58 <tcp_receive+0x478>
        pcb->dupacks = 0;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa8c:	e164      	b.n	800ad58 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800aa8e:	4b37      	ldr	r3, [pc, #220]	; (800ab6c <tcp_receive+0x28c>)
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f2c0 8108 	blt.w	800acb0 <tcp_receive+0x3d0>
 800aaa0:	4b32      	ldr	r3, [pc, #200]	; (800ab6c <tcp_receive+0x28c>)
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f300 8100 	bgt.w	800acb0 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	7e9b      	ldrb	r3, [r3, #26]
 800aab4:	f003 0304 	and.w	r3, r3, #4
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d00c      	beq.n	800aad6 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	7e9b      	ldrb	r3, [r3, #26]
 800aac0:	f023 0304 	bic.w	r3, r3, #4
 800aac4:	b2da      	uxtb	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800aae4:	10db      	asrs	r3, r3, #3
 800aae6:	b21b      	sxth	r3, r3
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	4413      	add	r3, r2
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	b21a      	sxth	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ab06:	4b19      	ldr	r3, [pc, #100]	; (800ab6c <tcp_receive+0x28c>)
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	7d1b      	ldrb	r3, [r3, #20]
 800ab12:	2b03      	cmp	r3, #3
 800ab14:	f240 8095 	bls.w	800ac42 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d227      	bcs.n	800ab78 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab32:	4413      	add	r3, r2
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	f240 8080 	bls.w	800ac42 <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab4c:	4413      	add	r3, r2
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ab56:	e074      	b.n	800ac42 <tcp_receive+0x362>
 800ab58:	08016fb4 	.word	0x08016fb4
 800ab5c:	080171d8 	.word	0x080171d8
 800ab60:	08016ff8 	.word	0x08016ff8
 800ab64:	20006fa0 	.word	0x20006fa0
 800ab68:	20006f94 	.word	0x20006f94
 800ab6c:	20006f98 	.word	0x20006f98
 800ab70:	20006f84 	.word	0x20006f84
 800ab74:	20006f9e 	.word	0x20006f9e
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab82:	4619      	mov	r1, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab88:	fb01 f303 	mul.w	r3, r1, r3
 800ab8c:	6879      	ldr	r1, [r7, #4]
 800ab8e:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800ab92:	fb93 f3f1 	sdiv	r3, r3, r1
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	4413      	add	r3, r2
 800ab9a:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aba2:	8a7a      	ldrh	r2, [r7, #18]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d94c      	bls.n	800ac42 <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	8a7a      	ldrh	r2, [r7, #18]
 800abac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800abb0:	e047      	b.n	800ac42 <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800abc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	4618      	mov	r0, r3
 800abce:	f7fd f841 	bl	8007c54 <pbuf_clen>
 800abd2:	4603      	mov	r3, r0
 800abd4:	429c      	cmp	r4, r3
 800abd6:	d206      	bcs.n	800abe6 <tcp_receive+0x306>
 800abd8:	4b70      	ldr	r3, [pc, #448]	; (800ad9c <tcp_receive+0x4bc>)
 800abda:	f240 429e 	movw	r2, #1182	; 0x49e
 800abde:	4970      	ldr	r1, [pc, #448]	; (800ada0 <tcp_receive+0x4c0>)
 800abe0:	4870      	ldr	r0, [pc, #448]	; (800ada4 <tcp_receive+0x4c4>)
 800abe2:	f007 fced 	bl	80125c0 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800abe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	4618      	mov	r0, r3
 800abec:	f7fd f832 	bl	8007c54 <pbuf_clen>
 800abf0:	4603      	mov	r3, r0
 800abf2:	461a      	mov	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800abfa:	1a9b      	subs	r3, r3, r2
 800abfc:	b29a      	uxth	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800ac04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac06:	891a      	ldrh	r2, [r3, #8]
 800ac08:	4b67      	ldr	r3, [pc, #412]	; (800ada8 <tcp_receive+0x4c8>)
 800ac0a:	881b      	ldrh	r3, [r3, #0]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	4b65      	ldr	r3, [pc, #404]	; (800ada8 <tcp_receive+0x4c8>)
 800ac12:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800ac14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac16:	f7fe f97f 	bl	8008f18 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00e      	beq.n	800ac42 <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10a      	bne.n	800ac42 <tcp_receive+0x362>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d106      	bne.n	800ac42 <tcp_receive+0x362>
 800ac34:	4b59      	ldr	r3, [pc, #356]	; (800ad9c <tcp_receive+0x4bc>)
 800ac36:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800ac3a:	495c      	ldr	r1, [pc, #368]	; (800adac <tcp_receive+0x4cc>)
 800ac3c:	4859      	ldr	r0, [pc, #356]	; (800ada4 <tcp_receive+0x4c4>)
 800ac3e:	f007 fcbf 	bl	80125c0 <iprintf>
      while (pcb->unacked != NULL &&
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d022      	beq.n	800ac90 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fb fda6 	bl	80067a4 <lwip_htonl>
 800ac58:	4604      	mov	r4, r0
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac5e:	891b      	ldrh	r3, [r3, #8]
 800ac60:	461d      	mov	r5, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	899b      	ldrh	r3, [r3, #12]
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7fb fd8c 	bl	800678a <lwip_htons>
 800ac72:	4603      	mov	r3, r0
 800ac74:	f003 0303 	and.w	r3, r3, #3
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d001      	beq.n	800ac80 <tcp_receive+0x3a0>
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e000      	b.n	800ac82 <tcp_receive+0x3a2>
 800ac80:	2300      	movs	r3, #0
 800ac82:	442b      	add	r3, r5
 800ac84:	18e2      	adds	r2, r4, r3
 800ac86:	4b4a      	ldr	r3, [pc, #296]	; (800adb0 <tcp_receive+0x4d0>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	dd90      	ble.n	800abb2 <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d104      	bne.n	800aca2 <tcp_receive+0x3c2>
        pcb->rtime = -1;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac9e:	861a      	strh	r2, [r3, #48]	; 0x30
 800aca0:	e002      	b.n	800aca8 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	76da      	strb	r2, [r3, #27]
 800acae:	e002      	b.n	800acb6 <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f001 f921 	bl	800bef8 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800acb6:	e04f      	b.n	800ad58 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800accc:	2b00      	cmp	r3, #0
 800acce:	d103      	bne.n	800acd8 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800acde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fc ffb6 	bl	8007c54 <pbuf_clen>
 800ace8:	4603      	mov	r3, r0
 800acea:	429c      	cmp	r4, r3
 800acec:	d206      	bcs.n	800acfc <tcp_receive+0x41c>
 800acee:	4b2b      	ldr	r3, [pc, #172]	; (800ad9c <tcp_receive+0x4bc>)
 800acf0:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800acf4:	492a      	ldr	r1, [pc, #168]	; (800ada0 <tcp_receive+0x4c0>)
 800acf6:	482b      	ldr	r0, [pc, #172]	; (800ada4 <tcp_receive+0x4c4>)
 800acf8:	f007 fc62 	bl	80125c0 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800acfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fc ffa7 	bl	8007c54 <pbuf_clen>
 800ad06:	4603      	mov	r3, r0
 800ad08:	461a      	mov	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ad10:	1a9b      	subs	r3, r3, r2
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800ad1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1c:	891a      	ldrh	r2, [r3, #8]
 800ad1e:	4b22      	ldr	r3, [pc, #136]	; (800ada8 <tcp_receive+0x4c8>)
 800ad20:	881b      	ldrh	r3, [r3, #0]
 800ad22:	4413      	add	r3, r2
 800ad24:	b29a      	uxth	r2, r3
 800ad26:	4b20      	ldr	r3, [pc, #128]	; (800ada8 <tcp_receive+0x4c8>)
 800ad28:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800ad2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad2c:	f7fe f8f4 	bl	8008f18 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00e      	beq.n	800ad58 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10a      	bne.n	800ad58 <tcp_receive+0x478>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d106      	bne.n	800ad58 <tcp_receive+0x478>
 800ad4a:	4b14      	ldr	r3, [pc, #80]	; (800ad9c <tcp_receive+0x4bc>)
 800ad4c:	f240 42dc 	movw	r2, #1244	; 0x4dc
 800ad50:	4916      	ldr	r1, [pc, #88]	; (800adac <tcp_receive+0x4cc>)
 800ad52:	4814      	ldr	r0, [pc, #80]	; (800ada4 <tcp_receive+0x4c4>)
 800ad54:	f007 fc34 	bl	80125c0 <iprintf>
    while (pcb->unsent != NULL &&
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d037      	beq.n	800add0 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800ad60:	4b13      	ldr	r3, [pc, #76]	; (800adb0 <tcp_receive+0x4d0>)
 800ad62:	681c      	ldr	r4, [r3, #0]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7fb fd19 	bl	80067a4 <lwip_htonl>
 800ad72:	4605      	mov	r5, r0
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad78:	891b      	ldrh	r3, [r3, #8]
 800ad7a:	461e      	mov	r6, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	899b      	ldrh	r3, [r3, #12]
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7fb fcff 	bl	800678a <lwip_htons>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	f003 0303 	and.w	r3, r3, #3
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00e      	beq.n	800adb4 <tcp_receive+0x4d4>
 800ad96:	2301      	movs	r3, #1
 800ad98:	e00d      	b.n	800adb6 <tcp_receive+0x4d6>
 800ad9a:	bf00      	nop
 800ad9c:	08016fb4 	.word	0x08016fb4
 800ada0:	080171f4 	.word	0x080171f4
 800ada4:	08016ff8 	.word	0x08016ff8
 800ada8:	20006f9c 	.word	0x20006f9c
 800adac:	0801721c 	.word	0x0801721c
 800adb0:	20006f98 	.word	0x20006f98
 800adb4:	2300      	movs	r3, #0
 800adb6:	4433      	add	r3, r6
 800adb8:	442b      	add	r3, r5
 800adba:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	db07      	blt.n	800add0 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800adc0:	4b8d      	ldr	r3, [pc, #564]	; (800aff8 <tcp_receive+0x718>)
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f77f af74 	ble.w	800acb8 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800add6:	4b89      	ldr	r3, [pc, #548]	; (800affc <tcp_receive+0x71c>)
 800add8:	881b      	ldrh	r3, [r3, #0]
 800adda:	4413      	add	r3, r2
 800addc:	b29a      	uxth	r2, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d052      	beq.n	800ae92 <tcp_receive+0x5b2>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adf0:	4b81      	ldr	r3, [pc, #516]	; (800aff8 <tcp_receive+0x718>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	da4b      	bge.n	800ae92 <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800adfa:	4b81      	ldr	r3, [pc, #516]	; (800b000 <tcp_receive+0x720>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	b29a      	uxth	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	1ad3      	subs	r3, r2, r3
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800ae0c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ae14:	10db      	asrs	r3, r3, #3
 800ae16:	b21b      	sxth	r3, r3
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	1ad3      	subs	r3, r2, r3
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ae26:	b29a      	uxth	r2, r3
 800ae28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae2a:	4413      	add	r3, r2
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	b21a      	sxth	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ae34:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	da03      	bge.n	800ae44 <tcp_receive+0x564>
        m = -m;
 800ae3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae3e:	425b      	negs	r3, r3
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800ae44:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ae4c:	109b      	asrs	r3, r3, #2
 800ae4e:	b21b      	sxth	r3, r3
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	1ad3      	subs	r3, r2, r3
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae62:	4413      	add	r3, r2
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	b21a      	sxth	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ae72:	10db      	asrs	r3, r3, #3
 800ae74:	b21b      	sxth	r3, r3
 800ae76:	b29a      	uxth	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	4413      	add	r3, r2
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	b21a      	sxth	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ae92:	4b5c      	ldr	r3, [pc, #368]	; (800b004 <tcp_receive+0x724>)
 800ae94:	881b      	ldrh	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	f000 84f1 	beq.w	800b87e <tcp_receive+0xf9e>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	7d1b      	ldrb	r3, [r3, #20]
 800aea0:	2b06      	cmp	r3, #6
 800aea2:	f200 84ec 	bhi.w	800b87e <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aeaa:	4b57      	ldr	r3, [pc, #348]	; (800b008 <tcp_receive+0x728>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	1ad3      	subs	r3, r2, r3
 800aeb0:	3b01      	subs	r3, #1
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f2c0 80b8 	blt.w	800b028 <tcp_receive+0x748>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aebc:	4b51      	ldr	r3, [pc, #324]	; (800b004 <tcp_receive+0x724>)
 800aebe:	881b      	ldrh	r3, [r3, #0]
 800aec0:	4619      	mov	r1, r3
 800aec2:	4b51      	ldr	r3, [pc, #324]	; (800b008 <tcp_receive+0x728>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	440b      	add	r3, r1
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	3301      	adds	r3, #1
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f300 80ab 	bgt.w	800b028 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800aed2:	4b4e      	ldr	r3, [pc, #312]	; (800b00c <tcp_receive+0x72c>)
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aedc:	4b4a      	ldr	r3, [pc, #296]	; (800b008 <tcp_receive+0x728>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800aee4:	4b49      	ldr	r3, [pc, #292]	; (800b00c <tcp_receive+0x72c>)
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d106      	bne.n	800aefa <tcp_receive+0x61a>
 800aeec:	4b48      	ldr	r3, [pc, #288]	; (800b010 <tcp_receive+0x730>)
 800aeee:	f240 523c 	movw	r2, #1340	; 0x53c
 800aef2:	4948      	ldr	r1, [pc, #288]	; (800b014 <tcp_receive+0x734>)
 800aef4:	4848      	ldr	r0, [pc, #288]	; (800b018 <tcp_receive+0x738>)
 800aef6:	f007 fb63 	bl	80125c0 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800aefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefc:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800af00:	4293      	cmp	r3, r2
 800af02:	dd06      	ble.n	800af12 <tcp_receive+0x632>
 800af04:	4b42      	ldr	r3, [pc, #264]	; (800b010 <tcp_receive+0x730>)
 800af06:	f240 523d 	movw	r2, #1341	; 0x53d
 800af0a:	4944      	ldr	r1, [pc, #272]	; (800b01c <tcp_receive+0x73c>)
 800af0c:	4842      	ldr	r0, [pc, #264]	; (800b018 <tcp_receive+0x738>)
 800af0e:	f007 fb57 	bl	80125c0 <iprintf>
      if (inseg.p->len < off) {
 800af12:	4b3e      	ldr	r3, [pc, #248]	; (800b00c <tcp_receive+0x72c>)
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	895b      	ldrh	r3, [r3, #10]
 800af18:	461a      	mov	r2, r3
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	4293      	cmp	r3, r2
 800af1e:	dd3e      	ble.n	800af9e <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800af20:	4b3a      	ldr	r3, [pc, #232]	; (800b00c <tcp_receive+0x72c>)
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	891b      	ldrh	r3, [r3, #8]
 800af26:	461a      	mov	r2, r3
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2a:	4293      	cmp	r3, r2
 800af2c:	dd06      	ble.n	800af3c <tcp_receive+0x65c>
 800af2e:	4b38      	ldr	r3, [pc, #224]	; (800b010 <tcp_receive+0x730>)
 800af30:	f240 523f 	movw	r2, #1343	; 0x53f
 800af34:	493a      	ldr	r1, [pc, #232]	; (800b020 <tcp_receive+0x740>)
 800af36:	4838      	ldr	r0, [pc, #224]	; (800b018 <tcp_receive+0x738>)
 800af38:	f007 fb42 	bl	80125c0 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800af3c:	4b33      	ldr	r3, [pc, #204]	; (800b00c <tcp_receive+0x72c>)
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	891a      	ldrh	r2, [r3, #8]
 800af42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af44:	b29b      	uxth	r3, r3
 800af46:	1ad3      	subs	r3, r2, r3
 800af48:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800af4a:	e00e      	b.n	800af6a <tcp_receive+0x68a>
          off -= p->len;
 800af4c:	69bb      	ldr	r3, [r7, #24]
 800af4e:	895b      	ldrh	r3, [r3, #10]
 800af50:	461a      	mov	r2, r3
 800af52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af54:	1a9b      	subs	r3, r3, r2
 800af56:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	8a3a      	ldrh	r2, [r7, #16]
 800af5c:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	2200      	movs	r2, #0
 800af62:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800af64:	69bb      	ldr	r3, [r7, #24]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	895b      	ldrh	r3, [r3, #10]
 800af6e:	461a      	mov	r2, r3
 800af70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af72:	4293      	cmp	r3, r2
 800af74:	dcea      	bgt.n	800af4c <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800af76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af78:	b29b      	uxth	r3, r3
 800af7a:	425b      	negs	r3, r3
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	b21b      	sxth	r3, r3
 800af80:	4619      	mov	r1, r3
 800af82:	69b8      	ldr	r0, [r7, #24]
 800af84:	f7fc fdae 	bl	8007ae4 <pbuf_header>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d01c      	beq.n	800afc8 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800af8e:	4b20      	ldr	r3, [pc, #128]	; (800b010 <tcp_receive+0x730>)
 800af90:	f240 524c 	movw	r2, #1356	; 0x54c
 800af94:	4923      	ldr	r1, [pc, #140]	; (800b024 <tcp_receive+0x744>)
 800af96:	4820      	ldr	r0, [pc, #128]	; (800b018 <tcp_receive+0x738>)
 800af98:	f007 fb12 	bl	80125c0 <iprintf>
 800af9c:	e014      	b.n	800afc8 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800af9e:	4b1b      	ldr	r3, [pc, #108]	; (800b00c <tcp_receive+0x72c>)
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afa4:	b292      	uxth	r2, r2
 800afa6:	4252      	negs	r2, r2
 800afa8:	b292      	uxth	r2, r2
 800afaa:	b212      	sxth	r2, r2
 800afac:	4611      	mov	r1, r2
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fc fd98 	bl	8007ae4 <pbuf_header>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d006      	beq.n	800afc8 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800afba:	4b15      	ldr	r3, [pc, #84]	; (800b010 <tcp_receive+0x730>)
 800afbc:	f240 5251 	movw	r2, #1361	; 0x551
 800afc0:	4918      	ldr	r1, [pc, #96]	; (800b024 <tcp_receive+0x744>)
 800afc2:	4815      	ldr	r0, [pc, #84]	; (800b018 <tcp_receive+0x738>)
 800afc4:	f007 fafc 	bl	80125c0 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800afc8:	4b10      	ldr	r3, [pc, #64]	; (800b00c <tcp_receive+0x72c>)
 800afca:	891a      	ldrh	r2, [r3, #8]
 800afcc:	4b0e      	ldr	r3, [pc, #56]	; (800b008 <tcp_receive+0x728>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	b299      	uxth	r1, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	1acb      	subs	r3, r1, r3
 800afda:	b29b      	uxth	r3, r3
 800afdc:	4413      	add	r3, r2
 800afde:	b29a      	uxth	r2, r3
 800afe0:	4b0a      	ldr	r3, [pc, #40]	; (800b00c <tcp_receive+0x72c>)
 800afe2:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe8:	4a07      	ldr	r2, [pc, #28]	; (800b008 <tcp_receive+0x728>)
 800afea:	6013      	str	r3, [r2, #0]
 800afec:	4b07      	ldr	r3, [pc, #28]	; (800b00c <tcp_receive+0x72c>)
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	4a05      	ldr	r2, [pc, #20]	; (800b008 <tcp_receive+0x728>)
 800aff2:	6812      	ldr	r2, [r2, #0]
 800aff4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800aff6:	e025      	b.n	800b044 <tcp_receive+0x764>
 800aff8:	20006f98 	.word	0x20006f98
 800affc:	20006f9c 	.word	0x20006f9c
 800b000:	20006f5c 	.word	0x20006f5c
 800b004:	20006f9e 	.word	0x20006f9e
 800b008:	20006f94 	.word	0x20006f94
 800b00c:	20006f74 	.word	0x20006f74
 800b010:	08016fb4 	.word	0x08016fb4
 800b014:	0801723c 	.word	0x0801723c
 800b018:	08016ff8 	.word	0x08016ff8
 800b01c:	0801724c 	.word	0x0801724c
 800b020:	0801725c 	.word	0x0801725c
 800b024:	0801726c 	.word	0x0801726c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b028:	4b87      	ldr	r3, [pc, #540]	; (800b248 <tcp_receive+0x968>)
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	2b00      	cmp	r3, #0
 800b034:	da06      	bge.n	800b044 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	7e9b      	ldrb	r3, [r3, #26]
 800b03a:	f043 0302 	orr.w	r3, r3, #2
 800b03e:	b2da      	uxtb	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b044:	4b80      	ldr	r3, [pc, #512]	; (800b248 <tcp_receive+0x968>)
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04c:	1ad3      	subs	r3, r2, r3
 800b04e:	2b00      	cmp	r3, #0
 800b050:	f2c0 8410 	blt.w	800b874 <tcp_receive+0xf94>
 800b054:	4b7c      	ldr	r3, [pc, #496]	; (800b248 <tcp_receive+0x968>)
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05c:	6879      	ldr	r1, [r7, #4]
 800b05e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b060:	440b      	add	r3, r1
 800b062:	1ad3      	subs	r3, r2, r3
 800b064:	3301      	adds	r3, #1
 800b066:	2b00      	cmp	r3, #0
 800b068:	f300 8404 	bgt.w	800b874 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b070:	4b75      	ldr	r3, [pc, #468]	; (800b248 <tcp_receive+0x968>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	429a      	cmp	r2, r3
 800b076:	f040 8287 	bne.w	800b588 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b07a:	4b74      	ldr	r3, [pc, #464]	; (800b24c <tcp_receive+0x96c>)
 800b07c:	891c      	ldrh	r4, [r3, #8]
 800b07e:	4b73      	ldr	r3, [pc, #460]	; (800b24c <tcp_receive+0x96c>)
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	899b      	ldrh	r3, [r3, #12]
 800b084:	b29b      	uxth	r3, r3
 800b086:	4618      	mov	r0, r3
 800b088:	f7fb fb7f 	bl	800678a <lwip_htons>
 800b08c:	4603      	mov	r3, r0
 800b08e:	f003 0303 	and.w	r3, r3, #3
 800b092:	2b00      	cmp	r3, #0
 800b094:	d001      	beq.n	800b09a <tcp_receive+0x7ba>
 800b096:	2301      	movs	r3, #1
 800b098:	e000      	b.n	800b09c <tcp_receive+0x7bc>
 800b09a:	2300      	movs	r3, #0
 800b09c:	4423      	add	r3, r4
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	4b6b      	ldr	r3, [pc, #428]	; (800b250 <tcp_receive+0x970>)
 800b0a2:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b0a8:	4b69      	ldr	r3, [pc, #420]	; (800b250 <tcp_receive+0x970>)
 800b0aa:	881b      	ldrh	r3, [r3, #0]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d26e      	bcs.n	800b18e <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b0b0:	4b66      	ldr	r3, [pc, #408]	; (800b24c <tcp_receive+0x96c>)
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	899b      	ldrh	r3, [r3, #12]
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7fb fb66 	bl	800678a <lwip_htons>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	f003 0301 	and.w	r3, r3, #1
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d01b      	beq.n	800b100 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b0c8:	4b60      	ldr	r3, [pc, #384]	; (800b24c <tcp_receive+0x96c>)
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	899b      	ldrh	r3, [r3, #12]
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b0d4:	b29c      	uxth	r4, r3
 800b0d6:	4b5d      	ldr	r3, [pc, #372]	; (800b24c <tcp_receive+0x96c>)
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	899b      	ldrh	r3, [r3, #12]
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fb fb53 	bl	800678a <lwip_htons>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fb fb4c 	bl	800678a <lwip_htons>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	4b55      	ldr	r3, [pc, #340]	; (800b24c <tcp_receive+0x96c>)
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	4322      	orrs	r2, r4
 800b0fc:	b292      	uxth	r2, r2
 800b0fe:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b104:	4b51      	ldr	r3, [pc, #324]	; (800b24c <tcp_receive+0x96c>)
 800b106:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b108:	4b50      	ldr	r3, [pc, #320]	; (800b24c <tcp_receive+0x96c>)
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	899b      	ldrh	r3, [r3, #12]
 800b10e:	b29b      	uxth	r3, r3
 800b110:	4618      	mov	r0, r3
 800b112:	f7fb fb3a 	bl	800678a <lwip_htons>
 800b116:	4603      	mov	r3, r0
 800b118:	f003 0302 	and.w	r3, r3, #2
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d005      	beq.n	800b12c <tcp_receive+0x84c>
            inseg.len -= 1;
 800b120:	4b4a      	ldr	r3, [pc, #296]	; (800b24c <tcp_receive+0x96c>)
 800b122:	891b      	ldrh	r3, [r3, #8]
 800b124:	3b01      	subs	r3, #1
 800b126:	b29a      	uxth	r2, r3
 800b128:	4b48      	ldr	r3, [pc, #288]	; (800b24c <tcp_receive+0x96c>)
 800b12a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b12c:	4b47      	ldr	r3, [pc, #284]	; (800b24c <tcp_receive+0x96c>)
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	4a46      	ldr	r2, [pc, #280]	; (800b24c <tcp_receive+0x96c>)
 800b132:	8912      	ldrh	r2, [r2, #8]
 800b134:	4611      	mov	r1, r2
 800b136:	4618      	mov	r0, r3
 800b138:	f7fc fb84 	bl	8007844 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b13c:	4b43      	ldr	r3, [pc, #268]	; (800b24c <tcp_receive+0x96c>)
 800b13e:	891c      	ldrh	r4, [r3, #8]
 800b140:	4b42      	ldr	r3, [pc, #264]	; (800b24c <tcp_receive+0x96c>)
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	899b      	ldrh	r3, [r3, #12]
 800b146:	b29b      	uxth	r3, r3
 800b148:	4618      	mov	r0, r3
 800b14a:	f7fb fb1e 	bl	800678a <lwip_htons>
 800b14e:	4603      	mov	r3, r0
 800b150:	f003 0303 	and.w	r3, r3, #3
 800b154:	2b00      	cmp	r3, #0
 800b156:	d001      	beq.n	800b15c <tcp_receive+0x87c>
 800b158:	2301      	movs	r3, #1
 800b15a:	e000      	b.n	800b15e <tcp_receive+0x87e>
 800b15c:	2300      	movs	r3, #0
 800b15e:	4423      	add	r3, r4
 800b160:	b29a      	uxth	r2, r3
 800b162:	4b3b      	ldr	r3, [pc, #236]	; (800b250 <tcp_receive+0x970>)
 800b164:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b166:	4b3a      	ldr	r3, [pc, #232]	; (800b250 <tcp_receive+0x970>)
 800b168:	881b      	ldrh	r3, [r3, #0]
 800b16a:	461a      	mov	r2, r3
 800b16c:	4b36      	ldr	r3, [pc, #216]	; (800b248 <tcp_receive+0x968>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	441a      	add	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b176:	6879      	ldr	r1, [r7, #4]
 800b178:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b17a:	440b      	add	r3, r1
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d006      	beq.n	800b18e <tcp_receive+0x8ae>
 800b180:	4b34      	ldr	r3, [pc, #208]	; (800b254 <tcp_receive+0x974>)
 800b182:	f240 527e 	movw	r2, #1406	; 0x57e
 800b186:	4934      	ldr	r1, [pc, #208]	; (800b258 <tcp_receive+0x978>)
 800b188:	4834      	ldr	r0, [pc, #208]	; (800b25c <tcp_receive+0x97c>)
 800b18a:	f007 fa19 	bl	80125c0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b192:	2b00      	cmp	r3, #0
 800b194:	f000 80e1 	beq.w	800b35a <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b198:	4b2c      	ldr	r3, [pc, #176]	; (800b24c <tcp_receive+0x96c>)
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	899b      	ldrh	r3, [r3, #12]
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7fb faf2 	bl	800678a <lwip_htons>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	f003 0301 	and.w	r3, r3, #1
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d010      	beq.n	800b1d2 <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b1b0:	e00a      	b.n	800b1c8 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1b6:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800b1c2:	68b8      	ldr	r0, [r7, #8]
 800b1c4:	f7fd fea8 	bl	8008f18 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1f0      	bne.n	800b1b2 <tcp_receive+0x8d2>
 800b1d0:	e0c3      	b.n	800b35a <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b1d8:	e04f      	b.n	800b27a <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1dc:	68db      	ldr	r3, [r3, #12]
 800b1de:	899b      	ldrh	r3, [r3, #12]
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fb fad1 	bl	800678a <lwip_htons>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	f003 0301 	and.w	r3, r3, #1
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d03b      	beq.n	800b26a <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b1f2:	4b16      	ldr	r3, [pc, #88]	; (800b24c <tcp_receive+0x96c>)
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	899b      	ldrh	r3, [r3, #12]
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fb fac5 	bl	800678a <lwip_htons>
 800b200:	4603      	mov	r3, r0
 800b202:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b206:	2b00      	cmp	r3, #0
 800b208:	d12f      	bne.n	800b26a <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b20a:	4b10      	ldr	r3, [pc, #64]	; (800b24c <tcp_receive+0x96c>)
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	899b      	ldrh	r3, [r3, #12]
 800b210:	b29c      	uxth	r4, r3
 800b212:	2001      	movs	r0, #1
 800b214:	f7fb fab9 	bl	800678a <lwip_htons>
 800b218:	4603      	mov	r3, r0
 800b21a:	461a      	mov	r2, r3
 800b21c:	4b0b      	ldr	r3, [pc, #44]	; (800b24c <tcp_receive+0x96c>)
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	4322      	orrs	r2, r4
 800b222:	b292      	uxth	r2, r2
 800b224:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b226:	4b09      	ldr	r3, [pc, #36]	; (800b24c <tcp_receive+0x96c>)
 800b228:	891c      	ldrh	r4, [r3, #8]
 800b22a:	4b08      	ldr	r3, [pc, #32]	; (800b24c <tcp_receive+0x96c>)
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	899b      	ldrh	r3, [r3, #12]
 800b230:	b29b      	uxth	r3, r3
 800b232:	4618      	mov	r0, r3
 800b234:	f7fb faa9 	bl	800678a <lwip_htons>
 800b238:	4603      	mov	r3, r0
 800b23a:	f003 0303 	and.w	r3, r3, #3
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00e      	beq.n	800b260 <tcp_receive+0x980>
 800b242:	2301      	movs	r3, #1
 800b244:	e00d      	b.n	800b262 <tcp_receive+0x982>
 800b246:	bf00      	nop
 800b248:	20006f94 	.word	0x20006f94
 800b24c:	20006f74 	.word	0x20006f74
 800b250:	20006f9e 	.word	0x20006f9e
 800b254:	08016fb4 	.word	0x08016fb4
 800b258:	08017280 	.word	0x08017280
 800b25c:	08016ff8 	.word	0x08016ff8
 800b260:	2300      	movs	r3, #0
 800b262:	4423      	add	r3, r4
 800b264:	b29a      	uxth	r2, r3
 800b266:	4b95      	ldr	r3, [pc, #596]	; (800b4bc <tcp_receive+0xbdc>)
 800b268:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800b26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26c:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800b26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800b274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b276:	f7fd fe4f 	bl	8008f18 <tcp_seg_free>
            while (next &&
 800b27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00e      	beq.n	800b29e <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b280:	4b8e      	ldr	r3, [pc, #568]	; (800b4bc <tcp_receive+0xbdc>)
 800b282:	881b      	ldrh	r3, [r3, #0]
 800b284:	461a      	mov	r2, r3
 800b286:	4b8e      	ldr	r3, [pc, #568]	; (800b4c0 <tcp_receive+0xbe0>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	441a      	add	r2, r3
 800b28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b294:	8909      	ldrh	r1, [r1, #8]
 800b296:	440b      	add	r3, r1
 800b298:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	da9d      	bge.n	800b1da <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d057      	beq.n	800b354 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 800b2a4:	4b85      	ldr	r3, [pc, #532]	; (800b4bc <tcp_receive+0xbdc>)
 800b2a6:	881b      	ldrh	r3, [r3, #0]
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	4b85      	ldr	r3, [pc, #532]	; (800b4c0 <tcp_receive+0xbe0>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	441a      	add	r2, r3
 800b2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	dd4b      	ble.n	800b354 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	4b7e      	ldr	r3, [pc, #504]	; (800b4c0 <tcp_receive+0xbe0>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	1ad3      	subs	r3, r2, r3
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	4b7d      	ldr	r3, [pc, #500]	; (800b4c4 <tcp_receive+0xbe4>)
 800b2d0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b2d2:	4b7c      	ldr	r3, [pc, #496]	; (800b4c4 <tcp_receive+0xbe4>)
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	899b      	ldrh	r3, [r3, #12]
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7fb fa55 	bl	800678a <lwip_htons>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	f003 0302 	and.w	r3, r3, #2
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d005      	beq.n	800b2f6 <tcp_receive+0xa16>
                inseg.len -= 1;
 800b2ea:	4b76      	ldr	r3, [pc, #472]	; (800b4c4 <tcp_receive+0xbe4>)
 800b2ec:	891b      	ldrh	r3, [r3, #8]
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	4b74      	ldr	r3, [pc, #464]	; (800b4c4 <tcp_receive+0xbe4>)
 800b2f4:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b2f6:	4b73      	ldr	r3, [pc, #460]	; (800b4c4 <tcp_receive+0xbe4>)
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	4a72      	ldr	r2, [pc, #456]	; (800b4c4 <tcp_receive+0xbe4>)
 800b2fc:	8912      	ldrh	r2, [r2, #8]
 800b2fe:	4611      	mov	r1, r2
 800b300:	4618      	mov	r0, r3
 800b302:	f7fc fa9f 	bl	8007844 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b306:	4b6f      	ldr	r3, [pc, #444]	; (800b4c4 <tcp_receive+0xbe4>)
 800b308:	891c      	ldrh	r4, [r3, #8]
 800b30a:	4b6e      	ldr	r3, [pc, #440]	; (800b4c4 <tcp_receive+0xbe4>)
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	899b      	ldrh	r3, [r3, #12]
 800b310:	b29b      	uxth	r3, r3
 800b312:	4618      	mov	r0, r3
 800b314:	f7fb fa39 	bl	800678a <lwip_htons>
 800b318:	4603      	mov	r3, r0
 800b31a:	f003 0303 	and.w	r3, r3, #3
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <tcp_receive+0xa46>
 800b322:	2301      	movs	r3, #1
 800b324:	e000      	b.n	800b328 <tcp_receive+0xa48>
 800b326:	2300      	movs	r3, #0
 800b328:	4423      	add	r3, r4
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	4b63      	ldr	r3, [pc, #396]	; (800b4bc <tcp_receive+0xbdc>)
 800b32e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b330:	4b62      	ldr	r3, [pc, #392]	; (800b4bc <tcp_receive+0xbdc>)
 800b332:	881b      	ldrh	r3, [r3, #0]
 800b334:	461a      	mov	r2, r3
 800b336:	4b62      	ldr	r3, [pc, #392]	; (800b4c0 <tcp_receive+0xbe0>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	441a      	add	r2, r3
 800b33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	429a      	cmp	r2, r3
 800b344:	d006      	beq.n	800b354 <tcp_receive+0xa74>
 800b346:	4b60      	ldr	r3, [pc, #384]	; (800b4c8 <tcp_receive+0xbe8>)
 800b348:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800b34c:	495f      	ldr	r1, [pc, #380]	; (800b4cc <tcp_receive+0xbec>)
 800b34e:	4860      	ldr	r0, [pc, #384]	; (800b4d0 <tcp_receive+0xbf0>)
 800b350:	f007 f936 	bl	80125c0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b358:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b35a:	4b58      	ldr	r3, [pc, #352]	; (800b4bc <tcp_receive+0xbdc>)
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	461a      	mov	r2, r3
 800b360:	4b57      	ldr	r3, [pc, #348]	; (800b4c0 <tcp_receive+0xbe0>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	441a      	add	r2, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b36e:	4b53      	ldr	r3, [pc, #332]	; (800b4bc <tcp_receive+0xbdc>)
 800b370:	881b      	ldrh	r3, [r3, #0]
 800b372:	429a      	cmp	r2, r3
 800b374:	d206      	bcs.n	800b384 <tcp_receive+0xaa4>
 800b376:	4b54      	ldr	r3, [pc, #336]	; (800b4c8 <tcp_receive+0xbe8>)
 800b378:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b37c:	4955      	ldr	r1, [pc, #340]	; (800b4d4 <tcp_receive+0xbf4>)
 800b37e:	4854      	ldr	r0, [pc, #336]	; (800b4d0 <tcp_receive+0xbf0>)
 800b380:	f007 f91e 	bl	80125c0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b388:	4b4c      	ldr	r3, [pc, #304]	; (800b4bc <tcp_receive+0xbdc>)
 800b38a:	881b      	ldrh	r3, [r3, #0]
 800b38c:	1ad3      	subs	r3, r2, r3
 800b38e:	b29a      	uxth	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f7fd f973 	bl	8008680 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b39a:	4b4a      	ldr	r3, [pc, #296]	; (800b4c4 <tcp_receive+0xbe4>)
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	891b      	ldrh	r3, [r3, #8]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d006      	beq.n	800b3b2 <tcp_receive+0xad2>
          recv_data = inseg.p;
 800b3a4:	4b47      	ldr	r3, [pc, #284]	; (800b4c4 <tcp_receive+0xbe4>)
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	4a4b      	ldr	r2, [pc, #300]	; (800b4d8 <tcp_receive+0xbf8>)
 800b3aa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b3ac:	4b45      	ldr	r3, [pc, #276]	; (800b4c4 <tcp_receive+0xbe4>)
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b3b2:	4b44      	ldr	r3, [pc, #272]	; (800b4c4 <tcp_receive+0xbe4>)
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	899b      	ldrh	r3, [r3, #12]
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7fb f9e5 	bl	800678a <lwip_htons>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	f003 0301 	and.w	r3, r3, #1
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f000 80b4 	beq.w	800b534 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b3cc:	4b43      	ldr	r3, [pc, #268]	; (800b4dc <tcp_receive+0xbfc>)
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	f043 0320 	orr.w	r3, r3, #32
 800b3d4:	b2da      	uxtb	r2, r3
 800b3d6:	4b41      	ldr	r3, [pc, #260]	; (800b4dc <tcp_receive+0xbfc>)
 800b3d8:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b3da:	e0ab      	b.n	800b534 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3e0:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	4a35      	ldr	r2, [pc, #212]	; (800b4c0 <tcp_receive+0xbe0>)
 800b3ec:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	891b      	ldrh	r3, [r3, #8]
 800b3f2:	461c      	mov	r4, r3
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	899b      	ldrh	r3, [r3, #12]
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7fb f9c4 	bl	800678a <lwip_htons>
 800b402:	4603      	mov	r3, r0
 800b404:	f003 0303 	and.w	r3, r3, #3
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d001      	beq.n	800b410 <tcp_receive+0xb30>
 800b40c:	2301      	movs	r3, #1
 800b40e:	e000      	b.n	800b412 <tcp_receive+0xb32>
 800b410:	2300      	movs	r3, #0
 800b412:	191a      	adds	r2, r3, r4
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b418:	441a      	add	r2, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b422:	461c      	mov	r4, r3
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	891b      	ldrh	r3, [r3, #8]
 800b428:	461d      	mov	r5, r3
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	899b      	ldrh	r3, [r3, #12]
 800b430:	b29b      	uxth	r3, r3
 800b432:	4618      	mov	r0, r3
 800b434:	f7fb f9a9 	bl	800678a <lwip_htons>
 800b438:	4603      	mov	r3, r0
 800b43a:	f003 0303 	and.w	r3, r3, #3
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <tcp_receive+0xb66>
 800b442:	2301      	movs	r3, #1
 800b444:	e000      	b.n	800b448 <tcp_receive+0xb68>
 800b446:	2300      	movs	r3, #0
 800b448:	442b      	add	r3, r5
 800b44a:	429c      	cmp	r4, r3
 800b44c:	d206      	bcs.n	800b45c <tcp_receive+0xb7c>
 800b44e:	4b1e      	ldr	r3, [pc, #120]	; (800b4c8 <tcp_receive+0xbe8>)
 800b450:	f240 52dd 	movw	r2, #1501	; 0x5dd
 800b454:	4922      	ldr	r1, [pc, #136]	; (800b4e0 <tcp_receive+0xc00>)
 800b456:	481e      	ldr	r0, [pc, #120]	; (800b4d0 <tcp_receive+0xbf0>)
 800b458:	f007 f8b2 	bl	80125c0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	891b      	ldrh	r3, [r3, #8]
 800b460:	461c      	mov	r4, r3
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	899b      	ldrh	r3, [r3, #12]
 800b468:	b29b      	uxth	r3, r3
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fb f98d 	bl	800678a <lwip_htons>
 800b470:	4603      	mov	r3, r0
 800b472:	f003 0303 	and.w	r3, r3, #3
 800b476:	2b00      	cmp	r3, #0
 800b478:	d001      	beq.n	800b47e <tcp_receive+0xb9e>
 800b47a:	2301      	movs	r3, #1
 800b47c:	e000      	b.n	800b480 <tcp_receive+0xba0>
 800b47e:	2300      	movs	r3, #0
 800b480:	1919      	adds	r1, r3, r4
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b486:	b28b      	uxth	r3, r1
 800b488:	1ad3      	subs	r3, r2, r3
 800b48a:	b29a      	uxth	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7fd f8f5 	bl	8008680 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	891b      	ldrh	r3, [r3, #8]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d028      	beq.n	800b4f2 <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b4a0:	4b0d      	ldr	r3, [pc, #52]	; (800b4d8 <tcp_receive+0xbf8>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d01d      	beq.n	800b4e4 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 800b4a8:	4b0b      	ldr	r3, [pc, #44]	; (800b4d8 <tcp_receive+0xbf8>)
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	4610      	mov	r0, r2
 800b4b4:	f7fc fc06 	bl	8007cc4 <pbuf_cat>
 800b4b8:	e018      	b.n	800b4ec <tcp_receive+0xc0c>
 800b4ba:	bf00      	nop
 800b4bc:	20006f9e 	.word	0x20006f9e
 800b4c0:	20006f94 	.word	0x20006f94
 800b4c4:	20006f74 	.word	0x20006f74
 800b4c8:	08016fb4 	.word	0x08016fb4
 800b4cc:	080172b8 	.word	0x080172b8
 800b4d0:	08016ff8 	.word	0x08016ff8
 800b4d4:	080172f4 	.word	0x080172f4
 800b4d8:	20006fa4 	.word	0x20006fa4
 800b4dc:	20006fa1 	.word	0x20006fa1
 800b4e0:	08017314 	.word	0x08017314
            } else {
              recv_data = cseg->p;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	4a71      	ldr	r2, [pc, #452]	; (800b6b0 <tcp_receive+0xdd0>)
 800b4ea:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	899b      	ldrh	r3, [r3, #12]
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7fb f945 	bl	800678a <lwip_htons>
 800b500:	4603      	mov	r3, r0
 800b502:	f003 0301 	and.w	r3, r3, #1
 800b506:	2b00      	cmp	r3, #0
 800b508:	d00d      	beq.n	800b526 <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b50a:	4b6a      	ldr	r3, [pc, #424]	; (800b6b4 <tcp_receive+0xdd4>)
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	f043 0320 	orr.w	r3, r3, #32
 800b512:	b2da      	uxtb	r2, r3
 800b514:	4b67      	ldr	r3, [pc, #412]	; (800b6b4 <tcp_receive+0xdd4>)
 800b516:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	7d1b      	ldrb	r3, [r3, #20]
 800b51c:	2b04      	cmp	r3, #4
 800b51e:	d102      	bne.n	800b526 <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2207      	movs	r2, #7
 800b524:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800b52e:	68f8      	ldr	r0, [r7, #12]
 800b530:	f7fd fcf2 	bl	8008f18 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d008      	beq.n	800b54e <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	685a      	ldr	r2, [r3, #4]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b548:	429a      	cmp	r2, r3
 800b54a:	f43f af47 	beq.w	800b3dc <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	7e9b      	ldrb	r3, [r3, #26]
 800b552:	f003 0301 	and.w	r3, r3, #1
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00e      	beq.n	800b578 <tcp_receive+0xc98>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	7e9b      	ldrb	r3, [r3, #26]
 800b55e:	f023 0301 	bic.w	r3, r3, #1
 800b562:	b2da      	uxtb	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	769a      	strb	r2, [r3, #26]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	7e9b      	ldrb	r3, [r3, #26]
 800b56c:	f043 0302 	orr.w	r3, r3, #2
 800b570:	b2da      	uxtb	r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b576:	e181      	b.n	800b87c <tcp_receive+0xf9c>
        tcp_ack(pcb);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	7e9b      	ldrb	r3, [r3, #26]
 800b57c:	f043 0301 	orr.w	r3, r3, #1
 800b580:	b2da      	uxtb	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b586:	e179      	b.n	800b87c <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 fcb5 	bl	800bef8 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b592:	2b00      	cmp	r3, #0
 800b594:	d106      	bne.n	800b5a4 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b596:	4848      	ldr	r0, [pc, #288]	; (800b6b8 <tcp_receive+0xdd8>)
 800b598:	f7fd fcd6 	bl	8008f48 <tcp_seg_copy>
 800b59c:	4602      	mov	r2, r0
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800b5a2:	e16b      	b.n	800b87c <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5ae:	e150      	b.n	800b852 <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 800b5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	685a      	ldr	r2, [r3, #4]
 800b5b6:	4b41      	ldr	r3, [pc, #260]	; (800b6bc <tcp_receive+0xddc>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d11d      	bne.n	800b5fa <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b5be:	4b3e      	ldr	r3, [pc, #248]	; (800b6b8 <tcp_receive+0xdd8>)
 800b5c0:	891a      	ldrh	r2, [r3, #8]
 800b5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c4:	891b      	ldrh	r3, [r3, #8]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	f240 8148 	bls.w	800b85c <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800b5cc:	483a      	ldr	r0, [pc, #232]	; (800b6b8 <tcp_receive+0xdd8>)
 800b5ce:	f7fd fcbb 	bl	8008f48 <tcp_seg_copy>
 800b5d2:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	f000 8142 	beq.w	800b860 <tcp_receive+0xf80>
                  if (prev != NULL) {
 800b5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d003      	beq.n	800b5ea <tcp_receive+0xd0a>
                    prev->next = cseg;
 800b5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	601a      	str	r2, [r3, #0]
 800b5e8:	e002      	b.n	800b5f0 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	68fa      	ldr	r2, [r7, #12]
 800b5ee:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b5f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5f2:	68f8      	ldr	r0, [r7, #12]
 800b5f4:	f7ff f8fe 	bl	800a7f4 <tcp_oos_insert_segment>
                }
                break;
 800b5f8:	e132      	b.n	800b860 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d117      	bne.n	800b630 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b600:	4b2e      	ldr	r3, [pc, #184]	; (800b6bc <tcp_receive+0xddc>)
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	1ad3      	subs	r3, r2, r3
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	da57      	bge.n	800b6c0 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800b610:	4829      	ldr	r0, [pc, #164]	; (800b6b8 <tcp_receive+0xdd8>)
 800b612:	f7fd fc99 	bl	8008f48 <tcp_seg_copy>
 800b616:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	f000 8122 	beq.w	800b864 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800b626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f7ff f8e3 	bl	800a7f4 <tcp_oos_insert_segment>
                  }
                  break;
 800b62e:	e119      	b.n	800b864 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800b630:	4b22      	ldr	r3, [pc, #136]	; (800b6bc <tcp_receive+0xddc>)
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	1ad3      	subs	r3, r2, r3
 800b63c:	3b01      	subs	r3, #1
 800b63e:	2b00      	cmp	r3, #0
 800b640:	db3e      	blt.n	800b6c0 <tcp_receive+0xde0>
 800b642:	4b1e      	ldr	r3, [pc, #120]	; (800b6bc <tcp_receive+0xddc>)
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b648:	68db      	ldr	r3, [r3, #12]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	1ad3      	subs	r3, r2, r3
 800b64e:	3301      	adds	r3, #1
 800b650:	2b00      	cmp	r3, #0
 800b652:	dc35      	bgt.n	800b6c0 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800b654:	4818      	ldr	r0, [pc, #96]	; (800b6b8 <tcp_receive+0xdd8>)
 800b656:	f7fd fc77 	bl	8008f48 <tcp_seg_copy>
 800b65a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f000 8102 	beq.w	800b868 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b66c:	8912      	ldrh	r2, [r2, #8]
 800b66e:	441a      	add	r2, r3
 800b670:	4b12      	ldr	r3, [pc, #72]	; (800b6bc <tcp_receive+0xddc>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	2b00      	cmp	r3, #0
 800b678:	dd12      	ble.n	800b6a0 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b67a:	4b10      	ldr	r3, [pc, #64]	; (800b6bc <tcp_receive+0xddc>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	b29a      	uxth	r2, r3
 800b680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	b29b      	uxth	r3, r3
 800b688:	1ad3      	subs	r3, r2, r3
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b692:	685a      	ldr	r2, [r3, #4]
 800b694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b696:	891b      	ldrh	r3, [r3, #8]
 800b698:	4619      	mov	r1, r3
 800b69a:	4610      	mov	r0, r2
 800b69c:	f7fc f8d2 	bl	8007844 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b6a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f7ff f8a3 	bl	800a7f4 <tcp_oos_insert_segment>
                  }
                  break;
 800b6ae:	e0db      	b.n	800b868 <tcp_receive+0xf88>
 800b6b0:	20006fa4 	.word	0x20006fa4
 800b6b4:	20006fa1 	.word	0x20006fa1
 800b6b8:	20006f74 	.word	0x20006f74
 800b6bc:	20006f94 	.word	0x20006f94
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f040 80bf 	bne.w	800b848 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b6ca:	4b7c      	ldr	r3, [pc, #496]	; (800b8bc <tcp_receive+0xfdc>)
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	f340 80b6 	ble.w	800b848 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	899b      	ldrh	r3, [r3, #12]
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7fb f850 	bl	800678a <lwip_htons>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	f003 0301 	and.w	r3, r3, #1
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f040 80bb 	bne.w	800b86c <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b6f6:	4872      	ldr	r0, [pc, #456]	; (800b8c0 <tcp_receive+0xfe0>)
 800b6f8:	f7fd fc26 	bl	8008f48 <tcp_seg_copy>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b700:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	f000 80b2 	beq.w	800b870 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b714:	8912      	ldrh	r2, [r2, #8]
 800b716:	441a      	add	r2, r3
 800b718:	4b68      	ldr	r3, [pc, #416]	; (800b8bc <tcp_receive+0xfdc>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	1ad3      	subs	r3, r2, r3
 800b71e:	2b00      	cmp	r3, #0
 800b720:	dd12      	ble.n	800b748 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b722:	4b66      	ldr	r3, [pc, #408]	; (800b8bc <tcp_receive+0xfdc>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	b29a      	uxth	r2, r3
 800b728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	b29b      	uxth	r3, r3
 800b730:	1ad3      	subs	r3, r2, r3
 800b732:	b29a      	uxth	r2, r3
 800b734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b736:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b73a:	685a      	ldr	r2, [r3, #4]
 800b73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b73e:	891b      	ldrh	r3, [r3, #8]
 800b740:	4619      	mov	r1, r3
 800b742:	4610      	mov	r0, r2
 800b744:	f7fc f87e 	bl	8007844 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b748:	4b5e      	ldr	r3, [pc, #376]	; (800b8c4 <tcp_receive+0xfe4>)
 800b74a:	881b      	ldrh	r3, [r3, #0]
 800b74c:	461a      	mov	r2, r3
 800b74e:	4b5b      	ldr	r3, [pc, #364]	; (800b8bc <tcp_receive+0xfdc>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	441a      	add	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b758:	6879      	ldr	r1, [r7, #4]
 800b75a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b75c:	440b      	add	r3, r1
 800b75e:	1ad3      	subs	r3, r2, r3
 800b760:	2b00      	cmp	r3, #0
 800b762:	f340 8085 	ble.w	800b870 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	899b      	ldrh	r3, [r3, #12]
 800b76e:	b29b      	uxth	r3, r3
 800b770:	4618      	mov	r0, r3
 800b772:	f7fb f80a 	bl	800678a <lwip_htons>
 800b776:	4603      	mov	r3, r0
 800b778:	f003 0301 	and.w	r3, r3, #1
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d01e      	beq.n	800b7be <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	899b      	ldrh	r3, [r3, #12]
 800b788:	b29b      	uxth	r3, r3
 800b78a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b78e:	b29c      	uxth	r4, r3
 800b790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	899b      	ldrh	r3, [r3, #12]
 800b798:	b29b      	uxth	r3, r3
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7fa fff5 	bl	800678a <lwip_htons>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7fa ffee 	bl	800678a <lwip_htons>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	4322      	orrs	r2, r4
 800b7ba:	b292      	uxth	r2, r2
 800b7bc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7c8:	4413      	add	r3, r2
 800b7ca:	b299      	uxth	r1, r3
 800b7cc:	4b3b      	ldr	r3, [pc, #236]	; (800b8bc <tcp_receive+0xfdc>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	b29a      	uxth	r2, r3
 800b7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	1a8a      	subs	r2, r1, r2
 800b7d8:	b292      	uxth	r2, r2
 800b7da:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	685a      	ldr	r2, [r3, #4]
 800b7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	891b      	ldrh	r3, [r3, #8]
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	4610      	mov	r0, r2
 800b7ec:	f7fc f82a 	bl	8007844 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	891c      	ldrh	r4, [r3, #8]
 800b7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	899b      	ldrh	r3, [r3, #12]
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	4618      	mov	r0, r3
 800b802:	f7fa ffc2 	bl	800678a <lwip_htons>
 800b806:	4603      	mov	r3, r0
 800b808:	f003 0303 	and.w	r3, r3, #3
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d001      	beq.n	800b814 <tcp_receive+0xf34>
 800b810:	2301      	movs	r3, #1
 800b812:	e000      	b.n	800b816 <tcp_receive+0xf36>
 800b814:	2300      	movs	r3, #0
 800b816:	4423      	add	r3, r4
 800b818:	b29a      	uxth	r2, r3
 800b81a:	4b2a      	ldr	r3, [pc, #168]	; (800b8c4 <tcp_receive+0xfe4>)
 800b81c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b81e:	4b29      	ldr	r3, [pc, #164]	; (800b8c4 <tcp_receive+0xfe4>)
 800b820:	881b      	ldrh	r3, [r3, #0]
 800b822:	461a      	mov	r2, r3
 800b824:	4b25      	ldr	r3, [pc, #148]	; (800b8bc <tcp_receive+0xfdc>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	441a      	add	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82e:	6879      	ldr	r1, [r7, #4]
 800b830:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b832:	440b      	add	r3, r1
 800b834:	429a      	cmp	r2, r3
 800b836:	d01b      	beq.n	800b870 <tcp_receive+0xf90>
 800b838:	4b23      	ldr	r3, [pc, #140]	; (800b8c8 <tcp_receive+0xfe8>)
 800b83a:	f240 627a 	movw	r2, #1658	; 0x67a
 800b83e:	4923      	ldr	r1, [pc, #140]	; (800b8cc <tcp_receive+0xfec>)
 800b840:	4823      	ldr	r0, [pc, #140]	; (800b8d0 <tcp_receive+0xff0>)
 800b842:	f006 febd 	bl	80125c0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b846:	e013      	b.n	800b870 <tcp_receive+0xf90>
              }
            }
            prev = next;
 800b848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b854:	2b00      	cmp	r3, #0
 800b856:	f47f aeab 	bne.w	800b5b0 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 800b85a:	e00f      	b.n	800b87c <tcp_receive+0xf9c>
                break;
 800b85c:	bf00      	nop
 800b85e:	e00d      	b.n	800b87c <tcp_receive+0xf9c>
                break;
 800b860:	bf00      	nop
 800b862:	e00b      	b.n	800b87c <tcp_receive+0xf9c>
                  break;
 800b864:	bf00      	nop
 800b866:	e009      	b.n	800b87c <tcp_receive+0xf9c>
                  break;
 800b868:	bf00      	nop
 800b86a:	e007      	b.n	800b87c <tcp_receive+0xf9c>
                  break;
 800b86c:	bf00      	nop
 800b86e:	e005      	b.n	800b87c <tcp_receive+0xf9c>
                break;
 800b870:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800b872:	e003      	b.n	800b87c <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 fb3f 	bl	800bef8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b87a:	e01a      	b.n	800b8b2 <tcp_receive+0xfd2>
 800b87c:	e019      	b.n	800b8b2 <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b87e:	4b0f      	ldr	r3, [pc, #60]	; (800b8bc <tcp_receive+0xfdc>)
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b886:	1ad3      	subs	r3, r2, r3
 800b888:	2b00      	cmp	r3, #0
 800b88a:	db0a      	blt.n	800b8a2 <tcp_receive+0xfc2>
 800b88c:	4b0b      	ldr	r3, [pc, #44]	; (800b8bc <tcp_receive+0xfdc>)
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b894:	6879      	ldr	r1, [r7, #4]
 800b896:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b898:	440b      	add	r3, r1
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	3301      	adds	r3, #1
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	dd07      	ble.n	800b8b2 <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	7e9b      	ldrb	r3, [r3, #26]
 800b8a6:	f043 0302 	orr.w	r3, r3, #2
 800b8aa:	b2da      	uxtb	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800b8b0:	e7ff      	b.n	800b8b2 <tcp_receive+0xfd2>
 800b8b2:	bf00      	nop
 800b8b4:	3734      	adds	r7, #52	; 0x34
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	20006f94 	.word	0x20006f94
 800b8c0:	20006f74 	.word	0x20006f74
 800b8c4:	20006f9e 	.word	0x20006f9e
 800b8c8:	08016fb4 	.word	0x08016fb4
 800b8cc:	08017280 	.word	0x08017280
 800b8d0:	08016ff8 	.word	0x08016ff8

0800b8d4 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800b8da:	4b17      	ldr	r3, [pc, #92]	; (800b938 <tcp_getoptbyte+0x64>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d005      	beq.n	800b8ee <tcp_getoptbyte+0x1a>
 800b8e2:	4b16      	ldr	r3, [pc, #88]	; (800b93c <tcp_getoptbyte+0x68>)
 800b8e4:	881a      	ldrh	r2, [r3, #0]
 800b8e6:	4b16      	ldr	r3, [pc, #88]	; (800b940 <tcp_getoptbyte+0x6c>)
 800b8e8:	881b      	ldrh	r3, [r3, #0]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d20e      	bcs.n	800b90c <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800b8ee:	4b15      	ldr	r3, [pc, #84]	; (800b944 <tcp_getoptbyte+0x70>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	3314      	adds	r3, #20
 800b8f4:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800b8f6:	4b11      	ldr	r3, [pc, #68]	; (800b93c <tcp_getoptbyte+0x68>)
 800b8f8:	881b      	ldrh	r3, [r3, #0]
 800b8fa:	1c5a      	adds	r2, r3, #1
 800b8fc:	b291      	uxth	r1, r2
 800b8fe:	4a0f      	ldr	r2, [pc, #60]	; (800b93c <tcp_getoptbyte+0x68>)
 800b900:	8011      	strh	r1, [r2, #0]
 800b902:	461a      	mov	r2, r3
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	4413      	add	r3, r2
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	e010      	b.n	800b92e <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800b90c:	4b0b      	ldr	r3, [pc, #44]	; (800b93c <tcp_getoptbyte+0x68>)
 800b90e:	881b      	ldrh	r3, [r3, #0]
 800b910:	1c5a      	adds	r2, r3, #1
 800b912:	b291      	uxth	r1, r2
 800b914:	4a09      	ldr	r2, [pc, #36]	; (800b93c <tcp_getoptbyte+0x68>)
 800b916:	8011      	strh	r1, [r2, #0]
 800b918:	b2da      	uxtb	r2, r3
 800b91a:	4b09      	ldr	r3, [pc, #36]	; (800b940 <tcp_getoptbyte+0x6c>)
 800b91c:	881b      	ldrh	r3, [r3, #0]
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	1ad3      	subs	r3, r2, r3
 800b922:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800b924:	4b04      	ldr	r3, [pc, #16]	; (800b938 <tcp_getoptbyte+0x64>)
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	79fb      	ldrb	r3, [r7, #7]
 800b92a:	4413      	add	r3, r2
 800b92c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b92e:	4618      	mov	r0, r3
 800b930:	370c      	adds	r7, #12
 800b932:	46bd      	mov	sp, r7
 800b934:	bc80      	pop	{r7}
 800b936:	4770      	bx	lr
 800b938:	20006f8c 	.word	0x20006f8c
 800b93c:	20006f90 	.word	0x20006f90
 800b940:	20006f8a 	.word	0x20006f8a
 800b944:	20006f84 	.word	0x20006f84

0800b948 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b950:	4b2e      	ldr	r3, [pc, #184]	; (800ba0c <tcp_parseopt+0xc4>)
 800b952:	881b      	ldrh	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d055      	beq.n	800ba04 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b958:	4b2d      	ldr	r3, [pc, #180]	; (800ba10 <tcp_parseopt+0xc8>)
 800b95a:	2200      	movs	r2, #0
 800b95c:	801a      	strh	r2, [r3, #0]
 800b95e:	e045      	b.n	800b9ec <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 800b960:	f7ff ffb8 	bl	800b8d4 <tcp_getoptbyte>
 800b964:	4603      	mov	r3, r0
 800b966:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b968:	7bfb      	ldrb	r3, [r7, #15]
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d006      	beq.n	800b97c <tcp_parseopt+0x34>
 800b96e:	2b02      	cmp	r3, #2
 800b970:	dc2b      	bgt.n	800b9ca <tcp_parseopt+0x82>
 800b972:	2b00      	cmp	r3, #0
 800b974:	d041      	beq.n	800b9fa <tcp_parseopt+0xb2>
 800b976:	2b01      	cmp	r3, #1
 800b978:	d127      	bne.n	800b9ca <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 800b97a:	e037      	b.n	800b9ec <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b97c:	f7ff ffaa 	bl	800b8d4 <tcp_getoptbyte>
 800b980:	4603      	mov	r3, r0
 800b982:	2b04      	cmp	r3, #4
 800b984:	d13b      	bne.n	800b9fe <tcp_parseopt+0xb6>
 800b986:	4b22      	ldr	r3, [pc, #136]	; (800ba10 <tcp_parseopt+0xc8>)
 800b988:	881b      	ldrh	r3, [r3, #0]
 800b98a:	3301      	adds	r3, #1
 800b98c:	4a1f      	ldr	r2, [pc, #124]	; (800ba0c <tcp_parseopt+0xc4>)
 800b98e:	8812      	ldrh	r2, [r2, #0]
 800b990:	4293      	cmp	r3, r2
 800b992:	da34      	bge.n	800b9fe <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800b994:	f7ff ff9e 	bl	800b8d4 <tcp_getoptbyte>
 800b998:	4603      	mov	r3, r0
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	021b      	lsls	r3, r3, #8
 800b99e:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800b9a0:	f7ff ff98 	bl	800b8d4 <tcp_getoptbyte>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	89bb      	ldrh	r3, [r7, #12]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b9ae:	89bb      	ldrh	r3, [r7, #12]
 800b9b0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b9b4:	d804      	bhi.n	800b9c0 <tcp_parseopt+0x78>
 800b9b6:	89bb      	ldrh	r3, [r7, #12]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d001      	beq.n	800b9c0 <tcp_parseopt+0x78>
 800b9bc:	89ba      	ldrh	r2, [r7, #12]
 800b9be:	e001      	b.n	800b9c4 <tcp_parseopt+0x7c>
 800b9c0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800b9c8:	e010      	b.n	800b9ec <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800b9ca:	f7ff ff83 	bl	800b8d4 <tcp_getoptbyte>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800b9d2:	7afb      	ldrb	r3, [r7, #11]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d914      	bls.n	800ba02 <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800b9d8:	7afb      	ldrb	r3, [r7, #11]
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	4b0c      	ldr	r3, [pc, #48]	; (800ba10 <tcp_parseopt+0xc8>)
 800b9de:	881b      	ldrh	r3, [r3, #0]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	3b02      	subs	r3, #2
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	4b09      	ldr	r3, [pc, #36]	; (800ba10 <tcp_parseopt+0xc8>)
 800b9ea:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b9ec:	4b08      	ldr	r3, [pc, #32]	; (800ba10 <tcp_parseopt+0xc8>)
 800b9ee:	881a      	ldrh	r2, [r3, #0]
 800b9f0:	4b06      	ldr	r3, [pc, #24]	; (800ba0c <tcp_parseopt+0xc4>)
 800b9f2:	881b      	ldrh	r3, [r3, #0]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d3b3      	bcc.n	800b960 <tcp_parseopt+0x18>
 800b9f8:	e004      	b.n	800ba04 <tcp_parseopt+0xbc>
        return;
 800b9fa:	bf00      	nop
 800b9fc:	e002      	b.n	800ba04 <tcp_parseopt+0xbc>
          return;
 800b9fe:	bf00      	nop
 800ba00:	e000      	b.n	800ba04 <tcp_parseopt+0xbc>
          return;
 800ba02:	bf00      	nop
      }
    }
  }
}
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	20006f88 	.word	0x20006f88
 800ba10:	20006f90 	.word	0x20006f90

0800ba14 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ba14:	b480      	push	{r7}
 800ba16:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ba18:	4b05      	ldr	r3, [pc, #20]	; (800ba30 <tcp_trigger_input_pcb_close+0x1c>)
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	f043 0310 	orr.w	r3, r3, #16
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	4b03      	ldr	r3, [pc, #12]	; (800ba30 <tcp_trigger_input_pcb_close+0x1c>)
 800ba24:	701a      	strb	r2, [r3, #0]
}
 800ba26:	bf00      	nop
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bc80      	pop	{r7}
 800ba2c:	4770      	bx	lr
 800ba2e:	bf00      	nop
 800ba30:	20006fa1 	.word	0x20006fa1

0800ba34 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b086      	sub	sp, #24
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	607b      	str	r3, [r7, #4]
 800ba3e:	460b      	mov	r3, r1
 800ba40:	817b      	strh	r3, [r7, #10]
 800ba42:	4613      	mov	r3, r2
 800ba44:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ba46:	897a      	ldrh	r2, [r7, #10]
 800ba48:	893b      	ldrh	r3, [r7, #8]
 800ba4a:	4413      	add	r3, r2
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	3314      	adds	r3, #20
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	2200      	movs	r2, #0
 800ba54:	4619      	mov	r1, r3
 800ba56:	2001      	movs	r0, #1
 800ba58:	f7fb fcf0 	bl	800743c <pbuf_alloc>
 800ba5c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d056      	beq.n	800bb12 <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ba64:	897b      	ldrh	r3, [r7, #10]
 800ba66:	3313      	adds	r3, #19
 800ba68:	697a      	ldr	r2, [r7, #20]
 800ba6a:	8952      	ldrh	r2, [r2, #10]
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	db05      	blt.n	800ba7c <tcp_output_alloc_header+0x48>
 800ba70:	4b2a      	ldr	r3, [pc, #168]	; (800bb1c <tcp_output_alloc_header+0xe8>)
 800ba72:	2272      	movs	r2, #114	; 0x72
 800ba74:	492a      	ldr	r1, [pc, #168]	; (800bb20 <tcp_output_alloc_header+0xec>)
 800ba76:	482b      	ldr	r0, [pc, #172]	; (800bb24 <tcp_output_alloc_header+0xf0>)
 800ba78:	f006 fda2 	bl	80125c0 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	8adb      	ldrh	r3, [r3, #22]
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fa fe7f 	bl	800678a <lwip_htons>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	461a      	mov	r2, r3
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	8b1b      	ldrh	r3, [r3, #24]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7fa fe76 	bl	800678a <lwip_htons>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	461a      	mov	r2, r3
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fa fe77 	bl	80067a4 <lwip_htonl>
 800bab6:	4602      	mov	r2, r0
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800babc:	897b      	ldrh	r3, [r7, #10]
 800babe:	089b      	lsrs	r3, r3, #2
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	3305      	adds	r3, #5
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	031b      	lsls	r3, r3, #12
 800bac8:	b29b      	uxth	r3, r3
 800baca:	f043 0310 	orr.w	r3, r3, #16
 800bace:	b29b      	uxth	r3, r3
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7fa fe5a 	bl	800678a <lwip_htons>
 800bad6:	4603      	mov	r3, r0
 800bad8:	461a      	mov	r2, r3
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fa fe51 	bl	800678a <lwip_htons>
 800bae8:	4603      	mov	r3, r0
 800baea:	461a      	mov	r2, r3
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	2200      	movs	r2, #0
 800baf4:	741a      	strb	r2, [r3, #16]
 800baf6:	2200      	movs	r2, #0
 800baf8:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	2200      	movs	r2, #0
 800bafe:	749a      	strb	r2, [r3, #18]
 800bb00:	2200      	movs	r2, #0
 800bb02:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb08:	68fa      	ldr	r2, [r7, #12]
 800bb0a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bb0c:	441a      	add	r2, r3
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800bb12:	697b      	ldr	r3, [r7, #20]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3718      	adds	r7, #24
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	0801733c 	.word	0x0801733c
 800bb20:	08017370 	.word	0x08017370
 800bb24:	080173a0 	.word	0x080173a0

0800bb28 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800bb28:	b590      	push	{r4, r7, lr}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d02d      	beq.n	800bb94 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb3c:	60fb      	str	r3, [r7, #12]
 800bb3e:	e002      	b.n	800bb46 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1f8      	bne.n	800bb40 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	899b      	ldrh	r3, [r3, #12]
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fa fe17 	bl	800678a <lwip_htons>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	f003 0307 	and.w	r3, r3, #7
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d116      	bne.n	800bb94 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	899b      	ldrh	r3, [r3, #12]
 800bb6c:	b29c      	uxth	r4, r3
 800bb6e:	2001      	movs	r0, #1
 800bb70:	f7fa fe0b 	bl	800678a <lwip_htons>
 800bb74:	4603      	mov	r3, r0
 800bb76:	461a      	mov	r2, r3
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	4322      	orrs	r2, r4
 800bb7e:	b292      	uxth	r2, r2
 800bb80:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	7e9b      	ldrb	r3, [r3, #26]
 800bb86:	f043 0320 	orr.w	r3, r3, #32
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800bb90:	2300      	movs	r3, #0
 800bb92:	e004      	b.n	800bb9e <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bb94:	2101      	movs	r1, #1
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 f898 	bl	800bccc <tcp_enqueue_flags>
 800bb9c:	4603      	mov	r3, r0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3714      	adds	r7, #20
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd90      	pop	{r4, r7, pc}
	...

0800bba8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800bba8:	b590      	push	{r4, r7, lr}
 800bbaa:	b087      	sub	sp, #28
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	603b      	str	r3, [r7, #0]
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bbb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	f003 0304 	and.w	r3, r3, #4
 800bbc4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bbc6:	2003      	movs	r0, #3
 800bbc8:	f7fb fa20 	bl	800700c <memp_malloc>
 800bbcc:	6138      	str	r0, [r7, #16]
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d104      	bne.n	800bbde <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800bbd4:	68b8      	ldr	r0, [r7, #8]
 800bbd6:	f7fb ffa9 	bl	8007b2c <pbuf_free>
    return NULL;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	e069      	b.n	800bcb2 <tcp_create_segment+0x10a>
  }
  seg->flags = optflags;
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800bbe4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	68ba      	ldr	r2, [r7, #8]
 800bbf0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	891a      	ldrh	r2, [r3, #8]
 800bbf6:	7dfb      	ldrb	r3, [r7, #23]
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d205      	bcs.n	800bc0a <tcp_create_segment+0x62>
 800bbfe:	4b2f      	ldr	r3, [pc, #188]	; (800bcbc <tcp_create_segment+0x114>)
 800bc00:	22ba      	movs	r2, #186	; 0xba
 800bc02:	492f      	ldr	r1, [pc, #188]	; (800bcc0 <tcp_create_segment+0x118>)
 800bc04:	482f      	ldr	r0, [pc, #188]	; (800bcc4 <tcp_create_segment+0x11c>)
 800bc06:	f006 fcdb 	bl	80125c0 <iprintf>
  seg->len = p->tot_len - optlen;
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	891a      	ldrh	r2, [r3, #8]
 800bc0e:	7dfb      	ldrb	r3, [r7, #23]
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	1ad3      	subs	r3, r2, r3
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800bc1a:	2114      	movs	r1, #20
 800bc1c:	68b8      	ldr	r0, [r7, #8]
 800bc1e:	f7fb ff61 	bl	8007ae4 <pbuf_header>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d00c      	beq.n	800bc42 <tcp_create_segment+0x9a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 800bc28:	4b27      	ldr	r3, [pc, #156]	; (800bcc8 <tcp_create_segment+0x120>)
 800bc2a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800bc2e:	3301      	adds	r3, #1
 800bc30:	b29a      	uxth	r2, r3
 800bc32:	4b25      	ldr	r3, [pc, #148]	; (800bcc8 <tcp_create_segment+0x120>)
 800bc34:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
 800bc38:	6938      	ldr	r0, [r7, #16]
 800bc3a:	f7fd f96d 	bl	8008f18 <tcp_seg_free>
    return NULL;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	e037      	b.n	800bcb2 <tcp_create_segment+0x10a>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	685a      	ldr	r2, [r3, #4]
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	8ada      	ldrh	r2, [r3, #22]
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	68dc      	ldr	r4, [r3, #12]
 800bc54:	4610      	mov	r0, r2
 800bc56:	f7fa fd98 	bl	800678a <lwip_htons>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	8b1a      	ldrh	r2, [r3, #24]
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	68dc      	ldr	r4, [r3, #12]
 800bc66:	4610      	mov	r0, r2
 800bc68:	f7fa fd8f 	bl	800678a <lwip_htons>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	68dc      	ldr	r4, [r3, #12]
 800bc74:	6838      	ldr	r0, [r7, #0]
 800bc76:	f7fa fd95 	bl	80067a4 <lwip_htonl>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800bc7e:	7dfb      	ldrb	r3, [r7, #23]
 800bc80:	089b      	lsrs	r3, r3, #2
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	3305      	adds	r3, #5
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	031b      	lsls	r3, r3, #12
 800bc8c:	b29a      	uxth	r2, r3
 800bc8e:	79fb      	ldrb	r3, [r7, #7]
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	4313      	orrs	r3, r2
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	68dc      	ldr	r4, [r3, #12]
 800bc9a:	4610      	mov	r0, r2
 800bc9c:	f7fa fd75 	bl	800678a <lwip_htons>
 800bca0:	4603      	mov	r3, r0
 800bca2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	749a      	strb	r2, [r3, #18]
 800bcac:	2200      	movs	r2, #0
 800bcae:	74da      	strb	r2, [r3, #19]
  return seg;
 800bcb0:	693b      	ldr	r3, [r7, #16]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	371c      	adds	r7, #28
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd90      	pop	{r4, r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	0801733c 	.word	0x0801733c
 800bcc0:	080173c8 	.word	0x080173c8
 800bcc4:	080173a0 	.word	0x080173a0
 800bcc8:	20006e84 	.word	0x20006e84

0800bccc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b08a      	sub	sp, #40	; 0x28
 800bcd0:	af02      	add	r7, sp, #8
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bce0:	78fb      	ldrb	r3, [r7, #3]
 800bce2:	f003 0303 	and.w	r3, r3, #3
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d106      	bne.n	800bcf8 <tcp_enqueue_flags+0x2c>
 800bcea:	4b7b      	ldr	r3, [pc, #492]	; (800bed8 <tcp_enqueue_flags+0x20c>)
 800bcec:	f240 321a 	movw	r2, #794	; 0x31a
 800bcf0:	497a      	ldr	r1, [pc, #488]	; (800bedc <tcp_enqueue_flags+0x210>)
 800bcf2:	487b      	ldr	r0, [pc, #492]	; (800bee0 <tcp_enqueue_flags+0x214>)
 800bcf4:	f006 fc64 	bl	80125c0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bcfe:	2b08      	cmp	r3, #8
 800bd00:	d806      	bhi.n	800bd10 <tcp_enqueue_flags+0x44>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd08:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d916      	bls.n	800bd3e <tcp_enqueue_flags+0x72>
      ((flags & TCP_FIN) == 0)) {
 800bd10:	78fb      	ldrb	r3, [r7, #3]
 800bd12:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d111      	bne.n	800bd3e <tcp_enqueue_flags+0x72>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 800bd1a:	4b72      	ldr	r3, [pc, #456]	; (800bee4 <tcp_enqueue_flags+0x218>)
 800bd1c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800bd20:	3301      	adds	r3, #1
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	4b6f      	ldr	r3, [pc, #444]	; (800bee4 <tcp_enqueue_flags+0x218>)
 800bd26:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	7e9b      	ldrb	r3, [r3, #26]
 800bd2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bd32:	b2da      	uxtb	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800bd38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd3c:	e0c7      	b.n	800bece <tcp_enqueue_flags+0x202>
  }

  if (flags & TCP_SYN) {
 800bd3e:	78fb      	ldrb	r3, [r7, #3]
 800bd40:	f003 0302 	and.w	r3, r3, #2
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d001      	beq.n	800bd4c <tcp_enqueue_flags+0x80>
    optflags = TF_SEG_OPTS_MSS;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bd4c:	7ffb      	ldrb	r3, [r7, #31]
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	f003 0304 	and.w	r3, r3, #4
 800bd56:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bd58:	7dfb      	ldrb	r3, [r7, #23]
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	4619      	mov	r1, r3
 800bd60:	2000      	movs	r0, #0
 800bd62:	f7fb fb6b 	bl	800743c <pbuf_alloc>
 800bd66:	6138      	str	r0, [r7, #16]
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d111      	bne.n	800bd92 <tcp_enqueue_flags+0xc6>
    pcb->flags |= TF_NAGLEMEMERR;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	7e9b      	ldrb	r3, [r3, #26]
 800bd72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bd76:	b2da      	uxtb	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800bd7c:	4b59      	ldr	r3, [pc, #356]	; (800bee4 <tcp_enqueue_flags+0x218>)
 800bd7e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800bd82:	3301      	adds	r3, #1
 800bd84:	b29a      	uxth	r2, r3
 800bd86:	4b57      	ldr	r3, [pc, #348]	; (800bee4 <tcp_enqueue_flags+0x218>)
 800bd88:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 800bd8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd90:	e09d      	b.n	800bece <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	895a      	ldrh	r2, [r3, #10]
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d206      	bcs.n	800bdac <tcp_enqueue_flags+0xe0>
 800bd9e:	4b4e      	ldr	r3, [pc, #312]	; (800bed8 <tcp_enqueue_flags+0x20c>)
 800bda0:	f44f 7250 	mov.w	r2, #832	; 0x340
 800bda4:	4950      	ldr	r1, [pc, #320]	; (800bee8 <tcp_enqueue_flags+0x21c>)
 800bda6:	484e      	ldr	r0, [pc, #312]	; (800bee0 <tcp_enqueue_flags+0x214>)
 800bda8:	f006 fc0a 	bl	80125c0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800bdb0:	78fa      	ldrb	r2, [r7, #3]
 800bdb2:	7ffb      	ldrb	r3, [r7, #31]
 800bdb4:	9300      	str	r3, [sp, #0]
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	6939      	ldr	r1, [r7, #16]
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f7ff fef4 	bl	800bba8 <tcp_create_segment>
 800bdc0:	60f8      	str	r0, [r7, #12]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d111      	bne.n	800bdec <tcp_enqueue_flags+0x120>
    pcb->flags |= TF_NAGLEMEMERR;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	7e9b      	ldrb	r3, [r3, #26]
 800bdcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bdd0:	b2da      	uxtb	r2, r3
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800bdd6:	4b43      	ldr	r3, [pc, #268]	; (800bee4 <tcp_enqueue_flags+0x218>)
 800bdd8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800bddc:	3301      	adds	r3, #1
 800bdde:	b29a      	uxth	r2, r3
 800bde0:	4b40      	ldr	r3, [pc, #256]	; (800bee4 <tcp_enqueue_flags+0x218>)
 800bde2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 800bde6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdea:	e070      	b.n	800bece <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	68db      	ldr	r3, [r3, #12]
 800bdf0:	f003 0303 	and.w	r3, r3, #3
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d006      	beq.n	800be06 <tcp_enqueue_flags+0x13a>
 800bdf8:	4b37      	ldr	r3, [pc, #220]	; (800bed8 <tcp_enqueue_flags+0x20c>)
 800bdfa:	f240 3249 	movw	r2, #841	; 0x349
 800bdfe:	493b      	ldr	r1, [pc, #236]	; (800beec <tcp_enqueue_flags+0x220>)
 800be00:	4837      	ldr	r0, [pc, #220]	; (800bee0 <tcp_enqueue_flags+0x214>)
 800be02:	f006 fbdd 	bl	80125c0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	891b      	ldrh	r3, [r3, #8]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d006      	beq.n	800be1c <tcp_enqueue_flags+0x150>
 800be0e:	4b32      	ldr	r3, [pc, #200]	; (800bed8 <tcp_enqueue_flags+0x20c>)
 800be10:	f240 324a 	movw	r2, #842	; 0x34a
 800be14:	4936      	ldr	r1, [pc, #216]	; (800bef0 <tcp_enqueue_flags+0x224>)
 800be16:	4832      	ldr	r0, [pc, #200]	; (800bee0 <tcp_enqueue_flags+0x214>)
 800be18:	f006 fbd2 	bl	80125c0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be20:	2b00      	cmp	r3, #0
 800be22:	d103      	bne.n	800be2c <tcp_enqueue_flags+0x160>
    pcb->unsent = seg;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	68fa      	ldr	r2, [r7, #12]
 800be28:	669a      	str	r2, [r3, #104]	; 0x68
 800be2a:	e00d      	b.n	800be48 <tcp_enqueue_flags+0x17c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be30:	61bb      	str	r3, [r7, #24]
 800be32:	e002      	b.n	800be3a <tcp_enqueue_flags+0x16e>
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	61bb      	str	r3, [r7, #24]
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1f8      	bne.n	800be34 <tcp_enqueue_flags+0x168>
    useg->next = seg;
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800be50:	78fb      	ldrb	r3, [r7, #3]
 800be52:	f003 0302 	and.w	r3, r3, #2
 800be56:	2b00      	cmp	r3, #0
 800be58:	d104      	bne.n	800be64 <tcp_enqueue_flags+0x198>
 800be5a:	78fb      	ldrb	r3, [r7, #3]
 800be5c:	f003 0301 	and.w	r3, r3, #1
 800be60:	2b00      	cmp	r3, #0
 800be62:	d004      	beq.n	800be6e <tcp_enqueue_flags+0x1a2>
    pcb->snd_lbb++;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be68:	1c5a      	adds	r2, r3, #1
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800be6e:	78fb      	ldrb	r3, [r7, #3]
 800be70:	f003 0301 	and.w	r3, r3, #1
 800be74:	2b00      	cmp	r3, #0
 800be76:	d006      	beq.n	800be86 <tcp_enqueue_flags+0x1ba>
    pcb->flags |= TF_FIN;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	7e9b      	ldrb	r3, [r3, #26]
 800be7c:	f043 0320 	orr.w	r3, r3, #32
 800be80:	b2da      	uxtb	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fb fee2 	bl	8007c54 <pbuf_clen>
 800be90:	4603      	mov	r3, r0
 800be92:	461a      	mov	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be9a:	4413      	add	r3, r2
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00e      	beq.n	800becc <tcp_enqueue_flags+0x200>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10a      	bne.n	800becc <tcp_enqueue_flags+0x200>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d106      	bne.n	800becc <tcp_enqueue_flags+0x200>
 800bebe:	4b06      	ldr	r3, [pc, #24]	; (800bed8 <tcp_enqueue_flags+0x20c>)
 800bec0:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800bec4:	490b      	ldr	r1, [pc, #44]	; (800bef4 <tcp_enqueue_flags+0x228>)
 800bec6:	4806      	ldr	r0, [pc, #24]	; (800bee0 <tcp_enqueue_flags+0x214>)
 800bec8:	f006 fb7a 	bl	80125c0 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800becc:	2300      	movs	r3, #0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3720      	adds	r7, #32
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop
 800bed8:	0801733c 	.word	0x0801733c
 800bedc:	08017640 	.word	0x08017640
 800bee0:	080173a0 	.word	0x080173a0
 800bee4:	20006e84 	.word	0x20006e84
 800bee8:	08017698 	.word	0x08017698
 800beec:	080176d4 	.word	0x080176d4
 800bef0:	080176ec 	.word	0x080176ec
 800bef4:	08017718 	.word	0x08017718

0800bef8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bef8:	b590      	push	{r4, r7, lr}
 800befa:	b08b      	sub	sp, #44	; 0x2c
 800befc:	af04      	add	r7, sp, #16
 800befe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800bf00:	2300      	movs	r3, #0
 800bf02:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bf04:	7dbb      	ldrb	r3, [r7, #22]
 800bf06:	b29c      	uxth	r4, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7fa fc49 	bl	80067a4 <lwip_htonl>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2200      	movs	r2, #0
 800bf16:	4621      	mov	r1, r4
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f7ff fd8b 	bl	800ba34 <tcp_output_alloc_header>
 800bf1e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d109      	bne.n	800bf3a <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	7e9b      	ldrb	r3, [r3, #26]
 800bf2a:	f043 0303 	orr.w	r3, r3, #3
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800bf34:	f06f 0301 	mvn.w	r3, #1
 800bf38:	e036      	b.n	800bfa8 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	3304      	adds	r3, #4
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f002 fbce 	bl	800e6e0 <ip4_route>
 800bf44:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d102      	bne.n	800bf52 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800bf4c:	23fc      	movs	r3, #252	; 0xfc
 800bf4e:	75fb      	strb	r3, [r7, #23]
 800bf50:	e012      	b.n	800bf78 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800bf52:	6879      	ldr	r1, [r7, #4]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	1d18      	adds	r0, r3, #4
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	7a9c      	ldrb	r4, [r3, #10]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	7a5b      	ldrb	r3, [r3, #9]
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	9202      	str	r2, [sp, #8]
 800bf64:	2206      	movs	r2, #6
 800bf66:	9201      	str	r2, [sp, #4]
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	4623      	mov	r3, r4
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	6938      	ldr	r0, [r7, #16]
 800bf70:	f002 fdb8 	bl	800eae4 <ip4_output_if>
 800bf74:	4603      	mov	r3, r0
 800bf76:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800bf78:	6938      	ldr	r0, [r7, #16]
 800bf7a:	f7fb fdd7 	bl	8007b2c <pbuf_free>

  if (err != ERR_OK) {
 800bf7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d007      	beq.n	800bf96 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	7e9b      	ldrb	r3, [r3, #26]
 800bf8a:	f043 0303 	orr.w	r3, r3, #3
 800bf8e:	b2da      	uxtb	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	769a      	strb	r2, [r3, #26]
 800bf94:	e006      	b.n	800bfa4 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	7e9b      	ldrb	r3, [r3, #26]
 800bf9a:	f023 0303 	bic.w	r3, r3, #3
 800bf9e:	b2da      	uxtb	r2, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800bfa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	371c      	adds	r7, #28
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd90      	pop	{r4, r7, pc}

0800bfb0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800bfb0:	b5b0      	push	{r4, r5, r7, lr}
 800bfb2:	b08a      	sub	sp, #40	; 0x28
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	7d1b      	ldrb	r3, [r3, #20]
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d106      	bne.n	800bfce <tcp_output+0x1e>
 800bfc0:	4b99      	ldr	r3, [pc, #612]	; (800c228 <tcp_output+0x278>)
 800bfc2:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800bfc6:	4999      	ldr	r1, [pc, #612]	; (800c22c <tcp_output+0x27c>)
 800bfc8:	4899      	ldr	r0, [pc, #612]	; (800c230 <tcp_output+0x280>)
 800bfca:	f006 faf9 	bl	80125c0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800bfce:	4b99      	ldr	r3, [pc, #612]	; (800c234 <tcp_output+0x284>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d101      	bne.n	800bfdc <tcp_output+0x2c>
    return ERR_OK;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	e1cb      	b.n	800c374 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	bf28      	it	cs
 800bfec:	4613      	movcs	r3, r2
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bff6:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	7e9b      	ldrb	r3, [r3, #26]
 800bffc:	f003 0302 	and.w	r3, r3, #2
 800c000:	2b00      	cmp	r3, #0
 800c002:	d017      	beq.n	800c034 <tcp_output+0x84>
 800c004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00f      	beq.n	800c02a <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800c00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00c:	68db      	ldr	r3, [r3, #12]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	4618      	mov	r0, r3
 800c012:	f7fa fbc7 	bl	80067a4 <lwip_htonl>
 800c016:	4602      	mov	r2, r0
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c01c:	1ad3      	subs	r3, r2, r3
 800c01e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c020:	8912      	ldrh	r2, [r2, #8]
 800c022:	4413      	add	r3, r2
     (seg == NULL ||
 800c024:	69ba      	ldr	r2, [r7, #24]
 800c026:	429a      	cmp	r2, r3
 800c028:	d204      	bcs.n	800c034 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f7ff ff64 	bl	800bef8 <tcp_send_empty_ack>
 800c030:	4603      	mov	r3, r0
 800c032:	e19f      	b.n	800c374 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c038:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c03a:	6a3b      	ldr	r3, [r7, #32]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d007      	beq.n	800c050 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 800c040:	e002      	b.n	800c048 <tcp_output+0x98>
 800c042:	6a3b      	ldr	r3, [r7, #32]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	623b      	str	r3, [r7, #32]
 800c048:	6a3b      	ldr	r3, [r7, #32]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d1f8      	bne.n	800c042 <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	3304      	adds	r3, #4
 800c054:	4618      	mov	r0, r3
 800c056:	f002 fb43 	bl	800e6e0 <ip4_route>
 800c05a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d102      	bne.n	800c068 <tcp_output+0xb8>
    return ERR_RTE;
 800c062:	f06f 0303 	mvn.w	r3, #3
 800c066:	e185      	b.n	800c374 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d003      	beq.n	800c076 <tcp_output+0xc6>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d111      	bne.n	800c09a <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d002      	beq.n	800c082 <tcp_output+0xd2>
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	3304      	adds	r3, #4
 800c080:	e000      	b.n	800c084 <tcp_output+0xd4>
 800c082:	2300      	movs	r3, #0
 800c084:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d102      	bne.n	800c092 <tcp_output+0xe2>
      return ERR_RTE;
 800c08c:	f06f 0303 	mvn.w	r3, #3
 800c090:	e170      	b.n	800c374 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800c09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	f000 813f 	beq.w	800c320 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800c0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a4:	68db      	ldr	r3, [r3, #12]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7fa fb7b 	bl	80067a4 <lwip_htonl>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0b4:	1ad3      	subs	r3, r2, r3
 800c0b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0b8:	8912      	ldrh	r2, [r2, #8]
 800c0ba:	4413      	add	r3, r2
  if (seg != NULL &&
 800c0bc:	69ba      	ldr	r2, [r7, #24]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	f080 812e 	bcs.w	800c320 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	f000 812a 	beq.w	800c320 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	69bb      	ldr	r3, [r7, #24]
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	f040 8122 	bne.w	800c320 <tcp_output+0x370>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f040 811d 	bne.w	800c320 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	f040 812c 	bne.w	800c34a <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800c102:	e122      	b.n	800c34a <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c106:	68db      	ldr	r3, [r3, #12]
 800c108:	899b      	ldrh	r3, [r3, #12]
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7fa fb3c 	bl	800678a <lwip_htons>
 800c112:	4603      	mov	r3, r0
 800c114:	f003 0304 	and.w	r3, r3, #4
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d006      	beq.n	800c12a <tcp_output+0x17a>
 800c11c:	4b42      	ldr	r3, [pc, #264]	; (800c228 <tcp_output+0x278>)
 800c11e:	f240 4245 	movw	r2, #1093	; 0x445
 800c122:	4945      	ldr	r1, [pc, #276]	; (800c238 <tcp_output+0x288>)
 800c124:	4842      	ldr	r0, [pc, #264]	; (800c230 <tcp_output+0x280>)
 800c126:	f006 fa4b 	bl	80125c0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d01f      	beq.n	800c172 <tcp_output+0x1c2>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	7e9b      	ldrb	r3, [r3, #26]
 800c136:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d119      	bne.n	800c172 <tcp_output+0x1c2>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00b      	beq.n	800c15e <tcp_output+0x1ae>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d110      	bne.n	800c172 <tcp_output+0x1c2>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c154:	891a      	ldrh	r2, [r3, #8]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d209      	bcs.n	800c172 <tcp_output+0x1c2>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c164:	2b00      	cmp	r3, #0
 800c166:	d004      	beq.n	800c172 <tcp_output+0x1c2>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c16e:	2b08      	cmp	r3, #8
 800c170:	d901      	bls.n	800c176 <tcp_output+0x1c6>
 800c172:	2301      	movs	r3, #1
 800c174:	e000      	b.n	800c178 <tcp_output+0x1c8>
 800c176:	2300      	movs	r3, #0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d106      	bne.n	800c18a <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	7e9b      	ldrb	r3, [r3, #26]
 800c180:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c184:	2b00      	cmp	r3, #0
 800c186:	f000 80e2 	beq.w	800c34e <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	7d1b      	ldrb	r3, [r3, #20]
 800c18e:	2b02      	cmp	r3, #2
 800c190:	d00d      	beq.n	800c1ae <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	899b      	ldrh	r3, [r3, #12]
 800c198:	b29c      	uxth	r4, r3
 800c19a:	2010      	movs	r0, #16
 800c19c:	f7fa faf5 	bl	800678a <lwip_htons>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	4322      	orrs	r2, r4
 800c1aa:	b292      	uxth	r2, r2
 800c1ac:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800c1ae:	697a      	ldr	r2, [r7, #20]
 800c1b0:	6879      	ldr	r1, [r7, #4]
 800c1b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1b4:	f000 f8e2 	bl	800c37c <tcp_output_segment>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c1bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d009      	beq.n	800c1d8 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	7e9b      	ldrb	r3, [r3, #26]
 800c1c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c1cc:	b2da      	uxtb	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	769a      	strb	r2, [r3, #26]
      return err;
 800c1d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1d6:	e0cd      	b.n	800c374 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800c1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	7d1b      	ldrb	r3, [r3, #20]
 800c1e4:	2b02      	cmp	r3, #2
 800c1e6:	d006      	beq.n	800c1f6 <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	7e9b      	ldrb	r3, [r3, #26]
 800c1ec:	f023 0303 	bic.w	r3, r3, #3
 800c1f0:	b2da      	uxtb	r2, r3
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7fa fad1 	bl	80067a4 <lwip_htonl>
 800c202:	4604      	mov	r4, r0
 800c204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c206:	891b      	ldrh	r3, [r3, #8]
 800c208:	461d      	mov	r5, r3
 800c20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	899b      	ldrh	r3, [r3, #12]
 800c210:	b29b      	uxth	r3, r3
 800c212:	4618      	mov	r0, r3
 800c214:	f7fa fab9 	bl	800678a <lwip_htons>
 800c218:	4603      	mov	r3, r0
 800c21a:	f003 0303 	and.w	r3, r3, #3
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d00c      	beq.n	800c23c <tcp_output+0x28c>
 800c222:	2301      	movs	r3, #1
 800c224:	e00b      	b.n	800c23e <tcp_output+0x28e>
 800c226:	bf00      	nop
 800c228:	0801733c 	.word	0x0801733c
 800c22c:	08017740 	.word	0x08017740
 800c230:	080173a0 	.word	0x080173a0
 800c234:	20006fa8 	.word	0x20006fa8
 800c238:	08017768 	.word	0x08017768
 800c23c:	2300      	movs	r3, #0
 800c23e:	442b      	add	r3, r5
 800c240:	4423      	add	r3, r4
 800c242:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	1ad3      	subs	r3, r2, r3
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	da02      	bge.n	800c256 <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	68ba      	ldr	r2, [r7, #8]
 800c254:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c258:	891b      	ldrh	r3, [r3, #8]
 800c25a:	461c      	mov	r4, r3
 800c25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	899b      	ldrh	r3, [r3, #12]
 800c262:	b29b      	uxth	r3, r3
 800c264:	4618      	mov	r0, r3
 800c266:	f7fa fa90 	bl	800678a <lwip_htons>
 800c26a:	4603      	mov	r3, r0
 800c26c:	f003 0303 	and.w	r3, r3, #3
 800c270:	2b00      	cmp	r3, #0
 800c272:	d001      	beq.n	800c278 <tcp_output+0x2c8>
 800c274:	2301      	movs	r3, #1
 800c276:	e000      	b.n	800c27a <tcp_output+0x2ca>
 800c278:	2300      	movs	r3, #0
 800c27a:	4423      	add	r3, r4
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d049      	beq.n	800c314 <tcp_output+0x364>
      seg->next = NULL;
 800c280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c282:	2200      	movs	r2, #0
 800c284:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d105      	bne.n	800c29a <tcp_output+0x2ea>
        pcb->unacked = seg;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c292:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800c294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c296:	623b      	str	r3, [r7, #32]
 800c298:	e03f      	b.n	800c31a <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7fa fa7f 	bl	80067a4 <lwip_htonl>
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	6a3b      	ldr	r3, [r7, #32]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7fa fa78 	bl	80067a4 <lwip_htonl>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	1ae3      	subs	r3, r4, r3
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	da24      	bge.n	800c306 <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	336c      	adds	r3, #108	; 0x6c
 800c2c0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c2c2:	e002      	b.n	800c2ca <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c2ca:	69fb      	ldr	r3, [r7, #28]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d011      	beq.n	800c2f6 <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fa fa62 	bl	80067a4 <lwip_htonl>
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7fa fa5b 	bl	80067a4 <lwip_htonl>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	dbe6      	blt.n	800c2c4 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fc:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c302:	601a      	str	r2, [r3, #0]
 800c304:	e009      	b.n	800c31a <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c306:	6a3b      	ldr	r3, [r7, #32]
 800c308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c30a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c30c:	6a3b      	ldr	r3, [r7, #32]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	623b      	str	r3, [r7, #32]
 800c312:	e002      	b.n	800c31a <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c316:	f7fc fdff 	bl	8008f18 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c31e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c322:	2b00      	cmp	r3, #0
 800c324:	d015      	beq.n	800c352 <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7fa fa39 	bl	80067a4 <lwip_htonl>
 800c332:	4602      	mov	r2, r0
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c338:	1ad3      	subs	r3, r2, r3
 800c33a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c33c:	8912      	ldrh	r2, [r2, #8]
 800c33e:	4413      	add	r3, r2
  while (seg != NULL &&
 800c340:	69ba      	ldr	r2, [r7, #24]
 800c342:	429a      	cmp	r2, r3
 800c344:	f4bf aede 	bcs.w	800c104 <tcp_output+0x154>
  }
output_done:
 800c348:	e003      	b.n	800c352 <tcp_output+0x3a2>
    goto output_done;
 800c34a:	bf00      	nop
 800c34c:	e002      	b.n	800c354 <tcp_output+0x3a4>
      break;
 800c34e:	bf00      	nop
 800c350:	e000      	b.n	800c354 <tcp_output+0x3a4>
output_done:
 800c352:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d103      	bne.n	800c364 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	7e9b      	ldrb	r3, [r3, #26]
 800c368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c36c:	b2da      	uxtb	r2, r3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800c372:	2300      	movs	r3, #0
}
 800c374:	4618      	mov	r0, r3
 800c376:	3728      	adds	r7, #40	; 0x28
 800c378:	46bd      	mov	sp, r7
 800c37a:	bdb0      	pop	{r4, r5, r7, pc}

0800c37c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c37c:	b5b0      	push	{r4, r5, r7, lr}
 800c37e:	b08c      	sub	sp, #48	; 0x30
 800c380:	af04      	add	r7, sp, #16
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	89db      	ldrh	r3, [r3, #14]
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d001      	beq.n	800c396 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800c392:	2300      	movs	r3, #0
 800c394:	e092      	b.n	800c4bc <tcp_output_segment+0x140>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	68dc      	ldr	r4, [r3, #12]
 800c39e:	4610      	mov	r0, r2
 800c3a0:	f7fa fa00 	bl	80067a4 <lwip_htonl>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	68dc      	ldr	r4, [r3, #12]
 800c3b0:	4610      	mov	r0, r2
 800c3b2:	f7fa f9ea 	bl	800678a <lwip_htons>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c3c2:	441a      	add	r2, r3
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	3314      	adds	r3, #20
 800c3ce:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	7a9b      	ldrb	r3, [r3, #10]
 800c3d4:	f003 0301 	and.w	r3, r3, #1
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d014      	beq.n	800c406 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	3304      	adds	r3, #4
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c3e6:	f7fd f829 	bl	800943c <tcp_eff_send_mss_impl>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c3ee:	8b7b      	ldrh	r3, [r7, #26]
 800c3f0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7fa f9d5 	bl	80067a4 <lwip_htonl>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	3304      	adds	r3, #4
 800c404:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	da02      	bge.n	800c416 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	2200      	movs	r2, #0
 800c414:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d10c      	bne.n	800c438 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800c41e:	4b29      	ldr	r3, [pc, #164]	; (800c4c4 <tcp_output_segment+0x148>)
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fa f9b9 	bl	80067a4 <lwip_htonl>
 800c432:	4602      	mov	r2, r0
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	68da      	ldr	r2, [r3, #12]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	1ad3      	subs	r3, r2, r3
 800c444:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	8959      	ldrh	r1, [r3, #10]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	8b3a      	ldrh	r2, [r7, #24]
 800c452:	1a8a      	subs	r2, r1, r2
 800c454:	b292      	uxth	r2, r2
 800c456:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	8919      	ldrh	r1, [r3, #8]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	8b3a      	ldrh	r2, [r7, #24]
 800c464:	1a8a      	subs	r2, r1, r2
 800c466:	b292      	uxth	r2, r2
 800c468:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	68fa      	ldr	r2, [r7, #12]
 800c470:	68d2      	ldr	r2, [r2, #12]
 800c472:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	68db      	ldr	r3, [r3, #12]
 800c478:	2200      	movs	r2, #0
 800c47a:	741a      	strb	r2, [r3, #16]
 800c47c:	2200      	movs	r2, #0
 800c47e:	745a      	strb	r2, [r3, #17]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 800c480:	4b11      	ldr	r3, [pc, #68]	; (800c4c8 <tcp_output_segment+0x14c>)
 800c482:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800c486:	3301      	adds	r3, #1
 800c488:	b29a      	uxth	r2, r3
 800c48a:	4b0f      	ldr	r3, [pc, #60]	; (800c4c8 <tcp_output_segment+0x14c>)
 800c48c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	6858      	ldr	r0, [r3, #4]
 800c494:	68b9      	ldr	r1, [r7, #8]
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	1d1c      	adds	r4, r3, #4
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	7a9d      	ldrb	r5, [r3, #10]
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	7a5b      	ldrb	r3, [r3, #9]
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	9202      	str	r2, [sp, #8]
 800c4a6:	2206      	movs	r2, #6
 800c4a8:	9201      	str	r2, [sp, #4]
 800c4aa:	9300      	str	r3, [sp, #0]
 800c4ac:	462b      	mov	r3, r5
 800c4ae:	4622      	mov	r2, r4
 800c4b0:	f002 fb18 	bl	800eae4 <ip4_output_if>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800c4b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3720      	adds	r7, #32
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bdb0      	pop	{r4, r5, r7, pc}
 800c4c4:	20006f5c 	.word	0x20006f5c
 800c4c8:	20006e84 	.word	0x20006e84

0800c4cc <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b08c      	sub	sp, #48	; 0x30
 800c4d0:	af04      	add	r7, sp, #16
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
 800c4d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800c4da:	2200      	movs	r2, #0
 800c4dc:	2114      	movs	r1, #20
 800c4de:	2001      	movs	r0, #1
 800c4e0:	f7fa ffac 	bl	800743c <pbuf_alloc>
 800c4e4:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d063      	beq.n	800c5b4 <tcp_rst+0xe8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	895b      	ldrh	r3, [r3, #10]
 800c4f0:	2b13      	cmp	r3, #19
 800c4f2:	d806      	bhi.n	800c502 <tcp_rst+0x36>
 800c4f4:	4b31      	ldr	r3, [pc, #196]	; (800c5bc <tcp_rst+0xf0>)
 800c4f6:	f240 524c 	movw	r2, #1356	; 0x54c
 800c4fa:	4931      	ldr	r1, [pc, #196]	; (800c5c0 <tcp_rst+0xf4>)
 800c4fc:	4831      	ldr	r0, [pc, #196]	; (800c5c4 <tcp_rst+0xf8>)
 800c4fe:	f006 f85f 	bl	80125c0 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800c502:	69fb      	ldr	r3, [r7, #28]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800c508:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7fa f93d 	bl	800678a <lwip_htons>
 800c510:	4603      	mov	r3, r0
 800c512:	461a      	mov	r2, r3
 800c514:	69bb      	ldr	r3, [r7, #24]
 800c516:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800c518:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7fa f935 	bl	800678a <lwip_htons>
 800c520:	4603      	mov	r3, r0
 800c522:	461a      	mov	r2, r3
 800c524:	69bb      	ldr	r3, [r7, #24]
 800c526:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	f7fa f93b 	bl	80067a4 <lwip_htonl>
 800c52e:	4602      	mov	r2, r0
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800c534:	68b8      	ldr	r0, [r7, #8]
 800c536:	f7fa f935 	bl	80067a4 <lwip_htonl>
 800c53a:	4602      	mov	r2, r0
 800c53c:	69bb      	ldr	r3, [r7, #24]
 800c53e:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800c540:	f245 0014 	movw	r0, #20500	; 0x5014
 800c544:	f7fa f921 	bl	800678a <lwip_htons>
 800c548:	4603      	mov	r3, r0
 800c54a:	461a      	mov	r2, r3
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	2200      	movs	r2, #0
 800c554:	f042 0208 	orr.w	r2, r2, #8
 800c558:	739a      	strb	r2, [r3, #14]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800c560:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	2200      	movs	r2, #0
 800c566:	741a      	strb	r2, [r3, #16]
 800c568:	2200      	movs	r2, #0
 800c56a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	2200      	movs	r2, #0
 800c570:	749a      	strb	r2, [r3, #18]
 800c572:	2200      	movs	r2, #0
 800c574:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
 800c576:	4b14      	ldr	r3, [pc, #80]	; (800c5c8 <tcp_rst+0xfc>)
 800c578:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800c57c:	3301      	adds	r3, #1
 800c57e:	b29a      	uxth	r2, r3
 800c580:	4b11      	ldr	r3, [pc, #68]	; (800c5c8 <tcp_rst+0xfc>)
 800c582:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800c586:	6838      	ldr	r0, [r7, #0]
 800c588:	f002 f8aa 	bl	800e6e0 <ip4_route>
 800c58c:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d00b      	beq.n	800c5ac <tcp_rst+0xe0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	9302      	str	r3, [sp, #8]
 800c598:	2306      	movs	r3, #6
 800c59a:	9301      	str	r3, [sp, #4]
 800c59c:	2300      	movs	r3, #0
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	23ff      	movs	r3, #255	; 0xff
 800c5a2:	683a      	ldr	r2, [r7, #0]
 800c5a4:	6879      	ldr	r1, [r7, #4]
 800c5a6:	69f8      	ldr	r0, [r7, #28]
 800c5a8:	f002 fa9c 	bl	800eae4 <ip4_output_if>
  }
  pbuf_free(p);
 800c5ac:	69f8      	ldr	r0, [r7, #28]
 800c5ae:	f7fb fabd 	bl	8007b2c <pbuf_free>
 800c5b2:	e000      	b.n	800c5b6 <tcp_rst+0xea>
    return;
 800c5b4:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c5b6:	3720      	adds	r7, #32
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	0801733c 	.word	0x0801733c
 800c5c0:	08017370 	.word	0x08017370
 800c5c4:	080173a0 	.word	0x080173a0
 800c5c8:	20006e84 	.word	0x20006e84

0800c5cc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d029      	beq.n	800c630 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5e0:	60fb      	str	r3, [r7, #12]
 800c5e2:	e002      	b.n	800c5ea <tcp_rexmit_rto+0x1e>
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	60fb      	str	r3, [r7, #12]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1f8      	bne.n	800c5e4 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c60e:	2bff      	cmp	r3, #255	; 0xff
 800c610:	d007      	beq.n	800c622 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c618:	3301      	adds	r3, #1
 800c61a:	b2da      	uxtb	r2, r3
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2200      	movs	r2, #0
 800c626:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7ff fcc1 	bl	800bfb0 <tcp_output>
 800c62e:	e000      	b.n	800c632 <tcp_rexmit_rto+0x66>
    return;
 800c630:	bf00      	nop
}
 800c632:	3710      	adds	r7, #16
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c638:	b590      	push	{r4, r7, lr}
 800c63a:	b085      	sub	sp, #20
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c644:	2b00      	cmp	r3, #0
 800c646:	d043      	beq.n	800c6d0 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c64c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	3368      	adds	r3, #104	; 0x68
 800c65a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c65c:	e002      	b.n	800c664 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d011      	beq.n	800c690 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	68db      	ldr	r3, [r3, #12]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	4618      	mov	r0, r3
 800c676:	f7fa f895 	bl	80067a4 <lwip_htonl>
 800c67a:	4604      	mov	r4, r0
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	4618      	mov	r0, r3
 800c684:	f7fa f88e 	bl	80067a4 <lwip_htonl>
 800c688:	4603      	mov	r3, r0
 800c68a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	dbe6      	blt.n	800c65e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	68ba      	ldr	r2, [r7, #8]
 800c69c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d103      	bne.n	800c6ae <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6b4:	2bff      	cmp	r3, #255	; 0xff
 800c6b6:	d007      	beq.n	800c6c8 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6be:	3301      	adds	r3, #1
 800c6c0:	b2da      	uxtb	r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	635a      	str	r2, [r3, #52]	; 0x34
 800c6ce:	e000      	b.n	800c6d2 <tcp_rexmit+0x9a>
    return;
 800c6d0:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800c6d2:	3714      	adds	r7, #20
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd90      	pop	{r4, r7, pc}

0800c6d8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d041      	beq.n	800c76c <tcp_rexmit_fast+0x94>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	7e9b      	ldrb	r3, [r3, #26]
 800c6ec:	f003 0304 	and.w	r3, r3, #4
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d13b      	bne.n	800c76c <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f7ff ff9f 	bl	800c638 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c706:	4293      	cmp	r3, r2
 800c708:	bf28      	it	cs
 800c70a:	4613      	movcs	r3, r2
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	0fda      	lsrs	r2, r3, #31
 800c710:	4413      	add	r3, r2
 800c712:	105b      	asrs	r3, r3, #1
 800c714:	b29a      	uxth	r2, r3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c722:	461a      	mov	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c728:	005b      	lsls	r3, r3, #1
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d206      	bcs.n	800c73c <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c732:	005b      	lsls	r3, r3, #1
 800c734:	b29a      	uxth	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c746:	4619      	mov	r1, r3
 800c748:	0049      	lsls	r1, r1, #1
 800c74a:	440b      	add	r3, r1
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	4413      	add	r3, r2
 800c750:	b29a      	uxth	r2, r3
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	7e9b      	ldrb	r3, [r3, #26]
 800c75c:	f043 0304 	orr.w	r3, r3, #4
 800c760:	b2da      	uxtb	r2, r3
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800c76c:	bf00      	nop
 800c76e:	3708      	adds	r7, #8
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b08a      	sub	sp, #40	; 0x28
 800c778:	af04      	add	r7, sp, #16
 800c77a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c780:	3b01      	subs	r3, #1
 800c782:	4618      	mov	r0, r3
 800c784:	f7fa f80e 	bl	80067a4 <lwip_htonl>
 800c788:	4603      	mov	r3, r0
 800c78a:	2200      	movs	r2, #0
 800c78c:	2100      	movs	r1, #0
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f7ff f950 	bl	800ba34 <tcp_output_alloc_header>
 800c794:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d102      	bne.n	800c7a2 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c79c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7a0:	e029      	b.n	800c7f6 <tcp_keepalive+0x82>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f001 ff9a 	bl	800e6e0 <ip4_route>
 800c7ac:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d102      	bne.n	800c7ba <tcp_keepalive+0x46>
    err = ERR_RTE;
 800c7b4:	23fc      	movs	r3, #252	; 0xfc
 800c7b6:	75fb      	strb	r3, [r7, #23]
 800c7b8:	e018      	b.n	800c7ec <tcp_keepalive+0x78>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
 800c7ba:	4b11      	ldr	r3, [pc, #68]	; (800c800 <tcp_keepalive+0x8c>)
 800c7bc:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	b29a      	uxth	r2, r3
 800c7c4:	4b0e      	ldr	r3, [pc, #56]	; (800c800 <tcp_keepalive+0x8c>)
 800c7c6:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800c7ca:	6879      	ldr	r1, [r7, #4]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	1d1a      	adds	r2, r3, #4
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	7a98      	ldrb	r0, [r3, #10]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	9302      	str	r3, [sp, #8]
 800c7d8:	2306      	movs	r3, #6
 800c7da:	9301      	str	r3, [sp, #4]
 800c7dc:	2300      	movs	r3, #0
 800c7de:	9300      	str	r3, [sp, #0]
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	6938      	ldr	r0, [r7, #16]
 800c7e4:	f002 f97e 	bl	800eae4 <ip4_output_if>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800c7ec:	6938      	ldr	r0, [r7, #16]
 800c7ee:	f7fb f99d 	bl	8007b2c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c7f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3718      	adds	r7, #24
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	20006e84 	.word	0x20006e84

0800c804 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c804:	b590      	push	{r4, r7, lr}
 800c806:	b08f      	sub	sp, #60	; 0x3c
 800c808:	af04      	add	r7, sp, #16
 800c80a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c810:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800c812:	6a3b      	ldr	r3, [r7, #32]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d102      	bne.n	800c81e <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c81c:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800c81e:	6a3b      	ldr	r3, [r7, #32]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d101      	bne.n	800c828 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800c824:	2300      	movs	r3, #0
 800c826:	e08d      	b.n	800c944 <tcp_zero_window_probe+0x140>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c828:	6a3b      	ldr	r3, [r7, #32]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	899b      	ldrh	r3, [r3, #12]
 800c82e:	b29b      	uxth	r3, r3
 800c830:	4618      	mov	r0, r3
 800c832:	f7f9 ffaa 	bl	800678a <lwip_htons>
 800c836:	4603      	mov	r3, r0
 800c838:	f003 0301 	and.w	r3, r3, #1
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d005      	beq.n	800c84c <tcp_zero_window_probe+0x48>
 800c840:	6a3b      	ldr	r3, [r7, #32]
 800c842:	891b      	ldrh	r3, [r3, #8]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d101      	bne.n	800c84c <tcp_zero_window_probe+0x48>
 800c848:	2301      	movs	r3, #1
 800c84a:	e000      	b.n	800c84e <tcp_zero_window_probe+0x4a>
 800c84c:	2300      	movs	r3, #0
 800c84e:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c850:	7ffb      	ldrb	r3, [r7, #31]
 800c852:	2b00      	cmp	r3, #0
 800c854:	bf0c      	ite	eq
 800c856:	2301      	moveq	r3, #1
 800c858:	2300      	movne	r3, #0
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800c85e:	6a3b      	ldr	r3, [r7, #32]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	8bba      	ldrh	r2, [r7, #28]
 800c866:	2100      	movs	r1, #0
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f7ff f8e3 	bl	800ba34 <tcp_output_alloc_header>
 800c86e:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d102      	bne.n	800c87c <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c87a:	e063      	b.n	800c944 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c87c:	69bb      	ldr	r3, [r7, #24]
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c882:	7ffb      	ldrb	r3, [r7, #31]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d00e      	beq.n	800c8a6 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	899b      	ldrh	r3, [r3, #12]
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c892:	b29c      	uxth	r4, r3
 800c894:	2011      	movs	r0, #17
 800c896:	f7f9 ff78 	bl	800678a <lwip_htons>
 800c89a:	4603      	mov	r3, r0
 800c89c:	4323      	orrs	r3, r4
 800c89e:	b29a      	uxth	r2, r3
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	819a      	strh	r2, [r3, #12]
 800c8a4:	e010      	b.n	800c8c8 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	3314      	adds	r3, #20
 800c8ac:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c8ae:	6a3b      	ldr	r3, [r7, #32]
 800c8b0:	6858      	ldr	r0, [r3, #4]
 800c8b2:	6a3b      	ldr	r3, [r7, #32]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	891a      	ldrh	r2, [r3, #8]
 800c8b8:	6a3b      	ldr	r3, [r7, #32]
 800c8ba:	891b      	ldrh	r3, [r3, #8]
 800c8bc:	1ad3      	subs	r3, r2, r3
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	6939      	ldr	r1, [r7, #16]
 800c8c4:	f7fb fb30 	bl	8007f28 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c8c8:	6a3b      	ldr	r3, [r7, #32]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7f9 ff68 	bl	80067a4 <lwip_htonl>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	1ad3      	subs	r3, r2, r3
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	da02      	bge.n	800c8ec <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	3304      	adds	r3, #4
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f001 fef5 	bl	800e6e0 <ip4_route>
 800c8f6:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d103      	bne.n	800c906 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800c8fe:	23fc      	movs	r3, #252	; 0xfc
 800c900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c904:	e019      	b.n	800c93a <tcp_zero_window_probe+0x136>
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    TCP_STATS_INC(tcp.xmit);
 800c906:	4b11      	ldr	r3, [pc, #68]	; (800c94c <tcp_zero_window_probe+0x148>)
 800c908:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800c90c:	3301      	adds	r3, #1
 800c90e:	b29a      	uxth	r2, r3
 800c910:	4b0e      	ldr	r3, [pc, #56]	; (800c94c <tcp_zero_window_probe+0x148>)
 800c912:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c916:	6879      	ldr	r1, [r7, #4]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	1d1a      	adds	r2, r3, #4
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	7a98      	ldrb	r0, [r3, #10]
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	9302      	str	r3, [sp, #8]
 800c924:	2306      	movs	r3, #6
 800c926:	9301      	str	r3, [sp, #4]
 800c928:	2300      	movs	r3, #0
 800c92a:	9300      	str	r3, [sp, #0]
 800c92c:	4603      	mov	r3, r0
 800c92e:	69b8      	ldr	r0, [r7, #24]
 800c930:	f002 f8d8 	bl	800eae4 <ip4_output_if>
 800c934:	4603      	mov	r3, r0
 800c936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800c93a:	69b8      	ldr	r0, [r7, #24]
 800c93c:	f7fb f8f6 	bl	8007b2c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c940:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c944:	4618      	mov	r0, r3
 800c946:	372c      	adds	r7, #44	; 0x2c
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd90      	pop	{r4, r7, pc}
 800c94c:	20006e84 	.word	0x20006e84

0800c950 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c958:	f7fb fbfe 	bl	8008158 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c95c:	4b0a      	ldr	r3, [pc, #40]	; (800c988 <tcpip_tcp_timer+0x38>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d103      	bne.n	800c96c <tcpip_tcp_timer+0x1c>
 800c964:	4b09      	ldr	r3, [pc, #36]	; (800c98c <tcpip_tcp_timer+0x3c>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d005      	beq.n	800c978 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c96c:	2200      	movs	r2, #0
 800c96e:	4908      	ldr	r1, [pc, #32]	; (800c990 <tcpip_tcp_timer+0x40>)
 800c970:	20fa      	movs	r0, #250	; 0xfa
 800c972:	f000 f86f 	bl	800ca54 <sys_timeout>
 800c976:	e003      	b.n	800c980 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c978:	4b06      	ldr	r3, [pc, #24]	; (800c994 <tcpip_tcp_timer+0x44>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	601a      	str	r2, [r3, #0]
  }
}
 800c97e:	bf00      	nop
 800c980:	bf00      	nop
 800c982:	3708      	adds	r7, #8
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	20006f68 	.word	0x20006f68
 800c98c:	20006f6c 	.word	0x20006f6c
 800c990:	0800c951 	.word	0x0800c951
 800c994:	20006fb4 	.word	0x20006fb4

0800c998 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c99c:	4b0a      	ldr	r3, [pc, #40]	; (800c9c8 <tcp_timer_needed+0x30>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d10f      	bne.n	800c9c4 <tcp_timer_needed+0x2c>
 800c9a4:	4b09      	ldr	r3, [pc, #36]	; (800c9cc <tcp_timer_needed+0x34>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d103      	bne.n	800c9b4 <tcp_timer_needed+0x1c>
 800c9ac:	4b08      	ldr	r3, [pc, #32]	; (800c9d0 <tcp_timer_needed+0x38>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d007      	beq.n	800c9c4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c9b4:	4b04      	ldr	r3, [pc, #16]	; (800c9c8 <tcp_timer_needed+0x30>)
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	4905      	ldr	r1, [pc, #20]	; (800c9d4 <tcp_timer_needed+0x3c>)
 800c9be:	20fa      	movs	r0, #250	; 0xfa
 800c9c0:	f000 f848 	bl	800ca54 <sys_timeout>
  }
}
 800c9c4:	bf00      	nop
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	20006fb4 	.word	0x20006fb4
 800c9cc:	20006f68 	.word	0x20006f68
 800c9d0:	20006f6c 	.word	0x20006f6c
 800c9d4:	0800c951 	.word	0x0800c951

0800c9d8 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b084      	sub	sp, #16
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	4903      	ldr	r1, [pc, #12]	; (800ca00 <cyclic_timer+0x28>)
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f000 f82e 	bl	800ca54 <sys_timeout>
}
 800c9f8:	bf00      	nop
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	0800c9d9 	.word	0x0800c9d9

0800ca04 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	607b      	str	r3, [r7, #4]
 800ca0e:	e00e      	b.n	800ca2e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800ca10:	4a0d      	ldr	r2, [pc, #52]	; (800ca48 <sys_timeouts_init+0x44>)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	00db      	lsls	r3, r3, #3
 800ca1c:	4a0a      	ldr	r2, [pc, #40]	; (800ca48 <sys_timeouts_init+0x44>)
 800ca1e:	4413      	add	r3, r2
 800ca20:	461a      	mov	r2, r3
 800ca22:	490a      	ldr	r1, [pc, #40]	; (800ca4c <sys_timeouts_init+0x48>)
 800ca24:	f000 f816 	bl	800ca54 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	607b      	str	r3, [r7, #4]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2b02      	cmp	r3, #2
 800ca32:	d9ed      	bls.n	800ca10 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800ca34:	f7f9 fe1c 	bl	8006670 <sys_now>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	4a05      	ldr	r2, [pc, #20]	; (800ca50 <sys_timeouts_init+0x4c>)
 800ca3c:	6013      	str	r3, [r2, #0]
}
 800ca3e:	bf00      	nop
 800ca40:	3708      	adds	r7, #8
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	08018028 	.word	0x08018028
 800ca4c:	0800c9d9 	.word	0x0800c9d9
 800ca50:	20006fb0 	.word	0x20006fb0

0800ca54 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b088      	sub	sp, #32
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ca60:	2006      	movs	r0, #6
 800ca62:	f7fa fad3 	bl	800700c <memp_malloc>
 800ca66:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d10a      	bne.n	800ca84 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f040 8084 	bne.w	800cb7e <sys_timeout+0x12a>
 800ca76:	4b44      	ldr	r3, [pc, #272]	; (800cb88 <sys_timeout+0x134>)
 800ca78:	22d4      	movs	r2, #212	; 0xd4
 800ca7a:	4944      	ldr	r1, [pc, #272]	; (800cb8c <sys_timeout+0x138>)
 800ca7c:	4844      	ldr	r0, [pc, #272]	; (800cb90 <sys_timeout+0x13c>)
 800ca7e:	f005 fd9f 	bl	80125c0 <iprintf>
    return;
 800ca82:	e07c      	b.n	800cb7e <sys_timeout+0x12a>
  }

  now = sys_now();
 800ca84:	f7f9 fdf4 	bl	8006670 <sys_now>
 800ca88:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800ca8a:	4b42      	ldr	r3, [pc, #264]	; (800cb94 <sys_timeout+0x140>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d105      	bne.n	800ca9e <sys_timeout+0x4a>
    diff = 0;
 800ca92:	2300      	movs	r3, #0
 800ca94:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800ca96:	4a40      	ldr	r2, [pc, #256]	; (800cb98 <sys_timeout+0x144>)
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	6013      	str	r3, [r2, #0]
 800ca9c:	e004      	b.n	800caa8 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800ca9e:	4b3e      	ldr	r3, [pc, #248]	; (800cb98 <sys_timeout+0x144>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	693a      	ldr	r2, [r7, #16]
 800caa4:	1ad3      	subs	r3, r2, r3
 800caa6:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	2200      	movs	r2, #0
 800caac:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	687a      	ldr	r2, [r7, #4]
 800cab8:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800caba:	68fa      	ldr	r2, [r7, #12]
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	441a      	add	r2, r3
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800cac4:	4b33      	ldr	r3, [pc, #204]	; (800cb94 <sys_timeout+0x140>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d103      	bne.n	800cad4 <sys_timeout+0x80>
    next_timeout = timeout;
 800cacc:	4a31      	ldr	r2, [pc, #196]	; (800cb94 <sys_timeout+0x140>)
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	6013      	str	r3, [r2, #0]
    return;
 800cad2:	e055      	b.n	800cb80 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800cad4:	4b2f      	ldr	r3, [pc, #188]	; (800cb94 <sys_timeout+0x140>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	68fa      	ldr	r2, [r7, #12]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d20f      	bcs.n	800cb00 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800cae0:	4b2c      	ldr	r3, [pc, #176]	; (800cb94 <sys_timeout+0x140>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	6859      	ldr	r1, [r3, #4]
 800cae6:	4b2b      	ldr	r3, [pc, #172]	; (800cb94 <sys_timeout+0x140>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68fa      	ldr	r2, [r7, #12]
 800caec:	1a8a      	subs	r2, r1, r2
 800caee:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800caf0:	4b28      	ldr	r3, [pc, #160]	; (800cb94 <sys_timeout+0x140>)
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800caf8:	4a26      	ldr	r2, [pc, #152]	; (800cb94 <sys_timeout+0x140>)
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	6013      	str	r3, [r2, #0]
 800cafe:	e03f      	b.n	800cb80 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800cb00:	4b24      	ldr	r3, [pc, #144]	; (800cb94 <sys_timeout+0x140>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	61fb      	str	r3, [r7, #28]
 800cb06:	e036      	b.n	800cb76 <sys_timeout+0x122>
      timeout->time -= t->time;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	685a      	ldr	r2, [r3, #4]
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	1ad2      	subs	r2, r2, r3
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800cb16:	69fb      	ldr	r3, [r7, #28]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d006      	beq.n	800cb2c <sys_timeout+0xd8>
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	685a      	ldr	r2, [r3, #4]
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d921      	bls.n	800cb70 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d009      	beq.n	800cb48 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	6859      	ldr	r1, [r3, #4]
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	685a      	ldr	r2, [r3, #4]
 800cb3e:	69fb      	ldr	r3, [r7, #28]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	1a8a      	subs	r2, r1, r2
 800cb44:	605a      	str	r2, [r3, #4]
 800cb46:	e00b      	b.n	800cb60 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d206      	bcs.n	800cb60 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800cb52:	4b10      	ldr	r3, [pc, #64]	; (800cb94 <sys_timeout+0x140>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	685a      	ldr	r2, [r3, #4]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	441a      	add	r2, r3
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	697a      	ldr	r2, [r7, #20]
 800cb6c:	601a      	str	r2, [r3, #0]
        break;
 800cb6e:	e007      	b.n	800cb80 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	61fb      	str	r3, [r7, #28]
 800cb76:	69fb      	ldr	r3, [r7, #28]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d1c5      	bne.n	800cb08 <sys_timeout+0xb4>
 800cb7c:	e000      	b.n	800cb80 <sys_timeout+0x12c>
    return;
 800cb7e:	bf00      	nop
      }
    }
  }
}
 800cb80:	3720      	adds	r7, #32
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	08017780 	.word	0x08017780
 800cb8c:	080177b4 	.word	0x080177b4
 800cb90:	080177f4 	.word	0x080177f4
 800cb94:	20006fac 	.word	0x20006fac
 800cb98:	20006fb0 	.word	0x20006fb0

0800cb9c <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b086      	sub	sp, #24
 800cba0:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800cba2:	4b24      	ldr	r3, [pc, #144]	; (800cc34 <sys_check_timeouts+0x98>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d040      	beq.n	800cc2c <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800cbaa:	f7f9 fd61 	bl	8006670 <sys_now>
 800cbae:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800cbb0:	4b21      	ldr	r3, [pc, #132]	; (800cc38 <sys_check_timeouts+0x9c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	1ad3      	subs	r3, r2, r3
 800cbb8:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800cbba:	4b20      	ldr	r3, [pc, #128]	; (800cc3c <sys_check_timeouts+0xa0>)
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d001      	beq.n	800cbc8 <sys_check_timeouts+0x2c>
 800cbc4:	f7fa fc0a 	bl	80073dc <pbuf_free_ooseq>
      had_one = 0;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800cbcc:	4b19      	ldr	r3, [pc, #100]	; (800cc34 <sys_check_timeouts+0x98>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d026      	beq.n	800cc26 <sys_check_timeouts+0x8a>
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	697a      	ldr	r2, [r7, #20]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d321      	bcc.n	800cc26 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	685a      	ldr	r2, [r3, #4]
 800cbea:	4b13      	ldr	r3, [pc, #76]	; (800cc38 <sys_check_timeouts+0x9c>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4413      	add	r3, r2
 800cbf0:	4a11      	ldr	r2, [pc, #68]	; (800cc38 <sys_check_timeouts+0x9c>)
 800cbf2:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	697a      	ldr	r2, [r7, #20]
 800cbfa:	1ad3      	subs	r3, r2, r3
 800cbfc:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a0c      	ldr	r2, [pc, #48]	; (800cc34 <sys_check_timeouts+0x98>)
 800cc04:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	689b      	ldr	r3, [r3, #8]
 800cc0a:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cc12:	68b9      	ldr	r1, [r7, #8]
 800cc14:	2006      	movs	r0, #6
 800cc16:	f7fa fa4b 	bl	80070b0 <memp_free>
        if (handler != NULL) {
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d002      	beq.n	800cc26 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6838      	ldr	r0, [r7, #0]
 800cc24:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800cc26:	7cfb      	ldrb	r3, [r7, #19]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d1c6      	bne.n	800cbba <sys_check_timeouts+0x1e>
  }
}
 800cc2c:	bf00      	nop
 800cc2e:	3718      	adds	r7, #24
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	20006fac 	.word	0x20006fac
 800cc38:	20006fb0 	.word	0x20006fb0
 800cc3c:	20006e81 	.word	0x20006e81

0800cc40 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800cc40:	b480      	push	{r7}
 800cc42:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800cc44:	bf00      	nop
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bc80      	pop	{r7}
 800cc4a:	4770      	bx	lr

0800cc4c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800cc52:	2300      	movs	r3, #0
 800cc54:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800cc56:	4b17      	ldr	r3, [pc, #92]	; (800ccb4 <udp_new_port+0x68>)
 800cc58:	881b      	ldrh	r3, [r3, #0]
 800cc5a:	1c5a      	adds	r2, r3, #1
 800cc5c:	b291      	uxth	r1, r2
 800cc5e:	4a15      	ldr	r2, [pc, #84]	; (800ccb4 <udp_new_port+0x68>)
 800cc60:	8011      	strh	r1, [r2, #0]
 800cc62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d103      	bne.n	800cc72 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800cc6a:	4b12      	ldr	r3, [pc, #72]	; (800ccb4 <udp_new_port+0x68>)
 800cc6c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800cc70:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc72:	4b11      	ldr	r3, [pc, #68]	; (800ccb8 <udp_new_port+0x6c>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	603b      	str	r3, [r7, #0]
 800cc78:	e011      	b.n	800cc9e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	8a5a      	ldrh	r2, [r3, #18]
 800cc7e:	4b0d      	ldr	r3, [pc, #52]	; (800ccb4 <udp_new_port+0x68>)
 800cc80:	881b      	ldrh	r3, [r3, #0]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d108      	bne.n	800cc98 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800cc86:	88fb      	ldrh	r3, [r7, #6]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	80fb      	strh	r3, [r7, #6]
 800cc8c:	88fb      	ldrh	r3, [r7, #6]
 800cc8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc92:	d3e0      	bcc.n	800cc56 <udp_new_port+0xa>
        return 0;
 800cc94:	2300      	movs	r3, #0
 800cc96:	e007      	b.n	800cca8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	603b      	str	r3, [r7, #0]
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d1ea      	bne.n	800cc7a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800cca4:	4b03      	ldr	r3, [pc, #12]	; (800ccb4 <udp_new_port+0x68>)
 800cca6:	881b      	ldrh	r3, [r3, #0]
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	370c      	adds	r7, #12
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bc80      	pop	{r7}
 800ccb0:	4770      	bx	lr
 800ccb2:	bf00      	nop
 800ccb4:	20000034 	.word	0x20000034
 800ccb8:	20006fb8 	.word	0x20006fb8

0800ccbc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ccca:	79fb      	ldrb	r3, [r7, #7]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d018      	beq.n	800cd02 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d013      	beq.n	800ccfe <udp_input_local_match+0x42>
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00f      	beq.n	800ccfe <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ccde:	4b13      	ldr	r3, [pc, #76]	; (800cd2c <udp_input_local_match+0x70>)
 800cce0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cce6:	d00a      	beq.n	800ccfe <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	4b0f      	ldr	r3, [pc, #60]	; (800cd2c <udp_input_local_match+0x70>)
 800ccee:	695b      	ldr	r3, [r3, #20]
 800ccf0:	405a      	eors	r2, r3
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	3308      	adds	r3, #8
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d110      	bne.n	800cd20 <udp_input_local_match+0x64>
          return 1;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e00f      	b.n	800cd22 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d009      	beq.n	800cd1c <udp_input_local_match+0x60>
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d005      	beq.n	800cd1c <udp_input_local_match+0x60>
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	4b05      	ldr	r3, [pc, #20]	; (800cd2c <udp_input_local_match+0x70>)
 800cd16:	695b      	ldr	r3, [r3, #20]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d101      	bne.n	800cd20 <udp_input_local_match+0x64>
      return 1;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	e000      	b.n	800cd22 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800cd20:	2300      	movs	r3, #0
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3714      	adds	r7, #20
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bc80      	pop	{r7}
 800cd2a:	4770      	bx	lr
 800cd2c:	200038bc 	.word	0x200038bc

0800cd30 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800cd30:	b590      	push	{r4, r7, lr}
 800cd32:	b08d      	sub	sp, #52	; 0x34
 800cd34:	af02      	add	r7, sp, #8
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
 800cd3e:	4b85      	ldr	r3, [pc, #532]	; (800cf54 <udp_input+0x224>)
 800cd40:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800cd44:	3301      	adds	r3, #1
 800cd46:	b29a      	uxth	r2, r3
 800cd48:	4b82      	ldr	r3, [pc, #520]	; (800cf54 <udp_input+0x224>)
 800cd4a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	895b      	ldrh	r3, [r3, #10]
 800cd52:	2b07      	cmp	r3, #7
 800cd54:	d813      	bhi.n	800cd7e <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 800cd56:	4b7f      	ldr	r3, [pc, #508]	; (800cf54 <udp_input+0x224>)
 800cd58:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	b29a      	uxth	r2, r3
 800cd60:	4b7c      	ldr	r3, [pc, #496]	; (800cf54 <udp_input+0x224>)
 800cd62:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 800cd66:	4b7b      	ldr	r3, [pc, #492]	; (800cf54 <udp_input+0x224>)
 800cd68:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	b29a      	uxth	r2, r3
 800cd70:	4b78      	ldr	r3, [pc, #480]	; (800cf54 <udp_input+0x224>)
 800cd72:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f7fa fed8 	bl	8007b2c <pbuf_free>
    goto end;
 800cd7c:	e0e5      	b.n	800cf4a <udp_input+0x21a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cd84:	4b74      	ldr	r3, [pc, #464]	; (800cf58 <udp_input+0x228>)
 800cd86:	695b      	ldr	r3, [r3, #20]
 800cd88:	4a73      	ldr	r2, [pc, #460]	; (800cf58 <udp_input+0x228>)
 800cd8a:	6812      	ldr	r2, [r2, #0]
 800cd8c:	4611      	mov	r1, r2
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f001 ff8c 	bl	800ecac <ip4_addr_isbroadcast_u32>
 800cd94:	4603      	mov	r3, r0
 800cd96:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	881b      	ldrh	r3, [r3, #0]
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7f9 fcf3 	bl	800678a <lwip_htons>
 800cda4:	4603      	mov	r3, r0
 800cda6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	885b      	ldrh	r3, [r3, #2]
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7f9 fceb 	bl	800678a <lwip_htons>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cdc4:	4b65      	ldr	r3, [pc, #404]	; (800cf5c <udp_input+0x22c>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	627b      	str	r3, [r7, #36]	; 0x24
 800cdca:	e044      	b.n	800ce56 <udp_input+0x126>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdce:	8a5b      	ldrh	r3, [r3, #18]
 800cdd0:	89fa      	ldrh	r2, [r7, #14]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d13a      	bne.n	800ce4c <udp_input+0x11c>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cdd6:	7cfb      	ldrb	r3, [r7, #19]
 800cdd8:	461a      	mov	r2, r3
 800cdda:	6839      	ldr	r1, [r7, #0]
 800cddc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdde:	f7ff ff6d 	bl	800ccbc <udp_input_local_match>
 800cde2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d031      	beq.n	800ce4c <udp_input+0x11c>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800cde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdea:	7c1b      	ldrb	r3, [r3, #16]
 800cdec:	f003 0304 	and.w	r3, r3, #4
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d104      	bne.n	800cdfe <udp_input+0xce>
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d101      	bne.n	800cdfe <udp_input+0xce>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfc:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce00:	8a9b      	ldrh	r3, [r3, #20]
 800ce02:	8a3a      	ldrh	r2, [r7, #16]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d121      	bne.n	800ce4c <udp_input+0x11c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ce08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0a:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d005      	beq.n	800ce1c <udp_input+0xec>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ce10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce12:	685a      	ldr	r2, [r3, #4]
 800ce14:	4b50      	ldr	r3, [pc, #320]	; (800cf58 <udp_input+0x228>)
 800ce16:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d117      	bne.n	800ce4c <udp_input+0x11c>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ce1c:	6a3b      	ldr	r3, [r7, #32]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00b      	beq.n	800ce3a <udp_input+0x10a>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ce22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce24:	68da      	ldr	r2, [r3, #12]
 800ce26:	6a3b      	ldr	r3, [r7, #32]
 800ce28:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ce2a:	4b4c      	ldr	r3, [pc, #304]	; (800cf5c <udp_input+0x22c>)
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce30:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ce32:	4a4a      	ldr	r2, [pc, #296]	; (800cf5c <udp_input+0x22c>)
 800ce34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce36:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ce38:	e010      	b.n	800ce5c <udp_input+0x12c>
          UDP_STATS_INC(udp.cachehit);
 800ce3a:	4b46      	ldr	r3, [pc, #280]	; (800cf54 <udp_input+0x224>)
 800ce3c:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800ce40:	3301      	adds	r3, #1
 800ce42:	b29a      	uxth	r2, r3
 800ce44:	4b43      	ldr	r3, [pc, #268]	; (800cf54 <udp_input+0x224>)
 800ce46:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        break;
 800ce4a:	e007      	b.n	800ce5c <udp_input+0x12c>
      }
    }

    prev = pcb;
 800ce4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	627b      	str	r3, [r7, #36]	; 0x24
 800ce56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d1b7      	bne.n	800cdcc <udp_input+0x9c>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ce5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d101      	bne.n	800ce66 <udp_input+0x136>
    pcb = uncon_pcb;
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ce66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d002      	beq.n	800ce72 <udp_input+0x142>
    for_us = 1;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	76fb      	strb	r3, [r7, #27]
 800ce70:	e00a      	b.n	800ce88 <udp_input+0x158>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	3304      	adds	r3, #4
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	4b37      	ldr	r3, [pc, #220]	; (800cf58 <udp_input+0x228>)
 800ce7a:	695b      	ldr	r3, [r3, #20]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	bf0c      	ite	eq
 800ce80:	2301      	moveq	r3, #1
 800ce82:	2300      	movne	r3, #0
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ce88:	7efb      	ldrb	r3, [r7, #27]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d05a      	beq.n	800cf44 <udp_input+0x214>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800ce8e:	f06f 0107 	mvn.w	r1, #7
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f7fa fe26 	bl	8007ae4 <pbuf_header>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d012      	beq.n	800cec4 <udp_input+0x194>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800ce9e:	4b30      	ldr	r3, [pc, #192]	; (800cf60 <udp_input+0x230>)
 800cea0:	f240 1255 	movw	r2, #341	; 0x155
 800cea4:	492f      	ldr	r1, [pc, #188]	; (800cf64 <udp_input+0x234>)
 800cea6:	4830      	ldr	r0, [pc, #192]	; (800cf68 <udp_input+0x238>)
 800cea8:	f005 fb8a 	bl	80125c0 <iprintf>
      UDP_STATS_INC(udp.drop);
 800ceac:	4b29      	ldr	r3, [pc, #164]	; (800cf54 <udp_input+0x224>)
 800ceae:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	b29a      	uxth	r2, r3
 800ceb6:	4b27      	ldr	r3, [pc, #156]	; (800cf54 <udp_input+0x224>)
 800ceb8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f7fa fe35 	bl	8007b2c <pbuf_free>
      goto end;
 800cec2:	e042      	b.n	800cf4a <udp_input+0x21a>
    }

    if (pcb != NULL) {
 800cec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d012      	beq.n	800cef0 <udp_input+0x1c0>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ceca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cecc:	699b      	ldr	r3, [r3, #24]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d00a      	beq.n	800cee8 <udp_input+0x1b8>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ced2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced4:	699c      	ldr	r4, [r3, #24]
 800ced6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced8:	69d8      	ldr	r0, [r3, #28]
 800ceda:	8a3b      	ldrh	r3, [r7, #16]
 800cedc:	9300      	str	r3, [sp, #0]
 800cede:	4b23      	ldr	r3, [pc, #140]	; (800cf6c <udp_input+0x23c>)
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cee4:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cee6:	e031      	b.n	800cf4c <udp_input+0x21c>
        pbuf_free(p);
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7fa fe1f 	bl	8007b2c <pbuf_free>
        goto end;
 800ceee:	e02c      	b.n	800cf4a <udp_input+0x21a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cef0:	7cfb      	ldrb	r3, [r7, #19]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d112      	bne.n	800cf1c <udp_input+0x1ec>
 800cef6:	4b18      	ldr	r3, [pc, #96]	; (800cf58 <udp_input+0x228>)
 800cef8:	695b      	ldr	r3, [r3, #20]
 800cefa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cefe:	2be0      	cmp	r3, #224	; 0xe0
 800cf00:	d00c      	beq.n	800cf1c <udp_input+0x1ec>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cf02:	4b15      	ldr	r3, [pc, #84]	; (800cf58 <udp_input+0x228>)
 800cf04:	899b      	ldrh	r3, [r3, #12]
 800cf06:	3308      	adds	r3, #8
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	b21b      	sxth	r3, r3
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f7fa fdfa 	bl	8007b08 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cf14:	2103      	movs	r1, #3
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f001 fb50 	bl	800e5bc <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 800cf1c:	4b0d      	ldr	r3, [pc, #52]	; (800cf54 <udp_input+0x224>)
 800cf1e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800cf22:	3301      	adds	r3, #1
 800cf24:	b29a      	uxth	r2, r3
 800cf26:	4b0b      	ldr	r3, [pc, #44]	; (800cf54 <udp_input+0x224>)
 800cf28:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
 800cf2c:	4b09      	ldr	r3, [pc, #36]	; (800cf54 <udp_input+0x224>)
 800cf2e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800cf32:	3301      	adds	r3, #1
 800cf34:	b29a      	uxth	r2, r3
 800cf36:	4b07      	ldr	r3, [pc, #28]	; (800cf54 <udp_input+0x224>)
 800cf38:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      pbuf_free(p);
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f7fa fdf5 	bl	8007b2c <pbuf_free>
  return;
 800cf42:	e003      	b.n	800cf4c <udp_input+0x21c>
    pbuf_free(p);
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f7fa fdf1 	bl	8007b2c <pbuf_free>
  return;
 800cf4a:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cf4c:	372c      	adds	r7, #44	; 0x2c
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd90      	pop	{r4, r7, pc}
 800cf52:	bf00      	nop
 800cf54:	20006e84 	.word	0x20006e84
 800cf58:	200038bc 	.word	0x200038bc
 800cf5c:	20006fb8 	.word	0x20006fb8
 800cf60:	0801781c 	.word	0x0801781c
 800cf64:	0801784c 	.word	0x0801784c
 800cf68:	08017860 	.word	0x08017860
 800cf6c:	200038cc 	.word	0x200038cc

0800cf70 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d102      	bne.n	800cf86 <udp_send+0x16>
    return ERR_VAL;
 800cf80:	f06f 0305 	mvn.w	r3, #5
 800cf84:	e008      	b.n	800cf98 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	1d1a      	adds	r2, r3, #4
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	8a9b      	ldrh	r3, [r3, #20]
 800cf8e:	6839      	ldr	r1, [r7, #0]
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 f805 	bl	800cfa0 <udp_sendto>
 800cf96:	4603      	mov	r3, r0
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b088      	sub	sp, #32
 800cfa4:	af02      	add	r7, sp, #8
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
 800cfac:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d002      	beq.n	800cfbe <udp_sendto+0x1e>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d102      	bne.n	800cfc4 <udp_sendto+0x24>
    return ERR_VAL;
 800cfbe:	f06f 0305 	mvn.w	r3, #5
 800cfc2:	e01b      	b.n	800cffc <udp_sendto+0x5c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800cfc4:	6978      	ldr	r0, [r7, #20]
 800cfc6:	f001 fb8b 	bl	800e6e0 <ip4_route>
 800cfca:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d10a      	bne.n	800cfe8 <udp_sendto+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 800cfd2:	4b0c      	ldr	r3, [pc, #48]	; (800d004 <udp_sendto+0x64>)
 800cfd4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800cfd8:	3301      	adds	r3, #1
 800cfda:	b29a      	uxth	r2, r3
 800cfdc:	4b09      	ldr	r3, [pc, #36]	; (800d004 <udp_sendto+0x64>)
 800cfde:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    return ERR_RTE;
 800cfe2:	f06f 0303 	mvn.w	r3, #3
 800cfe6:	e009      	b.n	800cffc <udp_sendto+0x5c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800cfe8:	887a      	ldrh	r2, [r7, #2]
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	9300      	str	r3, [sp, #0]
 800cfee:	4613      	mov	r3, r2
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	68b9      	ldr	r1, [r7, #8]
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f000 f807 	bl	800d008 <udp_sendto_if>
 800cffa:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3718      	adds	r7, #24
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}
 800d004:	20006e84 	.word	0x20006e84

0800d008 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b088      	sub	sp, #32
 800d00c:	af02      	add	r7, sp, #8
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	607a      	str	r2, [r7, #4]
 800d014:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d002      	beq.n	800d022 <udp_sendto_if+0x1a>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d102      	bne.n	800d028 <udp_sendto_if+0x20>
    return ERR_VAL;
 800d022:	f06f 0305 	mvn.w	r3, #5
 800d026:	e028      	b.n	800d07a <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d009      	beq.n	800d042 <udp_sendto_if+0x3a>
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d005      	beq.n	800d042 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d03e:	2be0      	cmp	r3, #224	; 0xe0
 800d040:	d103      	bne.n	800d04a <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800d042:	6a3b      	ldr	r3, [r7, #32]
 800d044:	3304      	adds	r3, #4
 800d046:	617b      	str	r3, [r7, #20]
 800d048:	e00b      	b.n	800d062 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	6a3b      	ldr	r3, [r7, #32]
 800d050:	3304      	adds	r3, #4
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	429a      	cmp	r2, r3
 800d056:	d002      	beq.n	800d05e <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800d058:	f06f 0303 	mvn.w	r3, #3
 800d05c:	e00d      	b.n	800d07a <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d062:	887a      	ldrh	r2, [r7, #2]
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	9301      	str	r3, [sp, #4]
 800d068:	6a3b      	ldr	r3, [r7, #32]
 800d06a:	9300      	str	r3, [sp, #0]
 800d06c:	4613      	mov	r3, r2
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	68b9      	ldr	r1, [r7, #8]
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f000 f806 	bl	800d084 <udp_sendto_if_src>
 800d078:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3718      	adds	r7, #24
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
	...

0800d084 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b08c      	sub	sp, #48	; 0x30
 800d088:	af04      	add	r7, sp, #16
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	607a      	str	r2, [r7, #4]
 800d090:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d002      	beq.n	800d09e <udp_sendto_if_src+0x1a>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d102      	bne.n	800d0a4 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800d09e:	f06f 0305 	mvn.w	r3, #5
 800d0a2:	e086      	b.n	800d1b2 <udp_sendto_if_src+0x12e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	8a5b      	ldrh	r3, [r3, #18]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d10f      	bne.n	800d0cc <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d0ac:	68f9      	ldr	r1, [r7, #12]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	8a5b      	ldrh	r3, [r3, #18]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f000 f889 	bl	800d1cc <udp_bind>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800d0be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d002      	beq.n	800d0cc <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800d0c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d0ca:	e072      	b.n	800d1b2 <udp_sendto_if_src+0x12e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800d0cc:	2108      	movs	r1, #8
 800d0ce:	68b8      	ldr	r0, [r7, #8]
 800d0d0:	f7fa fd08 	bl	8007ae4 <pbuf_header>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d014      	beq.n	800d104 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d0da:	2200      	movs	r2, #0
 800d0dc:	2108      	movs	r1, #8
 800d0de:	2001      	movs	r0, #1
 800d0e0:	f7fa f9ac 	bl	800743c <pbuf_alloc>
 800d0e4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800d0e6:	69fb      	ldr	r3, [r7, #28]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d102      	bne.n	800d0f2 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800d0ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0f0:	e05f      	b.n	800d1b2 <udp_sendto_if_src+0x12e>
    }
    if (p->tot_len != 0) {
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	891b      	ldrh	r3, [r3, #8]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d006      	beq.n	800d108 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800d0fa:	68b9      	ldr	r1, [r7, #8]
 800d0fc:	69f8      	ldr	r0, [r7, #28]
 800d0fe:	f7fa fe37 	bl	8007d70 <pbuf_chain>
 800d102:	e001      	b.n	800d108 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	895b      	ldrh	r3, [r3, #10]
 800d10c:	2b07      	cmp	r3, #7
 800d10e:	d806      	bhi.n	800d11e <udp_sendto_if_src+0x9a>
 800d110:	4b2a      	ldr	r3, [pc, #168]	; (800d1bc <udp_sendto_if_src+0x138>)
 800d112:	f240 22db 	movw	r2, #731	; 0x2db
 800d116:	492a      	ldr	r1, [pc, #168]	; (800d1c0 <udp_sendto_if_src+0x13c>)
 800d118:	482a      	ldr	r0, [pc, #168]	; (800d1c4 <udp_sendto_if_src+0x140>)
 800d11a:	f005 fa51 	bl	80125c0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800d11e:	69fb      	ldr	r3, [r7, #28]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	8a5b      	ldrh	r3, [r3, #18]
 800d128:	4618      	mov	r0, r3
 800d12a:	f7f9 fb2e 	bl	800678a <lwip_htons>
 800d12e:	4603      	mov	r3, r0
 800d130:	461a      	mov	r2, r3
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d136:	887b      	ldrh	r3, [r7, #2]
 800d138:	4618      	mov	r0, r3
 800d13a:	f7f9 fb26 	bl	800678a <lwip_htons>
 800d13e:	4603      	mov	r3, r0
 800d140:	461a      	mov	r2, r3
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	2200      	movs	r2, #0
 800d14a:	719a      	strb	r2, [r3, #6]
 800d14c:	2200      	movs	r2, #0
 800d14e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800d150:	69fb      	ldr	r3, [r7, #28]
 800d152:	891b      	ldrh	r3, [r3, #8]
 800d154:	4618      	mov	r0, r3
 800d156:	f7f9 fb18 	bl	800678a <lwip_htons>
 800d15a:	4603      	mov	r3, r0
 800d15c:	461a      	mov	r2, r3
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800d162:	2311      	movs	r3, #17
 800d164:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	7a9b      	ldrb	r3, [r3, #10]
 800d16a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	7a5b      	ldrb	r3, [r3, #9]
 800d170:	7cb9      	ldrb	r1, [r7, #18]
 800d172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d174:	9202      	str	r2, [sp, #8]
 800d176:	7cfa      	ldrb	r2, [r7, #19]
 800d178:	9201      	str	r2, [sp, #4]
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	460b      	mov	r3, r1
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d182:	69f8      	ldr	r0, [r7, #28]
 800d184:	f001 fcd8 	bl	800eb38 <ip4_output_if_src>
 800d188:	4603      	mov	r3, r0
 800d18a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800d18c:	69fa      	ldr	r2, [r7, #28]
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	429a      	cmp	r2, r3
 800d192:	d004      	beq.n	800d19e <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800d194:	69f8      	ldr	r0, [r7, #28]
 800d196:	f7fa fcc9 	bl	8007b2c <pbuf_free>
    q = NULL;
 800d19a:	2300      	movs	r3, #0
 800d19c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 800d19e:	4b0a      	ldr	r3, [pc, #40]	; (800d1c8 <udp_sendto_if_src+0x144>)
 800d1a0:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	b29a      	uxth	r2, r3
 800d1a8:	4b07      	ldr	r3, [pc, #28]	; (800d1c8 <udp_sendto_if_src+0x144>)
 800d1aa:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
  return err;
 800d1ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3720      	adds	r7, #32
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	0801781c 	.word	0x0801781c
 800d1c0:	08017888 	.word	0x08017888
 800d1c4:	08017860 	.word	0x08017860
 800d1c8:	20006e84 	.word	0x20006e84

0800d1cc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b086      	sub	sp, #24
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	60f8      	str	r0, [r7, #12]
 800d1d4:	60b9      	str	r1, [r7, #8]
 800d1d6:	4613      	mov	r3, r2
 800d1d8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d101      	bne.n	800d1e4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800d1e0:	4b30      	ldr	r3, [pc, #192]	; (800d2a4 <udp_bind+0xd8>)
 800d1e2:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d002      	beq.n	800d1f0 <udp_bind+0x24>
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d102      	bne.n	800d1f6 <udp_bind+0x2a>
    return ERR_VAL;
 800d1f0:	f06f 0305 	mvn.w	r3, #5
 800d1f4:	e052      	b.n	800d29c <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d1fa:	4b2b      	ldr	r3, [pc, #172]	; (800d2a8 <udp_bind+0xdc>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	617b      	str	r3, [r7, #20]
 800d200:	e009      	b.n	800d216 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d202:	68fa      	ldr	r2, [r7, #12]
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	429a      	cmp	r2, r3
 800d208:	d102      	bne.n	800d210 <udp_bind+0x44>
      rebind = 1;
 800d20a:	2301      	movs	r3, #1
 800d20c:	74fb      	strb	r3, [r7, #19]
      break;
 800d20e:	e005      	b.n	800d21c <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	617b      	str	r3, [r7, #20]
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d1f2      	bne.n	800d202 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800d21c:	88fb      	ldrh	r3, [r7, #6]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d109      	bne.n	800d236 <udp_bind+0x6a>
    port = udp_new_port();
 800d222:	f7ff fd13 	bl	800cc4c <udp_new_port>
 800d226:	4603      	mov	r3, r0
 800d228:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d22a:	88fb      	ldrh	r3, [r7, #6]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d11e      	bne.n	800d26e <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d230:	f06f 0307 	mvn.w	r3, #7
 800d234:	e032      	b.n	800d29c <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d236:	4b1c      	ldr	r3, [pc, #112]	; (800d2a8 <udp_bind+0xdc>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	617b      	str	r3, [r7, #20]
 800d23c:	e014      	b.n	800d268 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800d23e:	68fa      	ldr	r2, [r7, #12]
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	429a      	cmp	r2, r3
 800d244:	d00d      	beq.n	800d262 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	8a5b      	ldrh	r3, [r3, #18]
 800d24a:	88fa      	ldrh	r2, [r7, #6]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d108      	bne.n	800d262 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d258:	429a      	cmp	r2, r3
 800d25a:	d102      	bne.n	800d262 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800d25c:	f06f 0307 	mvn.w	r3, #7
 800d260:	e01c      	b.n	800d29c <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	68db      	ldr	r3, [r3, #12]
 800d266:	617b      	str	r3, [r7, #20]
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d1e7      	bne.n	800d23e <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d002      	beq.n	800d27a <udp_bind+0xae>
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	e000      	b.n	800d27c <udp_bind+0xb0>
 800d27a:	2300      	movs	r3, #0
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	88fa      	ldrh	r2, [r7, #6]
 800d284:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d286:	7cfb      	ldrb	r3, [r7, #19]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d106      	bne.n	800d29a <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d28c:	4b06      	ldr	r3, [pc, #24]	; (800d2a8 <udp_bind+0xdc>)
 800d28e:	681a      	ldr	r2, [r3, #0]
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d294:	4a04      	ldr	r2, [pc, #16]	; (800d2a8 <udp_bind+0xdc>)
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d29a:	2300      	movs	r3, #0
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3718      	adds	r7, #24
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	08018040 	.word	0x08018040
 800d2a8:	20006fb8 	.word	0x20006fb8

0800d2ac <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b086      	sub	sp, #24
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d002      	beq.n	800d2c6 <udp_connect+0x1a>
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d102      	bne.n	800d2cc <udp_connect+0x20>
    return ERR_VAL;
 800d2c6:	f06f 0305 	mvn.w	r3, #5
 800d2ca:	e03e      	b.n	800d34a <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	8a5b      	ldrh	r3, [r3, #18]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d10f      	bne.n	800d2f4 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d2d4:	68f9      	ldr	r1, [r7, #12]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	8a5b      	ldrh	r3, [r3, #18]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f7ff ff75 	bl	800d1cc <udp_bind>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d2e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d002      	beq.n	800d2f4 <udp_connect+0x48>
      return err;
 800d2ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d2f2:	e02a      	b.n	800d34a <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d002      	beq.n	800d300 <udp_connect+0x54>
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	e000      	b.n	800d302 <udp_connect+0x56>
 800d300:	2300      	movs	r3, #0
 800d302:	68fa      	ldr	r2, [r7, #12]
 800d304:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	88fa      	ldrh	r2, [r7, #6]
 800d30a:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	7c1b      	ldrb	r3, [r3, #16]
 800d310:	f043 0304 	orr.w	r3, r3, #4
 800d314:	b2da      	uxtb	r2, r3
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d31a:	4b0e      	ldr	r3, [pc, #56]	; (800d354 <udp_connect+0xa8>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	617b      	str	r3, [r7, #20]
 800d320:	e008      	b.n	800d334 <udp_connect+0x88>
    if (pcb == ipcb) {
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	429a      	cmp	r2, r3
 800d328:	d101      	bne.n	800d32e <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800d32a:	2300      	movs	r3, #0
 800d32c:	e00d      	b.n	800d34a <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	617b      	str	r3, [r7, #20]
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1f3      	bne.n	800d322 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800d33a:	4b06      	ldr	r3, [pc, #24]	; (800d354 <udp_connect+0xa8>)
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800d342:	4a04      	ldr	r2, [pc, #16]	; (800d354 <udp_connect+0xa8>)
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800d348:	2300      	movs	r3, #0
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3718      	adds	r7, #24
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	20006fb8 	.word	0x20006fb8

0800d358 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2200      	movs	r2, #0
 800d364:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	829a      	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	7c1b      	ldrb	r3, [r3, #16]
 800d370:	f023 0304 	bic.w	r3, r3, #4
 800d374:	b2da      	uxtb	r2, r3
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	741a      	strb	r2, [r3, #16]
}
 800d37a:	bf00      	nop
 800d37c:	370c      	adds	r7, #12
 800d37e:	46bd      	mov	sp, r7
 800d380:	bc80      	pop	{r7}
 800d382:	4770      	bx	lr

0800d384 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800d384:	b480      	push	{r7}
 800d386:	b085      	sub	sp, #20
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	68ba      	ldr	r2, [r7, #8]
 800d394:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	61da      	str	r2, [r3, #28]
}
 800d39c:	bf00      	nop
 800d39e:	3714      	adds	r7, #20
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bc80      	pop	{r7}
 800d3a4:	4770      	bx	lr
	...

0800d3a8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d3b0:	4b15      	ldr	r3, [pc, #84]	; (800d408 <udp_remove+0x60>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d105      	bne.n	800d3c6 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800d3ba:	4b13      	ldr	r3, [pc, #76]	; (800d408 <udp_remove+0x60>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	4a11      	ldr	r2, [pc, #68]	; (800d408 <udp_remove+0x60>)
 800d3c2:	6013      	str	r3, [r2, #0]
 800d3c4:	e017      	b.n	800d3f6 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d3c6:	4b10      	ldr	r3, [pc, #64]	; (800d408 <udp_remove+0x60>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	60fb      	str	r3, [r7, #12]
 800d3cc:	e010      	b.n	800d3f0 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d009      	beq.n	800d3ea <udp_remove+0x42>
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d104      	bne.n	800d3ea <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	68da      	ldr	r2, [r3, #12]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	60da      	str	r2, [r3, #12]
        break;
 800d3e8:	e005      	b.n	800d3f6 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	60fb      	str	r3, [r7, #12]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d1eb      	bne.n	800d3ce <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d3f6:	6879      	ldr	r1, [r7, #4]
 800d3f8:	2000      	movs	r0, #0
 800d3fa:	f7f9 fe59 	bl	80070b0 <memp_free>
}
 800d3fe:	bf00      	nop
 800d400:	3710      	adds	r7, #16
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
 800d406:	bf00      	nop
 800d408:	20006fb8 	.word	0x20006fb8

0800d40c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d412:	2000      	movs	r0, #0
 800d414:	f7f9 fdfa 	bl	800700c <memp_malloc>
 800d418:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d007      	beq.n	800d430 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d420:	2220      	movs	r2, #32
 800d422:	2100      	movs	r1, #0
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f004 fa55 	bl	80118d4 <memset>
    pcb->ttl = UDP_TTL;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	22ff      	movs	r2, #255	; 0xff
 800d42e:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800d430:	687b      	ldr	r3, [r7, #4]
}
 800d432:	4618      	mov	r0, r3
 800d434:	3708      	adds	r7, #8
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
	...

0800d43c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b085      	sub	sp, #20
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d01e      	beq.n	800d48a <udp_netif_ip_addr_changed+0x4e>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d01a      	beq.n	800d48a <udp_netif_ip_addr_changed+0x4e>
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d017      	beq.n	800d48a <udp_netif_ip_addr_changed+0x4e>
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d013      	beq.n	800d48a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d462:	4b0c      	ldr	r3, [pc, #48]	; (800d494 <udp_netif_ip_addr_changed+0x58>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	60fb      	str	r3, [r7, #12]
 800d468:	e00c      	b.n	800d484 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	429a      	cmp	r2, r3
 800d474:	d103      	bne.n	800d47e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	60fb      	str	r3, [r7, #12]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d1ef      	bne.n	800d46a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d48a:	bf00      	nop
 800d48c:	3714      	adds	r7, #20
 800d48e:	46bd      	mov	sp, r7
 800d490:	bc80      	pop	{r7}
 800d492:	4770      	bx	lr
 800d494:	20006fb8 	.word	0x20006fb8

0800d498 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d4a0:	4915      	ldr	r1, [pc, #84]	; (800d4f8 <etharp_free_entry+0x60>)
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	4613      	mov	r3, r2
 800d4a6:	005b      	lsls	r3, r3, #1
 800d4a8:	4413      	add	r3, r2
 800d4aa:	00db      	lsls	r3, r3, #3
 800d4ac:	440b      	add	r3, r1
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d013      	beq.n	800d4dc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d4b4:	4910      	ldr	r1, [pc, #64]	; (800d4f8 <etharp_free_entry+0x60>)
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	4613      	mov	r3, r2
 800d4ba:	005b      	lsls	r3, r3, #1
 800d4bc:	4413      	add	r3, r2
 800d4be:	00db      	lsls	r3, r3, #3
 800d4c0:	440b      	add	r3, r1
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7fa fb31 	bl	8007b2c <pbuf_free>
    arp_table[i].q = NULL;
 800d4ca:	490b      	ldr	r1, [pc, #44]	; (800d4f8 <etharp_free_entry+0x60>)
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	4613      	mov	r3, r2
 800d4d0:	005b      	lsls	r3, r3, #1
 800d4d2:	4413      	add	r3, r2
 800d4d4:	00db      	lsls	r3, r3, #3
 800d4d6:	440b      	add	r3, r1
 800d4d8:	2200      	movs	r2, #0
 800d4da:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d4dc:	4906      	ldr	r1, [pc, #24]	; (800d4f8 <etharp_free_entry+0x60>)
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	005b      	lsls	r3, r3, #1
 800d4e4:	4413      	add	r3, r2
 800d4e6:	00db      	lsls	r3, r3, #3
 800d4e8:	440b      	add	r3, r1
 800d4ea:	3314      	adds	r3, #20
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d4f0:	bf00      	nop
 800d4f2:	3708      	adds	r7, #8
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	20006fbc 	.word	0x20006fbc

0800d4fc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d502:	2300      	movs	r3, #0
 800d504:	71fb      	strb	r3, [r7, #7]
 800d506:	e096      	b.n	800d636 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d508:	79fa      	ldrb	r2, [r7, #7]
 800d50a:	494f      	ldr	r1, [pc, #316]	; (800d648 <etharp_tmr+0x14c>)
 800d50c:	4613      	mov	r3, r2
 800d50e:	005b      	lsls	r3, r3, #1
 800d510:	4413      	add	r3, r2
 800d512:	00db      	lsls	r3, r3, #3
 800d514:	440b      	add	r3, r1
 800d516:	3314      	adds	r3, #20
 800d518:	781b      	ldrb	r3, [r3, #0]
 800d51a:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800d51c:	79bb      	ldrb	r3, [r7, #6]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	f000 8086 	beq.w	800d630 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800d524:	79fa      	ldrb	r2, [r7, #7]
 800d526:	4948      	ldr	r1, [pc, #288]	; (800d648 <etharp_tmr+0x14c>)
 800d528:	4613      	mov	r3, r2
 800d52a:	005b      	lsls	r3, r3, #1
 800d52c:	4413      	add	r3, r2
 800d52e:	00db      	lsls	r3, r3, #3
 800d530:	440b      	add	r3, r1
 800d532:	3312      	adds	r3, #18
 800d534:	881b      	ldrh	r3, [r3, #0]
 800d536:	3301      	adds	r3, #1
 800d538:	b298      	uxth	r0, r3
 800d53a:	4943      	ldr	r1, [pc, #268]	; (800d648 <etharp_tmr+0x14c>)
 800d53c:	4613      	mov	r3, r2
 800d53e:	005b      	lsls	r3, r3, #1
 800d540:	4413      	add	r3, r2
 800d542:	00db      	lsls	r3, r3, #3
 800d544:	440b      	add	r3, r1
 800d546:	3312      	adds	r3, #18
 800d548:	4602      	mov	r2, r0
 800d54a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d54c:	79fa      	ldrb	r2, [r7, #7]
 800d54e:	493e      	ldr	r1, [pc, #248]	; (800d648 <etharp_tmr+0x14c>)
 800d550:	4613      	mov	r3, r2
 800d552:	005b      	lsls	r3, r3, #1
 800d554:	4413      	add	r3, r2
 800d556:	00db      	lsls	r3, r3, #3
 800d558:	440b      	add	r3, r1
 800d55a:	3312      	adds	r3, #18
 800d55c:	881b      	ldrh	r3, [r3, #0]
 800d55e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d562:	d215      	bcs.n	800d590 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d564:	79fa      	ldrb	r2, [r7, #7]
 800d566:	4938      	ldr	r1, [pc, #224]	; (800d648 <etharp_tmr+0x14c>)
 800d568:	4613      	mov	r3, r2
 800d56a:	005b      	lsls	r3, r3, #1
 800d56c:	4413      	add	r3, r2
 800d56e:	00db      	lsls	r3, r3, #3
 800d570:	440b      	add	r3, r1
 800d572:	3314      	adds	r3, #20
 800d574:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d576:	2b01      	cmp	r3, #1
 800d578:	d10f      	bne.n	800d59a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d57a:	79fa      	ldrb	r2, [r7, #7]
 800d57c:	4932      	ldr	r1, [pc, #200]	; (800d648 <etharp_tmr+0x14c>)
 800d57e:	4613      	mov	r3, r2
 800d580:	005b      	lsls	r3, r3, #1
 800d582:	4413      	add	r3, r2
 800d584:	00db      	lsls	r3, r3, #3
 800d586:	440b      	add	r3, r1
 800d588:	3312      	adds	r3, #18
 800d58a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d58c:	2b04      	cmp	r3, #4
 800d58e:	d904      	bls.n	800d59a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d590:	79fb      	ldrb	r3, [r7, #7]
 800d592:	4618      	mov	r0, r3
 800d594:	f7ff ff80 	bl	800d498 <etharp_free_entry>
 800d598:	e04a      	b.n	800d630 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d59a:	79fa      	ldrb	r2, [r7, #7]
 800d59c:	492a      	ldr	r1, [pc, #168]	; (800d648 <etharp_tmr+0x14c>)
 800d59e:	4613      	mov	r3, r2
 800d5a0:	005b      	lsls	r3, r3, #1
 800d5a2:	4413      	add	r3, r2
 800d5a4:	00db      	lsls	r3, r3, #3
 800d5a6:	440b      	add	r3, r1
 800d5a8:	3314      	adds	r3, #20
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	2b03      	cmp	r3, #3
 800d5ae:	d10a      	bne.n	800d5c6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d5b0:	79fa      	ldrb	r2, [r7, #7]
 800d5b2:	4925      	ldr	r1, [pc, #148]	; (800d648 <etharp_tmr+0x14c>)
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	005b      	lsls	r3, r3, #1
 800d5b8:	4413      	add	r3, r2
 800d5ba:	00db      	lsls	r3, r3, #3
 800d5bc:	440b      	add	r3, r1
 800d5be:	3314      	adds	r3, #20
 800d5c0:	2204      	movs	r2, #4
 800d5c2:	701a      	strb	r2, [r3, #0]
 800d5c4:	e034      	b.n	800d630 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d5c6:	79fa      	ldrb	r2, [r7, #7]
 800d5c8:	491f      	ldr	r1, [pc, #124]	; (800d648 <etharp_tmr+0x14c>)
 800d5ca:	4613      	mov	r3, r2
 800d5cc:	005b      	lsls	r3, r3, #1
 800d5ce:	4413      	add	r3, r2
 800d5d0:	00db      	lsls	r3, r3, #3
 800d5d2:	440b      	add	r3, r1
 800d5d4:	3314      	adds	r3, #20
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	2b04      	cmp	r3, #4
 800d5da:	d10a      	bne.n	800d5f2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d5dc:	79fa      	ldrb	r2, [r7, #7]
 800d5de:	491a      	ldr	r1, [pc, #104]	; (800d648 <etharp_tmr+0x14c>)
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	005b      	lsls	r3, r3, #1
 800d5e4:	4413      	add	r3, r2
 800d5e6:	00db      	lsls	r3, r3, #3
 800d5e8:	440b      	add	r3, r1
 800d5ea:	3314      	adds	r3, #20
 800d5ec:	2202      	movs	r2, #2
 800d5ee:	701a      	strb	r2, [r3, #0]
 800d5f0:	e01e      	b.n	800d630 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d5f2:	79fa      	ldrb	r2, [r7, #7]
 800d5f4:	4914      	ldr	r1, [pc, #80]	; (800d648 <etharp_tmr+0x14c>)
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	005b      	lsls	r3, r3, #1
 800d5fa:	4413      	add	r3, r2
 800d5fc:	00db      	lsls	r3, r3, #3
 800d5fe:	440b      	add	r3, r1
 800d600:	3314      	adds	r3, #20
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	2b01      	cmp	r3, #1
 800d606:	d113      	bne.n	800d630 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d608:	79fa      	ldrb	r2, [r7, #7]
 800d60a:	490f      	ldr	r1, [pc, #60]	; (800d648 <etharp_tmr+0x14c>)
 800d60c:	4613      	mov	r3, r2
 800d60e:	005b      	lsls	r3, r3, #1
 800d610:	4413      	add	r3, r2
 800d612:	00db      	lsls	r3, r3, #3
 800d614:	440b      	add	r3, r1
 800d616:	3308      	adds	r3, #8
 800d618:	6818      	ldr	r0, [r3, #0]
 800d61a:	79fa      	ldrb	r2, [r7, #7]
 800d61c:	4613      	mov	r3, r2
 800d61e:	005b      	lsls	r3, r3, #1
 800d620:	4413      	add	r3, r2
 800d622:	00db      	lsls	r3, r3, #3
 800d624:	4a08      	ldr	r2, [pc, #32]	; (800d648 <etharp_tmr+0x14c>)
 800d626:	4413      	add	r3, r2
 800d628:	3304      	adds	r3, #4
 800d62a:	4619      	mov	r1, r3
 800d62c:	f000 fe7a 	bl	800e324 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d630:	79fb      	ldrb	r3, [r7, #7]
 800d632:	3301      	adds	r3, #1
 800d634:	71fb      	strb	r3, [r7, #7]
 800d636:	79fb      	ldrb	r3, [r7, #7]
 800d638:	2b09      	cmp	r3, #9
 800d63a:	f67f af65 	bls.w	800d508 <etharp_tmr+0xc>
      }
    }
  }
}
 800d63e:	bf00      	nop
 800d640:	bf00      	nop
 800d642:	3708      	adds	r7, #8
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}
 800d648:	20006fbc 	.word	0x20006fbc

0800d64c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b088      	sub	sp, #32
 800d650:	af00      	add	r7, sp, #0
 800d652:	60f8      	str	r0, [r7, #12]
 800d654:	460b      	mov	r3, r1
 800d656:	607a      	str	r2, [r7, #4]
 800d658:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d65a:	230a      	movs	r3, #10
 800d65c:	77fb      	strb	r3, [r7, #31]
 800d65e:	230a      	movs	r3, #10
 800d660:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800d662:	230a      	movs	r3, #10
 800d664:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800d666:	2300      	movs	r3, #0
 800d668:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800d66a:	230a      	movs	r3, #10
 800d66c:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d66e:	2300      	movs	r3, #0
 800d670:	833b      	strh	r3, [r7, #24]
 800d672:	2300      	movs	r3, #0
 800d674:	82fb      	strh	r3, [r7, #22]
 800d676:	2300      	movs	r3, #0
 800d678:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d67a:	2300      	movs	r3, #0
 800d67c:	773b      	strb	r3, [r7, #28]
 800d67e:	e093      	b.n	800d7a8 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800d680:	7f3a      	ldrb	r2, [r7, #28]
 800d682:	4990      	ldr	r1, [pc, #576]	; (800d8c4 <etharp_find_entry+0x278>)
 800d684:	4613      	mov	r3, r2
 800d686:	005b      	lsls	r3, r3, #1
 800d688:	4413      	add	r3, r2
 800d68a:	00db      	lsls	r3, r3, #3
 800d68c:	440b      	add	r3, r1
 800d68e:	3314      	adds	r3, #20
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d694:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d698:	2b0a      	cmp	r3, #10
 800d69a:	d105      	bne.n	800d6a8 <etharp_find_entry+0x5c>
 800d69c:	7cfb      	ldrb	r3, [r7, #19]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d102      	bne.n	800d6a8 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800d6a2:	7f3b      	ldrb	r3, [r7, #28]
 800d6a4:	777b      	strb	r3, [r7, #29]
 800d6a6:	e07c      	b.n	800d7a2 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d6a8:	7cfb      	ldrb	r3, [r7, #19]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d079      	beq.n	800d7a2 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d6ae:	7cfb      	ldrb	r3, [r7, #19]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d009      	beq.n	800d6c8 <etharp_find_entry+0x7c>
 800d6b4:	7cfb      	ldrb	r3, [r7, #19]
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d806      	bhi.n	800d6c8 <etharp_find_entry+0x7c>
 800d6ba:	4b83      	ldr	r3, [pc, #524]	; (800d8c8 <etharp_find_entry+0x27c>)
 800d6bc:	f240 1225 	movw	r2, #293	; 0x125
 800d6c0:	4982      	ldr	r1, [pc, #520]	; (800d8cc <etharp_find_entry+0x280>)
 800d6c2:	4883      	ldr	r0, [pc, #524]	; (800d8d0 <etharp_find_entry+0x284>)
 800d6c4:	f004 ff7c 	bl	80125c0 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00f      	beq.n	800d6ee <etharp_find_entry+0xa2>
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	6819      	ldr	r1, [r3, #0]
 800d6d2:	7f3a      	ldrb	r2, [r7, #28]
 800d6d4:	487b      	ldr	r0, [pc, #492]	; (800d8c4 <etharp_find_entry+0x278>)
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	005b      	lsls	r3, r3, #1
 800d6da:	4413      	add	r3, r2
 800d6dc:	00db      	lsls	r3, r3, #3
 800d6de:	4403      	add	r3, r0
 800d6e0:	3304      	adds	r3, #4
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	4299      	cmp	r1, r3
 800d6e6:	d102      	bne.n	800d6ee <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d6e8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800d6ec:	e0e5      	b.n	800d8ba <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d6ee:	7cfb      	ldrb	r3, [r7, #19]
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d13b      	bne.n	800d76c <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d6f4:	7f3a      	ldrb	r2, [r7, #28]
 800d6f6:	4973      	ldr	r1, [pc, #460]	; (800d8c4 <etharp_find_entry+0x278>)
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	005b      	lsls	r3, r3, #1
 800d6fc:	4413      	add	r3, r2
 800d6fe:	00db      	lsls	r3, r3, #3
 800d700:	440b      	add	r3, r1
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d018      	beq.n	800d73a <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800d708:	7f3a      	ldrb	r2, [r7, #28]
 800d70a:	496e      	ldr	r1, [pc, #440]	; (800d8c4 <etharp_find_entry+0x278>)
 800d70c:	4613      	mov	r3, r2
 800d70e:	005b      	lsls	r3, r3, #1
 800d710:	4413      	add	r3, r2
 800d712:	00db      	lsls	r3, r3, #3
 800d714:	440b      	add	r3, r1
 800d716:	3312      	adds	r3, #18
 800d718:	881b      	ldrh	r3, [r3, #0]
 800d71a:	8b3a      	ldrh	r2, [r7, #24]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d840      	bhi.n	800d7a2 <etharp_find_entry+0x156>
            old_queue = i;
 800d720:	7f3b      	ldrb	r3, [r7, #28]
 800d722:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800d724:	7f3a      	ldrb	r2, [r7, #28]
 800d726:	4967      	ldr	r1, [pc, #412]	; (800d8c4 <etharp_find_entry+0x278>)
 800d728:	4613      	mov	r3, r2
 800d72a:	005b      	lsls	r3, r3, #1
 800d72c:	4413      	add	r3, r2
 800d72e:	00db      	lsls	r3, r3, #3
 800d730:	440b      	add	r3, r1
 800d732:	3312      	adds	r3, #18
 800d734:	881b      	ldrh	r3, [r3, #0]
 800d736:	833b      	strh	r3, [r7, #24]
 800d738:	e033      	b.n	800d7a2 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d73a:	7f3a      	ldrb	r2, [r7, #28]
 800d73c:	4961      	ldr	r1, [pc, #388]	; (800d8c4 <etharp_find_entry+0x278>)
 800d73e:	4613      	mov	r3, r2
 800d740:	005b      	lsls	r3, r3, #1
 800d742:	4413      	add	r3, r2
 800d744:	00db      	lsls	r3, r3, #3
 800d746:	440b      	add	r3, r1
 800d748:	3312      	adds	r3, #18
 800d74a:	881b      	ldrh	r3, [r3, #0]
 800d74c:	8afa      	ldrh	r2, [r7, #22]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d827      	bhi.n	800d7a2 <etharp_find_entry+0x156>
            old_pending = i;
 800d752:	7f3b      	ldrb	r3, [r7, #28]
 800d754:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800d756:	7f3a      	ldrb	r2, [r7, #28]
 800d758:	495a      	ldr	r1, [pc, #360]	; (800d8c4 <etharp_find_entry+0x278>)
 800d75a:	4613      	mov	r3, r2
 800d75c:	005b      	lsls	r3, r3, #1
 800d75e:	4413      	add	r3, r2
 800d760:	00db      	lsls	r3, r3, #3
 800d762:	440b      	add	r3, r1
 800d764:	3312      	adds	r3, #18
 800d766:	881b      	ldrh	r3, [r3, #0]
 800d768:	82fb      	strh	r3, [r7, #22]
 800d76a:	e01a      	b.n	800d7a2 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d76c:	7cfb      	ldrb	r3, [r7, #19]
 800d76e:	2b01      	cmp	r3, #1
 800d770:	d917      	bls.n	800d7a2 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d772:	7f3a      	ldrb	r2, [r7, #28]
 800d774:	4953      	ldr	r1, [pc, #332]	; (800d8c4 <etharp_find_entry+0x278>)
 800d776:	4613      	mov	r3, r2
 800d778:	005b      	lsls	r3, r3, #1
 800d77a:	4413      	add	r3, r2
 800d77c:	00db      	lsls	r3, r3, #3
 800d77e:	440b      	add	r3, r1
 800d780:	3312      	adds	r3, #18
 800d782:	881b      	ldrh	r3, [r3, #0]
 800d784:	8aba      	ldrh	r2, [r7, #20]
 800d786:	429a      	cmp	r2, r3
 800d788:	d80b      	bhi.n	800d7a2 <etharp_find_entry+0x156>
            old_stable = i;
 800d78a:	7f3b      	ldrb	r3, [r7, #28]
 800d78c:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800d78e:	7f3a      	ldrb	r2, [r7, #28]
 800d790:	494c      	ldr	r1, [pc, #304]	; (800d8c4 <etharp_find_entry+0x278>)
 800d792:	4613      	mov	r3, r2
 800d794:	005b      	lsls	r3, r3, #1
 800d796:	4413      	add	r3, r2
 800d798:	00db      	lsls	r3, r3, #3
 800d79a:	440b      	add	r3, r1
 800d79c:	3312      	adds	r3, #18
 800d79e:	881b      	ldrh	r3, [r3, #0]
 800d7a0:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d7a2:	7f3b      	ldrb	r3, [r7, #28]
 800d7a4:	3301      	adds	r3, #1
 800d7a6:	773b      	strb	r3, [r7, #28]
 800d7a8:	7f3b      	ldrb	r3, [r7, #28]
 800d7aa:	2b09      	cmp	r3, #9
 800d7ac:	f67f af68 	bls.w	800d680 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d7b0:	7afb      	ldrb	r3, [r7, #11]
 800d7b2:	f003 0302 	and.w	r3, r3, #2
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d108      	bne.n	800d7cc <etharp_find_entry+0x180>
 800d7ba:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d7be:	2b0a      	cmp	r3, #10
 800d7c0:	d107      	bne.n	800d7d2 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d7c2:	7afb      	ldrb	r3, [r7, #11]
 800d7c4:	f003 0301 	and.w	r3, r3, #1
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d102      	bne.n	800d7d2 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800d7cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7d0:	e073      	b.n	800d8ba <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d7d2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d7d6:	2b09      	cmp	r3, #9
 800d7d8:	dc02      	bgt.n	800d7e0 <etharp_find_entry+0x194>
    i = empty;
 800d7da:	7f7b      	ldrb	r3, [r7, #29]
 800d7dc:	773b      	strb	r3, [r7, #28]
 800d7de:	e036      	b.n	800d84e <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d7e0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800d7e4:	2b09      	cmp	r3, #9
 800d7e6:	dc13      	bgt.n	800d810 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800d7e8:	7fbb      	ldrb	r3, [r7, #30]
 800d7ea:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d7ec:	7f3a      	ldrb	r2, [r7, #28]
 800d7ee:	4935      	ldr	r1, [pc, #212]	; (800d8c4 <etharp_find_entry+0x278>)
 800d7f0:	4613      	mov	r3, r2
 800d7f2:	005b      	lsls	r3, r3, #1
 800d7f4:	4413      	add	r3, r2
 800d7f6:	00db      	lsls	r3, r3, #3
 800d7f8:	440b      	add	r3, r1
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d018      	beq.n	800d832 <etharp_find_entry+0x1e6>
 800d800:	4b31      	ldr	r3, [pc, #196]	; (800d8c8 <etharp_find_entry+0x27c>)
 800d802:	f240 126f 	movw	r2, #367	; 0x16f
 800d806:	4933      	ldr	r1, [pc, #204]	; (800d8d4 <etharp_find_entry+0x288>)
 800d808:	4831      	ldr	r0, [pc, #196]	; (800d8d0 <etharp_find_entry+0x284>)
 800d80a:	f004 fed9 	bl	80125c0 <iprintf>
 800d80e:	e010      	b.n	800d832 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d810:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d814:	2b09      	cmp	r3, #9
 800d816:	dc02      	bgt.n	800d81e <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800d818:	7ffb      	ldrb	r3, [r7, #31]
 800d81a:	773b      	strb	r3, [r7, #28]
 800d81c:	e009      	b.n	800d832 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d81e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d822:	2b09      	cmp	r3, #9
 800d824:	dc02      	bgt.n	800d82c <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d826:	7efb      	ldrb	r3, [r7, #27]
 800d828:	773b      	strb	r3, [r7, #28]
 800d82a:	e002      	b.n	800d832 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800d82c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d830:	e043      	b.n	800d8ba <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d832:	7f3b      	ldrb	r3, [r7, #28]
 800d834:	2b09      	cmp	r3, #9
 800d836:	d906      	bls.n	800d846 <etharp_find_entry+0x1fa>
 800d838:	4b23      	ldr	r3, [pc, #140]	; (800d8c8 <etharp_find_entry+0x27c>)
 800d83a:	f240 1281 	movw	r2, #385	; 0x181
 800d83e:	4926      	ldr	r1, [pc, #152]	; (800d8d8 <etharp_find_entry+0x28c>)
 800d840:	4823      	ldr	r0, [pc, #140]	; (800d8d0 <etharp_find_entry+0x284>)
 800d842:	f004 febd 	bl	80125c0 <iprintf>
    etharp_free_entry(i);
 800d846:	7f3b      	ldrb	r3, [r7, #28]
 800d848:	4618      	mov	r0, r3
 800d84a:	f7ff fe25 	bl	800d498 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d84e:	7f3b      	ldrb	r3, [r7, #28]
 800d850:	2b09      	cmp	r3, #9
 800d852:	d906      	bls.n	800d862 <etharp_find_entry+0x216>
 800d854:	4b1c      	ldr	r3, [pc, #112]	; (800d8c8 <etharp_find_entry+0x27c>)
 800d856:	f240 1285 	movw	r2, #389	; 0x185
 800d85a:	491f      	ldr	r1, [pc, #124]	; (800d8d8 <etharp_find_entry+0x28c>)
 800d85c:	481c      	ldr	r0, [pc, #112]	; (800d8d0 <etharp_find_entry+0x284>)
 800d85e:	f004 feaf 	bl	80125c0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d862:	7f3a      	ldrb	r2, [r7, #28]
 800d864:	4917      	ldr	r1, [pc, #92]	; (800d8c4 <etharp_find_entry+0x278>)
 800d866:	4613      	mov	r3, r2
 800d868:	005b      	lsls	r3, r3, #1
 800d86a:	4413      	add	r3, r2
 800d86c:	00db      	lsls	r3, r3, #3
 800d86e:	440b      	add	r3, r1
 800d870:	3314      	adds	r3, #20
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d006      	beq.n	800d886 <etharp_find_entry+0x23a>
 800d878:	4b13      	ldr	r3, [pc, #76]	; (800d8c8 <etharp_find_entry+0x27c>)
 800d87a:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800d87e:	4917      	ldr	r1, [pc, #92]	; (800d8dc <etharp_find_entry+0x290>)
 800d880:	4813      	ldr	r0, [pc, #76]	; (800d8d0 <etharp_find_entry+0x284>)
 800d882:	f004 fe9d 	bl	80125c0 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00a      	beq.n	800d8a2 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d88c:	7f3a      	ldrb	r2, [r7, #28]
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	6819      	ldr	r1, [r3, #0]
 800d892:	480c      	ldr	r0, [pc, #48]	; (800d8c4 <etharp_find_entry+0x278>)
 800d894:	4613      	mov	r3, r2
 800d896:	005b      	lsls	r3, r3, #1
 800d898:	4413      	add	r3, r2
 800d89a:	00db      	lsls	r3, r3, #3
 800d89c:	4403      	add	r3, r0
 800d89e:	3304      	adds	r3, #4
 800d8a0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d8a2:	7f3a      	ldrb	r2, [r7, #28]
 800d8a4:	4907      	ldr	r1, [pc, #28]	; (800d8c4 <etharp_find_entry+0x278>)
 800d8a6:	4613      	mov	r3, r2
 800d8a8:	005b      	lsls	r3, r3, #1
 800d8aa:	4413      	add	r3, r2
 800d8ac:	00db      	lsls	r3, r3, #3
 800d8ae:	440b      	add	r3, r1
 800d8b0:	3312      	adds	r3, #18
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800d8b6:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3720      	adds	r7, #32
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	20006fbc 	.word	0x20006fbc
 800d8c8:	080178b8 	.word	0x080178b8
 800d8cc:	080178f0 	.word	0x080178f0
 800d8d0:	08017930 	.word	0x08017930
 800d8d4:	08017958 	.word	0x08017958
 800d8d8:	08017970 	.word	0x08017970
 800d8dc:	08017984 	.word	0x08017984

0800d8e0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b088      	sub	sp, #32
 800d8e4:	af02      	add	r7, sp, #8
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	60b9      	str	r1, [r7, #8]
 800d8ea:	607a      	str	r2, [r7, #4]
 800d8ec:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8f4:	2b06      	cmp	r3, #6
 800d8f6:	d006      	beq.n	800d906 <etharp_update_arp_entry+0x26>
 800d8f8:	4b48      	ldr	r3, [pc, #288]	; (800da1c <etharp_update_arp_entry+0x13c>)
 800d8fa:	f240 12ab 	movw	r2, #427	; 0x1ab
 800d8fe:	4948      	ldr	r1, [pc, #288]	; (800da20 <etharp_update_arp_entry+0x140>)
 800d900:	4848      	ldr	r0, [pc, #288]	; (800da24 <etharp_update_arp_entry+0x144>)
 800d902:	f004 fe5d 	bl	80125c0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d012      	beq.n	800d932 <etharp_update_arp_entry+0x52>
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d00e      	beq.n	800d932 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	68f9      	ldr	r1, [r7, #12]
 800d91a:	4618      	mov	r0, r3
 800d91c:	f001 f9c6 	bl	800ecac <ip4_addr_isbroadcast_u32>
 800d920:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d922:	2b00      	cmp	r3, #0
 800d924:	d105      	bne.n	800d932 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d92e:	2be0      	cmp	r3, #224	; 0xe0
 800d930:	d102      	bne.n	800d938 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d932:	f06f 030f 	mvn.w	r3, #15
 800d936:	e06c      	b.n	800da12 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d938:	78fb      	ldrb	r3, [r7, #3]
 800d93a:	68fa      	ldr	r2, [r7, #12]
 800d93c:	4619      	mov	r1, r3
 800d93e:	68b8      	ldr	r0, [r7, #8]
 800d940:	f7ff fe84 	bl	800d64c <etharp_find_entry>
 800d944:	4603      	mov	r3, r0
 800d946:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d948:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	da02      	bge.n	800d956 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d950:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d954:	e05d      	b.n	800da12 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d956:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d95a:	4933      	ldr	r1, [pc, #204]	; (800da28 <etharp_update_arp_entry+0x148>)
 800d95c:	4613      	mov	r3, r2
 800d95e:	005b      	lsls	r3, r3, #1
 800d960:	4413      	add	r3, r2
 800d962:	00db      	lsls	r3, r3, #3
 800d964:	440b      	add	r3, r1
 800d966:	3314      	adds	r3, #20
 800d968:	2202      	movs	r2, #2
 800d96a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d96c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d970:	492d      	ldr	r1, [pc, #180]	; (800da28 <etharp_update_arp_entry+0x148>)
 800d972:	4613      	mov	r3, r2
 800d974:	005b      	lsls	r3, r3, #1
 800d976:	4413      	add	r3, r2
 800d978:	00db      	lsls	r3, r3, #3
 800d97a:	440b      	add	r3, r1
 800d97c:	3308      	adds	r3, #8
 800d97e:	68fa      	ldr	r2, [r7, #12]
 800d980:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800d982:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d986:	4613      	mov	r3, r2
 800d988:	005b      	lsls	r3, r3, #1
 800d98a:	4413      	add	r3, r2
 800d98c:	00db      	lsls	r3, r3, #3
 800d98e:	3308      	adds	r3, #8
 800d990:	4a25      	ldr	r2, [pc, #148]	; (800da28 <etharp_update_arp_entry+0x148>)
 800d992:	4413      	add	r3, r2
 800d994:	3304      	adds	r3, #4
 800d996:	2206      	movs	r2, #6
 800d998:	6879      	ldr	r1, [r7, #4]
 800d99a:	4618      	mov	r0, r3
 800d99c:	f003 ff8c 	bl	80118b8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d9a0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d9a4:	4920      	ldr	r1, [pc, #128]	; (800da28 <etharp_update_arp_entry+0x148>)
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	005b      	lsls	r3, r3, #1
 800d9aa:	4413      	add	r3, r2
 800d9ac:	00db      	lsls	r3, r3, #3
 800d9ae:	440b      	add	r3, r1
 800d9b0:	3312      	adds	r3, #18
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d9b6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d9ba:	491b      	ldr	r1, [pc, #108]	; (800da28 <etharp_update_arp_entry+0x148>)
 800d9bc:	4613      	mov	r3, r2
 800d9be:	005b      	lsls	r3, r3, #1
 800d9c0:	4413      	add	r3, r2
 800d9c2:	00db      	lsls	r3, r3, #3
 800d9c4:	440b      	add	r3, r1
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d021      	beq.n	800da10 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d9cc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d9d0:	4915      	ldr	r1, [pc, #84]	; (800da28 <etharp_update_arp_entry+0x148>)
 800d9d2:	4613      	mov	r3, r2
 800d9d4:	005b      	lsls	r3, r3, #1
 800d9d6:	4413      	add	r3, r2
 800d9d8:	00db      	lsls	r3, r3, #3
 800d9da:	440b      	add	r3, r1
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d9e0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d9e4:	4910      	ldr	r1, [pc, #64]	; (800da28 <etharp_update_arp_entry+0x148>)
 800d9e6:	4613      	mov	r3, r2
 800d9e8:	005b      	lsls	r3, r3, #1
 800d9ea:	4413      	add	r3, r2
 800d9ec:	00db      	lsls	r3, r3, #3
 800d9ee:	440b      	add	r3, r1
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800d9fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d9fe:	9300      	str	r3, [sp, #0]
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6939      	ldr	r1, [r7, #16]
 800da04:	68f8      	ldr	r0, [r7, #12]
 800da06:	f002 f84f 	bl	800faa8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800da0a:	6938      	ldr	r0, [r7, #16]
 800da0c:	f7fa f88e 	bl	8007b2c <pbuf_free>
  }
  return ERR_OK;
 800da10:	2300      	movs	r3, #0
}
 800da12:	4618      	mov	r0, r3
 800da14:	3718      	adds	r7, #24
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	080178b8 	.word	0x080178b8
 800da20:	080179b0 	.word	0x080179b0
 800da24:	08017930 	.word	0x08017930
 800da28:	20006fbc 	.word	0x20006fbc

0800da2c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800da34:	2300      	movs	r3, #0
 800da36:	73fb      	strb	r3, [r7, #15]
 800da38:	e01f      	b.n	800da7a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800da3a:	7bfa      	ldrb	r2, [r7, #15]
 800da3c:	4913      	ldr	r1, [pc, #76]	; (800da8c <etharp_cleanup_netif+0x60>)
 800da3e:	4613      	mov	r3, r2
 800da40:	005b      	lsls	r3, r3, #1
 800da42:	4413      	add	r3, r2
 800da44:	00db      	lsls	r3, r3, #3
 800da46:	440b      	add	r3, r1
 800da48:	3314      	adds	r3, #20
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800da4e:	7bbb      	ldrb	r3, [r7, #14]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d00f      	beq.n	800da74 <etharp_cleanup_netif+0x48>
 800da54:	7bfa      	ldrb	r2, [r7, #15]
 800da56:	490d      	ldr	r1, [pc, #52]	; (800da8c <etharp_cleanup_netif+0x60>)
 800da58:	4613      	mov	r3, r2
 800da5a:	005b      	lsls	r3, r3, #1
 800da5c:	4413      	add	r3, r2
 800da5e:	00db      	lsls	r3, r3, #3
 800da60:	440b      	add	r3, r1
 800da62:	3308      	adds	r3, #8
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	687a      	ldr	r2, [r7, #4]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d103      	bne.n	800da74 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800da6c:	7bfb      	ldrb	r3, [r7, #15]
 800da6e:	4618      	mov	r0, r3
 800da70:	f7ff fd12 	bl	800d498 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800da74:	7bfb      	ldrb	r3, [r7, #15]
 800da76:	3301      	adds	r3, #1
 800da78:	73fb      	strb	r3, [r7, #15]
 800da7a:	7bfb      	ldrb	r3, [r7, #15]
 800da7c:	2b09      	cmp	r3, #9
 800da7e:	d9dc      	bls.n	800da3a <etharp_cleanup_netif+0xe>
    }
  }
}
 800da80:	bf00      	nop
 800da82:	bf00      	nop
 800da84:	3710      	adds	r7, #16
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	20006fbc 	.word	0x20006fbc

0800da90 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800da90:	b5b0      	push	{r4, r5, r7, lr}
 800da92:	b08a      	sub	sp, #40	; 0x28
 800da94:	af04      	add	r7, sp, #16
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d107      	bne.n	800dab0 <etharp_input+0x20>
 800daa0:	4b49      	ldr	r3, [pc, #292]	; (800dbc8 <etharp_input+0x138>)
 800daa2:	f44f 7222 	mov.w	r2, #648	; 0x288
 800daa6:	4949      	ldr	r1, [pc, #292]	; (800dbcc <etharp_input+0x13c>)
 800daa8:	4849      	ldr	r0, [pc, #292]	; (800dbd0 <etharp_input+0x140>)
 800daaa:	f004 fd89 	bl	80125c0 <iprintf>
 800daae:	e088      	b.n	800dbc2 <etharp_input+0x132>

  hdr = (struct etharp_hdr *)p->payload;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	685b      	ldr	r3, [r3, #4]
 800dab4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	881b      	ldrh	r3, [r3, #0]
 800daba:	b29b      	uxth	r3, r3
 800dabc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dac0:	d10c      	bne.n	800dadc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800dac6:	2b06      	cmp	r3, #6
 800dac8:	d108      	bne.n	800dadc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dace:	2b04      	cmp	r3, #4
 800dad0:	d104      	bne.n	800dadc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	885b      	ldrh	r3, [r3, #2]
 800dad6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dad8:	2b08      	cmp	r3, #8
 800dada:	d00f      	beq.n	800dafc <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 800dadc:	4b3d      	ldr	r3, [pc, #244]	; (800dbd4 <etharp_input+0x144>)
 800dade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dae0:	3301      	adds	r3, #1
 800dae2:	b29a      	uxth	r2, r3
 800dae4:	4b3b      	ldr	r3, [pc, #236]	; (800dbd4 <etharp_input+0x144>)
 800dae6:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 800dae8:	4b3a      	ldr	r3, [pc, #232]	; (800dbd4 <etharp_input+0x144>)
 800daea:	8bdb      	ldrh	r3, [r3, #30]
 800daec:	3301      	adds	r3, #1
 800daee:	b29a      	uxth	r2, r3
 800daf0:	4b38      	ldr	r3, [pc, #224]	; (800dbd4 <etharp_input+0x144>)
 800daf2:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f7fa f819 	bl	8007b2c <pbuf_free>
    return;
 800dafa:	e062      	b.n	800dbc2 <etharp_input+0x132>
  }
  ETHARP_STATS_INC(etharp.recv);
 800dafc:	4b35      	ldr	r3, [pc, #212]	; (800dbd4 <etharp_input+0x144>)
 800dafe:	8b5b      	ldrh	r3, [r3, #26]
 800db00:	3301      	adds	r3, #1
 800db02:	b29a      	uxth	r2, r3
 800db04:	4b33      	ldr	r3, [pc, #204]	; (800dbd4 <etharp_input+0x144>)
 800db06:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	330e      	adds	r3, #14
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	3318      	adds	r3, #24
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	3304      	adds	r3, #4
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d102      	bne.n	800db28 <etharp_input+0x98>
    for_us = 0;
 800db22:	2300      	movs	r3, #0
 800db24:	75fb      	strb	r3, [r7, #23]
 800db26:	e009      	b.n	800db3c <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800db28:	68ba      	ldr	r2, [r7, #8]
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	3304      	adds	r3, #4
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	429a      	cmp	r2, r3
 800db32:	bf0c      	ite	eq
 800db34:	2301      	moveq	r3, #1
 800db36:	2300      	movne	r3, #0
 800db38:	b2db      	uxtb	r3, r3
 800db3a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	f103 0208 	add.w	r2, r3, #8
 800db42:	7dfb      	ldrb	r3, [r7, #23]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d001      	beq.n	800db4c <etharp_input+0xbc>
 800db48:	2301      	movs	r3, #1
 800db4a:	e000      	b.n	800db4e <etharp_input+0xbe>
 800db4c:	2302      	movs	r3, #2
 800db4e:	f107 010c 	add.w	r1, r7, #12
 800db52:	6838      	ldr	r0, [r7, #0]
 800db54:	f7ff fec4 	bl	800d8e0 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	88db      	ldrh	r3, [r3, #6]
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db62:	d003      	beq.n	800db6c <etharp_input+0xdc>
 800db64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db68:	d025      	beq.n	800dbb6 <etharp_input+0x126>
 800db6a:	e01d      	b.n	800dba8 <etharp_input+0x118>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 800db6c:	7dfb      	ldrb	r3, [r7, #23]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d023      	beq.n	800dbba <etharp_input+0x12a>
      /* send ARP response */
      etharp_raw(netif,
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800db88:	693a      	ldr	r2, [r7, #16]
 800db8a:	3208      	adds	r2, #8
      etharp_raw(netif,
 800db8c:	2102      	movs	r1, #2
 800db8e:	9103      	str	r1, [sp, #12]
 800db90:	f107 010c 	add.w	r1, r7, #12
 800db94:	9102      	str	r1, [sp, #8]
 800db96:	9201      	str	r2, [sp, #4]
 800db98:	9300      	str	r3, [sp, #0]
 800db9a:	462b      	mov	r3, r5
 800db9c:	4622      	mov	r2, r4
 800db9e:	4601      	mov	r1, r0
 800dba0:	6838      	ldr	r0, [r7, #0]
 800dba2:	f000 fb03 	bl	800e1ac <etharp_raw>
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
    }
    break;
 800dba6:	e008      	b.n	800dbba <etharp_input+0x12a>
    dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
 800dba8:	4b0a      	ldr	r3, [pc, #40]	; (800dbd4 <etharp_input+0x144>)
 800dbaa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dbac:	3301      	adds	r3, #1
 800dbae:	b29a      	uxth	r2, r3
 800dbb0:	4b08      	ldr	r3, [pc, #32]	; (800dbd4 <etharp_input+0x144>)
 800dbb2:	859a      	strh	r2, [r3, #44]	; 0x2c
    break;
 800dbb4:	e002      	b.n	800dbbc <etharp_input+0x12c>
    break;
 800dbb6:	bf00      	nop
 800dbb8:	e000      	b.n	800dbbc <etharp_input+0x12c>
    break;
 800dbba:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f7f9 ffb5 	bl	8007b2c <pbuf_free>
}
 800dbc2:	3718      	adds	r7, #24
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bdb0      	pop	{r4, r5, r7, pc}
 800dbc8:	080178b8 	.word	0x080178b8
 800dbcc:	08017a08 	.word	0x08017a08
 800dbd0:	08017930 	.word	0x08017930
 800dbd4:	20006e84 	.word	0x20006e84

0800dbd8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b086      	sub	sp, #24
 800dbdc:	af02      	add	r7, sp, #8
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	60b9      	str	r1, [r7, #8]
 800dbe2:	4613      	mov	r3, r2
 800dbe4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dbe6:	79fa      	ldrb	r2, [r7, #7]
 800dbe8:	4944      	ldr	r1, [pc, #272]	; (800dcfc <etharp_output_to_arp_index+0x124>)
 800dbea:	4613      	mov	r3, r2
 800dbec:	005b      	lsls	r3, r3, #1
 800dbee:	4413      	add	r3, r2
 800dbf0:	00db      	lsls	r3, r3, #3
 800dbf2:	440b      	add	r3, r1
 800dbf4:	3314      	adds	r3, #20
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d806      	bhi.n	800dc0a <etharp_output_to_arp_index+0x32>
 800dbfc:	4b40      	ldr	r3, [pc, #256]	; (800dd00 <etharp_output_to_arp_index+0x128>)
 800dbfe:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800dc02:	4940      	ldr	r1, [pc, #256]	; (800dd04 <etharp_output_to_arp_index+0x12c>)
 800dc04:	4840      	ldr	r0, [pc, #256]	; (800dd08 <etharp_output_to_arp_index+0x130>)
 800dc06:	f004 fcdb 	bl	80125c0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800dc0a:	79fa      	ldrb	r2, [r7, #7]
 800dc0c:	493b      	ldr	r1, [pc, #236]	; (800dcfc <etharp_output_to_arp_index+0x124>)
 800dc0e:	4613      	mov	r3, r2
 800dc10:	005b      	lsls	r3, r3, #1
 800dc12:	4413      	add	r3, r2
 800dc14:	00db      	lsls	r3, r3, #3
 800dc16:	440b      	add	r3, r1
 800dc18:	3314      	adds	r3, #20
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	2b02      	cmp	r3, #2
 800dc1e:	d153      	bne.n	800dcc8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800dc20:	79fa      	ldrb	r2, [r7, #7]
 800dc22:	4936      	ldr	r1, [pc, #216]	; (800dcfc <etharp_output_to_arp_index+0x124>)
 800dc24:	4613      	mov	r3, r2
 800dc26:	005b      	lsls	r3, r3, #1
 800dc28:	4413      	add	r3, r2
 800dc2a:	00db      	lsls	r3, r3, #3
 800dc2c:	440b      	add	r3, r1
 800dc2e:	3312      	adds	r3, #18
 800dc30:	881b      	ldrh	r3, [r3, #0]
 800dc32:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800dc36:	d919      	bls.n	800dc6c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800dc38:	79fa      	ldrb	r2, [r7, #7]
 800dc3a:	4613      	mov	r3, r2
 800dc3c:	005b      	lsls	r3, r3, #1
 800dc3e:	4413      	add	r3, r2
 800dc40:	00db      	lsls	r3, r3, #3
 800dc42:	4a2e      	ldr	r2, [pc, #184]	; (800dcfc <etharp_output_to_arp_index+0x124>)
 800dc44:	4413      	add	r3, r2
 800dc46:	3304      	adds	r3, #4
 800dc48:	4619      	mov	r1, r3
 800dc4a:	68f8      	ldr	r0, [r7, #12]
 800dc4c:	f000 fb6a 	bl	800e324 <etharp_request>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d138      	bne.n	800dcc8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dc56:	79fa      	ldrb	r2, [r7, #7]
 800dc58:	4928      	ldr	r1, [pc, #160]	; (800dcfc <etharp_output_to_arp_index+0x124>)
 800dc5a:	4613      	mov	r3, r2
 800dc5c:	005b      	lsls	r3, r3, #1
 800dc5e:	4413      	add	r3, r2
 800dc60:	00db      	lsls	r3, r3, #3
 800dc62:	440b      	add	r3, r1
 800dc64:	3314      	adds	r3, #20
 800dc66:	2203      	movs	r2, #3
 800dc68:	701a      	strb	r2, [r3, #0]
 800dc6a:	e02d      	b.n	800dcc8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800dc6c:	79fa      	ldrb	r2, [r7, #7]
 800dc6e:	4923      	ldr	r1, [pc, #140]	; (800dcfc <etharp_output_to_arp_index+0x124>)
 800dc70:	4613      	mov	r3, r2
 800dc72:	005b      	lsls	r3, r3, #1
 800dc74:	4413      	add	r3, r2
 800dc76:	00db      	lsls	r3, r3, #3
 800dc78:	440b      	add	r3, r1
 800dc7a:	3312      	adds	r3, #18
 800dc7c:	881b      	ldrh	r3, [r3, #0]
 800dc7e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800dc82:	d321      	bcc.n	800dcc8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dc84:	79fa      	ldrb	r2, [r7, #7]
 800dc86:	4613      	mov	r3, r2
 800dc88:	005b      	lsls	r3, r3, #1
 800dc8a:	4413      	add	r3, r2
 800dc8c:	00db      	lsls	r3, r3, #3
 800dc8e:	4a1b      	ldr	r2, [pc, #108]	; (800dcfc <etharp_output_to_arp_index+0x124>)
 800dc90:	4413      	add	r3, r2
 800dc92:	1d19      	adds	r1, r3, #4
 800dc94:	79fa      	ldrb	r2, [r7, #7]
 800dc96:	4613      	mov	r3, r2
 800dc98:	005b      	lsls	r3, r3, #1
 800dc9a:	4413      	add	r3, r2
 800dc9c:	00db      	lsls	r3, r3, #3
 800dc9e:	3308      	adds	r3, #8
 800dca0:	4a16      	ldr	r2, [pc, #88]	; (800dcfc <etharp_output_to_arp_index+0x124>)
 800dca2:	4413      	add	r3, r2
 800dca4:	3304      	adds	r3, #4
 800dca6:	461a      	mov	r2, r3
 800dca8:	68f8      	ldr	r0, [r7, #12]
 800dcaa:	f000 fb19 	bl	800e2e0 <etharp_request_dst>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d109      	bne.n	800dcc8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dcb4:	79fa      	ldrb	r2, [r7, #7]
 800dcb6:	4911      	ldr	r1, [pc, #68]	; (800dcfc <etharp_output_to_arp_index+0x124>)
 800dcb8:	4613      	mov	r3, r2
 800dcba:	005b      	lsls	r3, r3, #1
 800dcbc:	4413      	add	r3, r2
 800dcbe:	00db      	lsls	r3, r3, #3
 800dcc0:	440b      	add	r3, r1
 800dcc2:	3314      	adds	r3, #20
 800dcc4:	2203      	movs	r2, #3
 800dcc6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800dcce:	79fa      	ldrb	r2, [r7, #7]
 800dcd0:	4613      	mov	r3, r2
 800dcd2:	005b      	lsls	r3, r3, #1
 800dcd4:	4413      	add	r3, r2
 800dcd6:	00db      	lsls	r3, r3, #3
 800dcd8:	3308      	adds	r3, #8
 800dcda:	4a08      	ldr	r2, [pc, #32]	; (800dcfc <etharp_output_to_arp_index+0x124>)
 800dcdc:	4413      	add	r3, r2
 800dcde:	3304      	adds	r3, #4
 800dce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dce4:	9200      	str	r2, [sp, #0]
 800dce6:	460a      	mov	r2, r1
 800dce8:	68b9      	ldr	r1, [r7, #8]
 800dcea:	68f8      	ldr	r0, [r7, #12]
 800dcec:	f001 fedc 	bl	800faa8 <ethernet_output>
 800dcf0:	4603      	mov	r3, r0
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3710      	adds	r7, #16
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	20006fbc 	.word	0x20006fbc
 800dd00:	080178b8 	.word	0x080178b8
 800dd04:	08017a28 	.word	0x08017a28
 800dd08:	08017930 	.word	0x08017930

0800dd0c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b08a      	sub	sp, #40	; 0x28
 800dd10:	af02      	add	r7, sp, #8
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d106      	bne.n	800dd30 <etharp_output+0x24>
 800dd22:	4b6c      	ldr	r3, [pc, #432]	; (800ded4 <etharp_output+0x1c8>)
 800dd24:	f240 321b 	movw	r2, #795	; 0x31b
 800dd28:	496b      	ldr	r1, [pc, #428]	; (800ded8 <etharp_output+0x1cc>)
 800dd2a:	486c      	ldr	r0, [pc, #432]	; (800dedc <etharp_output+0x1d0>)
 800dd2c:	f004 fc48 	bl	80125c0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d106      	bne.n	800dd44 <etharp_output+0x38>
 800dd36:	4b67      	ldr	r3, [pc, #412]	; (800ded4 <etharp_output+0x1c8>)
 800dd38:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800dd3c:	4968      	ldr	r1, [pc, #416]	; (800dee0 <etharp_output+0x1d4>)
 800dd3e:	4867      	ldr	r0, [pc, #412]	; (800dedc <etharp_output+0x1d0>)
 800dd40:	f004 fc3e 	bl	80125c0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d106      	bne.n	800dd58 <etharp_output+0x4c>
 800dd4a:	4b62      	ldr	r3, [pc, #392]	; (800ded4 <etharp_output+0x1c8>)
 800dd4c:	f240 321d 	movw	r2, #797	; 0x31d
 800dd50:	4964      	ldr	r1, [pc, #400]	; (800dee4 <etharp_output+0x1d8>)
 800dd52:	4862      	ldr	r0, [pc, #392]	; (800dedc <etharp_output+0x1d0>)
 800dd54:	f004 fc34 	bl	80125c0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	68f9      	ldr	r1, [r7, #12]
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f000 ffa4 	bl	800ecac <ip4_addr_isbroadcast_u32>
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d002      	beq.n	800dd70 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800dd6a:	4b5f      	ldr	r3, [pc, #380]	; (800dee8 <etharp_output+0x1dc>)
 800dd6c:	61fb      	str	r3, [r7, #28]
 800dd6e:	e0a1      	b.n	800deb4 <etharp_output+0x1a8>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd78:	2be0      	cmp	r3, #224	; 0xe0
 800dd7a:	d118      	bne.n	800ddae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800dd80:	2300      	movs	r3, #0
 800dd82:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800dd84:	235e      	movs	r3, #94	; 0x5e
 800dd86:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	3302      	adds	r3, #2
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	3303      	adds	r3, #3
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800dda6:	f107 0310 	add.w	r3, r7, #16
 800ddaa:	61fb      	str	r3, [r7, #28]
 800ddac:	e082      	b.n	800deb4 <etharp_output+0x1a8>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	3304      	adds	r3, #4
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	405a      	eors	r2, r3
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	3308      	adds	r3, #8
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4013      	ands	r3, r2
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d012      	beq.n	800ddec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ddcc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d00b      	beq.n	800ddec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	330c      	adds	r3, #12
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d003      	beq.n	800dde6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	330c      	adds	r3, #12
 800dde2:	61bb      	str	r3, [r7, #24]
 800dde4:	e002      	b.n	800ddec <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800dde6:	f06f 0303 	mvn.w	r3, #3
 800ddea:	e06f      	b.n	800decc <etharp_output+0x1c0>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ddec:	4b3f      	ldr	r3, [pc, #252]	; (800deec <etharp_output+0x1e0>)
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	4a3f      	ldr	r2, [pc, #252]	; (800def0 <etharp_output+0x1e4>)
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	005b      	lsls	r3, r3, #1
 800ddf8:	440b      	add	r3, r1
 800ddfa:	00db      	lsls	r3, r3, #3
 800ddfc:	4413      	add	r3, r2
 800ddfe:	3314      	adds	r3, #20
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	2b01      	cmp	r3, #1
 800de04:	d91d      	bls.n	800de42 <etharp_output+0x136>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800de06:	69bb      	ldr	r3, [r7, #24]
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	4b38      	ldr	r3, [pc, #224]	; (800deec <etharp_output+0x1e0>)
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	4618      	mov	r0, r3
 800de10:	4937      	ldr	r1, [pc, #220]	; (800def0 <etharp_output+0x1e4>)
 800de12:	4603      	mov	r3, r0
 800de14:	005b      	lsls	r3, r3, #1
 800de16:	4403      	add	r3, r0
 800de18:	00db      	lsls	r3, r3, #3
 800de1a:	440b      	add	r3, r1
 800de1c:	3304      	adds	r3, #4
 800de1e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800de20:	429a      	cmp	r2, r3
 800de22:	d10e      	bne.n	800de42 <etharp_output+0x136>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 800de24:	4b33      	ldr	r3, [pc, #204]	; (800def4 <etharp_output+0x1e8>)
 800de26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800de28:	3301      	adds	r3, #1
 800de2a:	b29a      	uxth	r2, r3
 800de2c:	4b31      	ldr	r3, [pc, #196]	; (800def4 <etharp_output+0x1e8>)
 800de2e:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800de30:	4b2e      	ldr	r3, [pc, #184]	; (800deec <etharp_output+0x1e0>)
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	461a      	mov	r2, r3
 800de36:	68b9      	ldr	r1, [r7, #8]
 800de38:	68f8      	ldr	r0, [r7, #12]
 800de3a:	f7ff fecd 	bl	800dbd8 <etharp_output_to_arp_index>
 800de3e:	4603      	mov	r3, r0
 800de40:	e044      	b.n	800decc <etharp_output+0x1c0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800de42:	2300      	movs	r3, #0
 800de44:	75fb      	strb	r3, [r7, #23]
 800de46:	e02a      	b.n	800de9e <etharp_output+0x192>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800de48:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800de4c:	4928      	ldr	r1, [pc, #160]	; (800def0 <etharp_output+0x1e4>)
 800de4e:	4613      	mov	r3, r2
 800de50:	005b      	lsls	r3, r3, #1
 800de52:	4413      	add	r3, r2
 800de54:	00db      	lsls	r3, r3, #3
 800de56:	440b      	add	r3, r1
 800de58:	3314      	adds	r3, #20
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d918      	bls.n	800de92 <etharp_output+0x186>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800de60:	69bb      	ldr	r3, [r7, #24]
 800de62:	6819      	ldr	r1, [r3, #0]
 800de64:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800de68:	4821      	ldr	r0, [pc, #132]	; (800def0 <etharp_output+0x1e4>)
 800de6a:	4613      	mov	r3, r2
 800de6c:	005b      	lsls	r3, r3, #1
 800de6e:	4413      	add	r3, r2
 800de70:	00db      	lsls	r3, r3, #3
 800de72:	4403      	add	r3, r0
 800de74:	3304      	adds	r3, #4
 800de76:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800de78:	4299      	cmp	r1, r3
 800de7a:	d10a      	bne.n	800de92 <etharp_output+0x186>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800de7c:	7dfa      	ldrb	r2, [r7, #23]
 800de7e:	4b1b      	ldr	r3, [pc, #108]	; (800deec <etharp_output+0x1e0>)
 800de80:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800de82:	7dfb      	ldrb	r3, [r7, #23]
 800de84:	461a      	mov	r2, r3
 800de86:	68b9      	ldr	r1, [r7, #8]
 800de88:	68f8      	ldr	r0, [r7, #12]
 800de8a:	f7ff fea5 	bl	800dbd8 <etharp_output_to_arp_index>
 800de8e:	4603      	mov	r3, r0
 800de90:	e01c      	b.n	800decc <etharp_output+0x1c0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800de92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de96:	b2db      	uxtb	r3, r3
 800de98:	3301      	adds	r3, #1
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	75fb      	strb	r3, [r7, #23]
 800de9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dea2:	2b09      	cmp	r3, #9
 800dea4:	ddd0      	ble.n	800de48 <etharp_output+0x13c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800dea6:	68ba      	ldr	r2, [r7, #8]
 800dea8:	69b9      	ldr	r1, [r7, #24]
 800deaa:	68f8      	ldr	r0, [r7, #12]
 800deac:	f000 f824 	bl	800def8 <etharp_query>
 800deb0:	4603      	mov	r3, r0
 800deb2:	e00b      	b.n	800decc <etharp_output+0x1c0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800deba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800debe:	9300      	str	r3, [sp, #0]
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	68b9      	ldr	r1, [r7, #8]
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f001 fdef 	bl	800faa8 <ethernet_output>
 800deca:	4603      	mov	r3, r0
}
 800decc:	4618      	mov	r0, r3
 800dece:	3720      	adds	r7, #32
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	080178b8 	.word	0x080178b8
 800ded8:	08017a08 	.word	0x08017a08
 800dedc:	08017930 	.word	0x08017930
 800dee0:	08017a58 	.word	0x08017a58
 800dee4:	080179f8 	.word	0x080179f8
 800dee8:	08018044 	.word	0x08018044
 800deec:	200070ac 	.word	0x200070ac
 800def0:	20006fbc 	.word	0x20006fbc
 800def4:	20006e84 	.word	0x20006e84

0800def8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b08c      	sub	sp, #48	; 0x30
 800defc:	af02      	add	r7, sp, #8
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	3329      	adds	r3, #41	; 0x29
 800df08:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800df0a:	23ff      	movs	r3, #255	; 0xff
 800df0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800df10:	2300      	movs	r3, #0
 800df12:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	68f9      	ldr	r1, [r7, #12]
 800df1a:	4618      	mov	r0, r3
 800df1c:	f000 fec6 	bl	800ecac <ip4_addr_isbroadcast_u32>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	d10c      	bne.n	800df40 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800df2e:	2be0      	cmp	r3, #224	; 0xe0
 800df30:	d006      	beq.n	800df40 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d003      	beq.n	800df40 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d102      	bne.n	800df46 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800df40:	f06f 030f 	mvn.w	r3, #15
 800df44:	e11d      	b.n	800e182 <etharp_query+0x28a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800df46:	68fa      	ldr	r2, [r7, #12]
 800df48:	2101      	movs	r1, #1
 800df4a:	68b8      	ldr	r0, [r7, #8]
 800df4c:	f7ff fb7e 	bl	800d64c <etharp_find_entry>
 800df50:	4603      	mov	r3, r0
 800df52:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800df54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	da0b      	bge.n	800df74 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d005      	beq.n	800df6e <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 800df62:	4b8a      	ldr	r3, [pc, #552]	; (800e18c <etharp_query+0x294>)
 800df64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df66:	3301      	adds	r3, #1
 800df68:	b29a      	uxth	r2, r3
 800df6a:	4b88      	ldr	r3, [pc, #544]	; (800e18c <etharp_query+0x294>)
 800df6c:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i;
 800df6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df72:	e106      	b.n	800e182 <etharp_query+0x28a>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800df74:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800df78:	4985      	ldr	r1, [pc, #532]	; (800e190 <etharp_query+0x298>)
 800df7a:	4613      	mov	r3, r2
 800df7c:	005b      	lsls	r3, r3, #1
 800df7e:	4413      	add	r3, r2
 800df80:	00db      	lsls	r3, r3, #3
 800df82:	440b      	add	r3, r1
 800df84:	3314      	adds	r3, #20
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d117      	bne.n	800dfbc <etharp_query+0xc4>
    is_new_entry = 1;
 800df8c:	2301      	movs	r3, #1
 800df8e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800df90:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800df94:	497e      	ldr	r1, [pc, #504]	; (800e190 <etharp_query+0x298>)
 800df96:	4613      	mov	r3, r2
 800df98:	005b      	lsls	r3, r3, #1
 800df9a:	4413      	add	r3, r2
 800df9c:	00db      	lsls	r3, r3, #3
 800df9e:	440b      	add	r3, r1
 800dfa0:	3314      	adds	r3, #20
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800dfa6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800dfaa:	4979      	ldr	r1, [pc, #484]	; (800e190 <etharp_query+0x298>)
 800dfac:	4613      	mov	r3, r2
 800dfae:	005b      	lsls	r3, r3, #1
 800dfb0:	4413      	add	r3, r2
 800dfb2:	00db      	lsls	r3, r3, #3
 800dfb4:	440b      	add	r3, r1
 800dfb6:	3308      	adds	r3, #8
 800dfb8:	68fa      	ldr	r2, [r7, #12]
 800dfba:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800dfbc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800dfc0:	4973      	ldr	r1, [pc, #460]	; (800e190 <etharp_query+0x298>)
 800dfc2:	4613      	mov	r3, r2
 800dfc4:	005b      	lsls	r3, r3, #1
 800dfc6:	4413      	add	r3, r2
 800dfc8:	00db      	lsls	r3, r3, #3
 800dfca:	440b      	add	r3, r1
 800dfcc:	3314      	adds	r3, #20
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	2b01      	cmp	r3, #1
 800dfd2:	d012      	beq.n	800dffa <etharp_query+0x102>
 800dfd4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800dfd8:	496d      	ldr	r1, [pc, #436]	; (800e190 <etharp_query+0x298>)
 800dfda:	4613      	mov	r3, r2
 800dfdc:	005b      	lsls	r3, r3, #1
 800dfde:	4413      	add	r3, r2
 800dfe0:	00db      	lsls	r3, r3, #3
 800dfe2:	440b      	add	r3, r1
 800dfe4:	3314      	adds	r3, #20
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	2b01      	cmp	r3, #1
 800dfea:	d806      	bhi.n	800dffa <etharp_query+0x102>
 800dfec:	4b69      	ldr	r3, [pc, #420]	; (800e194 <etharp_query+0x29c>)
 800dfee:	f240 32c7 	movw	r2, #967	; 0x3c7
 800dff2:	4969      	ldr	r1, [pc, #420]	; (800e198 <etharp_query+0x2a0>)
 800dff4:	4869      	ldr	r0, [pc, #420]	; (800e19c <etharp_query+0x2a4>)
 800dff6:	f004 fae3 	bl	80125c0 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800dffa:	6a3b      	ldr	r3, [r7, #32]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d102      	bne.n	800e006 <etharp_query+0x10e>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d10c      	bne.n	800e020 <etharp_query+0x128>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e006:	68b9      	ldr	r1, [r7, #8]
 800e008:	68f8      	ldr	r0, [r7, #12]
 800e00a:	f000 f98b 	bl	800e324 <etharp_request>
 800e00e:	4603      	mov	r3, r0
 800e010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d102      	bne.n	800e020 <etharp_query+0x128>
      return result;
 800e01a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e01e:	e0b0      	b.n	800e182 <etharp_query+0x28a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d106      	bne.n	800e034 <etharp_query+0x13c>
 800e026:	4b5b      	ldr	r3, [pc, #364]	; (800e194 <etharp_query+0x29c>)
 800e028:	f240 32db 	movw	r2, #987	; 0x3db
 800e02c:	495c      	ldr	r1, [pc, #368]	; (800e1a0 <etharp_query+0x2a8>)
 800e02e:	485b      	ldr	r0, [pc, #364]	; (800e19c <etharp_query+0x2a4>)
 800e030:	f004 fac6 	bl	80125c0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e034:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e038:	4955      	ldr	r1, [pc, #340]	; (800e190 <etharp_query+0x298>)
 800e03a:	4613      	mov	r3, r2
 800e03c:	005b      	lsls	r3, r3, #1
 800e03e:	4413      	add	r3, r2
 800e040:	00db      	lsls	r3, r3, #3
 800e042:	440b      	add	r3, r1
 800e044:	3314      	adds	r3, #20
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d918      	bls.n	800e07e <etharp_query+0x186>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800e04c:	7cfa      	ldrb	r2, [r7, #19]
 800e04e:	4b55      	ldr	r3, [pc, #340]	; (800e1a4 <etharp_query+0x2ac>)
 800e050:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e052:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e056:	4613      	mov	r3, r2
 800e058:	005b      	lsls	r3, r3, #1
 800e05a:	4413      	add	r3, r2
 800e05c:	00db      	lsls	r3, r3, #3
 800e05e:	3308      	adds	r3, #8
 800e060:	4a4b      	ldr	r2, [pc, #300]	; (800e190 <etharp_query+0x298>)
 800e062:	4413      	add	r3, r2
 800e064:	3304      	adds	r3, #4
 800e066:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e06a:	9200      	str	r2, [sp, #0]
 800e06c:	697a      	ldr	r2, [r7, #20]
 800e06e:	6879      	ldr	r1, [r7, #4]
 800e070:	68f8      	ldr	r0, [r7, #12]
 800e072:	f001 fd19 	bl	800faa8 <ethernet_output>
 800e076:	4603      	mov	r3, r0
 800e078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e07c:	e07f      	b.n	800e17e <etharp_query+0x286>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e07e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e082:	4943      	ldr	r1, [pc, #268]	; (800e190 <etharp_query+0x298>)
 800e084:	4613      	mov	r3, r2
 800e086:	005b      	lsls	r3, r3, #1
 800e088:	4413      	add	r3, r2
 800e08a:	00db      	lsls	r3, r3, #3
 800e08c:	440b      	add	r3, r1
 800e08e:	3314      	adds	r3, #20
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	2b01      	cmp	r3, #1
 800e094:	d173      	bne.n	800e17e <etharp_query+0x286>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e096:	2300      	movs	r3, #0
 800e098:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e09e:	e01a      	b.n	800e0d6 <etharp_query+0x1de>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	895a      	ldrh	r2, [r3, #10]
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	891b      	ldrh	r3, [r3, #8]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d10a      	bne.n	800e0c2 <etharp_query+0x1ca>
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d006      	beq.n	800e0c2 <etharp_query+0x1ca>
 800e0b4:	4b37      	ldr	r3, [pc, #220]	; (800e194 <etharp_query+0x29c>)
 800e0b6:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800e0ba:	493b      	ldr	r1, [pc, #236]	; (800e1a8 <etharp_query+0x2b0>)
 800e0bc:	4837      	ldr	r0, [pc, #220]	; (800e19c <etharp_query+0x2a4>)
 800e0be:	f004 fa7f 	bl	80125c0 <iprintf>
      if (p->type != PBUF_ROM) {
 800e0c2:	69fb      	ldr	r3, [r7, #28]
 800e0c4:	7b1b      	ldrb	r3, [r3, #12]
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	d002      	beq.n	800e0d0 <etharp_query+0x1d8>
        copy_needed = 1;
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	61bb      	str	r3, [r7, #24]
        break;
 800e0ce:	e005      	b.n	800e0dc <etharp_query+0x1e4>
      }
      p = p->next;
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d1e1      	bne.n	800e0a0 <etharp_query+0x1a8>
    }
    if (copy_needed) {
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d017      	beq.n	800e112 <etharp_query+0x21a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	891b      	ldrh	r3, [r3, #8]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	2002      	movs	r0, #2
 800e0ec:	f7f9 f9a6 	bl	800743c <pbuf_alloc>
 800e0f0:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800e0f2:	69fb      	ldr	r3, [r7, #28]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d011      	beq.n	800e11c <etharp_query+0x224>
        if (pbuf_copy(p, q) != ERR_OK) {
 800e0f8:	6879      	ldr	r1, [r7, #4]
 800e0fa:	69f8      	ldr	r0, [r7, #28]
 800e0fc:	f7f9 fe48 	bl	8007d90 <pbuf_copy>
 800e100:	4603      	mov	r3, r0
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00a      	beq.n	800e11c <etharp_query+0x224>
          pbuf_free(p);
 800e106:	69f8      	ldr	r0, [r7, #28]
 800e108:	f7f9 fd10 	bl	8007b2c <pbuf_free>
          p = NULL;
 800e10c:	2300      	movs	r3, #0
 800e10e:	61fb      	str	r3, [r7, #28]
 800e110:	e004      	b.n	800e11c <etharp_query+0x224>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e116:	69f8      	ldr	r0, [r7, #28]
 800e118:	f7f9 fdb2 	bl	8007c80 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d024      	beq.n	800e16c <etharp_query+0x274>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e122:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e126:	491a      	ldr	r1, [pc, #104]	; (800e190 <etharp_query+0x298>)
 800e128:	4613      	mov	r3, r2
 800e12a:	005b      	lsls	r3, r3, #1
 800e12c:	4413      	add	r3, r2
 800e12e:	00db      	lsls	r3, r3, #3
 800e130:	440b      	add	r3, r1
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d00b      	beq.n	800e150 <etharp_query+0x258>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800e138:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e13c:	4914      	ldr	r1, [pc, #80]	; (800e190 <etharp_query+0x298>)
 800e13e:	4613      	mov	r3, r2
 800e140:	005b      	lsls	r3, r3, #1
 800e142:	4413      	add	r3, r2
 800e144:	00db      	lsls	r3, r3, #3
 800e146:	440b      	add	r3, r1
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7f9 fcee 	bl	8007b2c <pbuf_free>
      }
      arp_table[i].q = p;
 800e150:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e154:	490e      	ldr	r1, [pc, #56]	; (800e190 <etharp_query+0x298>)
 800e156:	4613      	mov	r3, r2
 800e158:	005b      	lsls	r3, r3, #1
 800e15a:	4413      	add	r3, r2
 800e15c:	00db      	lsls	r3, r3, #3
 800e15e:	440b      	add	r3, r1
 800e160:	69fa      	ldr	r2, [r7, #28]
 800e162:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e164:	2300      	movs	r3, #0
 800e166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e16a:	e008      	b.n	800e17e <etharp_query+0x286>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 800e16c:	4b07      	ldr	r3, [pc, #28]	; (800e18c <etharp_query+0x294>)
 800e16e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e170:	3301      	adds	r3, #1
 800e172:	b29a      	uxth	r2, r3
 800e174:	4b05      	ldr	r3, [pc, #20]	; (800e18c <etharp_query+0x294>)
 800e176:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e178:	23ff      	movs	r3, #255	; 0xff
 800e17a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e17e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e182:	4618      	mov	r0, r3
 800e184:	3728      	adds	r7, #40	; 0x28
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	20006e84 	.word	0x20006e84
 800e190:	20006fbc 	.word	0x20006fbc
 800e194:	080178b8 	.word	0x080178b8
 800e198:	08017a64 	.word	0x08017a64
 800e19c:	08017930 	.word	0x08017930
 800e1a0:	08017a58 	.word	0x08017a58
 800e1a4:	200070ac 	.word	0x200070ac
 800e1a8:	08017a8c 	.word	0x08017a8c

0800e1ac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b08a      	sub	sp, #40	; 0x28
 800e1b0:	af02      	add	r7, sp, #8
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	607a      	str	r2, [r7, #4]
 800e1b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d106      	bne.n	800e1d2 <etharp_raw+0x26>
 800e1c4:	4b40      	ldr	r3, [pc, #256]	; (800e2c8 <etharp_raw+0x11c>)
 800e1c6:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800e1ca:	4940      	ldr	r1, [pc, #256]	; (800e2cc <etharp_raw+0x120>)
 800e1cc:	4840      	ldr	r0, [pc, #256]	; (800e2d0 <etharp_raw+0x124>)
 800e1ce:	f004 f9f7 	bl	80125c0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	211c      	movs	r1, #28
 800e1d6:	2002      	movs	r0, #2
 800e1d8:	f7f9 f930 	bl	800743c <pbuf_alloc>
 800e1dc:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e1de:	69bb      	ldr	r3, [r7, #24]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d108      	bne.n	800e1f6 <etharp_raw+0x4a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 800e1e4:	4b3b      	ldr	r3, [pc, #236]	; (800e2d4 <etharp_raw+0x128>)
 800e1e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	b29a      	uxth	r2, r3
 800e1ec:	4b39      	ldr	r3, [pc, #228]	; (800e2d4 <etharp_raw+0x128>)
 800e1ee:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 800e1f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1f4:	e063      	b.n	800e2be <etharp_raw+0x112>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	895b      	ldrh	r3, [r3, #10]
 800e1fa:	2b1b      	cmp	r3, #27
 800e1fc:	d806      	bhi.n	800e20c <etharp_raw+0x60>
 800e1fe:	4b32      	ldr	r3, [pc, #200]	; (800e2c8 <etharp_raw+0x11c>)
 800e200:	f240 4263 	movw	r2, #1123	; 0x463
 800e204:	4934      	ldr	r1, [pc, #208]	; (800e2d8 <etharp_raw+0x12c>)
 800e206:	4832      	ldr	r0, [pc, #200]	; (800e2d0 <etharp_raw+0x124>)
 800e208:	f004 f9da 	bl	80125c0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e20c:	69bb      	ldr	r3, [r7, #24]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e212:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e214:	4618      	mov	r0, r3
 800e216:	f7f8 fab8 	bl	800678a <lwip_htons>
 800e21a:	4603      	mov	r3, r0
 800e21c:	461a      	mov	r2, r3
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e228:	2b06      	cmp	r3, #6
 800e22a:	d006      	beq.n	800e23a <etharp_raw+0x8e>
 800e22c:	4b26      	ldr	r3, [pc, #152]	; (800e2c8 <etharp_raw+0x11c>)
 800e22e:	f240 426a 	movw	r2, #1130	; 0x46a
 800e232:	492a      	ldr	r1, [pc, #168]	; (800e2dc <etharp_raw+0x130>)
 800e234:	4826      	ldr	r0, [pc, #152]	; (800e2d0 <etharp_raw+0x124>)
 800e236:	f004 f9c3 	bl	80125c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	3308      	adds	r3, #8
 800e23e:	2206      	movs	r2, #6
 800e240:	6839      	ldr	r1, [r7, #0]
 800e242:	4618      	mov	r0, r3
 800e244:	f003 fb38 	bl	80118b8 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	3312      	adds	r3, #18
 800e24c:	2206      	movs	r2, #6
 800e24e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e250:	4618      	mov	r0, r3
 800e252:	f003 fb31 	bl	80118b8 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	330e      	adds	r3, #14
 800e25a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e25c:	6812      	ldr	r2, [r2, #0]
 800e25e:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	3318      	adds	r3, #24
 800e264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e266:	6812      	ldr	r2, [r2, #0]
 800e268:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	2200      	movs	r2, #0
 800e26e:	701a      	strb	r2, [r3, #0]
 800e270:	2200      	movs	r2, #0
 800e272:	f042 0201 	orr.w	r2, r2, #1
 800e276:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	2200      	movs	r2, #0
 800e27c:	f042 0208 	orr.w	r2, r2, #8
 800e280:	709a      	strb	r2, [r3, #2]
 800e282:	2200      	movs	r2, #0
 800e284:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	2206      	movs	r2, #6
 800e28a:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	2204      	movs	r2, #4
 800e290:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e292:	f640 0306 	movw	r3, #2054	; 0x806
 800e296:	9300      	str	r3, [sp, #0]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	68ba      	ldr	r2, [r7, #8]
 800e29c:	69b9      	ldr	r1, [r7, #24]
 800e29e:	68f8      	ldr	r0, [r7, #12]
 800e2a0:	f001 fc02 	bl	800faa8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 800e2a4:	4b0b      	ldr	r3, [pc, #44]	; (800e2d4 <etharp_raw+0x128>)
 800e2a6:	8b1b      	ldrh	r3, [r3, #24]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	4b09      	ldr	r3, [pc, #36]	; (800e2d4 <etharp_raw+0x128>)
 800e2ae:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 800e2b0:	69b8      	ldr	r0, [r7, #24]
 800e2b2:	f7f9 fc3b 	bl	8007b2c <pbuf_free>
  p = NULL;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e2ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3720      	adds	r7, #32
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	080178b8 	.word	0x080178b8
 800e2cc:	08017a08 	.word	0x08017a08
 800e2d0:	08017930 	.word	0x08017930
 800e2d4:	20006e84 	.word	0x20006e84
 800e2d8:	08017aa8 	.word	0x08017aa8
 800e2dc:	08017adc 	.word	0x08017adc

0800e2e0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b088      	sub	sp, #32
 800e2e4:	af04      	add	r7, sp, #16
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	9203      	str	r2, [sp, #12]
 800e300:	68ba      	ldr	r2, [r7, #8]
 800e302:	9202      	str	r2, [sp, #8]
 800e304:	4a06      	ldr	r2, [pc, #24]	; (800e320 <etharp_request_dst+0x40>)
 800e306:	9201      	str	r2, [sp, #4]
 800e308:	9300      	str	r3, [sp, #0]
 800e30a:	4603      	mov	r3, r0
 800e30c:	687a      	ldr	r2, [r7, #4]
 800e30e:	68f8      	ldr	r0, [r7, #12]
 800e310:	f7ff ff4c 	bl	800e1ac <etharp_raw>
 800e314:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e316:	4618      	mov	r0, r3
 800e318:	3710      	adds	r7, #16
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop
 800e320:	0801804c 	.word	0x0801804c

0800e324 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e32e:	4a05      	ldr	r2, [pc, #20]	; (800e344 <etharp_request+0x20>)
 800e330:	6839      	ldr	r1, [r7, #0]
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f7ff ffd4 	bl	800e2e0 <etharp_request_dst>
 800e338:	4603      	mov	r3, r0
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3708      	adds	r7, #8
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	08018044 	.word	0x08018044

0800e348 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b08e      	sub	sp, #56	; 0x38
 800e34c:	af04      	add	r7, sp, #16
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
 800e352:	4b93      	ldr	r3, [pc, #588]	; (800e5a0 <icmp_input+0x258>)
 800e354:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e358:	3301      	adds	r3, #1
 800e35a:	b29a      	uxth	r2, r3
 800e35c:	4b90      	ldr	r3, [pc, #576]	; (800e5a0 <icmp_input+0x258>)
 800e35e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e362:	4b90      	ldr	r3, [pc, #576]	; (800e5a4 <icmp_input+0x25c>)
 800e364:	689b      	ldr	r3, [r3, #8]
 800e366:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800e368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	f003 030f 	and.w	r3, r3, #15
 800e372:	b29b      	uxth	r3, r3
 800e374:	009b      	lsls	r3, r3, #2
 800e376:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e378:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e37a:	2b13      	cmp	r3, #19
 800e37c:	f240 80ea 	bls.w	800e554 <icmp_input+0x20c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	895b      	ldrh	r3, [r3, #10]
 800e384:	2b03      	cmp	r3, #3
 800e386:	f240 80e7 	bls.w	800e558 <icmp_input+0x210>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e394:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f000 80d4 	beq.w	800e546 <icmp_input+0x1fe>
 800e39e:	2b08      	cmp	r3, #8
 800e3a0:	f040 80c0 	bne.w	800e524 <icmp_input+0x1dc>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800e3a4:	4b80      	ldr	r3, [pc, #512]	; (800e5a8 <icmp_input+0x260>)
 800e3a6:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e3a8:	4b7e      	ldr	r3, [pc, #504]	; (800e5a4 <icmp_input+0x25c>)
 800e3aa:	695b      	ldr	r3, [r3, #20]
 800e3ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3b0:	2be0      	cmp	r3, #224	; 0xe0
 800e3b2:	f000 80e0 	beq.w	800e576 <icmp_input+0x22e>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e3b6:	4b7b      	ldr	r3, [pc, #492]	; (800e5a4 <icmp_input+0x25c>)
 800e3b8:	695b      	ldr	r3, [r3, #20]
 800e3ba:	4a7a      	ldr	r2, [pc, #488]	; (800e5a4 <icmp_input+0x25c>)
 800e3bc:	6812      	ldr	r2, [r2, #0]
 800e3be:	4611      	mov	r1, r2
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f000 fc73 	bl	800ecac <ip4_addr_isbroadcast_u32>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	f040 80d6 	bne.w	800e57a <icmp_input+0x232>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	891b      	ldrh	r3, [r3, #8]
 800e3d2:	2b07      	cmp	r3, #7
 800e3d4:	f240 80c2 	bls.w	800e55c <icmp_input+0x214>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800e3d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3da:	330e      	adds	r3, #14
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	b21b      	sxth	r3, r3
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f7f9 fb7e 	bl	8007ae4 <pbuf_header>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d046      	beq.n	800e47c <icmp_input+0x134>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	891a      	ldrh	r2, [r3, #8]
 800e3f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3f4:	4413      	add	r3, r2
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	2002      	movs	r0, #2
 800e3fe:	f7f9 f81d 	bl	800743c <pbuf_alloc>
 800e402:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800e404:	69bb      	ldr	r3, [r7, #24]
 800e406:	2b00      	cmp	r3, #0
 800e408:	f000 80b9 	beq.w	800e57e <icmp_input+0x236>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e40c:	69bb      	ldr	r3, [r7, #24]
 800e40e:	895b      	ldrh	r3, [r3, #10]
 800e410:	461a      	mov	r2, r3
 800e412:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e414:	3308      	adds	r3, #8
 800e416:	429a      	cmp	r2, r3
 800e418:	d203      	bcs.n	800e422 <icmp_input+0xda>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800e41a:	69b8      	ldr	r0, [r7, #24]
 800e41c:	f7f9 fb86 	bl	8007b2c <pbuf_free>
        goto icmperr;
 800e420:	e0ae      	b.n	800e580 <icmp_input+0x238>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800e422:	69bb      	ldr	r3, [r7, #24]
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e42a:	4618      	mov	r0, r3
 800e42c:	f003 fa44 	bl	80118b8 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800e430:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e432:	425b      	negs	r3, r3
 800e434:	b29b      	uxth	r3, r3
 800e436:	b21b      	sxth	r3, r3
 800e438:	4619      	mov	r1, r3
 800e43a:	69b8      	ldr	r0, [r7, #24]
 800e43c:	f7f9 fb52 	bl	8007ae4 <pbuf_header>
 800e440:	4603      	mov	r3, r0
 800e442:	2b00      	cmp	r3, #0
 800e444:	d009      	beq.n	800e45a <icmp_input+0x112>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e446:	4b59      	ldr	r3, [pc, #356]	; (800e5ac <icmp_input+0x264>)
 800e448:	22af      	movs	r2, #175	; 0xaf
 800e44a:	4959      	ldr	r1, [pc, #356]	; (800e5b0 <icmp_input+0x268>)
 800e44c:	4859      	ldr	r0, [pc, #356]	; (800e5b4 <icmp_input+0x26c>)
 800e44e:	f004 f8b7 	bl	80125c0 <iprintf>
        pbuf_free(r);
 800e452:	69b8      	ldr	r0, [r7, #24]
 800e454:	f7f9 fb6a 	bl	8007b2c <pbuf_free>
        goto icmperr;
 800e458:	e092      	b.n	800e580 <icmp_input+0x238>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800e45a:	6879      	ldr	r1, [r7, #4]
 800e45c:	69b8      	ldr	r0, [r7, #24]
 800e45e:	f7f9 fc97 	bl	8007d90 <pbuf_copy>
 800e462:	4603      	mov	r3, r0
 800e464:	2b00      	cmp	r3, #0
 800e466:	d003      	beq.n	800e470 <icmp_input+0x128>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800e468:	69b8      	ldr	r0, [r7, #24]
 800e46a:	f7f9 fb5f 	bl	8007b2c <pbuf_free>
        goto icmperr;
 800e46e:	e087      	b.n	800e580 <icmp_input+0x238>
      }
      /* free the original p */
      pbuf_free(p);
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f7f9 fb5b 	bl	8007b2c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800e476:	69bb      	ldr	r3, [r7, #24]
 800e478:	607b      	str	r3, [r7, #4]
 800e47a:	e015      	b.n	800e4a8 <icmp_input+0x160>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800e47c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e47e:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800e482:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800e486:	33f2      	adds	r3, #242	; 0xf2
 800e488:	b29b      	uxth	r3, r3
 800e48a:	b21b      	sxth	r3, r3
 800e48c:	4619      	mov	r1, r3
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f7f9 fb28 	bl	8007ae4 <pbuf_header>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d006      	beq.n	800e4a8 <icmp_input+0x160>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e49a:	4b44      	ldr	r3, [pc, #272]	; (800e5ac <icmp_input+0x264>)
 800e49c:	22c0      	movs	r2, #192	; 0xc0
 800e49e:	4946      	ldr	r1, [pc, #280]	; (800e5b8 <icmp_input+0x270>)
 800e4a0:	4844      	ldr	r0, [pc, #272]	; (800e5b4 <icmp_input+0x26c>)
 800e4a2:	f004 f88d 	bl	80125c0 <iprintf>
        goto icmperr;
 800e4a6:	e06b      	b.n	800e580 <icmp_input+0x238>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800e4ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f7f9 fb15 	bl	8007ae4 <pbuf_header>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d144      	bne.n	800e54a <icmp_input+0x202>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800e4c6:	69fb      	ldr	r3, [r7, #28]
 800e4c8:	681a      	ldr	r2, [r3, #0]
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e4ce:	4b35      	ldr	r3, [pc, #212]	; (800e5a4 <icmp_input+0x25c>)
 800e4d0:	691a      	ldr	r2, [r3, #16]
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	709a      	strb	r2, [r3, #2]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	22ff      	movs	r2, #255	; 0xff
 800e4ea:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	729a      	strb	r2, [r3, #10]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	72da      	strb	r2, [r3, #11]
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
      }
#endif /* CHECKSUM_GEN_IP */

      ICMP_STATS_INC(icmp.xmit);
 800e4f6:	4b2a      	ldr	r3, [pc, #168]	; (800e5a0 <icmp_input+0x258>)
 800e4f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	b29a      	uxth	r2, r3
 800e500:	4b27      	ldr	r3, [pc, #156]	; (800e5a0 <icmp_input+0x258>)
 800e502:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	9302      	str	r3, [sp, #8]
 800e50a:	2301      	movs	r3, #1
 800e50c:	9301      	str	r3, [sp, #4]
 800e50e:	2300      	movs	r3, #0
 800e510:	9300      	str	r3, [sp, #0]
 800e512:	23ff      	movs	r3, #255	; 0xff
 800e514:	2200      	movs	r2, #0
 800e516:	69f9      	ldr	r1, [r7, #28]
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 fae3 	bl	800eae4 <ip4_output_if>
 800e51e:	4603      	mov	r3, r0
 800e520:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800e522:	e012      	b.n	800e54a <icmp_input+0x202>
    } else if (type == ICMP_AMR) {
      MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
 800e524:	4b1e      	ldr	r3, [pc, #120]	; (800e5a0 <icmp_input+0x258>)
 800e526:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800e52a:	3301      	adds	r3, #1
 800e52c:	b29a      	uxth	r2, r3
 800e52e:	4b1c      	ldr	r3, [pc, #112]	; (800e5a0 <icmp_input+0x258>)
 800e530:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
    ICMP_STATS_INC(icmp.drop);
 800e534:	4b1a      	ldr	r3, [pc, #104]	; (800e5a0 <icmp_input+0x258>)
 800e536:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e53a:	3301      	adds	r3, #1
 800e53c:	b29a      	uxth	r2, r3
 800e53e:	4b18      	ldr	r3, [pc, #96]	; (800e5a0 <icmp_input+0x258>)
 800e540:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 800e544:	e002      	b.n	800e54c <icmp_input+0x204>
    break;
 800e546:	bf00      	nop
 800e548:	e000      	b.n	800e54c <icmp_input+0x204>
    break;
 800e54a:	bf00      	nop
  }
  pbuf_free(p);
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f7f9 faed 	bl	8007b2c <pbuf_free>
  return;
 800e552:	e021      	b.n	800e598 <icmp_input+0x250>
    goto lenerr;
 800e554:	bf00      	nop
 800e556:	e002      	b.n	800e55e <icmp_input+0x216>
    goto lenerr;
 800e558:	bf00      	nop
 800e55a:	e000      	b.n	800e55e <icmp_input+0x216>
      goto lenerr;
 800e55c:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f7f9 fae4 	bl	8007b2c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 800e564:	4b0e      	ldr	r3, [pc, #56]	; (800e5a0 <icmp_input+0x258>)
 800e566:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e56a:	3301      	adds	r3, #1
 800e56c:	b29a      	uxth	r2, r3
 800e56e:	4b0c      	ldr	r3, [pc, #48]	; (800e5a0 <icmp_input+0x258>)
 800e570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e574:	e010      	b.n	800e598 <icmp_input+0x250>
      goto icmperr;
 800e576:	bf00      	nop
 800e578:	e002      	b.n	800e580 <icmp_input+0x238>
      goto icmperr;
 800e57a:	bf00      	nop
 800e57c:	e000      	b.n	800e580 <icmp_input+0x238>
        goto icmperr;
 800e57e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7f9 fad3 	bl	8007b2c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 800e586:	4b06      	ldr	r3, [pc, #24]	; (800e5a0 <icmp_input+0x258>)
 800e588:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800e58c:	3301      	adds	r3, #1
 800e58e:	b29a      	uxth	r2, r3
 800e590:	4b03      	ldr	r3, [pc, #12]	; (800e5a0 <icmp_input+0x258>)
 800e592:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e596:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e598:	3728      	adds	r7, #40	; 0x28
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	20006e84 	.word	0x20006e84
 800e5a4:	200038bc 	.word	0x200038bc
 800e5a8:	200038d0 	.word	0x200038d0
 800e5ac:	08017b20 	.word	0x08017b20
 800e5b0:	08017b58 	.word	0x08017b58
 800e5b4:	08017b90 	.word	0x08017b90
 800e5b8:	08017bb8 	.word	0x08017bb8

0800e5bc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e5c8:	78fb      	ldrb	r3, [r7, #3]
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	2103      	movs	r1, #3
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 f814 	bl	800e5fc <icmp_send_response>
}
 800e5d4:	bf00      	nop
 800e5d6:	3708      	adds	r7, #8
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e5e8:	78fb      	ldrb	r3, [r7, #3]
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	210b      	movs	r1, #11
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f000 f804 	bl	800e5fc <icmp_send_response>
}
 800e5f4:	bf00      	nop
 800e5f6:	3708      	adds	r7, #8
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b08c      	sub	sp, #48	; 0x30
 800e600:	af04      	add	r7, sp, #16
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	460b      	mov	r3, r1
 800e606:	70fb      	strb	r3, [r7, #3]
 800e608:	4613      	mov	r3, r2
 800e60a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e60c:	2200      	movs	r2, #0
 800e60e:	2124      	movs	r1, #36	; 0x24
 800e610:	2001      	movs	r0, #1
 800e612:	f7f8 ff13 	bl	800743c <pbuf_alloc>
 800e616:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d054      	beq.n	800e6c8 <icmp_send_response+0xcc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e61e:	69fb      	ldr	r3, [r7, #28]
 800e620:	895b      	ldrh	r3, [r3, #10]
 800e622:	2b23      	cmp	r3, #35	; 0x23
 800e624:	d806      	bhi.n	800e634 <icmp_send_response+0x38>
 800e626:	4b2a      	ldr	r3, [pc, #168]	; (800e6d0 <icmp_send_response+0xd4>)
 800e628:	f240 1261 	movw	r2, #353	; 0x161
 800e62c:	4929      	ldr	r1, [pc, #164]	; (800e6d4 <icmp_send_response+0xd8>)
 800e62e:	482a      	ldr	r0, [pc, #168]	; (800e6d8 <icmp_send_response+0xdc>)
 800e630:	f003 ffc6 	bl	80125c0 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e63a:	69fb      	ldr	r3, [r7, #28]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	78fa      	ldrb	r2, [r7, #3]
 800e644:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	78ba      	ldrb	r2, [r7, #2]
 800e64a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	2200      	movs	r2, #0
 800e650:	711a      	strb	r2, [r3, #4]
 800e652:	2200      	movs	r2, #0
 800e654:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	2200      	movs	r2, #0
 800e65a:	719a      	strb	r2, [r3, #6]
 800e65c:	2200      	movs	r2, #0
 800e65e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	f103 0008 	add.w	r0, r3, #8
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	221c      	movs	r2, #28
 800e66e:	4619      	mov	r1, r3
 800e670:	f003 f922 	bl	80118b8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	68db      	ldr	r3, [r3, #12]
 800e678:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e67a:	f107 030c 	add.w	r3, r7, #12
 800e67e:	4618      	mov	r0, r3
 800e680:	f000 f82e 	bl	800e6e0 <ip4_route>
 800e684:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d019      	beq.n	800e6c0 <icmp_send_response+0xc4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	2200      	movs	r2, #0
 800e690:	709a      	strb	r2, [r3, #2]
 800e692:	2200      	movs	r2, #0
 800e694:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 800e696:	4b11      	ldr	r3, [pc, #68]	; (800e6dc <icmp_send_response+0xe0>)
 800e698:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e69c:	3301      	adds	r3, #1
 800e69e:	b29a      	uxth	r2, r3
 800e6a0:	4b0e      	ldr	r3, [pc, #56]	; (800e6dc <icmp_send_response+0xe0>)
 800e6a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e6a6:	f107 020c 	add.w	r2, r7, #12
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	9302      	str	r3, [sp, #8]
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	9301      	str	r3, [sp, #4]
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	9300      	str	r3, [sp, #0]
 800e6b6:	23ff      	movs	r3, #255	; 0xff
 800e6b8:	2100      	movs	r1, #0
 800e6ba:	69f8      	ldr	r0, [r7, #28]
 800e6bc:	f000 fa12 	bl	800eae4 <ip4_output_if>
  }
  pbuf_free(q);
 800e6c0:	69f8      	ldr	r0, [r7, #28]
 800e6c2:	f7f9 fa33 	bl	8007b2c <pbuf_free>
 800e6c6:	e000      	b.n	800e6ca <icmp_send_response+0xce>
    return;
 800e6c8:	bf00      	nop
}
 800e6ca:	3720      	adds	r7, #32
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	08017b20 	.word	0x08017b20
 800e6d4:	08017bec 	.word	0x08017bec
 800e6d8:	08017b90 	.word	0x08017b90
 800e6dc:	20006e84 	.word	0x20006e84

0800e6e0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b085      	sub	sp, #20
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800e6e8:	4b34      	ldr	r3, [pc, #208]	; (800e7bc <ip4_route+0xdc>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	60fb      	str	r3, [r7, #12]
 800e6ee:	e036      	b.n	800e75e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e6f6:	f003 0301 	and.w	r3, r3, #1
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d02b      	beq.n	800e758 <ip4_route+0x78>
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e706:	089b      	lsrs	r3, r3, #2
 800e708:	f003 0301 	and.w	r3, r3, #1
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d022      	beq.n	800e758 <ip4_route+0x78>
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	3304      	adds	r3, #4
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d01d      	beq.n	800e758 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681a      	ldr	r2, [r3, #0]
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	3304      	adds	r3, #4
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	405a      	eors	r2, r3
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	3308      	adds	r3, #8
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	4013      	ands	r3, r2
 800e730:	2b00      	cmp	r3, #0
 800e732:	d101      	bne.n	800e738 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	e03b      	b.n	800e7b0 <ip4_route+0xd0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e73e:	f003 0302 	and.w	r3, r3, #2
 800e742:	2b00      	cmp	r3, #0
 800e744:	d108      	bne.n	800e758 <ip4_route+0x78>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681a      	ldr	r2, [r3, #0]
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	330c      	adds	r3, #12
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	429a      	cmp	r2, r3
 800e752:	d101      	bne.n	800e758 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	e02b      	b.n	800e7b0 <ip4_route+0xd0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	60fb      	str	r3, [r7, #12]
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d1c5      	bne.n	800e6f0 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e764:	4b16      	ldr	r3, [pc, #88]	; (800e7c0 <ip4_route+0xe0>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d015      	beq.n	800e798 <ip4_route+0xb8>
 800e76c:	4b14      	ldr	r3, [pc, #80]	; (800e7c0 <ip4_route+0xe0>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e774:	f003 0301 	and.w	r3, r3, #1
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d00d      	beq.n	800e798 <ip4_route+0xb8>
 800e77c:	4b10      	ldr	r3, [pc, #64]	; (800e7c0 <ip4_route+0xe0>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e784:	f003 0304 	and.w	r3, r3, #4
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d005      	beq.n	800e798 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800e78c:	4b0c      	ldr	r3, [pc, #48]	; (800e7c0 <ip4_route+0xe0>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	3304      	adds	r3, #4
 800e792:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e794:	2b00      	cmp	r3, #0
 800e796:	d109      	bne.n	800e7ac <ip4_route+0xcc>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 800e798:	4b0a      	ldr	r3, [pc, #40]	; (800e7c4 <ip4_route+0xe4>)
 800e79a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e79e:	3301      	adds	r3, #1
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	4b08      	ldr	r3, [pc, #32]	; (800e7c4 <ip4_route+0xe4>)
 800e7a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	e001      	b.n	800e7b0 <ip4_route+0xd0>
  }

  return netif_default;
 800e7ac:	4b04      	ldr	r3, [pc, #16]	; (800e7c0 <ip4_route+0xe0>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3714      	adds	r7, #20
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bc80      	pop	{r7}
 800e7b8:	4770      	bx	lr
 800e7ba:	bf00      	nop
 800e7bc:	20006e78 	.word	0x20006e78
 800e7c0:	20006e7c 	.word	0x20006e7c
 800e7c4:	20006e84 	.word	0x20006e84

0800e7c8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b086      	sub	sp, #24
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
 800e7d2:	4b97      	ldr	r3, [pc, #604]	; (800ea30 <ip4_input+0x268>)
 800e7d4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e7d8:	3301      	adds	r3, #1
 800e7da:	b29a      	uxth	r2, r3
 800e7dc:	4b94      	ldr	r3, [pc, #592]	; (800ea30 <ip4_input+0x268>)
 800e7de:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	781b      	ldrb	r3, [r3, #0]
 800e7ec:	091b      	lsrs	r3, r3, #4
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	2b04      	cmp	r3, #4
 800e7f2:	d014      	beq.n	800e81e <ip4_input+0x56>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f7f9 f999 	bl	8007b2c <pbuf_free>
    IP_STATS_INC(ip.err);
 800e7fa:	4b8d      	ldr	r3, [pc, #564]	; (800ea30 <ip4_input+0x268>)
 800e7fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e800:	3301      	adds	r3, #1
 800e802:	b29a      	uxth	r2, r3
 800e804:	4b8a      	ldr	r3, [pc, #552]	; (800ea30 <ip4_input+0x268>)
 800e806:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 800e80a:	4b89      	ldr	r3, [pc, #548]	; (800ea30 <ip4_input+0x268>)
 800e80c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e810:	3301      	adds	r3, #1
 800e812:	b29a      	uxth	r2, r3
 800e814:	4b86      	ldr	r3, [pc, #536]	; (800ea30 <ip4_input+0x268>)
 800e816:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e81a:	2300      	movs	r3, #0
 800e81c:	e15a      	b.n	800ead4 <ip4_input+0x30c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	b29b      	uxth	r3, r3
 800e824:	f003 030f 	and.w	r3, r3, #15
 800e828:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800e82a:	897b      	ldrh	r3, [r7, #10]
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	885b      	ldrh	r3, [r3, #2]
 800e834:	b29b      	uxth	r3, r3
 800e836:	4618      	mov	r0, r3
 800e838:	f7f7 ffa7 	bl	800678a <lwip_htons>
 800e83c:	4603      	mov	r3, r0
 800e83e:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	891b      	ldrh	r3, [r3, #8]
 800e844:	893a      	ldrh	r2, [r7, #8]
 800e846:	429a      	cmp	r2, r3
 800e848:	d204      	bcs.n	800e854 <ip4_input+0x8c>
    pbuf_realloc(p, iphdr_len);
 800e84a:	893b      	ldrh	r3, [r7, #8]
 800e84c:	4619      	mov	r1, r3
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f7f8 fff8 	bl	8007844 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	895b      	ldrh	r3, [r3, #10]
 800e858:	897a      	ldrh	r2, [r7, #10]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d807      	bhi.n	800e86e <ip4_input+0xa6>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	891b      	ldrh	r3, [r3, #8]
 800e862:	893a      	ldrh	r2, [r7, #8]
 800e864:	429a      	cmp	r2, r3
 800e866:	d802      	bhi.n	800e86e <ip4_input+0xa6>
 800e868:	897b      	ldrh	r3, [r7, #10]
 800e86a:	2b13      	cmp	r3, #19
 800e86c:	d814      	bhi.n	800e898 <ip4_input+0xd0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f7f9 f95c 	bl	8007b2c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 800e874:	4b6e      	ldr	r3, [pc, #440]	; (800ea30 <ip4_input+0x268>)
 800e876:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e87a:	3301      	adds	r3, #1
 800e87c:	b29a      	uxth	r2, r3
 800e87e:	4b6c      	ldr	r3, [pc, #432]	; (800ea30 <ip4_input+0x268>)
 800e880:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 800e884:	4b6a      	ldr	r3, [pc, #424]	; (800ea30 <ip4_input+0x268>)
 800e886:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e88a:	3301      	adds	r3, #1
 800e88c:	b29a      	uxth	r2, r3
 800e88e:	4b68      	ldr	r3, [pc, #416]	; (800ea30 <ip4_input+0x268>)
 800e890:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e894:	2300      	movs	r3, #0
 800e896:	e11d      	b.n	800ead4 <ip4_input+0x30c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	691b      	ldr	r3, [r3, #16]
 800e89c:	4a65      	ldr	r2, [pc, #404]	; (800ea34 <ip4_input+0x26c>)
 800e89e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	68db      	ldr	r3, [r3, #12]
 800e8a4:	4a63      	ldr	r2, [pc, #396]	; (800ea34 <ip4_input+0x26c>)
 800e8a6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e8a8:	4b62      	ldr	r3, [pc, #392]	; (800ea34 <ip4_input+0x26c>)
 800e8aa:	695b      	ldr	r3, [r3, #20]
 800e8ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e8b0:	2be0      	cmp	r3, #224	; 0xe0
 800e8b2:	d112      	bne.n	800e8da <ip4_input+0x112>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e8ba:	f003 0301 	and.w	r3, r3, #1
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d007      	beq.n	800e8d4 <ip4_input+0x10c>
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	3304      	adds	r3, #4
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d002      	beq.n	800e8d4 <ip4_input+0x10c>
      netif = inp;
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	613b      	str	r3, [r7, #16]
 800e8d2:	e041      	b.n	800e958 <ip4_input+0x190>
    } else {
      netif = NULL;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	613b      	str	r3, [r7, #16]
 800e8d8:	e03e      	b.n	800e958 <ip4_input+0x190>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e8e8:	f003 0301 	and.w	r3, r3, #1
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d014      	beq.n	800e91c <ip4_input+0x154>
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	3304      	adds	r3, #4
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d00f      	beq.n	800e91c <ip4_input+0x154>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e8fc:	4b4d      	ldr	r3, [pc, #308]	; (800ea34 <ip4_input+0x26c>)
 800e8fe:	695a      	ldr	r2, [r3, #20]
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	3304      	adds	r3, #4
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	429a      	cmp	r2, r3
 800e908:	d026      	beq.n	800e958 <ip4_input+0x190>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e90a:	4b4a      	ldr	r3, [pc, #296]	; (800ea34 <ip4_input+0x26c>)
 800e90c:	695b      	ldr	r3, [r3, #20]
 800e90e:	6939      	ldr	r1, [r7, #16]
 800e910:	4618      	mov	r0, r3
 800e912:	f000 f9cb 	bl	800ecac <ip4_addr_isbroadcast_u32>
 800e916:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d11d      	bne.n	800e958 <ip4_input+0x190>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d00d      	beq.n	800e93e <ip4_input+0x176>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800e922:	4b44      	ldr	r3, [pc, #272]	; (800ea34 <ip4_input+0x26c>)
 800e924:	695b      	ldr	r3, [r3, #20]
 800e926:	b2db      	uxtb	r3, r3
 800e928:	2b7f      	cmp	r3, #127	; 0x7f
 800e92a:	d102      	bne.n	800e932 <ip4_input+0x16a>
          netif = NULL;
 800e92c:	2300      	movs	r3, #0
 800e92e:	613b      	str	r3, [r7, #16]
          break;
 800e930:	e012      	b.n	800e958 <ip4_input+0x190>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800e932:	2300      	movs	r3, #0
 800e934:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800e936:	4b40      	ldr	r3, [pc, #256]	; (800ea38 <ip4_input+0x270>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	613b      	str	r3, [r7, #16]
 800e93c:	e002      	b.n	800e944 <ip4_input+0x17c>
      } else {
        netif = netif->next;
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800e944:	693a      	ldr	r2, [r7, #16]
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	429a      	cmp	r2, r3
 800e94a:	d102      	bne.n	800e952 <ip4_input+0x18a>
        netif = netif->next;
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d1c4      	bne.n	800e8e2 <ip4_input+0x11a>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e958:	4b36      	ldr	r3, [pc, #216]	; (800ea34 <ip4_input+0x26c>)
 800e95a:	691b      	ldr	r3, [r3, #16]
 800e95c:	6839      	ldr	r1, [r7, #0]
 800e95e:	4618      	mov	r0, r3
 800e960:	f000 f9a4 	bl	800ecac <ip4_addr_isbroadcast_u32>
 800e964:	4603      	mov	r3, r0
 800e966:	2b00      	cmp	r3, #0
 800e968:	d105      	bne.n	800e976 <ip4_input+0x1ae>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e96a:	4b32      	ldr	r3, [pc, #200]	; (800ea34 <ip4_input+0x26c>)
 800e96c:	691b      	ldr	r3, [r3, #16]
 800e96e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e972:	2be0      	cmp	r3, #224	; 0xe0
 800e974:	d10c      	bne.n	800e990 <ip4_input+0x1c8>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f7f9 f8d8 	bl	8007b2c <pbuf_free>
      IP_STATS_INC(ip.drop);
 800e97c:	4b2c      	ldr	r3, [pc, #176]	; (800ea30 <ip4_input+0x268>)
 800e97e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e982:	3301      	adds	r3, #1
 800e984:	b29a      	uxth	r2, r3
 800e986:	4b2a      	ldr	r3, [pc, #168]	; (800ea30 <ip4_input+0x268>)
 800e988:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e98c:	2300      	movs	r3, #0
 800e98e:	e0a1      	b.n	800ead4 <ip4_input+0x30c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d10c      	bne.n	800e9b0 <ip4_input+0x1e8>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, iphdr, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 800e996:	4b26      	ldr	r3, [pc, #152]	; (800ea30 <ip4_input+0x268>)
 800e998:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e99c:	3301      	adds	r3, #1
 800e99e:	b29a      	uxth	r2, r3
 800e9a0:	4b23      	ldr	r3, [pc, #140]	; (800ea30 <ip4_input+0x268>)
 800e9a2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f7f9 f8c0 	bl	8007b2c <pbuf_free>
    return ERR_OK;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	e091      	b.n	800ead4 <ip4_input+0x30c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	88db      	ldrh	r3, [r3, #6]
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	461a      	mov	r2, r3
 800e9b8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e9bc:	4013      	ands	r3, r2
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d00b      	beq.n	800e9da <ip4_input+0x212>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f000 fcbe 	bl	800f344 <ip4_reass>
 800e9c8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d101      	bne.n	800e9d4 <ip4_input+0x20c>
      return ERR_OK;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	e07f      	b.n	800ead4 <ip4_input+0x30c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e9da:	4a16      	ldr	r2, [pc, #88]	; (800ea34 <ip4_input+0x26c>)
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e9e0:	4a14      	ldr	r2, [pc, #80]	; (800ea34 <ip4_input+0x26c>)
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e9e6:	4a13      	ldr	r2, [pc, #76]	; (800ea34 <ip4_input+0x26c>)
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	b29b      	uxth	r3, r3
 800e9f2:	f003 030f 	and.w	r3, r3, #15
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	009b      	lsls	r3, r3, #2
 800e9fa:	b29a      	uxth	r2, r3
 800e9fc:	4b0d      	ldr	r3, [pc, #52]	; (800ea34 <ip4_input+0x26c>)
 800e9fe:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800ea00:	897b      	ldrh	r3, [r7, #10]
 800ea02:	425b      	negs	r3, r3
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	b21b      	sxth	r3, r3
 800ea08:	4619      	mov	r1, r3
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f7f9 f86a 	bl	8007ae4 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	7a5b      	ldrb	r3, [r3, #9]
 800ea14:	2b11      	cmp	r3, #17
 800ea16:	d006      	beq.n	800ea26 <ip4_input+0x25e>
 800ea18:	2b11      	cmp	r3, #17
 800ea1a:	dc19      	bgt.n	800ea50 <ip4_input+0x288>
 800ea1c:	2b01      	cmp	r3, #1
 800ea1e:	d012      	beq.n	800ea46 <ip4_input+0x27e>
 800ea20:	2b06      	cmp	r3, #6
 800ea22:	d00b      	beq.n	800ea3c <ip4_input+0x274>
 800ea24:	e014      	b.n	800ea50 <ip4_input+0x288>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800ea26:	6839      	ldr	r1, [r7, #0]
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f7fe f981 	bl	800cd30 <udp_input>
      break;
 800ea2e:	e03e      	b.n	800eaae <ip4_input+0x2e6>
 800ea30:	20006e84 	.word	0x20006e84
 800ea34:	200038bc 	.word	0x200038bc
 800ea38:	20006e78 	.word	0x20006e78
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800ea3c:	6839      	ldr	r1, [r7, #0]
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f7fa fd82 	bl	8009548 <tcp_input>
      break;
 800ea44:	e033      	b.n	800eaae <ip4_input+0x2e6>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800ea46:	6839      	ldr	r1, [r7, #0]
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f7ff fc7d 	bl	800e348 <icmp_input>
      break;
 800ea4e:	e02e      	b.n	800eaae <ip4_input+0x2e6>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ea50:	4b22      	ldr	r3, [pc, #136]	; (800eadc <ip4_input+0x314>)
 800ea52:	695b      	ldr	r3, [r3, #20]
 800ea54:	6939      	ldr	r1, [r7, #16]
 800ea56:	4618      	mov	r0, r3
 800ea58:	f000 f928 	bl	800ecac <ip4_addr_isbroadcast_u32>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d112      	bne.n	800ea88 <ip4_input+0x2c0>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ea62:	4b1e      	ldr	r3, [pc, #120]	; (800eadc <ip4_input+0x314>)
 800ea64:	695b      	ldr	r3, [r3, #20]
 800ea66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ea6a:	2be0      	cmp	r3, #224	; 0xe0
 800ea6c:	d00c      	beq.n	800ea88 <ip4_input+0x2c0>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800ea6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ea72:	4619      	mov	r1, r3
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f7f9 f847 	bl	8007b08 <pbuf_header_force>
        p->payload = iphdr;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	697a      	ldr	r2, [r7, #20]
 800ea7e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ea80:	2102      	movs	r1, #2
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f7ff fd9a 	bl	800e5bc <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f7f9 f84f 	bl	8007b2c <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
 800ea8e:	4b14      	ldr	r3, [pc, #80]	; (800eae0 <ip4_input+0x318>)
 800ea90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ea94:	3301      	adds	r3, #1
 800ea96:	b29a      	uxth	r2, r3
 800ea98:	4b11      	ldr	r3, [pc, #68]	; (800eae0 <ip4_input+0x318>)
 800ea9a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
      IP_STATS_INC(ip.drop);
 800ea9e:	4b10      	ldr	r3, [pc, #64]	; (800eae0 <ip4_input+0x318>)
 800eaa0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	b29a      	uxth	r2, r3
 800eaa8:	4b0d      	ldr	r3, [pc, #52]	; (800eae0 <ip4_input+0x318>)
 800eaaa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800eaae:	4b0b      	ldr	r3, [pc, #44]	; (800eadc <ip4_input+0x314>)
 800eab0:	2200      	movs	r2, #0
 800eab2:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800eab4:	4b09      	ldr	r3, [pc, #36]	; (800eadc <ip4_input+0x314>)
 800eab6:	2200      	movs	r2, #0
 800eab8:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800eaba:	4b08      	ldr	r3, [pc, #32]	; (800eadc <ip4_input+0x314>)
 800eabc:	2200      	movs	r2, #0
 800eabe:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800eac0:	4b06      	ldr	r3, [pc, #24]	; (800eadc <ip4_input+0x314>)
 800eac2:	2200      	movs	r2, #0
 800eac4:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800eac6:	4b05      	ldr	r3, [pc, #20]	; (800eadc <ip4_input+0x314>)
 800eac8:	2200      	movs	r2, #0
 800eaca:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800eacc:	4b03      	ldr	r3, [pc, #12]	; (800eadc <ip4_input+0x314>)
 800eace:	2200      	movs	r2, #0
 800ead0:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ead2:	2300      	movs	r3, #0
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3718      	adds	r7, #24
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	200038bc 	.word	0x200038bc
 800eae0:	20006e84 	.word	0x20006e84

0800eae4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b08a      	sub	sp, #40	; 0x28
 800eae8:	af04      	add	r7, sp, #16
 800eaea:	60f8      	str	r0, [r7, #12]
 800eaec:	60b9      	str	r1, [r7, #8]
 800eaee:	607a      	str	r2, [r7, #4]
 800eaf0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d009      	beq.n	800eb10 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d003      	beq.n	800eb0a <ip4_output_if+0x26>
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d102      	bne.n	800eb10 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800eb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0c:	3304      	adds	r3, #4
 800eb0e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800eb10:	78fa      	ldrb	r2, [r7, #3]
 800eb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb14:	9302      	str	r3, [sp, #8]
 800eb16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eb1a:	9301      	str	r3, [sp, #4]
 800eb1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb20:	9300      	str	r3, [sp, #0]
 800eb22:	4613      	mov	r3, r2
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	6979      	ldr	r1, [r7, #20]
 800eb28:	68f8      	ldr	r0, [r7, #12]
 800eb2a:	f000 f805 	bl	800eb38 <ip4_output_if_src>
 800eb2e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3718      	adds	r7, #24
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b088      	sub	sp, #32
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	607a      	str	r2, [r7, #4]
 800eb44:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	89db      	ldrh	r3, [r3, #14]
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d006      	beq.n	800eb5c <ip4_output_if_src+0x24>
 800eb4e:	4b50      	ldr	r3, [pc, #320]	; (800ec90 <ip4_output_if_src+0x158>)
 800eb50:	f240 3233 	movw	r2, #819	; 0x333
 800eb54:	494f      	ldr	r1, [pc, #316]	; (800ec94 <ip4_output_if_src+0x15c>)
 800eb56:	4850      	ldr	r0, [pc, #320]	; (800ec98 <ip4_output_if_src+0x160>)
 800eb58:	f003 fd32 	bl	80125c0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d068      	beq.n	800ec34 <ip4_output_if_src+0xfc>
    u16_t ip_hlen = IP_HLEN;
 800eb62:	2314      	movs	r3, #20
 800eb64:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800eb66:	2114      	movs	r1, #20
 800eb68:	68f8      	ldr	r0, [r7, #12]
 800eb6a:	f7f8 ffbb 	bl	8007ae4 <pbuf_header>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d00a      	beq.n	800eb8a <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 800eb74:	4b49      	ldr	r3, [pc, #292]	; (800ec9c <ip4_output_if_src+0x164>)
 800eb76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	b29a      	uxth	r2, r3
 800eb7e:	4b47      	ldr	r3, [pc, #284]	; (800ec9c <ip4_output_if_src+0x164>)
 800eb80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800eb84:	f06f 0301 	mvn.w	r3, #1
 800eb88:	e07d      	b.n	800ec86 <ip4_output_if_src+0x14e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	895b      	ldrh	r3, [r3, #10]
 800eb94:	2b13      	cmp	r3, #19
 800eb96:	d806      	bhi.n	800eba6 <ip4_output_if_src+0x6e>
 800eb98:	4b3d      	ldr	r3, [pc, #244]	; (800ec90 <ip4_output_if_src+0x158>)
 800eb9a:	f44f 7258 	mov.w	r2, #864	; 0x360
 800eb9e:	4940      	ldr	r1, [pc, #256]	; (800eca0 <ip4_output_if_src+0x168>)
 800eba0:	483d      	ldr	r0, [pc, #244]	; (800ec98 <ip4_output_if_src+0x160>)
 800eba2:	f003 fd0d 	bl	80125c0 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800eba6:	69fb      	ldr	r3, [r7, #28]
 800eba8:	78fa      	ldrb	r2, [r7, #3]
 800ebaa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ebac:	69fb      	ldr	r3, [r7, #28]
 800ebae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ebb2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681a      	ldr	r2, [r3, #0]
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ebbc:	8b7b      	ldrh	r3, [r7, #26]
 800ebbe:	089b      	lsrs	r3, r3, #2
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebc8:	b2da      	uxtb	r2, r3
 800ebca:	69fb      	ldr	r3, [r7, #28]
 800ebcc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ebce:	69fb      	ldr	r3, [r7, #28]
 800ebd0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ebd4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	891b      	ldrh	r3, [r3, #8]
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7f7 fdd5 	bl	800678a <lwip_htons>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ebe8:	69fb      	ldr	r3, [r7, #28]
 800ebea:	2200      	movs	r2, #0
 800ebec:	719a      	strb	r2, [r3, #6]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ebf2:	4b2c      	ldr	r3, [pc, #176]	; (800eca4 <ip4_output_if_src+0x16c>)
 800ebf4:	881b      	ldrh	r3, [r3, #0]
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7f7 fdc7 	bl	800678a <lwip_htons>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	461a      	mov	r2, r3
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ec04:	4b27      	ldr	r3, [pc, #156]	; (800eca4 <ip4_output_if_src+0x16c>)
 800ec06:	881b      	ldrh	r3, [r3, #0]
 800ec08:	3301      	adds	r3, #1
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	4b25      	ldr	r3, [pc, #148]	; (800eca4 <ip4_output_if_src+0x16c>)
 800ec0e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d104      	bne.n	800ec20 <ip4_output_if_src+0xe8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ec16:	4b24      	ldr	r3, [pc, #144]	; (800eca8 <ip4_output_if_src+0x170>)
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	60da      	str	r2, [r3, #12]
 800ec1e:	e003      	b.n	800ec28 <ip4_output_if_src+0xf0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	729a      	strb	r2, [r3, #10]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	72da      	strb	r2, [r3, #11]
 800ec32:	e008      	b.n	800ec46 <ip4_output_if_src+0x10e>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ec3a:	69fb      	ldr	r3, [r7, #28]
 800ec3c:	691b      	ldr	r3, [r3, #16]
 800ec3e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ec40:	f107 0314 	add.w	r3, r7, #20
 800ec44:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 800ec46:	4b15      	ldr	r3, [pc, #84]	; (800ec9c <ip4_output_if_src+0x164>)
 800ec48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ec4c:	3301      	adds	r3, #1
 800ec4e:	b29a      	uxth	r2, r3
 800ec50:	4b12      	ldr	r3, [pc, #72]	; (800ec9c <ip4_output_if_src+0x164>)
 800ec52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ec56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d00c      	beq.n	800ec78 <ip4_output_if_src+0x140>
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	891a      	ldrh	r2, [r3, #8]
 800ec62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d906      	bls.n	800ec78 <ip4_output_if_src+0x140>
    return ip4_frag(p, netif, dest);
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec6e:	68f8      	ldr	r0, [r7, #12]
 800ec70:	f000 fd36 	bl	800f6e0 <ip4_frag>
 800ec74:	4603      	mov	r3, r0
 800ec76:	e006      	b.n	800ec86 <ip4_output_if_src+0x14e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ec78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7a:	695b      	ldr	r3, [r3, #20]
 800ec7c:	687a      	ldr	r2, [r7, #4]
 800ec7e:	68f9      	ldr	r1, [r7, #12]
 800ec80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec82:	4798      	blx	r3
 800ec84:	4603      	mov	r3, r0
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3720      	adds	r7, #32
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	08017c18 	.word	0x08017c18
 800ec94:	08017c4c 	.word	0x08017c4c
 800ec98:	08017c58 	.word	0x08017c58
 800ec9c:	20006e84 	.word	0x20006e84
 800eca0:	08017c80 	.word	0x08017c80
 800eca4:	200070ae 	.word	0x200070ae
 800eca8:	08018040 	.word	0x08018040

0800ecac <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b085      	sub	sp, #20
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecc0:	d002      	beq.n	800ecc8 <ip4_addr_isbroadcast_u32+0x1c>
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d101      	bne.n	800eccc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ecc8:	2301      	movs	r3, #1
 800ecca:	e02a      	b.n	800ed22 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ecd2:	f003 0302 	and.w	r3, r3, #2
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d101      	bne.n	800ecde <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	e021      	b.n	800ed22 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	3304      	adds	r3, #4
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	687a      	ldr	r2, [r7, #4]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d101      	bne.n	800ecee <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ecea:	2300      	movs	r3, #0
 800ecec:	e019      	b.n	800ed22 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ecee:	68fa      	ldr	r2, [r7, #12]
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	3304      	adds	r3, #4
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	405a      	eors	r2, r3
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	3308      	adds	r3, #8
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	4013      	ands	r3, r2
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d10d      	bne.n	800ed20 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	3308      	adds	r3, #8
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	43da      	mvns	r2, r3
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	3308      	adds	r3, #8
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d101      	bne.n	800ed20 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	e000      	b.n	800ed22 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ed20:	2300      	movs	r3, #0
  }
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3714      	adds	r7, #20
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bc80      	pop	{r7}
 800ed2a:	4770      	bx	lr

0800ed2c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ed32:	2300      	movs	r3, #0
 800ed34:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ed36:	4b12      	ldr	r3, [pc, #72]	; (800ed80 <ip_reass_tmr+0x54>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ed3c:	e018      	b.n	800ed70 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	7fdb      	ldrb	r3, [r3, #31]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d00b      	beq.n	800ed5e <ip_reass_tmr+0x32>
      r->timer--;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	7fdb      	ldrb	r3, [r3, #31]
 800ed4a:	3b01      	subs	r3, #1
 800ed4c:	b2da      	uxtb	r2, r3
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	60fb      	str	r3, [r7, #12]
 800ed5c:	e008      	b.n	800ed70 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ed68:	68b9      	ldr	r1, [r7, #8]
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f000 f80a 	bl	800ed84 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d1e3      	bne.n	800ed3e <ip_reass_tmr+0x12>
     }
   }
}
 800ed76:	bf00      	nop
 800ed78:	bf00      	nop
 800ed7a:	3710      	adds	r7, #16
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	200070b0 	.word	0x200070b0

0800ed84 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b088      	sub	sp, #32
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ed92:	683a      	ldr	r2, [r7, #0]
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d105      	bne.n	800eda6 <ip_reass_free_complete_datagram+0x22>
 800ed9a:	4b45      	ldr	r3, [pc, #276]	; (800eeb0 <ip_reass_free_complete_datagram+0x12c>)
 800ed9c:	22ab      	movs	r2, #171	; 0xab
 800ed9e:	4945      	ldr	r1, [pc, #276]	; (800eeb4 <ip_reass_free_complete_datagram+0x130>)
 800eda0:	4845      	ldr	r0, [pc, #276]	; (800eeb8 <ip_reass_free_complete_datagram+0x134>)
 800eda2:	f003 fc0d 	bl	80125c0 <iprintf>
  if (prev != NULL) {
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d00a      	beq.n	800edc2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	687a      	ldr	r2, [r7, #4]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d005      	beq.n	800edc2 <ip_reass_free_complete_datagram+0x3e>
 800edb6:	4b3e      	ldr	r3, [pc, #248]	; (800eeb0 <ip_reass_free_complete_datagram+0x12c>)
 800edb8:	22ad      	movs	r2, #173	; 0xad
 800edba:	4940      	ldr	r1, [pc, #256]	; (800eebc <ip_reass_free_complete_datagram+0x138>)
 800edbc:	483e      	ldr	r0, [pc, #248]	; (800eeb8 <ip_reass_free_complete_datagram+0x134>)
 800edbe:	f003 fbff 	bl	80125c0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	889b      	ldrh	r3, [r3, #4]
 800edce:	b29b      	uxth	r3, r3
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d12a      	bne.n	800ee2a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	685b      	ldr	r3, [r3, #4]
 800edd8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	681a      	ldr	r2, [r3, #0]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ede2:	69bb      	ldr	r3, [r7, #24]
 800ede4:	6858      	ldr	r0, [r3, #4]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	3308      	adds	r3, #8
 800edea:	2214      	movs	r2, #20
 800edec:	4619      	mov	r1, r3
 800edee:	f002 fd63 	bl	80118b8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800edf2:	2101      	movs	r1, #1
 800edf4:	69b8      	ldr	r0, [r7, #24]
 800edf6:	f7ff fbf1 	bl	800e5dc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800edfa:	69b8      	ldr	r0, [r7, #24]
 800edfc:	f7f8 ff2a 	bl	8007c54 <pbuf_clen>
 800ee00:	4603      	mov	r3, r0
 800ee02:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ee04:	8bfa      	ldrh	r2, [r7, #30]
 800ee06:	8a7b      	ldrh	r3, [r7, #18]
 800ee08:	4413      	add	r3, r2
 800ee0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee0e:	db05      	blt.n	800ee1c <ip_reass_free_complete_datagram+0x98>
 800ee10:	4b27      	ldr	r3, [pc, #156]	; (800eeb0 <ip_reass_free_complete_datagram+0x12c>)
 800ee12:	22bc      	movs	r2, #188	; 0xbc
 800ee14:	492a      	ldr	r1, [pc, #168]	; (800eec0 <ip_reass_free_complete_datagram+0x13c>)
 800ee16:	4828      	ldr	r0, [pc, #160]	; (800eeb8 <ip_reass_free_complete_datagram+0x134>)
 800ee18:	f003 fbd2 	bl	80125c0 <iprintf>
    pbufs_freed += clen;
 800ee1c:	8bfa      	ldrh	r2, [r7, #30]
 800ee1e:	8a7b      	ldrh	r3, [r7, #18]
 800ee20:	4413      	add	r3, r2
 800ee22:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ee24:	69b8      	ldr	r0, [r7, #24]
 800ee26:	f7f8 fe81 	bl	8007b2c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ee30:	e01f      	b.n	800ee72 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ee32:	69bb      	ldr	r3, [r7, #24]
 800ee34:	685b      	ldr	r3, [r3, #4]
 800ee36:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ee38:	69bb      	ldr	r3, [r7, #24]
 800ee3a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ee42:	68f8      	ldr	r0, [r7, #12]
 800ee44:	f7f8 ff06 	bl	8007c54 <pbuf_clen>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ee4c:	8bfa      	ldrh	r2, [r7, #30]
 800ee4e:	8a7b      	ldrh	r3, [r7, #18]
 800ee50:	4413      	add	r3, r2
 800ee52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee56:	db05      	blt.n	800ee64 <ip_reass_free_complete_datagram+0xe0>
 800ee58:	4b15      	ldr	r3, [pc, #84]	; (800eeb0 <ip_reass_free_complete_datagram+0x12c>)
 800ee5a:	22cc      	movs	r2, #204	; 0xcc
 800ee5c:	4918      	ldr	r1, [pc, #96]	; (800eec0 <ip_reass_free_complete_datagram+0x13c>)
 800ee5e:	4816      	ldr	r0, [pc, #88]	; (800eeb8 <ip_reass_free_complete_datagram+0x134>)
 800ee60:	f003 fbae 	bl	80125c0 <iprintf>
    pbufs_freed += clen;
 800ee64:	8bfa      	ldrh	r2, [r7, #30]
 800ee66:	8a7b      	ldrh	r3, [r7, #18]
 800ee68:	4413      	add	r3, r2
 800ee6a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ee6c:	68f8      	ldr	r0, [r7, #12]
 800ee6e:	f7f8 fe5d 	bl	8007b2c <pbuf_free>
  while (p != NULL) {
 800ee72:	69bb      	ldr	r3, [r7, #24]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d1dc      	bne.n	800ee32 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ee78:	6839      	ldr	r1, [r7, #0]
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f000 f8ca 	bl	800f014 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800ee80:	4b10      	ldr	r3, [pc, #64]	; (800eec4 <ip_reass_free_complete_datagram+0x140>)
 800ee82:	881b      	ldrh	r3, [r3, #0]
 800ee84:	8bfa      	ldrh	r2, [r7, #30]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d905      	bls.n	800ee96 <ip_reass_free_complete_datagram+0x112>
 800ee8a:	4b09      	ldr	r3, [pc, #36]	; (800eeb0 <ip_reass_free_complete_datagram+0x12c>)
 800ee8c:	22d2      	movs	r2, #210	; 0xd2
 800ee8e:	490e      	ldr	r1, [pc, #56]	; (800eec8 <ip_reass_free_complete_datagram+0x144>)
 800ee90:	4809      	ldr	r0, [pc, #36]	; (800eeb8 <ip_reass_free_complete_datagram+0x134>)
 800ee92:	f003 fb95 	bl	80125c0 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800ee96:	4b0b      	ldr	r3, [pc, #44]	; (800eec4 <ip_reass_free_complete_datagram+0x140>)
 800ee98:	881a      	ldrh	r2, [r3, #0]
 800ee9a:	8bfb      	ldrh	r3, [r7, #30]
 800ee9c:	1ad3      	subs	r3, r2, r3
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	4b08      	ldr	r3, [pc, #32]	; (800eec4 <ip_reass_free_complete_datagram+0x140>)
 800eea2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800eea4:	8bfb      	ldrh	r3, [r7, #30]
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3720      	adds	r7, #32
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	08017cb0 	.word	0x08017cb0
 800eeb4:	08017cec 	.word	0x08017cec
 800eeb8:	08017cf8 	.word	0x08017cf8
 800eebc:	08017d20 	.word	0x08017d20
 800eec0:	08017d34 	.word	0x08017d34
 800eec4:	200070b4 	.word	0x200070b4
 800eec8:	08017d54 	.word	0x08017d54

0800eecc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b08a      	sub	sp, #40	; 0x28
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800eed6:	2300      	movs	r3, #0
 800eed8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800eeda:	2300      	movs	r3, #0
 800eedc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800eede:	2300      	movs	r3, #0
 800eee0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800eee2:	2300      	movs	r3, #0
 800eee4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800eee6:	2300      	movs	r3, #0
 800eee8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800eeea:	4b28      	ldr	r3, [pc, #160]	; (800ef8c <ip_reass_remove_oldest_datagram+0xc0>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800eef0:	e030      	b.n	800ef54 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800eef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef4:	695a      	ldr	r2, [r3, #20]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d10c      	bne.n	800ef18 <ip_reass_remove_oldest_datagram+0x4c>
 800eefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef00:	699a      	ldr	r2, [r3, #24]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	691b      	ldr	r3, [r3, #16]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d106      	bne.n	800ef18 <ip_reass_remove_oldest_datagram+0x4c>
 800ef0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0c:	899a      	ldrh	r2, [r3, #12]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	889b      	ldrh	r3, [r3, #4]
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d014      	beq.n	800ef42 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ef1e:	6a3b      	ldr	r3, [r7, #32]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d104      	bne.n	800ef2e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ef24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef26:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ef28:	69fb      	ldr	r3, [r7, #28]
 800ef2a:	61bb      	str	r3, [r7, #24]
 800ef2c:	e009      	b.n	800ef42 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ef2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef30:	7fda      	ldrb	r2, [r3, #31]
 800ef32:	6a3b      	ldr	r3, [r7, #32]
 800ef34:	7fdb      	ldrb	r3, [r3, #31]
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d803      	bhi.n	800ef42 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ef3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ef3e:	69fb      	ldr	r3, [r7, #28]
 800ef40:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ef42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d001      	beq.n	800ef4e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ef4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ef4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ef54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d1cb      	bne.n	800eef2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ef5a:	6a3b      	ldr	r3, [r7, #32]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d008      	beq.n	800ef72 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ef60:	69b9      	ldr	r1, [r7, #24]
 800ef62:	6a38      	ldr	r0, [r7, #32]
 800ef64:	f7ff ff0e 	bl	800ed84 <ip_reass_free_complete_datagram>
 800ef68:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ef6a:	697a      	ldr	r2, [r7, #20]
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	4413      	add	r3, r2
 800ef70:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ef72:	697a      	ldr	r2, [r7, #20]
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	da02      	bge.n	800ef80 <ip_reass_remove_oldest_datagram+0xb4>
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	dcac      	bgt.n	800eeda <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ef80:	697b      	ldr	r3, [r7, #20]
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3728      	adds	r7, #40	; 0x28
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	200070b0 	.word	0x200070b0

0800ef90 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b084      	sub	sp, #16
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ef9a:	2004      	movs	r0, #4
 800ef9c:	f7f8 f836 	bl	800700c <memp_malloc>
 800efa0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d116      	bne.n	800efd6 <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800efa8:	6839      	ldr	r1, [r7, #0]
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f7ff ff8e 	bl	800eecc <ip_reass_remove_oldest_datagram>
 800efb0:	4602      	mov	r2, r0
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	4293      	cmp	r3, r2
 800efb6:	dc03      	bgt.n	800efc0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800efb8:	2004      	movs	r0, #4
 800efba:	f7f8 f827 	bl	800700c <memp_malloc>
 800efbe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d107      	bne.n	800efd6 <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 800efc6:	4b11      	ldr	r3, [pc, #68]	; (800f00c <ip_reass_enqueue_new_datagram+0x7c>)
 800efc8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800efca:	3301      	adds	r3, #1
 800efcc:	b29a      	uxth	r2, r3
 800efce:	4b0f      	ldr	r3, [pc, #60]	; (800f00c <ip_reass_enqueue_new_datagram+0x7c>)
 800efd0:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800efd2:	2300      	movs	r3, #0
 800efd4:	e016      	b.n	800f004 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800efd6:	2220      	movs	r2, #32
 800efd8:	2100      	movs	r1, #0
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	f002 fc7a 	bl	80118d4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	2203      	movs	r2, #3
 800efe4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800efe6:	4b0a      	ldr	r3, [pc, #40]	; (800f010 <ip_reass_enqueue_new_datagram+0x80>)
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800efee:	4a08      	ldr	r2, [pc, #32]	; (800f010 <ip_reass_enqueue_new_datagram+0x80>)
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	3308      	adds	r3, #8
 800eff8:	2214      	movs	r2, #20
 800effa:	6879      	ldr	r1, [r7, #4]
 800effc:	4618      	mov	r0, r3
 800effe:	f002 fc5b 	bl	80118b8 <memcpy>
  return ipr;
 800f002:	68fb      	ldr	r3, [r7, #12]
}
 800f004:	4618      	mov	r0, r3
 800f006:	3710      	adds	r7, #16
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}
 800f00c:	20006e84 	.word	0x20006e84
 800f010:	200070b0 	.word	0x200070b0

0800f014 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b082      	sub	sp, #8
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f01e:	4b10      	ldr	r3, [pc, #64]	; (800f060 <ip_reass_dequeue_datagram+0x4c>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	429a      	cmp	r2, r3
 800f026:	d104      	bne.n	800f032 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	4a0c      	ldr	r2, [pc, #48]	; (800f060 <ip_reass_dequeue_datagram+0x4c>)
 800f02e:	6013      	str	r3, [r2, #0]
 800f030:	e00d      	b.n	800f04e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d106      	bne.n	800f046 <ip_reass_dequeue_datagram+0x32>
 800f038:	4b0a      	ldr	r3, [pc, #40]	; (800f064 <ip_reass_dequeue_datagram+0x50>)
 800f03a:	f240 1245 	movw	r2, #325	; 0x145
 800f03e:	490a      	ldr	r1, [pc, #40]	; (800f068 <ip_reass_dequeue_datagram+0x54>)
 800f040:	480a      	ldr	r0, [pc, #40]	; (800f06c <ip_reass_dequeue_datagram+0x58>)
 800f042:	f003 fabd 	bl	80125c0 <iprintf>
    prev->next = ipr->next;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681a      	ldr	r2, [r3, #0]
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f04e:	6879      	ldr	r1, [r7, #4]
 800f050:	2004      	movs	r0, #4
 800f052:	f7f8 f82d 	bl	80070b0 <memp_free>
}
 800f056:	bf00      	nop
 800f058:	3708      	adds	r7, #8
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	200070b0 	.word	0x200070b0
 800f064:	08017cb0 	.word	0x08017cb0
 800f068:	08017d70 	.word	0x08017d70
 800f06c:	08017cf8 	.word	0x08017cf8

0800f070 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b08c      	sub	sp, #48	; 0x30
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800f07c:	2300      	movs	r3, #0
 800f07e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f080:	2301      	movs	r3, #1
 800f082:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800f08a:	69fb      	ldr	r3, [r7, #28]
 800f08c:	885b      	ldrh	r3, [r3, #2]
 800f08e:	b29b      	uxth	r3, r3
 800f090:	4618      	mov	r0, r3
 800f092:	f7f7 fb7a 	bl	800678a <lwip_htons>
 800f096:	4603      	mov	r3, r0
 800f098:	461a      	mov	r2, r3
 800f09a:	69fb      	ldr	r3, [r7, #28]
 800f09c:	781b      	ldrb	r3, [r3, #0]
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	f003 030f 	and.w	r3, r3, #15
 800f0a4:	b29b      	uxth	r3, r3
 800f0a6:	009b      	lsls	r3, r3, #2
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	1ad3      	subs	r3, r2, r3
 800f0ac:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800f0ae:	69fb      	ldr	r3, [r7, #28]
 800f0b0:	88db      	ldrh	r3, [r3, #6]
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f7f7 fb68 	bl	800678a <lwip_htons>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	00db      	lsls	r3, r3, #3
 800f0c4:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	701a      	strb	r2, [r3, #0]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	705a      	strb	r2, [r3, #1]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	709a      	strb	r2, [r3, #2]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e0:	8b3a      	ldrh	r2, [r7, #24]
 800f0e2:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800f0e4:	8b3a      	ldrh	r2, [r7, #24]
 800f0e6:	8b7b      	ldrh	r3, [r7, #26]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	b29a      	uxth	r2, r3
 800f0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ee:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	627b      	str	r3, [r7, #36]	; 0x24
 800f0f6:	e061      	b.n	800f1bc <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800f0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800f0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f100:	889b      	ldrh	r3, [r3, #4]
 800f102:	b29a      	uxth	r2, r3
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	889b      	ldrh	r3, [r3, #4]
 800f108:	b29b      	uxth	r3, r3
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d232      	bcs.n	800f174 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f112:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f116:	2b00      	cmp	r3, #0
 800f118:	d01f      	beq.n	800f15a <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11c:	889b      	ldrh	r3, [r3, #4]
 800f11e:	b29a      	uxth	r2, r3
 800f120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f122:	88db      	ldrh	r3, [r3, #6]
 800f124:	b29b      	uxth	r3, r3
 800f126:	429a      	cmp	r2, r3
 800f128:	f0c0 80e3 	bcc.w	800f2f2 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800f12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12e:	88db      	ldrh	r3, [r3, #6]
 800f130:	b29a      	uxth	r2, r3
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	889b      	ldrh	r3, [r3, #4]
 800f136:	b29b      	uxth	r3, r3
 800f138:	429a      	cmp	r2, r3
 800f13a:	f200 80da 	bhi.w	800f2f2 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f140:	68ba      	ldr	r2, [r7, #8]
 800f142:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f146:	88db      	ldrh	r3, [r3, #6]
 800f148:	b29a      	uxth	r2, r3
 800f14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f14c:	889b      	ldrh	r3, [r3, #4]
 800f14e:	b29b      	uxth	r3, r3
 800f150:	429a      	cmp	r2, r3
 800f152:	d037      	beq.n	800f1c4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f154:	2300      	movs	r3, #0
 800f156:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f158:	e034      	b.n	800f1c4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800f15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15c:	88db      	ldrh	r3, [r3, #6]
 800f15e:	b29a      	uxth	r2, r3
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	889b      	ldrh	r3, [r3, #4]
 800f164:	b29b      	uxth	r3, r3
 800f166:	429a      	cmp	r2, r3
 800f168:	f200 80c5 	bhi.w	800f2f6 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	68ba      	ldr	r2, [r7, #8]
 800f170:	605a      	str	r2, [r3, #4]
      break;
 800f172:	e027      	b.n	800f1c4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800f174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f176:	889b      	ldrh	r3, [r3, #4]
 800f178:	b29a      	uxth	r2, r3
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	889b      	ldrh	r3, [r3, #4]
 800f17e:	b29b      	uxth	r3, r3
 800f180:	429a      	cmp	r2, r3
 800f182:	f000 80ba 	beq.w	800f2fa <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f188:	889b      	ldrh	r3, [r3, #4]
 800f18a:	b29a      	uxth	r2, r3
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	88db      	ldrh	r3, [r3, #6]
 800f190:	b29b      	uxth	r3, r3
 800f192:	429a      	cmp	r2, r3
 800f194:	f0c0 80b3 	bcc.w	800f2fe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d009      	beq.n	800f1b2 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800f19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a0:	88db      	ldrh	r3, [r3, #6]
 800f1a2:	b29a      	uxth	r2, r3
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	889b      	ldrh	r3, [r3, #4]
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d001      	beq.n	800f1b2 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d19a      	bne.n	800f0f8 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800f1c2:	e000      	b.n	800f1c6 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800f1c4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d12d      	bne.n	800f228 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800f1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d01c      	beq.n	800f20c <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d4:	88db      	ldrh	r3, [r3, #6]
 800f1d6:	b29a      	uxth	r2, r3
 800f1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1da:	889b      	ldrh	r3, [r3, #4]
 800f1dc:	b29b      	uxth	r3, r3
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d906      	bls.n	800f1f0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800f1e2:	4b51      	ldr	r3, [pc, #324]	; (800f328 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f1e4:	f240 12ab 	movw	r2, #427	; 0x1ab
 800f1e8:	4950      	ldr	r1, [pc, #320]	; (800f32c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f1ea:	4851      	ldr	r0, [pc, #324]	; (800f330 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f1ec:	f003 f9e8 	bl	80125c0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f2:	68ba      	ldr	r2, [r7, #8]
 800f1f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f8:	88db      	ldrh	r3, [r3, #6]
 800f1fa:	b29a      	uxth	r2, r3
 800f1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fe:	889b      	ldrh	r3, [r3, #4]
 800f200:	b29b      	uxth	r3, r3
 800f202:	429a      	cmp	r2, r3
 800f204:	d010      	beq.n	800f228 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800f206:	2300      	movs	r3, #0
 800f208:	623b      	str	r3, [r7, #32]
 800f20a:	e00d      	b.n	800f228 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d006      	beq.n	800f222 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800f214:	4b44      	ldr	r3, [pc, #272]	; (800f328 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f216:	f240 12b3 	movw	r2, #435	; 0x1b3
 800f21a:	4946      	ldr	r1, [pc, #280]	; (800f334 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f21c:	4844      	ldr	r0, [pc, #272]	; (800f330 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f21e:	f003 f9cf 	bl	80125c0 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	68ba      	ldr	r2, [r7, #8]
 800f226:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d105      	bne.n	800f23a <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	7f9b      	ldrb	r3, [r3, #30]
 800f232:	f003 0301 	and.w	r3, r3, #1
 800f236:	2b00      	cmp	r3, #0
 800f238:	d059      	beq.n	800f2ee <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800f23a:	6a3b      	ldr	r3, [r7, #32]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d04f      	beq.n	800f2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d006      	beq.n	800f256 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	889b      	ldrh	r3, [r3, #4]
 800f250:	b29b      	uxth	r3, r3
 800f252:	2b00      	cmp	r3, #0
 800f254:	d002      	beq.n	800f25c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f256:	2300      	movs	r3, #0
 800f258:	623b      	str	r3, [r7, #32]
 800f25a:	e041      	b.n	800f2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f266:	e012      	b.n	800f28e <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800f268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26a:	685b      	ldr	r3, [r3, #4]
 800f26c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f270:	88db      	ldrh	r3, [r3, #6]
 800f272:	b29a      	uxth	r2, r3
 800f274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f276:	889b      	ldrh	r3, [r3, #4]
 800f278:	b29b      	uxth	r3, r3
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d002      	beq.n	800f284 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800f27e:	2300      	movs	r3, #0
 800f280:	623b      	str	r3, [r7, #32]
            break;
 800f282:	e007      	b.n	800f294 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800f284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f286:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f290:	2b00      	cmp	r3, #0
 800f292:	d1e9      	bne.n	800f268 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f294:	6a3b      	ldr	r3, [r7, #32]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d022      	beq.n	800f2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d106      	bne.n	800f2b0 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800f2a2:	4b21      	ldr	r3, [pc, #132]	; (800f328 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f2a4:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800f2a8:	4923      	ldr	r1, [pc, #140]	; (800f338 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f2aa:	4821      	ldr	r0, [pc, #132]	; (800f330 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f2ac:	f003 f988 	bl	80125c0 <iprintf>
          LWIP_ASSERT("sanity check",
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d106      	bne.n	800f2ca <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800f2bc:	4b1a      	ldr	r3, [pc, #104]	; (800f328 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f2be:	f240 12d5 	movw	r2, #469	; 0x1d5
 800f2c2:	491d      	ldr	r1, [pc, #116]	; (800f338 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f2c4:	481a      	ldr	r0, [pc, #104]	; (800f330 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f2c6:	f003 f97b 	bl	80125c0 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d006      	beq.n	800f2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800f2d2:	4b15      	ldr	r3, [pc, #84]	; (800f328 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f2d4:	f240 12d7 	movw	r2, #471	; 0x1d7
 800f2d8:	4918      	ldr	r1, [pc, #96]	; (800f33c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f2da:	4815      	ldr	r0, [pc, #84]	; (800f330 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f2dc:	f003 f970 	bl	80125c0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f2e0:	6a3b      	ldr	r3, [r7, #32]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	bf14      	ite	ne
 800f2e6:	2301      	movne	r3, #1
 800f2e8:	2300      	moveq	r3, #0
 800f2ea:	b2db      	uxtb	r3, r3
 800f2ec:	e018      	b.n	800f320 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	e016      	b.n	800f320 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 800f2f2:	bf00      	nop
 800f2f4:	e004      	b.n	800f300 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800f2f6:	bf00      	nop
 800f2f8:	e002      	b.n	800f300 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800f2fa:	bf00      	nop
 800f2fc:	e000      	b.n	800f300 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800f2fe:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800f300:	68b8      	ldr	r0, [r7, #8]
 800f302:	f7f8 fca7 	bl	8007c54 <pbuf_clen>
 800f306:	4603      	mov	r3, r0
 800f308:	461a      	mov	r2, r3
 800f30a:	4b0d      	ldr	r3, [pc, #52]	; (800f340 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f30c:	881b      	ldrh	r3, [r3, #0]
 800f30e:	1a9b      	subs	r3, r3, r2
 800f310:	b29a      	uxth	r2, r3
 800f312:	4b0b      	ldr	r3, [pc, #44]	; (800f340 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f314:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800f316:	68b8      	ldr	r0, [r7, #8]
 800f318:	f7f8 fc08 	bl	8007b2c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f31c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800f320:	4618      	mov	r0, r3
 800f322:	3730      	adds	r7, #48	; 0x30
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}
 800f328:	08017cb0 	.word	0x08017cb0
 800f32c:	08017d8c 	.word	0x08017d8c
 800f330:	08017cf8 	.word	0x08017cf8
 800f334:	08017dac 	.word	0x08017dac
 800f338:	08017de4 	.word	0x08017de4
 800f33c:	08017df4 	.word	0x08017df4
 800f340:	200070b4 	.word	0x200070b4

0800f344 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b08e      	sub	sp, #56	; 0x38
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
  struct ip_reass_helper *iprh;
  u16_t offset, len, clen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 800f34c:	4b9a      	ldr	r3, [pc, #616]	; (800f5b8 <ip4_reass+0x274>)
 800f34e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f350:	3301      	adds	r3, #1
 800f352:	b29a      	uxth	r2, r3
 800f354:	4b98      	ldr	r3, [pc, #608]	; (800f5b8 <ip4_reass+0x274>)
 800f356:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800f35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	f003 030f 	and.w	r3, r3, #15
 800f366:	009b      	lsls	r3, r3, #2
 800f368:	2b14      	cmp	r3, #20
 800f36a:	d008      	beq.n	800f37e <ip4_reass+0x3a>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 800f36c:	4b92      	ldr	r3, [pc, #584]	; (800f5b8 <ip4_reass+0x274>)
 800f36e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800f372:	3301      	adds	r3, #1
 800f374:	b29a      	uxth	r2, r3
 800f376:	4b90      	ldr	r3, [pc, #576]	; (800f5b8 <ip4_reass+0x274>)
 800f378:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 800f37c:	e145      	b.n	800f60a <ip4_reass+0x2c6>
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800f37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f380:	88db      	ldrh	r3, [r3, #6]
 800f382:	b29b      	uxth	r3, r3
 800f384:	4618      	mov	r0, r3
 800f386:	f7f7 fa00 	bl	800678a <lwip_htons>
 800f38a:	4603      	mov	r3, r0
 800f38c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f390:	b29b      	uxth	r3, r3
 800f392:	00db      	lsls	r3, r3, #3
 800f394:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800f396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f398:	885b      	ldrh	r3, [r3, #2]
 800f39a:	b29b      	uxth	r3, r3
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7f7 f9f4 	bl	800678a <lwip_htons>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	461a      	mov	r2, r3
 800f3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	f003 030f 	and.w	r3, r3, #15
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	009b      	lsls	r3, r3, #2
 800f3b4:	b29b      	uxth	r3, r3
 800f3b6:	1ad3      	subs	r3, r2, r3
 800f3b8:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f7f8 fc4a 	bl	8007c54 <pbuf_clen>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f3c4:	4b7d      	ldr	r3, [pc, #500]	; (800f5bc <ip4_reass+0x278>)
 800f3c6:	881b      	ldrh	r3, [r3, #0]
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f3cc:	4413      	add	r3, r2
 800f3ce:	2b0a      	cmp	r3, #10
 800f3d0:	dd15      	ble.n	800f3fe <ip4_reass+0xba>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f3d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3d8:	f7ff fd78 	bl	800eecc <ip_reass_remove_oldest_datagram>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d006      	beq.n	800f3f0 <ip4_reass+0xac>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f3e2:	4b76      	ldr	r3, [pc, #472]	; (800f5bc <ip4_reass+0x278>)
 800f3e4:	881b      	ldrh	r3, [r3, #0]
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f3ea:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f3ec:	2b0a      	cmp	r3, #10
 800f3ee:	dd06      	ble.n	800f3fe <ip4_reass+0xba>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 800f3f0:	4b71      	ldr	r3, [pc, #452]	; (800f5b8 <ip4_reass+0x274>)
 800f3f2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	b29a      	uxth	r2, r3
 800f3f8:	4b6f      	ldr	r3, [pc, #444]	; (800f5b8 <ip4_reass+0x274>)
 800f3fa:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 800f3fc:	e105      	b.n	800f60a <ip4_reass+0x2c6>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f3fe:	4b70      	ldr	r3, [pc, #448]	; (800f5c0 <ip4_reass+0x27c>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	633b      	str	r3, [r7, #48]	; 0x30
 800f404:	e01e      	b.n	800f444 <ip4_reass+0x100>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f408:	695a      	ldr	r2, [r3, #20]
 800f40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f40c:	68db      	ldr	r3, [r3, #12]
 800f40e:	429a      	cmp	r2, r3
 800f410:	d115      	bne.n	800f43e <ip4_reass+0xfa>
 800f412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f414:	699a      	ldr	r2, [r3, #24]
 800f416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f418:	691b      	ldr	r3, [r3, #16]
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d10f      	bne.n	800f43e <ip4_reass+0xfa>
 800f41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f420:	899a      	ldrh	r2, [r3, #12]
 800f422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f424:	889b      	ldrh	r3, [r3, #4]
 800f426:	b29b      	uxth	r3, r3
 800f428:	429a      	cmp	r2, r3
 800f42a:	d108      	bne.n	800f43e <ip4_reass+0xfa>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 800f42c:	4b62      	ldr	r3, [pc, #392]	; (800f5b8 <ip4_reass+0x274>)
 800f42e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f432:	3301      	adds	r3, #1
 800f434:	b29a      	uxth	r2, r3
 800f436:	4b60      	ldr	r3, [pc, #384]	; (800f5b8 <ip4_reass+0x274>)
 800f438:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 800f43c:	e005      	b.n	800f44a <ip4_reass+0x106>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	633b      	str	r3, [r7, #48]	; 0x30
 800f444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f446:	2b00      	cmp	r3, #0
 800f448:	d1dd      	bne.n	800f406 <ip4_reass+0xc2>
    }
  }

  if (ipr == NULL) {
 800f44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d109      	bne.n	800f464 <ip4_reass+0x120>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f450:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f452:	4619      	mov	r1, r3
 800f454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f456:	f7ff fd9b 	bl	800ef90 <ip_reass_enqueue_new_datagram>
 800f45a:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d11c      	bne.n	800f49c <ip4_reass+0x158>
      goto nullreturn;
 800f462:	e0d2      	b.n	800f60a <ip4_reass+0x2c6>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f466:	88db      	ldrh	r3, [r3, #6]
 800f468:	b29b      	uxth	r3, r3
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7f7 f98d 	bl	800678a <lwip_htons>
 800f470:	4603      	mov	r3, r0
 800f472:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f476:	2b00      	cmp	r3, #0
 800f478:	d110      	bne.n	800f49c <ip4_reass+0x158>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f47c:	89db      	ldrh	r3, [r3, #14]
 800f47e:	4618      	mov	r0, r3
 800f480:	f7f7 f983 	bl	800678a <lwip_htons>
 800f484:	4603      	mov	r3, r0
 800f486:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d006      	beq.n	800f49c <ip4_reass+0x158>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f490:	3308      	adds	r3, #8
 800f492:	2214      	movs	r2, #20
 800f494:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f496:	4618      	mov	r0, r3
 800f498:	f002 fa0e 	bl	80118b8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49e:	88db      	ldrh	r3, [r3, #6]
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	f003 0320 	and.w	r3, r3, #32
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	bf0c      	ite	eq
 800f4aa:	2301      	moveq	r3, #1
 800f4ac:	2300      	movne	r3, #0
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f4b2:	69fb      	ldr	r3, [r7, #28]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d00e      	beq.n	800f4d6 <ip4_reass+0x192>
    u16_t datagram_len = (u16_t)(offset + len);
 800f4b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f4ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f4bc:	4413      	add	r3, r2
 800f4be:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f4c0:	8b7a      	ldrh	r2, [r7, #26]
 800f4c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	f0c0 809d 	bcc.w	800f604 <ip4_reass+0x2c0>
 800f4ca:	8b7b      	ldrh	r3, [r7, #26]
 800f4cc:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f4d0:	4293      	cmp	r3, r2
 800f4d2:	f200 8097 	bhi.w	800f604 <ip4_reass+0x2c0>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f4d6:	69fa      	ldr	r2, [r7, #28]
 800f4d8:	6879      	ldr	r1, [r7, #4]
 800f4da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f4dc:	f7ff fdc8 	bl	800f070 <ip_reass_chain_frag_into_datagram_and_validate>
 800f4e0:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4e8:	f000 808e 	beq.w	800f608 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f4ec:	4b33      	ldr	r3, [pc, #204]	; (800f5bc <ip4_reass+0x278>)
 800f4ee:	881a      	ldrh	r2, [r3, #0]
 800f4f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f4f2:	4413      	add	r3, r2
 800f4f4:	b29a      	uxth	r2, r3
 800f4f6:	4b31      	ldr	r3, [pc, #196]	; (800f5bc <ip4_reass+0x278>)
 800f4f8:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f4fa:	69fb      	ldr	r3, [r7, #28]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d00d      	beq.n	800f51c <ip4_reass+0x1d8>
    u16_t datagram_len = (u16_t)(offset + len);
 800f500:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f504:	4413      	add	r3, r2
 800f506:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f50a:	8a7a      	ldrh	r2, [r7, #18]
 800f50c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f510:	7f9b      	ldrb	r3, [r3, #30]
 800f512:	f043 0301 	orr.w	r3, r3, #1
 800f516:	b2da      	uxtb	r2, r3
 800f518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f51a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d16e      	bne.n	800f600 <ip4_reass+0x2bc>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800f522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f524:	8b9b      	ldrh	r3, [r3, #28]
 800f526:	3314      	adds	r3, #20
 800f528:	b29a      	uxth	r2, r3
 800f52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f52c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800f52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800f538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f542:	3308      	adds	r3, #8
 800f544:	2214      	movs	r2, #20
 800f546:	4619      	mov	r1, r3
 800f548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f54a:	f002 f9b5 	bl	80118b8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800f54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f550:	8b9b      	ldrh	r3, [r3, #28]
 800f552:	4618      	mov	r0, r3
 800f554:	f7f7 f919 	bl	800678a <lwip_htons>
 800f558:	4603      	mov	r3, r0
 800f55a:	461a      	mov	r2, r3
 800f55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f562:	2200      	movs	r2, #0
 800f564:	719a      	strb	r2, [r3, #6]
 800f566:	2200      	movs	r2, #0
 800f568:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56c:	2200      	movs	r2, #0
 800f56e:	729a      	strb	r2, [r3, #10]
 800f570:	2200      	movs	r2, #0
 800f572:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f57a:	e00e      	b.n	800f59a <ip4_reass+0x256>
      iprh = (struct ip_reass_helper*)r->payload;
 800f57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f57e:	685b      	ldr	r3, [r3, #4]
 800f580:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800f582:	f06f 0113 	mvn.w	r1, #19
 800f586:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f588:	f7f8 faac 	bl	8007ae4 <pbuf_header>
      pbuf_cat(p, r);
 800f58c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f7f8 fb98 	bl	8007cc4 <pbuf_cat>
      r = iprh->next_pbuf;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d1ed      	bne.n	800f57c <ip4_reass+0x238>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f5a0:	4b07      	ldr	r3, [pc, #28]	; (800f5c0 <ip4_reass+0x27c>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d102      	bne.n	800f5b0 <ip4_reass+0x26c>
      ipr_prev = NULL;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5ae:	e016      	b.n	800f5de <ip4_reass+0x29a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f5b0:	4b03      	ldr	r3, [pc, #12]	; (800f5c0 <ip4_reass+0x27c>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5b6:	e00d      	b.n	800f5d4 <ip4_reass+0x290>
 800f5b8:	20006e84 	.word	0x20006e84
 800f5bc:	200070b4 	.word	0x200070b4
 800f5c0:	200070b0 	.word	0x200070b0
        if (ipr_prev->next == ipr) {
 800f5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d006      	beq.n	800f5dc <ip4_reass+0x298>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d1f4      	bne.n	800f5c4 <ip4_reass+0x280>
 800f5da:	e000      	b.n	800f5de <ip4_reass+0x29a>
          break;
 800f5dc:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f5de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f5e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5e2:	f7ff fd17 	bl	800f014 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f7f8 fb34 	bl	8007c54 <pbuf_clen>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	4b0d      	ldr	r3, [pc, #52]	; (800f628 <ip4_reass+0x2e4>)
 800f5f2:	881b      	ldrh	r3, [r3, #0]
 800f5f4:	1a9b      	subs	r3, r3, r2
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	4b0b      	ldr	r3, [pc, #44]	; (800f628 <ip4_reass+0x2e4>)
 800f5fa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	e00e      	b.n	800f61e <ip4_reass+0x2da>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f600:	2300      	movs	r3, #0
 800f602:	e00c      	b.n	800f61e <ip4_reass+0x2da>
      goto nullreturn;
 800f604:	bf00      	nop
 800f606:	e000      	b.n	800f60a <ip4_reass+0x2c6>
    goto nullreturn;
 800f608:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 800f60a:	4b08      	ldr	r3, [pc, #32]	; (800f62c <ip4_reass+0x2e8>)
 800f60c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f60e:	3301      	adds	r3, #1
 800f610:	b29a      	uxth	r2, r3
 800f612:	4b06      	ldr	r3, [pc, #24]	; (800f62c <ip4_reass+0x2e8>)
 800f614:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f7f8 fa88 	bl	8007b2c <pbuf_free>
  return NULL;
 800f61c:	2300      	movs	r3, #0
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3738      	adds	r7, #56	; 0x38
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
 800f626:	bf00      	nop
 800f628:	200070b4 	.word	0x200070b4
 800f62c:	20006e84 	.word	0x20006e84

0800f630 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800f634:	2005      	movs	r0, #5
 800f636:	f7f7 fce9 	bl	800700c <memp_malloc>
 800f63a:	4603      	mov	r3, r0
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d106      	bne.n	800f65c <ip_frag_free_pbuf_custom_ref+0x1c>
 800f64e:	4b07      	ldr	r3, [pc, #28]	; (800f66c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f650:	f240 22ae 	movw	r2, #686	; 0x2ae
 800f654:	4906      	ldr	r1, [pc, #24]	; (800f670 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f656:	4807      	ldr	r0, [pc, #28]	; (800f674 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f658:	f002 ffb2 	bl	80125c0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f65c:	6879      	ldr	r1, [r7, #4]
 800f65e:	2005      	movs	r0, #5
 800f660:	f7f7 fd26 	bl	80070b0 <memp_free>
}
 800f664:	bf00      	nop
 800f666:	3708      	adds	r7, #8
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}
 800f66c:	08017cb0 	.word	0x08017cb0
 800f670:	08017e18 	.word	0x08017e18
 800f674:	08017cf8 	.word	0x08017cf8

0800f678 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b084      	sub	sp, #16
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d106      	bne.n	800f698 <ipfrag_free_pbuf_custom+0x20>
 800f68a:	4b11      	ldr	r3, [pc, #68]	; (800f6d0 <ipfrag_free_pbuf_custom+0x58>)
 800f68c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800f690:	4910      	ldr	r1, [pc, #64]	; (800f6d4 <ipfrag_free_pbuf_custom+0x5c>)
 800f692:	4811      	ldr	r0, [pc, #68]	; (800f6d8 <ipfrag_free_pbuf_custom+0x60>)
 800f694:	f002 ff94 	bl	80125c0 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800f698:	68fa      	ldr	r2, [r7, #12]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d006      	beq.n	800f6ae <ipfrag_free_pbuf_custom+0x36>
 800f6a0:	4b0b      	ldr	r3, [pc, #44]	; (800f6d0 <ipfrag_free_pbuf_custom+0x58>)
 800f6a2:	f240 22b9 	movw	r2, #697	; 0x2b9
 800f6a6:	490d      	ldr	r1, [pc, #52]	; (800f6dc <ipfrag_free_pbuf_custom+0x64>)
 800f6a8:	480b      	ldr	r0, [pc, #44]	; (800f6d8 <ipfrag_free_pbuf_custom+0x60>)
 800f6aa:	f002 ff89 	bl	80125c0 <iprintf>
  if (pcr->original != NULL) {
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	695b      	ldr	r3, [r3, #20]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d004      	beq.n	800f6c0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	695b      	ldr	r3, [r3, #20]
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7f8 fa36 	bl	8007b2c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f6c0:	68f8      	ldr	r0, [r7, #12]
 800f6c2:	f7ff ffbd 	bl	800f640 <ip_frag_free_pbuf_custom_ref>
}
 800f6c6:	bf00      	nop
 800f6c8:	3710      	adds	r7, #16
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}
 800f6ce:	bf00      	nop
 800f6d0:	08017cb0 	.word	0x08017cb0
 800f6d4:	08017e24 	.word	0x08017e24
 800f6d8:	08017cf8 	.word	0x08017cf8
 800f6dc:	08017e30 	.word	0x08017e30

0800f6e0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b092      	sub	sp, #72	; 0x48
 800f6e4:	af02      	add	r7, sp, #8
 800f6e6:	60f8      	str	r0, [r7, #12]
 800f6e8:	60b9      	str	r1, [r7, #8]
 800f6ea:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f6f4:	3b14      	subs	r3, #20
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	da00      	bge.n	800f6fc <ip4_frag+0x1c>
 800f6fa:	3307      	adds	r3, #7
 800f6fc:	10db      	asrs	r3, r3, #3
 800f6fe:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f700:	2314      	movs	r3, #20
 800f702:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800f70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f70c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800f70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	f003 030f 	and.w	r3, r3, #15
 800f716:	009b      	lsls	r3, r3, #2
 800f718:	2b14      	cmp	r3, #20
 800f71a:	d009      	beq.n	800f730 <ip4_frag+0x50>
 800f71c:	4b7d      	ldr	r3, [pc, #500]	; (800f914 <ip4_frag+0x234>)
 800f71e:	f240 22e1 	movw	r2, #737	; 0x2e1
 800f722:	497d      	ldr	r1, [pc, #500]	; (800f918 <ip4_frag+0x238>)
 800f724:	487d      	ldr	r0, [pc, #500]	; (800f91c <ip4_frag+0x23c>)
 800f726:	f002 ff4b 	bl	80125c0 <iprintf>
 800f72a:	f06f 0305 	mvn.w	r3, #5
 800f72e:	e0ec      	b.n	800f90a <ip4_frag+0x22a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f732:	88db      	ldrh	r3, [r3, #6]
 800f734:	b29b      	uxth	r3, r3
 800f736:	4618      	mov	r0, r3
 800f738:	f7f7 f827 	bl	800678a <lwip_htons>
 800f73c:	4603      	mov	r3, r0
 800f73e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800f740:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f742:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f746:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800f748:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f74a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d009      	beq.n	800f766 <ip4_frag+0x86>
 800f752:	4b70      	ldr	r3, [pc, #448]	; (800f914 <ip4_frag+0x234>)
 800f754:	f240 22e6 	movw	r2, #742	; 0x2e6
 800f758:	4971      	ldr	r1, [pc, #452]	; (800f920 <ip4_frag+0x240>)
 800f75a:	4870      	ldr	r0, [pc, #448]	; (800f91c <ip4_frag+0x23c>)
 800f75c:	f002 ff30 	bl	80125c0 <iprintf>
 800f760:	f06f 0305 	mvn.w	r3, #5
 800f764:	e0d1      	b.n	800f90a <ip4_frag+0x22a>

  left = p->tot_len - IP_HLEN;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	891b      	ldrh	r3, [r3, #8]
 800f76a:	3b14      	subs	r3, #20
 800f76c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800f76e:	e0c3      	b.n	800f8f8 <ip4_frag+0x218>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800f770:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f772:	00da      	lsls	r2, r3, #3
 800f774:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f776:	4293      	cmp	r3, r2
 800f778:	bfa8      	it	ge
 800f77a:	4613      	movge	r3, r2
 800f77c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f77e:	2200      	movs	r2, #0
 800f780:	2114      	movs	r1, #20
 800f782:	2002      	movs	r0, #2
 800f784:	f7f7 fe5a 	bl	800743c <pbuf_alloc>
 800f788:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800f78a:	6a3b      	ldr	r3, [r7, #32]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f000 80b9 	beq.w	800f904 <ip4_frag+0x224>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	895b      	ldrh	r3, [r3, #10]
 800f796:	2b13      	cmp	r3, #19
 800f798:	d806      	bhi.n	800f7a8 <ip4_frag+0xc8>
 800f79a:	4b5e      	ldr	r3, [pc, #376]	; (800f914 <ip4_frag+0x234>)
 800f79c:	f44f 7242 	mov.w	r2, #776	; 0x308
 800f7a0:	4960      	ldr	r1, [pc, #384]	; (800f924 <ip4_frag+0x244>)
 800f7a2:	485e      	ldr	r0, [pc, #376]	; (800f91c <ip4_frag+0x23c>)
 800f7a4:	f002 ff0c 	bl	80125c0 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f7a8:	6a3b      	ldr	r3, [r7, #32]
 800f7aa:	685b      	ldr	r3, [r3, #4]
 800f7ac:	2214      	movs	r2, #20
 800f7ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f002 f881 	bl	80118b8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f7b6:	6a3b      	ldr	r3, [r7, #32]
 800f7b8:	685b      	ldr	r3, [r3, #4]
 800f7ba:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800f7bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f7be:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800f7c0:	e04f      	b.n	800f862 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	895a      	ldrh	r2, [r3, #10]
 800f7c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f7c8:	1ad3      	subs	r3, r2, r3
 800f7ca:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f7cc:	8b7a      	ldrh	r2, [r7, #26]
 800f7ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	bf28      	it	cs
 800f7d4:	4613      	movcs	r3, r2
 800f7d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f7d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d105      	bne.n	800f7ea <ip4_frag+0x10a>
        poff = 0;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	60fb      	str	r3, [r7, #12]
        continue;
 800f7e8:	e03b      	b.n	800f862 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f7ea:	f7ff ff21 	bl	800f630 <ip_frag_alloc_pbuf_custom_ref>
 800f7ee:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d103      	bne.n	800f7fe <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800f7f6:	6a38      	ldr	r0, [r7, #32]
 800f7f8:	f7f8 f998 	bl	8007b2c <pbuf_free>
        goto memerr;
 800f7fc:	e083      	b.n	800f906 <ip4_frag+0x226>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f7fe:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f804:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f806:	4413      	add	r3, r2
 800f808:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800f80a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f80c:	9201      	str	r2, [sp, #4]
 800f80e:	9300      	str	r3, [sp, #0]
 800f810:	4603      	mov	r3, r0
 800f812:	2202      	movs	r2, #2
 800f814:	2004      	movs	r0, #4
 800f816:	f7f7 ffab 	bl	8007770 <pbuf_alloced_custom>
 800f81a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800f81c:	693b      	ldr	r3, [r7, #16]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d106      	bne.n	800f830 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f822:	6978      	ldr	r0, [r7, #20]
 800f824:	f7ff ff0c 	bl	800f640 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f828:	6a38      	ldr	r0, [r7, #32]
 800f82a:	f7f8 f97f 	bl	8007b2c <pbuf_free>
        goto memerr;
 800f82e:	e06a      	b.n	800f906 <ip4_frag+0x226>
      }
      pbuf_ref(p);
 800f830:	68f8      	ldr	r0, [r7, #12]
 800f832:	f7f8 fa25 	bl	8007c80 <pbuf_ref>
      pcr->original = p;
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	68fa      	ldr	r2, [r7, #12]
 800f83a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	4a3a      	ldr	r2, [pc, #232]	; (800f928 <ip4_frag+0x248>)
 800f840:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f842:	6939      	ldr	r1, [r7, #16]
 800f844:	6a38      	ldr	r0, [r7, #32]
 800f846:	f7f8 fa3d 	bl	8007cc4 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800f84a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800f84c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f84e:	1ad3      	subs	r3, r2, r3
 800f850:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800f852:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f854:	2b00      	cmp	r3, #0
 800f856:	d004      	beq.n	800f862 <ip4_frag+0x182>
        poff = 0;
 800f858:	2300      	movs	r3, #0
 800f85a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f862:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f864:	2b00      	cmp	r3, #0
 800f866:	d1ac      	bne.n	800f7c2 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800f868:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f86a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f86c:	4413      	add	r3, r2
 800f86e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f874:	f1a3 0213 	sub.w	r2, r3, #19
 800f878:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f87a:	429a      	cmp	r2, r3
 800f87c:	bfcc      	ite	gt
 800f87e:	2301      	movgt	r3, #1
 800f880:	2300      	movle	r3, #0
 800f882:	b2db      	uxtb	r3, r3
 800f884:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f886:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f888:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f88c:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800f88e:	69fb      	ldr	r3, [r7, #28]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d103      	bne.n	800f89c <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 800f894:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f896:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f89a:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f89c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7f6 ff73 	bl	800678a <lwip_htons>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8aa:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800f8ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f8ae:	3314      	adds	r3, #20
 800f8b0:	b29b      	uxth	r3, r3
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7f6 ff69 	bl	800678a <lwip_htons>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	461a      	mov	r2, r3
 800f8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8be:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	729a      	strb	r2, [r3, #10]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	695b      	ldr	r3, [r3, #20]
 800f8ce:	687a      	ldr	r2, [r7, #4]
 800f8d0:	6a39      	ldr	r1, [r7, #32]
 800f8d2:	68b8      	ldr	r0, [r7, #8]
 800f8d4:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 800f8d6:	4b15      	ldr	r3, [pc, #84]	; (800f92c <ip4_frag+0x24c>)
 800f8d8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800f8da:	3301      	adds	r3, #1
 800f8dc:	b29a      	uxth	r2, r3
 800f8de:	4b13      	ldr	r3, [pc, #76]	; (800f92c <ip4_frag+0x24c>)
 800f8e0:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f8e2:	6a38      	ldr	r0, [r7, #32]
 800f8e4:	f7f8 f922 	bl	8007b2c <pbuf_free>
    left -= fragsize;
 800f8e8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f8ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f8ec:	1ad3      	subs	r3, r2, r3
 800f8ee:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800f8f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f8f2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f8f4:	4413      	add	r3, r2
 800f8f6:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800f8f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	f47f af38 	bne.w	800f770 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f900:	2300      	movs	r3, #0
 800f902:	e002      	b.n	800f90a <ip4_frag+0x22a>
      goto memerr;
 800f904:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3740      	adds	r7, #64	; 0x40
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
 800f912:	bf00      	nop
 800f914:	08017cb0 	.word	0x08017cb0
 800f918:	08017e3c 	.word	0x08017e3c
 800f91c:	08017cf8 	.word	0x08017cf8
 800f920:	08017e64 	.word	0x08017e64
 800f924:	08017e80 	.word	0x08017e80
 800f928:	0800f679 	.word	0x0800f679
 800f92c:	20006e84 	.word	0x20006e84

0800f930 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b086      	sub	sp, #24
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800f93a:	230e      	movs	r3, #14
 800f93c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	895b      	ldrh	r3, [r3, #10]
 800f942:	2b0e      	cmp	r3, #14
 800f944:	d80c      	bhi.n	800f960 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 800f946:	4b56      	ldr	r3, [pc, #344]	; (800faa0 <ethernet_input+0x170>)
 800f948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f94a:	3301      	adds	r3, #1
 800f94c:	b29a      	uxth	r2, r3
 800f94e:	4b54      	ldr	r3, [pc, #336]	; (800faa0 <ethernet_input+0x170>)
 800f950:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 800f952:	4b53      	ldr	r3, [pc, #332]	; (800faa0 <ethernet_input+0x170>)
 800f954:	8bdb      	ldrh	r3, [r3, #30]
 800f956:	3301      	adds	r3, #1
 800f958:	b29a      	uxth	r2, r3
 800f95a:	4b51      	ldr	r3, [pc, #324]	; (800faa0 <ethernet_input+0x170>)
 800f95c:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 800f95e:	e096      	b.n	800fa8e <ethernet_input+0x15e>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	7b1a      	ldrb	r2, [r3, #12]
 800f96a:	7b5b      	ldrb	r3, [r3, #13]
 800f96c:	021b      	lsls	r3, r3, #8
 800f96e:	4313      	orrs	r3, r2
 800f970:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	f003 0301 	and.w	r3, r3, #1
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d023      	beq.n	800f9c6 <ethernet_input+0x96>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f97e:	693b      	ldr	r3, [r7, #16]
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	2b01      	cmp	r3, #1
 800f984:	d10f      	bne.n	800f9a6 <ethernet_input+0x76>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	785b      	ldrb	r3, [r3, #1]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d11b      	bne.n	800f9c6 <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f992:	2b5e      	cmp	r3, #94	; 0x5e
 800f994:	d117      	bne.n	800f9c6 <ethernet_input+0x96>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	7b5b      	ldrb	r3, [r3, #13]
 800f99a:	f043 0310 	orr.w	r3, r3, #16
 800f99e:	b2da      	uxtb	r2, r3
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	735a      	strb	r2, [r3, #13]
 800f9a4:	e00f      	b.n	800f9c6 <ethernet_input+0x96>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	2206      	movs	r2, #6
 800f9aa:	493e      	ldr	r1, [pc, #248]	; (800faa4 <ethernet_input+0x174>)
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f001 ff73 	bl	8011898 <memcmp>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d106      	bne.n	800f9c6 <ethernet_input+0x96>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	7b5b      	ldrb	r3, [r3, #13]
 800f9bc:	f043 0308 	orr.w	r3, r3, #8
 800f9c0:	b2da      	uxtb	r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f9c6:	89fb      	ldrh	r3, [r7, #14]
 800f9c8:	2b08      	cmp	r3, #8
 800f9ca:	d003      	beq.n	800f9d4 <ethernet_input+0xa4>
 800f9cc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f9d0:	d01e      	beq.n	800fa10 <ethernet_input+0xe0>
 800f9d2:	e048      	b.n	800fa66 <ethernet_input+0x136>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f9da:	f003 0308 	and.w	r3, r3, #8
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d050      	beq.n	800fa84 <ethernet_input+0x154>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	895b      	ldrh	r3, [r3, #10]
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	db4b      	blt.n	800fa88 <ethernet_input+0x158>
 800f9f0:	8afb      	ldrh	r3, [r7, #22]
 800f9f2:	425b      	negs	r3, r3
 800f9f4:	b29b      	uxth	r3, r3
 800f9f6:	b21b      	sxth	r3, r3
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f7f8 f872 	bl	8007ae4 <pbuf_header>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d140      	bne.n	800fa88 <ethernet_input+0x158>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 800fa06:	6839      	ldr	r1, [r7, #0]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f7fe fedd 	bl	800e7c8 <ip4_input>
      }
      break;
 800fa0e:	e037      	b.n	800fa80 <ethernet_input+0x150>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fa16:	f003 0308 	and.w	r3, r3, #8
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d036      	beq.n	800fa8c <ethernet_input+0x15c>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	895b      	ldrh	r3, [r3, #10]
 800fa22:	461a      	mov	r2, r3
 800fa24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	db0a      	blt.n	800fa42 <ethernet_input+0x112>
 800fa2c:	8afb      	ldrh	r3, [r7, #22]
 800fa2e:	425b      	negs	r3, r3
 800fa30:	b29b      	uxth	r3, r3
 800fa32:	b21b      	sxth	r3, r3
 800fa34:	4619      	mov	r1, r3
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f7f8 f854 	bl	8007ae4 <pbuf_header>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d00c      	beq.n	800fa5c <ethernet_input+0x12c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
          ("ethernet_input: ARP response packet dropped, too short (%"S16_F"/%"S16_F")\n",
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 800fa42:	4b17      	ldr	r3, [pc, #92]	; (800faa0 <ethernet_input+0x170>)
 800fa44:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800fa46:	3301      	adds	r3, #1
 800fa48:	b29a      	uxth	r2, r3
 800fa4a:	4b15      	ldr	r3, [pc, #84]	; (800faa0 <ethernet_input+0x170>)
 800fa4c:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 800fa4e:	4b14      	ldr	r3, [pc, #80]	; (800faa0 <ethernet_input+0x170>)
 800fa50:	8bdb      	ldrh	r3, [r3, #30]
 800fa52:	3301      	adds	r3, #1
 800fa54:	b29a      	uxth	r2, r3
 800fa56:	4b12      	ldr	r3, [pc, #72]	; (800faa0 <ethernet_input+0x170>)
 800fa58:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 800fa5a:	e018      	b.n	800fa8e <ethernet_input+0x15e>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 800fa5c:	6839      	ldr	r1, [r7, #0]
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f7fe f816 	bl	800da90 <etharp_input>
      }
      break;
 800fa64:	e00c      	b.n	800fa80 <ethernet_input+0x150>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 800fa66:	4b0e      	ldr	r3, [pc, #56]	; (800faa0 <ethernet_input+0x170>)
 800fa68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	b29a      	uxth	r2, r3
 800fa6e:	4b0c      	ldr	r3, [pc, #48]	; (800faa0 <ethernet_input+0x170>)
 800fa70:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 800fa72:	4b0b      	ldr	r3, [pc, #44]	; (800faa0 <ethernet_input+0x170>)
 800fa74:	8bdb      	ldrh	r3, [r3, #30]
 800fa76:	3301      	adds	r3, #1
 800fa78:	b29a      	uxth	r2, r3
 800fa7a:	4b09      	ldr	r3, [pc, #36]	; (800faa0 <ethernet_input+0x170>)
 800fa7c:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800fa7e:	e006      	b.n	800fa8e <ethernet_input+0x15e>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fa80:	2300      	movs	r3, #0
 800fa82:	e008      	b.n	800fa96 <ethernet_input+0x166>
        goto free_and_return;
 800fa84:	bf00      	nop
 800fa86:	e002      	b.n	800fa8e <ethernet_input+0x15e>
        goto free_and_return;
 800fa88:	bf00      	nop
 800fa8a:	e000      	b.n	800fa8e <ethernet_input+0x15e>
        goto free_and_return;
 800fa8c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f7f8 f84c 	bl	8007b2c <pbuf_free>
  return ERR_OK;
 800fa94:	2300      	movs	r3, #0
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	3718      	adds	r7, #24
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}
 800fa9e:	bf00      	nop
 800faa0:	20006e84 	.word	0x20006e84
 800faa4:	08018044 	.word	0x08018044

0800faa8 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b086      	sub	sp, #24
 800faac:	af00      	add	r7, sp, #0
 800faae:	60f8      	str	r0, [r7, #12]
 800fab0:	60b9      	str	r1, [r7, #8]
 800fab2:	607a      	str	r2, [r7, #4]
 800fab4:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fab6:	8c3b      	ldrh	r3, [r7, #32]
 800fab8:	4618      	mov	r0, r3
 800faba:	f7f6 fe66 	bl	800678a <lwip_htons>
 800fabe:	4603      	mov	r3, r0
 800fac0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800fac2:	210e      	movs	r1, #14
 800fac4:	68b8      	ldr	r0, [r7, #8]
 800fac6:	f7f8 f80d 	bl	8007ae4 <pbuf_header>
 800faca:	4603      	mov	r3, r0
 800facc:	2b00      	cmp	r3, #0
 800face:	d125      	bne.n	800fb1c <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	685b      	ldr	r3, [r3, #4]
 800fad4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800fad6:	693b      	ldr	r3, [r7, #16]
 800fad8:	8afa      	ldrh	r2, [r7, #22]
 800fada:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800fadc:	693b      	ldr	r3, [r7, #16]
 800fade:	2206      	movs	r2, #6
 800fae0:	6839      	ldr	r1, [r7, #0]
 800fae2:	4618      	mov	r0, r3
 800fae4:	f001 fee8 	bl	80118b8 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	3306      	adds	r3, #6
 800faec:	2206      	movs	r2, #6
 800faee:	6879      	ldr	r1, [r7, #4]
 800faf0:	4618      	mov	r0, r3
 800faf2:	f001 fee1 	bl	80118b8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fafc:	2b06      	cmp	r3, #6
 800fafe:	d006      	beq.n	800fb0e <ethernet_output+0x66>
 800fb00:	4b0d      	ldr	r3, [pc, #52]	; (800fb38 <ethernet_output+0x90>)
 800fb02:	f240 122b 	movw	r2, #299	; 0x12b
 800fb06:	490d      	ldr	r1, [pc, #52]	; (800fb3c <ethernet_output+0x94>)
 800fb08:	480d      	ldr	r0, [pc, #52]	; (800fb40 <ethernet_output+0x98>)
 800fb0a:	f002 fd59 	bl	80125c0 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	699b      	ldr	r3, [r3, #24]
 800fb12:	68b9      	ldr	r1, [r7, #8]
 800fb14:	68f8      	ldr	r0, [r7, #12]
 800fb16:	4798      	blx	r3
 800fb18:	4603      	mov	r3, r0
 800fb1a:	e008      	b.n	800fb2e <ethernet_output+0x86>
      goto pbuf_header_failed;
 800fb1c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 800fb1e:	4b09      	ldr	r3, [pc, #36]	; (800fb44 <ethernet_output+0x9c>)
 800fb20:	895b      	ldrh	r3, [r3, #10]
 800fb22:	3301      	adds	r3, #1
 800fb24:	b29a      	uxth	r2, r3
 800fb26:	4b07      	ldr	r3, [pc, #28]	; (800fb44 <ethernet_output+0x9c>)
 800fb28:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 800fb2a:	f06f 0301 	mvn.w	r3, #1
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3718      	adds	r7, #24
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}
 800fb36:	bf00      	nop
 800fb38:	08017ea0 	.word	0x08017ea0
 800fb3c:	08017ed8 	.word	0x08017ed8
 800fb40:	08017f0c 	.word	0x08017f0c
 800fb44:	20006e84 	.word	0x20006e84

0800fb48 <cos>:
 800fb48:	b530      	push	{r4, r5, lr}
 800fb4a:	4a20      	ldr	r2, [pc, #128]	; (800fbcc <cos+0x84>)
 800fb4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fb50:	4293      	cmp	r3, r2
 800fb52:	b087      	sub	sp, #28
 800fb54:	dc06      	bgt.n	800fb64 <cos+0x1c>
 800fb56:	2200      	movs	r2, #0
 800fb58:	2300      	movs	r3, #0
 800fb5a:	b007      	add	sp, #28
 800fb5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb60:	f001 b886 	b.w	8010c70 <__kernel_cos>
 800fb64:	4a1a      	ldr	r2, [pc, #104]	; (800fbd0 <cos+0x88>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	dd05      	ble.n	800fb76 <cos+0x2e>
 800fb6a:	4602      	mov	r2, r0
 800fb6c:	460b      	mov	r3, r1
 800fb6e:	f7f0 fb41 	bl	80001f4 <__aeabi_dsub>
 800fb72:	b007      	add	sp, #28
 800fb74:	bd30      	pop	{r4, r5, pc}
 800fb76:	aa02      	add	r2, sp, #8
 800fb78:	f000 fdd2 	bl	8010720 <__ieee754_rem_pio2>
 800fb7c:	f000 0003 	and.w	r0, r0, #3
 800fb80:	2801      	cmp	r0, #1
 800fb82:	d009      	beq.n	800fb98 <cos+0x50>
 800fb84:	2802      	cmp	r0, #2
 800fb86:	d011      	beq.n	800fbac <cos+0x64>
 800fb88:	b9b8      	cbnz	r0, 800fbba <cos+0x72>
 800fb8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb92:	f001 f86d 	bl	8010c70 <__kernel_cos>
 800fb96:	e7ec      	b.n	800fb72 <cos+0x2a>
 800fb98:	9000      	str	r0, [sp, #0]
 800fb9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fba2:	f001 fc65 	bl	8011470 <__kernel_sin>
 800fba6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800fbaa:	e7e2      	b.n	800fb72 <cos+0x2a>
 800fbac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fbb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbb4:	f001 f85c 	bl	8010c70 <__kernel_cos>
 800fbb8:	e7f5      	b.n	800fba6 <cos+0x5e>
 800fbba:	2301      	movs	r3, #1
 800fbbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbc0:	9300      	str	r3, [sp, #0]
 800fbc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fbc6:	f001 fc53 	bl	8011470 <__kernel_sin>
 800fbca:	e7d2      	b.n	800fb72 <cos+0x2a>
 800fbcc:	3fe921fb 	.word	0x3fe921fb
 800fbd0:	7fefffff 	.word	0x7fefffff

0800fbd4 <pow>:
 800fbd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbd8:	4614      	mov	r4, r2
 800fbda:	461d      	mov	r5, r3
 800fbdc:	4680      	mov	r8, r0
 800fbde:	4689      	mov	r9, r1
 800fbe0:	f000 f886 	bl	800fcf0 <__ieee754_pow>
 800fbe4:	4622      	mov	r2, r4
 800fbe6:	4606      	mov	r6, r0
 800fbe8:	460f      	mov	r7, r1
 800fbea:	462b      	mov	r3, r5
 800fbec:	4620      	mov	r0, r4
 800fbee:	4629      	mov	r1, r5
 800fbf0:	f7f0 ff52 	bl	8000a98 <__aeabi_dcmpun>
 800fbf4:	bbc8      	cbnz	r0, 800fc6a <pow+0x96>
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	4640      	mov	r0, r8
 800fbfc:	4649      	mov	r1, r9
 800fbfe:	f7f0 ff19 	bl	8000a34 <__aeabi_dcmpeq>
 800fc02:	b1b8      	cbz	r0, 800fc34 <pow+0x60>
 800fc04:	2200      	movs	r2, #0
 800fc06:	2300      	movs	r3, #0
 800fc08:	4620      	mov	r0, r4
 800fc0a:	4629      	mov	r1, r5
 800fc0c:	f7f0 ff12 	bl	8000a34 <__aeabi_dcmpeq>
 800fc10:	2800      	cmp	r0, #0
 800fc12:	d141      	bne.n	800fc98 <pow+0xc4>
 800fc14:	4620      	mov	r0, r4
 800fc16:	4629      	mov	r1, r5
 800fc18:	f001 fd0f 	bl	801163a <finite>
 800fc1c:	b328      	cbz	r0, 800fc6a <pow+0x96>
 800fc1e:	2200      	movs	r2, #0
 800fc20:	2300      	movs	r3, #0
 800fc22:	4620      	mov	r0, r4
 800fc24:	4629      	mov	r1, r5
 800fc26:	f7f0 ff0f 	bl	8000a48 <__aeabi_dcmplt>
 800fc2a:	b1f0      	cbz	r0, 800fc6a <pow+0x96>
 800fc2c:	f001 fe0a 	bl	8011844 <__errno>
 800fc30:	2322      	movs	r3, #34	; 0x22
 800fc32:	e019      	b.n	800fc68 <pow+0x94>
 800fc34:	4630      	mov	r0, r6
 800fc36:	4639      	mov	r1, r7
 800fc38:	f001 fcff 	bl	801163a <finite>
 800fc3c:	b9c8      	cbnz	r0, 800fc72 <pow+0x9e>
 800fc3e:	4640      	mov	r0, r8
 800fc40:	4649      	mov	r1, r9
 800fc42:	f001 fcfa 	bl	801163a <finite>
 800fc46:	b1a0      	cbz	r0, 800fc72 <pow+0x9e>
 800fc48:	4620      	mov	r0, r4
 800fc4a:	4629      	mov	r1, r5
 800fc4c:	f001 fcf5 	bl	801163a <finite>
 800fc50:	b178      	cbz	r0, 800fc72 <pow+0x9e>
 800fc52:	4632      	mov	r2, r6
 800fc54:	463b      	mov	r3, r7
 800fc56:	4630      	mov	r0, r6
 800fc58:	4639      	mov	r1, r7
 800fc5a:	f7f0 ff1d 	bl	8000a98 <__aeabi_dcmpun>
 800fc5e:	2800      	cmp	r0, #0
 800fc60:	d0e4      	beq.n	800fc2c <pow+0x58>
 800fc62:	f001 fdef 	bl	8011844 <__errno>
 800fc66:	2321      	movs	r3, #33	; 0x21
 800fc68:	6003      	str	r3, [r0, #0]
 800fc6a:	4630      	mov	r0, r6
 800fc6c:	4639      	mov	r1, r7
 800fc6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc72:	2200      	movs	r2, #0
 800fc74:	2300      	movs	r3, #0
 800fc76:	4630      	mov	r0, r6
 800fc78:	4639      	mov	r1, r7
 800fc7a:	f7f0 fedb 	bl	8000a34 <__aeabi_dcmpeq>
 800fc7e:	2800      	cmp	r0, #0
 800fc80:	d0f3      	beq.n	800fc6a <pow+0x96>
 800fc82:	4640      	mov	r0, r8
 800fc84:	4649      	mov	r1, r9
 800fc86:	f001 fcd8 	bl	801163a <finite>
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	d0ed      	beq.n	800fc6a <pow+0x96>
 800fc8e:	4620      	mov	r0, r4
 800fc90:	4629      	mov	r1, r5
 800fc92:	f001 fcd2 	bl	801163a <finite>
 800fc96:	e7c8      	b.n	800fc2a <pow+0x56>
 800fc98:	2600      	movs	r6, #0
 800fc9a:	4f01      	ldr	r7, [pc, #4]	; (800fca0 <pow+0xcc>)
 800fc9c:	e7e5      	b.n	800fc6a <pow+0x96>
 800fc9e:	bf00      	nop
 800fca0:	3ff00000 	.word	0x3ff00000

0800fca4 <sqrt>:
 800fca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fca6:	4606      	mov	r6, r0
 800fca8:	460f      	mov	r7, r1
 800fcaa:	f000 ff31 	bl	8010b10 <__ieee754_sqrt>
 800fcae:	4632      	mov	r2, r6
 800fcb0:	4604      	mov	r4, r0
 800fcb2:	460d      	mov	r5, r1
 800fcb4:	463b      	mov	r3, r7
 800fcb6:	4630      	mov	r0, r6
 800fcb8:	4639      	mov	r1, r7
 800fcba:	f7f0 feed 	bl	8000a98 <__aeabi_dcmpun>
 800fcbe:	b990      	cbnz	r0, 800fce6 <sqrt+0x42>
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	4630      	mov	r0, r6
 800fcc6:	4639      	mov	r1, r7
 800fcc8:	f7f0 febe 	bl	8000a48 <__aeabi_dcmplt>
 800fccc:	b158      	cbz	r0, 800fce6 <sqrt+0x42>
 800fcce:	f001 fdb9 	bl	8011844 <__errno>
 800fcd2:	2321      	movs	r3, #33	; 0x21
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	6003      	str	r3, [r0, #0]
 800fcd8:	2300      	movs	r3, #0
 800fcda:	4610      	mov	r0, r2
 800fcdc:	4619      	mov	r1, r3
 800fcde:	f7f0 fd6b 	bl	80007b8 <__aeabi_ddiv>
 800fce2:	4604      	mov	r4, r0
 800fce4:	460d      	mov	r5, r1
 800fce6:	4620      	mov	r0, r4
 800fce8:	4629      	mov	r1, r5
 800fcea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcec:	0000      	movs	r0, r0
	...

0800fcf0 <__ieee754_pow>:
 800fcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf4:	b093      	sub	sp, #76	; 0x4c
 800fcf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fcfa:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800fcfe:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800fd02:	4689      	mov	r9, r1
 800fd04:	ea56 0102 	orrs.w	r1, r6, r2
 800fd08:	4680      	mov	r8, r0
 800fd0a:	d111      	bne.n	800fd30 <__ieee754_pow+0x40>
 800fd0c:	1803      	adds	r3, r0, r0
 800fd0e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800fd12:	4152      	adcs	r2, r2
 800fd14:	4299      	cmp	r1, r3
 800fd16:	4b82      	ldr	r3, [pc, #520]	; (800ff20 <__ieee754_pow+0x230>)
 800fd18:	4193      	sbcs	r3, r2
 800fd1a:	f080 84b9 	bcs.w	8010690 <__ieee754_pow+0x9a0>
 800fd1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd22:	4640      	mov	r0, r8
 800fd24:	4649      	mov	r1, r9
 800fd26:	f7f0 fa67 	bl	80001f8 <__adddf3>
 800fd2a:	4683      	mov	fp, r0
 800fd2c:	468c      	mov	ip, r1
 800fd2e:	e06f      	b.n	800fe10 <__ieee754_pow+0x120>
 800fd30:	4b7c      	ldr	r3, [pc, #496]	; (800ff24 <__ieee754_pow+0x234>)
 800fd32:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800fd36:	429c      	cmp	r4, r3
 800fd38:	464d      	mov	r5, r9
 800fd3a:	4682      	mov	sl, r0
 800fd3c:	dc06      	bgt.n	800fd4c <__ieee754_pow+0x5c>
 800fd3e:	d101      	bne.n	800fd44 <__ieee754_pow+0x54>
 800fd40:	2800      	cmp	r0, #0
 800fd42:	d1ec      	bne.n	800fd1e <__ieee754_pow+0x2e>
 800fd44:	429e      	cmp	r6, r3
 800fd46:	dc01      	bgt.n	800fd4c <__ieee754_pow+0x5c>
 800fd48:	d10f      	bne.n	800fd6a <__ieee754_pow+0x7a>
 800fd4a:	b172      	cbz	r2, 800fd6a <__ieee754_pow+0x7a>
 800fd4c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800fd50:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800fd54:	ea55 050a 	orrs.w	r5, r5, sl
 800fd58:	d1e1      	bne.n	800fd1e <__ieee754_pow+0x2e>
 800fd5a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fd5e:	18db      	adds	r3, r3, r3
 800fd60:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800fd64:	4152      	adcs	r2, r2
 800fd66:	429d      	cmp	r5, r3
 800fd68:	e7d5      	b.n	800fd16 <__ieee754_pow+0x26>
 800fd6a:	2d00      	cmp	r5, #0
 800fd6c:	da39      	bge.n	800fde2 <__ieee754_pow+0xf2>
 800fd6e:	4b6e      	ldr	r3, [pc, #440]	; (800ff28 <__ieee754_pow+0x238>)
 800fd70:	429e      	cmp	r6, r3
 800fd72:	dc52      	bgt.n	800fe1a <__ieee754_pow+0x12a>
 800fd74:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800fd78:	429e      	cmp	r6, r3
 800fd7a:	f340 849c 	ble.w	80106b6 <__ieee754_pow+0x9c6>
 800fd7e:	1533      	asrs	r3, r6, #20
 800fd80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fd84:	2b14      	cmp	r3, #20
 800fd86:	dd0f      	ble.n	800fda8 <__ieee754_pow+0xb8>
 800fd88:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800fd8c:	fa22 f103 	lsr.w	r1, r2, r3
 800fd90:	fa01 f303 	lsl.w	r3, r1, r3
 800fd94:	4293      	cmp	r3, r2
 800fd96:	f040 848e 	bne.w	80106b6 <__ieee754_pow+0x9c6>
 800fd9a:	f001 0101 	and.w	r1, r1, #1
 800fd9e:	f1c1 0302 	rsb	r3, r1, #2
 800fda2:	9300      	str	r3, [sp, #0]
 800fda4:	b182      	cbz	r2, 800fdc8 <__ieee754_pow+0xd8>
 800fda6:	e05d      	b.n	800fe64 <__ieee754_pow+0x174>
 800fda8:	2a00      	cmp	r2, #0
 800fdaa:	d159      	bne.n	800fe60 <__ieee754_pow+0x170>
 800fdac:	f1c3 0314 	rsb	r3, r3, #20
 800fdb0:	fa46 f103 	asr.w	r1, r6, r3
 800fdb4:	fa01 f303 	lsl.w	r3, r1, r3
 800fdb8:	42b3      	cmp	r3, r6
 800fdba:	f040 8479 	bne.w	80106b0 <__ieee754_pow+0x9c0>
 800fdbe:	f001 0101 	and.w	r1, r1, #1
 800fdc2:	f1c1 0302 	rsb	r3, r1, #2
 800fdc6:	9300      	str	r3, [sp, #0]
 800fdc8:	4b58      	ldr	r3, [pc, #352]	; (800ff2c <__ieee754_pow+0x23c>)
 800fdca:	429e      	cmp	r6, r3
 800fdcc:	d132      	bne.n	800fe34 <__ieee754_pow+0x144>
 800fdce:	2f00      	cmp	r7, #0
 800fdd0:	f280 846a 	bge.w	80106a8 <__ieee754_pow+0x9b8>
 800fdd4:	4642      	mov	r2, r8
 800fdd6:	464b      	mov	r3, r9
 800fdd8:	2000      	movs	r0, #0
 800fdda:	4954      	ldr	r1, [pc, #336]	; (800ff2c <__ieee754_pow+0x23c>)
 800fddc:	f7f0 fcec 	bl	80007b8 <__aeabi_ddiv>
 800fde0:	e7a3      	b.n	800fd2a <__ieee754_pow+0x3a>
 800fde2:	2300      	movs	r3, #0
 800fde4:	9300      	str	r3, [sp, #0]
 800fde6:	2a00      	cmp	r2, #0
 800fde8:	d13c      	bne.n	800fe64 <__ieee754_pow+0x174>
 800fdea:	4b4e      	ldr	r3, [pc, #312]	; (800ff24 <__ieee754_pow+0x234>)
 800fdec:	429e      	cmp	r6, r3
 800fdee:	d1eb      	bne.n	800fdc8 <__ieee754_pow+0xd8>
 800fdf0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800fdf4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800fdf8:	ea53 030a 	orrs.w	r3, r3, sl
 800fdfc:	f000 8448 	beq.w	8010690 <__ieee754_pow+0x9a0>
 800fe00:	4b4b      	ldr	r3, [pc, #300]	; (800ff30 <__ieee754_pow+0x240>)
 800fe02:	429c      	cmp	r4, r3
 800fe04:	dd0b      	ble.n	800fe1e <__ieee754_pow+0x12e>
 800fe06:	2f00      	cmp	r7, #0
 800fe08:	f2c0 8448 	blt.w	801069c <__ieee754_pow+0x9ac>
 800fe0c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800fe10:	4658      	mov	r0, fp
 800fe12:	4661      	mov	r1, ip
 800fe14:	b013      	add	sp, #76	; 0x4c
 800fe16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe1a:	2302      	movs	r3, #2
 800fe1c:	e7e2      	b.n	800fde4 <__ieee754_pow+0xf4>
 800fe1e:	2f00      	cmp	r7, #0
 800fe20:	f04f 0b00 	mov.w	fp, #0
 800fe24:	f04f 0c00 	mov.w	ip, #0
 800fe28:	daf2      	bge.n	800fe10 <__ieee754_pow+0x120>
 800fe2a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800fe2e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800fe32:	e7ed      	b.n	800fe10 <__ieee754_pow+0x120>
 800fe34:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800fe38:	d106      	bne.n	800fe48 <__ieee754_pow+0x158>
 800fe3a:	4642      	mov	r2, r8
 800fe3c:	464b      	mov	r3, r9
 800fe3e:	4640      	mov	r0, r8
 800fe40:	4649      	mov	r1, r9
 800fe42:	f7f0 fb8f 	bl	8000564 <__aeabi_dmul>
 800fe46:	e770      	b.n	800fd2a <__ieee754_pow+0x3a>
 800fe48:	4b3a      	ldr	r3, [pc, #232]	; (800ff34 <__ieee754_pow+0x244>)
 800fe4a:	429f      	cmp	r7, r3
 800fe4c:	d10a      	bne.n	800fe64 <__ieee754_pow+0x174>
 800fe4e:	2d00      	cmp	r5, #0
 800fe50:	db08      	blt.n	800fe64 <__ieee754_pow+0x174>
 800fe52:	4640      	mov	r0, r8
 800fe54:	4649      	mov	r1, r9
 800fe56:	b013      	add	sp, #76	; 0x4c
 800fe58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe5c:	f000 be58 	b.w	8010b10 <__ieee754_sqrt>
 800fe60:	2300      	movs	r3, #0
 800fe62:	9300      	str	r3, [sp, #0]
 800fe64:	4640      	mov	r0, r8
 800fe66:	4649      	mov	r1, r9
 800fe68:	f001 fbe4 	bl	8011634 <fabs>
 800fe6c:	4683      	mov	fp, r0
 800fe6e:	468c      	mov	ip, r1
 800fe70:	f1ba 0f00 	cmp.w	sl, #0
 800fe74:	d128      	bne.n	800fec8 <__ieee754_pow+0x1d8>
 800fe76:	b124      	cbz	r4, 800fe82 <__ieee754_pow+0x192>
 800fe78:	4b2c      	ldr	r3, [pc, #176]	; (800ff2c <__ieee754_pow+0x23c>)
 800fe7a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d122      	bne.n	800fec8 <__ieee754_pow+0x1d8>
 800fe82:	2f00      	cmp	r7, #0
 800fe84:	da07      	bge.n	800fe96 <__ieee754_pow+0x1a6>
 800fe86:	465a      	mov	r2, fp
 800fe88:	4663      	mov	r3, ip
 800fe8a:	2000      	movs	r0, #0
 800fe8c:	4927      	ldr	r1, [pc, #156]	; (800ff2c <__ieee754_pow+0x23c>)
 800fe8e:	f7f0 fc93 	bl	80007b8 <__aeabi_ddiv>
 800fe92:	4683      	mov	fp, r0
 800fe94:	468c      	mov	ip, r1
 800fe96:	2d00      	cmp	r5, #0
 800fe98:	daba      	bge.n	800fe10 <__ieee754_pow+0x120>
 800fe9a:	9b00      	ldr	r3, [sp, #0]
 800fe9c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800fea0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fea4:	4323      	orrs	r3, r4
 800fea6:	d108      	bne.n	800feba <__ieee754_pow+0x1ca>
 800fea8:	465a      	mov	r2, fp
 800feaa:	4663      	mov	r3, ip
 800feac:	4658      	mov	r0, fp
 800feae:	4661      	mov	r1, ip
 800feb0:	f7f0 f9a0 	bl	80001f4 <__aeabi_dsub>
 800feb4:	4602      	mov	r2, r0
 800feb6:	460b      	mov	r3, r1
 800feb8:	e790      	b.n	800fddc <__ieee754_pow+0xec>
 800feba:	9b00      	ldr	r3, [sp, #0]
 800febc:	2b01      	cmp	r3, #1
 800febe:	d1a7      	bne.n	800fe10 <__ieee754_pow+0x120>
 800fec0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800fec4:	469c      	mov	ip, r3
 800fec6:	e7a3      	b.n	800fe10 <__ieee754_pow+0x120>
 800fec8:	0feb      	lsrs	r3, r5, #31
 800feca:	3b01      	subs	r3, #1
 800fecc:	930c      	str	r3, [sp, #48]	; 0x30
 800fece:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fed0:	9b00      	ldr	r3, [sp, #0]
 800fed2:	4313      	orrs	r3, r2
 800fed4:	d104      	bne.n	800fee0 <__ieee754_pow+0x1f0>
 800fed6:	4642      	mov	r2, r8
 800fed8:	464b      	mov	r3, r9
 800feda:	4640      	mov	r0, r8
 800fedc:	4649      	mov	r1, r9
 800fede:	e7e7      	b.n	800feb0 <__ieee754_pow+0x1c0>
 800fee0:	4b15      	ldr	r3, [pc, #84]	; (800ff38 <__ieee754_pow+0x248>)
 800fee2:	429e      	cmp	r6, r3
 800fee4:	f340 80f6 	ble.w	80100d4 <__ieee754_pow+0x3e4>
 800fee8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800feec:	429e      	cmp	r6, r3
 800feee:	4b10      	ldr	r3, [pc, #64]	; (800ff30 <__ieee754_pow+0x240>)
 800fef0:	dd09      	ble.n	800ff06 <__ieee754_pow+0x216>
 800fef2:	429c      	cmp	r4, r3
 800fef4:	dc0c      	bgt.n	800ff10 <__ieee754_pow+0x220>
 800fef6:	2f00      	cmp	r7, #0
 800fef8:	da0c      	bge.n	800ff14 <__ieee754_pow+0x224>
 800fefa:	2000      	movs	r0, #0
 800fefc:	b013      	add	sp, #76	; 0x4c
 800fefe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff02:	f001 bb92 	b.w	801162a <__math_oflow>
 800ff06:	429c      	cmp	r4, r3
 800ff08:	dbf5      	blt.n	800fef6 <__ieee754_pow+0x206>
 800ff0a:	4b08      	ldr	r3, [pc, #32]	; (800ff2c <__ieee754_pow+0x23c>)
 800ff0c:	429c      	cmp	r4, r3
 800ff0e:	dd15      	ble.n	800ff3c <__ieee754_pow+0x24c>
 800ff10:	2f00      	cmp	r7, #0
 800ff12:	dcf2      	bgt.n	800fefa <__ieee754_pow+0x20a>
 800ff14:	2000      	movs	r0, #0
 800ff16:	b013      	add	sp, #76	; 0x4c
 800ff18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff1c:	f001 bb80 	b.w	8011620 <__math_uflow>
 800ff20:	fff00000 	.word	0xfff00000
 800ff24:	7ff00000 	.word	0x7ff00000
 800ff28:	433fffff 	.word	0x433fffff
 800ff2c:	3ff00000 	.word	0x3ff00000
 800ff30:	3fefffff 	.word	0x3fefffff
 800ff34:	3fe00000 	.word	0x3fe00000
 800ff38:	41e00000 	.word	0x41e00000
 800ff3c:	4661      	mov	r1, ip
 800ff3e:	2200      	movs	r2, #0
 800ff40:	4658      	mov	r0, fp
 800ff42:	4b5f      	ldr	r3, [pc, #380]	; (80100c0 <__ieee754_pow+0x3d0>)
 800ff44:	f7f0 f956 	bl	80001f4 <__aeabi_dsub>
 800ff48:	a355      	add	r3, pc, #340	; (adr r3, 80100a0 <__ieee754_pow+0x3b0>)
 800ff4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4e:	4604      	mov	r4, r0
 800ff50:	460d      	mov	r5, r1
 800ff52:	f7f0 fb07 	bl	8000564 <__aeabi_dmul>
 800ff56:	a354      	add	r3, pc, #336	; (adr r3, 80100a8 <__ieee754_pow+0x3b8>)
 800ff58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5c:	4606      	mov	r6, r0
 800ff5e:	460f      	mov	r7, r1
 800ff60:	4620      	mov	r0, r4
 800ff62:	4629      	mov	r1, r5
 800ff64:	f7f0 fafe 	bl	8000564 <__aeabi_dmul>
 800ff68:	2200      	movs	r2, #0
 800ff6a:	4682      	mov	sl, r0
 800ff6c:	468b      	mov	fp, r1
 800ff6e:	4620      	mov	r0, r4
 800ff70:	4629      	mov	r1, r5
 800ff72:	4b54      	ldr	r3, [pc, #336]	; (80100c4 <__ieee754_pow+0x3d4>)
 800ff74:	f7f0 faf6 	bl	8000564 <__aeabi_dmul>
 800ff78:	4602      	mov	r2, r0
 800ff7a:	460b      	mov	r3, r1
 800ff7c:	a14c      	add	r1, pc, #304	; (adr r1, 80100b0 <__ieee754_pow+0x3c0>)
 800ff7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff82:	f7f0 f937 	bl	80001f4 <__aeabi_dsub>
 800ff86:	4622      	mov	r2, r4
 800ff88:	462b      	mov	r3, r5
 800ff8a:	f7f0 faeb 	bl	8000564 <__aeabi_dmul>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	460b      	mov	r3, r1
 800ff92:	2000      	movs	r0, #0
 800ff94:	494c      	ldr	r1, [pc, #304]	; (80100c8 <__ieee754_pow+0x3d8>)
 800ff96:	f7f0 f92d 	bl	80001f4 <__aeabi_dsub>
 800ff9a:	4622      	mov	r2, r4
 800ff9c:	462b      	mov	r3, r5
 800ff9e:	4680      	mov	r8, r0
 800ffa0:	4689      	mov	r9, r1
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	4629      	mov	r1, r5
 800ffa6:	f7f0 fadd 	bl	8000564 <__aeabi_dmul>
 800ffaa:	4602      	mov	r2, r0
 800ffac:	460b      	mov	r3, r1
 800ffae:	4640      	mov	r0, r8
 800ffb0:	4649      	mov	r1, r9
 800ffb2:	f7f0 fad7 	bl	8000564 <__aeabi_dmul>
 800ffb6:	a340      	add	r3, pc, #256	; (adr r3, 80100b8 <__ieee754_pow+0x3c8>)
 800ffb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffbc:	f7f0 fad2 	bl	8000564 <__aeabi_dmul>
 800ffc0:	4602      	mov	r2, r0
 800ffc2:	460b      	mov	r3, r1
 800ffc4:	4650      	mov	r0, sl
 800ffc6:	4659      	mov	r1, fp
 800ffc8:	f7f0 f914 	bl	80001f4 <__aeabi_dsub>
 800ffcc:	f04f 0a00 	mov.w	sl, #0
 800ffd0:	4602      	mov	r2, r0
 800ffd2:	460b      	mov	r3, r1
 800ffd4:	4604      	mov	r4, r0
 800ffd6:	460d      	mov	r5, r1
 800ffd8:	4630      	mov	r0, r6
 800ffda:	4639      	mov	r1, r7
 800ffdc:	f7f0 f90c 	bl	80001f8 <__adddf3>
 800ffe0:	4632      	mov	r2, r6
 800ffe2:	463b      	mov	r3, r7
 800ffe4:	4650      	mov	r0, sl
 800ffe6:	468b      	mov	fp, r1
 800ffe8:	f7f0 f904 	bl	80001f4 <__aeabi_dsub>
 800ffec:	4602      	mov	r2, r0
 800ffee:	460b      	mov	r3, r1
 800fff0:	4620      	mov	r0, r4
 800fff2:	4629      	mov	r1, r5
 800fff4:	f7f0 f8fe 	bl	80001f4 <__aeabi_dsub>
 800fff8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fffc:	9b00      	ldr	r3, [sp, #0]
 800fffe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010000:	3b01      	subs	r3, #1
 8010002:	4313      	orrs	r3, r2
 8010004:	f04f 0600 	mov.w	r6, #0
 8010008:	f04f 0200 	mov.w	r2, #0
 801000c:	bf0c      	ite	eq
 801000e:	4b2f      	ldreq	r3, [pc, #188]	; (80100cc <__ieee754_pow+0x3dc>)
 8010010:	4b2b      	ldrne	r3, [pc, #172]	; (80100c0 <__ieee754_pow+0x3d0>)
 8010012:	4604      	mov	r4, r0
 8010014:	460d      	mov	r5, r1
 8010016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801001a:	e9cd 2300 	strd	r2, r3, [sp]
 801001e:	4632      	mov	r2, r6
 8010020:	463b      	mov	r3, r7
 8010022:	f7f0 f8e7 	bl	80001f4 <__aeabi_dsub>
 8010026:	4652      	mov	r2, sl
 8010028:	465b      	mov	r3, fp
 801002a:	f7f0 fa9b 	bl	8000564 <__aeabi_dmul>
 801002e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010032:	4680      	mov	r8, r0
 8010034:	4689      	mov	r9, r1
 8010036:	4620      	mov	r0, r4
 8010038:	4629      	mov	r1, r5
 801003a:	f7f0 fa93 	bl	8000564 <__aeabi_dmul>
 801003e:	4602      	mov	r2, r0
 8010040:	460b      	mov	r3, r1
 8010042:	4640      	mov	r0, r8
 8010044:	4649      	mov	r1, r9
 8010046:	f7f0 f8d7 	bl	80001f8 <__adddf3>
 801004a:	4632      	mov	r2, r6
 801004c:	463b      	mov	r3, r7
 801004e:	4680      	mov	r8, r0
 8010050:	4689      	mov	r9, r1
 8010052:	4650      	mov	r0, sl
 8010054:	4659      	mov	r1, fp
 8010056:	f7f0 fa85 	bl	8000564 <__aeabi_dmul>
 801005a:	4604      	mov	r4, r0
 801005c:	460d      	mov	r5, r1
 801005e:	460b      	mov	r3, r1
 8010060:	4602      	mov	r2, r0
 8010062:	4649      	mov	r1, r9
 8010064:	4640      	mov	r0, r8
 8010066:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801006a:	f7f0 f8c5 	bl	80001f8 <__adddf3>
 801006e:	4b18      	ldr	r3, [pc, #96]	; (80100d0 <__ieee754_pow+0x3e0>)
 8010070:	4682      	mov	sl, r0
 8010072:	4299      	cmp	r1, r3
 8010074:	460f      	mov	r7, r1
 8010076:	460e      	mov	r6, r1
 8010078:	f340 82e5 	ble.w	8010646 <__ieee754_pow+0x956>
 801007c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010080:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010084:	4303      	orrs	r3, r0
 8010086:	f000 81df 	beq.w	8010448 <__ieee754_pow+0x758>
 801008a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801008e:	2200      	movs	r2, #0
 8010090:	2300      	movs	r3, #0
 8010092:	f7f0 fcd9 	bl	8000a48 <__aeabi_dcmplt>
 8010096:	3800      	subs	r0, #0
 8010098:	bf18      	it	ne
 801009a:	2001      	movne	r0, #1
 801009c:	e72e      	b.n	800fefc <__ieee754_pow+0x20c>
 801009e:	bf00      	nop
 80100a0:	60000000 	.word	0x60000000
 80100a4:	3ff71547 	.word	0x3ff71547
 80100a8:	f85ddf44 	.word	0xf85ddf44
 80100ac:	3e54ae0b 	.word	0x3e54ae0b
 80100b0:	55555555 	.word	0x55555555
 80100b4:	3fd55555 	.word	0x3fd55555
 80100b8:	652b82fe 	.word	0x652b82fe
 80100bc:	3ff71547 	.word	0x3ff71547
 80100c0:	3ff00000 	.word	0x3ff00000
 80100c4:	3fd00000 	.word	0x3fd00000
 80100c8:	3fe00000 	.word	0x3fe00000
 80100cc:	bff00000 	.word	0xbff00000
 80100d0:	408fffff 	.word	0x408fffff
 80100d4:	4bd2      	ldr	r3, [pc, #840]	; (8010420 <__ieee754_pow+0x730>)
 80100d6:	2200      	movs	r2, #0
 80100d8:	402b      	ands	r3, r5
 80100da:	b943      	cbnz	r3, 80100ee <__ieee754_pow+0x3fe>
 80100dc:	4658      	mov	r0, fp
 80100de:	4661      	mov	r1, ip
 80100e0:	4bd0      	ldr	r3, [pc, #832]	; (8010424 <__ieee754_pow+0x734>)
 80100e2:	f7f0 fa3f 	bl	8000564 <__aeabi_dmul>
 80100e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80100ea:	4683      	mov	fp, r0
 80100ec:	460c      	mov	r4, r1
 80100ee:	1523      	asrs	r3, r4, #20
 80100f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80100f4:	4413      	add	r3, r2
 80100f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80100f8:	4bcb      	ldr	r3, [pc, #812]	; (8010428 <__ieee754_pow+0x738>)
 80100fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80100fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010102:	429c      	cmp	r4, r3
 8010104:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010108:	dd08      	ble.n	801011c <__ieee754_pow+0x42c>
 801010a:	4bc8      	ldr	r3, [pc, #800]	; (801042c <__ieee754_pow+0x73c>)
 801010c:	429c      	cmp	r4, r3
 801010e:	f340 8199 	ble.w	8010444 <__ieee754_pow+0x754>
 8010112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010114:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010118:	3301      	adds	r3, #1
 801011a:	930b      	str	r3, [sp, #44]	; 0x2c
 801011c:	2600      	movs	r6, #0
 801011e:	00f3      	lsls	r3, r6, #3
 8010120:	930d      	str	r3, [sp, #52]	; 0x34
 8010122:	4bc3      	ldr	r3, [pc, #780]	; (8010430 <__ieee754_pow+0x740>)
 8010124:	4658      	mov	r0, fp
 8010126:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801012a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801012e:	4629      	mov	r1, r5
 8010130:	461a      	mov	r2, r3
 8010132:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8010136:	4623      	mov	r3, r4
 8010138:	f7f0 f85c 	bl	80001f4 <__aeabi_dsub>
 801013c:	46da      	mov	sl, fp
 801013e:	462b      	mov	r3, r5
 8010140:	4652      	mov	r2, sl
 8010142:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010146:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801014a:	f7f0 f855 	bl	80001f8 <__adddf3>
 801014e:	4602      	mov	r2, r0
 8010150:	460b      	mov	r3, r1
 8010152:	2000      	movs	r0, #0
 8010154:	49b7      	ldr	r1, [pc, #732]	; (8010434 <__ieee754_pow+0x744>)
 8010156:	f7f0 fb2f 	bl	80007b8 <__aeabi_ddiv>
 801015a:	4602      	mov	r2, r0
 801015c:	460b      	mov	r3, r1
 801015e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010162:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010166:	f7f0 f9fd 	bl	8000564 <__aeabi_dmul>
 801016a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801016e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8010172:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010176:	2300      	movs	r3, #0
 8010178:	2200      	movs	r2, #0
 801017a:	46ab      	mov	fp, r5
 801017c:	106d      	asrs	r5, r5, #1
 801017e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010182:	9304      	str	r3, [sp, #16]
 8010184:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010188:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801018c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8010190:	4640      	mov	r0, r8
 8010192:	4649      	mov	r1, r9
 8010194:	4614      	mov	r4, r2
 8010196:	461d      	mov	r5, r3
 8010198:	f7f0 f9e4 	bl	8000564 <__aeabi_dmul>
 801019c:	4602      	mov	r2, r0
 801019e:	460b      	mov	r3, r1
 80101a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80101a4:	f7f0 f826 	bl	80001f4 <__aeabi_dsub>
 80101a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80101ac:	4606      	mov	r6, r0
 80101ae:	460f      	mov	r7, r1
 80101b0:	4620      	mov	r0, r4
 80101b2:	4629      	mov	r1, r5
 80101b4:	f7f0 f81e 	bl	80001f4 <__aeabi_dsub>
 80101b8:	4602      	mov	r2, r0
 80101ba:	460b      	mov	r3, r1
 80101bc:	4650      	mov	r0, sl
 80101be:	4659      	mov	r1, fp
 80101c0:	f7f0 f818 	bl	80001f4 <__aeabi_dsub>
 80101c4:	4642      	mov	r2, r8
 80101c6:	464b      	mov	r3, r9
 80101c8:	f7f0 f9cc 	bl	8000564 <__aeabi_dmul>
 80101cc:	4602      	mov	r2, r0
 80101ce:	460b      	mov	r3, r1
 80101d0:	4630      	mov	r0, r6
 80101d2:	4639      	mov	r1, r7
 80101d4:	f7f0 f80e 	bl	80001f4 <__aeabi_dsub>
 80101d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80101dc:	f7f0 f9c2 	bl	8000564 <__aeabi_dmul>
 80101e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80101e4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80101e8:	4610      	mov	r0, r2
 80101ea:	4619      	mov	r1, r3
 80101ec:	f7f0 f9ba 	bl	8000564 <__aeabi_dmul>
 80101f0:	a379      	add	r3, pc, #484	; (adr r3, 80103d8 <__ieee754_pow+0x6e8>)
 80101f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f6:	4604      	mov	r4, r0
 80101f8:	460d      	mov	r5, r1
 80101fa:	f7f0 f9b3 	bl	8000564 <__aeabi_dmul>
 80101fe:	a378      	add	r3, pc, #480	; (adr r3, 80103e0 <__ieee754_pow+0x6f0>)
 8010200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010204:	f7ef fff8 	bl	80001f8 <__adddf3>
 8010208:	4622      	mov	r2, r4
 801020a:	462b      	mov	r3, r5
 801020c:	f7f0 f9aa 	bl	8000564 <__aeabi_dmul>
 8010210:	a375      	add	r3, pc, #468	; (adr r3, 80103e8 <__ieee754_pow+0x6f8>)
 8010212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010216:	f7ef ffef 	bl	80001f8 <__adddf3>
 801021a:	4622      	mov	r2, r4
 801021c:	462b      	mov	r3, r5
 801021e:	f7f0 f9a1 	bl	8000564 <__aeabi_dmul>
 8010222:	a373      	add	r3, pc, #460	; (adr r3, 80103f0 <__ieee754_pow+0x700>)
 8010224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010228:	f7ef ffe6 	bl	80001f8 <__adddf3>
 801022c:	4622      	mov	r2, r4
 801022e:	462b      	mov	r3, r5
 8010230:	f7f0 f998 	bl	8000564 <__aeabi_dmul>
 8010234:	a370      	add	r3, pc, #448	; (adr r3, 80103f8 <__ieee754_pow+0x708>)
 8010236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023a:	f7ef ffdd 	bl	80001f8 <__adddf3>
 801023e:	4622      	mov	r2, r4
 8010240:	462b      	mov	r3, r5
 8010242:	f7f0 f98f 	bl	8000564 <__aeabi_dmul>
 8010246:	a36e      	add	r3, pc, #440	; (adr r3, 8010400 <__ieee754_pow+0x710>)
 8010248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024c:	f7ef ffd4 	bl	80001f8 <__adddf3>
 8010250:	4622      	mov	r2, r4
 8010252:	4606      	mov	r6, r0
 8010254:	460f      	mov	r7, r1
 8010256:	462b      	mov	r3, r5
 8010258:	4620      	mov	r0, r4
 801025a:	4629      	mov	r1, r5
 801025c:	f7f0 f982 	bl	8000564 <__aeabi_dmul>
 8010260:	4602      	mov	r2, r0
 8010262:	460b      	mov	r3, r1
 8010264:	4630      	mov	r0, r6
 8010266:	4639      	mov	r1, r7
 8010268:	f7f0 f97c 	bl	8000564 <__aeabi_dmul>
 801026c:	4604      	mov	r4, r0
 801026e:	460d      	mov	r5, r1
 8010270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010274:	4642      	mov	r2, r8
 8010276:	464b      	mov	r3, r9
 8010278:	f7ef ffbe 	bl	80001f8 <__adddf3>
 801027c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010280:	f7f0 f970 	bl	8000564 <__aeabi_dmul>
 8010284:	4622      	mov	r2, r4
 8010286:	462b      	mov	r3, r5
 8010288:	f7ef ffb6 	bl	80001f8 <__adddf3>
 801028c:	4642      	mov	r2, r8
 801028e:	4606      	mov	r6, r0
 8010290:	460f      	mov	r7, r1
 8010292:	464b      	mov	r3, r9
 8010294:	4640      	mov	r0, r8
 8010296:	4649      	mov	r1, r9
 8010298:	f7f0 f964 	bl	8000564 <__aeabi_dmul>
 801029c:	2200      	movs	r2, #0
 801029e:	4b66      	ldr	r3, [pc, #408]	; (8010438 <__ieee754_pow+0x748>)
 80102a0:	4682      	mov	sl, r0
 80102a2:	468b      	mov	fp, r1
 80102a4:	f7ef ffa8 	bl	80001f8 <__adddf3>
 80102a8:	4632      	mov	r2, r6
 80102aa:	463b      	mov	r3, r7
 80102ac:	f7ef ffa4 	bl	80001f8 <__adddf3>
 80102b0:	2400      	movs	r4, #0
 80102b2:	460d      	mov	r5, r1
 80102b4:	4622      	mov	r2, r4
 80102b6:	460b      	mov	r3, r1
 80102b8:	4640      	mov	r0, r8
 80102ba:	4649      	mov	r1, r9
 80102bc:	f7f0 f952 	bl	8000564 <__aeabi_dmul>
 80102c0:	2200      	movs	r2, #0
 80102c2:	4680      	mov	r8, r0
 80102c4:	4689      	mov	r9, r1
 80102c6:	4620      	mov	r0, r4
 80102c8:	4629      	mov	r1, r5
 80102ca:	4b5b      	ldr	r3, [pc, #364]	; (8010438 <__ieee754_pow+0x748>)
 80102cc:	f7ef ff92 	bl	80001f4 <__aeabi_dsub>
 80102d0:	4652      	mov	r2, sl
 80102d2:	465b      	mov	r3, fp
 80102d4:	f7ef ff8e 	bl	80001f4 <__aeabi_dsub>
 80102d8:	4602      	mov	r2, r0
 80102da:	460b      	mov	r3, r1
 80102dc:	4630      	mov	r0, r6
 80102de:	4639      	mov	r1, r7
 80102e0:	f7ef ff88 	bl	80001f4 <__aeabi_dsub>
 80102e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80102e8:	f7f0 f93c 	bl	8000564 <__aeabi_dmul>
 80102ec:	4622      	mov	r2, r4
 80102ee:	4606      	mov	r6, r0
 80102f0:	460f      	mov	r7, r1
 80102f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80102f6:	462b      	mov	r3, r5
 80102f8:	f7f0 f934 	bl	8000564 <__aeabi_dmul>
 80102fc:	4602      	mov	r2, r0
 80102fe:	460b      	mov	r3, r1
 8010300:	4630      	mov	r0, r6
 8010302:	4639      	mov	r1, r7
 8010304:	f7ef ff78 	bl	80001f8 <__adddf3>
 8010308:	2400      	movs	r4, #0
 801030a:	4606      	mov	r6, r0
 801030c:	460f      	mov	r7, r1
 801030e:	4602      	mov	r2, r0
 8010310:	460b      	mov	r3, r1
 8010312:	4640      	mov	r0, r8
 8010314:	4649      	mov	r1, r9
 8010316:	f7ef ff6f 	bl	80001f8 <__adddf3>
 801031a:	a33b      	add	r3, pc, #236	; (adr r3, 8010408 <__ieee754_pow+0x718>)
 801031c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010320:	4620      	mov	r0, r4
 8010322:	460d      	mov	r5, r1
 8010324:	f7f0 f91e 	bl	8000564 <__aeabi_dmul>
 8010328:	4642      	mov	r2, r8
 801032a:	464b      	mov	r3, r9
 801032c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010330:	4620      	mov	r0, r4
 8010332:	4629      	mov	r1, r5
 8010334:	f7ef ff5e 	bl	80001f4 <__aeabi_dsub>
 8010338:	4602      	mov	r2, r0
 801033a:	460b      	mov	r3, r1
 801033c:	4630      	mov	r0, r6
 801033e:	4639      	mov	r1, r7
 8010340:	f7ef ff58 	bl	80001f4 <__aeabi_dsub>
 8010344:	a332      	add	r3, pc, #200	; (adr r3, 8010410 <__ieee754_pow+0x720>)
 8010346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801034a:	f7f0 f90b 	bl	8000564 <__aeabi_dmul>
 801034e:	a332      	add	r3, pc, #200	; (adr r3, 8010418 <__ieee754_pow+0x728>)
 8010350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010354:	4606      	mov	r6, r0
 8010356:	460f      	mov	r7, r1
 8010358:	4620      	mov	r0, r4
 801035a:	4629      	mov	r1, r5
 801035c:	f7f0 f902 	bl	8000564 <__aeabi_dmul>
 8010360:	4602      	mov	r2, r0
 8010362:	460b      	mov	r3, r1
 8010364:	4630      	mov	r0, r6
 8010366:	4639      	mov	r1, r7
 8010368:	f7ef ff46 	bl	80001f8 <__adddf3>
 801036c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801036e:	4b33      	ldr	r3, [pc, #204]	; (801043c <__ieee754_pow+0x74c>)
 8010370:	f04f 0a00 	mov.w	sl, #0
 8010374:	4413      	add	r3, r2
 8010376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037a:	f7ef ff3d 	bl	80001f8 <__adddf3>
 801037e:	4680      	mov	r8, r0
 8010380:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010382:	4689      	mov	r9, r1
 8010384:	f7f0 f884 	bl	8000490 <__aeabi_i2d>
 8010388:	4604      	mov	r4, r0
 801038a:	460d      	mov	r5, r1
 801038c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801038e:	4b2c      	ldr	r3, [pc, #176]	; (8010440 <__ieee754_pow+0x750>)
 8010390:	4413      	add	r3, r2
 8010392:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010396:	4642      	mov	r2, r8
 8010398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801039c:	464b      	mov	r3, r9
 801039e:	f7ef ff2b 	bl	80001f8 <__adddf3>
 80103a2:	4632      	mov	r2, r6
 80103a4:	463b      	mov	r3, r7
 80103a6:	f7ef ff27 	bl	80001f8 <__adddf3>
 80103aa:	4622      	mov	r2, r4
 80103ac:	462b      	mov	r3, r5
 80103ae:	f7ef ff23 	bl	80001f8 <__adddf3>
 80103b2:	4622      	mov	r2, r4
 80103b4:	462b      	mov	r3, r5
 80103b6:	4650      	mov	r0, sl
 80103b8:	468b      	mov	fp, r1
 80103ba:	f7ef ff1b 	bl	80001f4 <__aeabi_dsub>
 80103be:	4632      	mov	r2, r6
 80103c0:	463b      	mov	r3, r7
 80103c2:	f7ef ff17 	bl	80001f4 <__aeabi_dsub>
 80103c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80103ca:	f7ef ff13 	bl	80001f4 <__aeabi_dsub>
 80103ce:	4602      	mov	r2, r0
 80103d0:	460b      	mov	r3, r1
 80103d2:	4640      	mov	r0, r8
 80103d4:	4649      	mov	r1, r9
 80103d6:	e60d      	b.n	800fff4 <__ieee754_pow+0x304>
 80103d8:	4a454eef 	.word	0x4a454eef
 80103dc:	3fca7e28 	.word	0x3fca7e28
 80103e0:	93c9db65 	.word	0x93c9db65
 80103e4:	3fcd864a 	.word	0x3fcd864a
 80103e8:	a91d4101 	.word	0xa91d4101
 80103ec:	3fd17460 	.word	0x3fd17460
 80103f0:	518f264d 	.word	0x518f264d
 80103f4:	3fd55555 	.word	0x3fd55555
 80103f8:	db6fabff 	.word	0xdb6fabff
 80103fc:	3fdb6db6 	.word	0x3fdb6db6
 8010400:	33333303 	.word	0x33333303
 8010404:	3fe33333 	.word	0x3fe33333
 8010408:	e0000000 	.word	0xe0000000
 801040c:	3feec709 	.word	0x3feec709
 8010410:	dc3a03fd 	.word	0xdc3a03fd
 8010414:	3feec709 	.word	0x3feec709
 8010418:	145b01f5 	.word	0x145b01f5
 801041c:	be3e2fe0 	.word	0xbe3e2fe0
 8010420:	7ff00000 	.word	0x7ff00000
 8010424:	43400000 	.word	0x43400000
 8010428:	0003988e 	.word	0x0003988e
 801042c:	000bb679 	.word	0x000bb679
 8010430:	08018058 	.word	0x08018058
 8010434:	3ff00000 	.word	0x3ff00000
 8010438:	40080000 	.word	0x40080000
 801043c:	08018078 	.word	0x08018078
 8010440:	08018068 	.word	0x08018068
 8010444:	2601      	movs	r6, #1
 8010446:	e66a      	b.n	801011e <__ieee754_pow+0x42e>
 8010448:	a39d      	add	r3, pc, #628	; (adr r3, 80106c0 <__ieee754_pow+0x9d0>)
 801044a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801044e:	4640      	mov	r0, r8
 8010450:	4649      	mov	r1, r9
 8010452:	f7ef fed1 	bl	80001f8 <__adddf3>
 8010456:	4622      	mov	r2, r4
 8010458:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801045c:	462b      	mov	r3, r5
 801045e:	4650      	mov	r0, sl
 8010460:	4639      	mov	r1, r7
 8010462:	f7ef fec7 	bl	80001f4 <__aeabi_dsub>
 8010466:	4602      	mov	r2, r0
 8010468:	460b      	mov	r3, r1
 801046a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801046e:	f7f0 fb09 	bl	8000a84 <__aeabi_dcmpgt>
 8010472:	2800      	cmp	r0, #0
 8010474:	f47f ae09 	bne.w	801008a <__ieee754_pow+0x39a>
 8010478:	4aa3      	ldr	r2, [pc, #652]	; (8010708 <__ieee754_pow+0xa18>)
 801047a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 801047e:	4293      	cmp	r3, r2
 8010480:	f340 8101 	ble.w	8010686 <__ieee754_pow+0x996>
 8010484:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010488:	2000      	movs	r0, #0
 801048a:	151b      	asrs	r3, r3, #20
 801048c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010490:	fa4a f303 	asr.w	r3, sl, r3
 8010494:	4433      	add	r3, r6
 8010496:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801049a:	4f9c      	ldr	r7, [pc, #624]	; (801070c <__ieee754_pow+0xa1c>)
 801049c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80104a0:	4117      	asrs	r7, r2
 80104a2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80104a6:	ea23 0107 	bic.w	r1, r3, r7
 80104aa:	f1c2 0214 	rsb	r2, r2, #20
 80104ae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80104b2:	460b      	mov	r3, r1
 80104b4:	fa4a fa02 	asr.w	sl, sl, r2
 80104b8:	2e00      	cmp	r6, #0
 80104ba:	4602      	mov	r2, r0
 80104bc:	4629      	mov	r1, r5
 80104be:	4620      	mov	r0, r4
 80104c0:	bfb8      	it	lt
 80104c2:	f1ca 0a00 	rsblt	sl, sl, #0
 80104c6:	f7ef fe95 	bl	80001f4 <__aeabi_dsub>
 80104ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104d2:	2400      	movs	r4, #0
 80104d4:	4642      	mov	r2, r8
 80104d6:	464b      	mov	r3, r9
 80104d8:	f7ef fe8e 	bl	80001f8 <__adddf3>
 80104dc:	a37a      	add	r3, pc, #488	; (adr r3, 80106c8 <__ieee754_pow+0x9d8>)
 80104de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e2:	4620      	mov	r0, r4
 80104e4:	460d      	mov	r5, r1
 80104e6:	f7f0 f83d 	bl	8000564 <__aeabi_dmul>
 80104ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80104ee:	4606      	mov	r6, r0
 80104f0:	460f      	mov	r7, r1
 80104f2:	4620      	mov	r0, r4
 80104f4:	4629      	mov	r1, r5
 80104f6:	f7ef fe7d 	bl	80001f4 <__aeabi_dsub>
 80104fa:	4602      	mov	r2, r0
 80104fc:	460b      	mov	r3, r1
 80104fe:	4640      	mov	r0, r8
 8010500:	4649      	mov	r1, r9
 8010502:	f7ef fe77 	bl	80001f4 <__aeabi_dsub>
 8010506:	a372      	add	r3, pc, #456	; (adr r3, 80106d0 <__ieee754_pow+0x9e0>)
 8010508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801050c:	f7f0 f82a 	bl	8000564 <__aeabi_dmul>
 8010510:	a371      	add	r3, pc, #452	; (adr r3, 80106d8 <__ieee754_pow+0x9e8>)
 8010512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010516:	4680      	mov	r8, r0
 8010518:	4689      	mov	r9, r1
 801051a:	4620      	mov	r0, r4
 801051c:	4629      	mov	r1, r5
 801051e:	f7f0 f821 	bl	8000564 <__aeabi_dmul>
 8010522:	4602      	mov	r2, r0
 8010524:	460b      	mov	r3, r1
 8010526:	4640      	mov	r0, r8
 8010528:	4649      	mov	r1, r9
 801052a:	f7ef fe65 	bl	80001f8 <__adddf3>
 801052e:	4604      	mov	r4, r0
 8010530:	460d      	mov	r5, r1
 8010532:	4602      	mov	r2, r0
 8010534:	460b      	mov	r3, r1
 8010536:	4630      	mov	r0, r6
 8010538:	4639      	mov	r1, r7
 801053a:	f7ef fe5d 	bl	80001f8 <__adddf3>
 801053e:	4632      	mov	r2, r6
 8010540:	463b      	mov	r3, r7
 8010542:	4680      	mov	r8, r0
 8010544:	4689      	mov	r9, r1
 8010546:	f7ef fe55 	bl	80001f4 <__aeabi_dsub>
 801054a:	4602      	mov	r2, r0
 801054c:	460b      	mov	r3, r1
 801054e:	4620      	mov	r0, r4
 8010550:	4629      	mov	r1, r5
 8010552:	f7ef fe4f 	bl	80001f4 <__aeabi_dsub>
 8010556:	4642      	mov	r2, r8
 8010558:	4606      	mov	r6, r0
 801055a:	460f      	mov	r7, r1
 801055c:	464b      	mov	r3, r9
 801055e:	4640      	mov	r0, r8
 8010560:	4649      	mov	r1, r9
 8010562:	f7ef ffff 	bl	8000564 <__aeabi_dmul>
 8010566:	a35e      	add	r3, pc, #376	; (adr r3, 80106e0 <__ieee754_pow+0x9f0>)
 8010568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801056c:	4604      	mov	r4, r0
 801056e:	460d      	mov	r5, r1
 8010570:	f7ef fff8 	bl	8000564 <__aeabi_dmul>
 8010574:	a35c      	add	r3, pc, #368	; (adr r3, 80106e8 <__ieee754_pow+0x9f8>)
 8010576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801057a:	f7ef fe3b 	bl	80001f4 <__aeabi_dsub>
 801057e:	4622      	mov	r2, r4
 8010580:	462b      	mov	r3, r5
 8010582:	f7ef ffef 	bl	8000564 <__aeabi_dmul>
 8010586:	a35a      	add	r3, pc, #360	; (adr r3, 80106f0 <__ieee754_pow+0xa00>)
 8010588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801058c:	f7ef fe34 	bl	80001f8 <__adddf3>
 8010590:	4622      	mov	r2, r4
 8010592:	462b      	mov	r3, r5
 8010594:	f7ef ffe6 	bl	8000564 <__aeabi_dmul>
 8010598:	a357      	add	r3, pc, #348	; (adr r3, 80106f8 <__ieee754_pow+0xa08>)
 801059a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059e:	f7ef fe29 	bl	80001f4 <__aeabi_dsub>
 80105a2:	4622      	mov	r2, r4
 80105a4:	462b      	mov	r3, r5
 80105a6:	f7ef ffdd 	bl	8000564 <__aeabi_dmul>
 80105aa:	a355      	add	r3, pc, #340	; (adr r3, 8010700 <__ieee754_pow+0xa10>)
 80105ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b0:	f7ef fe22 	bl	80001f8 <__adddf3>
 80105b4:	4622      	mov	r2, r4
 80105b6:	462b      	mov	r3, r5
 80105b8:	f7ef ffd4 	bl	8000564 <__aeabi_dmul>
 80105bc:	4602      	mov	r2, r0
 80105be:	460b      	mov	r3, r1
 80105c0:	4640      	mov	r0, r8
 80105c2:	4649      	mov	r1, r9
 80105c4:	f7ef fe16 	bl	80001f4 <__aeabi_dsub>
 80105c8:	4604      	mov	r4, r0
 80105ca:	460d      	mov	r5, r1
 80105cc:	4602      	mov	r2, r0
 80105ce:	460b      	mov	r3, r1
 80105d0:	4640      	mov	r0, r8
 80105d2:	4649      	mov	r1, r9
 80105d4:	f7ef ffc6 	bl	8000564 <__aeabi_dmul>
 80105d8:	2200      	movs	r2, #0
 80105da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80105e2:	4620      	mov	r0, r4
 80105e4:	4629      	mov	r1, r5
 80105e6:	f7ef fe05 	bl	80001f4 <__aeabi_dsub>
 80105ea:	4602      	mov	r2, r0
 80105ec:	460b      	mov	r3, r1
 80105ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105f2:	f7f0 f8e1 	bl	80007b8 <__aeabi_ddiv>
 80105f6:	4632      	mov	r2, r6
 80105f8:	4604      	mov	r4, r0
 80105fa:	460d      	mov	r5, r1
 80105fc:	463b      	mov	r3, r7
 80105fe:	4640      	mov	r0, r8
 8010600:	4649      	mov	r1, r9
 8010602:	f7ef ffaf 	bl	8000564 <__aeabi_dmul>
 8010606:	4632      	mov	r2, r6
 8010608:	463b      	mov	r3, r7
 801060a:	f7ef fdf5 	bl	80001f8 <__adddf3>
 801060e:	4602      	mov	r2, r0
 8010610:	460b      	mov	r3, r1
 8010612:	4620      	mov	r0, r4
 8010614:	4629      	mov	r1, r5
 8010616:	f7ef fded 	bl	80001f4 <__aeabi_dsub>
 801061a:	4642      	mov	r2, r8
 801061c:	464b      	mov	r3, r9
 801061e:	f7ef fde9 	bl	80001f4 <__aeabi_dsub>
 8010622:	4602      	mov	r2, r0
 8010624:	460b      	mov	r3, r1
 8010626:	2000      	movs	r0, #0
 8010628:	4939      	ldr	r1, [pc, #228]	; (8010710 <__ieee754_pow+0xa20>)
 801062a:	f7ef fde3 	bl	80001f4 <__aeabi_dsub>
 801062e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8010632:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010636:	da29      	bge.n	801068c <__ieee754_pow+0x99c>
 8010638:	4652      	mov	r2, sl
 801063a:	f001 f885 	bl	8011748 <scalbn>
 801063e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010642:	f7ff bbfe 	b.w	800fe42 <__ieee754_pow+0x152>
 8010646:	4b33      	ldr	r3, [pc, #204]	; (8010714 <__ieee754_pow+0xa24>)
 8010648:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 801064c:	429f      	cmp	r7, r3
 801064e:	f77f af13 	ble.w	8010478 <__ieee754_pow+0x788>
 8010652:	4b31      	ldr	r3, [pc, #196]	; (8010718 <__ieee754_pow+0xa28>)
 8010654:	440b      	add	r3, r1
 8010656:	4303      	orrs	r3, r0
 8010658:	d009      	beq.n	801066e <__ieee754_pow+0x97e>
 801065a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801065e:	2200      	movs	r2, #0
 8010660:	2300      	movs	r3, #0
 8010662:	f7f0 f9f1 	bl	8000a48 <__aeabi_dcmplt>
 8010666:	3800      	subs	r0, #0
 8010668:	bf18      	it	ne
 801066a:	2001      	movne	r0, #1
 801066c:	e453      	b.n	800ff16 <__ieee754_pow+0x226>
 801066e:	4622      	mov	r2, r4
 8010670:	462b      	mov	r3, r5
 8010672:	f7ef fdbf 	bl	80001f4 <__aeabi_dsub>
 8010676:	4642      	mov	r2, r8
 8010678:	464b      	mov	r3, r9
 801067a:	f7f0 f9f9 	bl	8000a70 <__aeabi_dcmpge>
 801067e:	2800      	cmp	r0, #0
 8010680:	f43f aefa 	beq.w	8010478 <__ieee754_pow+0x788>
 8010684:	e7e9      	b.n	801065a <__ieee754_pow+0x96a>
 8010686:	f04f 0a00 	mov.w	sl, #0
 801068a:	e720      	b.n	80104ce <__ieee754_pow+0x7de>
 801068c:	4621      	mov	r1, r4
 801068e:	e7d6      	b.n	801063e <__ieee754_pow+0x94e>
 8010690:	f04f 0b00 	mov.w	fp, #0
 8010694:	f8df c078 	ldr.w	ip, [pc, #120]	; 8010710 <__ieee754_pow+0xa20>
 8010698:	f7ff bbba 	b.w	800fe10 <__ieee754_pow+0x120>
 801069c:	f04f 0b00 	mov.w	fp, #0
 80106a0:	f04f 0c00 	mov.w	ip, #0
 80106a4:	f7ff bbb4 	b.w	800fe10 <__ieee754_pow+0x120>
 80106a8:	4640      	mov	r0, r8
 80106aa:	4649      	mov	r1, r9
 80106ac:	f7ff bb3d 	b.w	800fd2a <__ieee754_pow+0x3a>
 80106b0:	9200      	str	r2, [sp, #0]
 80106b2:	f7ff bb89 	b.w	800fdc8 <__ieee754_pow+0xd8>
 80106b6:	2300      	movs	r3, #0
 80106b8:	f7ff bb73 	b.w	800fda2 <__ieee754_pow+0xb2>
 80106bc:	f3af 8000 	nop.w
 80106c0:	652b82fe 	.word	0x652b82fe
 80106c4:	3c971547 	.word	0x3c971547
 80106c8:	00000000 	.word	0x00000000
 80106cc:	3fe62e43 	.word	0x3fe62e43
 80106d0:	fefa39ef 	.word	0xfefa39ef
 80106d4:	3fe62e42 	.word	0x3fe62e42
 80106d8:	0ca86c39 	.word	0x0ca86c39
 80106dc:	be205c61 	.word	0xbe205c61
 80106e0:	72bea4d0 	.word	0x72bea4d0
 80106e4:	3e663769 	.word	0x3e663769
 80106e8:	c5d26bf1 	.word	0xc5d26bf1
 80106ec:	3ebbbd41 	.word	0x3ebbbd41
 80106f0:	af25de2c 	.word	0xaf25de2c
 80106f4:	3f11566a 	.word	0x3f11566a
 80106f8:	16bebd93 	.word	0x16bebd93
 80106fc:	3f66c16c 	.word	0x3f66c16c
 8010700:	5555553e 	.word	0x5555553e
 8010704:	3fc55555 	.word	0x3fc55555
 8010708:	3fe00000 	.word	0x3fe00000
 801070c:	000fffff 	.word	0x000fffff
 8010710:	3ff00000 	.word	0x3ff00000
 8010714:	4090cbff 	.word	0x4090cbff
 8010718:	3f6f3400 	.word	0x3f6f3400
 801071c:	00000000 	.word	0x00000000

08010720 <__ieee754_rem_pio2>:
 8010720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010724:	4614      	mov	r4, r2
 8010726:	4ac4      	ldr	r2, [pc, #784]	; (8010a38 <__ieee754_rem_pio2+0x318>)
 8010728:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 801072c:	b08d      	sub	sp, #52	; 0x34
 801072e:	4592      	cmp	sl, r2
 8010730:	9104      	str	r1, [sp, #16]
 8010732:	dc07      	bgt.n	8010744 <__ieee754_rem_pio2+0x24>
 8010734:	2200      	movs	r2, #0
 8010736:	2300      	movs	r3, #0
 8010738:	e9c4 0100 	strd	r0, r1, [r4]
 801073c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010740:	2500      	movs	r5, #0
 8010742:	e024      	b.n	801078e <__ieee754_rem_pio2+0x6e>
 8010744:	4abd      	ldr	r2, [pc, #756]	; (8010a3c <__ieee754_rem_pio2+0x31c>)
 8010746:	4592      	cmp	sl, r2
 8010748:	dc72      	bgt.n	8010830 <__ieee754_rem_pio2+0x110>
 801074a:	9b04      	ldr	r3, [sp, #16]
 801074c:	4dbc      	ldr	r5, [pc, #752]	; (8010a40 <__ieee754_rem_pio2+0x320>)
 801074e:	2b00      	cmp	r3, #0
 8010750:	a3ab      	add	r3, pc, #684	; (adr r3, 8010a00 <__ieee754_rem_pio2+0x2e0>)
 8010752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010756:	dd36      	ble.n	80107c6 <__ieee754_rem_pio2+0xa6>
 8010758:	f7ef fd4c 	bl	80001f4 <__aeabi_dsub>
 801075c:	45aa      	cmp	sl, r5
 801075e:	4606      	mov	r6, r0
 8010760:	460f      	mov	r7, r1
 8010762:	d018      	beq.n	8010796 <__ieee754_rem_pio2+0x76>
 8010764:	a3a8      	add	r3, pc, #672	; (adr r3, 8010a08 <__ieee754_rem_pio2+0x2e8>)
 8010766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801076a:	f7ef fd43 	bl	80001f4 <__aeabi_dsub>
 801076e:	4602      	mov	r2, r0
 8010770:	460b      	mov	r3, r1
 8010772:	4630      	mov	r0, r6
 8010774:	e9c4 2300 	strd	r2, r3, [r4]
 8010778:	4639      	mov	r1, r7
 801077a:	f7ef fd3b 	bl	80001f4 <__aeabi_dsub>
 801077e:	a3a2      	add	r3, pc, #648	; (adr r3, 8010a08 <__ieee754_rem_pio2+0x2e8>)
 8010780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010784:	f7ef fd36 	bl	80001f4 <__aeabi_dsub>
 8010788:	2501      	movs	r5, #1
 801078a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801078e:	4628      	mov	r0, r5
 8010790:	b00d      	add	sp, #52	; 0x34
 8010792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010796:	a39e      	add	r3, pc, #632	; (adr r3, 8010a10 <__ieee754_rem_pio2+0x2f0>)
 8010798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801079c:	f7ef fd2a 	bl	80001f4 <__aeabi_dsub>
 80107a0:	a39d      	add	r3, pc, #628	; (adr r3, 8010a18 <__ieee754_rem_pio2+0x2f8>)
 80107a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a6:	4606      	mov	r6, r0
 80107a8:	460f      	mov	r7, r1
 80107aa:	f7ef fd23 	bl	80001f4 <__aeabi_dsub>
 80107ae:	4602      	mov	r2, r0
 80107b0:	460b      	mov	r3, r1
 80107b2:	4630      	mov	r0, r6
 80107b4:	e9c4 2300 	strd	r2, r3, [r4]
 80107b8:	4639      	mov	r1, r7
 80107ba:	f7ef fd1b 	bl	80001f4 <__aeabi_dsub>
 80107be:	a396      	add	r3, pc, #600	; (adr r3, 8010a18 <__ieee754_rem_pio2+0x2f8>)
 80107c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c4:	e7de      	b.n	8010784 <__ieee754_rem_pio2+0x64>
 80107c6:	f7ef fd17 	bl	80001f8 <__adddf3>
 80107ca:	45aa      	cmp	sl, r5
 80107cc:	4606      	mov	r6, r0
 80107ce:	460f      	mov	r7, r1
 80107d0:	d016      	beq.n	8010800 <__ieee754_rem_pio2+0xe0>
 80107d2:	a38d      	add	r3, pc, #564	; (adr r3, 8010a08 <__ieee754_rem_pio2+0x2e8>)
 80107d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d8:	f7ef fd0e 	bl	80001f8 <__adddf3>
 80107dc:	4602      	mov	r2, r0
 80107de:	460b      	mov	r3, r1
 80107e0:	4630      	mov	r0, r6
 80107e2:	e9c4 2300 	strd	r2, r3, [r4]
 80107e6:	4639      	mov	r1, r7
 80107e8:	f7ef fd04 	bl	80001f4 <__aeabi_dsub>
 80107ec:	a386      	add	r3, pc, #536	; (adr r3, 8010a08 <__ieee754_rem_pio2+0x2e8>)
 80107ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f2:	f7ef fd01 	bl	80001f8 <__adddf3>
 80107f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80107fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80107fe:	e7c6      	b.n	801078e <__ieee754_rem_pio2+0x6e>
 8010800:	a383      	add	r3, pc, #524	; (adr r3, 8010a10 <__ieee754_rem_pio2+0x2f0>)
 8010802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010806:	f7ef fcf7 	bl	80001f8 <__adddf3>
 801080a:	a383      	add	r3, pc, #524	; (adr r3, 8010a18 <__ieee754_rem_pio2+0x2f8>)
 801080c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010810:	4606      	mov	r6, r0
 8010812:	460f      	mov	r7, r1
 8010814:	f7ef fcf0 	bl	80001f8 <__adddf3>
 8010818:	4602      	mov	r2, r0
 801081a:	460b      	mov	r3, r1
 801081c:	4630      	mov	r0, r6
 801081e:	e9c4 2300 	strd	r2, r3, [r4]
 8010822:	4639      	mov	r1, r7
 8010824:	f7ef fce6 	bl	80001f4 <__aeabi_dsub>
 8010828:	a37b      	add	r3, pc, #492	; (adr r3, 8010a18 <__ieee754_rem_pio2+0x2f8>)
 801082a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801082e:	e7e0      	b.n	80107f2 <__ieee754_rem_pio2+0xd2>
 8010830:	4a84      	ldr	r2, [pc, #528]	; (8010a44 <__ieee754_rem_pio2+0x324>)
 8010832:	4592      	cmp	sl, r2
 8010834:	f300 80d5 	bgt.w	80109e2 <__ieee754_rem_pio2+0x2c2>
 8010838:	f000 fefc 	bl	8011634 <fabs>
 801083c:	a378      	add	r3, pc, #480	; (adr r3, 8010a20 <__ieee754_rem_pio2+0x300>)
 801083e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010842:	4606      	mov	r6, r0
 8010844:	460f      	mov	r7, r1
 8010846:	f7ef fe8d 	bl	8000564 <__aeabi_dmul>
 801084a:	2200      	movs	r2, #0
 801084c:	4b7e      	ldr	r3, [pc, #504]	; (8010a48 <__ieee754_rem_pio2+0x328>)
 801084e:	f7ef fcd3 	bl	80001f8 <__adddf3>
 8010852:	f7f0 f937 	bl	8000ac4 <__aeabi_d2iz>
 8010856:	4605      	mov	r5, r0
 8010858:	f7ef fe1a 	bl	8000490 <__aeabi_i2d>
 801085c:	4602      	mov	r2, r0
 801085e:	460b      	mov	r3, r1
 8010860:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010864:	a366      	add	r3, pc, #408	; (adr r3, 8010a00 <__ieee754_rem_pio2+0x2e0>)
 8010866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086a:	f7ef fe7b 	bl	8000564 <__aeabi_dmul>
 801086e:	4602      	mov	r2, r0
 8010870:	460b      	mov	r3, r1
 8010872:	4630      	mov	r0, r6
 8010874:	4639      	mov	r1, r7
 8010876:	f7ef fcbd 	bl	80001f4 <__aeabi_dsub>
 801087a:	a363      	add	r3, pc, #396	; (adr r3, 8010a08 <__ieee754_rem_pio2+0x2e8>)
 801087c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010880:	4680      	mov	r8, r0
 8010882:	4689      	mov	r9, r1
 8010884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010888:	f7ef fe6c 	bl	8000564 <__aeabi_dmul>
 801088c:	2d1f      	cmp	r5, #31
 801088e:	4606      	mov	r6, r0
 8010890:	460f      	mov	r7, r1
 8010892:	dc0e      	bgt.n	80108b2 <__ieee754_rem_pio2+0x192>
 8010894:	4b6d      	ldr	r3, [pc, #436]	; (8010a4c <__ieee754_rem_pio2+0x32c>)
 8010896:	1e6a      	subs	r2, r5, #1
 8010898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801089c:	4553      	cmp	r3, sl
 801089e:	d008      	beq.n	80108b2 <__ieee754_rem_pio2+0x192>
 80108a0:	4632      	mov	r2, r6
 80108a2:	463b      	mov	r3, r7
 80108a4:	4640      	mov	r0, r8
 80108a6:	4649      	mov	r1, r9
 80108a8:	f7ef fca4 	bl	80001f4 <__aeabi_dsub>
 80108ac:	e9c4 0100 	strd	r0, r1, [r4]
 80108b0:	e013      	b.n	80108da <__ieee754_rem_pio2+0x1ba>
 80108b2:	463b      	mov	r3, r7
 80108b4:	4632      	mov	r2, r6
 80108b6:	4640      	mov	r0, r8
 80108b8:	4649      	mov	r1, r9
 80108ba:	f7ef fc9b 	bl	80001f4 <__aeabi_dsub>
 80108be:	ea4f 532a 	mov.w	r3, sl, asr #20
 80108c2:	9305      	str	r3, [sp, #20]
 80108c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80108c8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80108cc:	f1ba 0f10 	cmp.w	sl, #16
 80108d0:	dc1f      	bgt.n	8010912 <__ieee754_rem_pio2+0x1f2>
 80108d2:	4602      	mov	r2, r0
 80108d4:	460b      	mov	r3, r1
 80108d6:	e9c4 2300 	strd	r2, r3, [r4]
 80108da:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80108de:	4640      	mov	r0, r8
 80108e0:	4653      	mov	r3, sl
 80108e2:	4649      	mov	r1, r9
 80108e4:	f7ef fc86 	bl	80001f4 <__aeabi_dsub>
 80108e8:	4632      	mov	r2, r6
 80108ea:	463b      	mov	r3, r7
 80108ec:	f7ef fc82 	bl	80001f4 <__aeabi_dsub>
 80108f0:	460b      	mov	r3, r1
 80108f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80108f6:	9904      	ldr	r1, [sp, #16]
 80108f8:	4602      	mov	r2, r0
 80108fa:	2900      	cmp	r1, #0
 80108fc:	f6bf af47 	bge.w	801078e <__ieee754_rem_pio2+0x6e>
 8010900:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8010904:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8010908:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801090c:	60e3      	str	r3, [r4, #12]
 801090e:	426d      	negs	r5, r5
 8010910:	e73d      	b.n	801078e <__ieee754_rem_pio2+0x6e>
 8010912:	a33f      	add	r3, pc, #252	; (adr r3, 8010a10 <__ieee754_rem_pio2+0x2f0>)
 8010914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801091c:	f7ef fe22 	bl	8000564 <__aeabi_dmul>
 8010920:	4606      	mov	r6, r0
 8010922:	460f      	mov	r7, r1
 8010924:	4602      	mov	r2, r0
 8010926:	460b      	mov	r3, r1
 8010928:	4640      	mov	r0, r8
 801092a:	4649      	mov	r1, r9
 801092c:	f7ef fc62 	bl	80001f4 <__aeabi_dsub>
 8010930:	4602      	mov	r2, r0
 8010932:	460b      	mov	r3, r1
 8010934:	4682      	mov	sl, r0
 8010936:	468b      	mov	fp, r1
 8010938:	4640      	mov	r0, r8
 801093a:	4649      	mov	r1, r9
 801093c:	f7ef fc5a 	bl	80001f4 <__aeabi_dsub>
 8010940:	4632      	mov	r2, r6
 8010942:	463b      	mov	r3, r7
 8010944:	f7ef fc56 	bl	80001f4 <__aeabi_dsub>
 8010948:	a333      	add	r3, pc, #204	; (adr r3, 8010a18 <__ieee754_rem_pio2+0x2f8>)
 801094a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094e:	4606      	mov	r6, r0
 8010950:	460f      	mov	r7, r1
 8010952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010956:	f7ef fe05 	bl	8000564 <__aeabi_dmul>
 801095a:	4632      	mov	r2, r6
 801095c:	463b      	mov	r3, r7
 801095e:	f7ef fc49 	bl	80001f4 <__aeabi_dsub>
 8010962:	4602      	mov	r2, r0
 8010964:	460b      	mov	r3, r1
 8010966:	4606      	mov	r6, r0
 8010968:	460f      	mov	r7, r1
 801096a:	4650      	mov	r0, sl
 801096c:	4659      	mov	r1, fp
 801096e:	f7ef fc41 	bl	80001f4 <__aeabi_dsub>
 8010972:	9a05      	ldr	r2, [sp, #20]
 8010974:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010978:	1ad3      	subs	r3, r2, r3
 801097a:	2b31      	cmp	r3, #49	; 0x31
 801097c:	dc06      	bgt.n	801098c <__ieee754_rem_pio2+0x26c>
 801097e:	4602      	mov	r2, r0
 8010980:	460b      	mov	r3, r1
 8010982:	46d0      	mov	r8, sl
 8010984:	46d9      	mov	r9, fp
 8010986:	e9c4 2300 	strd	r2, r3, [r4]
 801098a:	e7a6      	b.n	80108da <__ieee754_rem_pio2+0x1ba>
 801098c:	a326      	add	r3, pc, #152	; (adr r3, 8010a28 <__ieee754_rem_pio2+0x308>)
 801098e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010992:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010996:	f7ef fde5 	bl	8000564 <__aeabi_dmul>
 801099a:	4606      	mov	r6, r0
 801099c:	460f      	mov	r7, r1
 801099e:	4602      	mov	r2, r0
 80109a0:	460b      	mov	r3, r1
 80109a2:	4650      	mov	r0, sl
 80109a4:	4659      	mov	r1, fp
 80109a6:	f7ef fc25 	bl	80001f4 <__aeabi_dsub>
 80109aa:	4602      	mov	r2, r0
 80109ac:	460b      	mov	r3, r1
 80109ae:	4680      	mov	r8, r0
 80109b0:	4689      	mov	r9, r1
 80109b2:	4650      	mov	r0, sl
 80109b4:	4659      	mov	r1, fp
 80109b6:	f7ef fc1d 	bl	80001f4 <__aeabi_dsub>
 80109ba:	4632      	mov	r2, r6
 80109bc:	463b      	mov	r3, r7
 80109be:	f7ef fc19 	bl	80001f4 <__aeabi_dsub>
 80109c2:	a31b      	add	r3, pc, #108	; (adr r3, 8010a30 <__ieee754_rem_pio2+0x310>)
 80109c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c8:	4606      	mov	r6, r0
 80109ca:	460f      	mov	r7, r1
 80109cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109d0:	f7ef fdc8 	bl	8000564 <__aeabi_dmul>
 80109d4:	4632      	mov	r2, r6
 80109d6:	463b      	mov	r3, r7
 80109d8:	f7ef fc0c 	bl	80001f4 <__aeabi_dsub>
 80109dc:	4606      	mov	r6, r0
 80109de:	460f      	mov	r7, r1
 80109e0:	e75e      	b.n	80108a0 <__ieee754_rem_pio2+0x180>
 80109e2:	4a1b      	ldr	r2, [pc, #108]	; (8010a50 <__ieee754_rem_pio2+0x330>)
 80109e4:	4592      	cmp	sl, r2
 80109e6:	dd35      	ble.n	8010a54 <__ieee754_rem_pio2+0x334>
 80109e8:	4602      	mov	r2, r0
 80109ea:	460b      	mov	r3, r1
 80109ec:	f7ef fc02 	bl	80001f4 <__aeabi_dsub>
 80109f0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80109f4:	e9c4 0100 	strd	r0, r1, [r4]
 80109f8:	e6a2      	b.n	8010740 <__ieee754_rem_pio2+0x20>
 80109fa:	bf00      	nop
 80109fc:	f3af 8000 	nop.w
 8010a00:	54400000 	.word	0x54400000
 8010a04:	3ff921fb 	.word	0x3ff921fb
 8010a08:	1a626331 	.word	0x1a626331
 8010a0c:	3dd0b461 	.word	0x3dd0b461
 8010a10:	1a600000 	.word	0x1a600000
 8010a14:	3dd0b461 	.word	0x3dd0b461
 8010a18:	2e037073 	.word	0x2e037073
 8010a1c:	3ba3198a 	.word	0x3ba3198a
 8010a20:	6dc9c883 	.word	0x6dc9c883
 8010a24:	3fe45f30 	.word	0x3fe45f30
 8010a28:	2e000000 	.word	0x2e000000
 8010a2c:	3ba3198a 	.word	0x3ba3198a
 8010a30:	252049c1 	.word	0x252049c1
 8010a34:	397b839a 	.word	0x397b839a
 8010a38:	3fe921fb 	.word	0x3fe921fb
 8010a3c:	4002d97b 	.word	0x4002d97b
 8010a40:	3ff921fb 	.word	0x3ff921fb
 8010a44:	413921fb 	.word	0x413921fb
 8010a48:	3fe00000 	.word	0x3fe00000
 8010a4c:	08018088 	.word	0x08018088
 8010a50:	7fefffff 	.word	0x7fefffff
 8010a54:	ea4f 552a 	mov.w	r5, sl, asr #20
 8010a58:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8010a5c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8010a60:	460f      	mov	r7, r1
 8010a62:	4606      	mov	r6, r0
 8010a64:	f7f0 f82e 	bl	8000ac4 <__aeabi_d2iz>
 8010a68:	f7ef fd12 	bl	8000490 <__aeabi_i2d>
 8010a6c:	4602      	mov	r2, r0
 8010a6e:	460b      	mov	r3, r1
 8010a70:	4630      	mov	r0, r6
 8010a72:	4639      	mov	r1, r7
 8010a74:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010a78:	f7ef fbbc 	bl	80001f4 <__aeabi_dsub>
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	4b22      	ldr	r3, [pc, #136]	; (8010b08 <__ieee754_rem_pio2+0x3e8>)
 8010a80:	f7ef fd70 	bl	8000564 <__aeabi_dmul>
 8010a84:	460f      	mov	r7, r1
 8010a86:	4606      	mov	r6, r0
 8010a88:	f7f0 f81c 	bl	8000ac4 <__aeabi_d2iz>
 8010a8c:	f7ef fd00 	bl	8000490 <__aeabi_i2d>
 8010a90:	4602      	mov	r2, r0
 8010a92:	460b      	mov	r3, r1
 8010a94:	4630      	mov	r0, r6
 8010a96:	4639      	mov	r1, r7
 8010a98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010a9c:	f7ef fbaa 	bl	80001f4 <__aeabi_dsub>
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	4b19      	ldr	r3, [pc, #100]	; (8010b08 <__ieee754_rem_pio2+0x3e8>)
 8010aa4:	f7ef fd5e 	bl	8000564 <__aeabi_dmul>
 8010aa8:	f04f 0803 	mov.w	r8, #3
 8010aac:	2600      	movs	r6, #0
 8010aae:	2700      	movs	r7, #0
 8010ab0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010ab4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8010ab8:	4632      	mov	r2, r6
 8010aba:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8010abe:	463b      	mov	r3, r7
 8010ac0:	46c2      	mov	sl, r8
 8010ac2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010ac6:	f7ef ffb5 	bl	8000a34 <__aeabi_dcmpeq>
 8010aca:	2800      	cmp	r0, #0
 8010acc:	d1f4      	bne.n	8010ab8 <__ieee754_rem_pio2+0x398>
 8010ace:	4b0f      	ldr	r3, [pc, #60]	; (8010b0c <__ieee754_rem_pio2+0x3ec>)
 8010ad0:	462a      	mov	r2, r5
 8010ad2:	9301      	str	r3, [sp, #4]
 8010ad4:	2302      	movs	r3, #2
 8010ad6:	4621      	mov	r1, r4
 8010ad8:	9300      	str	r3, [sp, #0]
 8010ada:	a806      	add	r0, sp, #24
 8010adc:	4653      	mov	r3, sl
 8010ade:	f000 f985 	bl	8010dec <__kernel_rem_pio2>
 8010ae2:	9b04      	ldr	r3, [sp, #16]
 8010ae4:	4605      	mov	r5, r0
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	f6bf ae51 	bge.w	801078e <__ieee754_rem_pio2+0x6e>
 8010aec:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010af0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010af4:	e9c4 2300 	strd	r2, r3, [r4]
 8010af8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8010afc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b00:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010b04:	e703      	b.n	801090e <__ieee754_rem_pio2+0x1ee>
 8010b06:	bf00      	nop
 8010b08:	41700000 	.word	0x41700000
 8010b0c:	08018108 	.word	0x08018108

08010b10 <__ieee754_sqrt>:
 8010b10:	f8df c158 	ldr.w	ip, [pc, #344]	; 8010c6c <__ieee754_sqrt+0x15c>
 8010b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b18:	ea3c 0c01 	bics.w	ip, ip, r1
 8010b1c:	4606      	mov	r6, r0
 8010b1e:	460d      	mov	r5, r1
 8010b20:	460c      	mov	r4, r1
 8010b22:	460a      	mov	r2, r1
 8010b24:	4607      	mov	r7, r0
 8010b26:	4603      	mov	r3, r0
 8010b28:	d10f      	bne.n	8010b4a <__ieee754_sqrt+0x3a>
 8010b2a:	4602      	mov	r2, r0
 8010b2c:	460b      	mov	r3, r1
 8010b2e:	f7ef fd19 	bl	8000564 <__aeabi_dmul>
 8010b32:	4602      	mov	r2, r0
 8010b34:	460b      	mov	r3, r1
 8010b36:	4630      	mov	r0, r6
 8010b38:	4629      	mov	r1, r5
 8010b3a:	f7ef fb5d 	bl	80001f8 <__adddf3>
 8010b3e:	4606      	mov	r6, r0
 8010b40:	460d      	mov	r5, r1
 8010b42:	4630      	mov	r0, r6
 8010b44:	4629      	mov	r1, r5
 8010b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b4a:	2900      	cmp	r1, #0
 8010b4c:	dc0e      	bgt.n	8010b6c <__ieee754_sqrt+0x5c>
 8010b4e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8010b52:	ea5c 0707 	orrs.w	r7, ip, r7
 8010b56:	d0f4      	beq.n	8010b42 <__ieee754_sqrt+0x32>
 8010b58:	b141      	cbz	r1, 8010b6c <__ieee754_sqrt+0x5c>
 8010b5a:	4602      	mov	r2, r0
 8010b5c:	460b      	mov	r3, r1
 8010b5e:	f7ef fb49 	bl	80001f4 <__aeabi_dsub>
 8010b62:	4602      	mov	r2, r0
 8010b64:	460b      	mov	r3, r1
 8010b66:	f7ef fe27 	bl	80007b8 <__aeabi_ddiv>
 8010b6a:	e7e8      	b.n	8010b3e <__ieee754_sqrt+0x2e>
 8010b6c:	1521      	asrs	r1, r4, #20
 8010b6e:	d075      	beq.n	8010c5c <__ieee754_sqrt+0x14c>
 8010b70:	07cc      	lsls	r4, r1, #31
 8010b72:	f04f 0400 	mov.w	r4, #0
 8010b76:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8010b7a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8010b7e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8010b82:	bf5e      	ittt	pl
 8010b84:	0fd9      	lsrpl	r1, r3, #31
 8010b86:	005b      	lslpl	r3, r3, #1
 8010b88:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8010b8c:	0fd9      	lsrs	r1, r3, #31
 8010b8e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8010b92:	2516      	movs	r5, #22
 8010b94:	4620      	mov	r0, r4
 8010b96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010b9a:	107f      	asrs	r7, r7, #1
 8010b9c:	005b      	lsls	r3, r3, #1
 8010b9e:	1846      	adds	r6, r0, r1
 8010ba0:	4296      	cmp	r6, r2
 8010ba2:	bfde      	ittt	le
 8010ba4:	1b92      	suble	r2, r2, r6
 8010ba6:	1870      	addle	r0, r6, r1
 8010ba8:	1864      	addle	r4, r4, r1
 8010baa:	0052      	lsls	r2, r2, #1
 8010bac:	3d01      	subs	r5, #1
 8010bae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8010bb2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010bb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010bba:	d1f0      	bne.n	8010b9e <__ieee754_sqrt+0x8e>
 8010bbc:	4629      	mov	r1, r5
 8010bbe:	f04f 0e20 	mov.w	lr, #32
 8010bc2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010bc6:	4282      	cmp	r2, r0
 8010bc8:	eb06 0c05 	add.w	ip, r6, r5
 8010bcc:	dc02      	bgt.n	8010bd4 <__ieee754_sqrt+0xc4>
 8010bce:	d113      	bne.n	8010bf8 <__ieee754_sqrt+0xe8>
 8010bd0:	459c      	cmp	ip, r3
 8010bd2:	d811      	bhi.n	8010bf8 <__ieee754_sqrt+0xe8>
 8010bd4:	f1bc 0f00 	cmp.w	ip, #0
 8010bd8:	eb0c 0506 	add.w	r5, ip, r6
 8010bdc:	da43      	bge.n	8010c66 <__ieee754_sqrt+0x156>
 8010bde:	2d00      	cmp	r5, #0
 8010be0:	db41      	blt.n	8010c66 <__ieee754_sqrt+0x156>
 8010be2:	f100 0801 	add.w	r8, r0, #1
 8010be6:	1a12      	subs	r2, r2, r0
 8010be8:	4640      	mov	r0, r8
 8010bea:	459c      	cmp	ip, r3
 8010bec:	bf88      	it	hi
 8010bee:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8010bf2:	eba3 030c 	sub.w	r3, r3, ip
 8010bf6:	4431      	add	r1, r6
 8010bf8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010bfc:	f1be 0e01 	subs.w	lr, lr, #1
 8010c00:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8010c04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010c0c:	d1db      	bne.n	8010bc6 <__ieee754_sqrt+0xb6>
 8010c0e:	4313      	orrs	r3, r2
 8010c10:	d006      	beq.n	8010c20 <__ieee754_sqrt+0x110>
 8010c12:	1c48      	adds	r0, r1, #1
 8010c14:	bf0b      	itete	eq
 8010c16:	4671      	moveq	r1, lr
 8010c18:	3101      	addne	r1, #1
 8010c1a:	3401      	addeq	r4, #1
 8010c1c:	f021 0101 	bicne.w	r1, r1, #1
 8010c20:	1063      	asrs	r3, r4, #1
 8010c22:	0849      	lsrs	r1, r1, #1
 8010c24:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010c28:	07e2      	lsls	r2, r4, #31
 8010c2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010c2e:	bf48      	it	mi
 8010c30:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8010c34:	460e      	mov	r6, r1
 8010c36:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010c3a:	e782      	b.n	8010b42 <__ieee754_sqrt+0x32>
 8010c3c:	0ada      	lsrs	r2, r3, #11
 8010c3e:	3815      	subs	r0, #21
 8010c40:	055b      	lsls	r3, r3, #21
 8010c42:	2a00      	cmp	r2, #0
 8010c44:	d0fa      	beq.n	8010c3c <__ieee754_sqrt+0x12c>
 8010c46:	02d5      	lsls	r5, r2, #11
 8010c48:	d50a      	bpl.n	8010c60 <__ieee754_sqrt+0x150>
 8010c4a:	f1c1 0420 	rsb	r4, r1, #32
 8010c4e:	fa23 f404 	lsr.w	r4, r3, r4
 8010c52:	1e4d      	subs	r5, r1, #1
 8010c54:	408b      	lsls	r3, r1
 8010c56:	4322      	orrs	r2, r4
 8010c58:	1b41      	subs	r1, r0, r5
 8010c5a:	e789      	b.n	8010b70 <__ieee754_sqrt+0x60>
 8010c5c:	4608      	mov	r0, r1
 8010c5e:	e7f0      	b.n	8010c42 <__ieee754_sqrt+0x132>
 8010c60:	0052      	lsls	r2, r2, #1
 8010c62:	3101      	adds	r1, #1
 8010c64:	e7ef      	b.n	8010c46 <__ieee754_sqrt+0x136>
 8010c66:	4680      	mov	r8, r0
 8010c68:	e7bd      	b.n	8010be6 <__ieee754_sqrt+0xd6>
 8010c6a:	bf00      	nop
 8010c6c:	7ff00000 	.word	0x7ff00000

08010c70 <__kernel_cos>:
 8010c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c74:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010c78:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8010c7c:	4680      	mov	r8, r0
 8010c7e:	460f      	mov	r7, r1
 8010c80:	e9cd 2300 	strd	r2, r3, [sp]
 8010c84:	da04      	bge.n	8010c90 <__kernel_cos+0x20>
 8010c86:	f7ef ff1d 	bl	8000ac4 <__aeabi_d2iz>
 8010c8a:	2800      	cmp	r0, #0
 8010c8c:	f000 8086 	beq.w	8010d9c <__kernel_cos+0x12c>
 8010c90:	4642      	mov	r2, r8
 8010c92:	463b      	mov	r3, r7
 8010c94:	4640      	mov	r0, r8
 8010c96:	4639      	mov	r1, r7
 8010c98:	f7ef fc64 	bl	8000564 <__aeabi_dmul>
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	4b4e      	ldr	r3, [pc, #312]	; (8010dd8 <__kernel_cos+0x168>)
 8010ca0:	4604      	mov	r4, r0
 8010ca2:	460d      	mov	r5, r1
 8010ca4:	f7ef fc5e 	bl	8000564 <__aeabi_dmul>
 8010ca8:	a33f      	add	r3, pc, #252	; (adr r3, 8010da8 <__kernel_cos+0x138>)
 8010caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cae:	4682      	mov	sl, r0
 8010cb0:	468b      	mov	fp, r1
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	4629      	mov	r1, r5
 8010cb6:	f7ef fc55 	bl	8000564 <__aeabi_dmul>
 8010cba:	a33d      	add	r3, pc, #244	; (adr r3, 8010db0 <__kernel_cos+0x140>)
 8010cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc0:	f7ef fa9a 	bl	80001f8 <__adddf3>
 8010cc4:	4622      	mov	r2, r4
 8010cc6:	462b      	mov	r3, r5
 8010cc8:	f7ef fc4c 	bl	8000564 <__aeabi_dmul>
 8010ccc:	a33a      	add	r3, pc, #232	; (adr r3, 8010db8 <__kernel_cos+0x148>)
 8010cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd2:	f7ef fa8f 	bl	80001f4 <__aeabi_dsub>
 8010cd6:	4622      	mov	r2, r4
 8010cd8:	462b      	mov	r3, r5
 8010cda:	f7ef fc43 	bl	8000564 <__aeabi_dmul>
 8010cde:	a338      	add	r3, pc, #224	; (adr r3, 8010dc0 <__kernel_cos+0x150>)
 8010ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce4:	f7ef fa88 	bl	80001f8 <__adddf3>
 8010ce8:	4622      	mov	r2, r4
 8010cea:	462b      	mov	r3, r5
 8010cec:	f7ef fc3a 	bl	8000564 <__aeabi_dmul>
 8010cf0:	a335      	add	r3, pc, #212	; (adr r3, 8010dc8 <__kernel_cos+0x158>)
 8010cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf6:	f7ef fa7d 	bl	80001f4 <__aeabi_dsub>
 8010cfa:	4622      	mov	r2, r4
 8010cfc:	462b      	mov	r3, r5
 8010cfe:	f7ef fc31 	bl	8000564 <__aeabi_dmul>
 8010d02:	a333      	add	r3, pc, #204	; (adr r3, 8010dd0 <__kernel_cos+0x160>)
 8010d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d08:	f7ef fa76 	bl	80001f8 <__adddf3>
 8010d0c:	4622      	mov	r2, r4
 8010d0e:	462b      	mov	r3, r5
 8010d10:	f7ef fc28 	bl	8000564 <__aeabi_dmul>
 8010d14:	4622      	mov	r2, r4
 8010d16:	462b      	mov	r3, r5
 8010d18:	f7ef fc24 	bl	8000564 <__aeabi_dmul>
 8010d1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d20:	4604      	mov	r4, r0
 8010d22:	460d      	mov	r5, r1
 8010d24:	4640      	mov	r0, r8
 8010d26:	4639      	mov	r1, r7
 8010d28:	f7ef fc1c 	bl	8000564 <__aeabi_dmul>
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	4602      	mov	r2, r0
 8010d30:	4629      	mov	r1, r5
 8010d32:	4620      	mov	r0, r4
 8010d34:	f7ef fa5e 	bl	80001f4 <__aeabi_dsub>
 8010d38:	4b28      	ldr	r3, [pc, #160]	; (8010ddc <__kernel_cos+0x16c>)
 8010d3a:	4680      	mov	r8, r0
 8010d3c:	429e      	cmp	r6, r3
 8010d3e:	4689      	mov	r9, r1
 8010d40:	dc0e      	bgt.n	8010d60 <__kernel_cos+0xf0>
 8010d42:	4602      	mov	r2, r0
 8010d44:	460b      	mov	r3, r1
 8010d46:	4650      	mov	r0, sl
 8010d48:	4659      	mov	r1, fp
 8010d4a:	f7ef fa53 	bl	80001f4 <__aeabi_dsub>
 8010d4e:	4602      	mov	r2, r0
 8010d50:	2000      	movs	r0, #0
 8010d52:	460b      	mov	r3, r1
 8010d54:	4922      	ldr	r1, [pc, #136]	; (8010de0 <__kernel_cos+0x170>)
 8010d56:	f7ef fa4d 	bl	80001f4 <__aeabi_dsub>
 8010d5a:	b003      	add	sp, #12
 8010d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d60:	2400      	movs	r4, #0
 8010d62:	4b20      	ldr	r3, [pc, #128]	; (8010de4 <__kernel_cos+0x174>)
 8010d64:	4622      	mov	r2, r4
 8010d66:	429e      	cmp	r6, r3
 8010d68:	bfcc      	ite	gt
 8010d6a:	4d1f      	ldrgt	r5, [pc, #124]	; (8010de8 <__kernel_cos+0x178>)
 8010d6c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8010d70:	462b      	mov	r3, r5
 8010d72:	2000      	movs	r0, #0
 8010d74:	491a      	ldr	r1, [pc, #104]	; (8010de0 <__kernel_cos+0x170>)
 8010d76:	f7ef fa3d 	bl	80001f4 <__aeabi_dsub>
 8010d7a:	4622      	mov	r2, r4
 8010d7c:	4606      	mov	r6, r0
 8010d7e:	460f      	mov	r7, r1
 8010d80:	462b      	mov	r3, r5
 8010d82:	4650      	mov	r0, sl
 8010d84:	4659      	mov	r1, fp
 8010d86:	f7ef fa35 	bl	80001f4 <__aeabi_dsub>
 8010d8a:	4642      	mov	r2, r8
 8010d8c:	464b      	mov	r3, r9
 8010d8e:	f7ef fa31 	bl	80001f4 <__aeabi_dsub>
 8010d92:	4602      	mov	r2, r0
 8010d94:	460b      	mov	r3, r1
 8010d96:	4630      	mov	r0, r6
 8010d98:	4639      	mov	r1, r7
 8010d9a:	e7dc      	b.n	8010d56 <__kernel_cos+0xe6>
 8010d9c:	2000      	movs	r0, #0
 8010d9e:	4910      	ldr	r1, [pc, #64]	; (8010de0 <__kernel_cos+0x170>)
 8010da0:	e7db      	b.n	8010d5a <__kernel_cos+0xea>
 8010da2:	bf00      	nop
 8010da4:	f3af 8000 	nop.w
 8010da8:	be8838d4 	.word	0xbe8838d4
 8010dac:	bda8fae9 	.word	0xbda8fae9
 8010db0:	bdb4b1c4 	.word	0xbdb4b1c4
 8010db4:	3e21ee9e 	.word	0x3e21ee9e
 8010db8:	809c52ad 	.word	0x809c52ad
 8010dbc:	3e927e4f 	.word	0x3e927e4f
 8010dc0:	19cb1590 	.word	0x19cb1590
 8010dc4:	3efa01a0 	.word	0x3efa01a0
 8010dc8:	16c15177 	.word	0x16c15177
 8010dcc:	3f56c16c 	.word	0x3f56c16c
 8010dd0:	5555554c 	.word	0x5555554c
 8010dd4:	3fa55555 	.word	0x3fa55555
 8010dd8:	3fe00000 	.word	0x3fe00000
 8010ddc:	3fd33332 	.word	0x3fd33332
 8010de0:	3ff00000 	.word	0x3ff00000
 8010de4:	3fe90000 	.word	0x3fe90000
 8010de8:	3fd20000 	.word	0x3fd20000

08010dec <__kernel_rem_pio2>:
 8010dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010df4:	9308      	str	r3, [sp, #32]
 8010df6:	9106      	str	r1, [sp, #24]
 8010df8:	4bb6      	ldr	r3, [pc, #728]	; (80110d4 <__kernel_rem_pio2+0x2e8>)
 8010dfa:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8010dfc:	f112 0f14 	cmn.w	r2, #20
 8010e00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e04:	bfa8      	it	ge
 8010e06:	1ed4      	subge	r4, r2, #3
 8010e08:	9302      	str	r3, [sp, #8]
 8010e0a:	9b08      	ldr	r3, [sp, #32]
 8010e0c:	bfb8      	it	lt
 8010e0e:	2400      	movlt	r4, #0
 8010e10:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010e14:	9307      	str	r3, [sp, #28]
 8010e16:	bfa4      	itt	ge
 8010e18:	2318      	movge	r3, #24
 8010e1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8010e1e:	f06f 0317 	mvn.w	r3, #23
 8010e22:	fb04 3303 	mla	r3, r4, r3, r3
 8010e26:	eb03 0b02 	add.w	fp, r3, r2
 8010e2a:	9a07      	ldr	r2, [sp, #28]
 8010e2c:	9b02      	ldr	r3, [sp, #8]
 8010e2e:	1aa7      	subs	r7, r4, r2
 8010e30:	eb03 0802 	add.w	r8, r3, r2
 8010e34:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8010e36:	2500      	movs	r5, #0
 8010e38:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	2300      	movs	r3, #0
 8010e40:	9009      	str	r0, [sp, #36]	; 0x24
 8010e42:	ae20      	add	r6, sp, #128	; 0x80
 8010e44:	4545      	cmp	r5, r8
 8010e46:	dd14      	ble.n	8010e72 <__kernel_rem_pio2+0x86>
 8010e48:	f04f 0800 	mov.w	r8, #0
 8010e4c:	9a08      	ldr	r2, [sp, #32]
 8010e4e:	ab20      	add	r3, sp, #128	; 0x80
 8010e50:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8010e54:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8010e58:	9b02      	ldr	r3, [sp, #8]
 8010e5a:	4598      	cmp	r8, r3
 8010e5c:	dc35      	bgt.n	8010eca <__kernel_rem_pio2+0xde>
 8010e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e60:	2200      	movs	r2, #0
 8010e62:	f1a3 0908 	sub.w	r9, r3, #8
 8010e66:	2300      	movs	r3, #0
 8010e68:	462f      	mov	r7, r5
 8010e6a:	2600      	movs	r6, #0
 8010e6c:	e9cd 2300 	strd	r2, r3, [sp]
 8010e70:	e01f      	b.n	8010eb2 <__kernel_rem_pio2+0xc6>
 8010e72:	42ef      	cmn	r7, r5
 8010e74:	d40b      	bmi.n	8010e8e <__kernel_rem_pio2+0xa2>
 8010e76:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010e7a:	e9cd 2300 	strd	r2, r3, [sp]
 8010e7e:	f7ef fb07 	bl	8000490 <__aeabi_i2d>
 8010e82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e86:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010e8a:	3501      	adds	r5, #1
 8010e8c:	e7da      	b.n	8010e44 <__kernel_rem_pio2+0x58>
 8010e8e:	4610      	mov	r0, r2
 8010e90:	4619      	mov	r1, r3
 8010e92:	e7f8      	b.n	8010e86 <__kernel_rem_pio2+0x9a>
 8010e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e98:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8010e9c:	f7ef fb62 	bl	8000564 <__aeabi_dmul>
 8010ea0:	4602      	mov	r2, r0
 8010ea2:	460b      	mov	r3, r1
 8010ea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ea8:	f7ef f9a6 	bl	80001f8 <__adddf3>
 8010eac:	e9cd 0100 	strd	r0, r1, [sp]
 8010eb0:	3601      	adds	r6, #1
 8010eb2:	9b07      	ldr	r3, [sp, #28]
 8010eb4:	3f08      	subs	r7, #8
 8010eb6:	429e      	cmp	r6, r3
 8010eb8:	ddec      	ble.n	8010e94 <__kernel_rem_pio2+0xa8>
 8010eba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ebe:	f108 0801 	add.w	r8, r8, #1
 8010ec2:	e8ea 2302 	strd	r2, r3, [sl], #8
 8010ec6:	3508      	adds	r5, #8
 8010ec8:	e7c6      	b.n	8010e58 <__kernel_rem_pio2+0x6c>
 8010eca:	9b02      	ldr	r3, [sp, #8]
 8010ecc:	aa0c      	add	r2, sp, #48	; 0x30
 8010ece:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ed2:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ed4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8010ed6:	9e02      	ldr	r6, [sp, #8]
 8010ed8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010edc:	930a      	str	r3, [sp, #40]	; 0x28
 8010ede:	ab98      	add	r3, sp, #608	; 0x260
 8010ee0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010ee4:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8010ee8:	ab70      	add	r3, sp, #448	; 0x1c0
 8010eea:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8010eee:	46d0      	mov	r8, sl
 8010ef0:	46b1      	mov	r9, r6
 8010ef2:	af0c      	add	r7, sp, #48	; 0x30
 8010ef4:	9700      	str	r7, [sp, #0]
 8010ef6:	f1b9 0f00 	cmp.w	r9, #0
 8010efa:	f1a8 0808 	sub.w	r8, r8, #8
 8010efe:	dc71      	bgt.n	8010fe4 <__kernel_rem_pio2+0x1f8>
 8010f00:	465a      	mov	r2, fp
 8010f02:	4620      	mov	r0, r4
 8010f04:	4629      	mov	r1, r5
 8010f06:	f000 fc1f 	bl	8011748 <scalbn>
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010f10:	4604      	mov	r4, r0
 8010f12:	460d      	mov	r5, r1
 8010f14:	f7ef fb26 	bl	8000564 <__aeabi_dmul>
 8010f18:	f000 fb96 	bl	8011648 <floor>
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	4b6e      	ldr	r3, [pc, #440]	; (80110d8 <__kernel_rem_pio2+0x2ec>)
 8010f20:	f7ef fb20 	bl	8000564 <__aeabi_dmul>
 8010f24:	4602      	mov	r2, r0
 8010f26:	460b      	mov	r3, r1
 8010f28:	4620      	mov	r0, r4
 8010f2a:	4629      	mov	r1, r5
 8010f2c:	f7ef f962 	bl	80001f4 <__aeabi_dsub>
 8010f30:	460d      	mov	r5, r1
 8010f32:	4604      	mov	r4, r0
 8010f34:	f7ef fdc6 	bl	8000ac4 <__aeabi_d2iz>
 8010f38:	9004      	str	r0, [sp, #16]
 8010f3a:	f7ef faa9 	bl	8000490 <__aeabi_i2d>
 8010f3e:	4602      	mov	r2, r0
 8010f40:	460b      	mov	r3, r1
 8010f42:	4620      	mov	r0, r4
 8010f44:	4629      	mov	r1, r5
 8010f46:	f7ef f955 	bl	80001f4 <__aeabi_dsub>
 8010f4a:	f1bb 0f00 	cmp.w	fp, #0
 8010f4e:	4680      	mov	r8, r0
 8010f50:	4689      	mov	r9, r1
 8010f52:	dd70      	ble.n	8011036 <__kernel_rem_pio2+0x24a>
 8010f54:	1e72      	subs	r2, r6, #1
 8010f56:	ab0c      	add	r3, sp, #48	; 0x30
 8010f58:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010f5c:	9c04      	ldr	r4, [sp, #16]
 8010f5e:	f1cb 0118 	rsb	r1, fp, #24
 8010f62:	fa40 f301 	asr.w	r3, r0, r1
 8010f66:	441c      	add	r4, r3
 8010f68:	408b      	lsls	r3, r1
 8010f6a:	1ac0      	subs	r0, r0, r3
 8010f6c:	ab0c      	add	r3, sp, #48	; 0x30
 8010f6e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010f72:	f1cb 0317 	rsb	r3, fp, #23
 8010f76:	9404      	str	r4, [sp, #16]
 8010f78:	fa40 f303 	asr.w	r3, r0, r3
 8010f7c:	9300      	str	r3, [sp, #0]
 8010f7e:	9b00      	ldr	r3, [sp, #0]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	dd66      	ble.n	8011052 <__kernel_rem_pio2+0x266>
 8010f84:	2200      	movs	r2, #0
 8010f86:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010f8a:	4614      	mov	r4, r2
 8010f8c:	9b04      	ldr	r3, [sp, #16]
 8010f8e:	3301      	adds	r3, #1
 8010f90:	9304      	str	r3, [sp, #16]
 8010f92:	4296      	cmp	r6, r2
 8010f94:	f300 80ac 	bgt.w	80110f0 <__kernel_rem_pio2+0x304>
 8010f98:	f1bb 0f00 	cmp.w	fp, #0
 8010f9c:	dd07      	ble.n	8010fae <__kernel_rem_pio2+0x1c2>
 8010f9e:	f1bb 0f01 	cmp.w	fp, #1
 8010fa2:	f000 80b4 	beq.w	801110e <__kernel_rem_pio2+0x322>
 8010fa6:	f1bb 0f02 	cmp.w	fp, #2
 8010faa:	f000 80ba 	beq.w	8011122 <__kernel_rem_pio2+0x336>
 8010fae:	9b00      	ldr	r3, [sp, #0]
 8010fb0:	2b02      	cmp	r3, #2
 8010fb2:	d14e      	bne.n	8011052 <__kernel_rem_pio2+0x266>
 8010fb4:	4642      	mov	r2, r8
 8010fb6:	464b      	mov	r3, r9
 8010fb8:	2000      	movs	r0, #0
 8010fba:	4948      	ldr	r1, [pc, #288]	; (80110dc <__kernel_rem_pio2+0x2f0>)
 8010fbc:	f7ef f91a 	bl	80001f4 <__aeabi_dsub>
 8010fc0:	4680      	mov	r8, r0
 8010fc2:	4689      	mov	r9, r1
 8010fc4:	2c00      	cmp	r4, #0
 8010fc6:	d044      	beq.n	8011052 <__kernel_rem_pio2+0x266>
 8010fc8:	465a      	mov	r2, fp
 8010fca:	2000      	movs	r0, #0
 8010fcc:	4943      	ldr	r1, [pc, #268]	; (80110dc <__kernel_rem_pio2+0x2f0>)
 8010fce:	f000 fbbb 	bl	8011748 <scalbn>
 8010fd2:	4602      	mov	r2, r0
 8010fd4:	460b      	mov	r3, r1
 8010fd6:	4640      	mov	r0, r8
 8010fd8:	4649      	mov	r1, r9
 8010fda:	f7ef f90b 	bl	80001f4 <__aeabi_dsub>
 8010fde:	4680      	mov	r8, r0
 8010fe0:	4689      	mov	r9, r1
 8010fe2:	e036      	b.n	8011052 <__kernel_rem_pio2+0x266>
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	4b3e      	ldr	r3, [pc, #248]	; (80110e0 <__kernel_rem_pio2+0x2f4>)
 8010fe8:	4620      	mov	r0, r4
 8010fea:	4629      	mov	r1, r5
 8010fec:	f7ef faba 	bl	8000564 <__aeabi_dmul>
 8010ff0:	f7ef fd68 	bl	8000ac4 <__aeabi_d2iz>
 8010ff4:	f7ef fa4c 	bl	8000490 <__aeabi_i2d>
 8010ff8:	4602      	mov	r2, r0
 8010ffa:	460b      	mov	r3, r1
 8010ffc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011000:	2200      	movs	r2, #0
 8011002:	4b38      	ldr	r3, [pc, #224]	; (80110e4 <__kernel_rem_pio2+0x2f8>)
 8011004:	f7ef faae 	bl	8000564 <__aeabi_dmul>
 8011008:	4602      	mov	r2, r0
 801100a:	460b      	mov	r3, r1
 801100c:	4620      	mov	r0, r4
 801100e:	4629      	mov	r1, r5
 8011010:	f7ef f8f0 	bl	80001f4 <__aeabi_dsub>
 8011014:	f7ef fd56 	bl	8000ac4 <__aeabi_d2iz>
 8011018:	9b00      	ldr	r3, [sp, #0]
 801101a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801101e:	f843 0b04 	str.w	r0, [r3], #4
 8011022:	9300      	str	r3, [sp, #0]
 8011024:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011028:	e9d8 2300 	ldrd	r2, r3, [r8]
 801102c:	f7ef f8e4 	bl	80001f8 <__adddf3>
 8011030:	4604      	mov	r4, r0
 8011032:	460d      	mov	r5, r1
 8011034:	e75f      	b.n	8010ef6 <__kernel_rem_pio2+0x10a>
 8011036:	d105      	bne.n	8011044 <__kernel_rem_pio2+0x258>
 8011038:	1e73      	subs	r3, r6, #1
 801103a:	aa0c      	add	r2, sp, #48	; 0x30
 801103c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011040:	15c3      	asrs	r3, r0, #23
 8011042:	e79b      	b.n	8010f7c <__kernel_rem_pio2+0x190>
 8011044:	2200      	movs	r2, #0
 8011046:	4b28      	ldr	r3, [pc, #160]	; (80110e8 <__kernel_rem_pio2+0x2fc>)
 8011048:	f7ef fd12 	bl	8000a70 <__aeabi_dcmpge>
 801104c:	2800      	cmp	r0, #0
 801104e:	d13e      	bne.n	80110ce <__kernel_rem_pio2+0x2e2>
 8011050:	9000      	str	r0, [sp, #0]
 8011052:	2200      	movs	r2, #0
 8011054:	2300      	movs	r3, #0
 8011056:	4640      	mov	r0, r8
 8011058:	4649      	mov	r1, r9
 801105a:	f7ef fceb 	bl	8000a34 <__aeabi_dcmpeq>
 801105e:	2800      	cmp	r0, #0
 8011060:	f000 80b1 	beq.w	80111c6 <__kernel_rem_pio2+0x3da>
 8011064:	1e74      	subs	r4, r6, #1
 8011066:	4623      	mov	r3, r4
 8011068:	2200      	movs	r2, #0
 801106a:	9902      	ldr	r1, [sp, #8]
 801106c:	428b      	cmp	r3, r1
 801106e:	da5f      	bge.n	8011130 <__kernel_rem_pio2+0x344>
 8011070:	2a00      	cmp	r2, #0
 8011072:	d074      	beq.n	801115e <__kernel_rem_pio2+0x372>
 8011074:	ab0c      	add	r3, sp, #48	; 0x30
 8011076:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801107a:	f1ab 0b18 	sub.w	fp, fp, #24
 801107e:	2b00      	cmp	r3, #0
 8011080:	f000 809f 	beq.w	80111c2 <__kernel_rem_pio2+0x3d6>
 8011084:	465a      	mov	r2, fp
 8011086:	2000      	movs	r0, #0
 8011088:	4914      	ldr	r1, [pc, #80]	; (80110dc <__kernel_rem_pio2+0x2f0>)
 801108a:	f000 fb5d 	bl	8011748 <scalbn>
 801108e:	46a2      	mov	sl, r4
 8011090:	4606      	mov	r6, r0
 8011092:	460f      	mov	r7, r1
 8011094:	f04f 0800 	mov.w	r8, #0
 8011098:	ab70      	add	r3, sp, #448	; 0x1c0
 801109a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80110e0 <__kernel_rem_pio2+0x2f4>
 801109e:	00e5      	lsls	r5, r4, #3
 80110a0:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80110a4:	f1ba 0f00 	cmp.w	sl, #0
 80110a8:	f280 80c3 	bge.w	8011232 <__kernel_rem_pio2+0x446>
 80110ac:	4626      	mov	r6, r4
 80110ae:	2e00      	cmp	r6, #0
 80110b0:	f2c0 80f5 	blt.w	801129e <__kernel_rem_pio2+0x4b2>
 80110b4:	4b0d      	ldr	r3, [pc, #52]	; (80110ec <__kernel_rem_pio2+0x300>)
 80110b6:	f04f 0a00 	mov.w	sl, #0
 80110ba:	9307      	str	r3, [sp, #28]
 80110bc:	ab70      	add	r3, sp, #448	; 0x1c0
 80110be:	f04f 0b00 	mov.w	fp, #0
 80110c2:	f04f 0800 	mov.w	r8, #0
 80110c6:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80110ca:	1ba7      	subs	r7, r4, r6
 80110cc:	e0db      	b.n	8011286 <__kernel_rem_pio2+0x49a>
 80110ce:	2302      	movs	r3, #2
 80110d0:	9300      	str	r3, [sp, #0]
 80110d2:	e757      	b.n	8010f84 <__kernel_rem_pio2+0x198>
 80110d4:	08018250 	.word	0x08018250
 80110d8:	40200000 	.word	0x40200000
 80110dc:	3ff00000 	.word	0x3ff00000
 80110e0:	3e700000 	.word	0x3e700000
 80110e4:	41700000 	.word	0x41700000
 80110e8:	3fe00000 	.word	0x3fe00000
 80110ec:	08018210 	.word	0x08018210
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	b944      	cbnz	r4, 8011106 <__kernel_rem_pio2+0x31a>
 80110f4:	b11b      	cbz	r3, 80110fe <__kernel_rem_pio2+0x312>
 80110f6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80110fa:	603b      	str	r3, [r7, #0]
 80110fc:	2301      	movs	r3, #1
 80110fe:	461c      	mov	r4, r3
 8011100:	3201      	adds	r2, #1
 8011102:	3704      	adds	r7, #4
 8011104:	e745      	b.n	8010f92 <__kernel_rem_pio2+0x1a6>
 8011106:	1acb      	subs	r3, r1, r3
 8011108:	603b      	str	r3, [r7, #0]
 801110a:	4623      	mov	r3, r4
 801110c:	e7f7      	b.n	80110fe <__kernel_rem_pio2+0x312>
 801110e:	1e72      	subs	r2, r6, #1
 8011110:	ab0c      	add	r3, sp, #48	; 0x30
 8011112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011116:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801111a:	a90c      	add	r1, sp, #48	; 0x30
 801111c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011120:	e745      	b.n	8010fae <__kernel_rem_pio2+0x1c2>
 8011122:	1e72      	subs	r2, r6, #1
 8011124:	ab0c      	add	r3, sp, #48	; 0x30
 8011126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801112a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801112e:	e7f4      	b.n	801111a <__kernel_rem_pio2+0x32e>
 8011130:	a90c      	add	r1, sp, #48	; 0x30
 8011132:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011136:	3b01      	subs	r3, #1
 8011138:	430a      	orrs	r2, r1
 801113a:	e796      	b.n	801106a <__kernel_rem_pio2+0x27e>
 801113c:	3401      	adds	r4, #1
 801113e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011142:	2a00      	cmp	r2, #0
 8011144:	d0fa      	beq.n	801113c <__kernel_rem_pio2+0x350>
 8011146:	9b08      	ldr	r3, [sp, #32]
 8011148:	f106 0801 	add.w	r8, r6, #1
 801114c:	18f5      	adds	r5, r6, r3
 801114e:	ab20      	add	r3, sp, #128	; 0x80
 8011150:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011154:	4434      	add	r4, r6
 8011156:	4544      	cmp	r4, r8
 8011158:	da04      	bge.n	8011164 <__kernel_rem_pio2+0x378>
 801115a:	4626      	mov	r6, r4
 801115c:	e6bf      	b.n	8010ede <__kernel_rem_pio2+0xf2>
 801115e:	2401      	movs	r4, #1
 8011160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011162:	e7ec      	b.n	801113e <__kernel_rem_pio2+0x352>
 8011164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011166:	f04f 0900 	mov.w	r9, #0
 801116a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801116e:	f7ef f98f 	bl	8000490 <__aeabi_i2d>
 8011172:	2600      	movs	r6, #0
 8011174:	2700      	movs	r7, #0
 8011176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011178:	e9c5 0100 	strd	r0, r1, [r5]
 801117c:	3b08      	subs	r3, #8
 801117e:	9300      	str	r3, [sp, #0]
 8011180:	9504      	str	r5, [sp, #16]
 8011182:	9b07      	ldr	r3, [sp, #28]
 8011184:	4599      	cmp	r9, r3
 8011186:	dd05      	ble.n	8011194 <__kernel_rem_pio2+0x3a8>
 8011188:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 801118c:	f108 0801 	add.w	r8, r8, #1
 8011190:	3508      	adds	r5, #8
 8011192:	e7e0      	b.n	8011156 <__kernel_rem_pio2+0x36a>
 8011194:	f8dd c010 	ldr.w	ip, [sp, #16]
 8011198:	9900      	ldr	r1, [sp, #0]
 801119a:	f109 0901 	add.w	r9, r9, #1
 801119e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80111a2:	9100      	str	r1, [sp, #0]
 80111a4:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80111a8:	f8cd c010 	str.w	ip, [sp, #16]
 80111ac:	f7ef f9da 	bl	8000564 <__aeabi_dmul>
 80111b0:	4602      	mov	r2, r0
 80111b2:	460b      	mov	r3, r1
 80111b4:	4630      	mov	r0, r6
 80111b6:	4639      	mov	r1, r7
 80111b8:	f7ef f81e 	bl	80001f8 <__adddf3>
 80111bc:	4606      	mov	r6, r0
 80111be:	460f      	mov	r7, r1
 80111c0:	e7df      	b.n	8011182 <__kernel_rem_pio2+0x396>
 80111c2:	3c01      	subs	r4, #1
 80111c4:	e756      	b.n	8011074 <__kernel_rem_pio2+0x288>
 80111c6:	f1cb 0200 	rsb	r2, fp, #0
 80111ca:	4640      	mov	r0, r8
 80111cc:	4649      	mov	r1, r9
 80111ce:	f000 fabb 	bl	8011748 <scalbn>
 80111d2:	2200      	movs	r2, #0
 80111d4:	4ba4      	ldr	r3, [pc, #656]	; (8011468 <__kernel_rem_pio2+0x67c>)
 80111d6:	4604      	mov	r4, r0
 80111d8:	460d      	mov	r5, r1
 80111da:	f7ef fc49 	bl	8000a70 <__aeabi_dcmpge>
 80111de:	b1f8      	cbz	r0, 8011220 <__kernel_rem_pio2+0x434>
 80111e0:	2200      	movs	r2, #0
 80111e2:	4ba2      	ldr	r3, [pc, #648]	; (801146c <__kernel_rem_pio2+0x680>)
 80111e4:	4620      	mov	r0, r4
 80111e6:	4629      	mov	r1, r5
 80111e8:	f7ef f9bc 	bl	8000564 <__aeabi_dmul>
 80111ec:	f7ef fc6a 	bl	8000ac4 <__aeabi_d2iz>
 80111f0:	4607      	mov	r7, r0
 80111f2:	f7ef f94d 	bl	8000490 <__aeabi_i2d>
 80111f6:	2200      	movs	r2, #0
 80111f8:	4b9b      	ldr	r3, [pc, #620]	; (8011468 <__kernel_rem_pio2+0x67c>)
 80111fa:	f7ef f9b3 	bl	8000564 <__aeabi_dmul>
 80111fe:	460b      	mov	r3, r1
 8011200:	4602      	mov	r2, r0
 8011202:	4629      	mov	r1, r5
 8011204:	4620      	mov	r0, r4
 8011206:	f7ee fff5 	bl	80001f4 <__aeabi_dsub>
 801120a:	f7ef fc5b 	bl	8000ac4 <__aeabi_d2iz>
 801120e:	1c74      	adds	r4, r6, #1
 8011210:	ab0c      	add	r3, sp, #48	; 0x30
 8011212:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8011216:	f10b 0b18 	add.w	fp, fp, #24
 801121a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 801121e:	e731      	b.n	8011084 <__kernel_rem_pio2+0x298>
 8011220:	4620      	mov	r0, r4
 8011222:	4629      	mov	r1, r5
 8011224:	f7ef fc4e 	bl	8000ac4 <__aeabi_d2iz>
 8011228:	ab0c      	add	r3, sp, #48	; 0x30
 801122a:	4634      	mov	r4, r6
 801122c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8011230:	e728      	b.n	8011084 <__kernel_rem_pio2+0x298>
 8011232:	ab0c      	add	r3, sp, #48	; 0x30
 8011234:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8011238:	f7ef f92a 	bl	8000490 <__aeabi_i2d>
 801123c:	4632      	mov	r2, r6
 801123e:	463b      	mov	r3, r7
 8011240:	f7ef f990 	bl	8000564 <__aeabi_dmul>
 8011244:	4642      	mov	r2, r8
 8011246:	e86b 0102 	strd	r0, r1, [fp], #-8
 801124a:	464b      	mov	r3, r9
 801124c:	4630      	mov	r0, r6
 801124e:	4639      	mov	r1, r7
 8011250:	f7ef f988 	bl	8000564 <__aeabi_dmul>
 8011254:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011258:	4606      	mov	r6, r0
 801125a:	460f      	mov	r7, r1
 801125c:	e722      	b.n	80110a4 <__kernel_rem_pio2+0x2b8>
 801125e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8011262:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8011266:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 801126a:	f8cd c01c 	str.w	ip, [sp, #28]
 801126e:	f7ef f979 	bl	8000564 <__aeabi_dmul>
 8011272:	4602      	mov	r2, r0
 8011274:	460b      	mov	r3, r1
 8011276:	4650      	mov	r0, sl
 8011278:	4659      	mov	r1, fp
 801127a:	f7ee ffbd 	bl	80001f8 <__adddf3>
 801127e:	4682      	mov	sl, r0
 8011280:	468b      	mov	fp, r1
 8011282:	f108 0801 	add.w	r8, r8, #1
 8011286:	9b02      	ldr	r3, [sp, #8]
 8011288:	4598      	cmp	r8, r3
 801128a:	dc01      	bgt.n	8011290 <__kernel_rem_pio2+0x4a4>
 801128c:	45b8      	cmp	r8, r7
 801128e:	dde6      	ble.n	801125e <__kernel_rem_pio2+0x472>
 8011290:	ab48      	add	r3, sp, #288	; 0x120
 8011292:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011296:	e9c7 ab00 	strd	sl, fp, [r7]
 801129a:	3e01      	subs	r6, #1
 801129c:	e707      	b.n	80110ae <__kernel_rem_pio2+0x2c2>
 801129e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80112a0:	2b02      	cmp	r3, #2
 80112a2:	dc09      	bgt.n	80112b8 <__kernel_rem_pio2+0x4cc>
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	dc32      	bgt.n	801130e <__kernel_rem_pio2+0x522>
 80112a8:	d05a      	beq.n	8011360 <__kernel_rem_pio2+0x574>
 80112aa:	9b04      	ldr	r3, [sp, #16]
 80112ac:	f003 0007 	and.w	r0, r3, #7
 80112b0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80112b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112b8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80112ba:	2b03      	cmp	r3, #3
 80112bc:	d1f5      	bne.n	80112aa <__kernel_rem_pio2+0x4be>
 80112be:	ab48      	add	r3, sp, #288	; 0x120
 80112c0:	441d      	add	r5, r3
 80112c2:	46aa      	mov	sl, r5
 80112c4:	46a3      	mov	fp, r4
 80112c6:	f1bb 0f00 	cmp.w	fp, #0
 80112ca:	dc76      	bgt.n	80113ba <__kernel_rem_pio2+0x5ce>
 80112cc:	46aa      	mov	sl, r5
 80112ce:	46a3      	mov	fp, r4
 80112d0:	f1bb 0f01 	cmp.w	fp, #1
 80112d4:	f300 8090 	bgt.w	80113f8 <__kernel_rem_pio2+0x60c>
 80112d8:	2700      	movs	r7, #0
 80112da:	463e      	mov	r6, r7
 80112dc:	2c01      	cmp	r4, #1
 80112de:	f300 80aa 	bgt.w	8011436 <__kernel_rem_pio2+0x64a>
 80112e2:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80112e6:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80112ea:	9b00      	ldr	r3, [sp, #0]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	f040 80ac 	bne.w	801144a <__kernel_rem_pio2+0x65e>
 80112f2:	4603      	mov	r3, r0
 80112f4:	462a      	mov	r2, r5
 80112f6:	9806      	ldr	r0, [sp, #24]
 80112f8:	e9c0 2300 	strd	r2, r3, [r0]
 80112fc:	4622      	mov	r2, r4
 80112fe:	460b      	mov	r3, r1
 8011300:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011304:	463a      	mov	r2, r7
 8011306:	4633      	mov	r3, r6
 8011308:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801130c:	e7cd      	b.n	80112aa <__kernel_rem_pio2+0x4be>
 801130e:	2000      	movs	r0, #0
 8011310:	46a0      	mov	r8, r4
 8011312:	4601      	mov	r1, r0
 8011314:	ab48      	add	r3, sp, #288	; 0x120
 8011316:	441d      	add	r5, r3
 8011318:	f1b8 0f00 	cmp.w	r8, #0
 801131c:	da3a      	bge.n	8011394 <__kernel_rem_pio2+0x5a8>
 801131e:	9b00      	ldr	r3, [sp, #0]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d03e      	beq.n	80113a2 <__kernel_rem_pio2+0x5b6>
 8011324:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8011328:	4602      	mov	r2, r0
 801132a:	462b      	mov	r3, r5
 801132c:	9d06      	ldr	r5, [sp, #24]
 801132e:	2601      	movs	r6, #1
 8011330:	e9c5 2300 	strd	r2, r3, [r5]
 8011334:	460b      	mov	r3, r1
 8011336:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801133a:	f7ee ff5b 	bl	80001f4 <__aeabi_dsub>
 801133e:	4684      	mov	ip, r0
 8011340:	460f      	mov	r7, r1
 8011342:	ad48      	add	r5, sp, #288	; 0x120
 8011344:	42b4      	cmp	r4, r6
 8011346:	f105 0508 	add.w	r5, r5, #8
 801134a:	da2c      	bge.n	80113a6 <__kernel_rem_pio2+0x5ba>
 801134c:	9b00      	ldr	r3, [sp, #0]
 801134e:	b10b      	cbz	r3, 8011354 <__kernel_rem_pio2+0x568>
 8011350:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8011354:	4662      	mov	r2, ip
 8011356:	463b      	mov	r3, r7
 8011358:	9906      	ldr	r1, [sp, #24]
 801135a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 801135e:	e7a4      	b.n	80112aa <__kernel_rem_pio2+0x4be>
 8011360:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8011362:	ab48      	add	r3, sp, #288	; 0x120
 8011364:	4637      	mov	r7, r6
 8011366:	441d      	add	r5, r3
 8011368:	2c00      	cmp	r4, #0
 801136a:	da09      	bge.n	8011380 <__kernel_rem_pio2+0x594>
 801136c:	9b00      	ldr	r3, [sp, #0]
 801136e:	b10b      	cbz	r3, 8011374 <__kernel_rem_pio2+0x588>
 8011370:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8011374:	4632      	mov	r2, r6
 8011376:	463b      	mov	r3, r7
 8011378:	9906      	ldr	r1, [sp, #24]
 801137a:	e9c1 2300 	strd	r2, r3, [r1]
 801137e:	e794      	b.n	80112aa <__kernel_rem_pio2+0x4be>
 8011380:	4630      	mov	r0, r6
 8011382:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8011386:	4639      	mov	r1, r7
 8011388:	f7ee ff36 	bl	80001f8 <__adddf3>
 801138c:	3c01      	subs	r4, #1
 801138e:	4606      	mov	r6, r0
 8011390:	460f      	mov	r7, r1
 8011392:	e7e9      	b.n	8011368 <__kernel_rem_pio2+0x57c>
 8011394:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8011398:	f7ee ff2e 	bl	80001f8 <__adddf3>
 801139c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80113a0:	e7ba      	b.n	8011318 <__kernel_rem_pio2+0x52c>
 80113a2:	460d      	mov	r5, r1
 80113a4:	e7c0      	b.n	8011328 <__kernel_rem_pio2+0x53c>
 80113a6:	4660      	mov	r0, ip
 80113a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80113ac:	4639      	mov	r1, r7
 80113ae:	f7ee ff23 	bl	80001f8 <__adddf3>
 80113b2:	3601      	adds	r6, #1
 80113b4:	4684      	mov	ip, r0
 80113b6:	460f      	mov	r7, r1
 80113b8:	e7c4      	b.n	8011344 <__kernel_rem_pio2+0x558>
 80113ba:	e9da 6700 	ldrd	r6, r7, [sl]
 80113be:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80113c2:	4632      	mov	r2, r6
 80113c4:	463b      	mov	r3, r7
 80113c6:	4640      	mov	r0, r8
 80113c8:	4649      	mov	r1, r9
 80113ca:	f7ee ff15 	bl	80001f8 <__adddf3>
 80113ce:	4602      	mov	r2, r0
 80113d0:	460b      	mov	r3, r1
 80113d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80113d6:	4640      	mov	r0, r8
 80113d8:	4649      	mov	r1, r9
 80113da:	f7ee ff0b 	bl	80001f4 <__aeabi_dsub>
 80113de:	4632      	mov	r2, r6
 80113e0:	463b      	mov	r3, r7
 80113e2:	f7ee ff09 	bl	80001f8 <__adddf3>
 80113e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80113ea:	e86a 0102 	strd	r0, r1, [sl], #-8
 80113ee:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80113f2:	e9ca 2300 	strd	r2, r3, [sl]
 80113f6:	e766      	b.n	80112c6 <__kernel_rem_pio2+0x4da>
 80113f8:	e9da 8900 	ldrd	r8, r9, [sl]
 80113fc:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8011400:	4642      	mov	r2, r8
 8011402:	464b      	mov	r3, r9
 8011404:	4630      	mov	r0, r6
 8011406:	4639      	mov	r1, r7
 8011408:	f7ee fef6 	bl	80001f8 <__adddf3>
 801140c:	4602      	mov	r2, r0
 801140e:	460b      	mov	r3, r1
 8011410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011414:	4630      	mov	r0, r6
 8011416:	4639      	mov	r1, r7
 8011418:	f7ee feec 	bl	80001f4 <__aeabi_dsub>
 801141c:	4642      	mov	r2, r8
 801141e:	464b      	mov	r3, r9
 8011420:	f7ee feea 	bl	80001f8 <__adddf3>
 8011424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011428:	e86a 0102 	strd	r0, r1, [sl], #-8
 801142c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011430:	e9ca 2300 	strd	r2, r3, [sl]
 8011434:	e74c      	b.n	80112d0 <__kernel_rem_pio2+0x4e4>
 8011436:	4638      	mov	r0, r7
 8011438:	e875 2302 	ldrd	r2, r3, [r5], #-8
 801143c:	4631      	mov	r1, r6
 801143e:	f7ee fedb 	bl	80001f8 <__adddf3>
 8011442:	3c01      	subs	r4, #1
 8011444:	4607      	mov	r7, r0
 8011446:	460e      	mov	r6, r1
 8011448:	e748      	b.n	80112dc <__kernel_rem_pio2+0x4f0>
 801144a:	9b06      	ldr	r3, [sp, #24]
 801144c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8011450:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8011454:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8011458:	e9c3 0401 	strd	r0, r4, [r3, #4]
 801145c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8011460:	601d      	str	r5, [r3, #0]
 8011462:	615e      	str	r6, [r3, #20]
 8011464:	e721      	b.n	80112aa <__kernel_rem_pio2+0x4be>
 8011466:	bf00      	nop
 8011468:	41700000 	.word	0x41700000
 801146c:	3e700000 	.word	0x3e700000

08011470 <__kernel_sin>:
 8011470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011474:	b086      	sub	sp, #24
 8011476:	e9cd 2300 	strd	r2, r3, [sp]
 801147a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801147e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011482:	4682      	mov	sl, r0
 8011484:	460c      	mov	r4, r1
 8011486:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011488:	da03      	bge.n	8011492 <__kernel_sin+0x22>
 801148a:	f7ef fb1b 	bl	8000ac4 <__aeabi_d2iz>
 801148e:	2800      	cmp	r0, #0
 8011490:	d050      	beq.n	8011534 <__kernel_sin+0xc4>
 8011492:	4652      	mov	r2, sl
 8011494:	4623      	mov	r3, r4
 8011496:	4650      	mov	r0, sl
 8011498:	4621      	mov	r1, r4
 801149a:	f7ef f863 	bl	8000564 <__aeabi_dmul>
 801149e:	4606      	mov	r6, r0
 80114a0:	460f      	mov	r7, r1
 80114a2:	4602      	mov	r2, r0
 80114a4:	460b      	mov	r3, r1
 80114a6:	4650      	mov	r0, sl
 80114a8:	4621      	mov	r1, r4
 80114aa:	f7ef f85b 	bl	8000564 <__aeabi_dmul>
 80114ae:	a33e      	add	r3, pc, #248	; (adr r3, 80115a8 <__kernel_sin+0x138>)
 80114b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b4:	4680      	mov	r8, r0
 80114b6:	4689      	mov	r9, r1
 80114b8:	4630      	mov	r0, r6
 80114ba:	4639      	mov	r1, r7
 80114bc:	f7ef f852 	bl	8000564 <__aeabi_dmul>
 80114c0:	a33b      	add	r3, pc, #236	; (adr r3, 80115b0 <__kernel_sin+0x140>)
 80114c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c6:	f7ee fe95 	bl	80001f4 <__aeabi_dsub>
 80114ca:	4632      	mov	r2, r6
 80114cc:	463b      	mov	r3, r7
 80114ce:	f7ef f849 	bl	8000564 <__aeabi_dmul>
 80114d2:	a339      	add	r3, pc, #228	; (adr r3, 80115b8 <__kernel_sin+0x148>)
 80114d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d8:	f7ee fe8e 	bl	80001f8 <__adddf3>
 80114dc:	4632      	mov	r2, r6
 80114de:	463b      	mov	r3, r7
 80114e0:	f7ef f840 	bl	8000564 <__aeabi_dmul>
 80114e4:	a336      	add	r3, pc, #216	; (adr r3, 80115c0 <__kernel_sin+0x150>)
 80114e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ea:	f7ee fe83 	bl	80001f4 <__aeabi_dsub>
 80114ee:	4632      	mov	r2, r6
 80114f0:	463b      	mov	r3, r7
 80114f2:	f7ef f837 	bl	8000564 <__aeabi_dmul>
 80114f6:	a334      	add	r3, pc, #208	; (adr r3, 80115c8 <__kernel_sin+0x158>)
 80114f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114fc:	f7ee fe7c 	bl	80001f8 <__adddf3>
 8011500:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011504:	b9dd      	cbnz	r5, 801153e <__kernel_sin+0xce>
 8011506:	4602      	mov	r2, r0
 8011508:	460b      	mov	r3, r1
 801150a:	4630      	mov	r0, r6
 801150c:	4639      	mov	r1, r7
 801150e:	f7ef f829 	bl	8000564 <__aeabi_dmul>
 8011512:	a32f      	add	r3, pc, #188	; (adr r3, 80115d0 <__kernel_sin+0x160>)
 8011514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011518:	f7ee fe6c 	bl	80001f4 <__aeabi_dsub>
 801151c:	4642      	mov	r2, r8
 801151e:	464b      	mov	r3, r9
 8011520:	f7ef f820 	bl	8000564 <__aeabi_dmul>
 8011524:	4602      	mov	r2, r0
 8011526:	460b      	mov	r3, r1
 8011528:	4650      	mov	r0, sl
 801152a:	4621      	mov	r1, r4
 801152c:	f7ee fe64 	bl	80001f8 <__adddf3>
 8011530:	4682      	mov	sl, r0
 8011532:	460c      	mov	r4, r1
 8011534:	4650      	mov	r0, sl
 8011536:	4621      	mov	r1, r4
 8011538:	b006      	add	sp, #24
 801153a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801153e:	2200      	movs	r2, #0
 8011540:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011544:	4b24      	ldr	r3, [pc, #144]	; (80115d8 <__kernel_sin+0x168>)
 8011546:	f7ef f80d 	bl	8000564 <__aeabi_dmul>
 801154a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801154e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011552:	4640      	mov	r0, r8
 8011554:	4649      	mov	r1, r9
 8011556:	f7ef f805 	bl	8000564 <__aeabi_dmul>
 801155a:	4602      	mov	r2, r0
 801155c:	460b      	mov	r3, r1
 801155e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011562:	f7ee fe47 	bl	80001f4 <__aeabi_dsub>
 8011566:	4632      	mov	r2, r6
 8011568:	463b      	mov	r3, r7
 801156a:	f7ee fffb 	bl	8000564 <__aeabi_dmul>
 801156e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011572:	f7ee fe3f 	bl	80001f4 <__aeabi_dsub>
 8011576:	a316      	add	r3, pc, #88	; (adr r3, 80115d0 <__kernel_sin+0x160>)
 8011578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801157c:	4606      	mov	r6, r0
 801157e:	460f      	mov	r7, r1
 8011580:	4640      	mov	r0, r8
 8011582:	4649      	mov	r1, r9
 8011584:	f7ee ffee 	bl	8000564 <__aeabi_dmul>
 8011588:	4602      	mov	r2, r0
 801158a:	460b      	mov	r3, r1
 801158c:	4630      	mov	r0, r6
 801158e:	4639      	mov	r1, r7
 8011590:	f7ee fe32 	bl	80001f8 <__adddf3>
 8011594:	4602      	mov	r2, r0
 8011596:	460b      	mov	r3, r1
 8011598:	4650      	mov	r0, sl
 801159a:	4621      	mov	r1, r4
 801159c:	f7ee fe2a 	bl	80001f4 <__aeabi_dsub>
 80115a0:	e7c6      	b.n	8011530 <__kernel_sin+0xc0>
 80115a2:	bf00      	nop
 80115a4:	f3af 8000 	nop.w
 80115a8:	5acfd57c 	.word	0x5acfd57c
 80115ac:	3de5d93a 	.word	0x3de5d93a
 80115b0:	8a2b9ceb 	.word	0x8a2b9ceb
 80115b4:	3e5ae5e6 	.word	0x3e5ae5e6
 80115b8:	57b1fe7d 	.word	0x57b1fe7d
 80115bc:	3ec71de3 	.word	0x3ec71de3
 80115c0:	19c161d5 	.word	0x19c161d5
 80115c4:	3f2a01a0 	.word	0x3f2a01a0
 80115c8:	1110f8a6 	.word	0x1110f8a6
 80115cc:	3f811111 	.word	0x3f811111
 80115d0:	55555549 	.word	0x55555549
 80115d4:	3fc55555 	.word	0x3fc55555
 80115d8:	3fe00000 	.word	0x3fe00000

080115dc <with_errno>:
 80115dc:	b570      	push	{r4, r5, r6, lr}
 80115de:	4604      	mov	r4, r0
 80115e0:	460d      	mov	r5, r1
 80115e2:	4616      	mov	r6, r2
 80115e4:	f000 f92e 	bl	8011844 <__errno>
 80115e8:	4629      	mov	r1, r5
 80115ea:	6006      	str	r6, [r0, #0]
 80115ec:	4620      	mov	r0, r4
 80115ee:	bd70      	pop	{r4, r5, r6, pc}

080115f0 <xflow>:
 80115f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80115f2:	4615      	mov	r5, r2
 80115f4:	461c      	mov	r4, r3
 80115f6:	b180      	cbz	r0, 801161a <xflow+0x2a>
 80115f8:	4610      	mov	r0, r2
 80115fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80115fe:	e9cd 0100 	strd	r0, r1, [sp]
 8011602:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011606:	4628      	mov	r0, r5
 8011608:	4621      	mov	r1, r4
 801160a:	f7ee ffab 	bl	8000564 <__aeabi_dmul>
 801160e:	2222      	movs	r2, #34	; 0x22
 8011610:	b003      	add	sp, #12
 8011612:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011616:	f7ff bfe1 	b.w	80115dc <with_errno>
 801161a:	4610      	mov	r0, r2
 801161c:	4619      	mov	r1, r3
 801161e:	e7ee      	b.n	80115fe <xflow+0xe>

08011620 <__math_uflow>:
 8011620:	2200      	movs	r2, #0
 8011622:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011626:	f7ff bfe3 	b.w	80115f0 <xflow>

0801162a <__math_oflow>:
 801162a:	2200      	movs	r2, #0
 801162c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011630:	f7ff bfde 	b.w	80115f0 <xflow>

08011634 <fabs>:
 8011634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011638:	4770      	bx	lr

0801163a <finite>:
 801163a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 801163e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011642:	0fc0      	lsrs	r0, r0, #31
 8011644:	4770      	bx	lr
	...

08011648 <floor>:
 8011648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801164c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8011650:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8011654:	2e13      	cmp	r6, #19
 8011656:	4602      	mov	r2, r0
 8011658:	460b      	mov	r3, r1
 801165a:	4607      	mov	r7, r0
 801165c:	460c      	mov	r4, r1
 801165e:	4605      	mov	r5, r0
 8011660:	dc33      	bgt.n	80116ca <floor+0x82>
 8011662:	2e00      	cmp	r6, #0
 8011664:	da14      	bge.n	8011690 <floor+0x48>
 8011666:	a334      	add	r3, pc, #208	; (adr r3, 8011738 <floor+0xf0>)
 8011668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801166c:	f7ee fdc4 	bl	80001f8 <__adddf3>
 8011670:	2200      	movs	r2, #0
 8011672:	2300      	movs	r3, #0
 8011674:	f7ef fa06 	bl	8000a84 <__aeabi_dcmpgt>
 8011678:	b138      	cbz	r0, 801168a <floor+0x42>
 801167a:	2c00      	cmp	r4, #0
 801167c:	da58      	bge.n	8011730 <floor+0xe8>
 801167e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011682:	431d      	orrs	r5, r3
 8011684:	d001      	beq.n	801168a <floor+0x42>
 8011686:	2500      	movs	r5, #0
 8011688:	4c2d      	ldr	r4, [pc, #180]	; (8011740 <floor+0xf8>)
 801168a:	4623      	mov	r3, r4
 801168c:	462f      	mov	r7, r5
 801168e:	e025      	b.n	80116dc <floor+0x94>
 8011690:	4a2c      	ldr	r2, [pc, #176]	; (8011744 <floor+0xfc>)
 8011692:	fa42 f806 	asr.w	r8, r2, r6
 8011696:	ea01 0208 	and.w	r2, r1, r8
 801169a:	4302      	orrs	r2, r0
 801169c:	d01e      	beq.n	80116dc <floor+0x94>
 801169e:	a326      	add	r3, pc, #152	; (adr r3, 8011738 <floor+0xf0>)
 80116a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a4:	f7ee fda8 	bl	80001f8 <__adddf3>
 80116a8:	2200      	movs	r2, #0
 80116aa:	2300      	movs	r3, #0
 80116ac:	f7ef f9ea 	bl	8000a84 <__aeabi_dcmpgt>
 80116b0:	2800      	cmp	r0, #0
 80116b2:	d0ea      	beq.n	801168a <floor+0x42>
 80116b4:	2c00      	cmp	r4, #0
 80116b6:	bfbe      	ittt	lt
 80116b8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80116bc:	fa43 f606 	asrlt.w	r6, r3, r6
 80116c0:	19a4      	addlt	r4, r4, r6
 80116c2:	2500      	movs	r5, #0
 80116c4:	ea24 0408 	bic.w	r4, r4, r8
 80116c8:	e7df      	b.n	801168a <floor+0x42>
 80116ca:	2e33      	cmp	r6, #51	; 0x33
 80116cc:	dd0a      	ble.n	80116e4 <floor+0x9c>
 80116ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80116d2:	d103      	bne.n	80116dc <floor+0x94>
 80116d4:	f7ee fd90 	bl	80001f8 <__adddf3>
 80116d8:	4607      	mov	r7, r0
 80116da:	460b      	mov	r3, r1
 80116dc:	4638      	mov	r0, r7
 80116de:	4619      	mov	r1, r3
 80116e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80116e8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80116ec:	fa22 f808 	lsr.w	r8, r2, r8
 80116f0:	ea18 0f00 	tst.w	r8, r0
 80116f4:	d0f2      	beq.n	80116dc <floor+0x94>
 80116f6:	a310      	add	r3, pc, #64	; (adr r3, 8011738 <floor+0xf0>)
 80116f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116fc:	f7ee fd7c 	bl	80001f8 <__adddf3>
 8011700:	2200      	movs	r2, #0
 8011702:	2300      	movs	r3, #0
 8011704:	f7ef f9be 	bl	8000a84 <__aeabi_dcmpgt>
 8011708:	2800      	cmp	r0, #0
 801170a:	d0be      	beq.n	801168a <floor+0x42>
 801170c:	2c00      	cmp	r4, #0
 801170e:	da02      	bge.n	8011716 <floor+0xce>
 8011710:	2e14      	cmp	r6, #20
 8011712:	d103      	bne.n	801171c <floor+0xd4>
 8011714:	3401      	adds	r4, #1
 8011716:	ea25 0508 	bic.w	r5, r5, r8
 801171a:	e7b6      	b.n	801168a <floor+0x42>
 801171c:	2301      	movs	r3, #1
 801171e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011722:	fa03 f606 	lsl.w	r6, r3, r6
 8011726:	4435      	add	r5, r6
 8011728:	42bd      	cmp	r5, r7
 801172a:	bf38      	it	cc
 801172c:	18e4      	addcc	r4, r4, r3
 801172e:	e7f2      	b.n	8011716 <floor+0xce>
 8011730:	2500      	movs	r5, #0
 8011732:	462c      	mov	r4, r5
 8011734:	e7a9      	b.n	801168a <floor+0x42>
 8011736:	bf00      	nop
 8011738:	8800759c 	.word	0x8800759c
 801173c:	7e37e43c 	.word	0x7e37e43c
 8011740:	bff00000 	.word	0xbff00000
 8011744:	000fffff 	.word	0x000fffff

08011748 <scalbn>:
 8011748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801174a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 801174e:	4604      	mov	r4, r0
 8011750:	460d      	mov	r5, r1
 8011752:	4617      	mov	r7, r2
 8011754:	460b      	mov	r3, r1
 8011756:	b996      	cbnz	r6, 801177e <scalbn+0x36>
 8011758:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801175c:	4303      	orrs	r3, r0
 801175e:	d039      	beq.n	80117d4 <scalbn+0x8c>
 8011760:	4b33      	ldr	r3, [pc, #204]	; (8011830 <scalbn+0xe8>)
 8011762:	2200      	movs	r2, #0
 8011764:	f7ee fefe 	bl	8000564 <__aeabi_dmul>
 8011768:	4b32      	ldr	r3, [pc, #200]	; (8011834 <scalbn+0xec>)
 801176a:	4604      	mov	r4, r0
 801176c:	429f      	cmp	r7, r3
 801176e:	460d      	mov	r5, r1
 8011770:	da0f      	bge.n	8011792 <scalbn+0x4a>
 8011772:	a32b      	add	r3, pc, #172	; (adr r3, 8011820 <scalbn+0xd8>)
 8011774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011778:	f7ee fef4 	bl	8000564 <__aeabi_dmul>
 801177c:	e006      	b.n	801178c <scalbn+0x44>
 801177e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011782:	4296      	cmp	r6, r2
 8011784:	d10a      	bne.n	801179c <scalbn+0x54>
 8011786:	4602      	mov	r2, r0
 8011788:	f7ee fd36 	bl	80001f8 <__adddf3>
 801178c:	4604      	mov	r4, r0
 801178e:	460d      	mov	r5, r1
 8011790:	e020      	b.n	80117d4 <scalbn+0x8c>
 8011792:	460b      	mov	r3, r1
 8011794:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011798:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 801179c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80117a0:	19b9      	adds	r1, r7, r6
 80117a2:	4291      	cmp	r1, r2
 80117a4:	dd0e      	ble.n	80117c4 <scalbn+0x7c>
 80117a6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80117aa:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80117ae:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80117b2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80117b6:	4820      	ldr	r0, [pc, #128]	; (8011838 <scalbn+0xf0>)
 80117b8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80117bc:	a31a      	add	r3, pc, #104	; (adr r3, 8011828 <scalbn+0xe0>)
 80117be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c2:	e7d9      	b.n	8011778 <scalbn+0x30>
 80117c4:	2900      	cmp	r1, #0
 80117c6:	dd08      	ble.n	80117da <scalbn+0x92>
 80117c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80117cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80117d0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80117d4:	4620      	mov	r0, r4
 80117d6:	4629      	mov	r1, r5
 80117d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117da:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80117de:	da12      	bge.n	8011806 <scalbn+0xbe>
 80117e0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80117e4:	429f      	cmp	r7, r3
 80117e6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80117ea:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80117ee:	dcdc      	bgt.n	80117aa <scalbn+0x62>
 80117f0:	a30b      	add	r3, pc, #44	; (adr r3, 8011820 <scalbn+0xd8>)
 80117f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80117fa:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80117fe:	480f      	ldr	r0, [pc, #60]	; (801183c <scalbn+0xf4>)
 8011800:	f041 011f 	orr.w	r1, r1, #31
 8011804:	e7b8      	b.n	8011778 <scalbn+0x30>
 8011806:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801180a:	3136      	adds	r1, #54	; 0x36
 801180c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011810:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8011814:	4620      	mov	r0, r4
 8011816:	4629      	mov	r1, r5
 8011818:	2200      	movs	r2, #0
 801181a:	4b09      	ldr	r3, [pc, #36]	; (8011840 <scalbn+0xf8>)
 801181c:	e7ac      	b.n	8011778 <scalbn+0x30>
 801181e:	bf00      	nop
 8011820:	c2f8f359 	.word	0xc2f8f359
 8011824:	01a56e1f 	.word	0x01a56e1f
 8011828:	8800759c 	.word	0x8800759c
 801182c:	7e37e43c 	.word	0x7e37e43c
 8011830:	43500000 	.word	0x43500000
 8011834:	ffff3cb0 	.word	0xffff3cb0
 8011838:	8800759c 	.word	0x8800759c
 801183c:	c2f8f359 	.word	0xc2f8f359
 8011840:	3c900000 	.word	0x3c900000

08011844 <__errno>:
 8011844:	4b01      	ldr	r3, [pc, #4]	; (801184c <__errno+0x8>)
 8011846:	6818      	ldr	r0, [r3, #0]
 8011848:	4770      	bx	lr
 801184a:	bf00      	nop
 801184c:	20000038 	.word	0x20000038

08011850 <__libc_init_array>:
 8011850:	b570      	push	{r4, r5, r6, lr}
 8011852:	2600      	movs	r6, #0
 8011854:	4d0c      	ldr	r5, [pc, #48]	; (8011888 <__libc_init_array+0x38>)
 8011856:	4c0d      	ldr	r4, [pc, #52]	; (801188c <__libc_init_array+0x3c>)
 8011858:	1b64      	subs	r4, r4, r5
 801185a:	10a4      	asrs	r4, r4, #2
 801185c:	42a6      	cmp	r6, r4
 801185e:	d109      	bne.n	8011874 <__libc_init_array+0x24>
 8011860:	f004 fc7e 	bl	8016160 <_init>
 8011864:	2600      	movs	r6, #0
 8011866:	4d0a      	ldr	r5, [pc, #40]	; (8011890 <__libc_init_array+0x40>)
 8011868:	4c0a      	ldr	r4, [pc, #40]	; (8011894 <__libc_init_array+0x44>)
 801186a:	1b64      	subs	r4, r4, r5
 801186c:	10a4      	asrs	r4, r4, #2
 801186e:	42a6      	cmp	r6, r4
 8011870:	d105      	bne.n	801187e <__libc_init_array+0x2e>
 8011872:	bd70      	pop	{r4, r5, r6, pc}
 8011874:	f855 3b04 	ldr.w	r3, [r5], #4
 8011878:	4798      	blx	r3
 801187a:	3601      	adds	r6, #1
 801187c:	e7ee      	b.n	801185c <__libc_init_array+0xc>
 801187e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011882:	4798      	blx	r3
 8011884:	3601      	adds	r6, #1
 8011886:	e7f2      	b.n	801186e <__libc_init_array+0x1e>
 8011888:	08018714 	.word	0x08018714
 801188c:	08018714 	.word	0x08018714
 8011890:	08018714 	.word	0x08018714
 8011894:	08018718 	.word	0x08018718

08011898 <memcmp>:
 8011898:	b510      	push	{r4, lr}
 801189a:	3901      	subs	r1, #1
 801189c:	4402      	add	r2, r0
 801189e:	4290      	cmp	r0, r2
 80118a0:	d101      	bne.n	80118a6 <memcmp+0xe>
 80118a2:	2000      	movs	r0, #0
 80118a4:	e005      	b.n	80118b2 <memcmp+0x1a>
 80118a6:	7803      	ldrb	r3, [r0, #0]
 80118a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80118ac:	42a3      	cmp	r3, r4
 80118ae:	d001      	beq.n	80118b4 <memcmp+0x1c>
 80118b0:	1b18      	subs	r0, r3, r4
 80118b2:	bd10      	pop	{r4, pc}
 80118b4:	3001      	adds	r0, #1
 80118b6:	e7f2      	b.n	801189e <memcmp+0x6>

080118b8 <memcpy>:
 80118b8:	440a      	add	r2, r1
 80118ba:	4291      	cmp	r1, r2
 80118bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80118c0:	d100      	bne.n	80118c4 <memcpy+0xc>
 80118c2:	4770      	bx	lr
 80118c4:	b510      	push	{r4, lr}
 80118c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80118ca:	4291      	cmp	r1, r2
 80118cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80118d0:	d1f9      	bne.n	80118c6 <memcpy+0xe>
 80118d2:	bd10      	pop	{r4, pc}

080118d4 <memset>:
 80118d4:	4603      	mov	r3, r0
 80118d6:	4402      	add	r2, r0
 80118d8:	4293      	cmp	r3, r2
 80118da:	d100      	bne.n	80118de <memset+0xa>
 80118dc:	4770      	bx	lr
 80118de:	f803 1b01 	strb.w	r1, [r3], #1
 80118e2:	e7f9      	b.n	80118d8 <memset+0x4>

080118e4 <__cvt>:
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118ea:	461f      	mov	r7, r3
 80118ec:	bfbb      	ittet	lt
 80118ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80118f2:	461f      	movlt	r7, r3
 80118f4:	2300      	movge	r3, #0
 80118f6:	232d      	movlt	r3, #45	; 0x2d
 80118f8:	b088      	sub	sp, #32
 80118fa:	4614      	mov	r4, r2
 80118fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80118fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011900:	7013      	strb	r3, [r2, #0]
 8011902:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011904:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8011908:	f023 0820 	bic.w	r8, r3, #32
 801190c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011910:	d005      	beq.n	801191e <__cvt+0x3a>
 8011912:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011916:	d100      	bne.n	801191a <__cvt+0x36>
 8011918:	3501      	adds	r5, #1
 801191a:	2302      	movs	r3, #2
 801191c:	e000      	b.n	8011920 <__cvt+0x3c>
 801191e:	2303      	movs	r3, #3
 8011920:	aa07      	add	r2, sp, #28
 8011922:	9204      	str	r2, [sp, #16]
 8011924:	aa06      	add	r2, sp, #24
 8011926:	e9cd a202 	strd	sl, r2, [sp, #8]
 801192a:	e9cd 3500 	strd	r3, r5, [sp]
 801192e:	4622      	mov	r2, r4
 8011930:	463b      	mov	r3, r7
 8011932:	f001 fdb1 	bl	8013498 <_dtoa_r>
 8011936:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801193a:	4606      	mov	r6, r0
 801193c:	d102      	bne.n	8011944 <__cvt+0x60>
 801193e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011940:	07db      	lsls	r3, r3, #31
 8011942:	d522      	bpl.n	801198a <__cvt+0xa6>
 8011944:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011948:	eb06 0905 	add.w	r9, r6, r5
 801194c:	d110      	bne.n	8011970 <__cvt+0x8c>
 801194e:	7833      	ldrb	r3, [r6, #0]
 8011950:	2b30      	cmp	r3, #48	; 0x30
 8011952:	d10a      	bne.n	801196a <__cvt+0x86>
 8011954:	2200      	movs	r2, #0
 8011956:	2300      	movs	r3, #0
 8011958:	4620      	mov	r0, r4
 801195a:	4639      	mov	r1, r7
 801195c:	f7ef f86a 	bl	8000a34 <__aeabi_dcmpeq>
 8011960:	b918      	cbnz	r0, 801196a <__cvt+0x86>
 8011962:	f1c5 0501 	rsb	r5, r5, #1
 8011966:	f8ca 5000 	str.w	r5, [sl]
 801196a:	f8da 3000 	ldr.w	r3, [sl]
 801196e:	4499      	add	r9, r3
 8011970:	2200      	movs	r2, #0
 8011972:	2300      	movs	r3, #0
 8011974:	4620      	mov	r0, r4
 8011976:	4639      	mov	r1, r7
 8011978:	f7ef f85c 	bl	8000a34 <__aeabi_dcmpeq>
 801197c:	b108      	cbz	r0, 8011982 <__cvt+0x9e>
 801197e:	f8cd 901c 	str.w	r9, [sp, #28]
 8011982:	2230      	movs	r2, #48	; 0x30
 8011984:	9b07      	ldr	r3, [sp, #28]
 8011986:	454b      	cmp	r3, r9
 8011988:	d307      	bcc.n	801199a <__cvt+0xb6>
 801198a:	4630      	mov	r0, r6
 801198c:	9b07      	ldr	r3, [sp, #28]
 801198e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011990:	1b9b      	subs	r3, r3, r6
 8011992:	6013      	str	r3, [r2, #0]
 8011994:	b008      	add	sp, #32
 8011996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801199a:	1c59      	adds	r1, r3, #1
 801199c:	9107      	str	r1, [sp, #28]
 801199e:	701a      	strb	r2, [r3, #0]
 80119a0:	e7f0      	b.n	8011984 <__cvt+0xa0>

080119a2 <__exponent>:
 80119a2:	4603      	mov	r3, r0
 80119a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119a6:	2900      	cmp	r1, #0
 80119a8:	f803 2b02 	strb.w	r2, [r3], #2
 80119ac:	bfb6      	itet	lt
 80119ae:	222d      	movlt	r2, #45	; 0x2d
 80119b0:	222b      	movge	r2, #43	; 0x2b
 80119b2:	4249      	neglt	r1, r1
 80119b4:	2909      	cmp	r1, #9
 80119b6:	7042      	strb	r2, [r0, #1]
 80119b8:	dd2b      	ble.n	8011a12 <__exponent+0x70>
 80119ba:	f10d 0407 	add.w	r4, sp, #7
 80119be:	46a4      	mov	ip, r4
 80119c0:	270a      	movs	r7, #10
 80119c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80119c6:	460a      	mov	r2, r1
 80119c8:	46a6      	mov	lr, r4
 80119ca:	fb07 1516 	mls	r5, r7, r6, r1
 80119ce:	2a63      	cmp	r2, #99	; 0x63
 80119d0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80119d4:	4631      	mov	r1, r6
 80119d6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80119da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80119de:	dcf0      	bgt.n	80119c2 <__exponent+0x20>
 80119e0:	3130      	adds	r1, #48	; 0x30
 80119e2:	f1ae 0502 	sub.w	r5, lr, #2
 80119e6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80119ea:	4629      	mov	r1, r5
 80119ec:	1c44      	adds	r4, r0, #1
 80119ee:	4561      	cmp	r1, ip
 80119f0:	d30a      	bcc.n	8011a08 <__exponent+0x66>
 80119f2:	f10d 0209 	add.w	r2, sp, #9
 80119f6:	eba2 020e 	sub.w	r2, r2, lr
 80119fa:	4565      	cmp	r5, ip
 80119fc:	bf88      	it	hi
 80119fe:	2200      	movhi	r2, #0
 8011a00:	4413      	add	r3, r2
 8011a02:	1a18      	subs	r0, r3, r0
 8011a04:	b003      	add	sp, #12
 8011a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a0c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011a10:	e7ed      	b.n	80119ee <__exponent+0x4c>
 8011a12:	2330      	movs	r3, #48	; 0x30
 8011a14:	3130      	adds	r1, #48	; 0x30
 8011a16:	7083      	strb	r3, [r0, #2]
 8011a18:	70c1      	strb	r1, [r0, #3]
 8011a1a:	1d03      	adds	r3, r0, #4
 8011a1c:	e7f1      	b.n	8011a02 <__exponent+0x60>
	...

08011a20 <_printf_float>:
 8011a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a24:	b091      	sub	sp, #68	; 0x44
 8011a26:	460c      	mov	r4, r1
 8011a28:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8011a2c:	4616      	mov	r6, r2
 8011a2e:	461f      	mov	r7, r3
 8011a30:	4605      	mov	r5, r0
 8011a32:	f002 ff7b 	bl	801492c <_localeconv_r>
 8011a36:	6803      	ldr	r3, [r0, #0]
 8011a38:	4618      	mov	r0, r3
 8011a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8011a3c:	f7ee fbce 	bl	80001dc <strlen>
 8011a40:	2300      	movs	r3, #0
 8011a42:	930e      	str	r3, [sp, #56]	; 0x38
 8011a44:	f8d8 3000 	ldr.w	r3, [r8]
 8011a48:	900a      	str	r0, [sp, #40]	; 0x28
 8011a4a:	3307      	adds	r3, #7
 8011a4c:	f023 0307 	bic.w	r3, r3, #7
 8011a50:	f103 0208 	add.w	r2, r3, #8
 8011a54:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011a58:	f8d4 b000 	ldr.w	fp, [r4]
 8011a5c:	f8c8 2000 	str.w	r2, [r8]
 8011a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a64:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011a68:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8011a6c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8011a70:	930b      	str	r3, [sp, #44]	; 0x2c
 8011a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a76:	4640      	mov	r0, r8
 8011a78:	4b9c      	ldr	r3, [pc, #624]	; (8011cec <_printf_float+0x2cc>)
 8011a7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011a7c:	f7ef f80c 	bl	8000a98 <__aeabi_dcmpun>
 8011a80:	bb70      	cbnz	r0, 8011ae0 <_printf_float+0xc0>
 8011a82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a86:	4640      	mov	r0, r8
 8011a88:	4b98      	ldr	r3, [pc, #608]	; (8011cec <_printf_float+0x2cc>)
 8011a8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011a8c:	f7ee ffe6 	bl	8000a5c <__aeabi_dcmple>
 8011a90:	bb30      	cbnz	r0, 8011ae0 <_printf_float+0xc0>
 8011a92:	2200      	movs	r2, #0
 8011a94:	2300      	movs	r3, #0
 8011a96:	4640      	mov	r0, r8
 8011a98:	4651      	mov	r1, sl
 8011a9a:	f7ee ffd5 	bl	8000a48 <__aeabi_dcmplt>
 8011a9e:	b110      	cbz	r0, 8011aa6 <_printf_float+0x86>
 8011aa0:	232d      	movs	r3, #45	; 0x2d
 8011aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011aa6:	4b92      	ldr	r3, [pc, #584]	; (8011cf0 <_printf_float+0x2d0>)
 8011aa8:	4892      	ldr	r0, [pc, #584]	; (8011cf4 <_printf_float+0x2d4>)
 8011aaa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011aae:	bf94      	ite	ls
 8011ab0:	4698      	movls	r8, r3
 8011ab2:	4680      	movhi	r8, r0
 8011ab4:	2303      	movs	r3, #3
 8011ab6:	f04f 0a00 	mov.w	sl, #0
 8011aba:	6123      	str	r3, [r4, #16]
 8011abc:	f02b 0304 	bic.w	r3, fp, #4
 8011ac0:	6023      	str	r3, [r4, #0]
 8011ac2:	4633      	mov	r3, r6
 8011ac4:	4621      	mov	r1, r4
 8011ac6:	4628      	mov	r0, r5
 8011ac8:	9700      	str	r7, [sp, #0]
 8011aca:	aa0f      	add	r2, sp, #60	; 0x3c
 8011acc:	f000 f9d4 	bl	8011e78 <_printf_common>
 8011ad0:	3001      	adds	r0, #1
 8011ad2:	f040 8090 	bne.w	8011bf6 <_printf_float+0x1d6>
 8011ad6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ada:	b011      	add	sp, #68	; 0x44
 8011adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ae0:	4642      	mov	r2, r8
 8011ae2:	4653      	mov	r3, sl
 8011ae4:	4640      	mov	r0, r8
 8011ae6:	4651      	mov	r1, sl
 8011ae8:	f7ee ffd6 	bl	8000a98 <__aeabi_dcmpun>
 8011aec:	b148      	cbz	r0, 8011b02 <_printf_float+0xe2>
 8011aee:	f1ba 0f00 	cmp.w	sl, #0
 8011af2:	bfb8      	it	lt
 8011af4:	232d      	movlt	r3, #45	; 0x2d
 8011af6:	4880      	ldr	r0, [pc, #512]	; (8011cf8 <_printf_float+0x2d8>)
 8011af8:	bfb8      	it	lt
 8011afa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011afe:	4b7f      	ldr	r3, [pc, #508]	; (8011cfc <_printf_float+0x2dc>)
 8011b00:	e7d3      	b.n	8011aaa <_printf_float+0x8a>
 8011b02:	6863      	ldr	r3, [r4, #4]
 8011b04:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011b08:	1c5a      	adds	r2, r3, #1
 8011b0a:	d142      	bne.n	8011b92 <_printf_float+0x172>
 8011b0c:	2306      	movs	r3, #6
 8011b0e:	6063      	str	r3, [r4, #4]
 8011b10:	2200      	movs	r2, #0
 8011b12:	9206      	str	r2, [sp, #24]
 8011b14:	aa0e      	add	r2, sp, #56	; 0x38
 8011b16:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8011b1a:	aa0d      	add	r2, sp, #52	; 0x34
 8011b1c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8011b20:	9203      	str	r2, [sp, #12]
 8011b22:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8011b26:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011b2a:	6023      	str	r3, [r4, #0]
 8011b2c:	6863      	ldr	r3, [r4, #4]
 8011b2e:	4642      	mov	r2, r8
 8011b30:	9300      	str	r3, [sp, #0]
 8011b32:	4628      	mov	r0, r5
 8011b34:	4653      	mov	r3, sl
 8011b36:	910b      	str	r1, [sp, #44]	; 0x2c
 8011b38:	f7ff fed4 	bl	80118e4 <__cvt>
 8011b3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011b3e:	4680      	mov	r8, r0
 8011b40:	2947      	cmp	r1, #71	; 0x47
 8011b42:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011b44:	d108      	bne.n	8011b58 <_printf_float+0x138>
 8011b46:	1cc8      	adds	r0, r1, #3
 8011b48:	db02      	blt.n	8011b50 <_printf_float+0x130>
 8011b4a:	6863      	ldr	r3, [r4, #4]
 8011b4c:	4299      	cmp	r1, r3
 8011b4e:	dd40      	ble.n	8011bd2 <_printf_float+0x1b2>
 8011b50:	f1a9 0902 	sub.w	r9, r9, #2
 8011b54:	fa5f f989 	uxtb.w	r9, r9
 8011b58:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011b5c:	d81f      	bhi.n	8011b9e <_printf_float+0x17e>
 8011b5e:	464a      	mov	r2, r9
 8011b60:	3901      	subs	r1, #1
 8011b62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011b66:	910d      	str	r1, [sp, #52]	; 0x34
 8011b68:	f7ff ff1b 	bl	80119a2 <__exponent>
 8011b6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011b6e:	4682      	mov	sl, r0
 8011b70:	1813      	adds	r3, r2, r0
 8011b72:	2a01      	cmp	r2, #1
 8011b74:	6123      	str	r3, [r4, #16]
 8011b76:	dc02      	bgt.n	8011b7e <_printf_float+0x15e>
 8011b78:	6822      	ldr	r2, [r4, #0]
 8011b7a:	07d2      	lsls	r2, r2, #31
 8011b7c:	d501      	bpl.n	8011b82 <_printf_float+0x162>
 8011b7e:	3301      	adds	r3, #1
 8011b80:	6123      	str	r3, [r4, #16]
 8011b82:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d09b      	beq.n	8011ac2 <_printf_float+0xa2>
 8011b8a:	232d      	movs	r3, #45	; 0x2d
 8011b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b90:	e797      	b.n	8011ac2 <_printf_float+0xa2>
 8011b92:	2947      	cmp	r1, #71	; 0x47
 8011b94:	d1bc      	bne.n	8011b10 <_printf_float+0xf0>
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d1ba      	bne.n	8011b10 <_printf_float+0xf0>
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	e7b7      	b.n	8011b0e <_printf_float+0xee>
 8011b9e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011ba2:	d118      	bne.n	8011bd6 <_printf_float+0x1b6>
 8011ba4:	2900      	cmp	r1, #0
 8011ba6:	6863      	ldr	r3, [r4, #4]
 8011ba8:	dd0b      	ble.n	8011bc2 <_printf_float+0x1a2>
 8011baa:	6121      	str	r1, [r4, #16]
 8011bac:	b913      	cbnz	r3, 8011bb4 <_printf_float+0x194>
 8011bae:	6822      	ldr	r2, [r4, #0]
 8011bb0:	07d0      	lsls	r0, r2, #31
 8011bb2:	d502      	bpl.n	8011bba <_printf_float+0x19a>
 8011bb4:	3301      	adds	r3, #1
 8011bb6:	440b      	add	r3, r1
 8011bb8:	6123      	str	r3, [r4, #16]
 8011bba:	f04f 0a00 	mov.w	sl, #0
 8011bbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8011bc0:	e7df      	b.n	8011b82 <_printf_float+0x162>
 8011bc2:	b913      	cbnz	r3, 8011bca <_printf_float+0x1aa>
 8011bc4:	6822      	ldr	r2, [r4, #0]
 8011bc6:	07d2      	lsls	r2, r2, #31
 8011bc8:	d501      	bpl.n	8011bce <_printf_float+0x1ae>
 8011bca:	3302      	adds	r3, #2
 8011bcc:	e7f4      	b.n	8011bb8 <_printf_float+0x198>
 8011bce:	2301      	movs	r3, #1
 8011bd0:	e7f2      	b.n	8011bb8 <_printf_float+0x198>
 8011bd2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011bd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011bd8:	4299      	cmp	r1, r3
 8011bda:	db05      	blt.n	8011be8 <_printf_float+0x1c8>
 8011bdc:	6823      	ldr	r3, [r4, #0]
 8011bde:	6121      	str	r1, [r4, #16]
 8011be0:	07d8      	lsls	r0, r3, #31
 8011be2:	d5ea      	bpl.n	8011bba <_printf_float+0x19a>
 8011be4:	1c4b      	adds	r3, r1, #1
 8011be6:	e7e7      	b.n	8011bb8 <_printf_float+0x198>
 8011be8:	2900      	cmp	r1, #0
 8011bea:	bfcc      	ite	gt
 8011bec:	2201      	movgt	r2, #1
 8011bee:	f1c1 0202 	rsble	r2, r1, #2
 8011bf2:	4413      	add	r3, r2
 8011bf4:	e7e0      	b.n	8011bb8 <_printf_float+0x198>
 8011bf6:	6823      	ldr	r3, [r4, #0]
 8011bf8:	055a      	lsls	r2, r3, #21
 8011bfa:	d407      	bmi.n	8011c0c <_printf_float+0x1ec>
 8011bfc:	6923      	ldr	r3, [r4, #16]
 8011bfe:	4642      	mov	r2, r8
 8011c00:	4631      	mov	r1, r6
 8011c02:	4628      	mov	r0, r5
 8011c04:	47b8      	blx	r7
 8011c06:	3001      	adds	r0, #1
 8011c08:	d12b      	bne.n	8011c62 <_printf_float+0x242>
 8011c0a:	e764      	b.n	8011ad6 <_printf_float+0xb6>
 8011c0c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011c10:	f240 80dd 	bls.w	8011dce <_printf_float+0x3ae>
 8011c14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011c18:	2200      	movs	r2, #0
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	f7ee ff0a 	bl	8000a34 <__aeabi_dcmpeq>
 8011c20:	2800      	cmp	r0, #0
 8011c22:	d033      	beq.n	8011c8c <_printf_float+0x26c>
 8011c24:	2301      	movs	r3, #1
 8011c26:	4631      	mov	r1, r6
 8011c28:	4628      	mov	r0, r5
 8011c2a:	4a35      	ldr	r2, [pc, #212]	; (8011d00 <_printf_float+0x2e0>)
 8011c2c:	47b8      	blx	r7
 8011c2e:	3001      	adds	r0, #1
 8011c30:	f43f af51 	beq.w	8011ad6 <_printf_float+0xb6>
 8011c34:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011c38:	429a      	cmp	r2, r3
 8011c3a:	db02      	blt.n	8011c42 <_printf_float+0x222>
 8011c3c:	6823      	ldr	r3, [r4, #0]
 8011c3e:	07d8      	lsls	r0, r3, #31
 8011c40:	d50f      	bpl.n	8011c62 <_printf_float+0x242>
 8011c42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c46:	4631      	mov	r1, r6
 8011c48:	4628      	mov	r0, r5
 8011c4a:	47b8      	blx	r7
 8011c4c:	3001      	adds	r0, #1
 8011c4e:	f43f af42 	beq.w	8011ad6 <_printf_float+0xb6>
 8011c52:	f04f 0800 	mov.w	r8, #0
 8011c56:	f104 091a 	add.w	r9, r4, #26
 8011c5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c5c:	3b01      	subs	r3, #1
 8011c5e:	4543      	cmp	r3, r8
 8011c60:	dc09      	bgt.n	8011c76 <_printf_float+0x256>
 8011c62:	6823      	ldr	r3, [r4, #0]
 8011c64:	079b      	lsls	r3, r3, #30
 8011c66:	f100 8102 	bmi.w	8011e6e <_printf_float+0x44e>
 8011c6a:	68e0      	ldr	r0, [r4, #12]
 8011c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011c6e:	4298      	cmp	r0, r3
 8011c70:	bfb8      	it	lt
 8011c72:	4618      	movlt	r0, r3
 8011c74:	e731      	b.n	8011ada <_printf_float+0xba>
 8011c76:	2301      	movs	r3, #1
 8011c78:	464a      	mov	r2, r9
 8011c7a:	4631      	mov	r1, r6
 8011c7c:	4628      	mov	r0, r5
 8011c7e:	47b8      	blx	r7
 8011c80:	3001      	adds	r0, #1
 8011c82:	f43f af28 	beq.w	8011ad6 <_printf_float+0xb6>
 8011c86:	f108 0801 	add.w	r8, r8, #1
 8011c8a:	e7e6      	b.n	8011c5a <_printf_float+0x23a>
 8011c8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	dc38      	bgt.n	8011d04 <_printf_float+0x2e4>
 8011c92:	2301      	movs	r3, #1
 8011c94:	4631      	mov	r1, r6
 8011c96:	4628      	mov	r0, r5
 8011c98:	4a19      	ldr	r2, [pc, #100]	; (8011d00 <_printf_float+0x2e0>)
 8011c9a:	47b8      	blx	r7
 8011c9c:	3001      	adds	r0, #1
 8011c9e:	f43f af1a 	beq.w	8011ad6 <_printf_float+0xb6>
 8011ca2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011ca6:	4313      	orrs	r3, r2
 8011ca8:	d102      	bne.n	8011cb0 <_printf_float+0x290>
 8011caa:	6823      	ldr	r3, [r4, #0]
 8011cac:	07d9      	lsls	r1, r3, #31
 8011cae:	d5d8      	bpl.n	8011c62 <_printf_float+0x242>
 8011cb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011cb4:	4631      	mov	r1, r6
 8011cb6:	4628      	mov	r0, r5
 8011cb8:	47b8      	blx	r7
 8011cba:	3001      	adds	r0, #1
 8011cbc:	f43f af0b 	beq.w	8011ad6 <_printf_float+0xb6>
 8011cc0:	f04f 0900 	mov.w	r9, #0
 8011cc4:	f104 0a1a 	add.w	sl, r4, #26
 8011cc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011cca:	425b      	negs	r3, r3
 8011ccc:	454b      	cmp	r3, r9
 8011cce:	dc01      	bgt.n	8011cd4 <_printf_float+0x2b4>
 8011cd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011cd2:	e794      	b.n	8011bfe <_printf_float+0x1de>
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	4652      	mov	r2, sl
 8011cd8:	4631      	mov	r1, r6
 8011cda:	4628      	mov	r0, r5
 8011cdc:	47b8      	blx	r7
 8011cde:	3001      	adds	r0, #1
 8011ce0:	f43f aef9 	beq.w	8011ad6 <_printf_float+0xb6>
 8011ce4:	f109 0901 	add.w	r9, r9, #1
 8011ce8:	e7ee      	b.n	8011cc8 <_printf_float+0x2a8>
 8011cea:	bf00      	nop
 8011cec:	7fefffff 	.word	0x7fefffff
 8011cf0:	08018264 	.word	0x08018264
 8011cf4:	08018268 	.word	0x08018268
 8011cf8:	08018270 	.word	0x08018270
 8011cfc:	0801826c 	.word	0x0801826c
 8011d00:	08018274 	.word	0x08018274
 8011d04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011d06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	bfa8      	it	ge
 8011d0c:	461a      	movge	r2, r3
 8011d0e:	2a00      	cmp	r2, #0
 8011d10:	4691      	mov	r9, r2
 8011d12:	dc37      	bgt.n	8011d84 <_printf_float+0x364>
 8011d14:	f04f 0b00 	mov.w	fp, #0
 8011d18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011d1c:	f104 021a 	add.w	r2, r4, #26
 8011d20:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011d24:	ebaa 0309 	sub.w	r3, sl, r9
 8011d28:	455b      	cmp	r3, fp
 8011d2a:	dc33      	bgt.n	8011d94 <_printf_float+0x374>
 8011d2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011d30:	429a      	cmp	r2, r3
 8011d32:	db3b      	blt.n	8011dac <_printf_float+0x38c>
 8011d34:	6823      	ldr	r3, [r4, #0]
 8011d36:	07da      	lsls	r2, r3, #31
 8011d38:	d438      	bmi.n	8011dac <_printf_float+0x38c>
 8011d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d3c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011d3e:	eba3 020a 	sub.w	r2, r3, sl
 8011d42:	eba3 0901 	sub.w	r9, r3, r1
 8011d46:	4591      	cmp	r9, r2
 8011d48:	bfa8      	it	ge
 8011d4a:	4691      	movge	r9, r2
 8011d4c:	f1b9 0f00 	cmp.w	r9, #0
 8011d50:	dc34      	bgt.n	8011dbc <_printf_float+0x39c>
 8011d52:	f04f 0800 	mov.w	r8, #0
 8011d56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011d5a:	f104 0a1a 	add.w	sl, r4, #26
 8011d5e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011d62:	1a9b      	subs	r3, r3, r2
 8011d64:	eba3 0309 	sub.w	r3, r3, r9
 8011d68:	4543      	cmp	r3, r8
 8011d6a:	f77f af7a 	ble.w	8011c62 <_printf_float+0x242>
 8011d6e:	2301      	movs	r3, #1
 8011d70:	4652      	mov	r2, sl
 8011d72:	4631      	mov	r1, r6
 8011d74:	4628      	mov	r0, r5
 8011d76:	47b8      	blx	r7
 8011d78:	3001      	adds	r0, #1
 8011d7a:	f43f aeac 	beq.w	8011ad6 <_printf_float+0xb6>
 8011d7e:	f108 0801 	add.w	r8, r8, #1
 8011d82:	e7ec      	b.n	8011d5e <_printf_float+0x33e>
 8011d84:	4613      	mov	r3, r2
 8011d86:	4631      	mov	r1, r6
 8011d88:	4642      	mov	r2, r8
 8011d8a:	4628      	mov	r0, r5
 8011d8c:	47b8      	blx	r7
 8011d8e:	3001      	adds	r0, #1
 8011d90:	d1c0      	bne.n	8011d14 <_printf_float+0x2f4>
 8011d92:	e6a0      	b.n	8011ad6 <_printf_float+0xb6>
 8011d94:	2301      	movs	r3, #1
 8011d96:	4631      	mov	r1, r6
 8011d98:	4628      	mov	r0, r5
 8011d9a:	920b      	str	r2, [sp, #44]	; 0x2c
 8011d9c:	47b8      	blx	r7
 8011d9e:	3001      	adds	r0, #1
 8011da0:	f43f ae99 	beq.w	8011ad6 <_printf_float+0xb6>
 8011da4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011da6:	f10b 0b01 	add.w	fp, fp, #1
 8011daa:	e7b9      	b.n	8011d20 <_printf_float+0x300>
 8011dac:	4631      	mov	r1, r6
 8011dae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011db2:	4628      	mov	r0, r5
 8011db4:	47b8      	blx	r7
 8011db6:	3001      	adds	r0, #1
 8011db8:	d1bf      	bne.n	8011d3a <_printf_float+0x31a>
 8011dba:	e68c      	b.n	8011ad6 <_printf_float+0xb6>
 8011dbc:	464b      	mov	r3, r9
 8011dbe:	4631      	mov	r1, r6
 8011dc0:	4628      	mov	r0, r5
 8011dc2:	eb08 020a 	add.w	r2, r8, sl
 8011dc6:	47b8      	blx	r7
 8011dc8:	3001      	adds	r0, #1
 8011dca:	d1c2      	bne.n	8011d52 <_printf_float+0x332>
 8011dcc:	e683      	b.n	8011ad6 <_printf_float+0xb6>
 8011dce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011dd0:	2a01      	cmp	r2, #1
 8011dd2:	dc01      	bgt.n	8011dd8 <_printf_float+0x3b8>
 8011dd4:	07db      	lsls	r3, r3, #31
 8011dd6:	d537      	bpl.n	8011e48 <_printf_float+0x428>
 8011dd8:	2301      	movs	r3, #1
 8011dda:	4642      	mov	r2, r8
 8011ddc:	4631      	mov	r1, r6
 8011dde:	4628      	mov	r0, r5
 8011de0:	47b8      	blx	r7
 8011de2:	3001      	adds	r0, #1
 8011de4:	f43f ae77 	beq.w	8011ad6 <_printf_float+0xb6>
 8011de8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011dec:	4631      	mov	r1, r6
 8011dee:	4628      	mov	r0, r5
 8011df0:	47b8      	blx	r7
 8011df2:	3001      	adds	r0, #1
 8011df4:	f43f ae6f 	beq.w	8011ad6 <_printf_float+0xb6>
 8011df8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	2300      	movs	r3, #0
 8011e00:	f7ee fe18 	bl	8000a34 <__aeabi_dcmpeq>
 8011e04:	b9d8      	cbnz	r0, 8011e3e <_printf_float+0x41e>
 8011e06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e08:	f108 0201 	add.w	r2, r8, #1
 8011e0c:	3b01      	subs	r3, #1
 8011e0e:	4631      	mov	r1, r6
 8011e10:	4628      	mov	r0, r5
 8011e12:	47b8      	blx	r7
 8011e14:	3001      	adds	r0, #1
 8011e16:	d10e      	bne.n	8011e36 <_printf_float+0x416>
 8011e18:	e65d      	b.n	8011ad6 <_printf_float+0xb6>
 8011e1a:	2301      	movs	r3, #1
 8011e1c:	464a      	mov	r2, r9
 8011e1e:	4631      	mov	r1, r6
 8011e20:	4628      	mov	r0, r5
 8011e22:	47b8      	blx	r7
 8011e24:	3001      	adds	r0, #1
 8011e26:	f43f ae56 	beq.w	8011ad6 <_printf_float+0xb6>
 8011e2a:	f108 0801 	add.w	r8, r8, #1
 8011e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e30:	3b01      	subs	r3, #1
 8011e32:	4543      	cmp	r3, r8
 8011e34:	dcf1      	bgt.n	8011e1a <_printf_float+0x3fa>
 8011e36:	4653      	mov	r3, sl
 8011e38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011e3c:	e6e0      	b.n	8011c00 <_printf_float+0x1e0>
 8011e3e:	f04f 0800 	mov.w	r8, #0
 8011e42:	f104 091a 	add.w	r9, r4, #26
 8011e46:	e7f2      	b.n	8011e2e <_printf_float+0x40e>
 8011e48:	2301      	movs	r3, #1
 8011e4a:	4642      	mov	r2, r8
 8011e4c:	e7df      	b.n	8011e0e <_printf_float+0x3ee>
 8011e4e:	2301      	movs	r3, #1
 8011e50:	464a      	mov	r2, r9
 8011e52:	4631      	mov	r1, r6
 8011e54:	4628      	mov	r0, r5
 8011e56:	47b8      	blx	r7
 8011e58:	3001      	adds	r0, #1
 8011e5a:	f43f ae3c 	beq.w	8011ad6 <_printf_float+0xb6>
 8011e5e:	f108 0801 	add.w	r8, r8, #1
 8011e62:	68e3      	ldr	r3, [r4, #12]
 8011e64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011e66:	1a5b      	subs	r3, r3, r1
 8011e68:	4543      	cmp	r3, r8
 8011e6a:	dcf0      	bgt.n	8011e4e <_printf_float+0x42e>
 8011e6c:	e6fd      	b.n	8011c6a <_printf_float+0x24a>
 8011e6e:	f04f 0800 	mov.w	r8, #0
 8011e72:	f104 0919 	add.w	r9, r4, #25
 8011e76:	e7f4      	b.n	8011e62 <_printf_float+0x442>

08011e78 <_printf_common>:
 8011e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e7c:	4616      	mov	r6, r2
 8011e7e:	4699      	mov	r9, r3
 8011e80:	688a      	ldr	r2, [r1, #8]
 8011e82:	690b      	ldr	r3, [r1, #16]
 8011e84:	4607      	mov	r7, r0
 8011e86:	4293      	cmp	r3, r2
 8011e88:	bfb8      	it	lt
 8011e8a:	4613      	movlt	r3, r2
 8011e8c:	6033      	str	r3, [r6, #0]
 8011e8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e92:	460c      	mov	r4, r1
 8011e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e98:	b10a      	cbz	r2, 8011e9e <_printf_common+0x26>
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	6033      	str	r3, [r6, #0]
 8011e9e:	6823      	ldr	r3, [r4, #0]
 8011ea0:	0699      	lsls	r1, r3, #26
 8011ea2:	bf42      	ittt	mi
 8011ea4:	6833      	ldrmi	r3, [r6, #0]
 8011ea6:	3302      	addmi	r3, #2
 8011ea8:	6033      	strmi	r3, [r6, #0]
 8011eaa:	6825      	ldr	r5, [r4, #0]
 8011eac:	f015 0506 	ands.w	r5, r5, #6
 8011eb0:	d106      	bne.n	8011ec0 <_printf_common+0x48>
 8011eb2:	f104 0a19 	add.w	sl, r4, #25
 8011eb6:	68e3      	ldr	r3, [r4, #12]
 8011eb8:	6832      	ldr	r2, [r6, #0]
 8011eba:	1a9b      	subs	r3, r3, r2
 8011ebc:	42ab      	cmp	r3, r5
 8011ebe:	dc28      	bgt.n	8011f12 <_printf_common+0x9a>
 8011ec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011ec4:	1e13      	subs	r3, r2, #0
 8011ec6:	6822      	ldr	r2, [r4, #0]
 8011ec8:	bf18      	it	ne
 8011eca:	2301      	movne	r3, #1
 8011ecc:	0692      	lsls	r2, r2, #26
 8011ece:	d42d      	bmi.n	8011f2c <_printf_common+0xb4>
 8011ed0:	4649      	mov	r1, r9
 8011ed2:	4638      	mov	r0, r7
 8011ed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011ed8:	47c0      	blx	r8
 8011eda:	3001      	adds	r0, #1
 8011edc:	d020      	beq.n	8011f20 <_printf_common+0xa8>
 8011ede:	6823      	ldr	r3, [r4, #0]
 8011ee0:	68e5      	ldr	r5, [r4, #12]
 8011ee2:	f003 0306 	and.w	r3, r3, #6
 8011ee6:	2b04      	cmp	r3, #4
 8011ee8:	bf18      	it	ne
 8011eea:	2500      	movne	r5, #0
 8011eec:	6832      	ldr	r2, [r6, #0]
 8011eee:	f04f 0600 	mov.w	r6, #0
 8011ef2:	68a3      	ldr	r3, [r4, #8]
 8011ef4:	bf08      	it	eq
 8011ef6:	1aad      	subeq	r5, r5, r2
 8011ef8:	6922      	ldr	r2, [r4, #16]
 8011efa:	bf08      	it	eq
 8011efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011f00:	4293      	cmp	r3, r2
 8011f02:	bfc4      	itt	gt
 8011f04:	1a9b      	subgt	r3, r3, r2
 8011f06:	18ed      	addgt	r5, r5, r3
 8011f08:	341a      	adds	r4, #26
 8011f0a:	42b5      	cmp	r5, r6
 8011f0c:	d11a      	bne.n	8011f44 <_printf_common+0xcc>
 8011f0e:	2000      	movs	r0, #0
 8011f10:	e008      	b.n	8011f24 <_printf_common+0xac>
 8011f12:	2301      	movs	r3, #1
 8011f14:	4652      	mov	r2, sl
 8011f16:	4649      	mov	r1, r9
 8011f18:	4638      	mov	r0, r7
 8011f1a:	47c0      	blx	r8
 8011f1c:	3001      	adds	r0, #1
 8011f1e:	d103      	bne.n	8011f28 <_printf_common+0xb0>
 8011f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f28:	3501      	adds	r5, #1
 8011f2a:	e7c4      	b.n	8011eb6 <_printf_common+0x3e>
 8011f2c:	2030      	movs	r0, #48	; 0x30
 8011f2e:	18e1      	adds	r1, r4, r3
 8011f30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011f34:	1c5a      	adds	r2, r3, #1
 8011f36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011f3a:	4422      	add	r2, r4
 8011f3c:	3302      	adds	r3, #2
 8011f3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011f42:	e7c5      	b.n	8011ed0 <_printf_common+0x58>
 8011f44:	2301      	movs	r3, #1
 8011f46:	4622      	mov	r2, r4
 8011f48:	4649      	mov	r1, r9
 8011f4a:	4638      	mov	r0, r7
 8011f4c:	47c0      	blx	r8
 8011f4e:	3001      	adds	r0, #1
 8011f50:	d0e6      	beq.n	8011f20 <_printf_common+0xa8>
 8011f52:	3601      	adds	r6, #1
 8011f54:	e7d9      	b.n	8011f0a <_printf_common+0x92>
	...

08011f58 <_printf_i>:
 8011f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f5c:	7e0f      	ldrb	r7, [r1, #24]
 8011f5e:	4691      	mov	r9, r2
 8011f60:	2f78      	cmp	r7, #120	; 0x78
 8011f62:	4680      	mov	r8, r0
 8011f64:	460c      	mov	r4, r1
 8011f66:	469a      	mov	sl, r3
 8011f68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011f6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011f6e:	d807      	bhi.n	8011f80 <_printf_i+0x28>
 8011f70:	2f62      	cmp	r7, #98	; 0x62
 8011f72:	d80a      	bhi.n	8011f8a <_printf_i+0x32>
 8011f74:	2f00      	cmp	r7, #0
 8011f76:	f000 80d9 	beq.w	801212c <_printf_i+0x1d4>
 8011f7a:	2f58      	cmp	r7, #88	; 0x58
 8011f7c:	f000 80a4 	beq.w	80120c8 <_printf_i+0x170>
 8011f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011f88:	e03a      	b.n	8012000 <_printf_i+0xa8>
 8011f8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011f8e:	2b15      	cmp	r3, #21
 8011f90:	d8f6      	bhi.n	8011f80 <_printf_i+0x28>
 8011f92:	a101      	add	r1, pc, #4	; (adr r1, 8011f98 <_printf_i+0x40>)
 8011f94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011f98:	08011ff1 	.word	0x08011ff1
 8011f9c:	08012005 	.word	0x08012005
 8011fa0:	08011f81 	.word	0x08011f81
 8011fa4:	08011f81 	.word	0x08011f81
 8011fa8:	08011f81 	.word	0x08011f81
 8011fac:	08011f81 	.word	0x08011f81
 8011fb0:	08012005 	.word	0x08012005
 8011fb4:	08011f81 	.word	0x08011f81
 8011fb8:	08011f81 	.word	0x08011f81
 8011fbc:	08011f81 	.word	0x08011f81
 8011fc0:	08011f81 	.word	0x08011f81
 8011fc4:	08012113 	.word	0x08012113
 8011fc8:	08012035 	.word	0x08012035
 8011fcc:	080120f5 	.word	0x080120f5
 8011fd0:	08011f81 	.word	0x08011f81
 8011fd4:	08011f81 	.word	0x08011f81
 8011fd8:	08012135 	.word	0x08012135
 8011fdc:	08011f81 	.word	0x08011f81
 8011fe0:	08012035 	.word	0x08012035
 8011fe4:	08011f81 	.word	0x08011f81
 8011fe8:	08011f81 	.word	0x08011f81
 8011fec:	080120fd 	.word	0x080120fd
 8011ff0:	682b      	ldr	r3, [r5, #0]
 8011ff2:	1d1a      	adds	r2, r3, #4
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	602a      	str	r2, [r5, #0]
 8011ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012000:	2301      	movs	r3, #1
 8012002:	e0a4      	b.n	801214e <_printf_i+0x1f6>
 8012004:	6820      	ldr	r0, [r4, #0]
 8012006:	6829      	ldr	r1, [r5, #0]
 8012008:	0606      	lsls	r6, r0, #24
 801200a:	f101 0304 	add.w	r3, r1, #4
 801200e:	d50a      	bpl.n	8012026 <_printf_i+0xce>
 8012010:	680e      	ldr	r6, [r1, #0]
 8012012:	602b      	str	r3, [r5, #0]
 8012014:	2e00      	cmp	r6, #0
 8012016:	da03      	bge.n	8012020 <_printf_i+0xc8>
 8012018:	232d      	movs	r3, #45	; 0x2d
 801201a:	4276      	negs	r6, r6
 801201c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012020:	230a      	movs	r3, #10
 8012022:	485e      	ldr	r0, [pc, #376]	; (801219c <_printf_i+0x244>)
 8012024:	e019      	b.n	801205a <_printf_i+0x102>
 8012026:	680e      	ldr	r6, [r1, #0]
 8012028:	f010 0f40 	tst.w	r0, #64	; 0x40
 801202c:	602b      	str	r3, [r5, #0]
 801202e:	bf18      	it	ne
 8012030:	b236      	sxthne	r6, r6
 8012032:	e7ef      	b.n	8012014 <_printf_i+0xbc>
 8012034:	682b      	ldr	r3, [r5, #0]
 8012036:	6820      	ldr	r0, [r4, #0]
 8012038:	1d19      	adds	r1, r3, #4
 801203a:	6029      	str	r1, [r5, #0]
 801203c:	0601      	lsls	r1, r0, #24
 801203e:	d501      	bpl.n	8012044 <_printf_i+0xec>
 8012040:	681e      	ldr	r6, [r3, #0]
 8012042:	e002      	b.n	801204a <_printf_i+0xf2>
 8012044:	0646      	lsls	r6, r0, #25
 8012046:	d5fb      	bpl.n	8012040 <_printf_i+0xe8>
 8012048:	881e      	ldrh	r6, [r3, #0]
 801204a:	2f6f      	cmp	r7, #111	; 0x6f
 801204c:	bf0c      	ite	eq
 801204e:	2308      	moveq	r3, #8
 8012050:	230a      	movne	r3, #10
 8012052:	4852      	ldr	r0, [pc, #328]	; (801219c <_printf_i+0x244>)
 8012054:	2100      	movs	r1, #0
 8012056:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801205a:	6865      	ldr	r5, [r4, #4]
 801205c:	2d00      	cmp	r5, #0
 801205e:	bfa8      	it	ge
 8012060:	6821      	ldrge	r1, [r4, #0]
 8012062:	60a5      	str	r5, [r4, #8]
 8012064:	bfa4      	itt	ge
 8012066:	f021 0104 	bicge.w	r1, r1, #4
 801206a:	6021      	strge	r1, [r4, #0]
 801206c:	b90e      	cbnz	r6, 8012072 <_printf_i+0x11a>
 801206e:	2d00      	cmp	r5, #0
 8012070:	d04d      	beq.n	801210e <_printf_i+0x1b6>
 8012072:	4615      	mov	r5, r2
 8012074:	fbb6 f1f3 	udiv	r1, r6, r3
 8012078:	fb03 6711 	mls	r7, r3, r1, r6
 801207c:	5dc7      	ldrb	r7, [r0, r7]
 801207e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012082:	4637      	mov	r7, r6
 8012084:	42bb      	cmp	r3, r7
 8012086:	460e      	mov	r6, r1
 8012088:	d9f4      	bls.n	8012074 <_printf_i+0x11c>
 801208a:	2b08      	cmp	r3, #8
 801208c:	d10b      	bne.n	80120a6 <_printf_i+0x14e>
 801208e:	6823      	ldr	r3, [r4, #0]
 8012090:	07de      	lsls	r6, r3, #31
 8012092:	d508      	bpl.n	80120a6 <_printf_i+0x14e>
 8012094:	6923      	ldr	r3, [r4, #16]
 8012096:	6861      	ldr	r1, [r4, #4]
 8012098:	4299      	cmp	r1, r3
 801209a:	bfde      	ittt	le
 801209c:	2330      	movle	r3, #48	; 0x30
 801209e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80120a2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80120a6:	1b52      	subs	r2, r2, r5
 80120a8:	6122      	str	r2, [r4, #16]
 80120aa:	464b      	mov	r3, r9
 80120ac:	4621      	mov	r1, r4
 80120ae:	4640      	mov	r0, r8
 80120b0:	f8cd a000 	str.w	sl, [sp]
 80120b4:	aa03      	add	r2, sp, #12
 80120b6:	f7ff fedf 	bl	8011e78 <_printf_common>
 80120ba:	3001      	adds	r0, #1
 80120bc:	d14c      	bne.n	8012158 <_printf_i+0x200>
 80120be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80120c2:	b004      	add	sp, #16
 80120c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120c8:	4834      	ldr	r0, [pc, #208]	; (801219c <_printf_i+0x244>)
 80120ca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80120ce:	6829      	ldr	r1, [r5, #0]
 80120d0:	6823      	ldr	r3, [r4, #0]
 80120d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80120d6:	6029      	str	r1, [r5, #0]
 80120d8:	061d      	lsls	r5, r3, #24
 80120da:	d514      	bpl.n	8012106 <_printf_i+0x1ae>
 80120dc:	07df      	lsls	r7, r3, #31
 80120de:	bf44      	itt	mi
 80120e0:	f043 0320 	orrmi.w	r3, r3, #32
 80120e4:	6023      	strmi	r3, [r4, #0]
 80120e6:	b91e      	cbnz	r6, 80120f0 <_printf_i+0x198>
 80120e8:	6823      	ldr	r3, [r4, #0]
 80120ea:	f023 0320 	bic.w	r3, r3, #32
 80120ee:	6023      	str	r3, [r4, #0]
 80120f0:	2310      	movs	r3, #16
 80120f2:	e7af      	b.n	8012054 <_printf_i+0xfc>
 80120f4:	6823      	ldr	r3, [r4, #0]
 80120f6:	f043 0320 	orr.w	r3, r3, #32
 80120fa:	6023      	str	r3, [r4, #0]
 80120fc:	2378      	movs	r3, #120	; 0x78
 80120fe:	4828      	ldr	r0, [pc, #160]	; (80121a0 <_printf_i+0x248>)
 8012100:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012104:	e7e3      	b.n	80120ce <_printf_i+0x176>
 8012106:	0659      	lsls	r1, r3, #25
 8012108:	bf48      	it	mi
 801210a:	b2b6      	uxthmi	r6, r6
 801210c:	e7e6      	b.n	80120dc <_printf_i+0x184>
 801210e:	4615      	mov	r5, r2
 8012110:	e7bb      	b.n	801208a <_printf_i+0x132>
 8012112:	682b      	ldr	r3, [r5, #0]
 8012114:	6826      	ldr	r6, [r4, #0]
 8012116:	1d18      	adds	r0, r3, #4
 8012118:	6961      	ldr	r1, [r4, #20]
 801211a:	6028      	str	r0, [r5, #0]
 801211c:	0635      	lsls	r5, r6, #24
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	d501      	bpl.n	8012126 <_printf_i+0x1ce>
 8012122:	6019      	str	r1, [r3, #0]
 8012124:	e002      	b.n	801212c <_printf_i+0x1d4>
 8012126:	0670      	lsls	r0, r6, #25
 8012128:	d5fb      	bpl.n	8012122 <_printf_i+0x1ca>
 801212a:	8019      	strh	r1, [r3, #0]
 801212c:	2300      	movs	r3, #0
 801212e:	4615      	mov	r5, r2
 8012130:	6123      	str	r3, [r4, #16]
 8012132:	e7ba      	b.n	80120aa <_printf_i+0x152>
 8012134:	682b      	ldr	r3, [r5, #0]
 8012136:	2100      	movs	r1, #0
 8012138:	1d1a      	adds	r2, r3, #4
 801213a:	602a      	str	r2, [r5, #0]
 801213c:	681d      	ldr	r5, [r3, #0]
 801213e:	6862      	ldr	r2, [r4, #4]
 8012140:	4628      	mov	r0, r5
 8012142:	f002 fc15 	bl	8014970 <memchr>
 8012146:	b108      	cbz	r0, 801214c <_printf_i+0x1f4>
 8012148:	1b40      	subs	r0, r0, r5
 801214a:	6060      	str	r0, [r4, #4]
 801214c:	6863      	ldr	r3, [r4, #4]
 801214e:	6123      	str	r3, [r4, #16]
 8012150:	2300      	movs	r3, #0
 8012152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012156:	e7a8      	b.n	80120aa <_printf_i+0x152>
 8012158:	462a      	mov	r2, r5
 801215a:	4649      	mov	r1, r9
 801215c:	4640      	mov	r0, r8
 801215e:	6923      	ldr	r3, [r4, #16]
 8012160:	47d0      	blx	sl
 8012162:	3001      	adds	r0, #1
 8012164:	d0ab      	beq.n	80120be <_printf_i+0x166>
 8012166:	6823      	ldr	r3, [r4, #0]
 8012168:	079b      	lsls	r3, r3, #30
 801216a:	d413      	bmi.n	8012194 <_printf_i+0x23c>
 801216c:	68e0      	ldr	r0, [r4, #12]
 801216e:	9b03      	ldr	r3, [sp, #12]
 8012170:	4298      	cmp	r0, r3
 8012172:	bfb8      	it	lt
 8012174:	4618      	movlt	r0, r3
 8012176:	e7a4      	b.n	80120c2 <_printf_i+0x16a>
 8012178:	2301      	movs	r3, #1
 801217a:	4632      	mov	r2, r6
 801217c:	4649      	mov	r1, r9
 801217e:	4640      	mov	r0, r8
 8012180:	47d0      	blx	sl
 8012182:	3001      	adds	r0, #1
 8012184:	d09b      	beq.n	80120be <_printf_i+0x166>
 8012186:	3501      	adds	r5, #1
 8012188:	68e3      	ldr	r3, [r4, #12]
 801218a:	9903      	ldr	r1, [sp, #12]
 801218c:	1a5b      	subs	r3, r3, r1
 801218e:	42ab      	cmp	r3, r5
 8012190:	dcf2      	bgt.n	8012178 <_printf_i+0x220>
 8012192:	e7eb      	b.n	801216c <_printf_i+0x214>
 8012194:	2500      	movs	r5, #0
 8012196:	f104 0619 	add.w	r6, r4, #25
 801219a:	e7f5      	b.n	8012188 <_printf_i+0x230>
 801219c:	08018276 	.word	0x08018276
 80121a0:	08018287 	.word	0x08018287

080121a4 <_scanf_float>:
 80121a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121a8:	b087      	sub	sp, #28
 80121aa:	9303      	str	r3, [sp, #12]
 80121ac:	688b      	ldr	r3, [r1, #8]
 80121ae:	4617      	mov	r7, r2
 80121b0:	1e5a      	subs	r2, r3, #1
 80121b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80121b6:	bf85      	ittet	hi
 80121b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80121bc:	195b      	addhi	r3, r3, r5
 80121be:	2300      	movls	r3, #0
 80121c0:	9302      	strhi	r3, [sp, #8]
 80121c2:	bf88      	it	hi
 80121c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80121c8:	468b      	mov	fp, r1
 80121ca:	f04f 0500 	mov.w	r5, #0
 80121ce:	bf8c      	ite	hi
 80121d0:	608b      	strhi	r3, [r1, #8]
 80121d2:	9302      	strls	r3, [sp, #8]
 80121d4:	680b      	ldr	r3, [r1, #0]
 80121d6:	4680      	mov	r8, r0
 80121d8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80121dc:	f84b 3b1c 	str.w	r3, [fp], #28
 80121e0:	460c      	mov	r4, r1
 80121e2:	465e      	mov	r6, fp
 80121e4:	46aa      	mov	sl, r5
 80121e6:	46a9      	mov	r9, r5
 80121e8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80121ec:	9501      	str	r5, [sp, #4]
 80121ee:	68a2      	ldr	r2, [r4, #8]
 80121f0:	b152      	cbz	r2, 8012208 <_scanf_float+0x64>
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	781b      	ldrb	r3, [r3, #0]
 80121f6:	2b4e      	cmp	r3, #78	; 0x4e
 80121f8:	d864      	bhi.n	80122c4 <_scanf_float+0x120>
 80121fa:	2b40      	cmp	r3, #64	; 0x40
 80121fc:	d83c      	bhi.n	8012278 <_scanf_float+0xd4>
 80121fe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012202:	b2c8      	uxtb	r0, r1
 8012204:	280e      	cmp	r0, #14
 8012206:	d93a      	bls.n	801227e <_scanf_float+0xda>
 8012208:	f1b9 0f00 	cmp.w	r9, #0
 801220c:	d003      	beq.n	8012216 <_scanf_float+0x72>
 801220e:	6823      	ldr	r3, [r4, #0]
 8012210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012214:	6023      	str	r3, [r4, #0]
 8012216:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801221a:	f1ba 0f01 	cmp.w	sl, #1
 801221e:	f200 8113 	bhi.w	8012448 <_scanf_float+0x2a4>
 8012222:	455e      	cmp	r6, fp
 8012224:	f200 8105 	bhi.w	8012432 <_scanf_float+0x28e>
 8012228:	2501      	movs	r5, #1
 801222a:	4628      	mov	r0, r5
 801222c:	b007      	add	sp, #28
 801222e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012232:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012236:	2a0d      	cmp	r2, #13
 8012238:	d8e6      	bhi.n	8012208 <_scanf_float+0x64>
 801223a:	a101      	add	r1, pc, #4	; (adr r1, 8012240 <_scanf_float+0x9c>)
 801223c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012240:	0801237f 	.word	0x0801237f
 8012244:	08012209 	.word	0x08012209
 8012248:	08012209 	.word	0x08012209
 801224c:	08012209 	.word	0x08012209
 8012250:	080123df 	.word	0x080123df
 8012254:	080123b7 	.word	0x080123b7
 8012258:	08012209 	.word	0x08012209
 801225c:	08012209 	.word	0x08012209
 8012260:	0801238d 	.word	0x0801238d
 8012264:	08012209 	.word	0x08012209
 8012268:	08012209 	.word	0x08012209
 801226c:	08012209 	.word	0x08012209
 8012270:	08012209 	.word	0x08012209
 8012274:	08012345 	.word	0x08012345
 8012278:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801227c:	e7db      	b.n	8012236 <_scanf_float+0x92>
 801227e:	290e      	cmp	r1, #14
 8012280:	d8c2      	bhi.n	8012208 <_scanf_float+0x64>
 8012282:	a001      	add	r0, pc, #4	; (adr r0, 8012288 <_scanf_float+0xe4>)
 8012284:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012288:	08012337 	.word	0x08012337
 801228c:	08012209 	.word	0x08012209
 8012290:	08012337 	.word	0x08012337
 8012294:	080123cb 	.word	0x080123cb
 8012298:	08012209 	.word	0x08012209
 801229c:	080122e5 	.word	0x080122e5
 80122a0:	08012321 	.word	0x08012321
 80122a4:	08012321 	.word	0x08012321
 80122a8:	08012321 	.word	0x08012321
 80122ac:	08012321 	.word	0x08012321
 80122b0:	08012321 	.word	0x08012321
 80122b4:	08012321 	.word	0x08012321
 80122b8:	08012321 	.word	0x08012321
 80122bc:	08012321 	.word	0x08012321
 80122c0:	08012321 	.word	0x08012321
 80122c4:	2b6e      	cmp	r3, #110	; 0x6e
 80122c6:	d809      	bhi.n	80122dc <_scanf_float+0x138>
 80122c8:	2b60      	cmp	r3, #96	; 0x60
 80122ca:	d8b2      	bhi.n	8012232 <_scanf_float+0x8e>
 80122cc:	2b54      	cmp	r3, #84	; 0x54
 80122ce:	d077      	beq.n	80123c0 <_scanf_float+0x21c>
 80122d0:	2b59      	cmp	r3, #89	; 0x59
 80122d2:	d199      	bne.n	8012208 <_scanf_float+0x64>
 80122d4:	2d07      	cmp	r5, #7
 80122d6:	d197      	bne.n	8012208 <_scanf_float+0x64>
 80122d8:	2508      	movs	r5, #8
 80122da:	e029      	b.n	8012330 <_scanf_float+0x18c>
 80122dc:	2b74      	cmp	r3, #116	; 0x74
 80122de:	d06f      	beq.n	80123c0 <_scanf_float+0x21c>
 80122e0:	2b79      	cmp	r3, #121	; 0x79
 80122e2:	e7f6      	b.n	80122d2 <_scanf_float+0x12e>
 80122e4:	6821      	ldr	r1, [r4, #0]
 80122e6:	05c8      	lsls	r0, r1, #23
 80122e8:	d51a      	bpl.n	8012320 <_scanf_float+0x17c>
 80122ea:	9b02      	ldr	r3, [sp, #8]
 80122ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80122f0:	6021      	str	r1, [r4, #0]
 80122f2:	f109 0901 	add.w	r9, r9, #1
 80122f6:	b11b      	cbz	r3, 8012300 <_scanf_float+0x15c>
 80122f8:	3b01      	subs	r3, #1
 80122fa:	3201      	adds	r2, #1
 80122fc:	9302      	str	r3, [sp, #8]
 80122fe:	60a2      	str	r2, [r4, #8]
 8012300:	68a3      	ldr	r3, [r4, #8]
 8012302:	3b01      	subs	r3, #1
 8012304:	60a3      	str	r3, [r4, #8]
 8012306:	6923      	ldr	r3, [r4, #16]
 8012308:	3301      	adds	r3, #1
 801230a:	6123      	str	r3, [r4, #16]
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	3b01      	subs	r3, #1
 8012310:	2b00      	cmp	r3, #0
 8012312:	607b      	str	r3, [r7, #4]
 8012314:	f340 8084 	ble.w	8012420 <_scanf_float+0x27c>
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	3301      	adds	r3, #1
 801231c:	603b      	str	r3, [r7, #0]
 801231e:	e766      	b.n	80121ee <_scanf_float+0x4a>
 8012320:	eb1a 0f05 	cmn.w	sl, r5
 8012324:	f47f af70 	bne.w	8012208 <_scanf_float+0x64>
 8012328:	6822      	ldr	r2, [r4, #0]
 801232a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801232e:	6022      	str	r2, [r4, #0]
 8012330:	f806 3b01 	strb.w	r3, [r6], #1
 8012334:	e7e4      	b.n	8012300 <_scanf_float+0x15c>
 8012336:	6822      	ldr	r2, [r4, #0]
 8012338:	0610      	lsls	r0, r2, #24
 801233a:	f57f af65 	bpl.w	8012208 <_scanf_float+0x64>
 801233e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012342:	e7f4      	b.n	801232e <_scanf_float+0x18a>
 8012344:	f1ba 0f00 	cmp.w	sl, #0
 8012348:	d10e      	bne.n	8012368 <_scanf_float+0x1c4>
 801234a:	f1b9 0f00 	cmp.w	r9, #0
 801234e:	d10e      	bne.n	801236e <_scanf_float+0x1ca>
 8012350:	6822      	ldr	r2, [r4, #0]
 8012352:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012356:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801235a:	d108      	bne.n	801236e <_scanf_float+0x1ca>
 801235c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012360:	f04f 0a01 	mov.w	sl, #1
 8012364:	6022      	str	r2, [r4, #0]
 8012366:	e7e3      	b.n	8012330 <_scanf_float+0x18c>
 8012368:	f1ba 0f02 	cmp.w	sl, #2
 801236c:	d055      	beq.n	801241a <_scanf_float+0x276>
 801236e:	2d01      	cmp	r5, #1
 8012370:	d002      	beq.n	8012378 <_scanf_float+0x1d4>
 8012372:	2d04      	cmp	r5, #4
 8012374:	f47f af48 	bne.w	8012208 <_scanf_float+0x64>
 8012378:	3501      	adds	r5, #1
 801237a:	b2ed      	uxtb	r5, r5
 801237c:	e7d8      	b.n	8012330 <_scanf_float+0x18c>
 801237e:	f1ba 0f01 	cmp.w	sl, #1
 8012382:	f47f af41 	bne.w	8012208 <_scanf_float+0x64>
 8012386:	f04f 0a02 	mov.w	sl, #2
 801238a:	e7d1      	b.n	8012330 <_scanf_float+0x18c>
 801238c:	b97d      	cbnz	r5, 80123ae <_scanf_float+0x20a>
 801238e:	f1b9 0f00 	cmp.w	r9, #0
 8012392:	f47f af3c 	bne.w	801220e <_scanf_float+0x6a>
 8012396:	6822      	ldr	r2, [r4, #0]
 8012398:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801239c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80123a0:	f47f af39 	bne.w	8012216 <_scanf_float+0x72>
 80123a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80123a8:	2501      	movs	r5, #1
 80123aa:	6022      	str	r2, [r4, #0]
 80123ac:	e7c0      	b.n	8012330 <_scanf_float+0x18c>
 80123ae:	2d03      	cmp	r5, #3
 80123b0:	d0e2      	beq.n	8012378 <_scanf_float+0x1d4>
 80123b2:	2d05      	cmp	r5, #5
 80123b4:	e7de      	b.n	8012374 <_scanf_float+0x1d0>
 80123b6:	2d02      	cmp	r5, #2
 80123b8:	f47f af26 	bne.w	8012208 <_scanf_float+0x64>
 80123bc:	2503      	movs	r5, #3
 80123be:	e7b7      	b.n	8012330 <_scanf_float+0x18c>
 80123c0:	2d06      	cmp	r5, #6
 80123c2:	f47f af21 	bne.w	8012208 <_scanf_float+0x64>
 80123c6:	2507      	movs	r5, #7
 80123c8:	e7b2      	b.n	8012330 <_scanf_float+0x18c>
 80123ca:	6822      	ldr	r2, [r4, #0]
 80123cc:	0591      	lsls	r1, r2, #22
 80123ce:	f57f af1b 	bpl.w	8012208 <_scanf_float+0x64>
 80123d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80123d6:	6022      	str	r2, [r4, #0]
 80123d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80123dc:	e7a8      	b.n	8012330 <_scanf_float+0x18c>
 80123de:	6822      	ldr	r2, [r4, #0]
 80123e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80123e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80123e8:	d006      	beq.n	80123f8 <_scanf_float+0x254>
 80123ea:	0550      	lsls	r0, r2, #21
 80123ec:	f57f af0c 	bpl.w	8012208 <_scanf_float+0x64>
 80123f0:	f1b9 0f00 	cmp.w	r9, #0
 80123f4:	f43f af0f 	beq.w	8012216 <_scanf_float+0x72>
 80123f8:	0591      	lsls	r1, r2, #22
 80123fa:	bf58      	it	pl
 80123fc:	9901      	ldrpl	r1, [sp, #4]
 80123fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012402:	bf58      	it	pl
 8012404:	eba9 0101 	subpl.w	r1, r9, r1
 8012408:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801240c:	f04f 0900 	mov.w	r9, #0
 8012410:	bf58      	it	pl
 8012412:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012416:	6022      	str	r2, [r4, #0]
 8012418:	e78a      	b.n	8012330 <_scanf_float+0x18c>
 801241a:	f04f 0a03 	mov.w	sl, #3
 801241e:	e787      	b.n	8012330 <_scanf_float+0x18c>
 8012420:	4639      	mov	r1, r7
 8012422:	4640      	mov	r0, r8
 8012424:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012428:	4798      	blx	r3
 801242a:	2800      	cmp	r0, #0
 801242c:	f43f aedf 	beq.w	80121ee <_scanf_float+0x4a>
 8012430:	e6ea      	b.n	8012208 <_scanf_float+0x64>
 8012432:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012436:	463a      	mov	r2, r7
 8012438:	4640      	mov	r0, r8
 801243a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801243e:	4798      	blx	r3
 8012440:	6923      	ldr	r3, [r4, #16]
 8012442:	3b01      	subs	r3, #1
 8012444:	6123      	str	r3, [r4, #16]
 8012446:	e6ec      	b.n	8012222 <_scanf_float+0x7e>
 8012448:	1e6b      	subs	r3, r5, #1
 801244a:	2b06      	cmp	r3, #6
 801244c:	d825      	bhi.n	801249a <_scanf_float+0x2f6>
 801244e:	2d02      	cmp	r5, #2
 8012450:	d836      	bhi.n	80124c0 <_scanf_float+0x31c>
 8012452:	455e      	cmp	r6, fp
 8012454:	f67f aee8 	bls.w	8012228 <_scanf_float+0x84>
 8012458:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801245c:	463a      	mov	r2, r7
 801245e:	4640      	mov	r0, r8
 8012460:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012464:	4798      	blx	r3
 8012466:	6923      	ldr	r3, [r4, #16]
 8012468:	3b01      	subs	r3, #1
 801246a:	6123      	str	r3, [r4, #16]
 801246c:	e7f1      	b.n	8012452 <_scanf_float+0x2ae>
 801246e:	9802      	ldr	r0, [sp, #8]
 8012470:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012474:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012478:	463a      	mov	r2, r7
 801247a:	9002      	str	r0, [sp, #8]
 801247c:	4640      	mov	r0, r8
 801247e:	4798      	blx	r3
 8012480:	6923      	ldr	r3, [r4, #16]
 8012482:	3b01      	subs	r3, #1
 8012484:	6123      	str	r3, [r4, #16]
 8012486:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801248a:	fa5f fa8a 	uxtb.w	sl, sl
 801248e:	f1ba 0f02 	cmp.w	sl, #2
 8012492:	d1ec      	bne.n	801246e <_scanf_float+0x2ca>
 8012494:	3d03      	subs	r5, #3
 8012496:	b2ed      	uxtb	r5, r5
 8012498:	1b76      	subs	r6, r6, r5
 801249a:	6823      	ldr	r3, [r4, #0]
 801249c:	05da      	lsls	r2, r3, #23
 801249e:	d52f      	bpl.n	8012500 <_scanf_float+0x35c>
 80124a0:	055b      	lsls	r3, r3, #21
 80124a2:	d510      	bpl.n	80124c6 <_scanf_float+0x322>
 80124a4:	455e      	cmp	r6, fp
 80124a6:	f67f aebf 	bls.w	8012228 <_scanf_float+0x84>
 80124aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80124ae:	463a      	mov	r2, r7
 80124b0:	4640      	mov	r0, r8
 80124b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80124b6:	4798      	blx	r3
 80124b8:	6923      	ldr	r3, [r4, #16]
 80124ba:	3b01      	subs	r3, #1
 80124bc:	6123      	str	r3, [r4, #16]
 80124be:	e7f1      	b.n	80124a4 <_scanf_float+0x300>
 80124c0:	46aa      	mov	sl, r5
 80124c2:	9602      	str	r6, [sp, #8]
 80124c4:	e7df      	b.n	8012486 <_scanf_float+0x2e2>
 80124c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80124ca:	6923      	ldr	r3, [r4, #16]
 80124cc:	2965      	cmp	r1, #101	; 0x65
 80124ce:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80124d2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80124d6:	6123      	str	r3, [r4, #16]
 80124d8:	d00c      	beq.n	80124f4 <_scanf_float+0x350>
 80124da:	2945      	cmp	r1, #69	; 0x45
 80124dc:	d00a      	beq.n	80124f4 <_scanf_float+0x350>
 80124de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80124e2:	463a      	mov	r2, r7
 80124e4:	4640      	mov	r0, r8
 80124e6:	4798      	blx	r3
 80124e8:	6923      	ldr	r3, [r4, #16]
 80124ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80124ee:	3b01      	subs	r3, #1
 80124f0:	1eb5      	subs	r5, r6, #2
 80124f2:	6123      	str	r3, [r4, #16]
 80124f4:	463a      	mov	r2, r7
 80124f6:	4640      	mov	r0, r8
 80124f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80124fc:	4798      	blx	r3
 80124fe:	462e      	mov	r6, r5
 8012500:	6825      	ldr	r5, [r4, #0]
 8012502:	f015 0510 	ands.w	r5, r5, #16
 8012506:	d155      	bne.n	80125b4 <_scanf_float+0x410>
 8012508:	7035      	strb	r5, [r6, #0]
 801250a:	6823      	ldr	r3, [r4, #0]
 801250c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012514:	d11b      	bne.n	801254e <_scanf_float+0x3aa>
 8012516:	9b01      	ldr	r3, [sp, #4]
 8012518:	454b      	cmp	r3, r9
 801251a:	eba3 0209 	sub.w	r2, r3, r9
 801251e:	d123      	bne.n	8012568 <_scanf_float+0x3c4>
 8012520:	2200      	movs	r2, #0
 8012522:	4659      	mov	r1, fp
 8012524:	4640      	mov	r0, r8
 8012526:	f000 fea7 	bl	8013278 <_strtod_r>
 801252a:	6822      	ldr	r2, [r4, #0]
 801252c:	9b03      	ldr	r3, [sp, #12]
 801252e:	f012 0f02 	tst.w	r2, #2
 8012532:	4606      	mov	r6, r0
 8012534:	460f      	mov	r7, r1
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	d021      	beq.n	801257e <_scanf_float+0x3da>
 801253a:	1d1a      	adds	r2, r3, #4
 801253c:	9903      	ldr	r1, [sp, #12]
 801253e:	600a      	str	r2, [r1, #0]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	e9c3 6700 	strd	r6, r7, [r3]
 8012546:	68e3      	ldr	r3, [r4, #12]
 8012548:	3301      	adds	r3, #1
 801254a:	60e3      	str	r3, [r4, #12]
 801254c:	e66d      	b.n	801222a <_scanf_float+0x86>
 801254e:	9b04      	ldr	r3, [sp, #16]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d0e5      	beq.n	8012520 <_scanf_float+0x37c>
 8012554:	9905      	ldr	r1, [sp, #20]
 8012556:	230a      	movs	r3, #10
 8012558:	462a      	mov	r2, r5
 801255a:	4640      	mov	r0, r8
 801255c:	3101      	adds	r1, #1
 801255e:	f000 ff0d 	bl	801337c <_strtol_r>
 8012562:	9b04      	ldr	r3, [sp, #16]
 8012564:	9e05      	ldr	r6, [sp, #20]
 8012566:	1ac2      	subs	r2, r0, r3
 8012568:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801256c:	429e      	cmp	r6, r3
 801256e:	bf28      	it	cs
 8012570:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012574:	4630      	mov	r0, r6
 8012576:	4910      	ldr	r1, [pc, #64]	; (80125b8 <_scanf_float+0x414>)
 8012578:	f000 f83e 	bl	80125f8 <siprintf>
 801257c:	e7d0      	b.n	8012520 <_scanf_float+0x37c>
 801257e:	f012 0f04 	tst.w	r2, #4
 8012582:	f103 0204 	add.w	r2, r3, #4
 8012586:	d1d9      	bne.n	801253c <_scanf_float+0x398>
 8012588:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801258c:	f8cc 2000 	str.w	r2, [ip]
 8012590:	f8d3 8000 	ldr.w	r8, [r3]
 8012594:	4602      	mov	r2, r0
 8012596:	460b      	mov	r3, r1
 8012598:	f7ee fa7e 	bl	8000a98 <__aeabi_dcmpun>
 801259c:	b128      	cbz	r0, 80125aa <_scanf_float+0x406>
 801259e:	4807      	ldr	r0, [pc, #28]	; (80125bc <_scanf_float+0x418>)
 80125a0:	f000 f826 	bl	80125f0 <nanf>
 80125a4:	f8c8 0000 	str.w	r0, [r8]
 80125a8:	e7cd      	b.n	8012546 <_scanf_float+0x3a2>
 80125aa:	4630      	mov	r0, r6
 80125ac:	4639      	mov	r1, r7
 80125ae:	f7ee fad1 	bl	8000b54 <__aeabi_d2f>
 80125b2:	e7f7      	b.n	80125a4 <_scanf_float+0x400>
 80125b4:	2500      	movs	r5, #0
 80125b6:	e638      	b.n	801222a <_scanf_float+0x86>
 80125b8:	08018298 	.word	0x08018298
 80125bc:	08018708 	.word	0x08018708

080125c0 <iprintf>:
 80125c0:	b40f      	push	{r0, r1, r2, r3}
 80125c2:	4b0a      	ldr	r3, [pc, #40]	; (80125ec <iprintf+0x2c>)
 80125c4:	b513      	push	{r0, r1, r4, lr}
 80125c6:	681c      	ldr	r4, [r3, #0]
 80125c8:	b124      	cbz	r4, 80125d4 <iprintf+0x14>
 80125ca:	69a3      	ldr	r3, [r4, #24]
 80125cc:	b913      	cbnz	r3, 80125d4 <iprintf+0x14>
 80125ce:	4620      	mov	r0, r4
 80125d0:	f001 fda8 	bl	8014124 <__sinit>
 80125d4:	ab05      	add	r3, sp, #20
 80125d6:	4620      	mov	r0, r4
 80125d8:	9a04      	ldr	r2, [sp, #16]
 80125da:	68a1      	ldr	r1, [r4, #8]
 80125dc:	9301      	str	r3, [sp, #4]
 80125de:	f003 f901 	bl	80157e4 <_vfiprintf_r>
 80125e2:	b002      	add	sp, #8
 80125e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125e8:	b004      	add	sp, #16
 80125ea:	4770      	bx	lr
 80125ec:	20000038 	.word	0x20000038

080125f0 <nanf>:
 80125f0:	4800      	ldr	r0, [pc, #0]	; (80125f4 <nanf+0x4>)
 80125f2:	4770      	bx	lr
 80125f4:	7fc00000 	.word	0x7fc00000

080125f8 <siprintf>:
 80125f8:	b40e      	push	{r1, r2, r3}
 80125fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80125fe:	b500      	push	{lr}
 8012600:	b09c      	sub	sp, #112	; 0x70
 8012602:	ab1d      	add	r3, sp, #116	; 0x74
 8012604:	9002      	str	r0, [sp, #8]
 8012606:	9006      	str	r0, [sp, #24]
 8012608:	9107      	str	r1, [sp, #28]
 801260a:	9104      	str	r1, [sp, #16]
 801260c:	4808      	ldr	r0, [pc, #32]	; (8012630 <siprintf+0x38>)
 801260e:	4909      	ldr	r1, [pc, #36]	; (8012634 <siprintf+0x3c>)
 8012610:	f853 2b04 	ldr.w	r2, [r3], #4
 8012614:	9105      	str	r1, [sp, #20]
 8012616:	6800      	ldr	r0, [r0, #0]
 8012618:	a902      	add	r1, sp, #8
 801261a:	9301      	str	r3, [sp, #4]
 801261c:	f002 ffba 	bl	8015594 <_svfiprintf_r>
 8012620:	2200      	movs	r2, #0
 8012622:	9b02      	ldr	r3, [sp, #8]
 8012624:	701a      	strb	r2, [r3, #0]
 8012626:	b01c      	add	sp, #112	; 0x70
 8012628:	f85d eb04 	ldr.w	lr, [sp], #4
 801262c:	b003      	add	sp, #12
 801262e:	4770      	bx	lr
 8012630:	20000038 	.word	0x20000038
 8012634:	ffff0208 	.word	0xffff0208

08012638 <strncmp>:
 8012638:	4603      	mov	r3, r0
 801263a:	b510      	push	{r4, lr}
 801263c:	b172      	cbz	r2, 801265c <strncmp+0x24>
 801263e:	3901      	subs	r1, #1
 8012640:	1884      	adds	r4, r0, r2
 8012642:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012646:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801264a:	4290      	cmp	r0, r2
 801264c:	d101      	bne.n	8012652 <strncmp+0x1a>
 801264e:	42a3      	cmp	r3, r4
 8012650:	d101      	bne.n	8012656 <strncmp+0x1e>
 8012652:	1a80      	subs	r0, r0, r2
 8012654:	bd10      	pop	{r4, pc}
 8012656:	2800      	cmp	r0, #0
 8012658:	d1f3      	bne.n	8012642 <strncmp+0xa>
 801265a:	e7fa      	b.n	8012652 <strncmp+0x1a>
 801265c:	4610      	mov	r0, r2
 801265e:	e7f9      	b.n	8012654 <strncmp+0x1c>

08012660 <sulp>:
 8012660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012664:	460f      	mov	r7, r1
 8012666:	4690      	mov	r8, r2
 8012668:	f002 fd00 	bl	801506c <__ulp>
 801266c:	4604      	mov	r4, r0
 801266e:	460d      	mov	r5, r1
 8012670:	f1b8 0f00 	cmp.w	r8, #0
 8012674:	d011      	beq.n	801269a <sulp+0x3a>
 8012676:	f3c7 530a 	ubfx	r3, r7, #20, #11
 801267a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801267e:	2b00      	cmp	r3, #0
 8012680:	dd0b      	ble.n	801269a <sulp+0x3a>
 8012682:	2400      	movs	r4, #0
 8012684:	051b      	lsls	r3, r3, #20
 8012686:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801268a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801268e:	4622      	mov	r2, r4
 8012690:	462b      	mov	r3, r5
 8012692:	f7ed ff67 	bl	8000564 <__aeabi_dmul>
 8012696:	4604      	mov	r4, r0
 8012698:	460d      	mov	r5, r1
 801269a:	4620      	mov	r0, r4
 801269c:	4629      	mov	r1, r5
 801269e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126a2:	0000      	movs	r0, r0
 80126a4:	0000      	movs	r0, r0
	...

080126a8 <_strtod_l>:
 80126a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ac:	469b      	mov	fp, r3
 80126ae:	2300      	movs	r3, #0
 80126b0:	b09f      	sub	sp, #124	; 0x7c
 80126b2:	931a      	str	r3, [sp, #104]	; 0x68
 80126b4:	4b9e      	ldr	r3, [pc, #632]	; (8012930 <_strtod_l+0x288>)
 80126b6:	4682      	mov	sl, r0
 80126b8:	681f      	ldr	r7, [r3, #0]
 80126ba:	460e      	mov	r6, r1
 80126bc:	4638      	mov	r0, r7
 80126be:	9215      	str	r2, [sp, #84]	; 0x54
 80126c0:	f7ed fd8c 	bl	80001dc <strlen>
 80126c4:	f04f 0800 	mov.w	r8, #0
 80126c8:	4604      	mov	r4, r0
 80126ca:	f04f 0900 	mov.w	r9, #0
 80126ce:	9619      	str	r6, [sp, #100]	; 0x64
 80126d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80126d2:	781a      	ldrb	r2, [r3, #0]
 80126d4:	2a2b      	cmp	r2, #43	; 0x2b
 80126d6:	d04c      	beq.n	8012772 <_strtod_l+0xca>
 80126d8:	d83a      	bhi.n	8012750 <_strtod_l+0xa8>
 80126da:	2a0d      	cmp	r2, #13
 80126dc:	d833      	bhi.n	8012746 <_strtod_l+0x9e>
 80126de:	2a08      	cmp	r2, #8
 80126e0:	d833      	bhi.n	801274a <_strtod_l+0xa2>
 80126e2:	2a00      	cmp	r2, #0
 80126e4:	d03d      	beq.n	8012762 <_strtod_l+0xba>
 80126e6:	2300      	movs	r3, #0
 80126e8:	930a      	str	r3, [sp, #40]	; 0x28
 80126ea:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80126ec:	782b      	ldrb	r3, [r5, #0]
 80126ee:	2b30      	cmp	r3, #48	; 0x30
 80126f0:	f040 80aa 	bne.w	8012848 <_strtod_l+0x1a0>
 80126f4:	786b      	ldrb	r3, [r5, #1]
 80126f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80126fa:	2b58      	cmp	r3, #88	; 0x58
 80126fc:	d166      	bne.n	80127cc <_strtod_l+0x124>
 80126fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012700:	4650      	mov	r0, sl
 8012702:	9301      	str	r3, [sp, #4]
 8012704:	ab1a      	add	r3, sp, #104	; 0x68
 8012706:	9300      	str	r3, [sp, #0]
 8012708:	4a8a      	ldr	r2, [pc, #552]	; (8012934 <_strtod_l+0x28c>)
 801270a:	f8cd b008 	str.w	fp, [sp, #8]
 801270e:	ab1b      	add	r3, sp, #108	; 0x6c
 8012710:	a919      	add	r1, sp, #100	; 0x64
 8012712:	f001 fe0d 	bl	8014330 <__gethex>
 8012716:	f010 0607 	ands.w	r6, r0, #7
 801271a:	4604      	mov	r4, r0
 801271c:	d005      	beq.n	801272a <_strtod_l+0x82>
 801271e:	2e06      	cmp	r6, #6
 8012720:	d129      	bne.n	8012776 <_strtod_l+0xce>
 8012722:	2300      	movs	r3, #0
 8012724:	3501      	adds	r5, #1
 8012726:	9519      	str	r5, [sp, #100]	; 0x64
 8012728:	930a      	str	r3, [sp, #40]	; 0x28
 801272a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801272c:	2b00      	cmp	r3, #0
 801272e:	f040 858a 	bne.w	8013246 <_strtod_l+0xb9e>
 8012732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012734:	b1d3      	cbz	r3, 801276c <_strtod_l+0xc4>
 8012736:	4642      	mov	r2, r8
 8012738:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801273c:	4610      	mov	r0, r2
 801273e:	4619      	mov	r1, r3
 8012740:	b01f      	add	sp, #124	; 0x7c
 8012742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012746:	2a20      	cmp	r2, #32
 8012748:	d1cd      	bne.n	80126e6 <_strtod_l+0x3e>
 801274a:	3301      	adds	r3, #1
 801274c:	9319      	str	r3, [sp, #100]	; 0x64
 801274e:	e7bf      	b.n	80126d0 <_strtod_l+0x28>
 8012750:	2a2d      	cmp	r2, #45	; 0x2d
 8012752:	d1c8      	bne.n	80126e6 <_strtod_l+0x3e>
 8012754:	2201      	movs	r2, #1
 8012756:	920a      	str	r2, [sp, #40]	; 0x28
 8012758:	1c5a      	adds	r2, r3, #1
 801275a:	9219      	str	r2, [sp, #100]	; 0x64
 801275c:	785b      	ldrb	r3, [r3, #1]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d1c3      	bne.n	80126ea <_strtod_l+0x42>
 8012762:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012764:	9619      	str	r6, [sp, #100]	; 0x64
 8012766:	2b00      	cmp	r3, #0
 8012768:	f040 856b 	bne.w	8013242 <_strtod_l+0xb9a>
 801276c:	4642      	mov	r2, r8
 801276e:	464b      	mov	r3, r9
 8012770:	e7e4      	b.n	801273c <_strtod_l+0x94>
 8012772:	2200      	movs	r2, #0
 8012774:	e7ef      	b.n	8012756 <_strtod_l+0xae>
 8012776:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012778:	b13a      	cbz	r2, 801278a <_strtod_l+0xe2>
 801277a:	2135      	movs	r1, #53	; 0x35
 801277c:	a81c      	add	r0, sp, #112	; 0x70
 801277e:	f002 fd79 	bl	8015274 <__copybits>
 8012782:	4650      	mov	r0, sl
 8012784:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012786:	f002 f941 	bl	8014a0c <_Bfree>
 801278a:	3e01      	subs	r6, #1
 801278c:	2e04      	cmp	r6, #4
 801278e:	d806      	bhi.n	801279e <_strtod_l+0xf6>
 8012790:	e8df f006 	tbb	[pc, r6]
 8012794:	1714030a 	.word	0x1714030a
 8012798:	0a          	.byte	0x0a
 8012799:	00          	.byte	0x00
 801279a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 801279e:	0721      	lsls	r1, r4, #28
 80127a0:	d5c3      	bpl.n	801272a <_strtod_l+0x82>
 80127a2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80127a6:	e7c0      	b.n	801272a <_strtod_l+0x82>
 80127a8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80127aa:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80127ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80127b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80127b6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80127ba:	e7f0      	b.n	801279e <_strtod_l+0xf6>
 80127bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012938 <_strtod_l+0x290>
 80127c0:	e7ed      	b.n	801279e <_strtod_l+0xf6>
 80127c2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80127c6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80127ca:	e7e8      	b.n	801279e <_strtod_l+0xf6>
 80127cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80127ce:	1c5a      	adds	r2, r3, #1
 80127d0:	9219      	str	r2, [sp, #100]	; 0x64
 80127d2:	785b      	ldrb	r3, [r3, #1]
 80127d4:	2b30      	cmp	r3, #48	; 0x30
 80127d6:	d0f9      	beq.n	80127cc <_strtod_l+0x124>
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d0a6      	beq.n	801272a <_strtod_l+0x82>
 80127dc:	2301      	movs	r3, #1
 80127de:	9307      	str	r3, [sp, #28]
 80127e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80127e2:	220a      	movs	r2, #10
 80127e4:	9308      	str	r3, [sp, #32]
 80127e6:	2300      	movs	r3, #0
 80127e8:	469b      	mov	fp, r3
 80127ea:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80127ee:	9819      	ldr	r0, [sp, #100]	; 0x64
 80127f0:	7805      	ldrb	r5, [r0, #0]
 80127f2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80127f6:	b2d9      	uxtb	r1, r3
 80127f8:	2909      	cmp	r1, #9
 80127fa:	d927      	bls.n	801284c <_strtod_l+0x1a4>
 80127fc:	4622      	mov	r2, r4
 80127fe:	4639      	mov	r1, r7
 8012800:	f7ff ff1a 	bl	8012638 <strncmp>
 8012804:	2800      	cmp	r0, #0
 8012806:	d033      	beq.n	8012870 <_strtod_l+0x1c8>
 8012808:	2000      	movs	r0, #0
 801280a:	462a      	mov	r2, r5
 801280c:	465c      	mov	r4, fp
 801280e:	4603      	mov	r3, r0
 8012810:	9004      	str	r0, [sp, #16]
 8012812:	2a65      	cmp	r2, #101	; 0x65
 8012814:	d001      	beq.n	801281a <_strtod_l+0x172>
 8012816:	2a45      	cmp	r2, #69	; 0x45
 8012818:	d114      	bne.n	8012844 <_strtod_l+0x19c>
 801281a:	b91c      	cbnz	r4, 8012824 <_strtod_l+0x17c>
 801281c:	9a07      	ldr	r2, [sp, #28]
 801281e:	4302      	orrs	r2, r0
 8012820:	d09f      	beq.n	8012762 <_strtod_l+0xba>
 8012822:	2400      	movs	r4, #0
 8012824:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8012826:	1c72      	adds	r2, r6, #1
 8012828:	9219      	str	r2, [sp, #100]	; 0x64
 801282a:	7872      	ldrb	r2, [r6, #1]
 801282c:	2a2b      	cmp	r2, #43	; 0x2b
 801282e:	d079      	beq.n	8012924 <_strtod_l+0x27c>
 8012830:	2a2d      	cmp	r2, #45	; 0x2d
 8012832:	f000 8083 	beq.w	801293c <_strtod_l+0x294>
 8012836:	2700      	movs	r7, #0
 8012838:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801283c:	2909      	cmp	r1, #9
 801283e:	f240 8083 	bls.w	8012948 <_strtod_l+0x2a0>
 8012842:	9619      	str	r6, [sp, #100]	; 0x64
 8012844:	2500      	movs	r5, #0
 8012846:	e09f      	b.n	8012988 <_strtod_l+0x2e0>
 8012848:	2300      	movs	r3, #0
 801284a:	e7c8      	b.n	80127de <_strtod_l+0x136>
 801284c:	f1bb 0f08 	cmp.w	fp, #8
 8012850:	bfd5      	itete	le
 8012852:	9906      	ldrle	r1, [sp, #24]
 8012854:	9905      	ldrgt	r1, [sp, #20]
 8012856:	fb02 3301 	mlale	r3, r2, r1, r3
 801285a:	fb02 3301 	mlagt	r3, r2, r1, r3
 801285e:	f100 0001 	add.w	r0, r0, #1
 8012862:	bfd4      	ite	le
 8012864:	9306      	strle	r3, [sp, #24]
 8012866:	9305      	strgt	r3, [sp, #20]
 8012868:	f10b 0b01 	add.w	fp, fp, #1
 801286c:	9019      	str	r0, [sp, #100]	; 0x64
 801286e:	e7be      	b.n	80127ee <_strtod_l+0x146>
 8012870:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012872:	191a      	adds	r2, r3, r4
 8012874:	9219      	str	r2, [sp, #100]	; 0x64
 8012876:	5d1a      	ldrb	r2, [r3, r4]
 8012878:	f1bb 0f00 	cmp.w	fp, #0
 801287c:	d036      	beq.n	80128ec <_strtod_l+0x244>
 801287e:	465c      	mov	r4, fp
 8012880:	9004      	str	r0, [sp, #16]
 8012882:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8012886:	2b09      	cmp	r3, #9
 8012888:	d912      	bls.n	80128b0 <_strtod_l+0x208>
 801288a:	2301      	movs	r3, #1
 801288c:	e7c1      	b.n	8012812 <_strtod_l+0x16a>
 801288e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012890:	3001      	adds	r0, #1
 8012892:	1c5a      	adds	r2, r3, #1
 8012894:	9219      	str	r2, [sp, #100]	; 0x64
 8012896:	785a      	ldrb	r2, [r3, #1]
 8012898:	2a30      	cmp	r2, #48	; 0x30
 801289a:	d0f8      	beq.n	801288e <_strtod_l+0x1e6>
 801289c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80128a0:	2b08      	cmp	r3, #8
 80128a2:	f200 84d5 	bhi.w	8013250 <_strtod_l+0xba8>
 80128a6:	9004      	str	r0, [sp, #16]
 80128a8:	2000      	movs	r0, #0
 80128aa:	4604      	mov	r4, r0
 80128ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80128ae:	9308      	str	r3, [sp, #32]
 80128b0:	3a30      	subs	r2, #48	; 0x30
 80128b2:	f100 0301 	add.w	r3, r0, #1
 80128b6:	d013      	beq.n	80128e0 <_strtod_l+0x238>
 80128b8:	9904      	ldr	r1, [sp, #16]
 80128ba:	1905      	adds	r5, r0, r4
 80128bc:	4419      	add	r1, r3
 80128be:	9104      	str	r1, [sp, #16]
 80128c0:	4623      	mov	r3, r4
 80128c2:	210a      	movs	r1, #10
 80128c4:	42ab      	cmp	r3, r5
 80128c6:	d113      	bne.n	80128f0 <_strtod_l+0x248>
 80128c8:	1823      	adds	r3, r4, r0
 80128ca:	2b08      	cmp	r3, #8
 80128cc:	f104 0401 	add.w	r4, r4, #1
 80128d0:	4404      	add	r4, r0
 80128d2:	dc1b      	bgt.n	801290c <_strtod_l+0x264>
 80128d4:	230a      	movs	r3, #10
 80128d6:	9906      	ldr	r1, [sp, #24]
 80128d8:	fb03 2301 	mla	r3, r3, r1, r2
 80128dc:	9306      	str	r3, [sp, #24]
 80128de:	2300      	movs	r3, #0
 80128e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80128e2:	4618      	mov	r0, r3
 80128e4:	1c51      	adds	r1, r2, #1
 80128e6:	9119      	str	r1, [sp, #100]	; 0x64
 80128e8:	7852      	ldrb	r2, [r2, #1]
 80128ea:	e7ca      	b.n	8012882 <_strtod_l+0x1da>
 80128ec:	4658      	mov	r0, fp
 80128ee:	e7d3      	b.n	8012898 <_strtod_l+0x1f0>
 80128f0:	2b08      	cmp	r3, #8
 80128f2:	dc04      	bgt.n	80128fe <_strtod_l+0x256>
 80128f4:	9f06      	ldr	r7, [sp, #24]
 80128f6:	434f      	muls	r7, r1
 80128f8:	9706      	str	r7, [sp, #24]
 80128fa:	3301      	adds	r3, #1
 80128fc:	e7e2      	b.n	80128c4 <_strtod_l+0x21c>
 80128fe:	1c5f      	adds	r7, r3, #1
 8012900:	2f10      	cmp	r7, #16
 8012902:	bfde      	ittt	le
 8012904:	9f05      	ldrle	r7, [sp, #20]
 8012906:	434f      	mulle	r7, r1
 8012908:	9705      	strle	r7, [sp, #20]
 801290a:	e7f6      	b.n	80128fa <_strtod_l+0x252>
 801290c:	2c10      	cmp	r4, #16
 801290e:	bfdf      	itttt	le
 8012910:	230a      	movle	r3, #10
 8012912:	9905      	ldrle	r1, [sp, #20]
 8012914:	fb03 2301 	mlale	r3, r3, r1, r2
 8012918:	9305      	strle	r3, [sp, #20]
 801291a:	e7e0      	b.n	80128de <_strtod_l+0x236>
 801291c:	2300      	movs	r3, #0
 801291e:	9304      	str	r3, [sp, #16]
 8012920:	2301      	movs	r3, #1
 8012922:	e77b      	b.n	801281c <_strtod_l+0x174>
 8012924:	2700      	movs	r7, #0
 8012926:	1cb2      	adds	r2, r6, #2
 8012928:	9219      	str	r2, [sp, #100]	; 0x64
 801292a:	78b2      	ldrb	r2, [r6, #2]
 801292c:	e784      	b.n	8012838 <_strtod_l+0x190>
 801292e:	bf00      	nop
 8012930:	0801854c 	.word	0x0801854c
 8012934:	080182a0 	.word	0x080182a0
 8012938:	7ff00000 	.word	0x7ff00000
 801293c:	2701      	movs	r7, #1
 801293e:	e7f2      	b.n	8012926 <_strtod_l+0x27e>
 8012940:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012942:	1c51      	adds	r1, r2, #1
 8012944:	9119      	str	r1, [sp, #100]	; 0x64
 8012946:	7852      	ldrb	r2, [r2, #1]
 8012948:	2a30      	cmp	r2, #48	; 0x30
 801294a:	d0f9      	beq.n	8012940 <_strtod_l+0x298>
 801294c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8012950:	2908      	cmp	r1, #8
 8012952:	f63f af77 	bhi.w	8012844 <_strtod_l+0x19c>
 8012956:	f04f 0e0a 	mov.w	lr, #10
 801295a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801295e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012960:	9209      	str	r2, [sp, #36]	; 0x24
 8012962:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012964:	1c51      	adds	r1, r2, #1
 8012966:	9119      	str	r1, [sp, #100]	; 0x64
 8012968:	7852      	ldrb	r2, [r2, #1]
 801296a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801296e:	2d09      	cmp	r5, #9
 8012970:	d935      	bls.n	80129de <_strtod_l+0x336>
 8012972:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012974:	1b49      	subs	r1, r1, r5
 8012976:	2908      	cmp	r1, #8
 8012978:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801297c:	dc02      	bgt.n	8012984 <_strtod_l+0x2dc>
 801297e:	4565      	cmp	r5, ip
 8012980:	bfa8      	it	ge
 8012982:	4665      	movge	r5, ip
 8012984:	b107      	cbz	r7, 8012988 <_strtod_l+0x2e0>
 8012986:	426d      	negs	r5, r5
 8012988:	2c00      	cmp	r4, #0
 801298a:	d14c      	bne.n	8012a26 <_strtod_l+0x37e>
 801298c:	9907      	ldr	r1, [sp, #28]
 801298e:	4301      	orrs	r1, r0
 8012990:	f47f aecb 	bne.w	801272a <_strtod_l+0x82>
 8012994:	2b00      	cmp	r3, #0
 8012996:	f47f aee4 	bne.w	8012762 <_strtod_l+0xba>
 801299a:	2a69      	cmp	r2, #105	; 0x69
 801299c:	d026      	beq.n	80129ec <_strtod_l+0x344>
 801299e:	dc23      	bgt.n	80129e8 <_strtod_l+0x340>
 80129a0:	2a49      	cmp	r2, #73	; 0x49
 80129a2:	d023      	beq.n	80129ec <_strtod_l+0x344>
 80129a4:	2a4e      	cmp	r2, #78	; 0x4e
 80129a6:	f47f aedc 	bne.w	8012762 <_strtod_l+0xba>
 80129aa:	499d      	ldr	r1, [pc, #628]	; (8012c20 <_strtod_l+0x578>)
 80129ac:	a819      	add	r0, sp, #100	; 0x64
 80129ae:	f001 ff0d 	bl	80147cc <__match>
 80129b2:	2800      	cmp	r0, #0
 80129b4:	f43f aed5 	beq.w	8012762 <_strtod_l+0xba>
 80129b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80129ba:	781b      	ldrb	r3, [r3, #0]
 80129bc:	2b28      	cmp	r3, #40	; 0x28
 80129be:	d12c      	bne.n	8012a1a <_strtod_l+0x372>
 80129c0:	4998      	ldr	r1, [pc, #608]	; (8012c24 <_strtod_l+0x57c>)
 80129c2:	aa1c      	add	r2, sp, #112	; 0x70
 80129c4:	a819      	add	r0, sp, #100	; 0x64
 80129c6:	f001 ff15 	bl	80147f4 <__hexnan>
 80129ca:	2805      	cmp	r0, #5
 80129cc:	d125      	bne.n	8012a1a <_strtod_l+0x372>
 80129ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80129d0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80129d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80129d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80129dc:	e6a5      	b.n	801272a <_strtod_l+0x82>
 80129de:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80129e2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80129e6:	e7bc      	b.n	8012962 <_strtod_l+0x2ba>
 80129e8:	2a6e      	cmp	r2, #110	; 0x6e
 80129ea:	e7dc      	b.n	80129a6 <_strtod_l+0x2fe>
 80129ec:	498e      	ldr	r1, [pc, #568]	; (8012c28 <_strtod_l+0x580>)
 80129ee:	a819      	add	r0, sp, #100	; 0x64
 80129f0:	f001 feec 	bl	80147cc <__match>
 80129f4:	2800      	cmp	r0, #0
 80129f6:	f43f aeb4 	beq.w	8012762 <_strtod_l+0xba>
 80129fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80129fc:	498b      	ldr	r1, [pc, #556]	; (8012c2c <_strtod_l+0x584>)
 80129fe:	3b01      	subs	r3, #1
 8012a00:	a819      	add	r0, sp, #100	; 0x64
 8012a02:	9319      	str	r3, [sp, #100]	; 0x64
 8012a04:	f001 fee2 	bl	80147cc <__match>
 8012a08:	b910      	cbnz	r0, 8012a10 <_strtod_l+0x368>
 8012a0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012a0c:	3301      	adds	r3, #1
 8012a0e:	9319      	str	r3, [sp, #100]	; 0x64
 8012a10:	f04f 0800 	mov.w	r8, #0
 8012a14:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8012c30 <_strtod_l+0x588>
 8012a18:	e687      	b.n	801272a <_strtod_l+0x82>
 8012a1a:	4886      	ldr	r0, [pc, #536]	; (8012c34 <_strtod_l+0x58c>)
 8012a1c:	f003 f812 	bl	8015a44 <nan>
 8012a20:	4680      	mov	r8, r0
 8012a22:	4689      	mov	r9, r1
 8012a24:	e681      	b.n	801272a <_strtod_l+0x82>
 8012a26:	9b04      	ldr	r3, [sp, #16]
 8012a28:	f1bb 0f00 	cmp.w	fp, #0
 8012a2c:	bf08      	it	eq
 8012a2e:	46a3      	moveq	fp, r4
 8012a30:	1aeb      	subs	r3, r5, r3
 8012a32:	2c10      	cmp	r4, #16
 8012a34:	9806      	ldr	r0, [sp, #24]
 8012a36:	4626      	mov	r6, r4
 8012a38:	9307      	str	r3, [sp, #28]
 8012a3a:	bfa8      	it	ge
 8012a3c:	2610      	movge	r6, #16
 8012a3e:	f7ed fd17 	bl	8000470 <__aeabi_ui2d>
 8012a42:	2c09      	cmp	r4, #9
 8012a44:	4680      	mov	r8, r0
 8012a46:	4689      	mov	r9, r1
 8012a48:	dd13      	ble.n	8012a72 <_strtod_l+0x3ca>
 8012a4a:	4b7b      	ldr	r3, [pc, #492]	; (8012c38 <_strtod_l+0x590>)
 8012a4c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012a50:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012a54:	f7ed fd86 	bl	8000564 <__aeabi_dmul>
 8012a58:	4680      	mov	r8, r0
 8012a5a:	9805      	ldr	r0, [sp, #20]
 8012a5c:	4689      	mov	r9, r1
 8012a5e:	f7ed fd07 	bl	8000470 <__aeabi_ui2d>
 8012a62:	4602      	mov	r2, r0
 8012a64:	460b      	mov	r3, r1
 8012a66:	4640      	mov	r0, r8
 8012a68:	4649      	mov	r1, r9
 8012a6a:	f7ed fbc5 	bl	80001f8 <__adddf3>
 8012a6e:	4680      	mov	r8, r0
 8012a70:	4689      	mov	r9, r1
 8012a72:	2c0f      	cmp	r4, #15
 8012a74:	dc36      	bgt.n	8012ae4 <_strtod_l+0x43c>
 8012a76:	9b07      	ldr	r3, [sp, #28]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	f43f ae56 	beq.w	801272a <_strtod_l+0x82>
 8012a7e:	dd22      	ble.n	8012ac6 <_strtod_l+0x41e>
 8012a80:	2b16      	cmp	r3, #22
 8012a82:	dc09      	bgt.n	8012a98 <_strtod_l+0x3f0>
 8012a84:	496c      	ldr	r1, [pc, #432]	; (8012c38 <_strtod_l+0x590>)
 8012a86:	4642      	mov	r2, r8
 8012a88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012a8c:	464b      	mov	r3, r9
 8012a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a92:	f7ed fd67 	bl	8000564 <__aeabi_dmul>
 8012a96:	e7c3      	b.n	8012a20 <_strtod_l+0x378>
 8012a98:	9a07      	ldr	r2, [sp, #28]
 8012a9a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8012a9e:	4293      	cmp	r3, r2
 8012aa0:	db20      	blt.n	8012ae4 <_strtod_l+0x43c>
 8012aa2:	4d65      	ldr	r5, [pc, #404]	; (8012c38 <_strtod_l+0x590>)
 8012aa4:	f1c4 040f 	rsb	r4, r4, #15
 8012aa8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8012aac:	4642      	mov	r2, r8
 8012aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ab2:	464b      	mov	r3, r9
 8012ab4:	f7ed fd56 	bl	8000564 <__aeabi_dmul>
 8012ab8:	9b07      	ldr	r3, [sp, #28]
 8012aba:	1b1c      	subs	r4, r3, r4
 8012abc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8012ac0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012ac4:	e7e5      	b.n	8012a92 <_strtod_l+0x3ea>
 8012ac6:	9b07      	ldr	r3, [sp, #28]
 8012ac8:	3316      	adds	r3, #22
 8012aca:	db0b      	blt.n	8012ae4 <_strtod_l+0x43c>
 8012acc:	9b04      	ldr	r3, [sp, #16]
 8012ace:	4640      	mov	r0, r8
 8012ad0:	1b5d      	subs	r5, r3, r5
 8012ad2:	4b59      	ldr	r3, [pc, #356]	; (8012c38 <_strtod_l+0x590>)
 8012ad4:	4649      	mov	r1, r9
 8012ad6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012ada:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012ade:	f7ed fe6b 	bl	80007b8 <__aeabi_ddiv>
 8012ae2:	e79d      	b.n	8012a20 <_strtod_l+0x378>
 8012ae4:	9b07      	ldr	r3, [sp, #28]
 8012ae6:	1ba6      	subs	r6, r4, r6
 8012ae8:	441e      	add	r6, r3
 8012aea:	2e00      	cmp	r6, #0
 8012aec:	dd74      	ble.n	8012bd8 <_strtod_l+0x530>
 8012aee:	f016 030f 	ands.w	r3, r6, #15
 8012af2:	d00a      	beq.n	8012b0a <_strtod_l+0x462>
 8012af4:	4950      	ldr	r1, [pc, #320]	; (8012c38 <_strtod_l+0x590>)
 8012af6:	4642      	mov	r2, r8
 8012af8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b00:	464b      	mov	r3, r9
 8012b02:	f7ed fd2f 	bl	8000564 <__aeabi_dmul>
 8012b06:	4680      	mov	r8, r0
 8012b08:	4689      	mov	r9, r1
 8012b0a:	f036 060f 	bics.w	r6, r6, #15
 8012b0e:	d052      	beq.n	8012bb6 <_strtod_l+0x50e>
 8012b10:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8012b14:	dd27      	ble.n	8012b66 <_strtod_l+0x4be>
 8012b16:	f04f 0b00 	mov.w	fp, #0
 8012b1a:	f8cd b010 	str.w	fp, [sp, #16]
 8012b1e:	f8cd b020 	str.w	fp, [sp, #32]
 8012b22:	f8cd b018 	str.w	fp, [sp, #24]
 8012b26:	2322      	movs	r3, #34	; 0x22
 8012b28:	f04f 0800 	mov.w	r8, #0
 8012b2c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8012c30 <_strtod_l+0x588>
 8012b30:	f8ca 3000 	str.w	r3, [sl]
 8012b34:	9b08      	ldr	r3, [sp, #32]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	f43f adf7 	beq.w	801272a <_strtod_l+0x82>
 8012b3c:	4650      	mov	r0, sl
 8012b3e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012b40:	f001 ff64 	bl	8014a0c <_Bfree>
 8012b44:	4650      	mov	r0, sl
 8012b46:	9906      	ldr	r1, [sp, #24]
 8012b48:	f001 ff60 	bl	8014a0c <_Bfree>
 8012b4c:	4650      	mov	r0, sl
 8012b4e:	9904      	ldr	r1, [sp, #16]
 8012b50:	f001 ff5c 	bl	8014a0c <_Bfree>
 8012b54:	4650      	mov	r0, sl
 8012b56:	9908      	ldr	r1, [sp, #32]
 8012b58:	f001 ff58 	bl	8014a0c <_Bfree>
 8012b5c:	4659      	mov	r1, fp
 8012b5e:	4650      	mov	r0, sl
 8012b60:	f001 ff54 	bl	8014a0c <_Bfree>
 8012b64:	e5e1      	b.n	801272a <_strtod_l+0x82>
 8012b66:	4b35      	ldr	r3, [pc, #212]	; (8012c3c <_strtod_l+0x594>)
 8012b68:	4640      	mov	r0, r8
 8012b6a:	9305      	str	r3, [sp, #20]
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	4649      	mov	r1, r9
 8012b70:	461f      	mov	r7, r3
 8012b72:	1136      	asrs	r6, r6, #4
 8012b74:	2e01      	cmp	r6, #1
 8012b76:	dc21      	bgt.n	8012bbc <_strtod_l+0x514>
 8012b78:	b10b      	cbz	r3, 8012b7e <_strtod_l+0x4d6>
 8012b7a:	4680      	mov	r8, r0
 8012b7c:	4689      	mov	r9, r1
 8012b7e:	4b2f      	ldr	r3, [pc, #188]	; (8012c3c <_strtod_l+0x594>)
 8012b80:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8012b84:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012b88:	4642      	mov	r2, r8
 8012b8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012b8e:	464b      	mov	r3, r9
 8012b90:	f7ed fce8 	bl	8000564 <__aeabi_dmul>
 8012b94:	4b26      	ldr	r3, [pc, #152]	; (8012c30 <_strtod_l+0x588>)
 8012b96:	460a      	mov	r2, r1
 8012b98:	400b      	ands	r3, r1
 8012b9a:	4929      	ldr	r1, [pc, #164]	; (8012c40 <_strtod_l+0x598>)
 8012b9c:	4680      	mov	r8, r0
 8012b9e:	428b      	cmp	r3, r1
 8012ba0:	d8b9      	bhi.n	8012b16 <_strtod_l+0x46e>
 8012ba2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012ba6:	428b      	cmp	r3, r1
 8012ba8:	bf86      	itte	hi
 8012baa:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8012bae:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8012c44 <_strtod_l+0x59c>
 8012bb2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	9305      	str	r3, [sp, #20]
 8012bba:	e07f      	b.n	8012cbc <_strtod_l+0x614>
 8012bbc:	07f2      	lsls	r2, r6, #31
 8012bbe:	d505      	bpl.n	8012bcc <_strtod_l+0x524>
 8012bc0:	9b05      	ldr	r3, [sp, #20]
 8012bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc6:	f7ed fccd 	bl	8000564 <__aeabi_dmul>
 8012bca:	2301      	movs	r3, #1
 8012bcc:	9a05      	ldr	r2, [sp, #20]
 8012bce:	3701      	adds	r7, #1
 8012bd0:	3208      	adds	r2, #8
 8012bd2:	1076      	asrs	r6, r6, #1
 8012bd4:	9205      	str	r2, [sp, #20]
 8012bd6:	e7cd      	b.n	8012b74 <_strtod_l+0x4cc>
 8012bd8:	d0ed      	beq.n	8012bb6 <_strtod_l+0x50e>
 8012bda:	4276      	negs	r6, r6
 8012bdc:	f016 020f 	ands.w	r2, r6, #15
 8012be0:	d00a      	beq.n	8012bf8 <_strtod_l+0x550>
 8012be2:	4b15      	ldr	r3, [pc, #84]	; (8012c38 <_strtod_l+0x590>)
 8012be4:	4640      	mov	r0, r8
 8012be6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012bea:	4649      	mov	r1, r9
 8012bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf0:	f7ed fde2 	bl	80007b8 <__aeabi_ddiv>
 8012bf4:	4680      	mov	r8, r0
 8012bf6:	4689      	mov	r9, r1
 8012bf8:	1136      	asrs	r6, r6, #4
 8012bfa:	d0dc      	beq.n	8012bb6 <_strtod_l+0x50e>
 8012bfc:	2e1f      	cmp	r6, #31
 8012bfe:	dd23      	ble.n	8012c48 <_strtod_l+0x5a0>
 8012c00:	f04f 0b00 	mov.w	fp, #0
 8012c04:	f8cd b010 	str.w	fp, [sp, #16]
 8012c08:	f8cd b020 	str.w	fp, [sp, #32]
 8012c0c:	f8cd b018 	str.w	fp, [sp, #24]
 8012c10:	2322      	movs	r3, #34	; 0x22
 8012c12:	f04f 0800 	mov.w	r8, #0
 8012c16:	f04f 0900 	mov.w	r9, #0
 8012c1a:	f8ca 3000 	str.w	r3, [sl]
 8012c1e:	e789      	b.n	8012b34 <_strtod_l+0x48c>
 8012c20:	08018271 	.word	0x08018271
 8012c24:	080182b4 	.word	0x080182b4
 8012c28:	08018269 	.word	0x08018269
 8012c2c:	080183f4 	.word	0x080183f4
 8012c30:	7ff00000 	.word	0x7ff00000
 8012c34:	08018708 	.word	0x08018708
 8012c38:	080185e8 	.word	0x080185e8
 8012c3c:	080185c0 	.word	0x080185c0
 8012c40:	7ca00000 	.word	0x7ca00000
 8012c44:	7fefffff 	.word	0x7fefffff
 8012c48:	f016 0310 	ands.w	r3, r6, #16
 8012c4c:	bf18      	it	ne
 8012c4e:	236a      	movne	r3, #106	; 0x6a
 8012c50:	4640      	mov	r0, r8
 8012c52:	9305      	str	r3, [sp, #20]
 8012c54:	4649      	mov	r1, r9
 8012c56:	2300      	movs	r3, #0
 8012c58:	4fb0      	ldr	r7, [pc, #704]	; (8012f1c <_strtod_l+0x874>)
 8012c5a:	07f2      	lsls	r2, r6, #31
 8012c5c:	d504      	bpl.n	8012c68 <_strtod_l+0x5c0>
 8012c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012c62:	f7ed fc7f 	bl	8000564 <__aeabi_dmul>
 8012c66:	2301      	movs	r3, #1
 8012c68:	1076      	asrs	r6, r6, #1
 8012c6a:	f107 0708 	add.w	r7, r7, #8
 8012c6e:	d1f4      	bne.n	8012c5a <_strtod_l+0x5b2>
 8012c70:	b10b      	cbz	r3, 8012c76 <_strtod_l+0x5ce>
 8012c72:	4680      	mov	r8, r0
 8012c74:	4689      	mov	r9, r1
 8012c76:	9b05      	ldr	r3, [sp, #20]
 8012c78:	b1c3      	cbz	r3, 8012cac <_strtod_l+0x604>
 8012c7a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8012c7e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	4649      	mov	r1, r9
 8012c86:	dd11      	ble.n	8012cac <_strtod_l+0x604>
 8012c88:	2b1f      	cmp	r3, #31
 8012c8a:	f340 8127 	ble.w	8012edc <_strtod_l+0x834>
 8012c8e:	2b34      	cmp	r3, #52	; 0x34
 8012c90:	bfd8      	it	le
 8012c92:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8012c96:	f04f 0800 	mov.w	r8, #0
 8012c9a:	bfcf      	iteee	gt
 8012c9c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012ca0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8012ca4:	fa03 f202 	lslle.w	r2, r3, r2
 8012ca8:	ea02 0901 	andle.w	r9, r2, r1
 8012cac:	2200      	movs	r2, #0
 8012cae:	2300      	movs	r3, #0
 8012cb0:	4640      	mov	r0, r8
 8012cb2:	4649      	mov	r1, r9
 8012cb4:	f7ed febe 	bl	8000a34 <__aeabi_dcmpeq>
 8012cb8:	2800      	cmp	r0, #0
 8012cba:	d1a1      	bne.n	8012c00 <_strtod_l+0x558>
 8012cbc:	9b06      	ldr	r3, [sp, #24]
 8012cbe:	465a      	mov	r2, fp
 8012cc0:	9300      	str	r3, [sp, #0]
 8012cc2:	4650      	mov	r0, sl
 8012cc4:	4623      	mov	r3, r4
 8012cc6:	9908      	ldr	r1, [sp, #32]
 8012cc8:	f001 ff08 	bl	8014adc <__s2b>
 8012ccc:	9008      	str	r0, [sp, #32]
 8012cce:	2800      	cmp	r0, #0
 8012cd0:	f43f af21 	beq.w	8012b16 <_strtod_l+0x46e>
 8012cd4:	9b04      	ldr	r3, [sp, #16]
 8012cd6:	f04f 0b00 	mov.w	fp, #0
 8012cda:	1b5d      	subs	r5, r3, r5
 8012cdc:	9b07      	ldr	r3, [sp, #28]
 8012cde:	f8cd b010 	str.w	fp, [sp, #16]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	bfb4      	ite	lt
 8012ce6:	462b      	movlt	r3, r5
 8012ce8:	2300      	movge	r3, #0
 8012cea:	930e      	str	r3, [sp, #56]	; 0x38
 8012cec:	9b07      	ldr	r3, [sp, #28]
 8012cee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012cf2:	9314      	str	r3, [sp, #80]	; 0x50
 8012cf4:	9b08      	ldr	r3, [sp, #32]
 8012cf6:	4650      	mov	r0, sl
 8012cf8:	6859      	ldr	r1, [r3, #4]
 8012cfa:	f001 fe47 	bl	801498c <_Balloc>
 8012cfe:	9006      	str	r0, [sp, #24]
 8012d00:	2800      	cmp	r0, #0
 8012d02:	f43f af10 	beq.w	8012b26 <_strtod_l+0x47e>
 8012d06:	9b08      	ldr	r3, [sp, #32]
 8012d08:	300c      	adds	r0, #12
 8012d0a:	691a      	ldr	r2, [r3, #16]
 8012d0c:	f103 010c 	add.w	r1, r3, #12
 8012d10:	3202      	adds	r2, #2
 8012d12:	0092      	lsls	r2, r2, #2
 8012d14:	f7fe fdd0 	bl	80118b8 <memcpy>
 8012d18:	ab1c      	add	r3, sp, #112	; 0x70
 8012d1a:	9301      	str	r3, [sp, #4]
 8012d1c:	ab1b      	add	r3, sp, #108	; 0x6c
 8012d1e:	9300      	str	r3, [sp, #0]
 8012d20:	4642      	mov	r2, r8
 8012d22:	464b      	mov	r3, r9
 8012d24:	4650      	mov	r0, sl
 8012d26:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8012d2a:	f002 fa19 	bl	8015160 <__d2b>
 8012d2e:	901a      	str	r0, [sp, #104]	; 0x68
 8012d30:	2800      	cmp	r0, #0
 8012d32:	f43f aef8 	beq.w	8012b26 <_strtod_l+0x47e>
 8012d36:	2101      	movs	r1, #1
 8012d38:	4650      	mov	r0, sl
 8012d3a:	f001 ff67 	bl	8014c0c <__i2b>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	9004      	str	r0, [sp, #16]
 8012d42:	2800      	cmp	r0, #0
 8012d44:	f43f aeef 	beq.w	8012b26 <_strtod_l+0x47e>
 8012d48:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8012d4a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012d4c:	2d00      	cmp	r5, #0
 8012d4e:	bfab      	itete	ge
 8012d50:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8012d52:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8012d54:	18ee      	addge	r6, r5, r3
 8012d56:	1b5c      	sublt	r4, r3, r5
 8012d58:	9b05      	ldr	r3, [sp, #20]
 8012d5a:	bfa8      	it	ge
 8012d5c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8012d5e:	eba5 0503 	sub.w	r5, r5, r3
 8012d62:	4415      	add	r5, r2
 8012d64:	4b6e      	ldr	r3, [pc, #440]	; (8012f20 <_strtod_l+0x878>)
 8012d66:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8012d6a:	bfb8      	it	lt
 8012d6c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8012d6e:	429d      	cmp	r5, r3
 8012d70:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012d74:	f280 80c4 	bge.w	8012f00 <_strtod_l+0x858>
 8012d78:	1b5b      	subs	r3, r3, r5
 8012d7a:	2b1f      	cmp	r3, #31
 8012d7c:	f04f 0701 	mov.w	r7, #1
 8012d80:	eba2 0203 	sub.w	r2, r2, r3
 8012d84:	f300 80b1 	bgt.w	8012eea <_strtod_l+0x842>
 8012d88:	2500      	movs	r5, #0
 8012d8a:	fa07 f303 	lsl.w	r3, r7, r3
 8012d8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d90:	18b7      	adds	r7, r6, r2
 8012d92:	9b05      	ldr	r3, [sp, #20]
 8012d94:	42be      	cmp	r6, r7
 8012d96:	4414      	add	r4, r2
 8012d98:	441c      	add	r4, r3
 8012d9a:	4633      	mov	r3, r6
 8012d9c:	bfa8      	it	ge
 8012d9e:	463b      	movge	r3, r7
 8012da0:	42a3      	cmp	r3, r4
 8012da2:	bfa8      	it	ge
 8012da4:	4623      	movge	r3, r4
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	bfc2      	ittt	gt
 8012daa:	1aff      	subgt	r7, r7, r3
 8012dac:	1ae4      	subgt	r4, r4, r3
 8012dae:	1af6      	subgt	r6, r6, r3
 8012db0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	dd17      	ble.n	8012de6 <_strtod_l+0x73e>
 8012db6:	461a      	mov	r2, r3
 8012db8:	4650      	mov	r0, sl
 8012dba:	9904      	ldr	r1, [sp, #16]
 8012dbc:	f001 ffe4 	bl	8014d88 <__pow5mult>
 8012dc0:	9004      	str	r0, [sp, #16]
 8012dc2:	2800      	cmp	r0, #0
 8012dc4:	f43f aeaf 	beq.w	8012b26 <_strtod_l+0x47e>
 8012dc8:	4601      	mov	r1, r0
 8012dca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012dcc:	4650      	mov	r0, sl
 8012dce:	f001 ff33 	bl	8014c38 <__multiply>
 8012dd2:	9009      	str	r0, [sp, #36]	; 0x24
 8012dd4:	2800      	cmp	r0, #0
 8012dd6:	f43f aea6 	beq.w	8012b26 <_strtod_l+0x47e>
 8012dda:	4650      	mov	r0, sl
 8012ddc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012dde:	f001 fe15 	bl	8014a0c <_Bfree>
 8012de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012de4:	931a      	str	r3, [sp, #104]	; 0x68
 8012de6:	2f00      	cmp	r7, #0
 8012de8:	f300 808e 	bgt.w	8012f08 <_strtod_l+0x860>
 8012dec:	9b07      	ldr	r3, [sp, #28]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	dd08      	ble.n	8012e04 <_strtod_l+0x75c>
 8012df2:	4650      	mov	r0, sl
 8012df4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012df6:	9906      	ldr	r1, [sp, #24]
 8012df8:	f001 ffc6 	bl	8014d88 <__pow5mult>
 8012dfc:	9006      	str	r0, [sp, #24]
 8012dfe:	2800      	cmp	r0, #0
 8012e00:	f43f ae91 	beq.w	8012b26 <_strtod_l+0x47e>
 8012e04:	2c00      	cmp	r4, #0
 8012e06:	dd08      	ble.n	8012e1a <_strtod_l+0x772>
 8012e08:	4622      	mov	r2, r4
 8012e0a:	4650      	mov	r0, sl
 8012e0c:	9906      	ldr	r1, [sp, #24]
 8012e0e:	f002 f815 	bl	8014e3c <__lshift>
 8012e12:	9006      	str	r0, [sp, #24]
 8012e14:	2800      	cmp	r0, #0
 8012e16:	f43f ae86 	beq.w	8012b26 <_strtod_l+0x47e>
 8012e1a:	2e00      	cmp	r6, #0
 8012e1c:	dd08      	ble.n	8012e30 <_strtod_l+0x788>
 8012e1e:	4632      	mov	r2, r6
 8012e20:	4650      	mov	r0, sl
 8012e22:	9904      	ldr	r1, [sp, #16]
 8012e24:	f002 f80a 	bl	8014e3c <__lshift>
 8012e28:	9004      	str	r0, [sp, #16]
 8012e2a:	2800      	cmp	r0, #0
 8012e2c:	f43f ae7b 	beq.w	8012b26 <_strtod_l+0x47e>
 8012e30:	4650      	mov	r0, sl
 8012e32:	9a06      	ldr	r2, [sp, #24]
 8012e34:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012e36:	f002 f88d 	bl	8014f54 <__mdiff>
 8012e3a:	4683      	mov	fp, r0
 8012e3c:	2800      	cmp	r0, #0
 8012e3e:	f43f ae72 	beq.w	8012b26 <_strtod_l+0x47e>
 8012e42:	2400      	movs	r4, #0
 8012e44:	68c3      	ldr	r3, [r0, #12]
 8012e46:	9904      	ldr	r1, [sp, #16]
 8012e48:	60c4      	str	r4, [r0, #12]
 8012e4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8012e4c:	f002 f866 	bl	8014f1c <__mcmp>
 8012e50:	42a0      	cmp	r0, r4
 8012e52:	da6b      	bge.n	8012f2c <_strtod_l+0x884>
 8012e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e56:	ea53 0308 	orrs.w	r3, r3, r8
 8012e5a:	f040 8091 	bne.w	8012f80 <_strtod_l+0x8d8>
 8012e5e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	f040 808c 	bne.w	8012f80 <_strtod_l+0x8d8>
 8012e68:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012e6c:	0d1b      	lsrs	r3, r3, #20
 8012e6e:	051b      	lsls	r3, r3, #20
 8012e70:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012e74:	f240 8084 	bls.w	8012f80 <_strtod_l+0x8d8>
 8012e78:	f8db 3014 	ldr.w	r3, [fp, #20]
 8012e7c:	b91b      	cbnz	r3, 8012e86 <_strtod_l+0x7de>
 8012e7e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8012e82:	2b01      	cmp	r3, #1
 8012e84:	dd7c      	ble.n	8012f80 <_strtod_l+0x8d8>
 8012e86:	4659      	mov	r1, fp
 8012e88:	2201      	movs	r2, #1
 8012e8a:	4650      	mov	r0, sl
 8012e8c:	f001 ffd6 	bl	8014e3c <__lshift>
 8012e90:	9904      	ldr	r1, [sp, #16]
 8012e92:	4683      	mov	fp, r0
 8012e94:	f002 f842 	bl	8014f1c <__mcmp>
 8012e98:	2800      	cmp	r0, #0
 8012e9a:	dd71      	ble.n	8012f80 <_strtod_l+0x8d8>
 8012e9c:	9905      	ldr	r1, [sp, #20]
 8012e9e:	464b      	mov	r3, r9
 8012ea0:	4a20      	ldr	r2, [pc, #128]	; (8012f24 <_strtod_l+0x87c>)
 8012ea2:	2900      	cmp	r1, #0
 8012ea4:	f000 808c 	beq.w	8012fc0 <_strtod_l+0x918>
 8012ea8:	ea02 0109 	and.w	r1, r2, r9
 8012eac:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012eb0:	f300 8086 	bgt.w	8012fc0 <_strtod_l+0x918>
 8012eb4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012eb8:	f77f aeaa 	ble.w	8012c10 <_strtod_l+0x568>
 8012ebc:	4640      	mov	r0, r8
 8012ebe:	4649      	mov	r1, r9
 8012ec0:	4b19      	ldr	r3, [pc, #100]	; (8012f28 <_strtod_l+0x880>)
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	f7ed fb4e 	bl	8000564 <__aeabi_dmul>
 8012ec8:	460b      	mov	r3, r1
 8012eca:	4303      	orrs	r3, r0
 8012ecc:	bf08      	it	eq
 8012ece:	2322      	moveq	r3, #34	; 0x22
 8012ed0:	4680      	mov	r8, r0
 8012ed2:	4689      	mov	r9, r1
 8012ed4:	bf08      	it	eq
 8012ed6:	f8ca 3000 	streq.w	r3, [sl]
 8012eda:	e62f      	b.n	8012b3c <_strtod_l+0x494>
 8012edc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8012ee4:	ea03 0808 	and.w	r8, r3, r8
 8012ee8:	e6e0      	b.n	8012cac <_strtod_l+0x604>
 8012eea:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8012eee:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8012ef2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8012ef6:	35e2      	adds	r5, #226	; 0xe2
 8012ef8:	fa07 f505 	lsl.w	r5, r7, r5
 8012efc:	970f      	str	r7, [sp, #60]	; 0x3c
 8012efe:	e747      	b.n	8012d90 <_strtod_l+0x6e8>
 8012f00:	2301      	movs	r3, #1
 8012f02:	2500      	movs	r5, #0
 8012f04:	930f      	str	r3, [sp, #60]	; 0x3c
 8012f06:	e743      	b.n	8012d90 <_strtod_l+0x6e8>
 8012f08:	463a      	mov	r2, r7
 8012f0a:	4650      	mov	r0, sl
 8012f0c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012f0e:	f001 ff95 	bl	8014e3c <__lshift>
 8012f12:	901a      	str	r0, [sp, #104]	; 0x68
 8012f14:	2800      	cmp	r0, #0
 8012f16:	f47f af69 	bne.w	8012dec <_strtod_l+0x744>
 8012f1a:	e604      	b.n	8012b26 <_strtod_l+0x47e>
 8012f1c:	080182c8 	.word	0x080182c8
 8012f20:	fffffc02 	.word	0xfffffc02
 8012f24:	7ff00000 	.word	0x7ff00000
 8012f28:	39500000 	.word	0x39500000
 8012f2c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012f30:	d165      	bne.n	8012ffe <_strtod_l+0x956>
 8012f32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012f34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012f38:	b35a      	cbz	r2, 8012f92 <_strtod_l+0x8ea>
 8012f3a:	4a99      	ldr	r2, [pc, #612]	; (80131a0 <_strtod_l+0xaf8>)
 8012f3c:	4293      	cmp	r3, r2
 8012f3e:	d12b      	bne.n	8012f98 <_strtod_l+0x8f0>
 8012f40:	9b05      	ldr	r3, [sp, #20]
 8012f42:	4641      	mov	r1, r8
 8012f44:	b303      	cbz	r3, 8012f88 <_strtod_l+0x8e0>
 8012f46:	464a      	mov	r2, r9
 8012f48:	4b96      	ldr	r3, [pc, #600]	; (80131a4 <_strtod_l+0xafc>)
 8012f4a:	4013      	ands	r3, r2
 8012f4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012f54:	d81b      	bhi.n	8012f8e <_strtod_l+0x8e6>
 8012f56:	0d1b      	lsrs	r3, r3, #20
 8012f58:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8012f60:	4299      	cmp	r1, r3
 8012f62:	d119      	bne.n	8012f98 <_strtod_l+0x8f0>
 8012f64:	4b90      	ldr	r3, [pc, #576]	; (80131a8 <_strtod_l+0xb00>)
 8012f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d102      	bne.n	8012f72 <_strtod_l+0x8ca>
 8012f6c:	3101      	adds	r1, #1
 8012f6e:	f43f adda 	beq.w	8012b26 <_strtod_l+0x47e>
 8012f72:	f04f 0800 	mov.w	r8, #0
 8012f76:	4b8b      	ldr	r3, [pc, #556]	; (80131a4 <_strtod_l+0xafc>)
 8012f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f7a:	401a      	ands	r2, r3
 8012f7c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8012f80:	9b05      	ldr	r3, [sp, #20]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d19a      	bne.n	8012ebc <_strtod_l+0x814>
 8012f86:	e5d9      	b.n	8012b3c <_strtod_l+0x494>
 8012f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f8c:	e7e8      	b.n	8012f60 <_strtod_l+0x8b8>
 8012f8e:	4613      	mov	r3, r2
 8012f90:	e7e6      	b.n	8012f60 <_strtod_l+0x8b8>
 8012f92:	ea53 0308 	orrs.w	r3, r3, r8
 8012f96:	d081      	beq.n	8012e9c <_strtod_l+0x7f4>
 8012f98:	b1e5      	cbz	r5, 8012fd4 <_strtod_l+0x92c>
 8012f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f9c:	421d      	tst	r5, r3
 8012f9e:	d0ef      	beq.n	8012f80 <_strtod_l+0x8d8>
 8012fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012fa2:	4640      	mov	r0, r8
 8012fa4:	4649      	mov	r1, r9
 8012fa6:	9a05      	ldr	r2, [sp, #20]
 8012fa8:	b1c3      	cbz	r3, 8012fdc <_strtod_l+0x934>
 8012faa:	f7ff fb59 	bl	8012660 <sulp>
 8012fae:	4602      	mov	r2, r0
 8012fb0:	460b      	mov	r3, r1
 8012fb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012fb6:	f7ed f91f 	bl	80001f8 <__adddf3>
 8012fba:	4680      	mov	r8, r0
 8012fbc:	4689      	mov	r9, r1
 8012fbe:	e7df      	b.n	8012f80 <_strtod_l+0x8d8>
 8012fc0:	4013      	ands	r3, r2
 8012fc2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012fc6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8012fca:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8012fce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8012fd2:	e7d5      	b.n	8012f80 <_strtod_l+0x8d8>
 8012fd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012fd6:	ea13 0f08 	tst.w	r3, r8
 8012fda:	e7e0      	b.n	8012f9e <_strtod_l+0x8f6>
 8012fdc:	f7ff fb40 	bl	8012660 <sulp>
 8012fe0:	4602      	mov	r2, r0
 8012fe2:	460b      	mov	r3, r1
 8012fe4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012fe8:	f7ed f904 	bl	80001f4 <__aeabi_dsub>
 8012fec:	2200      	movs	r2, #0
 8012fee:	2300      	movs	r3, #0
 8012ff0:	4680      	mov	r8, r0
 8012ff2:	4689      	mov	r9, r1
 8012ff4:	f7ed fd1e 	bl	8000a34 <__aeabi_dcmpeq>
 8012ff8:	2800      	cmp	r0, #0
 8012ffa:	d0c1      	beq.n	8012f80 <_strtod_l+0x8d8>
 8012ffc:	e608      	b.n	8012c10 <_strtod_l+0x568>
 8012ffe:	4658      	mov	r0, fp
 8013000:	9904      	ldr	r1, [sp, #16]
 8013002:	f002 f909 	bl	8015218 <__ratio>
 8013006:	2200      	movs	r2, #0
 8013008:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801300c:	4606      	mov	r6, r0
 801300e:	460f      	mov	r7, r1
 8013010:	f7ed fd24 	bl	8000a5c <__aeabi_dcmple>
 8013014:	2800      	cmp	r0, #0
 8013016:	d070      	beq.n	80130fa <_strtod_l+0xa52>
 8013018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801301a:	2b00      	cmp	r3, #0
 801301c:	d042      	beq.n	80130a4 <_strtod_l+0x9fc>
 801301e:	2600      	movs	r6, #0
 8013020:	4f62      	ldr	r7, [pc, #392]	; (80131ac <_strtod_l+0xb04>)
 8013022:	4d62      	ldr	r5, [pc, #392]	; (80131ac <_strtod_l+0xb04>)
 8013024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013026:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801302a:	0d1b      	lsrs	r3, r3, #20
 801302c:	051b      	lsls	r3, r3, #20
 801302e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013030:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013032:	4b5f      	ldr	r3, [pc, #380]	; (80131b0 <_strtod_l+0xb08>)
 8013034:	429a      	cmp	r2, r3
 8013036:	f040 80c3 	bne.w	80131c0 <_strtod_l+0xb18>
 801303a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801303c:	4640      	mov	r0, r8
 801303e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8013042:	4649      	mov	r1, r9
 8013044:	f002 f812 	bl	801506c <__ulp>
 8013048:	4602      	mov	r2, r0
 801304a:	460b      	mov	r3, r1
 801304c:	4630      	mov	r0, r6
 801304e:	4639      	mov	r1, r7
 8013050:	f7ed fa88 	bl	8000564 <__aeabi_dmul>
 8013054:	4642      	mov	r2, r8
 8013056:	464b      	mov	r3, r9
 8013058:	f7ed f8ce 	bl	80001f8 <__adddf3>
 801305c:	460b      	mov	r3, r1
 801305e:	4951      	ldr	r1, [pc, #324]	; (80131a4 <_strtod_l+0xafc>)
 8013060:	4a54      	ldr	r2, [pc, #336]	; (80131b4 <_strtod_l+0xb0c>)
 8013062:	4019      	ands	r1, r3
 8013064:	4291      	cmp	r1, r2
 8013066:	4680      	mov	r8, r0
 8013068:	d95d      	bls.n	8013126 <_strtod_l+0xa7e>
 801306a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801306c:	4b4e      	ldr	r3, [pc, #312]	; (80131a8 <_strtod_l+0xb00>)
 801306e:	429a      	cmp	r2, r3
 8013070:	d103      	bne.n	801307a <_strtod_l+0x9d2>
 8013072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013074:	3301      	adds	r3, #1
 8013076:	f43f ad56 	beq.w	8012b26 <_strtod_l+0x47e>
 801307a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801307e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80131a8 <_strtod_l+0xb00>
 8013082:	4650      	mov	r0, sl
 8013084:	991a      	ldr	r1, [sp, #104]	; 0x68
 8013086:	f001 fcc1 	bl	8014a0c <_Bfree>
 801308a:	4650      	mov	r0, sl
 801308c:	9906      	ldr	r1, [sp, #24]
 801308e:	f001 fcbd 	bl	8014a0c <_Bfree>
 8013092:	4650      	mov	r0, sl
 8013094:	9904      	ldr	r1, [sp, #16]
 8013096:	f001 fcb9 	bl	8014a0c <_Bfree>
 801309a:	4659      	mov	r1, fp
 801309c:	4650      	mov	r0, sl
 801309e:	f001 fcb5 	bl	8014a0c <_Bfree>
 80130a2:	e627      	b.n	8012cf4 <_strtod_l+0x64c>
 80130a4:	f1b8 0f00 	cmp.w	r8, #0
 80130a8:	d119      	bne.n	80130de <_strtod_l+0xa36>
 80130aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80130b0:	b9e3      	cbnz	r3, 80130ec <_strtod_l+0xa44>
 80130b2:	2200      	movs	r2, #0
 80130b4:	4630      	mov	r0, r6
 80130b6:	4639      	mov	r1, r7
 80130b8:	4b3c      	ldr	r3, [pc, #240]	; (80131ac <_strtod_l+0xb04>)
 80130ba:	f7ed fcc5 	bl	8000a48 <__aeabi_dcmplt>
 80130be:	b9c8      	cbnz	r0, 80130f4 <_strtod_l+0xa4c>
 80130c0:	2200      	movs	r2, #0
 80130c2:	4630      	mov	r0, r6
 80130c4:	4639      	mov	r1, r7
 80130c6:	4b3c      	ldr	r3, [pc, #240]	; (80131b8 <_strtod_l+0xb10>)
 80130c8:	f7ed fa4c 	bl	8000564 <__aeabi_dmul>
 80130cc:	4604      	mov	r4, r0
 80130ce:	460d      	mov	r5, r1
 80130d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80130d4:	9416      	str	r4, [sp, #88]	; 0x58
 80130d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80130d8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80130dc:	e7a2      	b.n	8013024 <_strtod_l+0x97c>
 80130de:	f1b8 0f01 	cmp.w	r8, #1
 80130e2:	d103      	bne.n	80130ec <_strtod_l+0xa44>
 80130e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	f43f ad92 	beq.w	8012c10 <_strtod_l+0x568>
 80130ec:	2600      	movs	r6, #0
 80130ee:	2400      	movs	r4, #0
 80130f0:	4f32      	ldr	r7, [pc, #200]	; (80131bc <_strtod_l+0xb14>)
 80130f2:	e796      	b.n	8013022 <_strtod_l+0x97a>
 80130f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80130f6:	4d30      	ldr	r5, [pc, #192]	; (80131b8 <_strtod_l+0xb10>)
 80130f8:	e7ea      	b.n	80130d0 <_strtod_l+0xa28>
 80130fa:	4b2f      	ldr	r3, [pc, #188]	; (80131b8 <_strtod_l+0xb10>)
 80130fc:	2200      	movs	r2, #0
 80130fe:	4630      	mov	r0, r6
 8013100:	4639      	mov	r1, r7
 8013102:	f7ed fa2f 	bl	8000564 <__aeabi_dmul>
 8013106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013108:	4604      	mov	r4, r0
 801310a:	460d      	mov	r5, r1
 801310c:	b933      	cbnz	r3, 801311c <_strtod_l+0xa74>
 801310e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013112:	9010      	str	r0, [sp, #64]	; 0x40
 8013114:	9311      	str	r3, [sp, #68]	; 0x44
 8013116:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801311a:	e783      	b.n	8013024 <_strtod_l+0x97c>
 801311c:	4602      	mov	r2, r0
 801311e:	460b      	mov	r3, r1
 8013120:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8013124:	e7f7      	b.n	8013116 <_strtod_l+0xa6e>
 8013126:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801312a:	9b05      	ldr	r3, [sp, #20]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d1a8      	bne.n	8013082 <_strtod_l+0x9da>
 8013130:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013134:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013136:	0d1b      	lsrs	r3, r3, #20
 8013138:	051b      	lsls	r3, r3, #20
 801313a:	429a      	cmp	r2, r3
 801313c:	d1a1      	bne.n	8013082 <_strtod_l+0x9da>
 801313e:	4620      	mov	r0, r4
 8013140:	4629      	mov	r1, r5
 8013142:	f7ee f843 	bl	80011cc <__aeabi_d2lz>
 8013146:	f7ed f9df 	bl	8000508 <__aeabi_l2d>
 801314a:	4602      	mov	r2, r0
 801314c:	460b      	mov	r3, r1
 801314e:	4620      	mov	r0, r4
 8013150:	4629      	mov	r1, r5
 8013152:	f7ed f84f 	bl	80001f4 <__aeabi_dsub>
 8013156:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013158:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801315c:	ea43 0308 	orr.w	r3, r3, r8
 8013160:	4313      	orrs	r3, r2
 8013162:	4604      	mov	r4, r0
 8013164:	460d      	mov	r5, r1
 8013166:	d066      	beq.n	8013236 <_strtod_l+0xb8e>
 8013168:	a309      	add	r3, pc, #36	; (adr r3, 8013190 <_strtod_l+0xae8>)
 801316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801316e:	f7ed fc6b 	bl	8000a48 <__aeabi_dcmplt>
 8013172:	2800      	cmp	r0, #0
 8013174:	f47f ace2 	bne.w	8012b3c <_strtod_l+0x494>
 8013178:	a307      	add	r3, pc, #28	; (adr r3, 8013198 <_strtod_l+0xaf0>)
 801317a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801317e:	4620      	mov	r0, r4
 8013180:	4629      	mov	r1, r5
 8013182:	f7ed fc7f 	bl	8000a84 <__aeabi_dcmpgt>
 8013186:	2800      	cmp	r0, #0
 8013188:	f43f af7b 	beq.w	8013082 <_strtod_l+0x9da>
 801318c:	e4d6      	b.n	8012b3c <_strtod_l+0x494>
 801318e:	bf00      	nop
 8013190:	94a03595 	.word	0x94a03595
 8013194:	3fdfffff 	.word	0x3fdfffff
 8013198:	35afe535 	.word	0x35afe535
 801319c:	3fe00000 	.word	0x3fe00000
 80131a0:	000fffff 	.word	0x000fffff
 80131a4:	7ff00000 	.word	0x7ff00000
 80131a8:	7fefffff 	.word	0x7fefffff
 80131ac:	3ff00000 	.word	0x3ff00000
 80131b0:	7fe00000 	.word	0x7fe00000
 80131b4:	7c9fffff 	.word	0x7c9fffff
 80131b8:	3fe00000 	.word	0x3fe00000
 80131bc:	bff00000 	.word	0xbff00000
 80131c0:	9b05      	ldr	r3, [sp, #20]
 80131c2:	b313      	cbz	r3, 801320a <_strtod_l+0xb62>
 80131c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80131c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80131ca:	d81e      	bhi.n	801320a <_strtod_l+0xb62>
 80131cc:	a326      	add	r3, pc, #152	; (adr r3, 8013268 <_strtod_l+0xbc0>)
 80131ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d2:	4620      	mov	r0, r4
 80131d4:	4629      	mov	r1, r5
 80131d6:	f7ed fc41 	bl	8000a5c <__aeabi_dcmple>
 80131da:	b190      	cbz	r0, 8013202 <_strtod_l+0xb5a>
 80131dc:	4629      	mov	r1, r5
 80131de:	4620      	mov	r0, r4
 80131e0:	f7ed fc98 	bl	8000b14 <__aeabi_d2uiz>
 80131e4:	2801      	cmp	r0, #1
 80131e6:	bf38      	it	cc
 80131e8:	2001      	movcc	r0, #1
 80131ea:	f7ed f941 	bl	8000470 <__aeabi_ui2d>
 80131ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131f0:	4604      	mov	r4, r0
 80131f2:	460d      	mov	r5, r1
 80131f4:	b9d3      	cbnz	r3, 801322c <_strtod_l+0xb84>
 80131f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80131fa:	9012      	str	r0, [sp, #72]	; 0x48
 80131fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80131fe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8013202:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013204:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8013208:	1a9f      	subs	r7, r3, r2
 801320a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801320e:	f001 ff2d 	bl	801506c <__ulp>
 8013212:	4602      	mov	r2, r0
 8013214:	460b      	mov	r3, r1
 8013216:	4630      	mov	r0, r6
 8013218:	4639      	mov	r1, r7
 801321a:	f7ed f9a3 	bl	8000564 <__aeabi_dmul>
 801321e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013222:	f7ec ffe9 	bl	80001f8 <__adddf3>
 8013226:	4680      	mov	r8, r0
 8013228:	4689      	mov	r9, r1
 801322a:	e77e      	b.n	801312a <_strtod_l+0xa82>
 801322c:	4602      	mov	r2, r0
 801322e:	460b      	mov	r3, r1
 8013230:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8013234:	e7e3      	b.n	80131fe <_strtod_l+0xb56>
 8013236:	a30e      	add	r3, pc, #56	; (adr r3, 8013270 <_strtod_l+0xbc8>)
 8013238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801323c:	f7ed fc04 	bl	8000a48 <__aeabi_dcmplt>
 8013240:	e7a1      	b.n	8013186 <_strtod_l+0xade>
 8013242:	2300      	movs	r3, #0
 8013244:	930a      	str	r3, [sp, #40]	; 0x28
 8013246:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013248:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801324a:	6013      	str	r3, [r2, #0]
 801324c:	f7ff ba71 	b.w	8012732 <_strtod_l+0x8a>
 8013250:	2a65      	cmp	r2, #101	; 0x65
 8013252:	f43f ab63 	beq.w	801291c <_strtod_l+0x274>
 8013256:	2a45      	cmp	r2, #69	; 0x45
 8013258:	f43f ab60 	beq.w	801291c <_strtod_l+0x274>
 801325c:	2301      	movs	r3, #1
 801325e:	f7ff bb95 	b.w	801298c <_strtod_l+0x2e4>
 8013262:	bf00      	nop
 8013264:	f3af 8000 	nop.w
 8013268:	ffc00000 	.word	0xffc00000
 801326c:	41dfffff 	.word	0x41dfffff
 8013270:	94a03595 	.word	0x94a03595
 8013274:	3fcfffff 	.word	0x3fcfffff

08013278 <_strtod_r>:
 8013278:	4b01      	ldr	r3, [pc, #4]	; (8013280 <_strtod_r+0x8>)
 801327a:	f7ff ba15 	b.w	80126a8 <_strtod_l>
 801327e:	bf00      	nop
 8013280:	200000a0 	.word	0x200000a0

08013284 <_strtol_l.constprop.0>:
 8013284:	2b01      	cmp	r3, #1
 8013286:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801328a:	4680      	mov	r8, r0
 801328c:	d001      	beq.n	8013292 <_strtol_l.constprop.0+0xe>
 801328e:	2b24      	cmp	r3, #36	; 0x24
 8013290:	d906      	bls.n	80132a0 <_strtol_l.constprop.0+0x1c>
 8013292:	f7fe fad7 	bl	8011844 <__errno>
 8013296:	2316      	movs	r3, #22
 8013298:	6003      	str	r3, [r0, #0]
 801329a:	2000      	movs	r0, #0
 801329c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132a0:	460d      	mov	r5, r1
 80132a2:	4f35      	ldr	r7, [pc, #212]	; (8013378 <_strtol_l.constprop.0+0xf4>)
 80132a4:	4628      	mov	r0, r5
 80132a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80132aa:	5de6      	ldrb	r6, [r4, r7]
 80132ac:	f016 0608 	ands.w	r6, r6, #8
 80132b0:	d1f8      	bne.n	80132a4 <_strtol_l.constprop.0+0x20>
 80132b2:	2c2d      	cmp	r4, #45	; 0x2d
 80132b4:	d12f      	bne.n	8013316 <_strtol_l.constprop.0+0x92>
 80132b6:	2601      	movs	r6, #1
 80132b8:	782c      	ldrb	r4, [r5, #0]
 80132ba:	1c85      	adds	r5, r0, #2
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d057      	beq.n	8013370 <_strtol_l.constprop.0+0xec>
 80132c0:	2b10      	cmp	r3, #16
 80132c2:	d109      	bne.n	80132d8 <_strtol_l.constprop.0+0x54>
 80132c4:	2c30      	cmp	r4, #48	; 0x30
 80132c6:	d107      	bne.n	80132d8 <_strtol_l.constprop.0+0x54>
 80132c8:	7828      	ldrb	r0, [r5, #0]
 80132ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80132ce:	2858      	cmp	r0, #88	; 0x58
 80132d0:	d149      	bne.n	8013366 <_strtol_l.constprop.0+0xe2>
 80132d2:	2310      	movs	r3, #16
 80132d4:	786c      	ldrb	r4, [r5, #1]
 80132d6:	3502      	adds	r5, #2
 80132d8:	2700      	movs	r7, #0
 80132da:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80132de:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80132e2:	fbbe f9f3 	udiv	r9, lr, r3
 80132e6:	4638      	mov	r0, r7
 80132e8:	fb03 ea19 	mls	sl, r3, r9, lr
 80132ec:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80132f0:	f1bc 0f09 	cmp.w	ip, #9
 80132f4:	d814      	bhi.n	8013320 <_strtol_l.constprop.0+0x9c>
 80132f6:	4664      	mov	r4, ip
 80132f8:	42a3      	cmp	r3, r4
 80132fa:	dd22      	ble.n	8013342 <_strtol_l.constprop.0+0xbe>
 80132fc:	2f00      	cmp	r7, #0
 80132fe:	db1d      	blt.n	801333c <_strtol_l.constprop.0+0xb8>
 8013300:	4581      	cmp	r9, r0
 8013302:	d31b      	bcc.n	801333c <_strtol_l.constprop.0+0xb8>
 8013304:	d101      	bne.n	801330a <_strtol_l.constprop.0+0x86>
 8013306:	45a2      	cmp	sl, r4
 8013308:	db18      	blt.n	801333c <_strtol_l.constprop.0+0xb8>
 801330a:	2701      	movs	r7, #1
 801330c:	fb00 4003 	mla	r0, r0, r3, r4
 8013310:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013314:	e7ea      	b.n	80132ec <_strtol_l.constprop.0+0x68>
 8013316:	2c2b      	cmp	r4, #43	; 0x2b
 8013318:	bf04      	itt	eq
 801331a:	782c      	ldrbeq	r4, [r5, #0]
 801331c:	1c85      	addeq	r5, r0, #2
 801331e:	e7cd      	b.n	80132bc <_strtol_l.constprop.0+0x38>
 8013320:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013324:	f1bc 0f19 	cmp.w	ip, #25
 8013328:	d801      	bhi.n	801332e <_strtol_l.constprop.0+0xaa>
 801332a:	3c37      	subs	r4, #55	; 0x37
 801332c:	e7e4      	b.n	80132f8 <_strtol_l.constprop.0+0x74>
 801332e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013332:	f1bc 0f19 	cmp.w	ip, #25
 8013336:	d804      	bhi.n	8013342 <_strtol_l.constprop.0+0xbe>
 8013338:	3c57      	subs	r4, #87	; 0x57
 801333a:	e7dd      	b.n	80132f8 <_strtol_l.constprop.0+0x74>
 801333c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013340:	e7e6      	b.n	8013310 <_strtol_l.constprop.0+0x8c>
 8013342:	2f00      	cmp	r7, #0
 8013344:	da07      	bge.n	8013356 <_strtol_l.constprop.0+0xd2>
 8013346:	2322      	movs	r3, #34	; 0x22
 8013348:	4670      	mov	r0, lr
 801334a:	f8c8 3000 	str.w	r3, [r8]
 801334e:	2a00      	cmp	r2, #0
 8013350:	d0a4      	beq.n	801329c <_strtol_l.constprop.0+0x18>
 8013352:	1e69      	subs	r1, r5, #1
 8013354:	e005      	b.n	8013362 <_strtol_l.constprop.0+0xde>
 8013356:	b106      	cbz	r6, 801335a <_strtol_l.constprop.0+0xd6>
 8013358:	4240      	negs	r0, r0
 801335a:	2a00      	cmp	r2, #0
 801335c:	d09e      	beq.n	801329c <_strtol_l.constprop.0+0x18>
 801335e:	2f00      	cmp	r7, #0
 8013360:	d1f7      	bne.n	8013352 <_strtol_l.constprop.0+0xce>
 8013362:	6011      	str	r1, [r2, #0]
 8013364:	e79a      	b.n	801329c <_strtol_l.constprop.0+0x18>
 8013366:	2430      	movs	r4, #48	; 0x30
 8013368:	2b00      	cmp	r3, #0
 801336a:	d1b5      	bne.n	80132d8 <_strtol_l.constprop.0+0x54>
 801336c:	2308      	movs	r3, #8
 801336e:	e7b3      	b.n	80132d8 <_strtol_l.constprop.0+0x54>
 8013370:	2c30      	cmp	r4, #48	; 0x30
 8013372:	d0a9      	beq.n	80132c8 <_strtol_l.constprop.0+0x44>
 8013374:	230a      	movs	r3, #10
 8013376:	e7af      	b.n	80132d8 <_strtol_l.constprop.0+0x54>
 8013378:	080182f1 	.word	0x080182f1

0801337c <_strtol_r>:
 801337c:	f7ff bf82 	b.w	8013284 <_strtol_l.constprop.0>

08013380 <quorem>:
 8013380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013384:	6903      	ldr	r3, [r0, #16]
 8013386:	690c      	ldr	r4, [r1, #16]
 8013388:	4607      	mov	r7, r0
 801338a:	42a3      	cmp	r3, r4
 801338c:	f2c0 8082 	blt.w	8013494 <quorem+0x114>
 8013390:	3c01      	subs	r4, #1
 8013392:	f100 0514 	add.w	r5, r0, #20
 8013396:	f101 0814 	add.w	r8, r1, #20
 801339a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801339e:	9301      	str	r3, [sp, #4]
 80133a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80133a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80133a8:	3301      	adds	r3, #1
 80133aa:	429a      	cmp	r2, r3
 80133ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80133b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80133b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80133b8:	d331      	bcc.n	801341e <quorem+0x9e>
 80133ba:	f04f 0e00 	mov.w	lr, #0
 80133be:	4640      	mov	r0, r8
 80133c0:	46ac      	mov	ip, r5
 80133c2:	46f2      	mov	sl, lr
 80133c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80133c8:	b293      	uxth	r3, r2
 80133ca:	fb06 e303 	mla	r3, r6, r3, lr
 80133ce:	0c12      	lsrs	r2, r2, #16
 80133d0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80133d4:	b29b      	uxth	r3, r3
 80133d6:	fb06 e202 	mla	r2, r6, r2, lr
 80133da:	ebaa 0303 	sub.w	r3, sl, r3
 80133de:	f8dc a000 	ldr.w	sl, [ip]
 80133e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80133e6:	fa1f fa8a 	uxth.w	sl, sl
 80133ea:	4453      	add	r3, sl
 80133ec:	f8dc a000 	ldr.w	sl, [ip]
 80133f0:	b292      	uxth	r2, r2
 80133f2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80133f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80133fa:	b29b      	uxth	r3, r3
 80133fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013400:	4581      	cmp	r9, r0
 8013402:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013406:	f84c 3b04 	str.w	r3, [ip], #4
 801340a:	d2db      	bcs.n	80133c4 <quorem+0x44>
 801340c:	f855 300b 	ldr.w	r3, [r5, fp]
 8013410:	b92b      	cbnz	r3, 801341e <quorem+0x9e>
 8013412:	9b01      	ldr	r3, [sp, #4]
 8013414:	3b04      	subs	r3, #4
 8013416:	429d      	cmp	r5, r3
 8013418:	461a      	mov	r2, r3
 801341a:	d32f      	bcc.n	801347c <quorem+0xfc>
 801341c:	613c      	str	r4, [r7, #16]
 801341e:	4638      	mov	r0, r7
 8013420:	f001 fd7c 	bl	8014f1c <__mcmp>
 8013424:	2800      	cmp	r0, #0
 8013426:	db25      	blt.n	8013474 <quorem+0xf4>
 8013428:	4628      	mov	r0, r5
 801342a:	f04f 0c00 	mov.w	ip, #0
 801342e:	3601      	adds	r6, #1
 8013430:	f858 1b04 	ldr.w	r1, [r8], #4
 8013434:	f8d0 e000 	ldr.w	lr, [r0]
 8013438:	b28b      	uxth	r3, r1
 801343a:	ebac 0303 	sub.w	r3, ip, r3
 801343e:	fa1f f28e 	uxth.w	r2, lr
 8013442:	4413      	add	r3, r2
 8013444:	0c0a      	lsrs	r2, r1, #16
 8013446:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801344a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801344e:	b29b      	uxth	r3, r3
 8013450:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013454:	45c1      	cmp	r9, r8
 8013456:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801345a:	f840 3b04 	str.w	r3, [r0], #4
 801345e:	d2e7      	bcs.n	8013430 <quorem+0xb0>
 8013460:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013464:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013468:	b922      	cbnz	r2, 8013474 <quorem+0xf4>
 801346a:	3b04      	subs	r3, #4
 801346c:	429d      	cmp	r5, r3
 801346e:	461a      	mov	r2, r3
 8013470:	d30a      	bcc.n	8013488 <quorem+0x108>
 8013472:	613c      	str	r4, [r7, #16]
 8013474:	4630      	mov	r0, r6
 8013476:	b003      	add	sp, #12
 8013478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801347c:	6812      	ldr	r2, [r2, #0]
 801347e:	3b04      	subs	r3, #4
 8013480:	2a00      	cmp	r2, #0
 8013482:	d1cb      	bne.n	801341c <quorem+0x9c>
 8013484:	3c01      	subs	r4, #1
 8013486:	e7c6      	b.n	8013416 <quorem+0x96>
 8013488:	6812      	ldr	r2, [r2, #0]
 801348a:	3b04      	subs	r3, #4
 801348c:	2a00      	cmp	r2, #0
 801348e:	d1f0      	bne.n	8013472 <quorem+0xf2>
 8013490:	3c01      	subs	r4, #1
 8013492:	e7eb      	b.n	801346c <quorem+0xec>
 8013494:	2000      	movs	r0, #0
 8013496:	e7ee      	b.n	8013476 <quorem+0xf6>

08013498 <_dtoa_r>:
 8013498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801349c:	4616      	mov	r6, r2
 801349e:	461f      	mov	r7, r3
 80134a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80134a2:	b099      	sub	sp, #100	; 0x64
 80134a4:	4605      	mov	r5, r0
 80134a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80134aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80134ae:	b974      	cbnz	r4, 80134ce <_dtoa_r+0x36>
 80134b0:	2010      	movs	r0, #16
 80134b2:	f001 fa43 	bl	801493c <malloc>
 80134b6:	4602      	mov	r2, r0
 80134b8:	6268      	str	r0, [r5, #36]	; 0x24
 80134ba:	b920      	cbnz	r0, 80134c6 <_dtoa_r+0x2e>
 80134bc:	21ea      	movs	r1, #234	; 0xea
 80134be:	4ba8      	ldr	r3, [pc, #672]	; (8013760 <_dtoa_r+0x2c8>)
 80134c0:	48a8      	ldr	r0, [pc, #672]	; (8013764 <_dtoa_r+0x2cc>)
 80134c2:	f002 fbf9 	bl	8015cb8 <__assert_func>
 80134c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80134ca:	6004      	str	r4, [r0, #0]
 80134cc:	60c4      	str	r4, [r0, #12]
 80134ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80134d0:	6819      	ldr	r1, [r3, #0]
 80134d2:	b151      	cbz	r1, 80134ea <_dtoa_r+0x52>
 80134d4:	685a      	ldr	r2, [r3, #4]
 80134d6:	2301      	movs	r3, #1
 80134d8:	4093      	lsls	r3, r2
 80134da:	604a      	str	r2, [r1, #4]
 80134dc:	608b      	str	r3, [r1, #8]
 80134de:	4628      	mov	r0, r5
 80134e0:	f001 fa94 	bl	8014a0c <_Bfree>
 80134e4:	2200      	movs	r2, #0
 80134e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80134e8:	601a      	str	r2, [r3, #0]
 80134ea:	1e3b      	subs	r3, r7, #0
 80134ec:	bfaf      	iteee	ge
 80134ee:	2300      	movge	r3, #0
 80134f0:	2201      	movlt	r2, #1
 80134f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80134f6:	9305      	strlt	r3, [sp, #20]
 80134f8:	bfa8      	it	ge
 80134fa:	f8c8 3000 	strge.w	r3, [r8]
 80134fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8013502:	4b99      	ldr	r3, [pc, #612]	; (8013768 <_dtoa_r+0x2d0>)
 8013504:	bfb8      	it	lt
 8013506:	f8c8 2000 	strlt.w	r2, [r8]
 801350a:	ea33 0309 	bics.w	r3, r3, r9
 801350e:	d119      	bne.n	8013544 <_dtoa_r+0xac>
 8013510:	f242 730f 	movw	r3, #9999	; 0x270f
 8013514:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013516:	6013      	str	r3, [r2, #0]
 8013518:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801351c:	4333      	orrs	r3, r6
 801351e:	f000 857f 	beq.w	8014020 <_dtoa_r+0xb88>
 8013522:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013524:	b953      	cbnz	r3, 801353c <_dtoa_r+0xa4>
 8013526:	4b91      	ldr	r3, [pc, #580]	; (801376c <_dtoa_r+0x2d4>)
 8013528:	e022      	b.n	8013570 <_dtoa_r+0xd8>
 801352a:	4b91      	ldr	r3, [pc, #580]	; (8013770 <_dtoa_r+0x2d8>)
 801352c:	9303      	str	r3, [sp, #12]
 801352e:	3308      	adds	r3, #8
 8013530:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013532:	6013      	str	r3, [r2, #0]
 8013534:	9803      	ldr	r0, [sp, #12]
 8013536:	b019      	add	sp, #100	; 0x64
 8013538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801353c:	4b8b      	ldr	r3, [pc, #556]	; (801376c <_dtoa_r+0x2d4>)
 801353e:	9303      	str	r3, [sp, #12]
 8013540:	3303      	adds	r3, #3
 8013542:	e7f5      	b.n	8013530 <_dtoa_r+0x98>
 8013544:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013548:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801354c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013550:	2200      	movs	r2, #0
 8013552:	2300      	movs	r3, #0
 8013554:	f7ed fa6e 	bl	8000a34 <__aeabi_dcmpeq>
 8013558:	4680      	mov	r8, r0
 801355a:	b158      	cbz	r0, 8013574 <_dtoa_r+0xdc>
 801355c:	2301      	movs	r3, #1
 801355e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013560:	6013      	str	r3, [r2, #0]
 8013562:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013564:	2b00      	cmp	r3, #0
 8013566:	f000 8558 	beq.w	801401a <_dtoa_r+0xb82>
 801356a:	4882      	ldr	r0, [pc, #520]	; (8013774 <_dtoa_r+0x2dc>)
 801356c:	6018      	str	r0, [r3, #0]
 801356e:	1e43      	subs	r3, r0, #1
 8013570:	9303      	str	r3, [sp, #12]
 8013572:	e7df      	b.n	8013534 <_dtoa_r+0x9c>
 8013574:	ab16      	add	r3, sp, #88	; 0x58
 8013576:	9301      	str	r3, [sp, #4]
 8013578:	ab17      	add	r3, sp, #92	; 0x5c
 801357a:	9300      	str	r3, [sp, #0]
 801357c:	4628      	mov	r0, r5
 801357e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013582:	f001 fded 	bl	8015160 <__d2b>
 8013586:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801358a:	4683      	mov	fp, r0
 801358c:	2c00      	cmp	r4, #0
 801358e:	d07f      	beq.n	8013690 <_dtoa_r+0x1f8>
 8013590:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013596:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801359a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801359e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80135a2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80135a6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80135aa:	2200      	movs	r2, #0
 80135ac:	4b72      	ldr	r3, [pc, #456]	; (8013778 <_dtoa_r+0x2e0>)
 80135ae:	f7ec fe21 	bl	80001f4 <__aeabi_dsub>
 80135b2:	a365      	add	r3, pc, #404	; (adr r3, 8013748 <_dtoa_r+0x2b0>)
 80135b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135b8:	f7ec ffd4 	bl	8000564 <__aeabi_dmul>
 80135bc:	a364      	add	r3, pc, #400	; (adr r3, 8013750 <_dtoa_r+0x2b8>)
 80135be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c2:	f7ec fe19 	bl	80001f8 <__adddf3>
 80135c6:	4606      	mov	r6, r0
 80135c8:	4620      	mov	r0, r4
 80135ca:	460f      	mov	r7, r1
 80135cc:	f7ec ff60 	bl	8000490 <__aeabi_i2d>
 80135d0:	a361      	add	r3, pc, #388	; (adr r3, 8013758 <_dtoa_r+0x2c0>)
 80135d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135d6:	f7ec ffc5 	bl	8000564 <__aeabi_dmul>
 80135da:	4602      	mov	r2, r0
 80135dc:	460b      	mov	r3, r1
 80135de:	4630      	mov	r0, r6
 80135e0:	4639      	mov	r1, r7
 80135e2:	f7ec fe09 	bl	80001f8 <__adddf3>
 80135e6:	4606      	mov	r6, r0
 80135e8:	460f      	mov	r7, r1
 80135ea:	f7ed fa6b 	bl	8000ac4 <__aeabi_d2iz>
 80135ee:	2200      	movs	r2, #0
 80135f0:	4682      	mov	sl, r0
 80135f2:	2300      	movs	r3, #0
 80135f4:	4630      	mov	r0, r6
 80135f6:	4639      	mov	r1, r7
 80135f8:	f7ed fa26 	bl	8000a48 <__aeabi_dcmplt>
 80135fc:	b148      	cbz	r0, 8013612 <_dtoa_r+0x17a>
 80135fe:	4650      	mov	r0, sl
 8013600:	f7ec ff46 	bl	8000490 <__aeabi_i2d>
 8013604:	4632      	mov	r2, r6
 8013606:	463b      	mov	r3, r7
 8013608:	f7ed fa14 	bl	8000a34 <__aeabi_dcmpeq>
 801360c:	b908      	cbnz	r0, 8013612 <_dtoa_r+0x17a>
 801360e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013612:	f1ba 0f16 	cmp.w	sl, #22
 8013616:	d858      	bhi.n	80136ca <_dtoa_r+0x232>
 8013618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801361c:	4b57      	ldr	r3, [pc, #348]	; (801377c <_dtoa_r+0x2e4>)
 801361e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013626:	f7ed fa0f 	bl	8000a48 <__aeabi_dcmplt>
 801362a:	2800      	cmp	r0, #0
 801362c:	d04f      	beq.n	80136ce <_dtoa_r+0x236>
 801362e:	2300      	movs	r3, #0
 8013630:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013634:	930f      	str	r3, [sp, #60]	; 0x3c
 8013636:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013638:	1b1c      	subs	r4, r3, r4
 801363a:	1e63      	subs	r3, r4, #1
 801363c:	9309      	str	r3, [sp, #36]	; 0x24
 801363e:	bf49      	itett	mi
 8013640:	f1c4 0301 	rsbmi	r3, r4, #1
 8013644:	2300      	movpl	r3, #0
 8013646:	9306      	strmi	r3, [sp, #24]
 8013648:	2300      	movmi	r3, #0
 801364a:	bf54      	ite	pl
 801364c:	9306      	strpl	r3, [sp, #24]
 801364e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8013650:	f1ba 0f00 	cmp.w	sl, #0
 8013654:	db3d      	blt.n	80136d2 <_dtoa_r+0x23a>
 8013656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013658:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801365c:	4453      	add	r3, sl
 801365e:	9309      	str	r3, [sp, #36]	; 0x24
 8013660:	2300      	movs	r3, #0
 8013662:	930a      	str	r3, [sp, #40]	; 0x28
 8013664:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013666:	2b09      	cmp	r3, #9
 8013668:	f200 808c 	bhi.w	8013784 <_dtoa_r+0x2ec>
 801366c:	2b05      	cmp	r3, #5
 801366e:	bfc4      	itt	gt
 8013670:	3b04      	subgt	r3, #4
 8013672:	9322      	strgt	r3, [sp, #136]	; 0x88
 8013674:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013676:	bfc8      	it	gt
 8013678:	2400      	movgt	r4, #0
 801367a:	f1a3 0302 	sub.w	r3, r3, #2
 801367e:	bfd8      	it	le
 8013680:	2401      	movle	r4, #1
 8013682:	2b03      	cmp	r3, #3
 8013684:	f200 808a 	bhi.w	801379c <_dtoa_r+0x304>
 8013688:	e8df f003 	tbb	[pc, r3]
 801368c:	5b4d4f2d 	.word	0x5b4d4f2d
 8013690:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8013694:	441c      	add	r4, r3
 8013696:	f204 4332 	addw	r3, r4, #1074	; 0x432
 801369a:	2b20      	cmp	r3, #32
 801369c:	bfc3      	ittte	gt
 801369e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80136a2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80136a6:	fa09 f303 	lslgt.w	r3, r9, r3
 80136aa:	f1c3 0320 	rsble	r3, r3, #32
 80136ae:	bfc6      	itte	gt
 80136b0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80136b4:	4318      	orrgt	r0, r3
 80136b6:	fa06 f003 	lslle.w	r0, r6, r3
 80136ba:	f7ec fed9 	bl	8000470 <__aeabi_ui2d>
 80136be:	2301      	movs	r3, #1
 80136c0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80136c4:	3c01      	subs	r4, #1
 80136c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80136c8:	e76f      	b.n	80135aa <_dtoa_r+0x112>
 80136ca:	2301      	movs	r3, #1
 80136cc:	e7b2      	b.n	8013634 <_dtoa_r+0x19c>
 80136ce:	900f      	str	r0, [sp, #60]	; 0x3c
 80136d0:	e7b1      	b.n	8013636 <_dtoa_r+0x19e>
 80136d2:	9b06      	ldr	r3, [sp, #24]
 80136d4:	eba3 030a 	sub.w	r3, r3, sl
 80136d8:	9306      	str	r3, [sp, #24]
 80136da:	f1ca 0300 	rsb	r3, sl, #0
 80136de:	930a      	str	r3, [sp, #40]	; 0x28
 80136e0:	2300      	movs	r3, #0
 80136e2:	930e      	str	r3, [sp, #56]	; 0x38
 80136e4:	e7be      	b.n	8013664 <_dtoa_r+0x1cc>
 80136e6:	2300      	movs	r3, #0
 80136e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80136ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	dc58      	bgt.n	80137a2 <_dtoa_r+0x30a>
 80136f0:	f04f 0901 	mov.w	r9, #1
 80136f4:	464b      	mov	r3, r9
 80136f6:	f8cd 9020 	str.w	r9, [sp, #32]
 80136fa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80136fe:	2200      	movs	r2, #0
 8013700:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8013702:	6042      	str	r2, [r0, #4]
 8013704:	2204      	movs	r2, #4
 8013706:	f102 0614 	add.w	r6, r2, #20
 801370a:	429e      	cmp	r6, r3
 801370c:	6841      	ldr	r1, [r0, #4]
 801370e:	d94e      	bls.n	80137ae <_dtoa_r+0x316>
 8013710:	4628      	mov	r0, r5
 8013712:	f001 f93b 	bl	801498c <_Balloc>
 8013716:	9003      	str	r0, [sp, #12]
 8013718:	2800      	cmp	r0, #0
 801371a:	d14c      	bne.n	80137b6 <_dtoa_r+0x31e>
 801371c:	4602      	mov	r2, r0
 801371e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013722:	4b17      	ldr	r3, [pc, #92]	; (8013780 <_dtoa_r+0x2e8>)
 8013724:	e6cc      	b.n	80134c0 <_dtoa_r+0x28>
 8013726:	2301      	movs	r3, #1
 8013728:	e7de      	b.n	80136e8 <_dtoa_r+0x250>
 801372a:	2300      	movs	r3, #0
 801372c:	930b      	str	r3, [sp, #44]	; 0x2c
 801372e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013730:	eb0a 0903 	add.w	r9, sl, r3
 8013734:	f109 0301 	add.w	r3, r9, #1
 8013738:	2b01      	cmp	r3, #1
 801373a:	9308      	str	r3, [sp, #32]
 801373c:	bfb8      	it	lt
 801373e:	2301      	movlt	r3, #1
 8013740:	e7dd      	b.n	80136fe <_dtoa_r+0x266>
 8013742:	2301      	movs	r3, #1
 8013744:	e7f2      	b.n	801372c <_dtoa_r+0x294>
 8013746:	bf00      	nop
 8013748:	636f4361 	.word	0x636f4361
 801374c:	3fd287a7 	.word	0x3fd287a7
 8013750:	8b60c8b3 	.word	0x8b60c8b3
 8013754:	3fc68a28 	.word	0x3fc68a28
 8013758:	509f79fb 	.word	0x509f79fb
 801375c:	3fd34413 	.word	0x3fd34413
 8013760:	080183fe 	.word	0x080183fe
 8013764:	08018415 	.word	0x08018415
 8013768:	7ff00000 	.word	0x7ff00000
 801376c:	080183fa 	.word	0x080183fa
 8013770:	080183f1 	.word	0x080183f1
 8013774:	08018275 	.word	0x08018275
 8013778:	3ff80000 	.word	0x3ff80000
 801377c:	080185e8 	.word	0x080185e8
 8013780:	08018470 	.word	0x08018470
 8013784:	2401      	movs	r4, #1
 8013786:	2300      	movs	r3, #0
 8013788:	940b      	str	r4, [sp, #44]	; 0x2c
 801378a:	9322      	str	r3, [sp, #136]	; 0x88
 801378c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8013790:	2200      	movs	r2, #0
 8013792:	2312      	movs	r3, #18
 8013794:	f8cd 9020 	str.w	r9, [sp, #32]
 8013798:	9223      	str	r2, [sp, #140]	; 0x8c
 801379a:	e7b0      	b.n	80136fe <_dtoa_r+0x266>
 801379c:	2301      	movs	r3, #1
 801379e:	930b      	str	r3, [sp, #44]	; 0x2c
 80137a0:	e7f4      	b.n	801378c <_dtoa_r+0x2f4>
 80137a2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80137a6:	464b      	mov	r3, r9
 80137a8:	f8cd 9020 	str.w	r9, [sp, #32]
 80137ac:	e7a7      	b.n	80136fe <_dtoa_r+0x266>
 80137ae:	3101      	adds	r1, #1
 80137b0:	6041      	str	r1, [r0, #4]
 80137b2:	0052      	lsls	r2, r2, #1
 80137b4:	e7a7      	b.n	8013706 <_dtoa_r+0x26e>
 80137b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80137b8:	9a03      	ldr	r2, [sp, #12]
 80137ba:	601a      	str	r2, [r3, #0]
 80137bc:	9b08      	ldr	r3, [sp, #32]
 80137be:	2b0e      	cmp	r3, #14
 80137c0:	f200 80a8 	bhi.w	8013914 <_dtoa_r+0x47c>
 80137c4:	2c00      	cmp	r4, #0
 80137c6:	f000 80a5 	beq.w	8013914 <_dtoa_r+0x47c>
 80137ca:	f1ba 0f00 	cmp.w	sl, #0
 80137ce:	dd34      	ble.n	801383a <_dtoa_r+0x3a2>
 80137d0:	4a9a      	ldr	r2, [pc, #616]	; (8013a3c <_dtoa_r+0x5a4>)
 80137d2:	f00a 030f 	and.w	r3, sl, #15
 80137d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80137da:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80137de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80137e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80137e6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80137ea:	d016      	beq.n	801381a <_dtoa_r+0x382>
 80137ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80137f0:	4b93      	ldr	r3, [pc, #588]	; (8013a40 <_dtoa_r+0x5a8>)
 80137f2:	2703      	movs	r7, #3
 80137f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80137f8:	f7ec ffde 	bl	80007b8 <__aeabi_ddiv>
 80137fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013800:	f004 040f 	and.w	r4, r4, #15
 8013804:	4e8e      	ldr	r6, [pc, #568]	; (8013a40 <_dtoa_r+0x5a8>)
 8013806:	b954      	cbnz	r4, 801381e <_dtoa_r+0x386>
 8013808:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801380c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013810:	f7ec ffd2 	bl	80007b8 <__aeabi_ddiv>
 8013814:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013818:	e029      	b.n	801386e <_dtoa_r+0x3d6>
 801381a:	2702      	movs	r7, #2
 801381c:	e7f2      	b.n	8013804 <_dtoa_r+0x36c>
 801381e:	07e1      	lsls	r1, r4, #31
 8013820:	d508      	bpl.n	8013834 <_dtoa_r+0x39c>
 8013822:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013826:	e9d6 2300 	ldrd	r2, r3, [r6]
 801382a:	f7ec fe9b 	bl	8000564 <__aeabi_dmul>
 801382e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013832:	3701      	adds	r7, #1
 8013834:	1064      	asrs	r4, r4, #1
 8013836:	3608      	adds	r6, #8
 8013838:	e7e5      	b.n	8013806 <_dtoa_r+0x36e>
 801383a:	f000 80a5 	beq.w	8013988 <_dtoa_r+0x4f0>
 801383e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013842:	f1ca 0400 	rsb	r4, sl, #0
 8013846:	4b7d      	ldr	r3, [pc, #500]	; (8013a3c <_dtoa_r+0x5a4>)
 8013848:	f004 020f 	and.w	r2, r4, #15
 801384c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013854:	f7ec fe86 	bl	8000564 <__aeabi_dmul>
 8013858:	2702      	movs	r7, #2
 801385a:	2300      	movs	r3, #0
 801385c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013860:	4e77      	ldr	r6, [pc, #476]	; (8013a40 <_dtoa_r+0x5a8>)
 8013862:	1124      	asrs	r4, r4, #4
 8013864:	2c00      	cmp	r4, #0
 8013866:	f040 8084 	bne.w	8013972 <_dtoa_r+0x4da>
 801386a:	2b00      	cmp	r3, #0
 801386c:	d1d2      	bne.n	8013814 <_dtoa_r+0x37c>
 801386e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013870:	2b00      	cmp	r3, #0
 8013872:	f000 808b 	beq.w	801398c <_dtoa_r+0x4f4>
 8013876:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801387a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801387e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013882:	2200      	movs	r2, #0
 8013884:	4b6f      	ldr	r3, [pc, #444]	; (8013a44 <_dtoa_r+0x5ac>)
 8013886:	f7ed f8df 	bl	8000a48 <__aeabi_dcmplt>
 801388a:	2800      	cmp	r0, #0
 801388c:	d07e      	beq.n	801398c <_dtoa_r+0x4f4>
 801388e:	9b08      	ldr	r3, [sp, #32]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d07b      	beq.n	801398c <_dtoa_r+0x4f4>
 8013894:	f1b9 0f00 	cmp.w	r9, #0
 8013898:	dd38      	ble.n	801390c <_dtoa_r+0x474>
 801389a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801389e:	2200      	movs	r2, #0
 80138a0:	4b69      	ldr	r3, [pc, #420]	; (8013a48 <_dtoa_r+0x5b0>)
 80138a2:	f7ec fe5f 	bl	8000564 <__aeabi_dmul>
 80138a6:	464c      	mov	r4, r9
 80138a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80138ac:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80138b0:	3701      	adds	r7, #1
 80138b2:	4638      	mov	r0, r7
 80138b4:	f7ec fdec 	bl	8000490 <__aeabi_i2d>
 80138b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138bc:	f7ec fe52 	bl	8000564 <__aeabi_dmul>
 80138c0:	2200      	movs	r2, #0
 80138c2:	4b62      	ldr	r3, [pc, #392]	; (8013a4c <_dtoa_r+0x5b4>)
 80138c4:	f7ec fc98 	bl	80001f8 <__adddf3>
 80138c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80138cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80138d0:	9611      	str	r6, [sp, #68]	; 0x44
 80138d2:	2c00      	cmp	r4, #0
 80138d4:	d15d      	bne.n	8013992 <_dtoa_r+0x4fa>
 80138d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80138da:	2200      	movs	r2, #0
 80138dc:	4b5c      	ldr	r3, [pc, #368]	; (8013a50 <_dtoa_r+0x5b8>)
 80138de:	f7ec fc89 	bl	80001f4 <__aeabi_dsub>
 80138e2:	4602      	mov	r2, r0
 80138e4:	460b      	mov	r3, r1
 80138e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80138ea:	4633      	mov	r3, r6
 80138ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80138ee:	f7ed f8c9 	bl	8000a84 <__aeabi_dcmpgt>
 80138f2:	2800      	cmp	r0, #0
 80138f4:	f040 829c 	bne.w	8013e30 <_dtoa_r+0x998>
 80138f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80138fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80138fe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013902:	f7ed f8a1 	bl	8000a48 <__aeabi_dcmplt>
 8013906:	2800      	cmp	r0, #0
 8013908:	f040 8290 	bne.w	8013e2c <_dtoa_r+0x994>
 801390c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8013910:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8013914:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013916:	2b00      	cmp	r3, #0
 8013918:	f2c0 8152 	blt.w	8013bc0 <_dtoa_r+0x728>
 801391c:	f1ba 0f0e 	cmp.w	sl, #14
 8013920:	f300 814e 	bgt.w	8013bc0 <_dtoa_r+0x728>
 8013924:	4b45      	ldr	r3, [pc, #276]	; (8013a3c <_dtoa_r+0x5a4>)
 8013926:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801392a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801392e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8013932:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013934:	2b00      	cmp	r3, #0
 8013936:	f280 80db 	bge.w	8013af0 <_dtoa_r+0x658>
 801393a:	9b08      	ldr	r3, [sp, #32]
 801393c:	2b00      	cmp	r3, #0
 801393e:	f300 80d7 	bgt.w	8013af0 <_dtoa_r+0x658>
 8013942:	f040 8272 	bne.w	8013e2a <_dtoa_r+0x992>
 8013946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801394a:	2200      	movs	r2, #0
 801394c:	4b40      	ldr	r3, [pc, #256]	; (8013a50 <_dtoa_r+0x5b8>)
 801394e:	f7ec fe09 	bl	8000564 <__aeabi_dmul>
 8013952:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013956:	f7ed f88b 	bl	8000a70 <__aeabi_dcmpge>
 801395a:	9c08      	ldr	r4, [sp, #32]
 801395c:	4626      	mov	r6, r4
 801395e:	2800      	cmp	r0, #0
 8013960:	f040 8248 	bne.w	8013df4 <_dtoa_r+0x95c>
 8013964:	2331      	movs	r3, #49	; 0x31
 8013966:	9f03      	ldr	r7, [sp, #12]
 8013968:	f10a 0a01 	add.w	sl, sl, #1
 801396c:	f807 3b01 	strb.w	r3, [r7], #1
 8013970:	e244      	b.n	8013dfc <_dtoa_r+0x964>
 8013972:	07e2      	lsls	r2, r4, #31
 8013974:	d505      	bpl.n	8013982 <_dtoa_r+0x4ea>
 8013976:	e9d6 2300 	ldrd	r2, r3, [r6]
 801397a:	f7ec fdf3 	bl	8000564 <__aeabi_dmul>
 801397e:	2301      	movs	r3, #1
 8013980:	3701      	adds	r7, #1
 8013982:	1064      	asrs	r4, r4, #1
 8013984:	3608      	adds	r6, #8
 8013986:	e76d      	b.n	8013864 <_dtoa_r+0x3cc>
 8013988:	2702      	movs	r7, #2
 801398a:	e770      	b.n	801386e <_dtoa_r+0x3d6>
 801398c:	46d0      	mov	r8, sl
 801398e:	9c08      	ldr	r4, [sp, #32]
 8013990:	e78f      	b.n	80138b2 <_dtoa_r+0x41a>
 8013992:	9903      	ldr	r1, [sp, #12]
 8013994:	4b29      	ldr	r3, [pc, #164]	; (8013a3c <_dtoa_r+0x5a4>)
 8013996:	4421      	add	r1, r4
 8013998:	9112      	str	r1, [sp, #72]	; 0x48
 801399a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801399c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80139a0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80139a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80139a8:	2900      	cmp	r1, #0
 80139aa:	d055      	beq.n	8013a58 <_dtoa_r+0x5c0>
 80139ac:	2000      	movs	r0, #0
 80139ae:	4929      	ldr	r1, [pc, #164]	; (8013a54 <_dtoa_r+0x5bc>)
 80139b0:	f7ec ff02 	bl	80007b8 <__aeabi_ddiv>
 80139b4:	463b      	mov	r3, r7
 80139b6:	4632      	mov	r2, r6
 80139b8:	f7ec fc1c 	bl	80001f4 <__aeabi_dsub>
 80139bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80139c0:	9f03      	ldr	r7, [sp, #12]
 80139c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80139c6:	f7ed f87d 	bl	8000ac4 <__aeabi_d2iz>
 80139ca:	4604      	mov	r4, r0
 80139cc:	f7ec fd60 	bl	8000490 <__aeabi_i2d>
 80139d0:	4602      	mov	r2, r0
 80139d2:	460b      	mov	r3, r1
 80139d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80139d8:	f7ec fc0c 	bl	80001f4 <__aeabi_dsub>
 80139dc:	4602      	mov	r2, r0
 80139de:	460b      	mov	r3, r1
 80139e0:	3430      	adds	r4, #48	; 0x30
 80139e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80139e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80139ea:	f807 4b01 	strb.w	r4, [r7], #1
 80139ee:	f7ed f82b 	bl	8000a48 <__aeabi_dcmplt>
 80139f2:	2800      	cmp	r0, #0
 80139f4:	d174      	bne.n	8013ae0 <_dtoa_r+0x648>
 80139f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80139fa:	2000      	movs	r0, #0
 80139fc:	4911      	ldr	r1, [pc, #68]	; (8013a44 <_dtoa_r+0x5ac>)
 80139fe:	f7ec fbf9 	bl	80001f4 <__aeabi_dsub>
 8013a02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013a06:	f7ed f81f 	bl	8000a48 <__aeabi_dcmplt>
 8013a0a:	2800      	cmp	r0, #0
 8013a0c:	f040 80b7 	bne.w	8013b7e <_dtoa_r+0x6e6>
 8013a10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a12:	429f      	cmp	r7, r3
 8013a14:	f43f af7a 	beq.w	801390c <_dtoa_r+0x474>
 8013a18:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	4b0a      	ldr	r3, [pc, #40]	; (8013a48 <_dtoa_r+0x5b0>)
 8013a20:	f7ec fda0 	bl	8000564 <__aeabi_dmul>
 8013a24:	2200      	movs	r2, #0
 8013a26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013a2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a2e:	4b06      	ldr	r3, [pc, #24]	; (8013a48 <_dtoa_r+0x5b0>)
 8013a30:	f7ec fd98 	bl	8000564 <__aeabi_dmul>
 8013a34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a38:	e7c3      	b.n	80139c2 <_dtoa_r+0x52a>
 8013a3a:	bf00      	nop
 8013a3c:	080185e8 	.word	0x080185e8
 8013a40:	080185c0 	.word	0x080185c0
 8013a44:	3ff00000 	.word	0x3ff00000
 8013a48:	40240000 	.word	0x40240000
 8013a4c:	401c0000 	.word	0x401c0000
 8013a50:	40140000 	.word	0x40140000
 8013a54:	3fe00000 	.word	0x3fe00000
 8013a58:	4630      	mov	r0, r6
 8013a5a:	4639      	mov	r1, r7
 8013a5c:	f7ec fd82 	bl	8000564 <__aeabi_dmul>
 8013a60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a62:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013a66:	9c03      	ldr	r4, [sp, #12]
 8013a68:	9314      	str	r3, [sp, #80]	; 0x50
 8013a6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a6e:	f7ed f829 	bl	8000ac4 <__aeabi_d2iz>
 8013a72:	9015      	str	r0, [sp, #84]	; 0x54
 8013a74:	f7ec fd0c 	bl	8000490 <__aeabi_i2d>
 8013a78:	4602      	mov	r2, r0
 8013a7a:	460b      	mov	r3, r1
 8013a7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a80:	f7ec fbb8 	bl	80001f4 <__aeabi_dsub>
 8013a84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a86:	4606      	mov	r6, r0
 8013a88:	3330      	adds	r3, #48	; 0x30
 8013a8a:	f804 3b01 	strb.w	r3, [r4], #1
 8013a8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a90:	460f      	mov	r7, r1
 8013a92:	429c      	cmp	r4, r3
 8013a94:	f04f 0200 	mov.w	r2, #0
 8013a98:	d124      	bne.n	8013ae4 <_dtoa_r+0x64c>
 8013a9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013a9e:	4bb0      	ldr	r3, [pc, #704]	; (8013d60 <_dtoa_r+0x8c8>)
 8013aa0:	f7ec fbaa 	bl	80001f8 <__adddf3>
 8013aa4:	4602      	mov	r2, r0
 8013aa6:	460b      	mov	r3, r1
 8013aa8:	4630      	mov	r0, r6
 8013aaa:	4639      	mov	r1, r7
 8013aac:	f7ec ffea 	bl	8000a84 <__aeabi_dcmpgt>
 8013ab0:	2800      	cmp	r0, #0
 8013ab2:	d163      	bne.n	8013b7c <_dtoa_r+0x6e4>
 8013ab4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013ab8:	2000      	movs	r0, #0
 8013aba:	49a9      	ldr	r1, [pc, #676]	; (8013d60 <_dtoa_r+0x8c8>)
 8013abc:	f7ec fb9a 	bl	80001f4 <__aeabi_dsub>
 8013ac0:	4602      	mov	r2, r0
 8013ac2:	460b      	mov	r3, r1
 8013ac4:	4630      	mov	r0, r6
 8013ac6:	4639      	mov	r1, r7
 8013ac8:	f7ec ffbe 	bl	8000a48 <__aeabi_dcmplt>
 8013acc:	2800      	cmp	r0, #0
 8013ace:	f43f af1d 	beq.w	801390c <_dtoa_r+0x474>
 8013ad2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8013ad4:	1e7b      	subs	r3, r7, #1
 8013ad6:	9314      	str	r3, [sp, #80]	; 0x50
 8013ad8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8013adc:	2b30      	cmp	r3, #48	; 0x30
 8013ade:	d0f8      	beq.n	8013ad2 <_dtoa_r+0x63a>
 8013ae0:	46c2      	mov	sl, r8
 8013ae2:	e03b      	b.n	8013b5c <_dtoa_r+0x6c4>
 8013ae4:	4b9f      	ldr	r3, [pc, #636]	; (8013d64 <_dtoa_r+0x8cc>)
 8013ae6:	f7ec fd3d 	bl	8000564 <__aeabi_dmul>
 8013aea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013aee:	e7bc      	b.n	8013a6a <_dtoa_r+0x5d2>
 8013af0:	9f03      	ldr	r7, [sp, #12]
 8013af2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8013af6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013afa:	4640      	mov	r0, r8
 8013afc:	4649      	mov	r1, r9
 8013afe:	f7ec fe5b 	bl	80007b8 <__aeabi_ddiv>
 8013b02:	f7ec ffdf 	bl	8000ac4 <__aeabi_d2iz>
 8013b06:	4604      	mov	r4, r0
 8013b08:	f7ec fcc2 	bl	8000490 <__aeabi_i2d>
 8013b0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b10:	f7ec fd28 	bl	8000564 <__aeabi_dmul>
 8013b14:	4602      	mov	r2, r0
 8013b16:	460b      	mov	r3, r1
 8013b18:	4640      	mov	r0, r8
 8013b1a:	4649      	mov	r1, r9
 8013b1c:	f7ec fb6a 	bl	80001f4 <__aeabi_dsub>
 8013b20:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8013b24:	f807 6b01 	strb.w	r6, [r7], #1
 8013b28:	9e03      	ldr	r6, [sp, #12]
 8013b2a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8013b2e:	1bbe      	subs	r6, r7, r6
 8013b30:	45b4      	cmp	ip, r6
 8013b32:	4602      	mov	r2, r0
 8013b34:	460b      	mov	r3, r1
 8013b36:	d136      	bne.n	8013ba6 <_dtoa_r+0x70e>
 8013b38:	f7ec fb5e 	bl	80001f8 <__adddf3>
 8013b3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b40:	4680      	mov	r8, r0
 8013b42:	4689      	mov	r9, r1
 8013b44:	f7ec ff9e 	bl	8000a84 <__aeabi_dcmpgt>
 8013b48:	bb58      	cbnz	r0, 8013ba2 <_dtoa_r+0x70a>
 8013b4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b4e:	4640      	mov	r0, r8
 8013b50:	4649      	mov	r1, r9
 8013b52:	f7ec ff6f 	bl	8000a34 <__aeabi_dcmpeq>
 8013b56:	b108      	cbz	r0, 8013b5c <_dtoa_r+0x6c4>
 8013b58:	07e1      	lsls	r1, r4, #31
 8013b5a:	d422      	bmi.n	8013ba2 <_dtoa_r+0x70a>
 8013b5c:	4628      	mov	r0, r5
 8013b5e:	4659      	mov	r1, fp
 8013b60:	f000 ff54 	bl	8014a0c <_Bfree>
 8013b64:	2300      	movs	r3, #0
 8013b66:	703b      	strb	r3, [r7, #0]
 8013b68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013b6a:	f10a 0001 	add.w	r0, sl, #1
 8013b6e:	6018      	str	r0, [r3, #0]
 8013b70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	f43f acde 	beq.w	8013534 <_dtoa_r+0x9c>
 8013b78:	601f      	str	r7, [r3, #0]
 8013b7a:	e4db      	b.n	8013534 <_dtoa_r+0x9c>
 8013b7c:	4627      	mov	r7, r4
 8013b7e:	463b      	mov	r3, r7
 8013b80:	461f      	mov	r7, r3
 8013b82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013b86:	2a39      	cmp	r2, #57	; 0x39
 8013b88:	d107      	bne.n	8013b9a <_dtoa_r+0x702>
 8013b8a:	9a03      	ldr	r2, [sp, #12]
 8013b8c:	429a      	cmp	r2, r3
 8013b8e:	d1f7      	bne.n	8013b80 <_dtoa_r+0x6e8>
 8013b90:	2230      	movs	r2, #48	; 0x30
 8013b92:	9903      	ldr	r1, [sp, #12]
 8013b94:	f108 0801 	add.w	r8, r8, #1
 8013b98:	700a      	strb	r2, [r1, #0]
 8013b9a:	781a      	ldrb	r2, [r3, #0]
 8013b9c:	3201      	adds	r2, #1
 8013b9e:	701a      	strb	r2, [r3, #0]
 8013ba0:	e79e      	b.n	8013ae0 <_dtoa_r+0x648>
 8013ba2:	46d0      	mov	r8, sl
 8013ba4:	e7eb      	b.n	8013b7e <_dtoa_r+0x6e6>
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	4b6e      	ldr	r3, [pc, #440]	; (8013d64 <_dtoa_r+0x8cc>)
 8013baa:	f7ec fcdb 	bl	8000564 <__aeabi_dmul>
 8013bae:	2200      	movs	r2, #0
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	4680      	mov	r8, r0
 8013bb4:	4689      	mov	r9, r1
 8013bb6:	f7ec ff3d 	bl	8000a34 <__aeabi_dcmpeq>
 8013bba:	2800      	cmp	r0, #0
 8013bbc:	d09b      	beq.n	8013af6 <_dtoa_r+0x65e>
 8013bbe:	e7cd      	b.n	8013b5c <_dtoa_r+0x6c4>
 8013bc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013bc2:	2a00      	cmp	r2, #0
 8013bc4:	f000 80d0 	beq.w	8013d68 <_dtoa_r+0x8d0>
 8013bc8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013bca:	2a01      	cmp	r2, #1
 8013bcc:	f300 80ae 	bgt.w	8013d2c <_dtoa_r+0x894>
 8013bd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013bd2:	2a00      	cmp	r2, #0
 8013bd4:	f000 80a6 	beq.w	8013d24 <_dtoa_r+0x88c>
 8013bd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013bdc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013bde:	9f06      	ldr	r7, [sp, #24]
 8013be0:	9a06      	ldr	r2, [sp, #24]
 8013be2:	2101      	movs	r1, #1
 8013be4:	441a      	add	r2, r3
 8013be6:	9206      	str	r2, [sp, #24]
 8013be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013bea:	4628      	mov	r0, r5
 8013bec:	441a      	add	r2, r3
 8013bee:	9209      	str	r2, [sp, #36]	; 0x24
 8013bf0:	f001 f80c 	bl	8014c0c <__i2b>
 8013bf4:	4606      	mov	r6, r0
 8013bf6:	2f00      	cmp	r7, #0
 8013bf8:	dd0c      	ble.n	8013c14 <_dtoa_r+0x77c>
 8013bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	dd09      	ble.n	8013c14 <_dtoa_r+0x77c>
 8013c00:	42bb      	cmp	r3, r7
 8013c02:	bfa8      	it	ge
 8013c04:	463b      	movge	r3, r7
 8013c06:	9a06      	ldr	r2, [sp, #24]
 8013c08:	1aff      	subs	r7, r7, r3
 8013c0a:	1ad2      	subs	r2, r2, r3
 8013c0c:	9206      	str	r2, [sp, #24]
 8013c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c10:	1ad3      	subs	r3, r2, r3
 8013c12:	9309      	str	r3, [sp, #36]	; 0x24
 8013c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c16:	b1f3      	cbz	r3, 8013c56 <_dtoa_r+0x7be>
 8013c18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	f000 80a8 	beq.w	8013d70 <_dtoa_r+0x8d8>
 8013c20:	2c00      	cmp	r4, #0
 8013c22:	dd10      	ble.n	8013c46 <_dtoa_r+0x7ae>
 8013c24:	4631      	mov	r1, r6
 8013c26:	4622      	mov	r2, r4
 8013c28:	4628      	mov	r0, r5
 8013c2a:	f001 f8ad 	bl	8014d88 <__pow5mult>
 8013c2e:	465a      	mov	r2, fp
 8013c30:	4601      	mov	r1, r0
 8013c32:	4606      	mov	r6, r0
 8013c34:	4628      	mov	r0, r5
 8013c36:	f000 ffff 	bl	8014c38 <__multiply>
 8013c3a:	4680      	mov	r8, r0
 8013c3c:	4659      	mov	r1, fp
 8013c3e:	4628      	mov	r0, r5
 8013c40:	f000 fee4 	bl	8014a0c <_Bfree>
 8013c44:	46c3      	mov	fp, r8
 8013c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c48:	1b1a      	subs	r2, r3, r4
 8013c4a:	d004      	beq.n	8013c56 <_dtoa_r+0x7be>
 8013c4c:	4659      	mov	r1, fp
 8013c4e:	4628      	mov	r0, r5
 8013c50:	f001 f89a 	bl	8014d88 <__pow5mult>
 8013c54:	4683      	mov	fp, r0
 8013c56:	2101      	movs	r1, #1
 8013c58:	4628      	mov	r0, r5
 8013c5a:	f000 ffd7 	bl	8014c0c <__i2b>
 8013c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c60:	4604      	mov	r4, r0
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	f340 8086 	ble.w	8013d74 <_dtoa_r+0x8dc>
 8013c68:	461a      	mov	r2, r3
 8013c6a:	4601      	mov	r1, r0
 8013c6c:	4628      	mov	r0, r5
 8013c6e:	f001 f88b 	bl	8014d88 <__pow5mult>
 8013c72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013c74:	4604      	mov	r4, r0
 8013c76:	2b01      	cmp	r3, #1
 8013c78:	dd7f      	ble.n	8013d7a <_dtoa_r+0x8e2>
 8013c7a:	f04f 0800 	mov.w	r8, #0
 8013c7e:	6923      	ldr	r3, [r4, #16]
 8013c80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013c84:	6918      	ldr	r0, [r3, #16]
 8013c86:	f000 ff73 	bl	8014b70 <__hi0bits>
 8013c8a:	f1c0 0020 	rsb	r0, r0, #32
 8013c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c90:	4418      	add	r0, r3
 8013c92:	f010 001f 	ands.w	r0, r0, #31
 8013c96:	f000 8092 	beq.w	8013dbe <_dtoa_r+0x926>
 8013c9a:	f1c0 0320 	rsb	r3, r0, #32
 8013c9e:	2b04      	cmp	r3, #4
 8013ca0:	f340 808a 	ble.w	8013db8 <_dtoa_r+0x920>
 8013ca4:	f1c0 001c 	rsb	r0, r0, #28
 8013ca8:	9b06      	ldr	r3, [sp, #24]
 8013caa:	4407      	add	r7, r0
 8013cac:	4403      	add	r3, r0
 8013cae:	9306      	str	r3, [sp, #24]
 8013cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cb2:	4403      	add	r3, r0
 8013cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8013cb6:	9b06      	ldr	r3, [sp, #24]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	dd05      	ble.n	8013cc8 <_dtoa_r+0x830>
 8013cbc:	4659      	mov	r1, fp
 8013cbe:	461a      	mov	r2, r3
 8013cc0:	4628      	mov	r0, r5
 8013cc2:	f001 f8bb 	bl	8014e3c <__lshift>
 8013cc6:	4683      	mov	fp, r0
 8013cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	dd05      	ble.n	8013cda <_dtoa_r+0x842>
 8013cce:	4621      	mov	r1, r4
 8013cd0:	461a      	mov	r2, r3
 8013cd2:	4628      	mov	r0, r5
 8013cd4:	f001 f8b2 	bl	8014e3c <__lshift>
 8013cd8:	4604      	mov	r4, r0
 8013cda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d070      	beq.n	8013dc2 <_dtoa_r+0x92a>
 8013ce0:	4621      	mov	r1, r4
 8013ce2:	4658      	mov	r0, fp
 8013ce4:	f001 f91a 	bl	8014f1c <__mcmp>
 8013ce8:	2800      	cmp	r0, #0
 8013cea:	da6a      	bge.n	8013dc2 <_dtoa_r+0x92a>
 8013cec:	2300      	movs	r3, #0
 8013cee:	4659      	mov	r1, fp
 8013cf0:	220a      	movs	r2, #10
 8013cf2:	4628      	mov	r0, r5
 8013cf4:	f000 feac 	bl	8014a50 <__multadd>
 8013cf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013cfa:	4683      	mov	fp, r0
 8013cfc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	f000 8194 	beq.w	801402e <_dtoa_r+0xb96>
 8013d06:	4631      	mov	r1, r6
 8013d08:	2300      	movs	r3, #0
 8013d0a:	220a      	movs	r2, #10
 8013d0c:	4628      	mov	r0, r5
 8013d0e:	f000 fe9f 	bl	8014a50 <__multadd>
 8013d12:	f1b9 0f00 	cmp.w	r9, #0
 8013d16:	4606      	mov	r6, r0
 8013d18:	f300 8093 	bgt.w	8013e42 <_dtoa_r+0x9aa>
 8013d1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013d1e:	2b02      	cmp	r3, #2
 8013d20:	dc57      	bgt.n	8013dd2 <_dtoa_r+0x93a>
 8013d22:	e08e      	b.n	8013e42 <_dtoa_r+0x9aa>
 8013d24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013d26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013d2a:	e757      	b.n	8013bdc <_dtoa_r+0x744>
 8013d2c:	9b08      	ldr	r3, [sp, #32]
 8013d2e:	1e5c      	subs	r4, r3, #1
 8013d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d32:	42a3      	cmp	r3, r4
 8013d34:	bfb7      	itett	lt
 8013d36:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013d38:	1b1c      	subge	r4, r3, r4
 8013d3a:	1ae2      	sublt	r2, r4, r3
 8013d3c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013d3e:	bfbe      	ittt	lt
 8013d40:	940a      	strlt	r4, [sp, #40]	; 0x28
 8013d42:	189b      	addlt	r3, r3, r2
 8013d44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013d46:	9b08      	ldr	r3, [sp, #32]
 8013d48:	bfb8      	it	lt
 8013d4a:	2400      	movlt	r4, #0
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	bfbb      	ittet	lt
 8013d50:	9b06      	ldrlt	r3, [sp, #24]
 8013d52:	9a08      	ldrlt	r2, [sp, #32]
 8013d54:	9f06      	ldrge	r7, [sp, #24]
 8013d56:	1a9f      	sublt	r7, r3, r2
 8013d58:	bfac      	ite	ge
 8013d5a:	9b08      	ldrge	r3, [sp, #32]
 8013d5c:	2300      	movlt	r3, #0
 8013d5e:	e73f      	b.n	8013be0 <_dtoa_r+0x748>
 8013d60:	3fe00000 	.word	0x3fe00000
 8013d64:	40240000 	.word	0x40240000
 8013d68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013d6a:	9f06      	ldr	r7, [sp, #24]
 8013d6c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013d6e:	e742      	b.n	8013bf6 <_dtoa_r+0x75e>
 8013d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d72:	e76b      	b.n	8013c4c <_dtoa_r+0x7b4>
 8013d74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013d76:	2b01      	cmp	r3, #1
 8013d78:	dc19      	bgt.n	8013dae <_dtoa_r+0x916>
 8013d7a:	9b04      	ldr	r3, [sp, #16]
 8013d7c:	b9bb      	cbnz	r3, 8013dae <_dtoa_r+0x916>
 8013d7e:	9b05      	ldr	r3, [sp, #20]
 8013d80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013d84:	b99b      	cbnz	r3, 8013dae <_dtoa_r+0x916>
 8013d86:	9b05      	ldr	r3, [sp, #20]
 8013d88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013d8c:	0d1b      	lsrs	r3, r3, #20
 8013d8e:	051b      	lsls	r3, r3, #20
 8013d90:	b183      	cbz	r3, 8013db4 <_dtoa_r+0x91c>
 8013d92:	f04f 0801 	mov.w	r8, #1
 8013d96:	9b06      	ldr	r3, [sp, #24]
 8013d98:	3301      	adds	r3, #1
 8013d9a:	9306      	str	r3, [sp, #24]
 8013d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d9e:	3301      	adds	r3, #1
 8013da0:	9309      	str	r3, [sp, #36]	; 0x24
 8013da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	f47f af6a 	bne.w	8013c7e <_dtoa_r+0x7e6>
 8013daa:	2001      	movs	r0, #1
 8013dac:	e76f      	b.n	8013c8e <_dtoa_r+0x7f6>
 8013dae:	f04f 0800 	mov.w	r8, #0
 8013db2:	e7f6      	b.n	8013da2 <_dtoa_r+0x90a>
 8013db4:	4698      	mov	r8, r3
 8013db6:	e7f4      	b.n	8013da2 <_dtoa_r+0x90a>
 8013db8:	f43f af7d 	beq.w	8013cb6 <_dtoa_r+0x81e>
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	301c      	adds	r0, #28
 8013dc0:	e772      	b.n	8013ca8 <_dtoa_r+0x810>
 8013dc2:	9b08      	ldr	r3, [sp, #32]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	dc36      	bgt.n	8013e36 <_dtoa_r+0x99e>
 8013dc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013dca:	2b02      	cmp	r3, #2
 8013dcc:	dd33      	ble.n	8013e36 <_dtoa_r+0x99e>
 8013dce:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013dd2:	f1b9 0f00 	cmp.w	r9, #0
 8013dd6:	d10d      	bne.n	8013df4 <_dtoa_r+0x95c>
 8013dd8:	4621      	mov	r1, r4
 8013dda:	464b      	mov	r3, r9
 8013ddc:	2205      	movs	r2, #5
 8013dde:	4628      	mov	r0, r5
 8013de0:	f000 fe36 	bl	8014a50 <__multadd>
 8013de4:	4601      	mov	r1, r0
 8013de6:	4604      	mov	r4, r0
 8013de8:	4658      	mov	r0, fp
 8013dea:	f001 f897 	bl	8014f1c <__mcmp>
 8013dee:	2800      	cmp	r0, #0
 8013df0:	f73f adb8 	bgt.w	8013964 <_dtoa_r+0x4cc>
 8013df4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013df6:	9f03      	ldr	r7, [sp, #12]
 8013df8:	ea6f 0a03 	mvn.w	sl, r3
 8013dfc:	f04f 0800 	mov.w	r8, #0
 8013e00:	4621      	mov	r1, r4
 8013e02:	4628      	mov	r0, r5
 8013e04:	f000 fe02 	bl	8014a0c <_Bfree>
 8013e08:	2e00      	cmp	r6, #0
 8013e0a:	f43f aea7 	beq.w	8013b5c <_dtoa_r+0x6c4>
 8013e0e:	f1b8 0f00 	cmp.w	r8, #0
 8013e12:	d005      	beq.n	8013e20 <_dtoa_r+0x988>
 8013e14:	45b0      	cmp	r8, r6
 8013e16:	d003      	beq.n	8013e20 <_dtoa_r+0x988>
 8013e18:	4641      	mov	r1, r8
 8013e1a:	4628      	mov	r0, r5
 8013e1c:	f000 fdf6 	bl	8014a0c <_Bfree>
 8013e20:	4631      	mov	r1, r6
 8013e22:	4628      	mov	r0, r5
 8013e24:	f000 fdf2 	bl	8014a0c <_Bfree>
 8013e28:	e698      	b.n	8013b5c <_dtoa_r+0x6c4>
 8013e2a:	2400      	movs	r4, #0
 8013e2c:	4626      	mov	r6, r4
 8013e2e:	e7e1      	b.n	8013df4 <_dtoa_r+0x95c>
 8013e30:	46c2      	mov	sl, r8
 8013e32:	4626      	mov	r6, r4
 8013e34:	e596      	b.n	8013964 <_dtoa_r+0x4cc>
 8013e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	f000 80fd 	beq.w	801403c <_dtoa_r+0xba4>
 8013e42:	2f00      	cmp	r7, #0
 8013e44:	dd05      	ble.n	8013e52 <_dtoa_r+0x9ba>
 8013e46:	4631      	mov	r1, r6
 8013e48:	463a      	mov	r2, r7
 8013e4a:	4628      	mov	r0, r5
 8013e4c:	f000 fff6 	bl	8014e3c <__lshift>
 8013e50:	4606      	mov	r6, r0
 8013e52:	f1b8 0f00 	cmp.w	r8, #0
 8013e56:	d05c      	beq.n	8013f12 <_dtoa_r+0xa7a>
 8013e58:	4628      	mov	r0, r5
 8013e5a:	6871      	ldr	r1, [r6, #4]
 8013e5c:	f000 fd96 	bl	801498c <_Balloc>
 8013e60:	4607      	mov	r7, r0
 8013e62:	b928      	cbnz	r0, 8013e70 <_dtoa_r+0x9d8>
 8013e64:	4602      	mov	r2, r0
 8013e66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013e6a:	4b7f      	ldr	r3, [pc, #508]	; (8014068 <_dtoa_r+0xbd0>)
 8013e6c:	f7ff bb28 	b.w	80134c0 <_dtoa_r+0x28>
 8013e70:	6932      	ldr	r2, [r6, #16]
 8013e72:	f106 010c 	add.w	r1, r6, #12
 8013e76:	3202      	adds	r2, #2
 8013e78:	0092      	lsls	r2, r2, #2
 8013e7a:	300c      	adds	r0, #12
 8013e7c:	f7fd fd1c 	bl	80118b8 <memcpy>
 8013e80:	2201      	movs	r2, #1
 8013e82:	4639      	mov	r1, r7
 8013e84:	4628      	mov	r0, r5
 8013e86:	f000 ffd9 	bl	8014e3c <__lshift>
 8013e8a:	46b0      	mov	r8, r6
 8013e8c:	4606      	mov	r6, r0
 8013e8e:	9b03      	ldr	r3, [sp, #12]
 8013e90:	3301      	adds	r3, #1
 8013e92:	9308      	str	r3, [sp, #32]
 8013e94:	9b03      	ldr	r3, [sp, #12]
 8013e96:	444b      	add	r3, r9
 8013e98:	930a      	str	r3, [sp, #40]	; 0x28
 8013e9a:	9b04      	ldr	r3, [sp, #16]
 8013e9c:	f003 0301 	and.w	r3, r3, #1
 8013ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8013ea2:	9b08      	ldr	r3, [sp, #32]
 8013ea4:	4621      	mov	r1, r4
 8013ea6:	3b01      	subs	r3, #1
 8013ea8:	4658      	mov	r0, fp
 8013eaa:	9304      	str	r3, [sp, #16]
 8013eac:	f7ff fa68 	bl	8013380 <quorem>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	4641      	mov	r1, r8
 8013eb4:	3330      	adds	r3, #48	; 0x30
 8013eb6:	9006      	str	r0, [sp, #24]
 8013eb8:	4658      	mov	r0, fp
 8013eba:	930b      	str	r3, [sp, #44]	; 0x2c
 8013ebc:	f001 f82e 	bl	8014f1c <__mcmp>
 8013ec0:	4632      	mov	r2, r6
 8013ec2:	4681      	mov	r9, r0
 8013ec4:	4621      	mov	r1, r4
 8013ec6:	4628      	mov	r0, r5
 8013ec8:	f001 f844 	bl	8014f54 <__mdiff>
 8013ecc:	68c2      	ldr	r2, [r0, #12]
 8013ece:	4607      	mov	r7, r0
 8013ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ed2:	bb02      	cbnz	r2, 8013f16 <_dtoa_r+0xa7e>
 8013ed4:	4601      	mov	r1, r0
 8013ed6:	4658      	mov	r0, fp
 8013ed8:	f001 f820 	bl	8014f1c <__mcmp>
 8013edc:	4602      	mov	r2, r0
 8013ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ee0:	4639      	mov	r1, r7
 8013ee2:	4628      	mov	r0, r5
 8013ee4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8013ee8:	f000 fd90 	bl	8014a0c <_Bfree>
 8013eec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013eee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013ef0:	9f08      	ldr	r7, [sp, #32]
 8013ef2:	ea43 0102 	orr.w	r1, r3, r2
 8013ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ef8:	430b      	orrs	r3, r1
 8013efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013efc:	d10d      	bne.n	8013f1a <_dtoa_r+0xa82>
 8013efe:	2b39      	cmp	r3, #57	; 0x39
 8013f00:	d029      	beq.n	8013f56 <_dtoa_r+0xabe>
 8013f02:	f1b9 0f00 	cmp.w	r9, #0
 8013f06:	dd01      	ble.n	8013f0c <_dtoa_r+0xa74>
 8013f08:	9b06      	ldr	r3, [sp, #24]
 8013f0a:	3331      	adds	r3, #49	; 0x31
 8013f0c:	9a04      	ldr	r2, [sp, #16]
 8013f0e:	7013      	strb	r3, [r2, #0]
 8013f10:	e776      	b.n	8013e00 <_dtoa_r+0x968>
 8013f12:	4630      	mov	r0, r6
 8013f14:	e7b9      	b.n	8013e8a <_dtoa_r+0x9f2>
 8013f16:	2201      	movs	r2, #1
 8013f18:	e7e2      	b.n	8013ee0 <_dtoa_r+0xa48>
 8013f1a:	f1b9 0f00 	cmp.w	r9, #0
 8013f1e:	db06      	blt.n	8013f2e <_dtoa_r+0xa96>
 8013f20:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013f22:	ea41 0909 	orr.w	r9, r1, r9
 8013f26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f28:	ea59 0101 	orrs.w	r1, r9, r1
 8013f2c:	d120      	bne.n	8013f70 <_dtoa_r+0xad8>
 8013f2e:	2a00      	cmp	r2, #0
 8013f30:	ddec      	ble.n	8013f0c <_dtoa_r+0xa74>
 8013f32:	4659      	mov	r1, fp
 8013f34:	2201      	movs	r2, #1
 8013f36:	4628      	mov	r0, r5
 8013f38:	9308      	str	r3, [sp, #32]
 8013f3a:	f000 ff7f 	bl	8014e3c <__lshift>
 8013f3e:	4621      	mov	r1, r4
 8013f40:	4683      	mov	fp, r0
 8013f42:	f000 ffeb 	bl	8014f1c <__mcmp>
 8013f46:	2800      	cmp	r0, #0
 8013f48:	9b08      	ldr	r3, [sp, #32]
 8013f4a:	dc02      	bgt.n	8013f52 <_dtoa_r+0xaba>
 8013f4c:	d1de      	bne.n	8013f0c <_dtoa_r+0xa74>
 8013f4e:	07da      	lsls	r2, r3, #31
 8013f50:	d5dc      	bpl.n	8013f0c <_dtoa_r+0xa74>
 8013f52:	2b39      	cmp	r3, #57	; 0x39
 8013f54:	d1d8      	bne.n	8013f08 <_dtoa_r+0xa70>
 8013f56:	2339      	movs	r3, #57	; 0x39
 8013f58:	9a04      	ldr	r2, [sp, #16]
 8013f5a:	7013      	strb	r3, [r2, #0]
 8013f5c:	463b      	mov	r3, r7
 8013f5e:	461f      	mov	r7, r3
 8013f60:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8013f64:	3b01      	subs	r3, #1
 8013f66:	2a39      	cmp	r2, #57	; 0x39
 8013f68:	d050      	beq.n	801400c <_dtoa_r+0xb74>
 8013f6a:	3201      	adds	r2, #1
 8013f6c:	701a      	strb	r2, [r3, #0]
 8013f6e:	e747      	b.n	8013e00 <_dtoa_r+0x968>
 8013f70:	2a00      	cmp	r2, #0
 8013f72:	dd03      	ble.n	8013f7c <_dtoa_r+0xae4>
 8013f74:	2b39      	cmp	r3, #57	; 0x39
 8013f76:	d0ee      	beq.n	8013f56 <_dtoa_r+0xabe>
 8013f78:	3301      	adds	r3, #1
 8013f7a:	e7c7      	b.n	8013f0c <_dtoa_r+0xa74>
 8013f7c:	9a08      	ldr	r2, [sp, #32]
 8013f7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f80:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013f84:	428a      	cmp	r2, r1
 8013f86:	d02a      	beq.n	8013fde <_dtoa_r+0xb46>
 8013f88:	4659      	mov	r1, fp
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	220a      	movs	r2, #10
 8013f8e:	4628      	mov	r0, r5
 8013f90:	f000 fd5e 	bl	8014a50 <__multadd>
 8013f94:	45b0      	cmp	r8, r6
 8013f96:	4683      	mov	fp, r0
 8013f98:	f04f 0300 	mov.w	r3, #0
 8013f9c:	f04f 020a 	mov.w	r2, #10
 8013fa0:	4641      	mov	r1, r8
 8013fa2:	4628      	mov	r0, r5
 8013fa4:	d107      	bne.n	8013fb6 <_dtoa_r+0xb1e>
 8013fa6:	f000 fd53 	bl	8014a50 <__multadd>
 8013faa:	4680      	mov	r8, r0
 8013fac:	4606      	mov	r6, r0
 8013fae:	9b08      	ldr	r3, [sp, #32]
 8013fb0:	3301      	adds	r3, #1
 8013fb2:	9308      	str	r3, [sp, #32]
 8013fb4:	e775      	b.n	8013ea2 <_dtoa_r+0xa0a>
 8013fb6:	f000 fd4b 	bl	8014a50 <__multadd>
 8013fba:	4631      	mov	r1, r6
 8013fbc:	4680      	mov	r8, r0
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	220a      	movs	r2, #10
 8013fc2:	4628      	mov	r0, r5
 8013fc4:	f000 fd44 	bl	8014a50 <__multadd>
 8013fc8:	4606      	mov	r6, r0
 8013fca:	e7f0      	b.n	8013fae <_dtoa_r+0xb16>
 8013fcc:	f1b9 0f00 	cmp.w	r9, #0
 8013fd0:	bfcc      	ite	gt
 8013fd2:	464f      	movgt	r7, r9
 8013fd4:	2701      	movle	r7, #1
 8013fd6:	f04f 0800 	mov.w	r8, #0
 8013fda:	9a03      	ldr	r2, [sp, #12]
 8013fdc:	4417      	add	r7, r2
 8013fde:	4659      	mov	r1, fp
 8013fe0:	2201      	movs	r2, #1
 8013fe2:	4628      	mov	r0, r5
 8013fe4:	9308      	str	r3, [sp, #32]
 8013fe6:	f000 ff29 	bl	8014e3c <__lshift>
 8013fea:	4621      	mov	r1, r4
 8013fec:	4683      	mov	fp, r0
 8013fee:	f000 ff95 	bl	8014f1c <__mcmp>
 8013ff2:	2800      	cmp	r0, #0
 8013ff4:	dcb2      	bgt.n	8013f5c <_dtoa_r+0xac4>
 8013ff6:	d102      	bne.n	8013ffe <_dtoa_r+0xb66>
 8013ff8:	9b08      	ldr	r3, [sp, #32]
 8013ffa:	07db      	lsls	r3, r3, #31
 8013ffc:	d4ae      	bmi.n	8013f5c <_dtoa_r+0xac4>
 8013ffe:	463b      	mov	r3, r7
 8014000:	461f      	mov	r7, r3
 8014002:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014006:	2a30      	cmp	r2, #48	; 0x30
 8014008:	d0fa      	beq.n	8014000 <_dtoa_r+0xb68>
 801400a:	e6f9      	b.n	8013e00 <_dtoa_r+0x968>
 801400c:	9a03      	ldr	r2, [sp, #12]
 801400e:	429a      	cmp	r2, r3
 8014010:	d1a5      	bne.n	8013f5e <_dtoa_r+0xac6>
 8014012:	2331      	movs	r3, #49	; 0x31
 8014014:	f10a 0a01 	add.w	sl, sl, #1
 8014018:	e779      	b.n	8013f0e <_dtoa_r+0xa76>
 801401a:	4b14      	ldr	r3, [pc, #80]	; (801406c <_dtoa_r+0xbd4>)
 801401c:	f7ff baa8 	b.w	8013570 <_dtoa_r+0xd8>
 8014020:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014022:	2b00      	cmp	r3, #0
 8014024:	f47f aa81 	bne.w	801352a <_dtoa_r+0x92>
 8014028:	4b11      	ldr	r3, [pc, #68]	; (8014070 <_dtoa_r+0xbd8>)
 801402a:	f7ff baa1 	b.w	8013570 <_dtoa_r+0xd8>
 801402e:	f1b9 0f00 	cmp.w	r9, #0
 8014032:	dc03      	bgt.n	801403c <_dtoa_r+0xba4>
 8014034:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014036:	2b02      	cmp	r3, #2
 8014038:	f73f aecb 	bgt.w	8013dd2 <_dtoa_r+0x93a>
 801403c:	9f03      	ldr	r7, [sp, #12]
 801403e:	4621      	mov	r1, r4
 8014040:	4658      	mov	r0, fp
 8014042:	f7ff f99d 	bl	8013380 <quorem>
 8014046:	9a03      	ldr	r2, [sp, #12]
 8014048:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801404c:	f807 3b01 	strb.w	r3, [r7], #1
 8014050:	1aba      	subs	r2, r7, r2
 8014052:	4591      	cmp	r9, r2
 8014054:	ddba      	ble.n	8013fcc <_dtoa_r+0xb34>
 8014056:	4659      	mov	r1, fp
 8014058:	2300      	movs	r3, #0
 801405a:	220a      	movs	r2, #10
 801405c:	4628      	mov	r0, r5
 801405e:	f000 fcf7 	bl	8014a50 <__multadd>
 8014062:	4683      	mov	fp, r0
 8014064:	e7eb      	b.n	801403e <_dtoa_r+0xba6>
 8014066:	bf00      	nop
 8014068:	08018470 	.word	0x08018470
 801406c:	08018274 	.word	0x08018274
 8014070:	080183f1 	.word	0x080183f1

08014074 <std>:
 8014074:	2300      	movs	r3, #0
 8014076:	b510      	push	{r4, lr}
 8014078:	4604      	mov	r4, r0
 801407a:	e9c0 3300 	strd	r3, r3, [r0]
 801407e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014082:	6083      	str	r3, [r0, #8]
 8014084:	8181      	strh	r1, [r0, #12]
 8014086:	6643      	str	r3, [r0, #100]	; 0x64
 8014088:	81c2      	strh	r2, [r0, #14]
 801408a:	6183      	str	r3, [r0, #24]
 801408c:	4619      	mov	r1, r3
 801408e:	2208      	movs	r2, #8
 8014090:	305c      	adds	r0, #92	; 0x5c
 8014092:	f7fd fc1f 	bl	80118d4 <memset>
 8014096:	4b05      	ldr	r3, [pc, #20]	; (80140ac <std+0x38>)
 8014098:	6224      	str	r4, [r4, #32]
 801409a:	6263      	str	r3, [r4, #36]	; 0x24
 801409c:	4b04      	ldr	r3, [pc, #16]	; (80140b0 <std+0x3c>)
 801409e:	62a3      	str	r3, [r4, #40]	; 0x28
 80140a0:	4b04      	ldr	r3, [pc, #16]	; (80140b4 <std+0x40>)
 80140a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80140a4:	4b04      	ldr	r3, [pc, #16]	; (80140b8 <std+0x44>)
 80140a6:	6323      	str	r3, [r4, #48]	; 0x30
 80140a8:	bd10      	pop	{r4, pc}
 80140aa:	bf00      	nop
 80140ac:	08015a71 	.word	0x08015a71
 80140b0:	08015a93 	.word	0x08015a93
 80140b4:	08015acb 	.word	0x08015acb
 80140b8:	08015aef 	.word	0x08015aef

080140bc <_cleanup_r>:
 80140bc:	4901      	ldr	r1, [pc, #4]	; (80140c4 <_cleanup_r+0x8>)
 80140be:	f000 b8af 	b.w	8014220 <_fwalk_reent>
 80140c2:	bf00      	nop
 80140c4:	08015e19 	.word	0x08015e19

080140c8 <__sfmoreglue>:
 80140c8:	2268      	movs	r2, #104	; 0x68
 80140ca:	b570      	push	{r4, r5, r6, lr}
 80140cc:	1e4d      	subs	r5, r1, #1
 80140ce:	4355      	muls	r5, r2
 80140d0:	460e      	mov	r6, r1
 80140d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80140d6:	f001 f98d 	bl	80153f4 <_malloc_r>
 80140da:	4604      	mov	r4, r0
 80140dc:	b140      	cbz	r0, 80140f0 <__sfmoreglue+0x28>
 80140de:	2100      	movs	r1, #0
 80140e0:	e9c0 1600 	strd	r1, r6, [r0]
 80140e4:	300c      	adds	r0, #12
 80140e6:	60a0      	str	r0, [r4, #8]
 80140e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80140ec:	f7fd fbf2 	bl	80118d4 <memset>
 80140f0:	4620      	mov	r0, r4
 80140f2:	bd70      	pop	{r4, r5, r6, pc}

080140f4 <__sfp_lock_acquire>:
 80140f4:	4801      	ldr	r0, [pc, #4]	; (80140fc <__sfp_lock_acquire+0x8>)
 80140f6:	f000 bc1e 	b.w	8014936 <__retarget_lock_acquire_recursive>
 80140fa:	bf00      	nop
 80140fc:	200070bd 	.word	0x200070bd

08014100 <__sfp_lock_release>:
 8014100:	4801      	ldr	r0, [pc, #4]	; (8014108 <__sfp_lock_release+0x8>)
 8014102:	f000 bc19 	b.w	8014938 <__retarget_lock_release_recursive>
 8014106:	bf00      	nop
 8014108:	200070bd 	.word	0x200070bd

0801410c <__sinit_lock_acquire>:
 801410c:	4801      	ldr	r0, [pc, #4]	; (8014114 <__sinit_lock_acquire+0x8>)
 801410e:	f000 bc12 	b.w	8014936 <__retarget_lock_acquire_recursive>
 8014112:	bf00      	nop
 8014114:	200070be 	.word	0x200070be

08014118 <__sinit_lock_release>:
 8014118:	4801      	ldr	r0, [pc, #4]	; (8014120 <__sinit_lock_release+0x8>)
 801411a:	f000 bc0d 	b.w	8014938 <__retarget_lock_release_recursive>
 801411e:	bf00      	nop
 8014120:	200070be 	.word	0x200070be

08014124 <__sinit>:
 8014124:	b510      	push	{r4, lr}
 8014126:	4604      	mov	r4, r0
 8014128:	f7ff fff0 	bl	801410c <__sinit_lock_acquire>
 801412c:	69a3      	ldr	r3, [r4, #24]
 801412e:	b11b      	cbz	r3, 8014138 <__sinit+0x14>
 8014130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014134:	f7ff bff0 	b.w	8014118 <__sinit_lock_release>
 8014138:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801413c:	6523      	str	r3, [r4, #80]	; 0x50
 801413e:	4b13      	ldr	r3, [pc, #76]	; (801418c <__sinit+0x68>)
 8014140:	4a13      	ldr	r2, [pc, #76]	; (8014190 <__sinit+0x6c>)
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	62a2      	str	r2, [r4, #40]	; 0x28
 8014146:	42a3      	cmp	r3, r4
 8014148:	bf08      	it	eq
 801414a:	2301      	moveq	r3, #1
 801414c:	4620      	mov	r0, r4
 801414e:	bf08      	it	eq
 8014150:	61a3      	streq	r3, [r4, #24]
 8014152:	f000 f81f 	bl	8014194 <__sfp>
 8014156:	6060      	str	r0, [r4, #4]
 8014158:	4620      	mov	r0, r4
 801415a:	f000 f81b 	bl	8014194 <__sfp>
 801415e:	60a0      	str	r0, [r4, #8]
 8014160:	4620      	mov	r0, r4
 8014162:	f000 f817 	bl	8014194 <__sfp>
 8014166:	2200      	movs	r2, #0
 8014168:	2104      	movs	r1, #4
 801416a:	60e0      	str	r0, [r4, #12]
 801416c:	6860      	ldr	r0, [r4, #4]
 801416e:	f7ff ff81 	bl	8014074 <std>
 8014172:	2201      	movs	r2, #1
 8014174:	2109      	movs	r1, #9
 8014176:	68a0      	ldr	r0, [r4, #8]
 8014178:	f7ff ff7c 	bl	8014074 <std>
 801417c:	2202      	movs	r2, #2
 801417e:	2112      	movs	r1, #18
 8014180:	68e0      	ldr	r0, [r4, #12]
 8014182:	f7ff ff77 	bl	8014074 <std>
 8014186:	2301      	movs	r3, #1
 8014188:	61a3      	str	r3, [r4, #24]
 801418a:	e7d1      	b.n	8014130 <__sinit+0xc>
 801418c:	08018260 	.word	0x08018260
 8014190:	080140bd 	.word	0x080140bd

08014194 <__sfp>:
 8014194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014196:	4607      	mov	r7, r0
 8014198:	f7ff ffac 	bl	80140f4 <__sfp_lock_acquire>
 801419c:	4b1e      	ldr	r3, [pc, #120]	; (8014218 <__sfp+0x84>)
 801419e:	681e      	ldr	r6, [r3, #0]
 80141a0:	69b3      	ldr	r3, [r6, #24]
 80141a2:	b913      	cbnz	r3, 80141aa <__sfp+0x16>
 80141a4:	4630      	mov	r0, r6
 80141a6:	f7ff ffbd 	bl	8014124 <__sinit>
 80141aa:	3648      	adds	r6, #72	; 0x48
 80141ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80141b0:	3b01      	subs	r3, #1
 80141b2:	d503      	bpl.n	80141bc <__sfp+0x28>
 80141b4:	6833      	ldr	r3, [r6, #0]
 80141b6:	b30b      	cbz	r3, 80141fc <__sfp+0x68>
 80141b8:	6836      	ldr	r6, [r6, #0]
 80141ba:	e7f7      	b.n	80141ac <__sfp+0x18>
 80141bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80141c0:	b9d5      	cbnz	r5, 80141f8 <__sfp+0x64>
 80141c2:	4b16      	ldr	r3, [pc, #88]	; (801421c <__sfp+0x88>)
 80141c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80141c8:	60e3      	str	r3, [r4, #12]
 80141ca:	6665      	str	r5, [r4, #100]	; 0x64
 80141cc:	f000 fbb2 	bl	8014934 <__retarget_lock_init_recursive>
 80141d0:	f7ff ff96 	bl	8014100 <__sfp_lock_release>
 80141d4:	2208      	movs	r2, #8
 80141d6:	4629      	mov	r1, r5
 80141d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80141dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80141e0:	6025      	str	r5, [r4, #0]
 80141e2:	61a5      	str	r5, [r4, #24]
 80141e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80141e8:	f7fd fb74 	bl	80118d4 <memset>
 80141ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80141f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80141f4:	4620      	mov	r0, r4
 80141f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141f8:	3468      	adds	r4, #104	; 0x68
 80141fa:	e7d9      	b.n	80141b0 <__sfp+0x1c>
 80141fc:	2104      	movs	r1, #4
 80141fe:	4638      	mov	r0, r7
 8014200:	f7ff ff62 	bl	80140c8 <__sfmoreglue>
 8014204:	4604      	mov	r4, r0
 8014206:	6030      	str	r0, [r6, #0]
 8014208:	2800      	cmp	r0, #0
 801420a:	d1d5      	bne.n	80141b8 <__sfp+0x24>
 801420c:	f7ff ff78 	bl	8014100 <__sfp_lock_release>
 8014210:	230c      	movs	r3, #12
 8014212:	603b      	str	r3, [r7, #0]
 8014214:	e7ee      	b.n	80141f4 <__sfp+0x60>
 8014216:	bf00      	nop
 8014218:	08018260 	.word	0x08018260
 801421c:	ffff0001 	.word	0xffff0001

08014220 <_fwalk_reent>:
 8014220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014224:	4606      	mov	r6, r0
 8014226:	4688      	mov	r8, r1
 8014228:	2700      	movs	r7, #0
 801422a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801422e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014232:	f1b9 0901 	subs.w	r9, r9, #1
 8014236:	d505      	bpl.n	8014244 <_fwalk_reent+0x24>
 8014238:	6824      	ldr	r4, [r4, #0]
 801423a:	2c00      	cmp	r4, #0
 801423c:	d1f7      	bne.n	801422e <_fwalk_reent+0xe>
 801423e:	4638      	mov	r0, r7
 8014240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014244:	89ab      	ldrh	r3, [r5, #12]
 8014246:	2b01      	cmp	r3, #1
 8014248:	d907      	bls.n	801425a <_fwalk_reent+0x3a>
 801424a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801424e:	3301      	adds	r3, #1
 8014250:	d003      	beq.n	801425a <_fwalk_reent+0x3a>
 8014252:	4629      	mov	r1, r5
 8014254:	4630      	mov	r0, r6
 8014256:	47c0      	blx	r8
 8014258:	4307      	orrs	r7, r0
 801425a:	3568      	adds	r5, #104	; 0x68
 801425c:	e7e9      	b.n	8014232 <_fwalk_reent+0x12>

0801425e <rshift>:
 801425e:	6903      	ldr	r3, [r0, #16]
 8014260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014264:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014268:	f100 0414 	add.w	r4, r0, #20
 801426c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014270:	dd46      	ble.n	8014300 <rshift+0xa2>
 8014272:	f011 011f 	ands.w	r1, r1, #31
 8014276:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801427a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801427e:	d10c      	bne.n	801429a <rshift+0x3c>
 8014280:	4629      	mov	r1, r5
 8014282:	f100 0710 	add.w	r7, r0, #16
 8014286:	42b1      	cmp	r1, r6
 8014288:	d335      	bcc.n	80142f6 <rshift+0x98>
 801428a:	1a9b      	subs	r3, r3, r2
 801428c:	009b      	lsls	r3, r3, #2
 801428e:	1eea      	subs	r2, r5, #3
 8014290:	4296      	cmp	r6, r2
 8014292:	bf38      	it	cc
 8014294:	2300      	movcc	r3, #0
 8014296:	4423      	add	r3, r4
 8014298:	e015      	b.n	80142c6 <rshift+0x68>
 801429a:	46a1      	mov	r9, r4
 801429c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80142a0:	f1c1 0820 	rsb	r8, r1, #32
 80142a4:	40cf      	lsrs	r7, r1
 80142a6:	f105 0e04 	add.w	lr, r5, #4
 80142aa:	4576      	cmp	r6, lr
 80142ac:	46f4      	mov	ip, lr
 80142ae:	d816      	bhi.n	80142de <rshift+0x80>
 80142b0:	1a9a      	subs	r2, r3, r2
 80142b2:	0092      	lsls	r2, r2, #2
 80142b4:	3a04      	subs	r2, #4
 80142b6:	3501      	adds	r5, #1
 80142b8:	42ae      	cmp	r6, r5
 80142ba:	bf38      	it	cc
 80142bc:	2200      	movcc	r2, #0
 80142be:	18a3      	adds	r3, r4, r2
 80142c0:	50a7      	str	r7, [r4, r2]
 80142c2:	b107      	cbz	r7, 80142c6 <rshift+0x68>
 80142c4:	3304      	adds	r3, #4
 80142c6:	42a3      	cmp	r3, r4
 80142c8:	eba3 0204 	sub.w	r2, r3, r4
 80142cc:	bf08      	it	eq
 80142ce:	2300      	moveq	r3, #0
 80142d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80142d4:	6102      	str	r2, [r0, #16]
 80142d6:	bf08      	it	eq
 80142d8:	6143      	streq	r3, [r0, #20]
 80142da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142de:	f8dc c000 	ldr.w	ip, [ip]
 80142e2:	fa0c fc08 	lsl.w	ip, ip, r8
 80142e6:	ea4c 0707 	orr.w	r7, ip, r7
 80142ea:	f849 7b04 	str.w	r7, [r9], #4
 80142ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80142f2:	40cf      	lsrs	r7, r1
 80142f4:	e7d9      	b.n	80142aa <rshift+0x4c>
 80142f6:	f851 cb04 	ldr.w	ip, [r1], #4
 80142fa:	f847 cf04 	str.w	ip, [r7, #4]!
 80142fe:	e7c2      	b.n	8014286 <rshift+0x28>
 8014300:	4623      	mov	r3, r4
 8014302:	e7e0      	b.n	80142c6 <rshift+0x68>

08014304 <__hexdig_fun>:
 8014304:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014308:	2b09      	cmp	r3, #9
 801430a:	d802      	bhi.n	8014312 <__hexdig_fun+0xe>
 801430c:	3820      	subs	r0, #32
 801430e:	b2c0      	uxtb	r0, r0
 8014310:	4770      	bx	lr
 8014312:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014316:	2b05      	cmp	r3, #5
 8014318:	d801      	bhi.n	801431e <__hexdig_fun+0x1a>
 801431a:	3847      	subs	r0, #71	; 0x47
 801431c:	e7f7      	b.n	801430e <__hexdig_fun+0xa>
 801431e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014322:	2b05      	cmp	r3, #5
 8014324:	d801      	bhi.n	801432a <__hexdig_fun+0x26>
 8014326:	3827      	subs	r0, #39	; 0x27
 8014328:	e7f1      	b.n	801430e <__hexdig_fun+0xa>
 801432a:	2000      	movs	r0, #0
 801432c:	4770      	bx	lr
	...

08014330 <__gethex>:
 8014330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014334:	b08b      	sub	sp, #44	; 0x2c
 8014336:	9305      	str	r3, [sp, #20]
 8014338:	4bb2      	ldr	r3, [pc, #712]	; (8014604 <__gethex+0x2d4>)
 801433a:	9002      	str	r0, [sp, #8]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	468b      	mov	fp, r1
 8014340:	4618      	mov	r0, r3
 8014342:	4690      	mov	r8, r2
 8014344:	9303      	str	r3, [sp, #12]
 8014346:	f7eb ff49 	bl	80001dc <strlen>
 801434a:	4682      	mov	sl, r0
 801434c:	9b03      	ldr	r3, [sp, #12]
 801434e:	f8db 2000 	ldr.w	r2, [fp]
 8014352:	4403      	add	r3, r0
 8014354:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014358:	9306      	str	r3, [sp, #24]
 801435a:	1c93      	adds	r3, r2, #2
 801435c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014360:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014364:	32fe      	adds	r2, #254	; 0xfe
 8014366:	18d1      	adds	r1, r2, r3
 8014368:	461f      	mov	r7, r3
 801436a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801436e:	9101      	str	r1, [sp, #4]
 8014370:	2830      	cmp	r0, #48	; 0x30
 8014372:	d0f8      	beq.n	8014366 <__gethex+0x36>
 8014374:	f7ff ffc6 	bl	8014304 <__hexdig_fun>
 8014378:	4604      	mov	r4, r0
 801437a:	2800      	cmp	r0, #0
 801437c:	d13a      	bne.n	80143f4 <__gethex+0xc4>
 801437e:	4652      	mov	r2, sl
 8014380:	4638      	mov	r0, r7
 8014382:	9903      	ldr	r1, [sp, #12]
 8014384:	f7fe f958 	bl	8012638 <strncmp>
 8014388:	4605      	mov	r5, r0
 801438a:	2800      	cmp	r0, #0
 801438c:	d166      	bne.n	801445c <__gethex+0x12c>
 801438e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014392:	eb07 060a 	add.w	r6, r7, sl
 8014396:	f7ff ffb5 	bl	8014304 <__hexdig_fun>
 801439a:	2800      	cmp	r0, #0
 801439c:	d060      	beq.n	8014460 <__gethex+0x130>
 801439e:	4633      	mov	r3, r6
 80143a0:	7818      	ldrb	r0, [r3, #0]
 80143a2:	461f      	mov	r7, r3
 80143a4:	2830      	cmp	r0, #48	; 0x30
 80143a6:	f103 0301 	add.w	r3, r3, #1
 80143aa:	d0f9      	beq.n	80143a0 <__gethex+0x70>
 80143ac:	f7ff ffaa 	bl	8014304 <__hexdig_fun>
 80143b0:	2301      	movs	r3, #1
 80143b2:	fab0 f480 	clz	r4, r0
 80143b6:	4635      	mov	r5, r6
 80143b8:	0964      	lsrs	r4, r4, #5
 80143ba:	9301      	str	r3, [sp, #4]
 80143bc:	463a      	mov	r2, r7
 80143be:	4616      	mov	r6, r2
 80143c0:	7830      	ldrb	r0, [r6, #0]
 80143c2:	3201      	adds	r2, #1
 80143c4:	f7ff ff9e 	bl	8014304 <__hexdig_fun>
 80143c8:	2800      	cmp	r0, #0
 80143ca:	d1f8      	bne.n	80143be <__gethex+0x8e>
 80143cc:	4652      	mov	r2, sl
 80143ce:	4630      	mov	r0, r6
 80143d0:	9903      	ldr	r1, [sp, #12]
 80143d2:	f7fe f931 	bl	8012638 <strncmp>
 80143d6:	b980      	cbnz	r0, 80143fa <__gethex+0xca>
 80143d8:	b94d      	cbnz	r5, 80143ee <__gethex+0xbe>
 80143da:	eb06 050a 	add.w	r5, r6, sl
 80143de:	462a      	mov	r2, r5
 80143e0:	4616      	mov	r6, r2
 80143e2:	7830      	ldrb	r0, [r6, #0]
 80143e4:	3201      	adds	r2, #1
 80143e6:	f7ff ff8d 	bl	8014304 <__hexdig_fun>
 80143ea:	2800      	cmp	r0, #0
 80143ec:	d1f8      	bne.n	80143e0 <__gethex+0xb0>
 80143ee:	1bad      	subs	r5, r5, r6
 80143f0:	00ad      	lsls	r5, r5, #2
 80143f2:	e004      	b.n	80143fe <__gethex+0xce>
 80143f4:	2400      	movs	r4, #0
 80143f6:	4625      	mov	r5, r4
 80143f8:	e7e0      	b.n	80143bc <__gethex+0x8c>
 80143fa:	2d00      	cmp	r5, #0
 80143fc:	d1f7      	bne.n	80143ee <__gethex+0xbe>
 80143fe:	7833      	ldrb	r3, [r6, #0]
 8014400:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014404:	2b50      	cmp	r3, #80	; 0x50
 8014406:	d139      	bne.n	801447c <__gethex+0x14c>
 8014408:	7873      	ldrb	r3, [r6, #1]
 801440a:	2b2b      	cmp	r3, #43	; 0x2b
 801440c:	d02a      	beq.n	8014464 <__gethex+0x134>
 801440e:	2b2d      	cmp	r3, #45	; 0x2d
 8014410:	d02c      	beq.n	801446c <__gethex+0x13c>
 8014412:	f04f 0900 	mov.w	r9, #0
 8014416:	1c71      	adds	r1, r6, #1
 8014418:	7808      	ldrb	r0, [r1, #0]
 801441a:	f7ff ff73 	bl	8014304 <__hexdig_fun>
 801441e:	1e43      	subs	r3, r0, #1
 8014420:	b2db      	uxtb	r3, r3
 8014422:	2b18      	cmp	r3, #24
 8014424:	d82a      	bhi.n	801447c <__gethex+0x14c>
 8014426:	f1a0 0210 	sub.w	r2, r0, #16
 801442a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801442e:	f7ff ff69 	bl	8014304 <__hexdig_fun>
 8014432:	1e43      	subs	r3, r0, #1
 8014434:	b2db      	uxtb	r3, r3
 8014436:	2b18      	cmp	r3, #24
 8014438:	d91b      	bls.n	8014472 <__gethex+0x142>
 801443a:	f1b9 0f00 	cmp.w	r9, #0
 801443e:	d000      	beq.n	8014442 <__gethex+0x112>
 8014440:	4252      	negs	r2, r2
 8014442:	4415      	add	r5, r2
 8014444:	f8cb 1000 	str.w	r1, [fp]
 8014448:	b1d4      	cbz	r4, 8014480 <__gethex+0x150>
 801444a:	9b01      	ldr	r3, [sp, #4]
 801444c:	2b00      	cmp	r3, #0
 801444e:	bf14      	ite	ne
 8014450:	2700      	movne	r7, #0
 8014452:	2706      	moveq	r7, #6
 8014454:	4638      	mov	r0, r7
 8014456:	b00b      	add	sp, #44	; 0x2c
 8014458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801445c:	463e      	mov	r6, r7
 801445e:	4625      	mov	r5, r4
 8014460:	2401      	movs	r4, #1
 8014462:	e7cc      	b.n	80143fe <__gethex+0xce>
 8014464:	f04f 0900 	mov.w	r9, #0
 8014468:	1cb1      	adds	r1, r6, #2
 801446a:	e7d5      	b.n	8014418 <__gethex+0xe8>
 801446c:	f04f 0901 	mov.w	r9, #1
 8014470:	e7fa      	b.n	8014468 <__gethex+0x138>
 8014472:	230a      	movs	r3, #10
 8014474:	fb03 0202 	mla	r2, r3, r2, r0
 8014478:	3a10      	subs	r2, #16
 801447a:	e7d6      	b.n	801442a <__gethex+0xfa>
 801447c:	4631      	mov	r1, r6
 801447e:	e7e1      	b.n	8014444 <__gethex+0x114>
 8014480:	4621      	mov	r1, r4
 8014482:	1bf3      	subs	r3, r6, r7
 8014484:	3b01      	subs	r3, #1
 8014486:	2b07      	cmp	r3, #7
 8014488:	dc0a      	bgt.n	80144a0 <__gethex+0x170>
 801448a:	9802      	ldr	r0, [sp, #8]
 801448c:	f000 fa7e 	bl	801498c <_Balloc>
 8014490:	4604      	mov	r4, r0
 8014492:	b940      	cbnz	r0, 80144a6 <__gethex+0x176>
 8014494:	4602      	mov	r2, r0
 8014496:	21de      	movs	r1, #222	; 0xde
 8014498:	4b5b      	ldr	r3, [pc, #364]	; (8014608 <__gethex+0x2d8>)
 801449a:	485c      	ldr	r0, [pc, #368]	; (801460c <__gethex+0x2dc>)
 801449c:	f001 fc0c 	bl	8015cb8 <__assert_func>
 80144a0:	3101      	adds	r1, #1
 80144a2:	105b      	asrs	r3, r3, #1
 80144a4:	e7ef      	b.n	8014486 <__gethex+0x156>
 80144a6:	f04f 0b00 	mov.w	fp, #0
 80144aa:	f100 0914 	add.w	r9, r0, #20
 80144ae:	f1ca 0301 	rsb	r3, sl, #1
 80144b2:	f8cd 9010 	str.w	r9, [sp, #16]
 80144b6:	f8cd b004 	str.w	fp, [sp, #4]
 80144ba:	9308      	str	r3, [sp, #32]
 80144bc:	42b7      	cmp	r7, r6
 80144be:	d33f      	bcc.n	8014540 <__gethex+0x210>
 80144c0:	9f04      	ldr	r7, [sp, #16]
 80144c2:	9b01      	ldr	r3, [sp, #4]
 80144c4:	f847 3b04 	str.w	r3, [r7], #4
 80144c8:	eba7 0709 	sub.w	r7, r7, r9
 80144cc:	10bf      	asrs	r7, r7, #2
 80144ce:	6127      	str	r7, [r4, #16]
 80144d0:	4618      	mov	r0, r3
 80144d2:	f000 fb4d 	bl	8014b70 <__hi0bits>
 80144d6:	017f      	lsls	r7, r7, #5
 80144d8:	f8d8 6000 	ldr.w	r6, [r8]
 80144dc:	1a3f      	subs	r7, r7, r0
 80144de:	42b7      	cmp	r7, r6
 80144e0:	dd62      	ble.n	80145a8 <__gethex+0x278>
 80144e2:	1bbf      	subs	r7, r7, r6
 80144e4:	4639      	mov	r1, r7
 80144e6:	4620      	mov	r0, r4
 80144e8:	f000 fee7 	bl	80152ba <__any_on>
 80144ec:	4682      	mov	sl, r0
 80144ee:	b1a8      	cbz	r0, 801451c <__gethex+0x1ec>
 80144f0:	f04f 0a01 	mov.w	sl, #1
 80144f4:	1e7b      	subs	r3, r7, #1
 80144f6:	1159      	asrs	r1, r3, #5
 80144f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80144fc:	f003 021f 	and.w	r2, r3, #31
 8014500:	fa0a f202 	lsl.w	r2, sl, r2
 8014504:	420a      	tst	r2, r1
 8014506:	d009      	beq.n	801451c <__gethex+0x1ec>
 8014508:	4553      	cmp	r3, sl
 801450a:	dd05      	ble.n	8014518 <__gethex+0x1e8>
 801450c:	4620      	mov	r0, r4
 801450e:	1eb9      	subs	r1, r7, #2
 8014510:	f000 fed3 	bl	80152ba <__any_on>
 8014514:	2800      	cmp	r0, #0
 8014516:	d144      	bne.n	80145a2 <__gethex+0x272>
 8014518:	f04f 0a02 	mov.w	sl, #2
 801451c:	4639      	mov	r1, r7
 801451e:	4620      	mov	r0, r4
 8014520:	f7ff fe9d 	bl	801425e <rshift>
 8014524:	443d      	add	r5, r7
 8014526:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801452a:	42ab      	cmp	r3, r5
 801452c:	da4a      	bge.n	80145c4 <__gethex+0x294>
 801452e:	4621      	mov	r1, r4
 8014530:	9802      	ldr	r0, [sp, #8]
 8014532:	f000 fa6b 	bl	8014a0c <_Bfree>
 8014536:	2300      	movs	r3, #0
 8014538:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801453a:	27a3      	movs	r7, #163	; 0xa3
 801453c:	6013      	str	r3, [r2, #0]
 801453e:	e789      	b.n	8014454 <__gethex+0x124>
 8014540:	1e73      	subs	r3, r6, #1
 8014542:	9a06      	ldr	r2, [sp, #24]
 8014544:	9307      	str	r3, [sp, #28]
 8014546:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801454a:	4293      	cmp	r3, r2
 801454c:	d019      	beq.n	8014582 <__gethex+0x252>
 801454e:	f1bb 0f20 	cmp.w	fp, #32
 8014552:	d107      	bne.n	8014564 <__gethex+0x234>
 8014554:	9b04      	ldr	r3, [sp, #16]
 8014556:	9a01      	ldr	r2, [sp, #4]
 8014558:	f843 2b04 	str.w	r2, [r3], #4
 801455c:	9304      	str	r3, [sp, #16]
 801455e:	2300      	movs	r3, #0
 8014560:	469b      	mov	fp, r3
 8014562:	9301      	str	r3, [sp, #4]
 8014564:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014568:	f7ff fecc 	bl	8014304 <__hexdig_fun>
 801456c:	9b01      	ldr	r3, [sp, #4]
 801456e:	f000 000f 	and.w	r0, r0, #15
 8014572:	fa00 f00b 	lsl.w	r0, r0, fp
 8014576:	4303      	orrs	r3, r0
 8014578:	9301      	str	r3, [sp, #4]
 801457a:	f10b 0b04 	add.w	fp, fp, #4
 801457e:	9b07      	ldr	r3, [sp, #28]
 8014580:	e00d      	b.n	801459e <__gethex+0x26e>
 8014582:	9a08      	ldr	r2, [sp, #32]
 8014584:	1e73      	subs	r3, r6, #1
 8014586:	4413      	add	r3, r2
 8014588:	42bb      	cmp	r3, r7
 801458a:	d3e0      	bcc.n	801454e <__gethex+0x21e>
 801458c:	4618      	mov	r0, r3
 801458e:	4652      	mov	r2, sl
 8014590:	9903      	ldr	r1, [sp, #12]
 8014592:	9309      	str	r3, [sp, #36]	; 0x24
 8014594:	f7fe f850 	bl	8012638 <strncmp>
 8014598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801459a:	2800      	cmp	r0, #0
 801459c:	d1d7      	bne.n	801454e <__gethex+0x21e>
 801459e:	461e      	mov	r6, r3
 80145a0:	e78c      	b.n	80144bc <__gethex+0x18c>
 80145a2:	f04f 0a03 	mov.w	sl, #3
 80145a6:	e7b9      	b.n	801451c <__gethex+0x1ec>
 80145a8:	da09      	bge.n	80145be <__gethex+0x28e>
 80145aa:	1bf7      	subs	r7, r6, r7
 80145ac:	4621      	mov	r1, r4
 80145ae:	463a      	mov	r2, r7
 80145b0:	9802      	ldr	r0, [sp, #8]
 80145b2:	f000 fc43 	bl	8014e3c <__lshift>
 80145b6:	4604      	mov	r4, r0
 80145b8:	1bed      	subs	r5, r5, r7
 80145ba:	f100 0914 	add.w	r9, r0, #20
 80145be:	f04f 0a00 	mov.w	sl, #0
 80145c2:	e7b0      	b.n	8014526 <__gethex+0x1f6>
 80145c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80145c8:	42a8      	cmp	r0, r5
 80145ca:	dd72      	ble.n	80146b2 <__gethex+0x382>
 80145cc:	1b45      	subs	r5, r0, r5
 80145ce:	42ae      	cmp	r6, r5
 80145d0:	dc35      	bgt.n	801463e <__gethex+0x30e>
 80145d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80145d6:	2b02      	cmp	r3, #2
 80145d8:	d029      	beq.n	801462e <__gethex+0x2fe>
 80145da:	2b03      	cmp	r3, #3
 80145dc:	d02b      	beq.n	8014636 <__gethex+0x306>
 80145de:	2b01      	cmp	r3, #1
 80145e0:	d11c      	bne.n	801461c <__gethex+0x2ec>
 80145e2:	42ae      	cmp	r6, r5
 80145e4:	d11a      	bne.n	801461c <__gethex+0x2ec>
 80145e6:	2e01      	cmp	r6, #1
 80145e8:	d112      	bne.n	8014610 <__gethex+0x2e0>
 80145ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80145ee:	9a05      	ldr	r2, [sp, #20]
 80145f0:	2762      	movs	r7, #98	; 0x62
 80145f2:	6013      	str	r3, [r2, #0]
 80145f4:	2301      	movs	r3, #1
 80145f6:	6123      	str	r3, [r4, #16]
 80145f8:	f8c9 3000 	str.w	r3, [r9]
 80145fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80145fe:	601c      	str	r4, [r3, #0]
 8014600:	e728      	b.n	8014454 <__gethex+0x124>
 8014602:	bf00      	nop
 8014604:	0801854c 	.word	0x0801854c
 8014608:	08018470 	.word	0x08018470
 801460c:	080184e4 	.word	0x080184e4
 8014610:	4620      	mov	r0, r4
 8014612:	1e71      	subs	r1, r6, #1
 8014614:	f000 fe51 	bl	80152ba <__any_on>
 8014618:	2800      	cmp	r0, #0
 801461a:	d1e6      	bne.n	80145ea <__gethex+0x2ba>
 801461c:	4621      	mov	r1, r4
 801461e:	9802      	ldr	r0, [sp, #8]
 8014620:	f000 f9f4 	bl	8014a0c <_Bfree>
 8014624:	2300      	movs	r3, #0
 8014626:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014628:	2750      	movs	r7, #80	; 0x50
 801462a:	6013      	str	r3, [r2, #0]
 801462c:	e712      	b.n	8014454 <__gethex+0x124>
 801462e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014630:	2b00      	cmp	r3, #0
 8014632:	d1f3      	bne.n	801461c <__gethex+0x2ec>
 8014634:	e7d9      	b.n	80145ea <__gethex+0x2ba>
 8014636:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014638:	2b00      	cmp	r3, #0
 801463a:	d1d6      	bne.n	80145ea <__gethex+0x2ba>
 801463c:	e7ee      	b.n	801461c <__gethex+0x2ec>
 801463e:	1e6f      	subs	r7, r5, #1
 8014640:	f1ba 0f00 	cmp.w	sl, #0
 8014644:	d132      	bne.n	80146ac <__gethex+0x37c>
 8014646:	b127      	cbz	r7, 8014652 <__gethex+0x322>
 8014648:	4639      	mov	r1, r7
 801464a:	4620      	mov	r0, r4
 801464c:	f000 fe35 	bl	80152ba <__any_on>
 8014650:	4682      	mov	sl, r0
 8014652:	2101      	movs	r1, #1
 8014654:	117b      	asrs	r3, r7, #5
 8014656:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801465a:	f007 071f 	and.w	r7, r7, #31
 801465e:	fa01 f707 	lsl.w	r7, r1, r7
 8014662:	421f      	tst	r7, r3
 8014664:	f04f 0702 	mov.w	r7, #2
 8014668:	4629      	mov	r1, r5
 801466a:	4620      	mov	r0, r4
 801466c:	bf18      	it	ne
 801466e:	f04a 0a02 	orrne.w	sl, sl, #2
 8014672:	1b76      	subs	r6, r6, r5
 8014674:	f7ff fdf3 	bl	801425e <rshift>
 8014678:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801467c:	f1ba 0f00 	cmp.w	sl, #0
 8014680:	d048      	beq.n	8014714 <__gethex+0x3e4>
 8014682:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014686:	2b02      	cmp	r3, #2
 8014688:	d015      	beq.n	80146b6 <__gethex+0x386>
 801468a:	2b03      	cmp	r3, #3
 801468c:	d017      	beq.n	80146be <__gethex+0x38e>
 801468e:	2b01      	cmp	r3, #1
 8014690:	d109      	bne.n	80146a6 <__gethex+0x376>
 8014692:	f01a 0f02 	tst.w	sl, #2
 8014696:	d006      	beq.n	80146a6 <__gethex+0x376>
 8014698:	f8d9 0000 	ldr.w	r0, [r9]
 801469c:	ea4a 0a00 	orr.w	sl, sl, r0
 80146a0:	f01a 0f01 	tst.w	sl, #1
 80146a4:	d10e      	bne.n	80146c4 <__gethex+0x394>
 80146a6:	f047 0710 	orr.w	r7, r7, #16
 80146aa:	e033      	b.n	8014714 <__gethex+0x3e4>
 80146ac:	f04f 0a01 	mov.w	sl, #1
 80146b0:	e7cf      	b.n	8014652 <__gethex+0x322>
 80146b2:	2701      	movs	r7, #1
 80146b4:	e7e2      	b.n	801467c <__gethex+0x34c>
 80146b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80146b8:	f1c3 0301 	rsb	r3, r3, #1
 80146bc:	9315      	str	r3, [sp, #84]	; 0x54
 80146be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d0f0      	beq.n	80146a6 <__gethex+0x376>
 80146c4:	f04f 0c00 	mov.w	ip, #0
 80146c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80146cc:	f104 0314 	add.w	r3, r4, #20
 80146d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80146d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80146d8:	4618      	mov	r0, r3
 80146da:	f853 2b04 	ldr.w	r2, [r3], #4
 80146de:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80146e2:	d01c      	beq.n	801471e <__gethex+0x3ee>
 80146e4:	3201      	adds	r2, #1
 80146e6:	6002      	str	r2, [r0, #0]
 80146e8:	2f02      	cmp	r7, #2
 80146ea:	f104 0314 	add.w	r3, r4, #20
 80146ee:	d13d      	bne.n	801476c <__gethex+0x43c>
 80146f0:	f8d8 2000 	ldr.w	r2, [r8]
 80146f4:	3a01      	subs	r2, #1
 80146f6:	42b2      	cmp	r2, r6
 80146f8:	d10a      	bne.n	8014710 <__gethex+0x3e0>
 80146fa:	2201      	movs	r2, #1
 80146fc:	1171      	asrs	r1, r6, #5
 80146fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014702:	f006 061f 	and.w	r6, r6, #31
 8014706:	fa02 f606 	lsl.w	r6, r2, r6
 801470a:	421e      	tst	r6, r3
 801470c:	bf18      	it	ne
 801470e:	4617      	movne	r7, r2
 8014710:	f047 0720 	orr.w	r7, r7, #32
 8014714:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014716:	601c      	str	r4, [r3, #0]
 8014718:	9b05      	ldr	r3, [sp, #20]
 801471a:	601d      	str	r5, [r3, #0]
 801471c:	e69a      	b.n	8014454 <__gethex+0x124>
 801471e:	4299      	cmp	r1, r3
 8014720:	f843 cc04 	str.w	ip, [r3, #-4]
 8014724:	d8d8      	bhi.n	80146d8 <__gethex+0x3a8>
 8014726:	68a3      	ldr	r3, [r4, #8]
 8014728:	459b      	cmp	fp, r3
 801472a:	db17      	blt.n	801475c <__gethex+0x42c>
 801472c:	6861      	ldr	r1, [r4, #4]
 801472e:	9802      	ldr	r0, [sp, #8]
 8014730:	3101      	adds	r1, #1
 8014732:	f000 f92b 	bl	801498c <_Balloc>
 8014736:	4681      	mov	r9, r0
 8014738:	b918      	cbnz	r0, 8014742 <__gethex+0x412>
 801473a:	4602      	mov	r2, r0
 801473c:	2184      	movs	r1, #132	; 0x84
 801473e:	4b19      	ldr	r3, [pc, #100]	; (80147a4 <__gethex+0x474>)
 8014740:	e6ab      	b.n	801449a <__gethex+0x16a>
 8014742:	6922      	ldr	r2, [r4, #16]
 8014744:	f104 010c 	add.w	r1, r4, #12
 8014748:	3202      	adds	r2, #2
 801474a:	0092      	lsls	r2, r2, #2
 801474c:	300c      	adds	r0, #12
 801474e:	f7fd f8b3 	bl	80118b8 <memcpy>
 8014752:	4621      	mov	r1, r4
 8014754:	9802      	ldr	r0, [sp, #8]
 8014756:	f000 f959 	bl	8014a0c <_Bfree>
 801475a:	464c      	mov	r4, r9
 801475c:	6923      	ldr	r3, [r4, #16]
 801475e:	1c5a      	adds	r2, r3, #1
 8014760:	6122      	str	r2, [r4, #16]
 8014762:	2201      	movs	r2, #1
 8014764:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014768:	615a      	str	r2, [r3, #20]
 801476a:	e7bd      	b.n	80146e8 <__gethex+0x3b8>
 801476c:	6922      	ldr	r2, [r4, #16]
 801476e:	455a      	cmp	r2, fp
 8014770:	dd0b      	ble.n	801478a <__gethex+0x45a>
 8014772:	2101      	movs	r1, #1
 8014774:	4620      	mov	r0, r4
 8014776:	f7ff fd72 	bl	801425e <rshift>
 801477a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801477e:	3501      	adds	r5, #1
 8014780:	42ab      	cmp	r3, r5
 8014782:	f6ff aed4 	blt.w	801452e <__gethex+0x1fe>
 8014786:	2701      	movs	r7, #1
 8014788:	e7c2      	b.n	8014710 <__gethex+0x3e0>
 801478a:	f016 061f 	ands.w	r6, r6, #31
 801478e:	d0fa      	beq.n	8014786 <__gethex+0x456>
 8014790:	4453      	add	r3, sl
 8014792:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014796:	f000 f9eb 	bl	8014b70 <__hi0bits>
 801479a:	f1c6 0620 	rsb	r6, r6, #32
 801479e:	42b0      	cmp	r0, r6
 80147a0:	dbe7      	blt.n	8014772 <__gethex+0x442>
 80147a2:	e7f0      	b.n	8014786 <__gethex+0x456>
 80147a4:	08018470 	.word	0x08018470

080147a8 <L_shift>:
 80147a8:	f1c2 0208 	rsb	r2, r2, #8
 80147ac:	0092      	lsls	r2, r2, #2
 80147ae:	b570      	push	{r4, r5, r6, lr}
 80147b0:	f1c2 0620 	rsb	r6, r2, #32
 80147b4:	6843      	ldr	r3, [r0, #4]
 80147b6:	6804      	ldr	r4, [r0, #0]
 80147b8:	fa03 f506 	lsl.w	r5, r3, r6
 80147bc:	432c      	orrs	r4, r5
 80147be:	40d3      	lsrs	r3, r2
 80147c0:	6004      	str	r4, [r0, #0]
 80147c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80147c6:	4288      	cmp	r0, r1
 80147c8:	d3f4      	bcc.n	80147b4 <L_shift+0xc>
 80147ca:	bd70      	pop	{r4, r5, r6, pc}

080147cc <__match>:
 80147cc:	b530      	push	{r4, r5, lr}
 80147ce:	6803      	ldr	r3, [r0, #0]
 80147d0:	3301      	adds	r3, #1
 80147d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147d6:	b914      	cbnz	r4, 80147de <__match+0x12>
 80147d8:	6003      	str	r3, [r0, #0]
 80147da:	2001      	movs	r0, #1
 80147dc:	bd30      	pop	{r4, r5, pc}
 80147de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80147e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80147e6:	2d19      	cmp	r5, #25
 80147e8:	bf98      	it	ls
 80147ea:	3220      	addls	r2, #32
 80147ec:	42a2      	cmp	r2, r4
 80147ee:	d0f0      	beq.n	80147d2 <__match+0x6>
 80147f0:	2000      	movs	r0, #0
 80147f2:	e7f3      	b.n	80147dc <__match+0x10>

080147f4 <__hexnan>:
 80147f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147f8:	2500      	movs	r5, #0
 80147fa:	680b      	ldr	r3, [r1, #0]
 80147fc:	4682      	mov	sl, r0
 80147fe:	115e      	asrs	r6, r3, #5
 8014800:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014804:	f013 031f 	ands.w	r3, r3, #31
 8014808:	bf18      	it	ne
 801480a:	3604      	addne	r6, #4
 801480c:	1f37      	subs	r7, r6, #4
 801480e:	46b9      	mov	r9, r7
 8014810:	463c      	mov	r4, r7
 8014812:	46ab      	mov	fp, r5
 8014814:	b087      	sub	sp, #28
 8014816:	4690      	mov	r8, r2
 8014818:	6802      	ldr	r2, [r0, #0]
 801481a:	9301      	str	r3, [sp, #4]
 801481c:	f846 5c04 	str.w	r5, [r6, #-4]
 8014820:	9502      	str	r5, [sp, #8]
 8014822:	7851      	ldrb	r1, [r2, #1]
 8014824:	1c53      	adds	r3, r2, #1
 8014826:	9303      	str	r3, [sp, #12]
 8014828:	b341      	cbz	r1, 801487c <__hexnan+0x88>
 801482a:	4608      	mov	r0, r1
 801482c:	9205      	str	r2, [sp, #20]
 801482e:	9104      	str	r1, [sp, #16]
 8014830:	f7ff fd68 	bl	8014304 <__hexdig_fun>
 8014834:	2800      	cmp	r0, #0
 8014836:	d14f      	bne.n	80148d8 <__hexnan+0xe4>
 8014838:	9904      	ldr	r1, [sp, #16]
 801483a:	9a05      	ldr	r2, [sp, #20]
 801483c:	2920      	cmp	r1, #32
 801483e:	d818      	bhi.n	8014872 <__hexnan+0x7e>
 8014840:	9b02      	ldr	r3, [sp, #8]
 8014842:	459b      	cmp	fp, r3
 8014844:	dd13      	ble.n	801486e <__hexnan+0x7a>
 8014846:	454c      	cmp	r4, r9
 8014848:	d206      	bcs.n	8014858 <__hexnan+0x64>
 801484a:	2d07      	cmp	r5, #7
 801484c:	dc04      	bgt.n	8014858 <__hexnan+0x64>
 801484e:	462a      	mov	r2, r5
 8014850:	4649      	mov	r1, r9
 8014852:	4620      	mov	r0, r4
 8014854:	f7ff ffa8 	bl	80147a8 <L_shift>
 8014858:	4544      	cmp	r4, r8
 801485a:	d950      	bls.n	80148fe <__hexnan+0x10a>
 801485c:	2300      	movs	r3, #0
 801485e:	f1a4 0904 	sub.w	r9, r4, #4
 8014862:	f844 3c04 	str.w	r3, [r4, #-4]
 8014866:	461d      	mov	r5, r3
 8014868:	464c      	mov	r4, r9
 801486a:	f8cd b008 	str.w	fp, [sp, #8]
 801486e:	9a03      	ldr	r2, [sp, #12]
 8014870:	e7d7      	b.n	8014822 <__hexnan+0x2e>
 8014872:	2929      	cmp	r1, #41	; 0x29
 8014874:	d156      	bne.n	8014924 <__hexnan+0x130>
 8014876:	3202      	adds	r2, #2
 8014878:	f8ca 2000 	str.w	r2, [sl]
 801487c:	f1bb 0f00 	cmp.w	fp, #0
 8014880:	d050      	beq.n	8014924 <__hexnan+0x130>
 8014882:	454c      	cmp	r4, r9
 8014884:	d206      	bcs.n	8014894 <__hexnan+0xa0>
 8014886:	2d07      	cmp	r5, #7
 8014888:	dc04      	bgt.n	8014894 <__hexnan+0xa0>
 801488a:	462a      	mov	r2, r5
 801488c:	4649      	mov	r1, r9
 801488e:	4620      	mov	r0, r4
 8014890:	f7ff ff8a 	bl	80147a8 <L_shift>
 8014894:	4544      	cmp	r4, r8
 8014896:	d934      	bls.n	8014902 <__hexnan+0x10e>
 8014898:	4623      	mov	r3, r4
 801489a:	f1a8 0204 	sub.w	r2, r8, #4
 801489e:	f853 1b04 	ldr.w	r1, [r3], #4
 80148a2:	429f      	cmp	r7, r3
 80148a4:	f842 1f04 	str.w	r1, [r2, #4]!
 80148a8:	d2f9      	bcs.n	801489e <__hexnan+0xaa>
 80148aa:	1b3b      	subs	r3, r7, r4
 80148ac:	f023 0303 	bic.w	r3, r3, #3
 80148b0:	3304      	adds	r3, #4
 80148b2:	3401      	adds	r4, #1
 80148b4:	3e03      	subs	r6, #3
 80148b6:	42b4      	cmp	r4, r6
 80148b8:	bf88      	it	hi
 80148ba:	2304      	movhi	r3, #4
 80148bc:	2200      	movs	r2, #0
 80148be:	4443      	add	r3, r8
 80148c0:	f843 2b04 	str.w	r2, [r3], #4
 80148c4:	429f      	cmp	r7, r3
 80148c6:	d2fb      	bcs.n	80148c0 <__hexnan+0xcc>
 80148c8:	683b      	ldr	r3, [r7, #0]
 80148ca:	b91b      	cbnz	r3, 80148d4 <__hexnan+0xe0>
 80148cc:	4547      	cmp	r7, r8
 80148ce:	d127      	bne.n	8014920 <__hexnan+0x12c>
 80148d0:	2301      	movs	r3, #1
 80148d2:	603b      	str	r3, [r7, #0]
 80148d4:	2005      	movs	r0, #5
 80148d6:	e026      	b.n	8014926 <__hexnan+0x132>
 80148d8:	3501      	adds	r5, #1
 80148da:	2d08      	cmp	r5, #8
 80148dc:	f10b 0b01 	add.w	fp, fp, #1
 80148e0:	dd06      	ble.n	80148f0 <__hexnan+0xfc>
 80148e2:	4544      	cmp	r4, r8
 80148e4:	d9c3      	bls.n	801486e <__hexnan+0x7a>
 80148e6:	2300      	movs	r3, #0
 80148e8:	2501      	movs	r5, #1
 80148ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80148ee:	3c04      	subs	r4, #4
 80148f0:	6822      	ldr	r2, [r4, #0]
 80148f2:	f000 000f 	and.w	r0, r0, #15
 80148f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80148fa:	6022      	str	r2, [r4, #0]
 80148fc:	e7b7      	b.n	801486e <__hexnan+0x7a>
 80148fe:	2508      	movs	r5, #8
 8014900:	e7b5      	b.n	801486e <__hexnan+0x7a>
 8014902:	9b01      	ldr	r3, [sp, #4]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d0df      	beq.n	80148c8 <__hexnan+0xd4>
 8014908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801490c:	f1c3 0320 	rsb	r3, r3, #32
 8014910:	fa22 f303 	lsr.w	r3, r2, r3
 8014914:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014918:	401a      	ands	r2, r3
 801491a:	f846 2c04 	str.w	r2, [r6, #-4]
 801491e:	e7d3      	b.n	80148c8 <__hexnan+0xd4>
 8014920:	3f04      	subs	r7, #4
 8014922:	e7d1      	b.n	80148c8 <__hexnan+0xd4>
 8014924:	2004      	movs	r0, #4
 8014926:	b007      	add	sp, #28
 8014928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801492c <_localeconv_r>:
 801492c:	4800      	ldr	r0, [pc, #0]	; (8014930 <_localeconv_r+0x4>)
 801492e:	4770      	bx	lr
 8014930:	20000190 	.word	0x20000190

08014934 <__retarget_lock_init_recursive>:
 8014934:	4770      	bx	lr

08014936 <__retarget_lock_acquire_recursive>:
 8014936:	4770      	bx	lr

08014938 <__retarget_lock_release_recursive>:
 8014938:	4770      	bx	lr
	...

0801493c <malloc>:
 801493c:	4b02      	ldr	r3, [pc, #8]	; (8014948 <malloc+0xc>)
 801493e:	4601      	mov	r1, r0
 8014940:	6818      	ldr	r0, [r3, #0]
 8014942:	f000 bd57 	b.w	80153f4 <_malloc_r>
 8014946:	bf00      	nop
 8014948:	20000038 	.word	0x20000038

0801494c <__ascii_mbtowc>:
 801494c:	b082      	sub	sp, #8
 801494e:	b901      	cbnz	r1, 8014952 <__ascii_mbtowc+0x6>
 8014950:	a901      	add	r1, sp, #4
 8014952:	b142      	cbz	r2, 8014966 <__ascii_mbtowc+0x1a>
 8014954:	b14b      	cbz	r3, 801496a <__ascii_mbtowc+0x1e>
 8014956:	7813      	ldrb	r3, [r2, #0]
 8014958:	600b      	str	r3, [r1, #0]
 801495a:	7812      	ldrb	r2, [r2, #0]
 801495c:	1e10      	subs	r0, r2, #0
 801495e:	bf18      	it	ne
 8014960:	2001      	movne	r0, #1
 8014962:	b002      	add	sp, #8
 8014964:	4770      	bx	lr
 8014966:	4610      	mov	r0, r2
 8014968:	e7fb      	b.n	8014962 <__ascii_mbtowc+0x16>
 801496a:	f06f 0001 	mvn.w	r0, #1
 801496e:	e7f8      	b.n	8014962 <__ascii_mbtowc+0x16>

08014970 <memchr>:
 8014970:	4603      	mov	r3, r0
 8014972:	b510      	push	{r4, lr}
 8014974:	b2c9      	uxtb	r1, r1
 8014976:	4402      	add	r2, r0
 8014978:	4293      	cmp	r3, r2
 801497a:	4618      	mov	r0, r3
 801497c:	d101      	bne.n	8014982 <memchr+0x12>
 801497e:	2000      	movs	r0, #0
 8014980:	e003      	b.n	801498a <memchr+0x1a>
 8014982:	7804      	ldrb	r4, [r0, #0]
 8014984:	3301      	adds	r3, #1
 8014986:	428c      	cmp	r4, r1
 8014988:	d1f6      	bne.n	8014978 <memchr+0x8>
 801498a:	bd10      	pop	{r4, pc}

0801498c <_Balloc>:
 801498c:	b570      	push	{r4, r5, r6, lr}
 801498e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014990:	4604      	mov	r4, r0
 8014992:	460d      	mov	r5, r1
 8014994:	b976      	cbnz	r6, 80149b4 <_Balloc+0x28>
 8014996:	2010      	movs	r0, #16
 8014998:	f7ff ffd0 	bl	801493c <malloc>
 801499c:	4602      	mov	r2, r0
 801499e:	6260      	str	r0, [r4, #36]	; 0x24
 80149a0:	b920      	cbnz	r0, 80149ac <_Balloc+0x20>
 80149a2:	2166      	movs	r1, #102	; 0x66
 80149a4:	4b17      	ldr	r3, [pc, #92]	; (8014a04 <_Balloc+0x78>)
 80149a6:	4818      	ldr	r0, [pc, #96]	; (8014a08 <_Balloc+0x7c>)
 80149a8:	f001 f986 	bl	8015cb8 <__assert_func>
 80149ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80149b0:	6006      	str	r6, [r0, #0]
 80149b2:	60c6      	str	r6, [r0, #12]
 80149b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80149b6:	68f3      	ldr	r3, [r6, #12]
 80149b8:	b183      	cbz	r3, 80149dc <_Balloc+0x50>
 80149ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80149bc:	68db      	ldr	r3, [r3, #12]
 80149be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80149c2:	b9b8      	cbnz	r0, 80149f4 <_Balloc+0x68>
 80149c4:	2101      	movs	r1, #1
 80149c6:	fa01 f605 	lsl.w	r6, r1, r5
 80149ca:	1d72      	adds	r2, r6, #5
 80149cc:	4620      	mov	r0, r4
 80149ce:	0092      	lsls	r2, r2, #2
 80149d0:	f000 fc94 	bl	80152fc <_calloc_r>
 80149d4:	b160      	cbz	r0, 80149f0 <_Balloc+0x64>
 80149d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80149da:	e00e      	b.n	80149fa <_Balloc+0x6e>
 80149dc:	2221      	movs	r2, #33	; 0x21
 80149de:	2104      	movs	r1, #4
 80149e0:	4620      	mov	r0, r4
 80149e2:	f000 fc8b 	bl	80152fc <_calloc_r>
 80149e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80149e8:	60f0      	str	r0, [r6, #12]
 80149ea:	68db      	ldr	r3, [r3, #12]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d1e4      	bne.n	80149ba <_Balloc+0x2e>
 80149f0:	2000      	movs	r0, #0
 80149f2:	bd70      	pop	{r4, r5, r6, pc}
 80149f4:	6802      	ldr	r2, [r0, #0]
 80149f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80149fa:	2300      	movs	r3, #0
 80149fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014a00:	e7f7      	b.n	80149f2 <_Balloc+0x66>
 8014a02:	bf00      	nop
 8014a04:	080183fe 	.word	0x080183fe
 8014a08:	08018560 	.word	0x08018560

08014a0c <_Bfree>:
 8014a0c:	b570      	push	{r4, r5, r6, lr}
 8014a0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014a10:	4605      	mov	r5, r0
 8014a12:	460c      	mov	r4, r1
 8014a14:	b976      	cbnz	r6, 8014a34 <_Bfree+0x28>
 8014a16:	2010      	movs	r0, #16
 8014a18:	f7ff ff90 	bl	801493c <malloc>
 8014a1c:	4602      	mov	r2, r0
 8014a1e:	6268      	str	r0, [r5, #36]	; 0x24
 8014a20:	b920      	cbnz	r0, 8014a2c <_Bfree+0x20>
 8014a22:	218a      	movs	r1, #138	; 0x8a
 8014a24:	4b08      	ldr	r3, [pc, #32]	; (8014a48 <_Bfree+0x3c>)
 8014a26:	4809      	ldr	r0, [pc, #36]	; (8014a4c <_Bfree+0x40>)
 8014a28:	f001 f946 	bl	8015cb8 <__assert_func>
 8014a2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014a30:	6006      	str	r6, [r0, #0]
 8014a32:	60c6      	str	r6, [r0, #12]
 8014a34:	b13c      	cbz	r4, 8014a46 <_Bfree+0x3a>
 8014a36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014a38:	6862      	ldr	r2, [r4, #4]
 8014a3a:	68db      	ldr	r3, [r3, #12]
 8014a3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014a40:	6021      	str	r1, [r4, #0]
 8014a42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014a46:	bd70      	pop	{r4, r5, r6, pc}
 8014a48:	080183fe 	.word	0x080183fe
 8014a4c:	08018560 	.word	0x08018560

08014a50 <__multadd>:
 8014a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a54:	4607      	mov	r7, r0
 8014a56:	460c      	mov	r4, r1
 8014a58:	461e      	mov	r6, r3
 8014a5a:	2000      	movs	r0, #0
 8014a5c:	690d      	ldr	r5, [r1, #16]
 8014a5e:	f101 0c14 	add.w	ip, r1, #20
 8014a62:	f8dc 3000 	ldr.w	r3, [ip]
 8014a66:	3001      	adds	r0, #1
 8014a68:	b299      	uxth	r1, r3
 8014a6a:	fb02 6101 	mla	r1, r2, r1, r6
 8014a6e:	0c1e      	lsrs	r6, r3, #16
 8014a70:	0c0b      	lsrs	r3, r1, #16
 8014a72:	fb02 3306 	mla	r3, r2, r6, r3
 8014a76:	b289      	uxth	r1, r1
 8014a78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014a7c:	4285      	cmp	r5, r0
 8014a7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014a82:	f84c 1b04 	str.w	r1, [ip], #4
 8014a86:	dcec      	bgt.n	8014a62 <__multadd+0x12>
 8014a88:	b30e      	cbz	r6, 8014ace <__multadd+0x7e>
 8014a8a:	68a3      	ldr	r3, [r4, #8]
 8014a8c:	42ab      	cmp	r3, r5
 8014a8e:	dc19      	bgt.n	8014ac4 <__multadd+0x74>
 8014a90:	6861      	ldr	r1, [r4, #4]
 8014a92:	4638      	mov	r0, r7
 8014a94:	3101      	adds	r1, #1
 8014a96:	f7ff ff79 	bl	801498c <_Balloc>
 8014a9a:	4680      	mov	r8, r0
 8014a9c:	b928      	cbnz	r0, 8014aaa <__multadd+0x5a>
 8014a9e:	4602      	mov	r2, r0
 8014aa0:	21b5      	movs	r1, #181	; 0xb5
 8014aa2:	4b0c      	ldr	r3, [pc, #48]	; (8014ad4 <__multadd+0x84>)
 8014aa4:	480c      	ldr	r0, [pc, #48]	; (8014ad8 <__multadd+0x88>)
 8014aa6:	f001 f907 	bl	8015cb8 <__assert_func>
 8014aaa:	6922      	ldr	r2, [r4, #16]
 8014aac:	f104 010c 	add.w	r1, r4, #12
 8014ab0:	3202      	adds	r2, #2
 8014ab2:	0092      	lsls	r2, r2, #2
 8014ab4:	300c      	adds	r0, #12
 8014ab6:	f7fc feff 	bl	80118b8 <memcpy>
 8014aba:	4621      	mov	r1, r4
 8014abc:	4638      	mov	r0, r7
 8014abe:	f7ff ffa5 	bl	8014a0c <_Bfree>
 8014ac2:	4644      	mov	r4, r8
 8014ac4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014ac8:	3501      	adds	r5, #1
 8014aca:	615e      	str	r6, [r3, #20]
 8014acc:	6125      	str	r5, [r4, #16]
 8014ace:	4620      	mov	r0, r4
 8014ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ad4:	08018470 	.word	0x08018470
 8014ad8:	08018560 	.word	0x08018560

08014adc <__s2b>:
 8014adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ae0:	4615      	mov	r5, r2
 8014ae2:	2209      	movs	r2, #9
 8014ae4:	461f      	mov	r7, r3
 8014ae6:	3308      	adds	r3, #8
 8014ae8:	460c      	mov	r4, r1
 8014aea:	fb93 f3f2 	sdiv	r3, r3, r2
 8014aee:	4606      	mov	r6, r0
 8014af0:	2201      	movs	r2, #1
 8014af2:	2100      	movs	r1, #0
 8014af4:	429a      	cmp	r2, r3
 8014af6:	db09      	blt.n	8014b0c <__s2b+0x30>
 8014af8:	4630      	mov	r0, r6
 8014afa:	f7ff ff47 	bl	801498c <_Balloc>
 8014afe:	b940      	cbnz	r0, 8014b12 <__s2b+0x36>
 8014b00:	4602      	mov	r2, r0
 8014b02:	21ce      	movs	r1, #206	; 0xce
 8014b04:	4b18      	ldr	r3, [pc, #96]	; (8014b68 <__s2b+0x8c>)
 8014b06:	4819      	ldr	r0, [pc, #100]	; (8014b6c <__s2b+0x90>)
 8014b08:	f001 f8d6 	bl	8015cb8 <__assert_func>
 8014b0c:	0052      	lsls	r2, r2, #1
 8014b0e:	3101      	adds	r1, #1
 8014b10:	e7f0      	b.n	8014af4 <__s2b+0x18>
 8014b12:	9b08      	ldr	r3, [sp, #32]
 8014b14:	2d09      	cmp	r5, #9
 8014b16:	6143      	str	r3, [r0, #20]
 8014b18:	f04f 0301 	mov.w	r3, #1
 8014b1c:	6103      	str	r3, [r0, #16]
 8014b1e:	dd16      	ble.n	8014b4e <__s2b+0x72>
 8014b20:	f104 0909 	add.w	r9, r4, #9
 8014b24:	46c8      	mov	r8, r9
 8014b26:	442c      	add	r4, r5
 8014b28:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014b2c:	4601      	mov	r1, r0
 8014b2e:	220a      	movs	r2, #10
 8014b30:	4630      	mov	r0, r6
 8014b32:	3b30      	subs	r3, #48	; 0x30
 8014b34:	f7ff ff8c 	bl	8014a50 <__multadd>
 8014b38:	45a0      	cmp	r8, r4
 8014b3a:	d1f5      	bne.n	8014b28 <__s2b+0x4c>
 8014b3c:	f1a5 0408 	sub.w	r4, r5, #8
 8014b40:	444c      	add	r4, r9
 8014b42:	1b2d      	subs	r5, r5, r4
 8014b44:	1963      	adds	r3, r4, r5
 8014b46:	42bb      	cmp	r3, r7
 8014b48:	db04      	blt.n	8014b54 <__s2b+0x78>
 8014b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b4e:	2509      	movs	r5, #9
 8014b50:	340a      	adds	r4, #10
 8014b52:	e7f6      	b.n	8014b42 <__s2b+0x66>
 8014b54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014b58:	4601      	mov	r1, r0
 8014b5a:	220a      	movs	r2, #10
 8014b5c:	4630      	mov	r0, r6
 8014b5e:	3b30      	subs	r3, #48	; 0x30
 8014b60:	f7ff ff76 	bl	8014a50 <__multadd>
 8014b64:	e7ee      	b.n	8014b44 <__s2b+0x68>
 8014b66:	bf00      	nop
 8014b68:	08018470 	.word	0x08018470
 8014b6c:	08018560 	.word	0x08018560

08014b70 <__hi0bits>:
 8014b70:	0c02      	lsrs	r2, r0, #16
 8014b72:	0412      	lsls	r2, r2, #16
 8014b74:	4603      	mov	r3, r0
 8014b76:	b9ca      	cbnz	r2, 8014bac <__hi0bits+0x3c>
 8014b78:	0403      	lsls	r3, r0, #16
 8014b7a:	2010      	movs	r0, #16
 8014b7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014b80:	bf04      	itt	eq
 8014b82:	021b      	lsleq	r3, r3, #8
 8014b84:	3008      	addeq	r0, #8
 8014b86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014b8a:	bf04      	itt	eq
 8014b8c:	011b      	lsleq	r3, r3, #4
 8014b8e:	3004      	addeq	r0, #4
 8014b90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014b94:	bf04      	itt	eq
 8014b96:	009b      	lsleq	r3, r3, #2
 8014b98:	3002      	addeq	r0, #2
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	db05      	blt.n	8014baa <__hi0bits+0x3a>
 8014b9e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8014ba2:	f100 0001 	add.w	r0, r0, #1
 8014ba6:	bf08      	it	eq
 8014ba8:	2020      	moveq	r0, #32
 8014baa:	4770      	bx	lr
 8014bac:	2000      	movs	r0, #0
 8014bae:	e7e5      	b.n	8014b7c <__hi0bits+0xc>

08014bb0 <__lo0bits>:
 8014bb0:	6803      	ldr	r3, [r0, #0]
 8014bb2:	4602      	mov	r2, r0
 8014bb4:	f013 0007 	ands.w	r0, r3, #7
 8014bb8:	d00b      	beq.n	8014bd2 <__lo0bits+0x22>
 8014bba:	07d9      	lsls	r1, r3, #31
 8014bbc:	d421      	bmi.n	8014c02 <__lo0bits+0x52>
 8014bbe:	0798      	lsls	r0, r3, #30
 8014bc0:	bf49      	itett	mi
 8014bc2:	085b      	lsrmi	r3, r3, #1
 8014bc4:	089b      	lsrpl	r3, r3, #2
 8014bc6:	2001      	movmi	r0, #1
 8014bc8:	6013      	strmi	r3, [r2, #0]
 8014bca:	bf5c      	itt	pl
 8014bcc:	2002      	movpl	r0, #2
 8014bce:	6013      	strpl	r3, [r2, #0]
 8014bd0:	4770      	bx	lr
 8014bd2:	b299      	uxth	r1, r3
 8014bd4:	b909      	cbnz	r1, 8014bda <__lo0bits+0x2a>
 8014bd6:	2010      	movs	r0, #16
 8014bd8:	0c1b      	lsrs	r3, r3, #16
 8014bda:	b2d9      	uxtb	r1, r3
 8014bdc:	b909      	cbnz	r1, 8014be2 <__lo0bits+0x32>
 8014bde:	3008      	adds	r0, #8
 8014be0:	0a1b      	lsrs	r3, r3, #8
 8014be2:	0719      	lsls	r1, r3, #28
 8014be4:	bf04      	itt	eq
 8014be6:	091b      	lsreq	r3, r3, #4
 8014be8:	3004      	addeq	r0, #4
 8014bea:	0799      	lsls	r1, r3, #30
 8014bec:	bf04      	itt	eq
 8014bee:	089b      	lsreq	r3, r3, #2
 8014bf0:	3002      	addeq	r0, #2
 8014bf2:	07d9      	lsls	r1, r3, #31
 8014bf4:	d403      	bmi.n	8014bfe <__lo0bits+0x4e>
 8014bf6:	085b      	lsrs	r3, r3, #1
 8014bf8:	f100 0001 	add.w	r0, r0, #1
 8014bfc:	d003      	beq.n	8014c06 <__lo0bits+0x56>
 8014bfe:	6013      	str	r3, [r2, #0]
 8014c00:	4770      	bx	lr
 8014c02:	2000      	movs	r0, #0
 8014c04:	4770      	bx	lr
 8014c06:	2020      	movs	r0, #32
 8014c08:	4770      	bx	lr
	...

08014c0c <__i2b>:
 8014c0c:	b510      	push	{r4, lr}
 8014c0e:	460c      	mov	r4, r1
 8014c10:	2101      	movs	r1, #1
 8014c12:	f7ff febb 	bl	801498c <_Balloc>
 8014c16:	4602      	mov	r2, r0
 8014c18:	b928      	cbnz	r0, 8014c26 <__i2b+0x1a>
 8014c1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014c1e:	4b04      	ldr	r3, [pc, #16]	; (8014c30 <__i2b+0x24>)
 8014c20:	4804      	ldr	r0, [pc, #16]	; (8014c34 <__i2b+0x28>)
 8014c22:	f001 f849 	bl	8015cb8 <__assert_func>
 8014c26:	2301      	movs	r3, #1
 8014c28:	6144      	str	r4, [r0, #20]
 8014c2a:	6103      	str	r3, [r0, #16]
 8014c2c:	bd10      	pop	{r4, pc}
 8014c2e:	bf00      	nop
 8014c30:	08018470 	.word	0x08018470
 8014c34:	08018560 	.word	0x08018560

08014c38 <__multiply>:
 8014c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c3c:	4691      	mov	r9, r2
 8014c3e:	690a      	ldr	r2, [r1, #16]
 8014c40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014c44:	460c      	mov	r4, r1
 8014c46:	429a      	cmp	r2, r3
 8014c48:	bfbe      	ittt	lt
 8014c4a:	460b      	movlt	r3, r1
 8014c4c:	464c      	movlt	r4, r9
 8014c4e:	4699      	movlt	r9, r3
 8014c50:	6927      	ldr	r7, [r4, #16]
 8014c52:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014c56:	68a3      	ldr	r3, [r4, #8]
 8014c58:	6861      	ldr	r1, [r4, #4]
 8014c5a:	eb07 060a 	add.w	r6, r7, sl
 8014c5e:	42b3      	cmp	r3, r6
 8014c60:	b085      	sub	sp, #20
 8014c62:	bfb8      	it	lt
 8014c64:	3101      	addlt	r1, #1
 8014c66:	f7ff fe91 	bl	801498c <_Balloc>
 8014c6a:	b930      	cbnz	r0, 8014c7a <__multiply+0x42>
 8014c6c:	4602      	mov	r2, r0
 8014c6e:	f240 115d 	movw	r1, #349	; 0x15d
 8014c72:	4b43      	ldr	r3, [pc, #268]	; (8014d80 <__multiply+0x148>)
 8014c74:	4843      	ldr	r0, [pc, #268]	; (8014d84 <__multiply+0x14c>)
 8014c76:	f001 f81f 	bl	8015cb8 <__assert_func>
 8014c7a:	f100 0514 	add.w	r5, r0, #20
 8014c7e:	462b      	mov	r3, r5
 8014c80:	2200      	movs	r2, #0
 8014c82:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014c86:	4543      	cmp	r3, r8
 8014c88:	d321      	bcc.n	8014cce <__multiply+0x96>
 8014c8a:	f104 0314 	add.w	r3, r4, #20
 8014c8e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014c92:	f109 0314 	add.w	r3, r9, #20
 8014c96:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014c9a:	9202      	str	r2, [sp, #8]
 8014c9c:	1b3a      	subs	r2, r7, r4
 8014c9e:	3a15      	subs	r2, #21
 8014ca0:	f022 0203 	bic.w	r2, r2, #3
 8014ca4:	3204      	adds	r2, #4
 8014ca6:	f104 0115 	add.w	r1, r4, #21
 8014caa:	428f      	cmp	r7, r1
 8014cac:	bf38      	it	cc
 8014cae:	2204      	movcc	r2, #4
 8014cb0:	9201      	str	r2, [sp, #4]
 8014cb2:	9a02      	ldr	r2, [sp, #8]
 8014cb4:	9303      	str	r3, [sp, #12]
 8014cb6:	429a      	cmp	r2, r3
 8014cb8:	d80c      	bhi.n	8014cd4 <__multiply+0x9c>
 8014cba:	2e00      	cmp	r6, #0
 8014cbc:	dd03      	ble.n	8014cc6 <__multiply+0x8e>
 8014cbe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d059      	beq.n	8014d7a <__multiply+0x142>
 8014cc6:	6106      	str	r6, [r0, #16]
 8014cc8:	b005      	add	sp, #20
 8014cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cce:	f843 2b04 	str.w	r2, [r3], #4
 8014cd2:	e7d8      	b.n	8014c86 <__multiply+0x4e>
 8014cd4:	f8b3 a000 	ldrh.w	sl, [r3]
 8014cd8:	f1ba 0f00 	cmp.w	sl, #0
 8014cdc:	d023      	beq.n	8014d26 <__multiply+0xee>
 8014cde:	46a9      	mov	r9, r5
 8014ce0:	f04f 0c00 	mov.w	ip, #0
 8014ce4:	f104 0e14 	add.w	lr, r4, #20
 8014ce8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014cec:	f8d9 1000 	ldr.w	r1, [r9]
 8014cf0:	fa1f fb82 	uxth.w	fp, r2
 8014cf4:	b289      	uxth	r1, r1
 8014cf6:	fb0a 110b 	mla	r1, sl, fp, r1
 8014cfa:	4461      	add	r1, ip
 8014cfc:	f8d9 c000 	ldr.w	ip, [r9]
 8014d00:	0c12      	lsrs	r2, r2, #16
 8014d02:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8014d06:	fb0a c202 	mla	r2, sl, r2, ip
 8014d0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014d0e:	b289      	uxth	r1, r1
 8014d10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014d14:	4577      	cmp	r7, lr
 8014d16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014d1a:	f849 1b04 	str.w	r1, [r9], #4
 8014d1e:	d8e3      	bhi.n	8014ce8 <__multiply+0xb0>
 8014d20:	9a01      	ldr	r2, [sp, #4]
 8014d22:	f845 c002 	str.w	ip, [r5, r2]
 8014d26:	9a03      	ldr	r2, [sp, #12]
 8014d28:	3304      	adds	r3, #4
 8014d2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014d2e:	f1b9 0f00 	cmp.w	r9, #0
 8014d32:	d020      	beq.n	8014d76 <__multiply+0x13e>
 8014d34:	46ae      	mov	lr, r5
 8014d36:	f04f 0a00 	mov.w	sl, #0
 8014d3a:	6829      	ldr	r1, [r5, #0]
 8014d3c:	f104 0c14 	add.w	ip, r4, #20
 8014d40:	f8bc b000 	ldrh.w	fp, [ip]
 8014d44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014d48:	b289      	uxth	r1, r1
 8014d4a:	fb09 220b 	mla	r2, r9, fp, r2
 8014d4e:	4492      	add	sl, r2
 8014d50:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014d54:	f84e 1b04 	str.w	r1, [lr], #4
 8014d58:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014d5c:	f8be 1000 	ldrh.w	r1, [lr]
 8014d60:	0c12      	lsrs	r2, r2, #16
 8014d62:	fb09 1102 	mla	r1, r9, r2, r1
 8014d66:	4567      	cmp	r7, ip
 8014d68:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8014d6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014d70:	d8e6      	bhi.n	8014d40 <__multiply+0x108>
 8014d72:	9a01      	ldr	r2, [sp, #4]
 8014d74:	50a9      	str	r1, [r5, r2]
 8014d76:	3504      	adds	r5, #4
 8014d78:	e79b      	b.n	8014cb2 <__multiply+0x7a>
 8014d7a:	3e01      	subs	r6, #1
 8014d7c:	e79d      	b.n	8014cba <__multiply+0x82>
 8014d7e:	bf00      	nop
 8014d80:	08018470 	.word	0x08018470
 8014d84:	08018560 	.word	0x08018560

08014d88 <__pow5mult>:
 8014d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d8c:	4615      	mov	r5, r2
 8014d8e:	f012 0203 	ands.w	r2, r2, #3
 8014d92:	4606      	mov	r6, r0
 8014d94:	460f      	mov	r7, r1
 8014d96:	d007      	beq.n	8014da8 <__pow5mult+0x20>
 8014d98:	4c25      	ldr	r4, [pc, #148]	; (8014e30 <__pow5mult+0xa8>)
 8014d9a:	3a01      	subs	r2, #1
 8014d9c:	2300      	movs	r3, #0
 8014d9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014da2:	f7ff fe55 	bl	8014a50 <__multadd>
 8014da6:	4607      	mov	r7, r0
 8014da8:	10ad      	asrs	r5, r5, #2
 8014daa:	d03d      	beq.n	8014e28 <__pow5mult+0xa0>
 8014dac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014dae:	b97c      	cbnz	r4, 8014dd0 <__pow5mult+0x48>
 8014db0:	2010      	movs	r0, #16
 8014db2:	f7ff fdc3 	bl	801493c <malloc>
 8014db6:	4602      	mov	r2, r0
 8014db8:	6270      	str	r0, [r6, #36]	; 0x24
 8014dba:	b928      	cbnz	r0, 8014dc8 <__pow5mult+0x40>
 8014dbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014dc0:	4b1c      	ldr	r3, [pc, #112]	; (8014e34 <__pow5mult+0xac>)
 8014dc2:	481d      	ldr	r0, [pc, #116]	; (8014e38 <__pow5mult+0xb0>)
 8014dc4:	f000 ff78 	bl	8015cb8 <__assert_func>
 8014dc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014dcc:	6004      	str	r4, [r0, #0]
 8014dce:	60c4      	str	r4, [r0, #12]
 8014dd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014dd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014dd8:	b94c      	cbnz	r4, 8014dee <__pow5mult+0x66>
 8014dda:	f240 2171 	movw	r1, #625	; 0x271
 8014dde:	4630      	mov	r0, r6
 8014de0:	f7ff ff14 	bl	8014c0c <__i2b>
 8014de4:	2300      	movs	r3, #0
 8014de6:	4604      	mov	r4, r0
 8014de8:	f8c8 0008 	str.w	r0, [r8, #8]
 8014dec:	6003      	str	r3, [r0, #0]
 8014dee:	f04f 0900 	mov.w	r9, #0
 8014df2:	07eb      	lsls	r3, r5, #31
 8014df4:	d50a      	bpl.n	8014e0c <__pow5mult+0x84>
 8014df6:	4639      	mov	r1, r7
 8014df8:	4622      	mov	r2, r4
 8014dfa:	4630      	mov	r0, r6
 8014dfc:	f7ff ff1c 	bl	8014c38 <__multiply>
 8014e00:	4680      	mov	r8, r0
 8014e02:	4639      	mov	r1, r7
 8014e04:	4630      	mov	r0, r6
 8014e06:	f7ff fe01 	bl	8014a0c <_Bfree>
 8014e0a:	4647      	mov	r7, r8
 8014e0c:	106d      	asrs	r5, r5, #1
 8014e0e:	d00b      	beq.n	8014e28 <__pow5mult+0xa0>
 8014e10:	6820      	ldr	r0, [r4, #0]
 8014e12:	b938      	cbnz	r0, 8014e24 <__pow5mult+0x9c>
 8014e14:	4622      	mov	r2, r4
 8014e16:	4621      	mov	r1, r4
 8014e18:	4630      	mov	r0, r6
 8014e1a:	f7ff ff0d 	bl	8014c38 <__multiply>
 8014e1e:	6020      	str	r0, [r4, #0]
 8014e20:	f8c0 9000 	str.w	r9, [r0]
 8014e24:	4604      	mov	r4, r0
 8014e26:	e7e4      	b.n	8014df2 <__pow5mult+0x6a>
 8014e28:	4638      	mov	r0, r7
 8014e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e2e:	bf00      	nop
 8014e30:	080186b0 	.word	0x080186b0
 8014e34:	080183fe 	.word	0x080183fe
 8014e38:	08018560 	.word	0x08018560

08014e3c <__lshift>:
 8014e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e40:	460c      	mov	r4, r1
 8014e42:	4607      	mov	r7, r0
 8014e44:	4691      	mov	r9, r2
 8014e46:	6923      	ldr	r3, [r4, #16]
 8014e48:	6849      	ldr	r1, [r1, #4]
 8014e4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014e4e:	68a3      	ldr	r3, [r4, #8]
 8014e50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014e54:	f108 0601 	add.w	r6, r8, #1
 8014e58:	42b3      	cmp	r3, r6
 8014e5a:	db0b      	blt.n	8014e74 <__lshift+0x38>
 8014e5c:	4638      	mov	r0, r7
 8014e5e:	f7ff fd95 	bl	801498c <_Balloc>
 8014e62:	4605      	mov	r5, r0
 8014e64:	b948      	cbnz	r0, 8014e7a <__lshift+0x3e>
 8014e66:	4602      	mov	r2, r0
 8014e68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014e6c:	4b29      	ldr	r3, [pc, #164]	; (8014f14 <__lshift+0xd8>)
 8014e6e:	482a      	ldr	r0, [pc, #168]	; (8014f18 <__lshift+0xdc>)
 8014e70:	f000 ff22 	bl	8015cb8 <__assert_func>
 8014e74:	3101      	adds	r1, #1
 8014e76:	005b      	lsls	r3, r3, #1
 8014e78:	e7ee      	b.n	8014e58 <__lshift+0x1c>
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	f100 0114 	add.w	r1, r0, #20
 8014e80:	f100 0210 	add.w	r2, r0, #16
 8014e84:	4618      	mov	r0, r3
 8014e86:	4553      	cmp	r3, sl
 8014e88:	db37      	blt.n	8014efa <__lshift+0xbe>
 8014e8a:	6920      	ldr	r0, [r4, #16]
 8014e8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014e90:	f104 0314 	add.w	r3, r4, #20
 8014e94:	f019 091f 	ands.w	r9, r9, #31
 8014e98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014e9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014ea0:	d02f      	beq.n	8014f02 <__lshift+0xc6>
 8014ea2:	468a      	mov	sl, r1
 8014ea4:	f04f 0c00 	mov.w	ip, #0
 8014ea8:	f1c9 0e20 	rsb	lr, r9, #32
 8014eac:	681a      	ldr	r2, [r3, #0]
 8014eae:	fa02 f209 	lsl.w	r2, r2, r9
 8014eb2:	ea42 020c 	orr.w	r2, r2, ip
 8014eb6:	f84a 2b04 	str.w	r2, [sl], #4
 8014eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ebe:	4298      	cmp	r0, r3
 8014ec0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014ec4:	d8f2      	bhi.n	8014eac <__lshift+0x70>
 8014ec6:	1b03      	subs	r3, r0, r4
 8014ec8:	3b15      	subs	r3, #21
 8014eca:	f023 0303 	bic.w	r3, r3, #3
 8014ece:	3304      	adds	r3, #4
 8014ed0:	f104 0215 	add.w	r2, r4, #21
 8014ed4:	4290      	cmp	r0, r2
 8014ed6:	bf38      	it	cc
 8014ed8:	2304      	movcc	r3, #4
 8014eda:	f841 c003 	str.w	ip, [r1, r3]
 8014ede:	f1bc 0f00 	cmp.w	ip, #0
 8014ee2:	d001      	beq.n	8014ee8 <__lshift+0xac>
 8014ee4:	f108 0602 	add.w	r6, r8, #2
 8014ee8:	3e01      	subs	r6, #1
 8014eea:	4638      	mov	r0, r7
 8014eec:	4621      	mov	r1, r4
 8014eee:	612e      	str	r6, [r5, #16]
 8014ef0:	f7ff fd8c 	bl	8014a0c <_Bfree>
 8014ef4:	4628      	mov	r0, r5
 8014ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014efa:	f842 0f04 	str.w	r0, [r2, #4]!
 8014efe:	3301      	adds	r3, #1
 8014f00:	e7c1      	b.n	8014e86 <__lshift+0x4a>
 8014f02:	3904      	subs	r1, #4
 8014f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f08:	4298      	cmp	r0, r3
 8014f0a:	f841 2f04 	str.w	r2, [r1, #4]!
 8014f0e:	d8f9      	bhi.n	8014f04 <__lshift+0xc8>
 8014f10:	e7ea      	b.n	8014ee8 <__lshift+0xac>
 8014f12:	bf00      	nop
 8014f14:	08018470 	.word	0x08018470
 8014f18:	08018560 	.word	0x08018560

08014f1c <__mcmp>:
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	690a      	ldr	r2, [r1, #16]
 8014f20:	6900      	ldr	r0, [r0, #16]
 8014f22:	b530      	push	{r4, r5, lr}
 8014f24:	1a80      	subs	r0, r0, r2
 8014f26:	d10d      	bne.n	8014f44 <__mcmp+0x28>
 8014f28:	3314      	adds	r3, #20
 8014f2a:	3114      	adds	r1, #20
 8014f2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014f30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014f34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014f38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014f3c:	4295      	cmp	r5, r2
 8014f3e:	d002      	beq.n	8014f46 <__mcmp+0x2a>
 8014f40:	d304      	bcc.n	8014f4c <__mcmp+0x30>
 8014f42:	2001      	movs	r0, #1
 8014f44:	bd30      	pop	{r4, r5, pc}
 8014f46:	42a3      	cmp	r3, r4
 8014f48:	d3f4      	bcc.n	8014f34 <__mcmp+0x18>
 8014f4a:	e7fb      	b.n	8014f44 <__mcmp+0x28>
 8014f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f50:	e7f8      	b.n	8014f44 <__mcmp+0x28>
	...

08014f54 <__mdiff>:
 8014f54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f58:	460d      	mov	r5, r1
 8014f5a:	4607      	mov	r7, r0
 8014f5c:	4611      	mov	r1, r2
 8014f5e:	4628      	mov	r0, r5
 8014f60:	4614      	mov	r4, r2
 8014f62:	f7ff ffdb 	bl	8014f1c <__mcmp>
 8014f66:	1e06      	subs	r6, r0, #0
 8014f68:	d111      	bne.n	8014f8e <__mdiff+0x3a>
 8014f6a:	4631      	mov	r1, r6
 8014f6c:	4638      	mov	r0, r7
 8014f6e:	f7ff fd0d 	bl	801498c <_Balloc>
 8014f72:	4602      	mov	r2, r0
 8014f74:	b928      	cbnz	r0, 8014f82 <__mdiff+0x2e>
 8014f76:	f240 2132 	movw	r1, #562	; 0x232
 8014f7a:	4b3a      	ldr	r3, [pc, #232]	; (8015064 <__mdiff+0x110>)
 8014f7c:	483a      	ldr	r0, [pc, #232]	; (8015068 <__mdiff+0x114>)
 8014f7e:	f000 fe9b 	bl	8015cb8 <__assert_func>
 8014f82:	2301      	movs	r3, #1
 8014f84:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014f88:	4610      	mov	r0, r2
 8014f8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f8e:	bfa4      	itt	ge
 8014f90:	4623      	movge	r3, r4
 8014f92:	462c      	movge	r4, r5
 8014f94:	4638      	mov	r0, r7
 8014f96:	6861      	ldr	r1, [r4, #4]
 8014f98:	bfa6      	itte	ge
 8014f9a:	461d      	movge	r5, r3
 8014f9c:	2600      	movge	r6, #0
 8014f9e:	2601      	movlt	r6, #1
 8014fa0:	f7ff fcf4 	bl	801498c <_Balloc>
 8014fa4:	4602      	mov	r2, r0
 8014fa6:	b918      	cbnz	r0, 8014fb0 <__mdiff+0x5c>
 8014fa8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014fac:	4b2d      	ldr	r3, [pc, #180]	; (8015064 <__mdiff+0x110>)
 8014fae:	e7e5      	b.n	8014f7c <__mdiff+0x28>
 8014fb0:	f102 0814 	add.w	r8, r2, #20
 8014fb4:	46c2      	mov	sl, r8
 8014fb6:	f04f 0c00 	mov.w	ip, #0
 8014fba:	6927      	ldr	r7, [r4, #16]
 8014fbc:	60c6      	str	r6, [r0, #12]
 8014fbe:	692e      	ldr	r6, [r5, #16]
 8014fc0:	f104 0014 	add.w	r0, r4, #20
 8014fc4:	f105 0914 	add.w	r9, r5, #20
 8014fc8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8014fcc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014fd0:	3410      	adds	r4, #16
 8014fd2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8014fd6:	f859 3b04 	ldr.w	r3, [r9], #4
 8014fda:	fa1f f18b 	uxth.w	r1, fp
 8014fde:	448c      	add	ip, r1
 8014fe0:	b299      	uxth	r1, r3
 8014fe2:	0c1b      	lsrs	r3, r3, #16
 8014fe4:	ebac 0101 	sub.w	r1, ip, r1
 8014fe8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014fec:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014ff0:	b289      	uxth	r1, r1
 8014ff2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8014ff6:	454e      	cmp	r6, r9
 8014ff8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014ffc:	f84a 3b04 	str.w	r3, [sl], #4
 8015000:	d8e7      	bhi.n	8014fd2 <__mdiff+0x7e>
 8015002:	1b73      	subs	r3, r6, r5
 8015004:	3b15      	subs	r3, #21
 8015006:	f023 0303 	bic.w	r3, r3, #3
 801500a:	3515      	adds	r5, #21
 801500c:	3304      	adds	r3, #4
 801500e:	42ae      	cmp	r6, r5
 8015010:	bf38      	it	cc
 8015012:	2304      	movcc	r3, #4
 8015014:	4418      	add	r0, r3
 8015016:	4443      	add	r3, r8
 8015018:	461e      	mov	r6, r3
 801501a:	4605      	mov	r5, r0
 801501c:	4575      	cmp	r5, lr
 801501e:	d30e      	bcc.n	801503e <__mdiff+0xea>
 8015020:	f10e 0103 	add.w	r1, lr, #3
 8015024:	1a09      	subs	r1, r1, r0
 8015026:	f021 0103 	bic.w	r1, r1, #3
 801502a:	3803      	subs	r0, #3
 801502c:	4586      	cmp	lr, r0
 801502e:	bf38      	it	cc
 8015030:	2100      	movcc	r1, #0
 8015032:	4419      	add	r1, r3
 8015034:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8015038:	b18b      	cbz	r3, 801505e <__mdiff+0x10a>
 801503a:	6117      	str	r7, [r2, #16]
 801503c:	e7a4      	b.n	8014f88 <__mdiff+0x34>
 801503e:	f855 8b04 	ldr.w	r8, [r5], #4
 8015042:	fa1f f188 	uxth.w	r1, r8
 8015046:	4461      	add	r1, ip
 8015048:	140c      	asrs	r4, r1, #16
 801504a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801504e:	b289      	uxth	r1, r1
 8015050:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015054:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8015058:	f846 1b04 	str.w	r1, [r6], #4
 801505c:	e7de      	b.n	801501c <__mdiff+0xc8>
 801505e:	3f01      	subs	r7, #1
 8015060:	e7e8      	b.n	8015034 <__mdiff+0xe0>
 8015062:	bf00      	nop
 8015064:	08018470 	.word	0x08018470
 8015068:	08018560 	.word	0x08018560

0801506c <__ulp>:
 801506c:	4b11      	ldr	r3, [pc, #68]	; (80150b4 <__ulp+0x48>)
 801506e:	400b      	ands	r3, r1
 8015070:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8015074:	2b00      	cmp	r3, #0
 8015076:	dd02      	ble.n	801507e <__ulp+0x12>
 8015078:	2000      	movs	r0, #0
 801507a:	4619      	mov	r1, r3
 801507c:	4770      	bx	lr
 801507e:	425b      	negs	r3, r3
 8015080:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8015084:	f04f 0000 	mov.w	r0, #0
 8015088:	f04f 0100 	mov.w	r1, #0
 801508c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015090:	da04      	bge.n	801509c <__ulp+0x30>
 8015092:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015096:	fa43 f102 	asr.w	r1, r3, r2
 801509a:	4770      	bx	lr
 801509c:	f1a2 0314 	sub.w	r3, r2, #20
 80150a0:	2b1e      	cmp	r3, #30
 80150a2:	bfd6      	itet	le
 80150a4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80150a8:	2301      	movgt	r3, #1
 80150aa:	fa22 f303 	lsrle.w	r3, r2, r3
 80150ae:	4618      	mov	r0, r3
 80150b0:	4770      	bx	lr
 80150b2:	bf00      	nop
 80150b4:	7ff00000 	.word	0x7ff00000

080150b8 <__b2d>:
 80150b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150bc:	6907      	ldr	r7, [r0, #16]
 80150be:	f100 0914 	add.w	r9, r0, #20
 80150c2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80150c6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80150ca:	f1a7 0804 	sub.w	r8, r7, #4
 80150ce:	4630      	mov	r0, r6
 80150d0:	f7ff fd4e 	bl	8014b70 <__hi0bits>
 80150d4:	f1c0 0320 	rsb	r3, r0, #32
 80150d8:	280a      	cmp	r0, #10
 80150da:	600b      	str	r3, [r1, #0]
 80150dc:	491f      	ldr	r1, [pc, #124]	; (801515c <__b2d+0xa4>)
 80150de:	dc17      	bgt.n	8015110 <__b2d+0x58>
 80150e0:	45c1      	cmp	r9, r8
 80150e2:	bf28      	it	cs
 80150e4:	2200      	movcs	r2, #0
 80150e6:	f1c0 0c0b 	rsb	ip, r0, #11
 80150ea:	fa26 f30c 	lsr.w	r3, r6, ip
 80150ee:	bf38      	it	cc
 80150f0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80150f4:	ea43 0501 	orr.w	r5, r3, r1
 80150f8:	f100 0315 	add.w	r3, r0, #21
 80150fc:	fa06 f303 	lsl.w	r3, r6, r3
 8015100:	fa22 f20c 	lsr.w	r2, r2, ip
 8015104:	ea43 0402 	orr.w	r4, r3, r2
 8015108:	4620      	mov	r0, r4
 801510a:	4629      	mov	r1, r5
 801510c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015110:	45c1      	cmp	r9, r8
 8015112:	bf2e      	itee	cs
 8015114:	2200      	movcs	r2, #0
 8015116:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801511a:	f1a7 0808 	subcc.w	r8, r7, #8
 801511e:	f1b0 030b 	subs.w	r3, r0, #11
 8015122:	d016      	beq.n	8015152 <__b2d+0x9a>
 8015124:	f1c3 0720 	rsb	r7, r3, #32
 8015128:	fa22 f107 	lsr.w	r1, r2, r7
 801512c:	45c8      	cmp	r8, r9
 801512e:	fa06 f603 	lsl.w	r6, r6, r3
 8015132:	ea46 0601 	orr.w	r6, r6, r1
 8015136:	bf94      	ite	ls
 8015138:	2100      	movls	r1, #0
 801513a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 801513e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8015142:	fa02 f003 	lsl.w	r0, r2, r3
 8015146:	40f9      	lsrs	r1, r7
 8015148:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801514c:	ea40 0401 	orr.w	r4, r0, r1
 8015150:	e7da      	b.n	8015108 <__b2d+0x50>
 8015152:	4614      	mov	r4, r2
 8015154:	ea46 0501 	orr.w	r5, r6, r1
 8015158:	e7d6      	b.n	8015108 <__b2d+0x50>
 801515a:	bf00      	nop
 801515c:	3ff00000 	.word	0x3ff00000

08015160 <__d2b>:
 8015160:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015164:	2101      	movs	r1, #1
 8015166:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801516a:	4690      	mov	r8, r2
 801516c:	461d      	mov	r5, r3
 801516e:	f7ff fc0d 	bl	801498c <_Balloc>
 8015172:	4604      	mov	r4, r0
 8015174:	b930      	cbnz	r0, 8015184 <__d2b+0x24>
 8015176:	4602      	mov	r2, r0
 8015178:	f240 310a 	movw	r1, #778	; 0x30a
 801517c:	4b24      	ldr	r3, [pc, #144]	; (8015210 <__d2b+0xb0>)
 801517e:	4825      	ldr	r0, [pc, #148]	; (8015214 <__d2b+0xb4>)
 8015180:	f000 fd9a 	bl	8015cb8 <__assert_func>
 8015184:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8015188:	f3c5 550a 	ubfx	r5, r5, #20, #11
 801518c:	bb2d      	cbnz	r5, 80151da <__d2b+0x7a>
 801518e:	9301      	str	r3, [sp, #4]
 8015190:	f1b8 0300 	subs.w	r3, r8, #0
 8015194:	d026      	beq.n	80151e4 <__d2b+0x84>
 8015196:	4668      	mov	r0, sp
 8015198:	9300      	str	r3, [sp, #0]
 801519a:	f7ff fd09 	bl	8014bb0 <__lo0bits>
 801519e:	9900      	ldr	r1, [sp, #0]
 80151a0:	b1f0      	cbz	r0, 80151e0 <__d2b+0x80>
 80151a2:	9a01      	ldr	r2, [sp, #4]
 80151a4:	f1c0 0320 	rsb	r3, r0, #32
 80151a8:	fa02 f303 	lsl.w	r3, r2, r3
 80151ac:	430b      	orrs	r3, r1
 80151ae:	40c2      	lsrs	r2, r0
 80151b0:	6163      	str	r3, [r4, #20]
 80151b2:	9201      	str	r2, [sp, #4]
 80151b4:	9b01      	ldr	r3, [sp, #4]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	bf14      	ite	ne
 80151ba:	2102      	movne	r1, #2
 80151bc:	2101      	moveq	r1, #1
 80151be:	61a3      	str	r3, [r4, #24]
 80151c0:	6121      	str	r1, [r4, #16]
 80151c2:	b1c5      	cbz	r5, 80151f6 <__d2b+0x96>
 80151c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80151c8:	4405      	add	r5, r0
 80151ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80151ce:	603d      	str	r5, [r7, #0]
 80151d0:	6030      	str	r0, [r6, #0]
 80151d2:	4620      	mov	r0, r4
 80151d4:	b002      	add	sp, #8
 80151d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80151de:	e7d6      	b.n	801518e <__d2b+0x2e>
 80151e0:	6161      	str	r1, [r4, #20]
 80151e2:	e7e7      	b.n	80151b4 <__d2b+0x54>
 80151e4:	a801      	add	r0, sp, #4
 80151e6:	f7ff fce3 	bl	8014bb0 <__lo0bits>
 80151ea:	2101      	movs	r1, #1
 80151ec:	9b01      	ldr	r3, [sp, #4]
 80151ee:	6121      	str	r1, [r4, #16]
 80151f0:	6163      	str	r3, [r4, #20]
 80151f2:	3020      	adds	r0, #32
 80151f4:	e7e5      	b.n	80151c2 <__d2b+0x62>
 80151f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80151fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80151fe:	6038      	str	r0, [r7, #0]
 8015200:	6918      	ldr	r0, [r3, #16]
 8015202:	f7ff fcb5 	bl	8014b70 <__hi0bits>
 8015206:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801520a:	6031      	str	r1, [r6, #0]
 801520c:	e7e1      	b.n	80151d2 <__d2b+0x72>
 801520e:	bf00      	nop
 8015210:	08018470 	.word	0x08018470
 8015214:	08018560 	.word	0x08018560

08015218 <__ratio>:
 8015218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801521c:	4688      	mov	r8, r1
 801521e:	4669      	mov	r1, sp
 8015220:	4681      	mov	r9, r0
 8015222:	f7ff ff49 	bl	80150b8 <__b2d>
 8015226:	460f      	mov	r7, r1
 8015228:	4604      	mov	r4, r0
 801522a:	460d      	mov	r5, r1
 801522c:	4640      	mov	r0, r8
 801522e:	a901      	add	r1, sp, #4
 8015230:	f7ff ff42 	bl	80150b8 <__b2d>
 8015234:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015238:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801523c:	468b      	mov	fp, r1
 801523e:	eba3 0c02 	sub.w	ip, r3, r2
 8015242:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015246:	1a9b      	subs	r3, r3, r2
 8015248:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801524c:	2b00      	cmp	r3, #0
 801524e:	bfd5      	itete	le
 8015250:	460a      	movle	r2, r1
 8015252:	462a      	movgt	r2, r5
 8015254:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015258:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801525c:	bfd8      	it	le
 801525e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8015262:	465b      	mov	r3, fp
 8015264:	4602      	mov	r2, r0
 8015266:	4639      	mov	r1, r7
 8015268:	4620      	mov	r0, r4
 801526a:	f7eb faa5 	bl	80007b8 <__aeabi_ddiv>
 801526e:	b003      	add	sp, #12
 8015270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015274 <__copybits>:
 8015274:	3901      	subs	r1, #1
 8015276:	b570      	push	{r4, r5, r6, lr}
 8015278:	1149      	asrs	r1, r1, #5
 801527a:	6914      	ldr	r4, [r2, #16]
 801527c:	3101      	adds	r1, #1
 801527e:	f102 0314 	add.w	r3, r2, #20
 8015282:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015286:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801528a:	1f05      	subs	r5, r0, #4
 801528c:	42a3      	cmp	r3, r4
 801528e:	d30c      	bcc.n	80152aa <__copybits+0x36>
 8015290:	1aa3      	subs	r3, r4, r2
 8015292:	3b11      	subs	r3, #17
 8015294:	f023 0303 	bic.w	r3, r3, #3
 8015298:	3211      	adds	r2, #17
 801529a:	42a2      	cmp	r2, r4
 801529c:	bf88      	it	hi
 801529e:	2300      	movhi	r3, #0
 80152a0:	4418      	add	r0, r3
 80152a2:	2300      	movs	r3, #0
 80152a4:	4288      	cmp	r0, r1
 80152a6:	d305      	bcc.n	80152b4 <__copybits+0x40>
 80152a8:	bd70      	pop	{r4, r5, r6, pc}
 80152aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80152ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80152b2:	e7eb      	b.n	801528c <__copybits+0x18>
 80152b4:	f840 3b04 	str.w	r3, [r0], #4
 80152b8:	e7f4      	b.n	80152a4 <__copybits+0x30>

080152ba <__any_on>:
 80152ba:	f100 0214 	add.w	r2, r0, #20
 80152be:	6900      	ldr	r0, [r0, #16]
 80152c0:	114b      	asrs	r3, r1, #5
 80152c2:	4298      	cmp	r0, r3
 80152c4:	b510      	push	{r4, lr}
 80152c6:	db11      	blt.n	80152ec <__any_on+0x32>
 80152c8:	dd0a      	ble.n	80152e0 <__any_on+0x26>
 80152ca:	f011 011f 	ands.w	r1, r1, #31
 80152ce:	d007      	beq.n	80152e0 <__any_on+0x26>
 80152d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80152d4:	fa24 f001 	lsr.w	r0, r4, r1
 80152d8:	fa00 f101 	lsl.w	r1, r0, r1
 80152dc:	428c      	cmp	r4, r1
 80152de:	d10b      	bne.n	80152f8 <__any_on+0x3e>
 80152e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80152e4:	4293      	cmp	r3, r2
 80152e6:	d803      	bhi.n	80152f0 <__any_on+0x36>
 80152e8:	2000      	movs	r0, #0
 80152ea:	bd10      	pop	{r4, pc}
 80152ec:	4603      	mov	r3, r0
 80152ee:	e7f7      	b.n	80152e0 <__any_on+0x26>
 80152f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80152f4:	2900      	cmp	r1, #0
 80152f6:	d0f5      	beq.n	80152e4 <__any_on+0x2a>
 80152f8:	2001      	movs	r0, #1
 80152fa:	e7f6      	b.n	80152ea <__any_on+0x30>

080152fc <_calloc_r>:
 80152fc:	b570      	push	{r4, r5, r6, lr}
 80152fe:	fba1 5402 	umull	r5, r4, r1, r2
 8015302:	b934      	cbnz	r4, 8015312 <_calloc_r+0x16>
 8015304:	4629      	mov	r1, r5
 8015306:	f000 f875 	bl	80153f4 <_malloc_r>
 801530a:	4606      	mov	r6, r0
 801530c:	b928      	cbnz	r0, 801531a <_calloc_r+0x1e>
 801530e:	4630      	mov	r0, r6
 8015310:	bd70      	pop	{r4, r5, r6, pc}
 8015312:	220c      	movs	r2, #12
 8015314:	2600      	movs	r6, #0
 8015316:	6002      	str	r2, [r0, #0]
 8015318:	e7f9      	b.n	801530e <_calloc_r+0x12>
 801531a:	462a      	mov	r2, r5
 801531c:	4621      	mov	r1, r4
 801531e:	f7fc fad9 	bl	80118d4 <memset>
 8015322:	e7f4      	b.n	801530e <_calloc_r+0x12>

08015324 <_free_r>:
 8015324:	b538      	push	{r3, r4, r5, lr}
 8015326:	4605      	mov	r5, r0
 8015328:	2900      	cmp	r1, #0
 801532a:	d040      	beq.n	80153ae <_free_r+0x8a>
 801532c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015330:	1f0c      	subs	r4, r1, #4
 8015332:	2b00      	cmp	r3, #0
 8015334:	bfb8      	it	lt
 8015336:	18e4      	addlt	r4, r4, r3
 8015338:	f000 fe4e 	bl	8015fd8 <__malloc_lock>
 801533c:	4a1c      	ldr	r2, [pc, #112]	; (80153b0 <_free_r+0x8c>)
 801533e:	6813      	ldr	r3, [r2, #0]
 8015340:	b933      	cbnz	r3, 8015350 <_free_r+0x2c>
 8015342:	6063      	str	r3, [r4, #4]
 8015344:	6014      	str	r4, [r2, #0]
 8015346:	4628      	mov	r0, r5
 8015348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801534c:	f000 be4a 	b.w	8015fe4 <__malloc_unlock>
 8015350:	42a3      	cmp	r3, r4
 8015352:	d908      	bls.n	8015366 <_free_r+0x42>
 8015354:	6820      	ldr	r0, [r4, #0]
 8015356:	1821      	adds	r1, r4, r0
 8015358:	428b      	cmp	r3, r1
 801535a:	bf01      	itttt	eq
 801535c:	6819      	ldreq	r1, [r3, #0]
 801535e:	685b      	ldreq	r3, [r3, #4]
 8015360:	1809      	addeq	r1, r1, r0
 8015362:	6021      	streq	r1, [r4, #0]
 8015364:	e7ed      	b.n	8015342 <_free_r+0x1e>
 8015366:	461a      	mov	r2, r3
 8015368:	685b      	ldr	r3, [r3, #4]
 801536a:	b10b      	cbz	r3, 8015370 <_free_r+0x4c>
 801536c:	42a3      	cmp	r3, r4
 801536e:	d9fa      	bls.n	8015366 <_free_r+0x42>
 8015370:	6811      	ldr	r1, [r2, #0]
 8015372:	1850      	adds	r0, r2, r1
 8015374:	42a0      	cmp	r0, r4
 8015376:	d10b      	bne.n	8015390 <_free_r+0x6c>
 8015378:	6820      	ldr	r0, [r4, #0]
 801537a:	4401      	add	r1, r0
 801537c:	1850      	adds	r0, r2, r1
 801537e:	4283      	cmp	r3, r0
 8015380:	6011      	str	r1, [r2, #0]
 8015382:	d1e0      	bne.n	8015346 <_free_r+0x22>
 8015384:	6818      	ldr	r0, [r3, #0]
 8015386:	685b      	ldr	r3, [r3, #4]
 8015388:	4401      	add	r1, r0
 801538a:	6011      	str	r1, [r2, #0]
 801538c:	6053      	str	r3, [r2, #4]
 801538e:	e7da      	b.n	8015346 <_free_r+0x22>
 8015390:	d902      	bls.n	8015398 <_free_r+0x74>
 8015392:	230c      	movs	r3, #12
 8015394:	602b      	str	r3, [r5, #0]
 8015396:	e7d6      	b.n	8015346 <_free_r+0x22>
 8015398:	6820      	ldr	r0, [r4, #0]
 801539a:	1821      	adds	r1, r4, r0
 801539c:	428b      	cmp	r3, r1
 801539e:	bf01      	itttt	eq
 80153a0:	6819      	ldreq	r1, [r3, #0]
 80153a2:	685b      	ldreq	r3, [r3, #4]
 80153a4:	1809      	addeq	r1, r1, r0
 80153a6:	6021      	streq	r1, [r4, #0]
 80153a8:	6063      	str	r3, [r4, #4]
 80153aa:	6054      	str	r4, [r2, #4]
 80153ac:	e7cb      	b.n	8015346 <_free_r+0x22>
 80153ae:	bd38      	pop	{r3, r4, r5, pc}
 80153b0:	200070c0 	.word	0x200070c0

080153b4 <sbrk_aligned>:
 80153b4:	b570      	push	{r4, r5, r6, lr}
 80153b6:	4e0e      	ldr	r6, [pc, #56]	; (80153f0 <sbrk_aligned+0x3c>)
 80153b8:	460c      	mov	r4, r1
 80153ba:	6831      	ldr	r1, [r6, #0]
 80153bc:	4605      	mov	r5, r0
 80153be:	b911      	cbnz	r1, 80153c6 <sbrk_aligned+0x12>
 80153c0:	f000 fb46 	bl	8015a50 <_sbrk_r>
 80153c4:	6030      	str	r0, [r6, #0]
 80153c6:	4621      	mov	r1, r4
 80153c8:	4628      	mov	r0, r5
 80153ca:	f000 fb41 	bl	8015a50 <_sbrk_r>
 80153ce:	1c43      	adds	r3, r0, #1
 80153d0:	d00a      	beq.n	80153e8 <sbrk_aligned+0x34>
 80153d2:	1cc4      	adds	r4, r0, #3
 80153d4:	f024 0403 	bic.w	r4, r4, #3
 80153d8:	42a0      	cmp	r0, r4
 80153da:	d007      	beq.n	80153ec <sbrk_aligned+0x38>
 80153dc:	1a21      	subs	r1, r4, r0
 80153de:	4628      	mov	r0, r5
 80153e0:	f000 fb36 	bl	8015a50 <_sbrk_r>
 80153e4:	3001      	adds	r0, #1
 80153e6:	d101      	bne.n	80153ec <sbrk_aligned+0x38>
 80153e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80153ec:	4620      	mov	r0, r4
 80153ee:	bd70      	pop	{r4, r5, r6, pc}
 80153f0:	200070c4 	.word	0x200070c4

080153f4 <_malloc_r>:
 80153f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153f8:	1ccd      	adds	r5, r1, #3
 80153fa:	f025 0503 	bic.w	r5, r5, #3
 80153fe:	3508      	adds	r5, #8
 8015400:	2d0c      	cmp	r5, #12
 8015402:	bf38      	it	cc
 8015404:	250c      	movcc	r5, #12
 8015406:	2d00      	cmp	r5, #0
 8015408:	4607      	mov	r7, r0
 801540a:	db01      	blt.n	8015410 <_malloc_r+0x1c>
 801540c:	42a9      	cmp	r1, r5
 801540e:	d905      	bls.n	801541c <_malloc_r+0x28>
 8015410:	230c      	movs	r3, #12
 8015412:	2600      	movs	r6, #0
 8015414:	603b      	str	r3, [r7, #0]
 8015416:	4630      	mov	r0, r6
 8015418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801541c:	4e2e      	ldr	r6, [pc, #184]	; (80154d8 <_malloc_r+0xe4>)
 801541e:	f000 fddb 	bl	8015fd8 <__malloc_lock>
 8015422:	6833      	ldr	r3, [r6, #0]
 8015424:	461c      	mov	r4, r3
 8015426:	bb34      	cbnz	r4, 8015476 <_malloc_r+0x82>
 8015428:	4629      	mov	r1, r5
 801542a:	4638      	mov	r0, r7
 801542c:	f7ff ffc2 	bl	80153b4 <sbrk_aligned>
 8015430:	1c43      	adds	r3, r0, #1
 8015432:	4604      	mov	r4, r0
 8015434:	d14d      	bne.n	80154d2 <_malloc_r+0xde>
 8015436:	6834      	ldr	r4, [r6, #0]
 8015438:	4626      	mov	r6, r4
 801543a:	2e00      	cmp	r6, #0
 801543c:	d140      	bne.n	80154c0 <_malloc_r+0xcc>
 801543e:	6823      	ldr	r3, [r4, #0]
 8015440:	4631      	mov	r1, r6
 8015442:	4638      	mov	r0, r7
 8015444:	eb04 0803 	add.w	r8, r4, r3
 8015448:	f000 fb02 	bl	8015a50 <_sbrk_r>
 801544c:	4580      	cmp	r8, r0
 801544e:	d13a      	bne.n	80154c6 <_malloc_r+0xd2>
 8015450:	6821      	ldr	r1, [r4, #0]
 8015452:	3503      	adds	r5, #3
 8015454:	1a6d      	subs	r5, r5, r1
 8015456:	f025 0503 	bic.w	r5, r5, #3
 801545a:	3508      	adds	r5, #8
 801545c:	2d0c      	cmp	r5, #12
 801545e:	bf38      	it	cc
 8015460:	250c      	movcc	r5, #12
 8015462:	4638      	mov	r0, r7
 8015464:	4629      	mov	r1, r5
 8015466:	f7ff ffa5 	bl	80153b4 <sbrk_aligned>
 801546a:	3001      	adds	r0, #1
 801546c:	d02b      	beq.n	80154c6 <_malloc_r+0xd2>
 801546e:	6823      	ldr	r3, [r4, #0]
 8015470:	442b      	add	r3, r5
 8015472:	6023      	str	r3, [r4, #0]
 8015474:	e00e      	b.n	8015494 <_malloc_r+0xa0>
 8015476:	6822      	ldr	r2, [r4, #0]
 8015478:	1b52      	subs	r2, r2, r5
 801547a:	d41e      	bmi.n	80154ba <_malloc_r+0xc6>
 801547c:	2a0b      	cmp	r2, #11
 801547e:	d916      	bls.n	80154ae <_malloc_r+0xba>
 8015480:	1961      	adds	r1, r4, r5
 8015482:	42a3      	cmp	r3, r4
 8015484:	6025      	str	r5, [r4, #0]
 8015486:	bf18      	it	ne
 8015488:	6059      	strne	r1, [r3, #4]
 801548a:	6863      	ldr	r3, [r4, #4]
 801548c:	bf08      	it	eq
 801548e:	6031      	streq	r1, [r6, #0]
 8015490:	5162      	str	r2, [r4, r5]
 8015492:	604b      	str	r3, [r1, #4]
 8015494:	4638      	mov	r0, r7
 8015496:	f104 060b 	add.w	r6, r4, #11
 801549a:	f000 fda3 	bl	8015fe4 <__malloc_unlock>
 801549e:	f026 0607 	bic.w	r6, r6, #7
 80154a2:	1d23      	adds	r3, r4, #4
 80154a4:	1af2      	subs	r2, r6, r3
 80154a6:	d0b6      	beq.n	8015416 <_malloc_r+0x22>
 80154a8:	1b9b      	subs	r3, r3, r6
 80154aa:	50a3      	str	r3, [r4, r2]
 80154ac:	e7b3      	b.n	8015416 <_malloc_r+0x22>
 80154ae:	6862      	ldr	r2, [r4, #4]
 80154b0:	42a3      	cmp	r3, r4
 80154b2:	bf0c      	ite	eq
 80154b4:	6032      	streq	r2, [r6, #0]
 80154b6:	605a      	strne	r2, [r3, #4]
 80154b8:	e7ec      	b.n	8015494 <_malloc_r+0xa0>
 80154ba:	4623      	mov	r3, r4
 80154bc:	6864      	ldr	r4, [r4, #4]
 80154be:	e7b2      	b.n	8015426 <_malloc_r+0x32>
 80154c0:	4634      	mov	r4, r6
 80154c2:	6876      	ldr	r6, [r6, #4]
 80154c4:	e7b9      	b.n	801543a <_malloc_r+0x46>
 80154c6:	230c      	movs	r3, #12
 80154c8:	4638      	mov	r0, r7
 80154ca:	603b      	str	r3, [r7, #0]
 80154cc:	f000 fd8a 	bl	8015fe4 <__malloc_unlock>
 80154d0:	e7a1      	b.n	8015416 <_malloc_r+0x22>
 80154d2:	6025      	str	r5, [r4, #0]
 80154d4:	e7de      	b.n	8015494 <_malloc_r+0xa0>
 80154d6:	bf00      	nop
 80154d8:	200070c0 	.word	0x200070c0

080154dc <__ssputs_r>:
 80154dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154e0:	688e      	ldr	r6, [r1, #8]
 80154e2:	4682      	mov	sl, r0
 80154e4:	429e      	cmp	r6, r3
 80154e6:	460c      	mov	r4, r1
 80154e8:	4690      	mov	r8, r2
 80154ea:	461f      	mov	r7, r3
 80154ec:	d838      	bhi.n	8015560 <__ssputs_r+0x84>
 80154ee:	898a      	ldrh	r2, [r1, #12]
 80154f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80154f4:	d032      	beq.n	801555c <__ssputs_r+0x80>
 80154f6:	6825      	ldr	r5, [r4, #0]
 80154f8:	6909      	ldr	r1, [r1, #16]
 80154fa:	3301      	adds	r3, #1
 80154fc:	eba5 0901 	sub.w	r9, r5, r1
 8015500:	6965      	ldr	r5, [r4, #20]
 8015502:	444b      	add	r3, r9
 8015504:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015508:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801550c:	106d      	asrs	r5, r5, #1
 801550e:	429d      	cmp	r5, r3
 8015510:	bf38      	it	cc
 8015512:	461d      	movcc	r5, r3
 8015514:	0553      	lsls	r3, r2, #21
 8015516:	d531      	bpl.n	801557c <__ssputs_r+0xa0>
 8015518:	4629      	mov	r1, r5
 801551a:	f7ff ff6b 	bl	80153f4 <_malloc_r>
 801551e:	4606      	mov	r6, r0
 8015520:	b950      	cbnz	r0, 8015538 <__ssputs_r+0x5c>
 8015522:	230c      	movs	r3, #12
 8015524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015528:	f8ca 3000 	str.w	r3, [sl]
 801552c:	89a3      	ldrh	r3, [r4, #12]
 801552e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015532:	81a3      	strh	r3, [r4, #12]
 8015534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015538:	464a      	mov	r2, r9
 801553a:	6921      	ldr	r1, [r4, #16]
 801553c:	f7fc f9bc 	bl	80118b8 <memcpy>
 8015540:	89a3      	ldrh	r3, [r4, #12]
 8015542:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801554a:	81a3      	strh	r3, [r4, #12]
 801554c:	6126      	str	r6, [r4, #16]
 801554e:	444e      	add	r6, r9
 8015550:	6026      	str	r6, [r4, #0]
 8015552:	463e      	mov	r6, r7
 8015554:	6165      	str	r5, [r4, #20]
 8015556:	eba5 0509 	sub.w	r5, r5, r9
 801555a:	60a5      	str	r5, [r4, #8]
 801555c:	42be      	cmp	r6, r7
 801555e:	d900      	bls.n	8015562 <__ssputs_r+0x86>
 8015560:	463e      	mov	r6, r7
 8015562:	4632      	mov	r2, r6
 8015564:	4641      	mov	r1, r8
 8015566:	6820      	ldr	r0, [r4, #0]
 8015568:	f000 fd1c 	bl	8015fa4 <memmove>
 801556c:	68a3      	ldr	r3, [r4, #8]
 801556e:	2000      	movs	r0, #0
 8015570:	1b9b      	subs	r3, r3, r6
 8015572:	60a3      	str	r3, [r4, #8]
 8015574:	6823      	ldr	r3, [r4, #0]
 8015576:	4433      	add	r3, r6
 8015578:	6023      	str	r3, [r4, #0]
 801557a:	e7db      	b.n	8015534 <__ssputs_r+0x58>
 801557c:	462a      	mov	r2, r5
 801557e:	f000 fd37 	bl	8015ff0 <_realloc_r>
 8015582:	4606      	mov	r6, r0
 8015584:	2800      	cmp	r0, #0
 8015586:	d1e1      	bne.n	801554c <__ssputs_r+0x70>
 8015588:	4650      	mov	r0, sl
 801558a:	6921      	ldr	r1, [r4, #16]
 801558c:	f7ff feca 	bl	8015324 <_free_r>
 8015590:	e7c7      	b.n	8015522 <__ssputs_r+0x46>
	...

08015594 <_svfiprintf_r>:
 8015594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015598:	4698      	mov	r8, r3
 801559a:	898b      	ldrh	r3, [r1, #12]
 801559c:	4607      	mov	r7, r0
 801559e:	061b      	lsls	r3, r3, #24
 80155a0:	460d      	mov	r5, r1
 80155a2:	4614      	mov	r4, r2
 80155a4:	b09d      	sub	sp, #116	; 0x74
 80155a6:	d50e      	bpl.n	80155c6 <_svfiprintf_r+0x32>
 80155a8:	690b      	ldr	r3, [r1, #16]
 80155aa:	b963      	cbnz	r3, 80155c6 <_svfiprintf_r+0x32>
 80155ac:	2140      	movs	r1, #64	; 0x40
 80155ae:	f7ff ff21 	bl	80153f4 <_malloc_r>
 80155b2:	6028      	str	r0, [r5, #0]
 80155b4:	6128      	str	r0, [r5, #16]
 80155b6:	b920      	cbnz	r0, 80155c2 <_svfiprintf_r+0x2e>
 80155b8:	230c      	movs	r3, #12
 80155ba:	603b      	str	r3, [r7, #0]
 80155bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80155c0:	e0d1      	b.n	8015766 <_svfiprintf_r+0x1d2>
 80155c2:	2340      	movs	r3, #64	; 0x40
 80155c4:	616b      	str	r3, [r5, #20]
 80155c6:	2300      	movs	r3, #0
 80155c8:	9309      	str	r3, [sp, #36]	; 0x24
 80155ca:	2320      	movs	r3, #32
 80155cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80155d0:	2330      	movs	r3, #48	; 0x30
 80155d2:	f04f 0901 	mov.w	r9, #1
 80155d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80155da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015780 <_svfiprintf_r+0x1ec>
 80155de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80155e2:	4623      	mov	r3, r4
 80155e4:	469a      	mov	sl, r3
 80155e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80155ea:	b10a      	cbz	r2, 80155f0 <_svfiprintf_r+0x5c>
 80155ec:	2a25      	cmp	r2, #37	; 0x25
 80155ee:	d1f9      	bne.n	80155e4 <_svfiprintf_r+0x50>
 80155f0:	ebba 0b04 	subs.w	fp, sl, r4
 80155f4:	d00b      	beq.n	801560e <_svfiprintf_r+0x7a>
 80155f6:	465b      	mov	r3, fp
 80155f8:	4622      	mov	r2, r4
 80155fa:	4629      	mov	r1, r5
 80155fc:	4638      	mov	r0, r7
 80155fe:	f7ff ff6d 	bl	80154dc <__ssputs_r>
 8015602:	3001      	adds	r0, #1
 8015604:	f000 80aa 	beq.w	801575c <_svfiprintf_r+0x1c8>
 8015608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801560a:	445a      	add	r2, fp
 801560c:	9209      	str	r2, [sp, #36]	; 0x24
 801560e:	f89a 3000 	ldrb.w	r3, [sl]
 8015612:	2b00      	cmp	r3, #0
 8015614:	f000 80a2 	beq.w	801575c <_svfiprintf_r+0x1c8>
 8015618:	2300      	movs	r3, #0
 801561a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801561e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015622:	f10a 0a01 	add.w	sl, sl, #1
 8015626:	9304      	str	r3, [sp, #16]
 8015628:	9307      	str	r3, [sp, #28]
 801562a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801562e:	931a      	str	r3, [sp, #104]	; 0x68
 8015630:	4654      	mov	r4, sl
 8015632:	2205      	movs	r2, #5
 8015634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015638:	4851      	ldr	r0, [pc, #324]	; (8015780 <_svfiprintf_r+0x1ec>)
 801563a:	f7ff f999 	bl	8014970 <memchr>
 801563e:	9a04      	ldr	r2, [sp, #16]
 8015640:	b9d8      	cbnz	r0, 801567a <_svfiprintf_r+0xe6>
 8015642:	06d0      	lsls	r0, r2, #27
 8015644:	bf44      	itt	mi
 8015646:	2320      	movmi	r3, #32
 8015648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801564c:	0711      	lsls	r1, r2, #28
 801564e:	bf44      	itt	mi
 8015650:	232b      	movmi	r3, #43	; 0x2b
 8015652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015656:	f89a 3000 	ldrb.w	r3, [sl]
 801565a:	2b2a      	cmp	r3, #42	; 0x2a
 801565c:	d015      	beq.n	801568a <_svfiprintf_r+0xf6>
 801565e:	4654      	mov	r4, sl
 8015660:	2000      	movs	r0, #0
 8015662:	f04f 0c0a 	mov.w	ip, #10
 8015666:	9a07      	ldr	r2, [sp, #28]
 8015668:	4621      	mov	r1, r4
 801566a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801566e:	3b30      	subs	r3, #48	; 0x30
 8015670:	2b09      	cmp	r3, #9
 8015672:	d94e      	bls.n	8015712 <_svfiprintf_r+0x17e>
 8015674:	b1b0      	cbz	r0, 80156a4 <_svfiprintf_r+0x110>
 8015676:	9207      	str	r2, [sp, #28]
 8015678:	e014      	b.n	80156a4 <_svfiprintf_r+0x110>
 801567a:	eba0 0308 	sub.w	r3, r0, r8
 801567e:	fa09 f303 	lsl.w	r3, r9, r3
 8015682:	4313      	orrs	r3, r2
 8015684:	46a2      	mov	sl, r4
 8015686:	9304      	str	r3, [sp, #16]
 8015688:	e7d2      	b.n	8015630 <_svfiprintf_r+0x9c>
 801568a:	9b03      	ldr	r3, [sp, #12]
 801568c:	1d19      	adds	r1, r3, #4
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	9103      	str	r1, [sp, #12]
 8015692:	2b00      	cmp	r3, #0
 8015694:	bfbb      	ittet	lt
 8015696:	425b      	neglt	r3, r3
 8015698:	f042 0202 	orrlt.w	r2, r2, #2
 801569c:	9307      	strge	r3, [sp, #28]
 801569e:	9307      	strlt	r3, [sp, #28]
 80156a0:	bfb8      	it	lt
 80156a2:	9204      	strlt	r2, [sp, #16]
 80156a4:	7823      	ldrb	r3, [r4, #0]
 80156a6:	2b2e      	cmp	r3, #46	; 0x2e
 80156a8:	d10c      	bne.n	80156c4 <_svfiprintf_r+0x130>
 80156aa:	7863      	ldrb	r3, [r4, #1]
 80156ac:	2b2a      	cmp	r3, #42	; 0x2a
 80156ae:	d135      	bne.n	801571c <_svfiprintf_r+0x188>
 80156b0:	9b03      	ldr	r3, [sp, #12]
 80156b2:	3402      	adds	r4, #2
 80156b4:	1d1a      	adds	r2, r3, #4
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	9203      	str	r2, [sp, #12]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	bfb8      	it	lt
 80156be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80156c2:	9305      	str	r3, [sp, #20]
 80156c4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8015784 <_svfiprintf_r+0x1f0>
 80156c8:	2203      	movs	r2, #3
 80156ca:	4650      	mov	r0, sl
 80156cc:	7821      	ldrb	r1, [r4, #0]
 80156ce:	f7ff f94f 	bl	8014970 <memchr>
 80156d2:	b140      	cbz	r0, 80156e6 <_svfiprintf_r+0x152>
 80156d4:	2340      	movs	r3, #64	; 0x40
 80156d6:	eba0 000a 	sub.w	r0, r0, sl
 80156da:	fa03 f000 	lsl.w	r0, r3, r0
 80156de:	9b04      	ldr	r3, [sp, #16]
 80156e0:	3401      	adds	r4, #1
 80156e2:	4303      	orrs	r3, r0
 80156e4:	9304      	str	r3, [sp, #16]
 80156e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156ea:	2206      	movs	r2, #6
 80156ec:	4826      	ldr	r0, [pc, #152]	; (8015788 <_svfiprintf_r+0x1f4>)
 80156ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80156f2:	f7ff f93d 	bl	8014970 <memchr>
 80156f6:	2800      	cmp	r0, #0
 80156f8:	d038      	beq.n	801576c <_svfiprintf_r+0x1d8>
 80156fa:	4b24      	ldr	r3, [pc, #144]	; (801578c <_svfiprintf_r+0x1f8>)
 80156fc:	bb1b      	cbnz	r3, 8015746 <_svfiprintf_r+0x1b2>
 80156fe:	9b03      	ldr	r3, [sp, #12]
 8015700:	3307      	adds	r3, #7
 8015702:	f023 0307 	bic.w	r3, r3, #7
 8015706:	3308      	adds	r3, #8
 8015708:	9303      	str	r3, [sp, #12]
 801570a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801570c:	4433      	add	r3, r6
 801570e:	9309      	str	r3, [sp, #36]	; 0x24
 8015710:	e767      	b.n	80155e2 <_svfiprintf_r+0x4e>
 8015712:	460c      	mov	r4, r1
 8015714:	2001      	movs	r0, #1
 8015716:	fb0c 3202 	mla	r2, ip, r2, r3
 801571a:	e7a5      	b.n	8015668 <_svfiprintf_r+0xd4>
 801571c:	2300      	movs	r3, #0
 801571e:	f04f 0c0a 	mov.w	ip, #10
 8015722:	4619      	mov	r1, r3
 8015724:	3401      	adds	r4, #1
 8015726:	9305      	str	r3, [sp, #20]
 8015728:	4620      	mov	r0, r4
 801572a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801572e:	3a30      	subs	r2, #48	; 0x30
 8015730:	2a09      	cmp	r2, #9
 8015732:	d903      	bls.n	801573c <_svfiprintf_r+0x1a8>
 8015734:	2b00      	cmp	r3, #0
 8015736:	d0c5      	beq.n	80156c4 <_svfiprintf_r+0x130>
 8015738:	9105      	str	r1, [sp, #20]
 801573a:	e7c3      	b.n	80156c4 <_svfiprintf_r+0x130>
 801573c:	4604      	mov	r4, r0
 801573e:	2301      	movs	r3, #1
 8015740:	fb0c 2101 	mla	r1, ip, r1, r2
 8015744:	e7f0      	b.n	8015728 <_svfiprintf_r+0x194>
 8015746:	ab03      	add	r3, sp, #12
 8015748:	9300      	str	r3, [sp, #0]
 801574a:	462a      	mov	r2, r5
 801574c:	4638      	mov	r0, r7
 801574e:	4b10      	ldr	r3, [pc, #64]	; (8015790 <_svfiprintf_r+0x1fc>)
 8015750:	a904      	add	r1, sp, #16
 8015752:	f7fc f965 	bl	8011a20 <_printf_float>
 8015756:	1c42      	adds	r2, r0, #1
 8015758:	4606      	mov	r6, r0
 801575a:	d1d6      	bne.n	801570a <_svfiprintf_r+0x176>
 801575c:	89ab      	ldrh	r3, [r5, #12]
 801575e:	065b      	lsls	r3, r3, #25
 8015760:	f53f af2c 	bmi.w	80155bc <_svfiprintf_r+0x28>
 8015764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015766:	b01d      	add	sp, #116	; 0x74
 8015768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801576c:	ab03      	add	r3, sp, #12
 801576e:	9300      	str	r3, [sp, #0]
 8015770:	462a      	mov	r2, r5
 8015772:	4638      	mov	r0, r7
 8015774:	4b06      	ldr	r3, [pc, #24]	; (8015790 <_svfiprintf_r+0x1fc>)
 8015776:	a904      	add	r1, sp, #16
 8015778:	f7fc fbee 	bl	8011f58 <_printf_i>
 801577c:	e7eb      	b.n	8015756 <_svfiprintf_r+0x1c2>
 801577e:	bf00      	nop
 8015780:	080186bc 	.word	0x080186bc
 8015784:	080186c2 	.word	0x080186c2
 8015788:	080186c6 	.word	0x080186c6
 801578c:	08011a21 	.word	0x08011a21
 8015790:	080154dd 	.word	0x080154dd

08015794 <__sfputc_r>:
 8015794:	6893      	ldr	r3, [r2, #8]
 8015796:	b410      	push	{r4}
 8015798:	3b01      	subs	r3, #1
 801579a:	2b00      	cmp	r3, #0
 801579c:	6093      	str	r3, [r2, #8]
 801579e:	da07      	bge.n	80157b0 <__sfputc_r+0x1c>
 80157a0:	6994      	ldr	r4, [r2, #24]
 80157a2:	42a3      	cmp	r3, r4
 80157a4:	db01      	blt.n	80157aa <__sfputc_r+0x16>
 80157a6:	290a      	cmp	r1, #10
 80157a8:	d102      	bne.n	80157b0 <__sfputc_r+0x1c>
 80157aa:	bc10      	pop	{r4}
 80157ac:	f000 b9a4 	b.w	8015af8 <__swbuf_r>
 80157b0:	6813      	ldr	r3, [r2, #0]
 80157b2:	1c58      	adds	r0, r3, #1
 80157b4:	6010      	str	r0, [r2, #0]
 80157b6:	7019      	strb	r1, [r3, #0]
 80157b8:	4608      	mov	r0, r1
 80157ba:	bc10      	pop	{r4}
 80157bc:	4770      	bx	lr

080157be <__sfputs_r>:
 80157be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157c0:	4606      	mov	r6, r0
 80157c2:	460f      	mov	r7, r1
 80157c4:	4614      	mov	r4, r2
 80157c6:	18d5      	adds	r5, r2, r3
 80157c8:	42ac      	cmp	r4, r5
 80157ca:	d101      	bne.n	80157d0 <__sfputs_r+0x12>
 80157cc:	2000      	movs	r0, #0
 80157ce:	e007      	b.n	80157e0 <__sfputs_r+0x22>
 80157d0:	463a      	mov	r2, r7
 80157d2:	4630      	mov	r0, r6
 80157d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157d8:	f7ff ffdc 	bl	8015794 <__sfputc_r>
 80157dc:	1c43      	adds	r3, r0, #1
 80157de:	d1f3      	bne.n	80157c8 <__sfputs_r+0xa>
 80157e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080157e4 <_vfiprintf_r>:
 80157e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157e8:	460d      	mov	r5, r1
 80157ea:	4614      	mov	r4, r2
 80157ec:	4698      	mov	r8, r3
 80157ee:	4606      	mov	r6, r0
 80157f0:	b09d      	sub	sp, #116	; 0x74
 80157f2:	b118      	cbz	r0, 80157fc <_vfiprintf_r+0x18>
 80157f4:	6983      	ldr	r3, [r0, #24]
 80157f6:	b90b      	cbnz	r3, 80157fc <_vfiprintf_r+0x18>
 80157f8:	f7fe fc94 	bl	8014124 <__sinit>
 80157fc:	4b89      	ldr	r3, [pc, #548]	; (8015a24 <_vfiprintf_r+0x240>)
 80157fe:	429d      	cmp	r5, r3
 8015800:	d11b      	bne.n	801583a <_vfiprintf_r+0x56>
 8015802:	6875      	ldr	r5, [r6, #4]
 8015804:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015806:	07d9      	lsls	r1, r3, #31
 8015808:	d405      	bmi.n	8015816 <_vfiprintf_r+0x32>
 801580a:	89ab      	ldrh	r3, [r5, #12]
 801580c:	059a      	lsls	r2, r3, #22
 801580e:	d402      	bmi.n	8015816 <_vfiprintf_r+0x32>
 8015810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015812:	f7ff f890 	bl	8014936 <__retarget_lock_acquire_recursive>
 8015816:	89ab      	ldrh	r3, [r5, #12]
 8015818:	071b      	lsls	r3, r3, #28
 801581a:	d501      	bpl.n	8015820 <_vfiprintf_r+0x3c>
 801581c:	692b      	ldr	r3, [r5, #16]
 801581e:	b9eb      	cbnz	r3, 801585c <_vfiprintf_r+0x78>
 8015820:	4629      	mov	r1, r5
 8015822:	4630      	mov	r0, r6
 8015824:	f000 f9da 	bl	8015bdc <__swsetup_r>
 8015828:	b1c0      	cbz	r0, 801585c <_vfiprintf_r+0x78>
 801582a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801582c:	07dc      	lsls	r4, r3, #31
 801582e:	d50e      	bpl.n	801584e <_vfiprintf_r+0x6a>
 8015830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015834:	b01d      	add	sp, #116	; 0x74
 8015836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801583a:	4b7b      	ldr	r3, [pc, #492]	; (8015a28 <_vfiprintf_r+0x244>)
 801583c:	429d      	cmp	r5, r3
 801583e:	d101      	bne.n	8015844 <_vfiprintf_r+0x60>
 8015840:	68b5      	ldr	r5, [r6, #8]
 8015842:	e7df      	b.n	8015804 <_vfiprintf_r+0x20>
 8015844:	4b79      	ldr	r3, [pc, #484]	; (8015a2c <_vfiprintf_r+0x248>)
 8015846:	429d      	cmp	r5, r3
 8015848:	bf08      	it	eq
 801584a:	68f5      	ldreq	r5, [r6, #12]
 801584c:	e7da      	b.n	8015804 <_vfiprintf_r+0x20>
 801584e:	89ab      	ldrh	r3, [r5, #12]
 8015850:	0598      	lsls	r0, r3, #22
 8015852:	d4ed      	bmi.n	8015830 <_vfiprintf_r+0x4c>
 8015854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015856:	f7ff f86f 	bl	8014938 <__retarget_lock_release_recursive>
 801585a:	e7e9      	b.n	8015830 <_vfiprintf_r+0x4c>
 801585c:	2300      	movs	r3, #0
 801585e:	9309      	str	r3, [sp, #36]	; 0x24
 8015860:	2320      	movs	r3, #32
 8015862:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015866:	2330      	movs	r3, #48	; 0x30
 8015868:	f04f 0901 	mov.w	r9, #1
 801586c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015870:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8015a30 <_vfiprintf_r+0x24c>
 8015874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015878:	4623      	mov	r3, r4
 801587a:	469a      	mov	sl, r3
 801587c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015880:	b10a      	cbz	r2, 8015886 <_vfiprintf_r+0xa2>
 8015882:	2a25      	cmp	r2, #37	; 0x25
 8015884:	d1f9      	bne.n	801587a <_vfiprintf_r+0x96>
 8015886:	ebba 0b04 	subs.w	fp, sl, r4
 801588a:	d00b      	beq.n	80158a4 <_vfiprintf_r+0xc0>
 801588c:	465b      	mov	r3, fp
 801588e:	4622      	mov	r2, r4
 8015890:	4629      	mov	r1, r5
 8015892:	4630      	mov	r0, r6
 8015894:	f7ff ff93 	bl	80157be <__sfputs_r>
 8015898:	3001      	adds	r0, #1
 801589a:	f000 80aa 	beq.w	80159f2 <_vfiprintf_r+0x20e>
 801589e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80158a0:	445a      	add	r2, fp
 80158a2:	9209      	str	r2, [sp, #36]	; 0x24
 80158a4:	f89a 3000 	ldrb.w	r3, [sl]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	f000 80a2 	beq.w	80159f2 <_vfiprintf_r+0x20e>
 80158ae:	2300      	movs	r3, #0
 80158b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80158b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80158b8:	f10a 0a01 	add.w	sl, sl, #1
 80158bc:	9304      	str	r3, [sp, #16]
 80158be:	9307      	str	r3, [sp, #28]
 80158c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80158c4:	931a      	str	r3, [sp, #104]	; 0x68
 80158c6:	4654      	mov	r4, sl
 80158c8:	2205      	movs	r2, #5
 80158ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158ce:	4858      	ldr	r0, [pc, #352]	; (8015a30 <_vfiprintf_r+0x24c>)
 80158d0:	f7ff f84e 	bl	8014970 <memchr>
 80158d4:	9a04      	ldr	r2, [sp, #16]
 80158d6:	b9d8      	cbnz	r0, 8015910 <_vfiprintf_r+0x12c>
 80158d8:	06d1      	lsls	r1, r2, #27
 80158da:	bf44      	itt	mi
 80158dc:	2320      	movmi	r3, #32
 80158de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80158e2:	0713      	lsls	r3, r2, #28
 80158e4:	bf44      	itt	mi
 80158e6:	232b      	movmi	r3, #43	; 0x2b
 80158e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80158ec:	f89a 3000 	ldrb.w	r3, [sl]
 80158f0:	2b2a      	cmp	r3, #42	; 0x2a
 80158f2:	d015      	beq.n	8015920 <_vfiprintf_r+0x13c>
 80158f4:	4654      	mov	r4, sl
 80158f6:	2000      	movs	r0, #0
 80158f8:	f04f 0c0a 	mov.w	ip, #10
 80158fc:	9a07      	ldr	r2, [sp, #28]
 80158fe:	4621      	mov	r1, r4
 8015900:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015904:	3b30      	subs	r3, #48	; 0x30
 8015906:	2b09      	cmp	r3, #9
 8015908:	d94e      	bls.n	80159a8 <_vfiprintf_r+0x1c4>
 801590a:	b1b0      	cbz	r0, 801593a <_vfiprintf_r+0x156>
 801590c:	9207      	str	r2, [sp, #28]
 801590e:	e014      	b.n	801593a <_vfiprintf_r+0x156>
 8015910:	eba0 0308 	sub.w	r3, r0, r8
 8015914:	fa09 f303 	lsl.w	r3, r9, r3
 8015918:	4313      	orrs	r3, r2
 801591a:	46a2      	mov	sl, r4
 801591c:	9304      	str	r3, [sp, #16]
 801591e:	e7d2      	b.n	80158c6 <_vfiprintf_r+0xe2>
 8015920:	9b03      	ldr	r3, [sp, #12]
 8015922:	1d19      	adds	r1, r3, #4
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	9103      	str	r1, [sp, #12]
 8015928:	2b00      	cmp	r3, #0
 801592a:	bfbb      	ittet	lt
 801592c:	425b      	neglt	r3, r3
 801592e:	f042 0202 	orrlt.w	r2, r2, #2
 8015932:	9307      	strge	r3, [sp, #28]
 8015934:	9307      	strlt	r3, [sp, #28]
 8015936:	bfb8      	it	lt
 8015938:	9204      	strlt	r2, [sp, #16]
 801593a:	7823      	ldrb	r3, [r4, #0]
 801593c:	2b2e      	cmp	r3, #46	; 0x2e
 801593e:	d10c      	bne.n	801595a <_vfiprintf_r+0x176>
 8015940:	7863      	ldrb	r3, [r4, #1]
 8015942:	2b2a      	cmp	r3, #42	; 0x2a
 8015944:	d135      	bne.n	80159b2 <_vfiprintf_r+0x1ce>
 8015946:	9b03      	ldr	r3, [sp, #12]
 8015948:	3402      	adds	r4, #2
 801594a:	1d1a      	adds	r2, r3, #4
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	9203      	str	r2, [sp, #12]
 8015950:	2b00      	cmp	r3, #0
 8015952:	bfb8      	it	lt
 8015954:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015958:	9305      	str	r3, [sp, #20]
 801595a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8015a34 <_vfiprintf_r+0x250>
 801595e:	2203      	movs	r2, #3
 8015960:	4650      	mov	r0, sl
 8015962:	7821      	ldrb	r1, [r4, #0]
 8015964:	f7ff f804 	bl	8014970 <memchr>
 8015968:	b140      	cbz	r0, 801597c <_vfiprintf_r+0x198>
 801596a:	2340      	movs	r3, #64	; 0x40
 801596c:	eba0 000a 	sub.w	r0, r0, sl
 8015970:	fa03 f000 	lsl.w	r0, r3, r0
 8015974:	9b04      	ldr	r3, [sp, #16]
 8015976:	3401      	adds	r4, #1
 8015978:	4303      	orrs	r3, r0
 801597a:	9304      	str	r3, [sp, #16]
 801597c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015980:	2206      	movs	r2, #6
 8015982:	482d      	ldr	r0, [pc, #180]	; (8015a38 <_vfiprintf_r+0x254>)
 8015984:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015988:	f7fe fff2 	bl	8014970 <memchr>
 801598c:	2800      	cmp	r0, #0
 801598e:	d03f      	beq.n	8015a10 <_vfiprintf_r+0x22c>
 8015990:	4b2a      	ldr	r3, [pc, #168]	; (8015a3c <_vfiprintf_r+0x258>)
 8015992:	bb1b      	cbnz	r3, 80159dc <_vfiprintf_r+0x1f8>
 8015994:	9b03      	ldr	r3, [sp, #12]
 8015996:	3307      	adds	r3, #7
 8015998:	f023 0307 	bic.w	r3, r3, #7
 801599c:	3308      	adds	r3, #8
 801599e:	9303      	str	r3, [sp, #12]
 80159a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159a2:	443b      	add	r3, r7
 80159a4:	9309      	str	r3, [sp, #36]	; 0x24
 80159a6:	e767      	b.n	8015878 <_vfiprintf_r+0x94>
 80159a8:	460c      	mov	r4, r1
 80159aa:	2001      	movs	r0, #1
 80159ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80159b0:	e7a5      	b.n	80158fe <_vfiprintf_r+0x11a>
 80159b2:	2300      	movs	r3, #0
 80159b4:	f04f 0c0a 	mov.w	ip, #10
 80159b8:	4619      	mov	r1, r3
 80159ba:	3401      	adds	r4, #1
 80159bc:	9305      	str	r3, [sp, #20]
 80159be:	4620      	mov	r0, r4
 80159c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80159c4:	3a30      	subs	r2, #48	; 0x30
 80159c6:	2a09      	cmp	r2, #9
 80159c8:	d903      	bls.n	80159d2 <_vfiprintf_r+0x1ee>
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d0c5      	beq.n	801595a <_vfiprintf_r+0x176>
 80159ce:	9105      	str	r1, [sp, #20]
 80159d0:	e7c3      	b.n	801595a <_vfiprintf_r+0x176>
 80159d2:	4604      	mov	r4, r0
 80159d4:	2301      	movs	r3, #1
 80159d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80159da:	e7f0      	b.n	80159be <_vfiprintf_r+0x1da>
 80159dc:	ab03      	add	r3, sp, #12
 80159de:	9300      	str	r3, [sp, #0]
 80159e0:	462a      	mov	r2, r5
 80159e2:	4630      	mov	r0, r6
 80159e4:	4b16      	ldr	r3, [pc, #88]	; (8015a40 <_vfiprintf_r+0x25c>)
 80159e6:	a904      	add	r1, sp, #16
 80159e8:	f7fc f81a 	bl	8011a20 <_printf_float>
 80159ec:	4607      	mov	r7, r0
 80159ee:	1c78      	adds	r0, r7, #1
 80159f0:	d1d6      	bne.n	80159a0 <_vfiprintf_r+0x1bc>
 80159f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80159f4:	07d9      	lsls	r1, r3, #31
 80159f6:	d405      	bmi.n	8015a04 <_vfiprintf_r+0x220>
 80159f8:	89ab      	ldrh	r3, [r5, #12]
 80159fa:	059a      	lsls	r2, r3, #22
 80159fc:	d402      	bmi.n	8015a04 <_vfiprintf_r+0x220>
 80159fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015a00:	f7fe ff9a 	bl	8014938 <__retarget_lock_release_recursive>
 8015a04:	89ab      	ldrh	r3, [r5, #12]
 8015a06:	065b      	lsls	r3, r3, #25
 8015a08:	f53f af12 	bmi.w	8015830 <_vfiprintf_r+0x4c>
 8015a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015a0e:	e711      	b.n	8015834 <_vfiprintf_r+0x50>
 8015a10:	ab03      	add	r3, sp, #12
 8015a12:	9300      	str	r3, [sp, #0]
 8015a14:	462a      	mov	r2, r5
 8015a16:	4630      	mov	r0, r6
 8015a18:	4b09      	ldr	r3, [pc, #36]	; (8015a40 <_vfiprintf_r+0x25c>)
 8015a1a:	a904      	add	r1, sp, #16
 8015a1c:	f7fc fa9c 	bl	8011f58 <_printf_i>
 8015a20:	e7e4      	b.n	80159ec <_vfiprintf_r+0x208>
 8015a22:	bf00      	nop
 8015a24:	080184a4 	.word	0x080184a4
 8015a28:	080184c4 	.word	0x080184c4
 8015a2c:	08018484 	.word	0x08018484
 8015a30:	080186bc 	.word	0x080186bc
 8015a34:	080186c2 	.word	0x080186c2
 8015a38:	080186c6 	.word	0x080186c6
 8015a3c:	08011a21 	.word	0x08011a21
 8015a40:	080157bf 	.word	0x080157bf

08015a44 <nan>:
 8015a44:	2000      	movs	r0, #0
 8015a46:	4901      	ldr	r1, [pc, #4]	; (8015a4c <nan+0x8>)
 8015a48:	4770      	bx	lr
 8015a4a:	bf00      	nop
 8015a4c:	7ff80000 	.word	0x7ff80000

08015a50 <_sbrk_r>:
 8015a50:	b538      	push	{r3, r4, r5, lr}
 8015a52:	2300      	movs	r3, #0
 8015a54:	4d05      	ldr	r5, [pc, #20]	; (8015a6c <_sbrk_r+0x1c>)
 8015a56:	4604      	mov	r4, r0
 8015a58:	4608      	mov	r0, r1
 8015a5a:	602b      	str	r3, [r5, #0]
 8015a5c:	f7ec fe40 	bl	80026e0 <_sbrk>
 8015a60:	1c43      	adds	r3, r0, #1
 8015a62:	d102      	bne.n	8015a6a <_sbrk_r+0x1a>
 8015a64:	682b      	ldr	r3, [r5, #0]
 8015a66:	b103      	cbz	r3, 8015a6a <_sbrk_r+0x1a>
 8015a68:	6023      	str	r3, [r4, #0]
 8015a6a:	bd38      	pop	{r3, r4, r5, pc}
 8015a6c:	200070b8 	.word	0x200070b8

08015a70 <__sread>:
 8015a70:	b510      	push	{r4, lr}
 8015a72:	460c      	mov	r4, r1
 8015a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a78:	f000 faea 	bl	8016050 <_read_r>
 8015a7c:	2800      	cmp	r0, #0
 8015a7e:	bfab      	itete	ge
 8015a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015a82:	89a3      	ldrhlt	r3, [r4, #12]
 8015a84:	181b      	addge	r3, r3, r0
 8015a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015a8a:	bfac      	ite	ge
 8015a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8015a8e:	81a3      	strhlt	r3, [r4, #12]
 8015a90:	bd10      	pop	{r4, pc}

08015a92 <__swrite>:
 8015a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a96:	461f      	mov	r7, r3
 8015a98:	898b      	ldrh	r3, [r1, #12]
 8015a9a:	4605      	mov	r5, r0
 8015a9c:	05db      	lsls	r3, r3, #23
 8015a9e:	460c      	mov	r4, r1
 8015aa0:	4616      	mov	r6, r2
 8015aa2:	d505      	bpl.n	8015ab0 <__swrite+0x1e>
 8015aa4:	2302      	movs	r3, #2
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015aac:	f000 fa02 	bl	8015eb4 <_lseek_r>
 8015ab0:	89a3      	ldrh	r3, [r4, #12]
 8015ab2:	4632      	mov	r2, r6
 8015ab4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015ab8:	81a3      	strh	r3, [r4, #12]
 8015aba:	4628      	mov	r0, r5
 8015abc:	463b      	mov	r3, r7
 8015abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ac6:	f000 b877 	b.w	8015bb8 <_write_r>

08015aca <__sseek>:
 8015aca:	b510      	push	{r4, lr}
 8015acc:	460c      	mov	r4, r1
 8015ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ad2:	f000 f9ef 	bl	8015eb4 <_lseek_r>
 8015ad6:	1c43      	adds	r3, r0, #1
 8015ad8:	89a3      	ldrh	r3, [r4, #12]
 8015ada:	bf15      	itete	ne
 8015adc:	6560      	strne	r0, [r4, #84]	; 0x54
 8015ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015ae6:	81a3      	strheq	r3, [r4, #12]
 8015ae8:	bf18      	it	ne
 8015aea:	81a3      	strhne	r3, [r4, #12]
 8015aec:	bd10      	pop	{r4, pc}

08015aee <__sclose>:
 8015aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015af2:	f000 b8ff 	b.w	8015cf4 <_close_r>
	...

08015af8 <__swbuf_r>:
 8015af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015afa:	460e      	mov	r6, r1
 8015afc:	4614      	mov	r4, r2
 8015afe:	4605      	mov	r5, r0
 8015b00:	b118      	cbz	r0, 8015b0a <__swbuf_r+0x12>
 8015b02:	6983      	ldr	r3, [r0, #24]
 8015b04:	b90b      	cbnz	r3, 8015b0a <__swbuf_r+0x12>
 8015b06:	f7fe fb0d 	bl	8014124 <__sinit>
 8015b0a:	4b21      	ldr	r3, [pc, #132]	; (8015b90 <__swbuf_r+0x98>)
 8015b0c:	429c      	cmp	r4, r3
 8015b0e:	d12b      	bne.n	8015b68 <__swbuf_r+0x70>
 8015b10:	686c      	ldr	r4, [r5, #4]
 8015b12:	69a3      	ldr	r3, [r4, #24]
 8015b14:	60a3      	str	r3, [r4, #8]
 8015b16:	89a3      	ldrh	r3, [r4, #12]
 8015b18:	071a      	lsls	r2, r3, #28
 8015b1a:	d52f      	bpl.n	8015b7c <__swbuf_r+0x84>
 8015b1c:	6923      	ldr	r3, [r4, #16]
 8015b1e:	b36b      	cbz	r3, 8015b7c <__swbuf_r+0x84>
 8015b20:	6923      	ldr	r3, [r4, #16]
 8015b22:	6820      	ldr	r0, [r4, #0]
 8015b24:	b2f6      	uxtb	r6, r6
 8015b26:	1ac0      	subs	r0, r0, r3
 8015b28:	6963      	ldr	r3, [r4, #20]
 8015b2a:	4637      	mov	r7, r6
 8015b2c:	4283      	cmp	r3, r0
 8015b2e:	dc04      	bgt.n	8015b3a <__swbuf_r+0x42>
 8015b30:	4621      	mov	r1, r4
 8015b32:	4628      	mov	r0, r5
 8015b34:	f000 f970 	bl	8015e18 <_fflush_r>
 8015b38:	bb30      	cbnz	r0, 8015b88 <__swbuf_r+0x90>
 8015b3a:	68a3      	ldr	r3, [r4, #8]
 8015b3c:	3001      	adds	r0, #1
 8015b3e:	3b01      	subs	r3, #1
 8015b40:	60a3      	str	r3, [r4, #8]
 8015b42:	6823      	ldr	r3, [r4, #0]
 8015b44:	1c5a      	adds	r2, r3, #1
 8015b46:	6022      	str	r2, [r4, #0]
 8015b48:	701e      	strb	r6, [r3, #0]
 8015b4a:	6963      	ldr	r3, [r4, #20]
 8015b4c:	4283      	cmp	r3, r0
 8015b4e:	d004      	beq.n	8015b5a <__swbuf_r+0x62>
 8015b50:	89a3      	ldrh	r3, [r4, #12]
 8015b52:	07db      	lsls	r3, r3, #31
 8015b54:	d506      	bpl.n	8015b64 <__swbuf_r+0x6c>
 8015b56:	2e0a      	cmp	r6, #10
 8015b58:	d104      	bne.n	8015b64 <__swbuf_r+0x6c>
 8015b5a:	4621      	mov	r1, r4
 8015b5c:	4628      	mov	r0, r5
 8015b5e:	f000 f95b 	bl	8015e18 <_fflush_r>
 8015b62:	b988      	cbnz	r0, 8015b88 <__swbuf_r+0x90>
 8015b64:	4638      	mov	r0, r7
 8015b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b68:	4b0a      	ldr	r3, [pc, #40]	; (8015b94 <__swbuf_r+0x9c>)
 8015b6a:	429c      	cmp	r4, r3
 8015b6c:	d101      	bne.n	8015b72 <__swbuf_r+0x7a>
 8015b6e:	68ac      	ldr	r4, [r5, #8]
 8015b70:	e7cf      	b.n	8015b12 <__swbuf_r+0x1a>
 8015b72:	4b09      	ldr	r3, [pc, #36]	; (8015b98 <__swbuf_r+0xa0>)
 8015b74:	429c      	cmp	r4, r3
 8015b76:	bf08      	it	eq
 8015b78:	68ec      	ldreq	r4, [r5, #12]
 8015b7a:	e7ca      	b.n	8015b12 <__swbuf_r+0x1a>
 8015b7c:	4621      	mov	r1, r4
 8015b7e:	4628      	mov	r0, r5
 8015b80:	f000 f82c 	bl	8015bdc <__swsetup_r>
 8015b84:	2800      	cmp	r0, #0
 8015b86:	d0cb      	beq.n	8015b20 <__swbuf_r+0x28>
 8015b88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015b8c:	e7ea      	b.n	8015b64 <__swbuf_r+0x6c>
 8015b8e:	bf00      	nop
 8015b90:	080184a4 	.word	0x080184a4
 8015b94:	080184c4 	.word	0x080184c4
 8015b98:	08018484 	.word	0x08018484

08015b9c <__ascii_wctomb>:
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	4608      	mov	r0, r1
 8015ba0:	b141      	cbz	r1, 8015bb4 <__ascii_wctomb+0x18>
 8015ba2:	2aff      	cmp	r2, #255	; 0xff
 8015ba4:	d904      	bls.n	8015bb0 <__ascii_wctomb+0x14>
 8015ba6:	228a      	movs	r2, #138	; 0x8a
 8015ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015bac:	601a      	str	r2, [r3, #0]
 8015bae:	4770      	bx	lr
 8015bb0:	2001      	movs	r0, #1
 8015bb2:	700a      	strb	r2, [r1, #0]
 8015bb4:	4770      	bx	lr
	...

08015bb8 <_write_r>:
 8015bb8:	b538      	push	{r3, r4, r5, lr}
 8015bba:	4604      	mov	r4, r0
 8015bbc:	4608      	mov	r0, r1
 8015bbe:	4611      	mov	r1, r2
 8015bc0:	2200      	movs	r2, #0
 8015bc2:	4d05      	ldr	r5, [pc, #20]	; (8015bd8 <_write_r+0x20>)
 8015bc4:	602a      	str	r2, [r5, #0]
 8015bc6:	461a      	mov	r2, r3
 8015bc8:	f7ec fd3d 	bl	8002646 <_write>
 8015bcc:	1c43      	adds	r3, r0, #1
 8015bce:	d102      	bne.n	8015bd6 <_write_r+0x1e>
 8015bd0:	682b      	ldr	r3, [r5, #0]
 8015bd2:	b103      	cbz	r3, 8015bd6 <_write_r+0x1e>
 8015bd4:	6023      	str	r3, [r4, #0]
 8015bd6:	bd38      	pop	{r3, r4, r5, pc}
 8015bd8:	200070b8 	.word	0x200070b8

08015bdc <__swsetup_r>:
 8015bdc:	4b32      	ldr	r3, [pc, #200]	; (8015ca8 <__swsetup_r+0xcc>)
 8015bde:	b570      	push	{r4, r5, r6, lr}
 8015be0:	681d      	ldr	r5, [r3, #0]
 8015be2:	4606      	mov	r6, r0
 8015be4:	460c      	mov	r4, r1
 8015be6:	b125      	cbz	r5, 8015bf2 <__swsetup_r+0x16>
 8015be8:	69ab      	ldr	r3, [r5, #24]
 8015bea:	b913      	cbnz	r3, 8015bf2 <__swsetup_r+0x16>
 8015bec:	4628      	mov	r0, r5
 8015bee:	f7fe fa99 	bl	8014124 <__sinit>
 8015bf2:	4b2e      	ldr	r3, [pc, #184]	; (8015cac <__swsetup_r+0xd0>)
 8015bf4:	429c      	cmp	r4, r3
 8015bf6:	d10f      	bne.n	8015c18 <__swsetup_r+0x3c>
 8015bf8:	686c      	ldr	r4, [r5, #4]
 8015bfa:	89a3      	ldrh	r3, [r4, #12]
 8015bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015c00:	0719      	lsls	r1, r3, #28
 8015c02:	d42c      	bmi.n	8015c5e <__swsetup_r+0x82>
 8015c04:	06dd      	lsls	r5, r3, #27
 8015c06:	d411      	bmi.n	8015c2c <__swsetup_r+0x50>
 8015c08:	2309      	movs	r3, #9
 8015c0a:	6033      	str	r3, [r6, #0]
 8015c0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015c14:	81a3      	strh	r3, [r4, #12]
 8015c16:	e03e      	b.n	8015c96 <__swsetup_r+0xba>
 8015c18:	4b25      	ldr	r3, [pc, #148]	; (8015cb0 <__swsetup_r+0xd4>)
 8015c1a:	429c      	cmp	r4, r3
 8015c1c:	d101      	bne.n	8015c22 <__swsetup_r+0x46>
 8015c1e:	68ac      	ldr	r4, [r5, #8]
 8015c20:	e7eb      	b.n	8015bfa <__swsetup_r+0x1e>
 8015c22:	4b24      	ldr	r3, [pc, #144]	; (8015cb4 <__swsetup_r+0xd8>)
 8015c24:	429c      	cmp	r4, r3
 8015c26:	bf08      	it	eq
 8015c28:	68ec      	ldreq	r4, [r5, #12]
 8015c2a:	e7e6      	b.n	8015bfa <__swsetup_r+0x1e>
 8015c2c:	0758      	lsls	r0, r3, #29
 8015c2e:	d512      	bpl.n	8015c56 <__swsetup_r+0x7a>
 8015c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015c32:	b141      	cbz	r1, 8015c46 <__swsetup_r+0x6a>
 8015c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c38:	4299      	cmp	r1, r3
 8015c3a:	d002      	beq.n	8015c42 <__swsetup_r+0x66>
 8015c3c:	4630      	mov	r0, r6
 8015c3e:	f7ff fb71 	bl	8015324 <_free_r>
 8015c42:	2300      	movs	r3, #0
 8015c44:	6363      	str	r3, [r4, #52]	; 0x34
 8015c46:	89a3      	ldrh	r3, [r4, #12]
 8015c48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015c4c:	81a3      	strh	r3, [r4, #12]
 8015c4e:	2300      	movs	r3, #0
 8015c50:	6063      	str	r3, [r4, #4]
 8015c52:	6923      	ldr	r3, [r4, #16]
 8015c54:	6023      	str	r3, [r4, #0]
 8015c56:	89a3      	ldrh	r3, [r4, #12]
 8015c58:	f043 0308 	orr.w	r3, r3, #8
 8015c5c:	81a3      	strh	r3, [r4, #12]
 8015c5e:	6923      	ldr	r3, [r4, #16]
 8015c60:	b94b      	cbnz	r3, 8015c76 <__swsetup_r+0x9a>
 8015c62:	89a3      	ldrh	r3, [r4, #12]
 8015c64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015c6c:	d003      	beq.n	8015c76 <__swsetup_r+0x9a>
 8015c6e:	4621      	mov	r1, r4
 8015c70:	4630      	mov	r0, r6
 8015c72:	f000 f957 	bl	8015f24 <__smakebuf_r>
 8015c76:	89a0      	ldrh	r0, [r4, #12]
 8015c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015c7c:	f010 0301 	ands.w	r3, r0, #1
 8015c80:	d00a      	beq.n	8015c98 <__swsetup_r+0xbc>
 8015c82:	2300      	movs	r3, #0
 8015c84:	60a3      	str	r3, [r4, #8]
 8015c86:	6963      	ldr	r3, [r4, #20]
 8015c88:	425b      	negs	r3, r3
 8015c8a:	61a3      	str	r3, [r4, #24]
 8015c8c:	6923      	ldr	r3, [r4, #16]
 8015c8e:	b943      	cbnz	r3, 8015ca2 <__swsetup_r+0xc6>
 8015c90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015c94:	d1ba      	bne.n	8015c0c <__swsetup_r+0x30>
 8015c96:	bd70      	pop	{r4, r5, r6, pc}
 8015c98:	0781      	lsls	r1, r0, #30
 8015c9a:	bf58      	it	pl
 8015c9c:	6963      	ldrpl	r3, [r4, #20]
 8015c9e:	60a3      	str	r3, [r4, #8]
 8015ca0:	e7f4      	b.n	8015c8c <__swsetup_r+0xb0>
 8015ca2:	2000      	movs	r0, #0
 8015ca4:	e7f7      	b.n	8015c96 <__swsetup_r+0xba>
 8015ca6:	bf00      	nop
 8015ca8:	20000038 	.word	0x20000038
 8015cac:	080184a4 	.word	0x080184a4
 8015cb0:	080184c4 	.word	0x080184c4
 8015cb4:	08018484 	.word	0x08018484

08015cb8 <__assert_func>:
 8015cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015cba:	4614      	mov	r4, r2
 8015cbc:	461a      	mov	r2, r3
 8015cbe:	4b09      	ldr	r3, [pc, #36]	; (8015ce4 <__assert_func+0x2c>)
 8015cc0:	4605      	mov	r5, r0
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	68d8      	ldr	r0, [r3, #12]
 8015cc6:	b14c      	cbz	r4, 8015cdc <__assert_func+0x24>
 8015cc8:	4b07      	ldr	r3, [pc, #28]	; (8015ce8 <__assert_func+0x30>)
 8015cca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015cce:	9100      	str	r1, [sp, #0]
 8015cd0:	462b      	mov	r3, r5
 8015cd2:	4906      	ldr	r1, [pc, #24]	; (8015cec <__assert_func+0x34>)
 8015cd4:	f000 f8dc 	bl	8015e90 <fiprintf>
 8015cd8:	f000 f9cc 	bl	8016074 <abort>
 8015cdc:	4b04      	ldr	r3, [pc, #16]	; (8015cf0 <__assert_func+0x38>)
 8015cde:	461c      	mov	r4, r3
 8015ce0:	e7f3      	b.n	8015cca <__assert_func+0x12>
 8015ce2:	bf00      	nop
 8015ce4:	20000038 	.word	0x20000038
 8015ce8:	080186cd 	.word	0x080186cd
 8015cec:	080186da 	.word	0x080186da
 8015cf0:	08018708 	.word	0x08018708

08015cf4 <_close_r>:
 8015cf4:	b538      	push	{r3, r4, r5, lr}
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	4d05      	ldr	r5, [pc, #20]	; (8015d10 <_close_r+0x1c>)
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	4608      	mov	r0, r1
 8015cfe:	602b      	str	r3, [r5, #0]
 8015d00:	f7ec fcbd 	bl	800267e <_close>
 8015d04:	1c43      	adds	r3, r0, #1
 8015d06:	d102      	bne.n	8015d0e <_close_r+0x1a>
 8015d08:	682b      	ldr	r3, [r5, #0]
 8015d0a:	b103      	cbz	r3, 8015d0e <_close_r+0x1a>
 8015d0c:	6023      	str	r3, [r4, #0]
 8015d0e:	bd38      	pop	{r3, r4, r5, pc}
 8015d10:	200070b8 	.word	0x200070b8

08015d14 <__sflush_r>:
 8015d14:	898a      	ldrh	r2, [r1, #12]
 8015d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d18:	4605      	mov	r5, r0
 8015d1a:	0710      	lsls	r0, r2, #28
 8015d1c:	460c      	mov	r4, r1
 8015d1e:	d457      	bmi.n	8015dd0 <__sflush_r+0xbc>
 8015d20:	684b      	ldr	r3, [r1, #4]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	dc04      	bgt.n	8015d30 <__sflush_r+0x1c>
 8015d26:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	dc01      	bgt.n	8015d30 <__sflush_r+0x1c>
 8015d2c:	2000      	movs	r0, #0
 8015d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d32:	2e00      	cmp	r6, #0
 8015d34:	d0fa      	beq.n	8015d2c <__sflush_r+0x18>
 8015d36:	2300      	movs	r3, #0
 8015d38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015d3c:	682f      	ldr	r7, [r5, #0]
 8015d3e:	602b      	str	r3, [r5, #0]
 8015d40:	d032      	beq.n	8015da8 <__sflush_r+0x94>
 8015d42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015d44:	89a3      	ldrh	r3, [r4, #12]
 8015d46:	075a      	lsls	r2, r3, #29
 8015d48:	d505      	bpl.n	8015d56 <__sflush_r+0x42>
 8015d4a:	6863      	ldr	r3, [r4, #4]
 8015d4c:	1ac0      	subs	r0, r0, r3
 8015d4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015d50:	b10b      	cbz	r3, 8015d56 <__sflush_r+0x42>
 8015d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015d54:	1ac0      	subs	r0, r0, r3
 8015d56:	2300      	movs	r3, #0
 8015d58:	4602      	mov	r2, r0
 8015d5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d5c:	4628      	mov	r0, r5
 8015d5e:	6a21      	ldr	r1, [r4, #32]
 8015d60:	47b0      	blx	r6
 8015d62:	1c43      	adds	r3, r0, #1
 8015d64:	89a3      	ldrh	r3, [r4, #12]
 8015d66:	d106      	bne.n	8015d76 <__sflush_r+0x62>
 8015d68:	6829      	ldr	r1, [r5, #0]
 8015d6a:	291d      	cmp	r1, #29
 8015d6c:	d82c      	bhi.n	8015dc8 <__sflush_r+0xb4>
 8015d6e:	4a29      	ldr	r2, [pc, #164]	; (8015e14 <__sflush_r+0x100>)
 8015d70:	40ca      	lsrs	r2, r1
 8015d72:	07d6      	lsls	r6, r2, #31
 8015d74:	d528      	bpl.n	8015dc8 <__sflush_r+0xb4>
 8015d76:	2200      	movs	r2, #0
 8015d78:	6062      	str	r2, [r4, #4]
 8015d7a:	6922      	ldr	r2, [r4, #16]
 8015d7c:	04d9      	lsls	r1, r3, #19
 8015d7e:	6022      	str	r2, [r4, #0]
 8015d80:	d504      	bpl.n	8015d8c <__sflush_r+0x78>
 8015d82:	1c42      	adds	r2, r0, #1
 8015d84:	d101      	bne.n	8015d8a <__sflush_r+0x76>
 8015d86:	682b      	ldr	r3, [r5, #0]
 8015d88:	b903      	cbnz	r3, 8015d8c <__sflush_r+0x78>
 8015d8a:	6560      	str	r0, [r4, #84]	; 0x54
 8015d8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d8e:	602f      	str	r7, [r5, #0]
 8015d90:	2900      	cmp	r1, #0
 8015d92:	d0cb      	beq.n	8015d2c <__sflush_r+0x18>
 8015d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d98:	4299      	cmp	r1, r3
 8015d9a:	d002      	beq.n	8015da2 <__sflush_r+0x8e>
 8015d9c:	4628      	mov	r0, r5
 8015d9e:	f7ff fac1 	bl	8015324 <_free_r>
 8015da2:	2000      	movs	r0, #0
 8015da4:	6360      	str	r0, [r4, #52]	; 0x34
 8015da6:	e7c2      	b.n	8015d2e <__sflush_r+0x1a>
 8015da8:	6a21      	ldr	r1, [r4, #32]
 8015daa:	2301      	movs	r3, #1
 8015dac:	4628      	mov	r0, r5
 8015dae:	47b0      	blx	r6
 8015db0:	1c41      	adds	r1, r0, #1
 8015db2:	d1c7      	bne.n	8015d44 <__sflush_r+0x30>
 8015db4:	682b      	ldr	r3, [r5, #0]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d0c4      	beq.n	8015d44 <__sflush_r+0x30>
 8015dba:	2b1d      	cmp	r3, #29
 8015dbc:	d001      	beq.n	8015dc2 <__sflush_r+0xae>
 8015dbe:	2b16      	cmp	r3, #22
 8015dc0:	d101      	bne.n	8015dc6 <__sflush_r+0xb2>
 8015dc2:	602f      	str	r7, [r5, #0]
 8015dc4:	e7b2      	b.n	8015d2c <__sflush_r+0x18>
 8015dc6:	89a3      	ldrh	r3, [r4, #12]
 8015dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015dcc:	81a3      	strh	r3, [r4, #12]
 8015dce:	e7ae      	b.n	8015d2e <__sflush_r+0x1a>
 8015dd0:	690f      	ldr	r7, [r1, #16]
 8015dd2:	2f00      	cmp	r7, #0
 8015dd4:	d0aa      	beq.n	8015d2c <__sflush_r+0x18>
 8015dd6:	0793      	lsls	r3, r2, #30
 8015dd8:	bf18      	it	ne
 8015dda:	2300      	movne	r3, #0
 8015ddc:	680e      	ldr	r6, [r1, #0]
 8015dde:	bf08      	it	eq
 8015de0:	694b      	ldreq	r3, [r1, #20]
 8015de2:	1bf6      	subs	r6, r6, r7
 8015de4:	600f      	str	r7, [r1, #0]
 8015de6:	608b      	str	r3, [r1, #8]
 8015de8:	2e00      	cmp	r6, #0
 8015dea:	dd9f      	ble.n	8015d2c <__sflush_r+0x18>
 8015dec:	4633      	mov	r3, r6
 8015dee:	463a      	mov	r2, r7
 8015df0:	4628      	mov	r0, r5
 8015df2:	6a21      	ldr	r1, [r4, #32]
 8015df4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8015df8:	47e0      	blx	ip
 8015dfa:	2800      	cmp	r0, #0
 8015dfc:	dc06      	bgt.n	8015e0c <__sflush_r+0xf8>
 8015dfe:	89a3      	ldrh	r3, [r4, #12]
 8015e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e08:	81a3      	strh	r3, [r4, #12]
 8015e0a:	e790      	b.n	8015d2e <__sflush_r+0x1a>
 8015e0c:	4407      	add	r7, r0
 8015e0e:	1a36      	subs	r6, r6, r0
 8015e10:	e7ea      	b.n	8015de8 <__sflush_r+0xd4>
 8015e12:	bf00      	nop
 8015e14:	20400001 	.word	0x20400001

08015e18 <_fflush_r>:
 8015e18:	b538      	push	{r3, r4, r5, lr}
 8015e1a:	690b      	ldr	r3, [r1, #16]
 8015e1c:	4605      	mov	r5, r0
 8015e1e:	460c      	mov	r4, r1
 8015e20:	b913      	cbnz	r3, 8015e28 <_fflush_r+0x10>
 8015e22:	2500      	movs	r5, #0
 8015e24:	4628      	mov	r0, r5
 8015e26:	bd38      	pop	{r3, r4, r5, pc}
 8015e28:	b118      	cbz	r0, 8015e32 <_fflush_r+0x1a>
 8015e2a:	6983      	ldr	r3, [r0, #24]
 8015e2c:	b90b      	cbnz	r3, 8015e32 <_fflush_r+0x1a>
 8015e2e:	f7fe f979 	bl	8014124 <__sinit>
 8015e32:	4b14      	ldr	r3, [pc, #80]	; (8015e84 <_fflush_r+0x6c>)
 8015e34:	429c      	cmp	r4, r3
 8015e36:	d11b      	bne.n	8015e70 <_fflush_r+0x58>
 8015e38:	686c      	ldr	r4, [r5, #4]
 8015e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d0ef      	beq.n	8015e22 <_fflush_r+0xa>
 8015e42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015e44:	07d0      	lsls	r0, r2, #31
 8015e46:	d404      	bmi.n	8015e52 <_fflush_r+0x3a>
 8015e48:	0599      	lsls	r1, r3, #22
 8015e4a:	d402      	bmi.n	8015e52 <_fflush_r+0x3a>
 8015e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e4e:	f7fe fd72 	bl	8014936 <__retarget_lock_acquire_recursive>
 8015e52:	4628      	mov	r0, r5
 8015e54:	4621      	mov	r1, r4
 8015e56:	f7ff ff5d 	bl	8015d14 <__sflush_r>
 8015e5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015e5c:	4605      	mov	r5, r0
 8015e5e:	07da      	lsls	r2, r3, #31
 8015e60:	d4e0      	bmi.n	8015e24 <_fflush_r+0xc>
 8015e62:	89a3      	ldrh	r3, [r4, #12]
 8015e64:	059b      	lsls	r3, r3, #22
 8015e66:	d4dd      	bmi.n	8015e24 <_fflush_r+0xc>
 8015e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e6a:	f7fe fd65 	bl	8014938 <__retarget_lock_release_recursive>
 8015e6e:	e7d9      	b.n	8015e24 <_fflush_r+0xc>
 8015e70:	4b05      	ldr	r3, [pc, #20]	; (8015e88 <_fflush_r+0x70>)
 8015e72:	429c      	cmp	r4, r3
 8015e74:	d101      	bne.n	8015e7a <_fflush_r+0x62>
 8015e76:	68ac      	ldr	r4, [r5, #8]
 8015e78:	e7df      	b.n	8015e3a <_fflush_r+0x22>
 8015e7a:	4b04      	ldr	r3, [pc, #16]	; (8015e8c <_fflush_r+0x74>)
 8015e7c:	429c      	cmp	r4, r3
 8015e7e:	bf08      	it	eq
 8015e80:	68ec      	ldreq	r4, [r5, #12]
 8015e82:	e7da      	b.n	8015e3a <_fflush_r+0x22>
 8015e84:	080184a4 	.word	0x080184a4
 8015e88:	080184c4 	.word	0x080184c4
 8015e8c:	08018484 	.word	0x08018484

08015e90 <fiprintf>:
 8015e90:	b40e      	push	{r1, r2, r3}
 8015e92:	b503      	push	{r0, r1, lr}
 8015e94:	4601      	mov	r1, r0
 8015e96:	ab03      	add	r3, sp, #12
 8015e98:	4805      	ldr	r0, [pc, #20]	; (8015eb0 <fiprintf+0x20>)
 8015e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e9e:	6800      	ldr	r0, [r0, #0]
 8015ea0:	9301      	str	r3, [sp, #4]
 8015ea2:	f7ff fc9f 	bl	80157e4 <_vfiprintf_r>
 8015ea6:	b002      	add	sp, #8
 8015ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015eac:	b003      	add	sp, #12
 8015eae:	4770      	bx	lr
 8015eb0:	20000038 	.word	0x20000038

08015eb4 <_lseek_r>:
 8015eb4:	b538      	push	{r3, r4, r5, lr}
 8015eb6:	4604      	mov	r4, r0
 8015eb8:	4608      	mov	r0, r1
 8015eba:	4611      	mov	r1, r2
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	4d05      	ldr	r5, [pc, #20]	; (8015ed4 <_lseek_r+0x20>)
 8015ec0:	602a      	str	r2, [r5, #0]
 8015ec2:	461a      	mov	r2, r3
 8015ec4:	f7ec fbff 	bl	80026c6 <_lseek>
 8015ec8:	1c43      	adds	r3, r0, #1
 8015eca:	d102      	bne.n	8015ed2 <_lseek_r+0x1e>
 8015ecc:	682b      	ldr	r3, [r5, #0]
 8015ece:	b103      	cbz	r3, 8015ed2 <_lseek_r+0x1e>
 8015ed0:	6023      	str	r3, [r4, #0]
 8015ed2:	bd38      	pop	{r3, r4, r5, pc}
 8015ed4:	200070b8 	.word	0x200070b8

08015ed8 <__swhatbuf_r>:
 8015ed8:	b570      	push	{r4, r5, r6, lr}
 8015eda:	460e      	mov	r6, r1
 8015edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ee0:	4614      	mov	r4, r2
 8015ee2:	2900      	cmp	r1, #0
 8015ee4:	461d      	mov	r5, r3
 8015ee6:	b096      	sub	sp, #88	; 0x58
 8015ee8:	da08      	bge.n	8015efc <__swhatbuf_r+0x24>
 8015eea:	2200      	movs	r2, #0
 8015eec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015ef0:	602a      	str	r2, [r5, #0]
 8015ef2:	061a      	lsls	r2, r3, #24
 8015ef4:	d410      	bmi.n	8015f18 <__swhatbuf_r+0x40>
 8015ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015efa:	e00e      	b.n	8015f1a <__swhatbuf_r+0x42>
 8015efc:	466a      	mov	r2, sp
 8015efe:	f000 f8c1 	bl	8016084 <_fstat_r>
 8015f02:	2800      	cmp	r0, #0
 8015f04:	dbf1      	blt.n	8015eea <__swhatbuf_r+0x12>
 8015f06:	9a01      	ldr	r2, [sp, #4]
 8015f08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015f0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015f10:	425a      	negs	r2, r3
 8015f12:	415a      	adcs	r2, r3
 8015f14:	602a      	str	r2, [r5, #0]
 8015f16:	e7ee      	b.n	8015ef6 <__swhatbuf_r+0x1e>
 8015f18:	2340      	movs	r3, #64	; 0x40
 8015f1a:	2000      	movs	r0, #0
 8015f1c:	6023      	str	r3, [r4, #0]
 8015f1e:	b016      	add	sp, #88	; 0x58
 8015f20:	bd70      	pop	{r4, r5, r6, pc}
	...

08015f24 <__smakebuf_r>:
 8015f24:	898b      	ldrh	r3, [r1, #12]
 8015f26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015f28:	079d      	lsls	r5, r3, #30
 8015f2a:	4606      	mov	r6, r0
 8015f2c:	460c      	mov	r4, r1
 8015f2e:	d507      	bpl.n	8015f40 <__smakebuf_r+0x1c>
 8015f30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015f34:	6023      	str	r3, [r4, #0]
 8015f36:	6123      	str	r3, [r4, #16]
 8015f38:	2301      	movs	r3, #1
 8015f3a:	6163      	str	r3, [r4, #20]
 8015f3c:	b002      	add	sp, #8
 8015f3e:	bd70      	pop	{r4, r5, r6, pc}
 8015f40:	466a      	mov	r2, sp
 8015f42:	ab01      	add	r3, sp, #4
 8015f44:	f7ff ffc8 	bl	8015ed8 <__swhatbuf_r>
 8015f48:	9900      	ldr	r1, [sp, #0]
 8015f4a:	4605      	mov	r5, r0
 8015f4c:	4630      	mov	r0, r6
 8015f4e:	f7ff fa51 	bl	80153f4 <_malloc_r>
 8015f52:	b948      	cbnz	r0, 8015f68 <__smakebuf_r+0x44>
 8015f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f58:	059a      	lsls	r2, r3, #22
 8015f5a:	d4ef      	bmi.n	8015f3c <__smakebuf_r+0x18>
 8015f5c:	f023 0303 	bic.w	r3, r3, #3
 8015f60:	f043 0302 	orr.w	r3, r3, #2
 8015f64:	81a3      	strh	r3, [r4, #12]
 8015f66:	e7e3      	b.n	8015f30 <__smakebuf_r+0xc>
 8015f68:	4b0d      	ldr	r3, [pc, #52]	; (8015fa0 <__smakebuf_r+0x7c>)
 8015f6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8015f6c:	89a3      	ldrh	r3, [r4, #12]
 8015f6e:	6020      	str	r0, [r4, #0]
 8015f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f74:	81a3      	strh	r3, [r4, #12]
 8015f76:	9b00      	ldr	r3, [sp, #0]
 8015f78:	6120      	str	r0, [r4, #16]
 8015f7a:	6163      	str	r3, [r4, #20]
 8015f7c:	9b01      	ldr	r3, [sp, #4]
 8015f7e:	b15b      	cbz	r3, 8015f98 <__smakebuf_r+0x74>
 8015f80:	4630      	mov	r0, r6
 8015f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f86:	f000 f88f 	bl	80160a8 <_isatty_r>
 8015f8a:	b128      	cbz	r0, 8015f98 <__smakebuf_r+0x74>
 8015f8c:	89a3      	ldrh	r3, [r4, #12]
 8015f8e:	f023 0303 	bic.w	r3, r3, #3
 8015f92:	f043 0301 	orr.w	r3, r3, #1
 8015f96:	81a3      	strh	r3, [r4, #12]
 8015f98:	89a0      	ldrh	r0, [r4, #12]
 8015f9a:	4305      	orrs	r5, r0
 8015f9c:	81a5      	strh	r5, [r4, #12]
 8015f9e:	e7cd      	b.n	8015f3c <__smakebuf_r+0x18>
 8015fa0:	080140bd 	.word	0x080140bd

08015fa4 <memmove>:
 8015fa4:	4288      	cmp	r0, r1
 8015fa6:	b510      	push	{r4, lr}
 8015fa8:	eb01 0402 	add.w	r4, r1, r2
 8015fac:	d902      	bls.n	8015fb4 <memmove+0x10>
 8015fae:	4284      	cmp	r4, r0
 8015fb0:	4623      	mov	r3, r4
 8015fb2:	d807      	bhi.n	8015fc4 <memmove+0x20>
 8015fb4:	1e43      	subs	r3, r0, #1
 8015fb6:	42a1      	cmp	r1, r4
 8015fb8:	d008      	beq.n	8015fcc <memmove+0x28>
 8015fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015fbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015fc2:	e7f8      	b.n	8015fb6 <memmove+0x12>
 8015fc4:	4601      	mov	r1, r0
 8015fc6:	4402      	add	r2, r0
 8015fc8:	428a      	cmp	r2, r1
 8015fca:	d100      	bne.n	8015fce <memmove+0x2a>
 8015fcc:	bd10      	pop	{r4, pc}
 8015fce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015fd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015fd6:	e7f7      	b.n	8015fc8 <memmove+0x24>

08015fd8 <__malloc_lock>:
 8015fd8:	4801      	ldr	r0, [pc, #4]	; (8015fe0 <__malloc_lock+0x8>)
 8015fda:	f7fe bcac 	b.w	8014936 <__retarget_lock_acquire_recursive>
 8015fde:	bf00      	nop
 8015fe0:	200070bc 	.word	0x200070bc

08015fe4 <__malloc_unlock>:
 8015fe4:	4801      	ldr	r0, [pc, #4]	; (8015fec <__malloc_unlock+0x8>)
 8015fe6:	f7fe bca7 	b.w	8014938 <__retarget_lock_release_recursive>
 8015fea:	bf00      	nop
 8015fec:	200070bc 	.word	0x200070bc

08015ff0 <_realloc_r>:
 8015ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ff4:	4680      	mov	r8, r0
 8015ff6:	4614      	mov	r4, r2
 8015ff8:	460e      	mov	r6, r1
 8015ffa:	b921      	cbnz	r1, 8016006 <_realloc_r+0x16>
 8015ffc:	4611      	mov	r1, r2
 8015ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016002:	f7ff b9f7 	b.w	80153f4 <_malloc_r>
 8016006:	b92a      	cbnz	r2, 8016014 <_realloc_r+0x24>
 8016008:	f7ff f98c 	bl	8015324 <_free_r>
 801600c:	4625      	mov	r5, r4
 801600e:	4628      	mov	r0, r5
 8016010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016014:	f000 f858 	bl	80160c8 <_malloc_usable_size_r>
 8016018:	4284      	cmp	r4, r0
 801601a:	4607      	mov	r7, r0
 801601c:	d802      	bhi.n	8016024 <_realloc_r+0x34>
 801601e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016022:	d812      	bhi.n	801604a <_realloc_r+0x5a>
 8016024:	4621      	mov	r1, r4
 8016026:	4640      	mov	r0, r8
 8016028:	f7ff f9e4 	bl	80153f4 <_malloc_r>
 801602c:	4605      	mov	r5, r0
 801602e:	2800      	cmp	r0, #0
 8016030:	d0ed      	beq.n	801600e <_realloc_r+0x1e>
 8016032:	42bc      	cmp	r4, r7
 8016034:	4622      	mov	r2, r4
 8016036:	4631      	mov	r1, r6
 8016038:	bf28      	it	cs
 801603a:	463a      	movcs	r2, r7
 801603c:	f7fb fc3c 	bl	80118b8 <memcpy>
 8016040:	4631      	mov	r1, r6
 8016042:	4640      	mov	r0, r8
 8016044:	f7ff f96e 	bl	8015324 <_free_r>
 8016048:	e7e1      	b.n	801600e <_realloc_r+0x1e>
 801604a:	4635      	mov	r5, r6
 801604c:	e7df      	b.n	801600e <_realloc_r+0x1e>
	...

08016050 <_read_r>:
 8016050:	b538      	push	{r3, r4, r5, lr}
 8016052:	4604      	mov	r4, r0
 8016054:	4608      	mov	r0, r1
 8016056:	4611      	mov	r1, r2
 8016058:	2200      	movs	r2, #0
 801605a:	4d05      	ldr	r5, [pc, #20]	; (8016070 <_read_r+0x20>)
 801605c:	602a      	str	r2, [r5, #0]
 801605e:	461a      	mov	r2, r3
 8016060:	f7ec fad4 	bl	800260c <_read>
 8016064:	1c43      	adds	r3, r0, #1
 8016066:	d102      	bne.n	801606e <_read_r+0x1e>
 8016068:	682b      	ldr	r3, [r5, #0]
 801606a:	b103      	cbz	r3, 801606e <_read_r+0x1e>
 801606c:	6023      	str	r3, [r4, #0]
 801606e:	bd38      	pop	{r3, r4, r5, pc}
 8016070:	200070b8 	.word	0x200070b8

08016074 <abort>:
 8016074:	2006      	movs	r0, #6
 8016076:	b508      	push	{r3, lr}
 8016078:	f000 f856 	bl	8016128 <raise>
 801607c:	2001      	movs	r0, #1
 801607e:	f7ec fabb 	bl	80025f8 <_exit>
	...

08016084 <_fstat_r>:
 8016084:	b538      	push	{r3, r4, r5, lr}
 8016086:	2300      	movs	r3, #0
 8016088:	4d06      	ldr	r5, [pc, #24]	; (80160a4 <_fstat_r+0x20>)
 801608a:	4604      	mov	r4, r0
 801608c:	4608      	mov	r0, r1
 801608e:	4611      	mov	r1, r2
 8016090:	602b      	str	r3, [r5, #0]
 8016092:	f7ec faff 	bl	8002694 <_fstat>
 8016096:	1c43      	adds	r3, r0, #1
 8016098:	d102      	bne.n	80160a0 <_fstat_r+0x1c>
 801609a:	682b      	ldr	r3, [r5, #0]
 801609c:	b103      	cbz	r3, 80160a0 <_fstat_r+0x1c>
 801609e:	6023      	str	r3, [r4, #0]
 80160a0:	bd38      	pop	{r3, r4, r5, pc}
 80160a2:	bf00      	nop
 80160a4:	200070b8 	.word	0x200070b8

080160a8 <_isatty_r>:
 80160a8:	b538      	push	{r3, r4, r5, lr}
 80160aa:	2300      	movs	r3, #0
 80160ac:	4d05      	ldr	r5, [pc, #20]	; (80160c4 <_isatty_r+0x1c>)
 80160ae:	4604      	mov	r4, r0
 80160b0:	4608      	mov	r0, r1
 80160b2:	602b      	str	r3, [r5, #0]
 80160b4:	f7ec fafd 	bl	80026b2 <_isatty>
 80160b8:	1c43      	adds	r3, r0, #1
 80160ba:	d102      	bne.n	80160c2 <_isatty_r+0x1a>
 80160bc:	682b      	ldr	r3, [r5, #0]
 80160be:	b103      	cbz	r3, 80160c2 <_isatty_r+0x1a>
 80160c0:	6023      	str	r3, [r4, #0]
 80160c2:	bd38      	pop	{r3, r4, r5, pc}
 80160c4:	200070b8 	.word	0x200070b8

080160c8 <_malloc_usable_size_r>:
 80160c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80160cc:	1f18      	subs	r0, r3, #4
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	bfbc      	itt	lt
 80160d2:	580b      	ldrlt	r3, [r1, r0]
 80160d4:	18c0      	addlt	r0, r0, r3
 80160d6:	4770      	bx	lr

080160d8 <_raise_r>:
 80160d8:	291f      	cmp	r1, #31
 80160da:	b538      	push	{r3, r4, r5, lr}
 80160dc:	4604      	mov	r4, r0
 80160de:	460d      	mov	r5, r1
 80160e0:	d904      	bls.n	80160ec <_raise_r+0x14>
 80160e2:	2316      	movs	r3, #22
 80160e4:	6003      	str	r3, [r0, #0]
 80160e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80160ea:	bd38      	pop	{r3, r4, r5, pc}
 80160ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80160ee:	b112      	cbz	r2, 80160f6 <_raise_r+0x1e>
 80160f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80160f4:	b94b      	cbnz	r3, 801610a <_raise_r+0x32>
 80160f6:	4620      	mov	r0, r4
 80160f8:	f000 f830 	bl	801615c <_getpid_r>
 80160fc:	462a      	mov	r2, r5
 80160fe:	4601      	mov	r1, r0
 8016100:	4620      	mov	r0, r4
 8016102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016106:	f000 b817 	b.w	8016138 <_kill_r>
 801610a:	2b01      	cmp	r3, #1
 801610c:	d00a      	beq.n	8016124 <_raise_r+0x4c>
 801610e:	1c59      	adds	r1, r3, #1
 8016110:	d103      	bne.n	801611a <_raise_r+0x42>
 8016112:	2316      	movs	r3, #22
 8016114:	6003      	str	r3, [r0, #0]
 8016116:	2001      	movs	r0, #1
 8016118:	e7e7      	b.n	80160ea <_raise_r+0x12>
 801611a:	2400      	movs	r4, #0
 801611c:	4628      	mov	r0, r5
 801611e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016122:	4798      	blx	r3
 8016124:	2000      	movs	r0, #0
 8016126:	e7e0      	b.n	80160ea <_raise_r+0x12>

08016128 <raise>:
 8016128:	4b02      	ldr	r3, [pc, #8]	; (8016134 <raise+0xc>)
 801612a:	4601      	mov	r1, r0
 801612c:	6818      	ldr	r0, [r3, #0]
 801612e:	f7ff bfd3 	b.w	80160d8 <_raise_r>
 8016132:	bf00      	nop
 8016134:	20000038 	.word	0x20000038

08016138 <_kill_r>:
 8016138:	b538      	push	{r3, r4, r5, lr}
 801613a:	2300      	movs	r3, #0
 801613c:	4d06      	ldr	r5, [pc, #24]	; (8016158 <_kill_r+0x20>)
 801613e:	4604      	mov	r4, r0
 8016140:	4608      	mov	r0, r1
 8016142:	4611      	mov	r1, r2
 8016144:	602b      	str	r3, [r5, #0]
 8016146:	f7ec fa45 	bl	80025d4 <_kill>
 801614a:	1c43      	adds	r3, r0, #1
 801614c:	d102      	bne.n	8016154 <_kill_r+0x1c>
 801614e:	682b      	ldr	r3, [r5, #0]
 8016150:	b103      	cbz	r3, 8016154 <_kill_r+0x1c>
 8016152:	6023      	str	r3, [r4, #0]
 8016154:	bd38      	pop	{r3, r4, r5, pc}
 8016156:	bf00      	nop
 8016158:	200070b8 	.word	0x200070b8

0801615c <_getpid_r>:
 801615c:	f7ec ba32 	b.w	80025c4 <_getpid>

08016160 <_init>:
 8016160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016162:	bf00      	nop
 8016164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016166:	bc08      	pop	{r3}
 8016168:	469e      	mov	lr, r3
 801616a:	4770      	bx	lr

0801616c <_fini>:
 801616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801616e:	bf00      	nop
 8016170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016172:	bc08      	pop	{r3}
 8016174:	469e      	mov	lr, r3
 8016176:	4770      	bx	lr
