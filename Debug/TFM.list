
TFM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016430  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000257c  080165b8  080165b8  000265b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018b34  08018b34  0003020c  2**0
                  CONTENTS
  4 .ARM          00000008  08018b34  08018b34  00028b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018b3c  08018b3c  0003020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018b3c  08018b3c  00028b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018b40  08018b40  00028b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08018b44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007de8  20000210  08018d50  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007ff8  08018d50  00037ff8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f547  00000000  00000000  00030235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005373  00000000  00000000  0004f77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  00054af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  00056180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cc09  00000000  00000000  00057688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027d2a  00000000  00000000  00084291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de5ea  00000000  00000000  000abfbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018a5a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007608  00000000  00000000  0018a5f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000210 	.word	0x20000210
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080165a0 	.word	0x080165a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000214 	.word	0x20000214
 80001c4:	080165a0 	.word	0x080165a0

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_frsub>:
 8000bf4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	e002      	b.n	8000c00 <__addsf3>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_fsub>:
 8000bfc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c00 <__addsf3>:
 8000c00:	0042      	lsls	r2, r0, #1
 8000c02:	bf1f      	itttt	ne
 8000c04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c08:	ea92 0f03 	teqne	r2, r3
 8000c0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c14:	d06a      	beq.n	8000cec <__addsf3+0xec>
 8000c16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1e:	bfc1      	itttt	gt
 8000c20:	18d2      	addgt	r2, r2, r3
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	4048      	eorgt	r0, r1
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	bfb8      	it	lt
 8000c2a:	425b      	neglt	r3, r3
 8000c2c:	2b19      	cmp	r3, #25
 8000c2e:	bf88      	it	hi
 8000c30:	4770      	bxhi	lr
 8000c32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3e:	bf18      	it	ne
 8000c40:	4240      	negne	r0, r0
 8000c42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4e:	bf18      	it	ne
 8000c50:	4249      	negne	r1, r1
 8000c52:	ea92 0f03 	teq	r2, r3
 8000c56:	d03f      	beq.n	8000cd8 <__addsf3+0xd8>
 8000c58:	f1a2 0201 	sub.w	r2, r2, #1
 8000c5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c60:	eb10 000c 	adds.w	r0, r0, ip
 8000c64:	f1c3 0320 	rsb	r3, r3, #32
 8000c68:	fa01 f103 	lsl.w	r1, r1, r3
 8000c6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__addsf3+0x78>
 8000c72:	4249      	negs	r1, r1
 8000c74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c7c:	d313      	bcc.n	8000ca6 <__addsf3+0xa6>
 8000c7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c82:	d306      	bcc.n	8000c92 <__addsf3+0x92>
 8000c84:	0840      	lsrs	r0, r0, #1
 8000c86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8a:	f102 0201 	add.w	r2, r2, #1
 8000c8e:	2afe      	cmp	r2, #254	; 0xfe
 8000c90:	d251      	bcs.n	8000d36 <__addsf3+0x136>
 8000c92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9a:	bf08      	it	eq
 8000c9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ca0:	ea40 0003 	orr.w	r0, r0, r3
 8000ca4:	4770      	bx	lr
 8000ca6:	0049      	lsls	r1, r1, #1
 8000ca8:	eb40 0000 	adc.w	r0, r0, r0
 8000cac:	3a01      	subs	r2, #1
 8000cae:	bf28      	it	cs
 8000cb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb4:	d2ed      	bcs.n	8000c92 <__addsf3+0x92>
 8000cb6:	fab0 fc80 	clz	ip, r0
 8000cba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc6:	bfaa      	itet	ge
 8000cc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ccc:	4252      	neglt	r2, r2
 8000cce:	4318      	orrge	r0, r3
 8000cd0:	bfbc      	itt	lt
 8000cd2:	40d0      	lsrlt	r0, r2
 8000cd4:	4318      	orrlt	r0, r3
 8000cd6:	4770      	bx	lr
 8000cd8:	f092 0f00 	teq	r2, #0
 8000cdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ce0:	bf06      	itte	eq
 8000ce2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce6:	3201      	addeq	r2, #1
 8000ce8:	3b01      	subne	r3, #1
 8000cea:	e7b5      	b.n	8000c58 <__addsf3+0x58>
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d021      	beq.n	8000d40 <__addsf3+0x140>
 8000cfc:	ea92 0f03 	teq	r2, r3
 8000d00:	d004      	beq.n	8000d0c <__addsf3+0x10c>
 8000d02:	f092 0f00 	teq	r2, #0
 8000d06:	bf08      	it	eq
 8000d08:	4608      	moveq	r0, r1
 8000d0a:	4770      	bx	lr
 8000d0c:	ea90 0f01 	teq	r0, r1
 8000d10:	bf1c      	itt	ne
 8000d12:	2000      	movne	r0, #0
 8000d14:	4770      	bxne	lr
 8000d16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d1a:	d104      	bne.n	8000d26 <__addsf3+0x126>
 8000d1c:	0040      	lsls	r0, r0, #1
 8000d1e:	bf28      	it	cs
 8000d20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d2a:	bf3c      	itt	cc
 8000d2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d30:	4770      	bxcc	lr
 8000d32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3e:	4770      	bx	lr
 8000d40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d44:	bf16      	itet	ne
 8000d46:	4608      	movne	r0, r1
 8000d48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d4c:	4601      	movne	r1, r0
 8000d4e:	0242      	lsls	r2, r0, #9
 8000d50:	bf06      	itte	eq
 8000d52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d56:	ea90 0f01 	teqeq	r0, r1
 8000d5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_ui2f>:
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e004      	b.n	8000d70 <__aeabi_i2f+0x8>
 8000d66:	bf00      	nop

08000d68 <__aeabi_i2f>:
 8000d68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d6c:	bf48      	it	mi
 8000d6e:	4240      	negmi	r0, r0
 8000d70:	ea5f 0c00 	movs.w	ip, r0
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	e01c      	b.n	8000dbe <__aeabi_l2f+0x2a>

08000d84 <__aeabi_ul2f>:
 8000d84:	ea50 0201 	orrs.w	r2, r0, r1
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e00a      	b.n	8000da8 <__aeabi_l2f+0x14>
 8000d92:	bf00      	nop

08000d94 <__aeabi_l2f>:
 8000d94:	ea50 0201 	orrs.w	r2, r0, r1
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000da0:	d502      	bpl.n	8000da8 <__aeabi_l2f+0x14>
 8000da2:	4240      	negs	r0, r0
 8000da4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da8:	ea5f 0c01 	movs.w	ip, r1
 8000dac:	bf02      	ittt	eq
 8000dae:	4684      	moveq	ip, r0
 8000db0:	4601      	moveq	r1, r0
 8000db2:	2000      	moveq	r0, #0
 8000db4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db8:	bf08      	it	eq
 8000dba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dc2:	fabc f28c 	clz	r2, ip
 8000dc6:	3a08      	subs	r2, #8
 8000dc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dcc:	db10      	blt.n	8000df0 <__aeabi_l2f+0x5c>
 8000dce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd8:	f1c2 0220 	rsb	r2, r2, #32
 8000ddc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000de0:	fa20 f202 	lsr.w	r2, r0, r2
 8000de4:	eb43 0002 	adc.w	r0, r3, r2
 8000de8:	bf08      	it	eq
 8000dea:	f020 0001 	biceq.w	r0, r0, #1
 8000dee:	4770      	bx	lr
 8000df0:	f102 0220 	add.w	r2, r2, #32
 8000df4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df8:	f1c2 0220 	rsb	r2, r2, #32
 8000dfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e00:	fa21 f202 	lsr.w	r2, r1, r2
 8000e04:	eb43 0002 	adc.w	r0, r3, r2
 8000e08:	bf08      	it	eq
 8000e0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_fmul>:
 8000e10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e18:	bf1e      	ittt	ne
 8000e1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1e:	ea92 0f0c 	teqne	r2, ip
 8000e22:	ea93 0f0c 	teqne	r3, ip
 8000e26:	d06f      	beq.n	8000f08 <__aeabi_fmul+0xf8>
 8000e28:	441a      	add	r2, r3
 8000e2a:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2e:	0240      	lsls	r0, r0, #9
 8000e30:	bf18      	it	ne
 8000e32:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e36:	d01e      	beq.n	8000e76 <__aeabi_fmul+0x66>
 8000e38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e3c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e40:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e44:	fba0 3101 	umull	r3, r1, r0, r1
 8000e48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e4c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e50:	bf3e      	ittt	cc
 8000e52:	0049      	lslcc	r1, r1, #1
 8000e54:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e58:	005b      	lslcc	r3, r3, #1
 8000e5a:	ea40 0001 	orr.w	r0, r0, r1
 8000e5e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e62:	2afd      	cmp	r2, #253	; 0xfd
 8000e64:	d81d      	bhi.n	8000ea2 <__aeabi_fmul+0x92>
 8000e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e6e:	bf08      	it	eq
 8000e70:	f020 0001 	biceq.w	r0, r0, #1
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e7e:	bf08      	it	eq
 8000e80:	0249      	lsleq	r1, r1, #9
 8000e82:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e86:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8a:	3a7f      	subs	r2, #127	; 0x7f
 8000e8c:	bfc2      	ittt	gt
 8000e8e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e92:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e96:	4770      	bxgt	lr
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	3a01      	subs	r2, #1
 8000ea2:	dc5d      	bgt.n	8000f60 <__aeabi_fmul+0x150>
 8000ea4:	f112 0f19 	cmn.w	r2, #25
 8000ea8:	bfdc      	itt	le
 8000eaa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eae:	4770      	bxle	lr
 8000eb0:	f1c2 0200 	rsb	r2, r2, #0
 8000eb4:	0041      	lsls	r1, r0, #1
 8000eb6:	fa21 f102 	lsr.w	r1, r1, r2
 8000eba:	f1c2 0220 	rsb	r2, r2, #32
 8000ebe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ec6:	f140 0000 	adc.w	r0, r0, #0
 8000eca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ece:	bf08      	it	eq
 8000ed0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed4:	4770      	bx	lr
 8000ed6:	f092 0f00 	teq	r2, #0
 8000eda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ede:	bf02      	ittt	eq
 8000ee0:	0040      	lsleq	r0, r0, #1
 8000ee2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ee6:	3a01      	subeq	r2, #1
 8000ee8:	d0f9      	beq.n	8000ede <__aeabi_fmul+0xce>
 8000eea:	ea40 000c 	orr.w	r0, r0, ip
 8000eee:	f093 0f00 	teq	r3, #0
 8000ef2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef6:	bf02      	ittt	eq
 8000ef8:	0049      	lsleq	r1, r1, #1
 8000efa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000efe:	3b01      	subeq	r3, #1
 8000f00:	d0f9      	beq.n	8000ef6 <__aeabi_fmul+0xe6>
 8000f02:	ea41 010c 	orr.w	r1, r1, ip
 8000f06:	e78f      	b.n	8000e28 <__aeabi_fmul+0x18>
 8000f08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f0c:	ea92 0f0c 	teq	r2, ip
 8000f10:	bf18      	it	ne
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d00a      	beq.n	8000f2e <__aeabi_fmul+0x11e>
 8000f18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f1c:	bf18      	it	ne
 8000f1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f22:	d1d8      	bne.n	8000ed6 <__aeabi_fmul+0xc6>
 8000f24:	ea80 0001 	eor.w	r0, r0, r1
 8000f28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f2c:	4770      	bx	lr
 8000f2e:	f090 0f00 	teq	r0, #0
 8000f32:	bf17      	itett	ne
 8000f34:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f38:	4608      	moveq	r0, r1
 8000f3a:	f091 0f00 	teqne	r1, #0
 8000f3e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f42:	d014      	beq.n	8000f6e <__aeabi_fmul+0x15e>
 8000f44:	ea92 0f0c 	teq	r2, ip
 8000f48:	d101      	bne.n	8000f4e <__aeabi_fmul+0x13e>
 8000f4a:	0242      	lsls	r2, r0, #9
 8000f4c:	d10f      	bne.n	8000f6e <__aeabi_fmul+0x15e>
 8000f4e:	ea93 0f0c 	teq	r3, ip
 8000f52:	d103      	bne.n	8000f5c <__aeabi_fmul+0x14c>
 8000f54:	024b      	lsls	r3, r1, #9
 8000f56:	bf18      	it	ne
 8000f58:	4608      	movne	r0, r1
 8000f5a:	d108      	bne.n	8000f6e <__aeabi_fmul+0x15e>
 8000f5c:	ea80 0001 	eor.w	r0, r0, r1
 8000f60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f6c:	4770      	bx	lr
 8000f6e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f72:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f76:	4770      	bx	lr

08000f78 <__aeabi_fdiv>:
 8000f78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f80:	bf1e      	ittt	ne
 8000f82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f86:	ea92 0f0c 	teqne	r2, ip
 8000f8a:	ea93 0f0c 	teqne	r3, ip
 8000f8e:	d069      	beq.n	8001064 <__aeabi_fdiv+0xec>
 8000f90:	eba2 0203 	sub.w	r2, r2, r3
 8000f94:	ea80 0c01 	eor.w	ip, r0, r1
 8000f98:	0249      	lsls	r1, r1, #9
 8000f9a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f9e:	d037      	beq.n	8001010 <__aeabi_fdiv+0x98>
 8000fa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fa4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fa8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fb0:	428b      	cmp	r3, r1
 8000fb2:	bf38      	it	cc
 8000fb4:	005b      	lslcc	r3, r3, #1
 8000fb6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fbe:	428b      	cmp	r3, r1
 8000fc0:	bf24      	itt	cs
 8000fc2:	1a5b      	subcs	r3, r3, r1
 8000fc4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fc8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fcc:	bf24      	itt	cs
 8000fce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fd6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fda:	bf24      	itt	cs
 8000fdc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fe8:	bf24      	itt	cs
 8000fea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	bf18      	it	ne
 8000ff6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffa:	d1e0      	bne.n	8000fbe <__aeabi_fdiv+0x46>
 8000ffc:	2afd      	cmp	r2, #253	; 0xfd
 8000ffe:	f63f af50 	bhi.w	8000ea2 <__aeabi_fmul+0x92>
 8001002:	428b      	cmp	r3, r1
 8001004:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001008:	bf08      	it	eq
 800100a:	f020 0001 	biceq.w	r0, r0, #1
 800100e:	4770      	bx	lr
 8001010:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001014:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001018:	327f      	adds	r2, #127	; 0x7f
 800101a:	bfc2      	ittt	gt
 800101c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001020:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001024:	4770      	bxgt	lr
 8001026:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	3a01      	subs	r2, #1
 8001030:	e737      	b.n	8000ea2 <__aeabi_fmul+0x92>
 8001032:	f092 0f00 	teq	r2, #0
 8001036:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800103a:	bf02      	ittt	eq
 800103c:	0040      	lsleq	r0, r0, #1
 800103e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001042:	3a01      	subeq	r2, #1
 8001044:	d0f9      	beq.n	800103a <__aeabi_fdiv+0xc2>
 8001046:	ea40 000c 	orr.w	r0, r0, ip
 800104a:	f093 0f00 	teq	r3, #0
 800104e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001052:	bf02      	ittt	eq
 8001054:	0049      	lsleq	r1, r1, #1
 8001056:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800105a:	3b01      	subeq	r3, #1
 800105c:	d0f9      	beq.n	8001052 <__aeabi_fdiv+0xda>
 800105e:	ea41 010c 	orr.w	r1, r1, ip
 8001062:	e795      	b.n	8000f90 <__aeabi_fdiv+0x18>
 8001064:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001068:	ea92 0f0c 	teq	r2, ip
 800106c:	d108      	bne.n	8001080 <__aeabi_fdiv+0x108>
 800106e:	0242      	lsls	r2, r0, #9
 8001070:	f47f af7d 	bne.w	8000f6e <__aeabi_fmul+0x15e>
 8001074:	ea93 0f0c 	teq	r3, ip
 8001078:	f47f af70 	bne.w	8000f5c <__aeabi_fmul+0x14c>
 800107c:	4608      	mov	r0, r1
 800107e:	e776      	b.n	8000f6e <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	d104      	bne.n	8001090 <__aeabi_fdiv+0x118>
 8001086:	024b      	lsls	r3, r1, #9
 8001088:	f43f af4c 	beq.w	8000f24 <__aeabi_fmul+0x114>
 800108c:	4608      	mov	r0, r1
 800108e:	e76e      	b.n	8000f6e <__aeabi_fmul+0x15e>
 8001090:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001094:	bf18      	it	ne
 8001096:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800109a:	d1ca      	bne.n	8001032 <__aeabi_fdiv+0xba>
 800109c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010a0:	f47f af5c 	bne.w	8000f5c <__aeabi_fmul+0x14c>
 80010a4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010a8:	f47f af3c 	bne.w	8000f24 <__aeabi_fmul+0x114>
 80010ac:	e75f      	b.n	8000f6e <__aeabi_fmul+0x15e>
 80010ae:	bf00      	nop

080010b0 <__gesf2>:
 80010b0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80010b4:	e006      	b.n	80010c4 <__cmpsf2+0x4>
 80010b6:	bf00      	nop

080010b8 <__lesf2>:
 80010b8:	f04f 0c01 	mov.w	ip, #1
 80010bc:	e002      	b.n	80010c4 <__cmpsf2+0x4>
 80010be:	bf00      	nop

080010c0 <__cmpsf2>:
 80010c0:	f04f 0c01 	mov.w	ip, #1
 80010c4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	bf18      	it	ne
 80010d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010da:	d011      	beq.n	8001100 <__cmpsf2+0x40>
 80010dc:	b001      	add	sp, #4
 80010de:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010e2:	bf18      	it	ne
 80010e4:	ea90 0f01 	teqne	r0, r1
 80010e8:	bf58      	it	pl
 80010ea:	ebb2 0003 	subspl.w	r0, r2, r3
 80010ee:	bf88      	it	hi
 80010f0:	17c8      	asrhi	r0, r1, #31
 80010f2:	bf38      	it	cc
 80010f4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010f8:	bf18      	it	ne
 80010fa:	f040 0001 	orrne.w	r0, r0, #1
 80010fe:	4770      	bx	lr
 8001100:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001104:	d102      	bne.n	800110c <__cmpsf2+0x4c>
 8001106:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110a:	d105      	bne.n	8001118 <__cmpsf2+0x58>
 800110c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001110:	d1e4      	bne.n	80010dc <__cmpsf2+0x1c>
 8001112:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001116:	d0e1      	beq.n	80010dc <__cmpsf2+0x1c>
 8001118:	f85d 0b04 	ldr.w	r0, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <__aeabi_cfrcmple>:
 8001120:	4684      	mov	ip, r0
 8001122:	4608      	mov	r0, r1
 8001124:	4661      	mov	r1, ip
 8001126:	e7ff      	b.n	8001128 <__aeabi_cfcmpeq>

08001128 <__aeabi_cfcmpeq>:
 8001128:	b50f      	push	{r0, r1, r2, r3, lr}
 800112a:	f7ff ffc9 	bl	80010c0 <__cmpsf2>
 800112e:	2800      	cmp	r0, #0
 8001130:	bf48      	it	mi
 8001132:	f110 0f00 	cmnmi.w	r0, #0
 8001136:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001138 <__aeabi_fcmpeq>:
 8001138:	f84d ed08 	str.w	lr, [sp, #-8]!
 800113c:	f7ff fff4 	bl	8001128 <__aeabi_cfcmpeq>
 8001140:	bf0c      	ite	eq
 8001142:	2001      	moveq	r0, #1
 8001144:	2000      	movne	r0, #0
 8001146:	f85d fb08 	ldr.w	pc, [sp], #8
 800114a:	bf00      	nop

0800114c <__aeabi_fcmplt>:
 800114c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001150:	f7ff ffea 	bl	8001128 <__aeabi_cfcmpeq>
 8001154:	bf34      	ite	cc
 8001156:	2001      	movcc	r0, #1
 8001158:	2000      	movcs	r0, #0
 800115a:	f85d fb08 	ldr.w	pc, [sp], #8
 800115e:	bf00      	nop

08001160 <__aeabi_fcmple>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff ffe0 	bl	8001128 <__aeabi_cfcmpeq>
 8001168:	bf94      	ite	ls
 800116a:	2001      	movls	r0, #1
 800116c:	2000      	movhi	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmpge>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffd2 	bl	8001120 <__aeabi_cfrcmple>
 800117c:	bf94      	ite	ls
 800117e:	2001      	movls	r0, #1
 8001180:	2000      	movhi	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmpgt>:
 8001188:	f84d ed08 	str.w	lr, [sp, #-8]!
 800118c:	f7ff ffc8 	bl	8001120 <__aeabi_cfrcmple>
 8001190:	bf34      	ite	cc
 8001192:	2001      	movcc	r0, #1
 8001194:	2000      	movcs	r0, #0
 8001196:	f85d fb08 	ldr.w	pc, [sp], #8
 800119a:	bf00      	nop

0800119c <__aeabi_uldivmod>:
 800119c:	b953      	cbnz	r3, 80011b4 <__aeabi_uldivmod+0x18>
 800119e:	b94a      	cbnz	r2, 80011b4 <__aeabi_uldivmod+0x18>
 80011a0:	2900      	cmp	r1, #0
 80011a2:	bf08      	it	eq
 80011a4:	2800      	cmpeq	r0, #0
 80011a6:	bf1c      	itt	ne
 80011a8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80011ac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80011b0:	f000 b9ae 	b.w	8001510 <__aeabi_idiv0>
 80011b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011bc:	f000 f83e 	bl	800123c <__udivmoddi4>
 80011c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011c8:	b004      	add	sp, #16
 80011ca:	4770      	bx	lr

080011cc <__aeabi_d2lz>:
 80011cc:	b538      	push	{r3, r4, r5, lr}
 80011ce:	4605      	mov	r5, r0
 80011d0:	460c      	mov	r4, r1
 80011d2:	2200      	movs	r2, #0
 80011d4:	2300      	movs	r3, #0
 80011d6:	4628      	mov	r0, r5
 80011d8:	4621      	mov	r1, r4
 80011da:	f7ff fc35 	bl	8000a48 <__aeabi_dcmplt>
 80011de:	b928      	cbnz	r0, 80011ec <__aeabi_d2lz+0x20>
 80011e0:	4628      	mov	r0, r5
 80011e2:	4621      	mov	r1, r4
 80011e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e8:	f000 b80a 	b.w	8001200 <__aeabi_d2ulz>
 80011ec:	4628      	mov	r0, r5
 80011ee:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011f2:	f000 f805 	bl	8001200 <__aeabi_d2ulz>
 80011f6:	4240      	negs	r0, r0
 80011f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011fc:	bd38      	pop	{r3, r4, r5, pc}
 80011fe:	bf00      	nop

08001200 <__aeabi_d2ulz>:
 8001200:	b5d0      	push	{r4, r6, r7, lr}
 8001202:	2200      	movs	r2, #0
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <__aeabi_d2ulz+0x34>)
 8001206:	4606      	mov	r6, r0
 8001208:	460f      	mov	r7, r1
 800120a:	f7ff f9ab 	bl	8000564 <__aeabi_dmul>
 800120e:	f7ff fc81 	bl	8000b14 <__aeabi_d2uiz>
 8001212:	4604      	mov	r4, r0
 8001214:	f7ff f92c 	bl	8000470 <__aeabi_ui2d>
 8001218:	2200      	movs	r2, #0
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <__aeabi_d2ulz+0x38>)
 800121c:	f7ff f9a2 	bl	8000564 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4630      	mov	r0, r6
 8001226:	4639      	mov	r1, r7
 8001228:	f7fe ffe4 	bl	80001f4 <__aeabi_dsub>
 800122c:	f7ff fc72 	bl	8000b14 <__aeabi_d2uiz>
 8001230:	4621      	mov	r1, r4
 8001232:	bdd0      	pop	{r4, r6, r7, pc}
 8001234:	3df00000 	.word	0x3df00000
 8001238:	41f00000 	.word	0x41f00000

0800123c <__udivmoddi4>:
 800123c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001240:	9e08      	ldr	r6, [sp, #32]
 8001242:	460d      	mov	r5, r1
 8001244:	4604      	mov	r4, r0
 8001246:	4688      	mov	r8, r1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d14d      	bne.n	80012e8 <__udivmoddi4+0xac>
 800124c:	428a      	cmp	r2, r1
 800124e:	4694      	mov	ip, r2
 8001250:	d968      	bls.n	8001324 <__udivmoddi4+0xe8>
 8001252:	fab2 f282 	clz	r2, r2
 8001256:	b152      	cbz	r2, 800126e <__udivmoddi4+0x32>
 8001258:	fa01 f302 	lsl.w	r3, r1, r2
 800125c:	f1c2 0120 	rsb	r1, r2, #32
 8001260:	fa20 f101 	lsr.w	r1, r0, r1
 8001264:	fa0c fc02 	lsl.w	ip, ip, r2
 8001268:	ea41 0803 	orr.w	r8, r1, r3
 800126c:	4094      	lsls	r4, r2
 800126e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001272:	fbb8 f7f1 	udiv	r7, r8, r1
 8001276:	fa1f fe8c 	uxth.w	lr, ip
 800127a:	fb01 8817 	mls	r8, r1, r7, r8
 800127e:	fb07 f00e 	mul.w	r0, r7, lr
 8001282:	0c23      	lsrs	r3, r4, #16
 8001284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001288:	4298      	cmp	r0, r3
 800128a:	d90a      	bls.n	80012a2 <__udivmoddi4+0x66>
 800128c:	eb1c 0303 	adds.w	r3, ip, r3
 8001290:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8001294:	f080 811e 	bcs.w	80014d4 <__udivmoddi4+0x298>
 8001298:	4298      	cmp	r0, r3
 800129a:	f240 811b 	bls.w	80014d4 <__udivmoddi4+0x298>
 800129e:	3f02      	subs	r7, #2
 80012a0:	4463      	add	r3, ip
 80012a2:	1a1b      	subs	r3, r3, r0
 80012a4:	fbb3 f0f1 	udiv	r0, r3, r1
 80012a8:	fb01 3310 	mls	r3, r1, r0, r3
 80012ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80012b0:	b2a4      	uxth	r4, r4
 80012b2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012b6:	45a6      	cmp	lr, r4
 80012b8:	d90a      	bls.n	80012d0 <__udivmoddi4+0x94>
 80012ba:	eb1c 0404 	adds.w	r4, ip, r4
 80012be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80012c2:	f080 8109 	bcs.w	80014d8 <__udivmoddi4+0x29c>
 80012c6:	45a6      	cmp	lr, r4
 80012c8:	f240 8106 	bls.w	80014d8 <__udivmoddi4+0x29c>
 80012cc:	4464      	add	r4, ip
 80012ce:	3802      	subs	r0, #2
 80012d0:	2100      	movs	r1, #0
 80012d2:	eba4 040e 	sub.w	r4, r4, lr
 80012d6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80012da:	b11e      	cbz	r6, 80012e4 <__udivmoddi4+0xa8>
 80012dc:	2300      	movs	r3, #0
 80012de:	40d4      	lsrs	r4, r2
 80012e0:	e9c6 4300 	strd	r4, r3, [r6]
 80012e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e8:	428b      	cmp	r3, r1
 80012ea:	d908      	bls.n	80012fe <__udivmoddi4+0xc2>
 80012ec:	2e00      	cmp	r6, #0
 80012ee:	f000 80ee 	beq.w	80014ce <__udivmoddi4+0x292>
 80012f2:	2100      	movs	r1, #0
 80012f4:	e9c6 0500 	strd	r0, r5, [r6]
 80012f8:	4608      	mov	r0, r1
 80012fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012fe:	fab3 f183 	clz	r1, r3
 8001302:	2900      	cmp	r1, #0
 8001304:	d14a      	bne.n	800139c <__udivmoddi4+0x160>
 8001306:	42ab      	cmp	r3, r5
 8001308:	d302      	bcc.n	8001310 <__udivmoddi4+0xd4>
 800130a:	4282      	cmp	r2, r0
 800130c:	f200 80fc 	bhi.w	8001508 <__udivmoddi4+0x2cc>
 8001310:	1a84      	subs	r4, r0, r2
 8001312:	eb65 0303 	sbc.w	r3, r5, r3
 8001316:	2001      	movs	r0, #1
 8001318:	4698      	mov	r8, r3
 800131a:	2e00      	cmp	r6, #0
 800131c:	d0e2      	beq.n	80012e4 <__udivmoddi4+0xa8>
 800131e:	e9c6 4800 	strd	r4, r8, [r6]
 8001322:	e7df      	b.n	80012e4 <__udivmoddi4+0xa8>
 8001324:	b902      	cbnz	r2, 8001328 <__udivmoddi4+0xec>
 8001326:	deff      	udf	#255	; 0xff
 8001328:	fab2 f282 	clz	r2, r2
 800132c:	2a00      	cmp	r2, #0
 800132e:	f040 8091 	bne.w	8001454 <__udivmoddi4+0x218>
 8001332:	eba1 000c 	sub.w	r0, r1, ip
 8001336:	2101      	movs	r1, #1
 8001338:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800133c:	fa1f fe8c 	uxth.w	lr, ip
 8001340:	fbb0 f3f7 	udiv	r3, r0, r7
 8001344:	fb07 0013 	mls	r0, r7, r3, r0
 8001348:	0c25      	lsrs	r5, r4, #16
 800134a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800134e:	fb0e f003 	mul.w	r0, lr, r3
 8001352:	42a8      	cmp	r0, r5
 8001354:	d908      	bls.n	8001368 <__udivmoddi4+0x12c>
 8001356:	eb1c 0505 	adds.w	r5, ip, r5
 800135a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800135e:	d202      	bcs.n	8001366 <__udivmoddi4+0x12a>
 8001360:	42a8      	cmp	r0, r5
 8001362:	f200 80ce 	bhi.w	8001502 <__udivmoddi4+0x2c6>
 8001366:	4643      	mov	r3, r8
 8001368:	1a2d      	subs	r5, r5, r0
 800136a:	fbb5 f0f7 	udiv	r0, r5, r7
 800136e:	fb07 5510 	mls	r5, r7, r0, r5
 8001372:	fb0e fe00 	mul.w	lr, lr, r0
 8001376:	b2a4      	uxth	r4, r4
 8001378:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800137c:	45a6      	cmp	lr, r4
 800137e:	d908      	bls.n	8001392 <__udivmoddi4+0x156>
 8001380:	eb1c 0404 	adds.w	r4, ip, r4
 8001384:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001388:	d202      	bcs.n	8001390 <__udivmoddi4+0x154>
 800138a:	45a6      	cmp	lr, r4
 800138c:	f200 80b6 	bhi.w	80014fc <__udivmoddi4+0x2c0>
 8001390:	4628      	mov	r0, r5
 8001392:	eba4 040e 	sub.w	r4, r4, lr
 8001396:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800139a:	e79e      	b.n	80012da <__udivmoddi4+0x9e>
 800139c:	f1c1 0720 	rsb	r7, r1, #32
 80013a0:	408b      	lsls	r3, r1
 80013a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80013a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80013aa:	fa25 fa07 	lsr.w	sl, r5, r7
 80013ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013b2:	fbba f8f9 	udiv	r8, sl, r9
 80013b6:	fa20 f307 	lsr.w	r3, r0, r7
 80013ba:	fb09 aa18 	mls	sl, r9, r8, sl
 80013be:	408d      	lsls	r5, r1
 80013c0:	fa1f fe8c 	uxth.w	lr, ip
 80013c4:	431d      	orrs	r5, r3
 80013c6:	fa00 f301 	lsl.w	r3, r0, r1
 80013ca:	fb08 f00e 	mul.w	r0, r8, lr
 80013ce:	0c2c      	lsrs	r4, r5, #16
 80013d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013d4:	42a0      	cmp	r0, r4
 80013d6:	fa02 f201 	lsl.w	r2, r2, r1
 80013da:	d90b      	bls.n	80013f4 <__udivmoddi4+0x1b8>
 80013dc:	eb1c 0404 	adds.w	r4, ip, r4
 80013e0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80013e4:	f080 8088 	bcs.w	80014f8 <__udivmoddi4+0x2bc>
 80013e8:	42a0      	cmp	r0, r4
 80013ea:	f240 8085 	bls.w	80014f8 <__udivmoddi4+0x2bc>
 80013ee:	f1a8 0802 	sub.w	r8, r8, #2
 80013f2:	4464      	add	r4, ip
 80013f4:	1a24      	subs	r4, r4, r0
 80013f6:	fbb4 f0f9 	udiv	r0, r4, r9
 80013fa:	fb09 4410 	mls	r4, r9, r0, r4
 80013fe:	fb00 fe0e 	mul.w	lr, r0, lr
 8001402:	b2ad      	uxth	r5, r5
 8001404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001408:	45a6      	cmp	lr, r4
 800140a:	d908      	bls.n	800141e <__udivmoddi4+0x1e2>
 800140c:	eb1c 0404 	adds.w	r4, ip, r4
 8001410:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001414:	d26c      	bcs.n	80014f0 <__udivmoddi4+0x2b4>
 8001416:	45a6      	cmp	lr, r4
 8001418:	d96a      	bls.n	80014f0 <__udivmoddi4+0x2b4>
 800141a:	3802      	subs	r0, #2
 800141c:	4464      	add	r4, ip
 800141e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001422:	fba0 9502 	umull	r9, r5, r0, r2
 8001426:	eba4 040e 	sub.w	r4, r4, lr
 800142a:	42ac      	cmp	r4, r5
 800142c:	46c8      	mov	r8, r9
 800142e:	46ae      	mov	lr, r5
 8001430:	d356      	bcc.n	80014e0 <__udivmoddi4+0x2a4>
 8001432:	d053      	beq.n	80014dc <__udivmoddi4+0x2a0>
 8001434:	2e00      	cmp	r6, #0
 8001436:	d069      	beq.n	800150c <__udivmoddi4+0x2d0>
 8001438:	ebb3 0208 	subs.w	r2, r3, r8
 800143c:	eb64 040e 	sbc.w	r4, r4, lr
 8001440:	fa22 f301 	lsr.w	r3, r2, r1
 8001444:	fa04 f707 	lsl.w	r7, r4, r7
 8001448:	431f      	orrs	r7, r3
 800144a:	40cc      	lsrs	r4, r1
 800144c:	e9c6 7400 	strd	r7, r4, [r6]
 8001450:	2100      	movs	r1, #0
 8001452:	e747      	b.n	80012e4 <__udivmoddi4+0xa8>
 8001454:	fa0c fc02 	lsl.w	ip, ip, r2
 8001458:	f1c2 0120 	rsb	r1, r2, #32
 800145c:	fa25 f301 	lsr.w	r3, r5, r1
 8001460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001464:	fa20 f101 	lsr.w	r1, r0, r1
 8001468:	4095      	lsls	r5, r2
 800146a:	430d      	orrs	r5, r1
 800146c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001470:	fb07 3311 	mls	r3, r7, r1, r3
 8001474:	fa1f fe8c 	uxth.w	lr, ip
 8001478:	0c28      	lsrs	r0, r5, #16
 800147a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800147e:	fb01 f30e 	mul.w	r3, r1, lr
 8001482:	4283      	cmp	r3, r0
 8001484:	fa04 f402 	lsl.w	r4, r4, r2
 8001488:	d908      	bls.n	800149c <__udivmoddi4+0x260>
 800148a:	eb1c 0000 	adds.w	r0, ip, r0
 800148e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8001492:	d22f      	bcs.n	80014f4 <__udivmoddi4+0x2b8>
 8001494:	4283      	cmp	r3, r0
 8001496:	d92d      	bls.n	80014f4 <__udivmoddi4+0x2b8>
 8001498:	3902      	subs	r1, #2
 800149a:	4460      	add	r0, ip
 800149c:	1ac0      	subs	r0, r0, r3
 800149e:	fbb0 f3f7 	udiv	r3, r0, r7
 80014a2:	fb07 0013 	mls	r0, r7, r3, r0
 80014a6:	b2ad      	uxth	r5, r5
 80014a8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80014ac:	fb03 f00e 	mul.w	r0, r3, lr
 80014b0:	42a8      	cmp	r0, r5
 80014b2:	d908      	bls.n	80014c6 <__udivmoddi4+0x28a>
 80014b4:	eb1c 0505 	adds.w	r5, ip, r5
 80014b8:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80014bc:	d216      	bcs.n	80014ec <__udivmoddi4+0x2b0>
 80014be:	42a8      	cmp	r0, r5
 80014c0:	d914      	bls.n	80014ec <__udivmoddi4+0x2b0>
 80014c2:	3b02      	subs	r3, #2
 80014c4:	4465      	add	r5, ip
 80014c6:	1a28      	subs	r0, r5, r0
 80014c8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80014cc:	e738      	b.n	8001340 <__udivmoddi4+0x104>
 80014ce:	4631      	mov	r1, r6
 80014d0:	4630      	mov	r0, r6
 80014d2:	e707      	b.n	80012e4 <__udivmoddi4+0xa8>
 80014d4:	462f      	mov	r7, r5
 80014d6:	e6e4      	b.n	80012a2 <__udivmoddi4+0x66>
 80014d8:	4618      	mov	r0, r3
 80014da:	e6f9      	b.n	80012d0 <__udivmoddi4+0x94>
 80014dc:	454b      	cmp	r3, r9
 80014de:	d2a9      	bcs.n	8001434 <__udivmoddi4+0x1f8>
 80014e0:	ebb9 0802 	subs.w	r8, r9, r2
 80014e4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80014e8:	3801      	subs	r0, #1
 80014ea:	e7a3      	b.n	8001434 <__udivmoddi4+0x1f8>
 80014ec:	4643      	mov	r3, r8
 80014ee:	e7ea      	b.n	80014c6 <__udivmoddi4+0x28a>
 80014f0:	4628      	mov	r0, r5
 80014f2:	e794      	b.n	800141e <__udivmoddi4+0x1e2>
 80014f4:	4641      	mov	r1, r8
 80014f6:	e7d1      	b.n	800149c <__udivmoddi4+0x260>
 80014f8:	46d0      	mov	r8, sl
 80014fa:	e77b      	b.n	80013f4 <__udivmoddi4+0x1b8>
 80014fc:	4464      	add	r4, ip
 80014fe:	3802      	subs	r0, #2
 8001500:	e747      	b.n	8001392 <__udivmoddi4+0x156>
 8001502:	3b02      	subs	r3, #2
 8001504:	4465      	add	r5, ip
 8001506:	e72f      	b.n	8001368 <__udivmoddi4+0x12c>
 8001508:	4608      	mov	r0, r1
 800150a:	e706      	b.n	800131a <__udivmoddi4+0xde>
 800150c:	4631      	mov	r1, r6
 800150e:	e6e9      	b.n	80012e4 <__udivmoddi4+0xa8>

08001510 <__aeabi_idiv0>:
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop

08001514 <WG_IDN>:
  * @brief  Process the instruction to provide the identification of uC.
  * @param	none
  * @retval	bufOut pointer that will contain the data to outside the uC.
  * @retval	lenOut length of bufOut.
  */
static errorWaveGenerator WG_IDN(char *bufOut, uint16_t *lenOut) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af04      	add	r7, sp, #16
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
	 The response will show the following information:

	 <company name>, <model number>, <serial number>, <firmware revision> */

	/* Get unique ID*/
	uint32_t (*uID_1) = (uint32_t*) 0x1FFF7A10;
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <WG_IDN+0x48>)
 8001520:	617b      	str	r3, [r7, #20]
	uint32_t (*uID_2) = (uint32_t*) 0x1FFF7A14;
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <WG_IDN+0x4c>)
 8001524:	613b      	str	r3, [r7, #16]
	uint32_t (*uID_3) = (uint32_t*) 0x1FFF7A18;
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <WG_IDN+0x50>)
 8001528:	60fb      	str	r3, [r7, #12]

	*lenOut =
			sprintf(bufOut,
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	6819      	ldr	r1, [r3, #0]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2004      	movs	r0, #4
 8001538:	9002      	str	r0, [sp, #8]
 800153a:	2000      	movs	r0, #0
 800153c:	9001      	str	r0, [sp, #4]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	460b      	mov	r3, r1
 8001542:	4909      	ldr	r1, [pc, #36]	; (8001568 <WG_IDN+0x54>)
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f011 fa77 	bl	8012a38 <siprintf>
 800154a:	4603      	mov	r3, r0
	*lenOut =
 800154c:	b29a      	uxth	r2, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	801a      	strh	r2, [r3, #0]
					"Company\t= NONE\nPN\t= STM32-F207ZG\nSN\t= %08X%08X%08X\nFW\t= %d.%d",
					(unsigned int) *uID_3, (unsigned int) *uID_2,
					(unsigned int) *uID_1, (int) FW_VERSION,
					(int) FW_SUBVERSION);

	return NO_ERROR;
 8001552:	2300      	movs	r3, #0
}//WG_IDN
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	1fff7a10 	.word	0x1fff7a10
 8001560:	1fff7a14 	.word	0x1fff7a14
 8001564:	1fff7a18 	.word	0x1fff7a18
 8001568:	080165b8 	.word	0x080165b8

0800156c <WG_TST>:
  * @brief  Process the instruction to auto-test the loopback DAC-ADC.
  * @retval	bufOut pointer that will contain the data to outside the uC.
  * @retval	lenOut length of bufOut.
  * @param	cb_arg pointer HW handlers (ADC & DAC)
  */
static errorWaveGenerator WG_TST(char *bufOut, uint16_t *lenOut, void *cb_arg) {
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]

	uint16_t dataIn = 0, dataOut = 2000;
 8001578:	2300      	movs	r3, #0
 800157a:	83fb      	strh	r3, [r7, #30]
 800157c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001580:	83bb      	strh	r3, [r7, #28]
	ptrHWparams ptrHWp;
	memcpy(&ptrHWp, cb_arg, sizeof(ptrHWp));
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	2208      	movs	r2, #8
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4618      	mov	r0, r3
 800158c:	f010 fbb4 	bl	8011cf8 <memcpy>

	/* Set arbitrary voltage to test the loop-back*/
	HAL_DAC_SetValue(ptrHWp.ptrHdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dataOut);
 8001590:	6978      	ldr	r0, [r7, #20]
 8001592:	8bbb      	ldrh	r3, [r7, #28]
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	f002 f87e 	bl	8003698 <HAL_DAC_SetValue>
	HAL_DAC_Start(ptrHWp.ptrHdac, DAC_CHANNEL_1);
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f002 f80c 	bl	80035be <HAL_DAC_Start>

	/* Measure the loop-back */
	HAL_ADC_Start(ptrHWp.ptrHadc1);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fb41 	bl	8002c30 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(ptrHWp.ptrHadc1, 1);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	2101      	movs	r1, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f001 fc1e 	bl	8002df4 <HAL_ADC_PollForConversion>
	dataIn = HAL_ADC_GetValue(ptrHWp.ptrHadc1);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f001 fc9e 	bl	8002efc <HAL_ADC_GetValue>
 80015c0:	4603      	mov	r3, r0
 80015c2:	83fb      	strh	r3, [r7, #30]
	HAL_ADC_Stop(ptrHWp.ptrHadc1);
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f001 fbe2 	bl	8002d90 <HAL_ADC_Stop>

	/* Stops the stimulus */
	HAL_DAC_SetValue(ptrHWp.ptrHdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80015cc:	6978      	ldr	r0, [r7, #20]
 80015ce:	2300      	movs	r3, #0
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	f002 f860 	bl	8003698 <HAL_DAC_SetValue>
	HAL_DAC_Start(ptrHWp.ptrHdac, DAC_CHANNEL_1);
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f001 ffee 	bl	80035be <HAL_DAC_Start>
	HAL_DAC_Stop(ptrHWp.ptrHdac, DAC_CHANNEL_1);
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 f83a 	bl	8003660 <HAL_DAC_Stop>

	float error =
			dataOut > dataIn ?
					((float) (dataOut - dataIn) / (float) dataOut) * 100.0 :
 80015ec:	8bba      	ldrh	r2, [r7, #28]
 80015ee:	8bfb      	ldrh	r3, [r7, #30]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d916      	bls.n	8001622 <WG_TST+0xb6>
 80015f4:	8bba      	ldrh	r2, [r7, #28]
 80015f6:	8bfb      	ldrh	r3, [r7, #30]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fbb4 	bl	8000d68 <__aeabi_i2f>
 8001600:	4604      	mov	r4, r0
 8001602:	8bbb      	ldrh	r3, [r7, #28]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fbab 	bl	8000d60 <__aeabi_ui2f>
 800160a:	4603      	mov	r3, r0
 800160c:	4619      	mov	r1, r3
 800160e:	4620      	mov	r0, r4
 8001610:	f7ff fcb2 	bl	8000f78 <__aeabi_fdiv>
 8001614:	4603      	mov	r3, r0
 8001616:	4917      	ldr	r1, [pc, #92]	; (8001674 <WG_TST+0x108>)
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fbf9 	bl	8000e10 <__aeabi_fmul>
 800161e:	4603      	mov	r3, r0
 8001620:	e015      	b.n	800164e <WG_TST+0xe2>
					((float) (dataIn - dataOut) / (float) dataOut) * 100.0;
 8001622:	8bfa      	ldrh	r2, [r7, #30]
 8001624:	8bbb      	ldrh	r3, [r7, #28]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fb9d 	bl	8000d68 <__aeabi_i2f>
 800162e:	4604      	mov	r4, r0
 8001630:	8bbb      	ldrh	r3, [r7, #28]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fb94 	bl	8000d60 <__aeabi_ui2f>
 8001638:	4603      	mov	r3, r0
 800163a:	4619      	mov	r1, r3
 800163c:	4620      	mov	r0, r4
 800163e:	f7ff fc9b 	bl	8000f78 <__aeabi_fdiv>
 8001642:	4603      	mov	r3, r0
					((float) (dataOut - dataIn) / (float) dataOut) * 100.0 :
 8001644:	490b      	ldr	r1, [pc, #44]	; (8001674 <WG_TST+0x108>)
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fbe2 	bl	8000e10 <__aeabi_fmul>
 800164c:	4603      	mov	r3, r0
	float error =
 800164e:	61bb      	str	r3, [r7, #24]

	*lenOut = sprintf(bufOut, "DAC-ADC loopback has %.3f%% of error", error);
 8001650:	69b8      	ldr	r0, [r7, #24]
 8001652:	f7fe ff2f 	bl	80004b4 <__aeabi_f2d>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4907      	ldr	r1, [pc, #28]	; (8001678 <WG_TST+0x10c>)
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f011 f9eb 	bl	8012a38 <siprintf>
 8001662:	4603      	mov	r3, r0
 8001664:	b29a      	uxth	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	801a      	strh	r2, [r3, #0]

	return NO_ERROR;
 800166a:	2300      	movs	r3, #0
}//WG_TST
 800166c:	4618      	mov	r0, r3
 800166e:	3724      	adds	r7, #36	; 0x24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd90      	pop	{r4, r7, pc}
 8001674:	42c80000 	.word	0x42c80000
 8001678:	080165f8 	.word	0x080165f8

0800167c <WG_ABOR>:
  * @brief  Process the instruction to stop the test in uC.
  * @retval	bufOut pointer that will contain the data to outside the uC.
  * @retval	lenOut length of bufOut.
  * @param	cb_arg pointer HW handlers (ADC & DAC)
  */
static errorWaveGenerator WG_ABOR(char *bufOut, uint16_t *lenOut, void *cb_arg) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]

	setTestStart(false);
 8001688:	2000      	movs	r0, #0
 800168a:	f000 fd73 	bl	8002174 <setTestStart>

	ptrHWparams ptrHWp;
	memcpy(&ptrHWp, cb_arg, sizeof(ptrHWp));
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	2208      	movs	r2, #8
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4618      	mov	r0, r3
 8001698:	f010 fb2e 	bl	8011cf8 <memcpy>

	/* Stops the stimulus and the measurements */
	HAL_DAC_SetValue(ptrHWp.ptrHdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 800169c:	6978      	ldr	r0, [r7, #20]
 800169e:	2300      	movs	r3, #0
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	f001 fff8 	bl	8003698 <HAL_DAC_SetValue>
	HAL_DAC_Start(ptrHWp.ptrHdac, DAC_CHANNEL_1);
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 ff86 	bl	80035be <HAL_DAC_Start>
	HAL_DAC_Stop(ptrHWp.ptrHdac, DAC_CHANNEL_1);
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f001 ffd2 	bl	8003660 <HAL_DAC_Stop>
//	HAL_ADC_Stop(ptrHWp.ptrHadc1);

	*lenOut =
			flagEndTest ?
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <WG_ABOR+0x74>)
 80016be:	781b      	ldrb	r3, [r3, #0]
	*lenOut =
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <WG_ABOR+0x56>
					sprintf(bufOut, "Test end") :
 80016c4:	490b      	ldr	r1, [pc, #44]	; (80016f4 <WG_ABOR+0x78>)
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f011 f9b6 	bl	8012a38 <siprintf>
 80016cc:	4603      	mov	r3, r0
	*lenOut =
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	e005      	b.n	80016de <WG_ABOR+0x62>
					sprintf(bufOut, "Test terminated manually");
 80016d2:	4909      	ldr	r1, [pc, #36]	; (80016f8 <WG_ABOR+0x7c>)
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f011 f9af 	bl	8012a38 <siprintf>
 80016da:	4603      	mov	r3, r0
	*lenOut =
 80016dc:	b29b      	uxth	r3, r3
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	8013      	strh	r3, [r2, #0]

	Reset_Own_Vars();
 80016e2:	f000 f911 	bl	8001908 <Reset_Own_Vars>

	return NO_ERROR;
 80016e6:	2300      	movs	r3, #0
}//WG_ABOR
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000236 	.word	0x20000236
 80016f4:	08016620 	.word	0x08016620
 80016f8:	0801662c 	.word	0x0801662c

080016fc <WG_INIT>:
  * @brief  Process the instruction to start the test in uC.
  * @param	none
  * @retval	bufOut pointer that will contain the data to outside the uC.
  * @retval	lenOut length of bufOut.
  */
static errorWaveGenerator WG_INIT(char *bufOut, uint16_t *lenOut/*,void *cb_arg*/) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]

	Reset_Own_Vars();
 8001706:	f000 f8ff 	bl	8001908 <Reset_Own_Vars>

	//*lenOut = sprintf(bufOut, "Test initialized");
	*lenOut = 0;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2200      	movs	r2, #0
 800170e:	801a      	strh	r2, [r3, #0]

	setTestStart(true);
 8001710:	2001      	movs	r0, #1
 8001712:	f000 fd2f 	bl	8002174 <setTestStart>

	return NO_ERROR;
 8001716:	2300      	movs	r3, #0
}//WG_INIT
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <WG_UPD>:
  * @brief  Process the instruction update data from uC to PC
  * @param	none
  * @retval	bufOut pointer that will contain the data to outside the uC.
  * @retval	lenOut length of bufOut.
  */
static errorWaveGenerator WG_UPD(char *bufOut, uint16_t *lenOut) {
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]

	*lenOut =
			flagEndTest ?
 800172a:	4b2c      	ldr	r3, [pc, #176]	; (80017dc <WG_UPD+0xbc>)
 800172c:	781b      	ldrb	r3, [r3, #0]
	*lenOut =
 800172e:	2b00      	cmp	r3, #0
 8001730:	d009      	beq.n	8001746 <WG_UPD+0x26>
					sprintf(bufOut, "END %lu ", actualFreq) :
 8001732:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <WG_UPD+0xc0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	492a      	ldr	r1, [pc, #168]	; (80017e4 <WG_UPD+0xc4>)
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f011 f97c 	bl	8012a38 <siprintf>
 8001740:	4603      	mov	r3, r0
	*lenOut =
 8001742:	b29b      	uxth	r3, r3
 8001744:	e008      	b.n	8001758 <WG_UPD+0x38>
					sprintf(bufOut, "RUN %lu ", actualFreq);
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <WG_UPD+0xc0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	4926      	ldr	r1, [pc, #152]	; (80017e8 <WG_UPD+0xc8>)
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f011 f972 	bl	8012a38 <siprintf>
 8001754:	4603      	mov	r3, r0
	*lenOut =
 8001756:	b29b      	uxth	r3, r3
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	8013      	strh	r3, [r2, #0]

	uint8_t auxLen = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	757b      	strb	r3, [r7, #21]
	char bufAux[7];

	for (uint16_t findex = 0; findex <  240; findex++) {
 8001760:	2300      	movs	r3, #0
 8001762:	82fb      	strh	r3, [r7, #22]
 8001764:	e02f      	b.n	80017c6 <WG_UPD+0xa6>
	/*	memset(bufAux,0,sizeof(bufAux));
		auxLen = sprintf(bufAux, "%.3f ",
				buffSamples[findex] > 0.0 ? buffSamples[findex] : 0.0);
		*lenOut += auxLen;
		strncat(bufOut, bufAux, auxLen); */
		auxLen = sprintf(bufOut + *lenOut, "%.3f ",
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	189c      	adds	r4, r3, r2
				buffSamples[findex] > 0.0 ? buffSamples[findex] : 0.0);
 8001770:	8afb      	ldrh	r3, [r7, #22]
 8001772:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <WG_UPD+0xcc>)
 8001774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		auxLen = sprintf(bufOut + *lenOut, "%.3f ",
 8001778:	f04f 0100 	mov.w	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fd03 	bl	8001188 <__aeabi_fcmpgt>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d009      	beq.n	800179c <WG_UPD+0x7c>
				buffSamples[findex] > 0.0 ? buffSamples[findex] : 0.0);
 8001788:	8afb      	ldrh	r3, [r7, #22]
 800178a:	4a18      	ldr	r2, [pc, #96]	; (80017ec <WG_UPD+0xcc>)
 800178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		auxLen = sprintf(bufOut + *lenOut, "%.3f ",
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fe8f 	bl	80004b4 <__aeabi_f2d>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	e003      	b.n	80017a4 <WG_UPD+0x84>
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	4912      	ldr	r1, [pc, #72]	; (80017f0 <WG_UPD+0xd0>)
 80017a6:	4620      	mov	r0, r4
 80017a8:	f011 f946 	bl	8012a38 <siprintf>
 80017ac:	4603      	mov	r3, r0
 80017ae:	757b      	strb	r3, [r7, #21]
		*lenOut += auxLen;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	881a      	ldrh	r2, [r3, #0]
 80017b4:	7d7b      	ldrb	r3, [r7, #21]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	801a      	strh	r2, [r3, #0]
	for (uint16_t findex = 0; findex <  240; findex++) {
 80017c0:	8afb      	ldrh	r3, [r7, #22]
 80017c2:	3301      	adds	r3, #1
 80017c4:	82fb      	strh	r3, [r7, #22]
 80017c6:	8afb      	ldrh	r3, [r7, #22]
 80017c8:	2bef      	cmp	r3, #239	; 0xef
 80017ca:	d9cc      	bls.n	8001766 <WG_UPD+0x46>

	}

	WG.UpdateTestStep();
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <WG_UPD+0xd4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	4798      	blx	r3

	return NO_ERROR;
 80017d2:	2300      	movs	r3, #0
}//WG_UPD
 80017d4:	4618      	mov	r0, r3
 80017d6:	371c      	adds	r7, #28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd90      	pop	{r4, r7, pc}
 80017dc:	20000236 	.word	0x20000236
 80017e0:	2000022c 	.word	0x2000022c
 80017e4:	08016648 	.word	0x08016648
 80017e8:	08016654 	.word	0x08016654
 80017ec:	2000024c 	.word	0x2000024c
 80017f0:	08016660 	.word	0x08016660
 80017f4:	20000000 	.word	0x20000000

080017f8 <WG_KEEP>:
  * @brief  Process the instruction to carry on with the test
  * @param	none
  * @retval	bufOut pointer that will contain the data to outside the uC.
  * @retval	lenOut length of bufOut.
  */
static errorWaveGenerator WG_KEEP(char *bufOut, uint16_t *lenOut) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]

	setTestStart(true);
 8001802:	2001      	movs	r0, #1
 8001804:	f000 fcb6 	bl	8002174 <setTestStart>

	//*lenOut = sprintf(bufOut, "Test in progress");
	*lenOut = 0;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	2200      	movs	r2, #0
 800180c:	801a      	strh	r2, [r3, #0]

	return NO_ERROR;
 800180e:	2300      	movs	r3, #0
}//WG_KEEP
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <WG_Process_Data>:
  * @param	cb_arg pointer to arguments provided from UDP callback.
  * @retval	bufOut pointer that will contain the data to outside the uC.
  * @retval	lenOut length of bufOut.
  */
void WG_Process_Data(char *bufIn, uint16_t lenIn, char *bufOut,
		uint16_t *lenOut, void *cb_arg) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	460b      	mov	r3, r1
 8001826:	817b      	strh	r3, [r7, #10]

	/* Provides the basic device information */
	if (strcmp(bufIn + 4, "*IDN?") == 0) {
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	3304      	adds	r3, #4
 800182c:	492f      	ldr	r1, [pc, #188]	; (80018ec <WG_Process_Data+0xd4>)
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fcca 	bl	80001c8 <strcmp>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d104      	bne.n	8001844 <WG_Process_Data+0x2c>
		WG_IDN(bufOut, lenOut);
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fe69 	bl	8001514 <WG_IDN>
	/* Default case */
	else {
		*lenOut = sprintf(bufOut, "No valid command has sent");
	}

}//WG_Process_Data
 8001842:	e04f      	b.n	80018e4 <WG_Process_Data+0xcc>
	else if (strcmp(bufIn + 4, "*TST?") == 0) {
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3304      	adds	r3, #4
 8001848:	4929      	ldr	r1, [pc, #164]	; (80018f0 <WG_Process_Data+0xd8>)
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fcbc 	bl	80001c8 <strcmp>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d105      	bne.n	8001862 <WG_Process_Data+0x4a>
		WG_TST(bufOut, lenOut, cb_arg);
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	6839      	ldr	r1, [r7, #0]
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fe86 	bl	800156c <WG_TST>
}//WG_Process_Data
 8001860:	e040      	b.n	80018e4 <WG_Process_Data+0xcc>
	else if (strcmp(bufIn + 4, "ABOR") == 0) {
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3304      	adds	r3, #4
 8001866:	4923      	ldr	r1, [pc, #140]	; (80018f4 <WG_Process_Data+0xdc>)
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fcad 	bl	80001c8 <strcmp>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d105      	bne.n	8001880 <WG_Process_Data+0x68>
		WG_ABOR(bufOut, lenOut, cb_arg);
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	6839      	ldr	r1, [r7, #0]
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff feff 	bl	800167c <WG_ABOR>
}//WG_Process_Data
 800187e:	e031      	b.n	80018e4 <WG_Process_Data+0xcc>
	else if (strcmp(bufIn + 4, "INIT") == 0) {
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3304      	adds	r3, #4
 8001884:	491c      	ldr	r1, [pc, #112]	; (80018f8 <WG_Process_Data+0xe0>)
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fc9e 	bl	80001c8 <strcmp>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d104      	bne.n	800189c <WG_Process_Data+0x84>
		WG_INIT(bufOut, lenOut/*, cb_arg*/);
 8001892:	6839      	ldr	r1, [r7, #0]
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff31 	bl	80016fc <WG_INIT>
}//WG_Process_Data
 800189a:	e023      	b.n	80018e4 <WG_Process_Data+0xcc>
	else if (strcmp(bufIn + 4, "UPD") == 0) {
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3304      	adds	r3, #4
 80018a0:	4916      	ldr	r1, [pc, #88]	; (80018fc <WG_Process_Data+0xe4>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fc90 	bl	80001c8 <strcmp>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d104      	bne.n	80018b8 <WG_Process_Data+0xa0>
		WG_UPD(bufOut, lenOut);
 80018ae:	6839      	ldr	r1, [r7, #0]
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff35 	bl	8001720 <WG_UPD>
}//WG_Process_Data
 80018b6:	e015      	b.n	80018e4 <WG_Process_Data+0xcc>
	else if (strcmp(bufIn + 4, "KEEP") == 0) {
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	3304      	adds	r3, #4
 80018bc:	4910      	ldr	r1, [pc, #64]	; (8001900 <WG_Process_Data+0xe8>)
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fc82 	bl	80001c8 <strcmp>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d104      	bne.n	80018d4 <WG_Process_Data+0xbc>
		WG_KEEP(bufOut, lenOut);
 80018ca:	6839      	ldr	r1, [r7, #0]
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ff93 	bl	80017f8 <WG_KEEP>
}//WG_Process_Data
 80018d2:	e007      	b.n	80018e4 <WG_Process_Data+0xcc>
		*lenOut = sprintf(bufOut, "No valid command has sent");
 80018d4:	490b      	ldr	r1, [pc, #44]	; (8001904 <WG_Process_Data+0xec>)
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f011 f8ae 	bl	8012a38 <siprintf>
 80018dc:	4603      	mov	r3, r0
 80018de:	b29a      	uxth	r2, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	801a      	strh	r2, [r3, #0]
}//WG_Process_Data
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	08016668 	.word	0x08016668
 80018f0:	08016670 	.word	0x08016670
 80018f4:	08016678 	.word	0x08016678
 80018f8:	08016680 	.word	0x08016680
 80018fc:	08016688 	.word	0x08016688
 8001900:	0801668c 	.word	0x0801668c
 8001904:	08016694 	.word	0x08016694

08001908 <Reset_Own_Vars>:
/**
  * @brief  Reset all in tests used variables.
  * @param  None
  * @retval	None
  */
static void Reset_Own_Vars(void) {
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	actualFreq = 30;
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <Reset_Own_Vars+0x8c>)
 800190e:	221e      	movs	r2, #30
 8001910:	601a      	str	r2, [r3, #0]
	sampleFreq = actualFreq * NUM_PTS;
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <Reset_Own_Vars+0x8c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fdaa 	bl	8000470 <__aeabi_ui2d>
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <Reset_Own_Vars+0x90>)
 8001922:	f7fe fe1f 	bl	8000564 <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f7ff f911 	bl	8000b54 <__aeabi_d2f>
 8001932:	4603      	mov	r3, r0
 8001934:	4a19      	ldr	r2, [pc, #100]	; (800199c <Reset_Own_Vars+0x94>)
 8001936:	6013      	str	r3, [r2, #0]
	actualAmp = 3.0;
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <Reset_Own_Vars+0x98>)
 800193a:	4a1a      	ldr	r2, [pc, #104]	; (80019a4 <Reset_Own_Vars+0x9c>)
 800193c:	601a      	str	r2, [r3, #0]
	flagFrecRetries = false;
 800193e:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <Reset_Own_Vars+0xa0>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
	cntFrecRetries = 0;
 8001944:	4b19      	ldr	r3, [pc, #100]	; (80019ac <Reset_Own_Vars+0xa4>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
	flagEndTest = false;
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <Reset_Own_Vars+0xa8>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
	ADCprescaler = 1000000 / (actualFreq * SAMPLES_PERIOD);
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <Reset_Own_Vars+0x8c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	461a      	mov	r2, r3
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <Reset_Own_Vars+0xac>)
 8001960:	fbb3 f3f2 	udiv	r3, r3, r2
 8001964:	b29a      	uxth	r2, r3
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <Reset_Own_Vars+0xb0>)
 8001968:	801a      	strh	r2, [r3, #0]
	ADCcount = 0;
 800196a:	4b14      	ldr	r3, [pc, #80]	; (80019bc <Reset_Own_Vars+0xb4>)
 800196c:	2200      	movs	r2, #0
 800196e:	801a      	strh	r2, [r3, #0]
	mIdx.safeMem = 0;
 8001970:	4913      	ldr	r1, [pc, #76]	; (80019c0 <Reset_Own_Vars+0xb8>)
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	e9c1 2300 	strd	r2, r3, [r1]
	sIdx = 0;
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <Reset_Own_Vars+0xbc>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
	memset(buffSamples, 0, sizeof(buffSamples));
 8001984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001988:	2100      	movs	r1, #0
 800198a:	480f      	ldr	r0, [pc, #60]	; (80019c8 <Reset_Own_Vars+0xc0>)
 800198c:	f010 f9c2 	bl	8011d14 <memset>
}//Reset_Own_Vars
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2000022c 	.word	0x2000022c
 8001998:	40340000 	.word	0x40340000
 800199c:	2000023c 	.word	0x2000023c
 80019a0:	20000230 	.word	0x20000230
 80019a4:	40400000 	.word	0x40400000
 80019a8:	20000234 	.word	0x20000234
 80019ac:	20000235 	.word	0x20000235
 80019b0:	20000236 	.word	0x20000236
 80019b4:	000f4240 	.word	0x000f4240
 80019b8:	20000238 	.word	0x20000238
 80019bc:	2000023a 	.word	0x2000023a
 80019c0:	20000240 	.word	0x20000240
 80019c4:	20000248 	.word	0x20000248
 80019c8:	2000024c 	.word	0x2000024c
 80019cc:	00000000 	.word	0x00000000

080019d0 <WG_Update_Test_Step>:
/**
  * @brief  Update the parameters between frequency test steps.
  * @param  None
  * @retval	None
  */
void WG_Update_Test_Step(void) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0


	/* if it's needed to repeat the frequency for the feedback */
	if (flagFrecRetries) {
 80019d4:	4b78      	ldr	r3, [pc, #480]	; (8001bb8 <WG_Update_Test_Step+0x1e8>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <WG_Update_Test_Step+0x18>
		cntFrecRetries++;
 80019dc:	4b77      	ldr	r3, [pc, #476]	; (8001bbc <WG_Update_Test_Step+0x1ec>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b75      	ldr	r3, [pc, #468]	; (8001bbc <WG_Update_Test_Step+0x1ec>)
 80019e6:	701a      	strb	r2, [r3, #0]
	}

	/* Normal step advance or 10 seconds of retries in the same frequency */
	if ((!flagFrecRetries) || (cntFrecRetries > 9)) {
 80019e8:	4b73      	ldr	r3, [pc, #460]	; (8001bb8 <WG_Update_Test_Step+0x1e8>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	f083 0301 	eor.w	r3, r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d104      	bne.n	8001a00 <WG_Update_Test_Step+0x30>
 80019f6:	4b71      	ldr	r3, [pc, #452]	; (8001bbc <WG_Update_Test_Step+0x1ec>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b09      	cmp	r3, #9
 80019fc:	f240 80cd 	bls.w	8001b9a <WG_Update_Test_Step+0x1ca>

		/* if the previous frequency is just 10KHz the test was end */
		if (actualFreq == 100000) {
 8001a00:	4b6f      	ldr	r3, [pc, #444]	; (8001bc0 <WG_Update_Test_Step+0x1f0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a6f      	ldr	r2, [pc, #444]	; (8001bc4 <WG_Update_Test_Step+0x1f4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d106      	bne.n	8001a18 <WG_Update_Test_Step+0x48>

			/* Notify the end of the test*/
			flagEndTest = true;
 8001a0a:	4b6f      	ldr	r3, [pc, #444]	; (8001bc8 <WG_Update_Test_Step+0x1f8>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]

			/* Stops timers call-backs */
			setTestStart(false);
 8001a10:	2000      	movs	r0, #0
 8001a12:	f000 fbaf 	bl	8002174 <setTestStart>
			if (actualFreq > 100000)
				actualFreq = 100000;
		}

	}
}//WG_Update_Test_Step
 8001a16:	e0c0      	b.n	8001b9a <WG_Update_Test_Step+0x1ca>
			cntFrecRetries = 0;
 8001a18:	4b68      	ldr	r3, [pc, #416]	; (8001bbc <WG_Update_Test_Step+0x1ec>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
			flagFrecRetries = false;
 8001a1e:	4b66      	ldr	r3, [pc, #408]	; (8001bb8 <WG_Update_Test_Step+0x1e8>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
			actualFreq = (actualFreq * 1.05);
 8001a24:	4b66      	ldr	r3, [pc, #408]	; (8001bc0 <WG_Update_Test_Step+0x1f0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fd21 	bl	8000470 <__aeabi_ui2d>
 8001a2e:	a35c      	add	r3, pc, #368	; (adr r3, 8001ba0 <WG_Update_Test_Step+0x1d0>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe fd96 	bl	8000564 <__aeabi_dmul>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f868 	bl	8000b14 <__aeabi_d2uiz>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4a5e      	ldr	r2, [pc, #376]	; (8001bc0 <WG_Update_Test_Step+0x1f0>)
 8001a48:	6013      	str	r3, [r2, #0]
			sampleFreq = actualFreq * NUM_PTS;
 8001a4a:	4b5d      	ldr	r3, [pc, #372]	; (8001bc0 <WG_Update_Test_Step+0x1f0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fd0e 	bl	8000470 <__aeabi_ui2d>
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	4b5c      	ldr	r3, [pc, #368]	; (8001bcc <WG_Update_Test_Step+0x1fc>)
 8001a5a:	f7fe fd83 	bl	8000564 <__aeabi_dmul>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	f7ff f875 	bl	8000b54 <__aeabi_d2f>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4a58      	ldr	r2, [pc, #352]	; (8001bd0 <WG_Update_Test_Step+0x200>)
 8001a6e:	6013      	str	r3, [r2, #0]
			ARR = - 1.0 + (TIM_CLK / (sampleFreq * (PSC+1) ));
 8001a70:	4b58      	ldr	r3, [pc, #352]	; (8001bd4 <WG_Update_Test_Step+0x204>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	3301      	adds	r3, #1
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f972 	bl	8000d60 <__aeabi_ui2f>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	4b54      	ldr	r3, [pc, #336]	; (8001bd0 <WG_Update_Test_Step+0x200>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4619      	mov	r1, r3
 8001a84:	4610      	mov	r0, r2
 8001a86:	f7ff f9c3 	bl	8000e10 <__aeabi_fmul>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fd11 	bl	80004b4 <__aeabi_f2d>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	a144      	add	r1, pc, #272	; (adr r1, 8001ba8 <WG_Update_Test_Step+0x1d8>)
 8001a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a9c:	f7fe fe8c 	bl	80007b8 <__aeabi_ddiv>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	4b4a      	ldr	r3, [pc, #296]	; (8001bd8 <WG_Update_Test_Step+0x208>)
 8001aae:	f7fe fba1 	bl	80001f4 <__aeabi_dsub>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f7ff f82b 	bl	8000b14 <__aeabi_d2uiz>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4a46      	ldr	r2, [pc, #280]	; (8001bdc <WG_Update_Test_Step+0x20c>)
 8001ac2:	6013      	str	r3, [r2, #0]
			Reconfigure_TIM2();
 8001ac4:	f000 fb6c 	bl	80021a0 <Reconfigure_TIM2>
			ADCprescaler = SAMPLE_FREQ / (actualFreq * SAMPLES_PERIOD);
 8001ac8:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <WG_Update_Test_Step+0x1f0>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fccb 	bl	8000470 <__aeabi_ui2d>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	a134      	add	r1, pc, #208	; (adr r1, 8001bb0 <WG_Update_Test_Step+0x1e0>)
 8001ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ae4:	f7fe fe68 	bl	80007b8 <__aeabi_ddiv>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	f7ff f810 	bl	8000b14 <__aeabi_d2uiz>
 8001af4:	4603      	mov	r3, r0
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <WG_Update_Test_Step+0x210>)
 8001afa:	801a      	strh	r2, [r3, #0]
			memset(buffSamples, 0, sizeof(buffSamples));
 8001afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b00:	2100      	movs	r1, #0
 8001b02:	4838      	ldr	r0, [pc, #224]	; (8001be4 <WG_Update_Test_Step+0x214>)
 8001b04:	f010 f906 	bl	8011d14 <memset>
			mIdx.safeMem = 0;
 8001b08:	4937      	ldr	r1, [pc, #220]	; (8001be8 <WG_Update_Test_Step+0x218>)
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	e9c1 2300 	strd	r2, r3, [r1]
			sIdx = 0; /* The máx index achieved in 10 seconds is 10^7, the máx number of uint32 is ~4*10^9 */
 8001b16:	4b35      	ldr	r3, [pc, #212]	; (8001bec <WG_Update_Test_Step+0x21c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
			if (actualFreq < 50) {
 8001b1c:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <WG_Update_Test_Step+0x1f0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b31      	cmp	r3, #49	; 0x31
 8001b22:	d803      	bhi.n	8001b2c <WG_Update_Test_Step+0x15c>
				actualAmp = 3.0;
 8001b24:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <WG_Update_Test_Step+0x220>)
 8001b26:	4a33      	ldr	r2, [pc, #204]	; (8001bf4 <WG_Update_Test_Step+0x224>)
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e02e      	b.n	8001b8a <WG_Update_Test_Step+0x1ba>
				actualAmp = 3.0 / sqrt(1 + pow(actualFreq / 50.0, 2));
 8001b2c:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <WG_Update_Test_Step+0x1f0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fc9d 	bl	8000470 <__aeabi_ui2d>
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	4b2f      	ldr	r3, [pc, #188]	; (8001bf8 <WG_Update_Test_Step+0x228>)
 8001b3c:	f7fe fe3c 	bl	80007b8 <__aeabi_ddiv>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b50:	f00e fa60 	bl	8010014 <pow>
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <WG_Update_Test_Step+0x208>)
 8001b5a:	f7fe fb4d 	bl	80001f8 <__adddf3>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f00e fabd 	bl	80100e4 <sqrt>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	f04f 0000 	mov.w	r0, #0
 8001b72:	4922      	ldr	r1, [pc, #136]	; (8001bfc <WG_Update_Test_Step+0x22c>)
 8001b74:	f7fe fe20 	bl	80007b8 <__aeabi_ddiv>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f7fe ffe8 	bl	8000b54 <__aeabi_d2f>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4a1a      	ldr	r2, [pc, #104]	; (8001bf0 <WG_Update_Test_Step+0x220>)
 8001b88:	6013      	str	r3, [r2, #0]
			if (actualFreq > 100000)
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <WG_Update_Test_Step+0x1f0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <WG_Update_Test_Step+0x1f4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d902      	bls.n	8001b9a <WG_Update_Test_Step+0x1ca>
				actualFreq = 100000;
 8001b94:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <WG_Update_Test_Step+0x1f0>)
 8001b96:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <WG_Update_Test_Step+0x1f4>)
 8001b98:	601a      	str	r2, [r3, #0]
}//WG_Update_Test_Step
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	cccccccd 	.word	0xcccccccd
 8001ba4:	3ff0cccc 	.word	0x3ff0cccc
 8001ba8:	00000000 	.word	0x00000000
 8001bac:	419c9c38 	.word	0x419c9c38
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	40e86a00 	.word	0x40e86a00
 8001bb8:	20000234 	.word	0x20000234
 8001bbc:	20000235 	.word	0x20000235
 8001bc0:	2000022c 	.word	0x2000022c
 8001bc4:	000186a0 	.word	0x000186a0
 8001bc8:	20000236 	.word	0x20000236
 8001bcc:	40340000 	.word	0x40340000
 8001bd0:	2000023c 	.word	0x2000023c
 8001bd4:	200006f4 	.word	0x200006f4
 8001bd8:	3ff00000 	.word	0x3ff00000
 8001bdc:	200006f0 	.word	0x200006f0
 8001be0:	20000238 	.word	0x20000238
 8001be4:	2000024c 	.word	0x2000024c
 8001be8:	20000240 	.word	0x20000240
 8001bec:	20000248 	.word	0x20000248
 8001bf0:	20000230 	.word	0x20000230
 8001bf4:	40400000 	.word	0x40400000
 8001bf8:	40490000 	.word	0x40490000
 8001bfc:	40080000 	.word	0x40080000

08001c00 <WG_Get_Frequency>:
/**
  * @brief  Actual frequency step getter.
  * @param  None
  * @retval	actualFreq Actual frequency step test.
  */
uint32_t WG_Get_Frequency(void) {
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
	return actualFreq;
 8001c04:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <WG_Get_Frequency+0x10>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	2000022c 	.word	0x2000022c

08001c14 <WG_Get_Amplitude>:
/**
  * @brief  Amplitude step getter.
  * @param  None
  * @retval	actualAmp Actual Amplitude step test.
  */
float WG_Get_Amplitude(void) {
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
	return actualAmp;
 8001c18:	4b02      	ldr	r3, [pc, #8]	; (8001c24 <WG_Get_Amplitude+0x10>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	20000230 	.word	0x20000230

08001c28 <WG_Get_ADC_Prescaler>:
/**
  * @brief  Pre-scaler to ADC sampling getter.
  * @param  None
  * @retval	ADCprescaler Actual ADC pre-scaler step test.
  */
uint16_t WG_Get_ADC_Prescaler(void) {
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
	return ADCprescaler;
 8001c2c:	4b02      	ldr	r3, [pc, #8]	; (8001c38 <WG_Get_ADC_Prescaler+0x10>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	20000238 	.word	0x20000238

08001c3c <WG_Store_Sample>:
/**
  * @brief  Stores the input samples in a array to provides to PC.
  * @param  sample
  * @retval	None
  */
void WG_Store_Sample(float sample) {
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	buffSamples[mIdx.ii++] = sample;
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <WG_Store_Sample+0x28>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	b2d1      	uxtb	r1, r2
 8001c4c:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <WG_Store_Sample+0x28>)
 8001c4e:	7011      	strb	r1, [r2, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <WG_Store_Sample+0x2c>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	20000240 	.word	0x20000240
 8001c68:	2000024c 	.word	0x2000024c

08001c6c <WG_Get_Index_of_Sample>:
  * @brief  Index of sample to generate in output (DAC) getter.
  * 		Increments one for the next call.
  * @param  None
  * @retval	sIdx Actual index of output sample.
  */
uint32_t WG_Get_Index_of_Sample(void) {
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
	return sIdx++;
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <WG_Get_Index_of_Sample+0x18>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	4903      	ldr	r1, [pc, #12]	; (8001c84 <WG_Get_Index_of_Sample+0x18>)
 8001c78:	600a      	str	r2, [r1, #0]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000248 	.word	0x20000248

08001c88 <WG_Get_ADC_Sample_Count>:
/**
  * @brief  Actual count to pre-scaler ADC sampling getter.
  * @param  None
  * @retval	ADCcount Actual count to pre-scaler ADC sampling.
  */
uint32_t WG_Get_ADC_Sample_Count(void) {
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
	return ADCcount;
 8001c8c:	4b02      	ldr	r3, [pc, #8]	; (8001c98 <WG_Get_ADC_Sample_Count+0x10>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	2000023a 	.word	0x2000023a

08001c9c <WG_Set_ADC_Sample_Count>:
/**
  * @brief  Actual count to pre-scaler ADC sampling setter.
  * @param  ADCcount Actual count to pre-scaler ADC sampling.
  * @retval	None
  */
void WG_Set_ADC_Sample_Count(uint32_t setADCcount) {
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	ADCcount = setADCcount;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <WG_Set_ADC_Sample_Count+0x1c>)
 8001caa:	801a      	strh	r2, [r3, #0]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	2000023a 	.word	0x2000023a

08001cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc2:	f000 fedf 	bl	8002a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc6:	f000 f865 	bl	8001d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cca:	f000 f973 	bl	8001fb4 <MX_GPIO_Init>
  MX_LWIP_Init();
 8001cce:	f004 fa97 	bl	8006200 <MX_LWIP_Init>
  MX_ADC1_Init();
 8001cd2:	f000 f8a7 	bl	8001e24 <MX_ADC1_Init>
  MX_DAC_Init();
 8001cd6:	f000 f8f7 	bl	8001ec8 <MX_DAC_Init>
  MX_TIM2_Init();
 8001cda:	f000 f91f 	bl	8001f1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	countSamples = 0;
 8001cde:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <main+0xa0>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	801a      	strh	r2, [r3, #0]
	sampleCount = 0;
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <main+0xa4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
	dataIn = 0;
 8001cea:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <main+0xa8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
	dataOut = 0;
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <main+0xac>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]


	ptrHWparams ptrHWp;
	ptrHWp.ptrHadc1 = &hadc1;
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <main+0xb0>)
 8001cf8:	603b      	str	r3, [r7, #0]
	ptrHWp.ptrHdac = &hdac;
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <main+0xb4>)
 8001cfc:	607b      	str	r3, [r7, #4]


	/////////////////////
	actualAmp = 3.0;
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <main+0xb8>)
 8001d00:	4a1d      	ldr	r2, [pc, #116]	; (8001d78 <main+0xbc>)
 8001d02:	601a      	str	r2, [r3, #0]
	mIdx.safeMem = 0;
 8001d04:	491d      	ldr	r1, [pc, #116]	; (8001d7c <main+0xc0>)
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	e9c1 2300 	strd	r2, r3, [r1]
	actualFreq = 30;
 8001d12:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <main+0xc4>)
 8001d14:	221e      	movs	r2, #30
 8001d16:	601a      	str	r2, [r3, #0]
	sampleFreq = actualFreq * 20.0;
 8001d18:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <main+0xc4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fba7 	bl	8000470 <__aeabi_ui2d>
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <main+0xc8>)
 8001d28:	f7fe fc1c 	bl	8000564 <__aeabi_dmul>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	f7fe ff0e 	bl	8000b54 <__aeabi_d2f>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4a13      	ldr	r2, [pc, #76]	; (8001d88 <main+0xcc>)
 8001d3c:	6013      	str	r3, [r2, #0]
	PSC = 79;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <main+0xd0>)
 8001d40:	224f      	movs	r2, #79	; 0x4f
 8001d42:	601a      	str	r2, [r3, #0]

//	HAL_TIM_Base_Start_IT(&htim2);
	//////////////////////

	udpServer_init((void*) &ptrHWp);
 8001d44:	463b      	mov	r3, r7
 8001d46:	4618      	mov	r0, r3
 8001d48:	f004 f9e8 	bl	800611c <udpServer_init>

  /* USER CODE END 2 */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	4810      	ldr	r0, [pc, #64]	; (8001d90 <main+0xd4>)
 8001d50:	f003 f840 	bl	8004dd4 <HAL_GPIO_TogglePin>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		MX_LWIP_Process();
 8001d54:	f004 fb86 	bl	8006464 <MX_LWIP_Process>
 8001d58:	e7fc      	b.n	8001d54 <main+0x98>
 8001d5a:	bf00      	nop
 8001d5c:	200006f8 	.word	0x200006f8
 8001d60:	200006fc 	.word	0x200006fc
 8001d64:	20000700 	.word	0x20000700
 8001d68:	20000704 	.word	0x20000704
 8001d6c:	2000064c 	.word	0x2000064c
 8001d70:	20000694 	.word	0x20000694
 8001d74:	20000230 	.word	0x20000230
 8001d78:	40400000 	.word	0x40400000
 8001d7c:	20000240 	.word	0x20000240
 8001d80:	2000022c 	.word	0x2000022c
 8001d84:	40340000 	.word	0x40340000
 8001d88:	2000023c 	.word	0x2000023c
 8001d8c:	200006f4 	.word	0x200006f4
 8001d90:	40020400 	.word	0x40020400

08001d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b092      	sub	sp, #72	; 0x48
 8001d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d9a:	f107 0318 	add.w	r3, r7, #24
 8001d9e:	2230      	movs	r2, #48	; 0x30
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f00f ffb6 	bl	8011d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001db6:	2302      	movs	r3, #2
 8001db8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dbe:	2310      	movs	r3, #16
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001dca:	2310      	movs	r3, #16
 8001dcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001dce:	23f0      	movs	r3, #240	; 0xf0
 8001dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dda:	f107 0318 	add.w	r3, r7, #24
 8001dde:	4618      	mov	r0, r3
 8001de0:	f003 f812 	bl	8004e08 <HAL_RCC_OscConfig>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001dea:	f000 fc3f 	bl	800266c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dee:	230f      	movs	r3, #15
 8001df0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df2:	2302      	movs	r3, #2
 8001df4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dfa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	2103      	movs	r1, #3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f003 fa4a 	bl	80052a4 <HAL_RCC_ClockConfig>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001e16:	f000 fc29 	bl	800266c <Error_Handler>
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	3748      	adds	r7, #72	; 0x48
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e2a:	463b      	mov	r3, r7
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e36:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e38:	4a21      	ldr	r2, [pc, #132]	; (8001ec0 <MX_ADC1_Init+0x9c>)
 8001e3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e3c:	4b1f      	ldr	r3, [pc, #124]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e42:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e48:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <MX_ADC1_Init+0xa0>)
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e82:	480e      	ldr	r0, [pc, #56]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e84:	f000 fe90 	bl	8002ba8 <HAL_ADC_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001e8e:	f000 fbed 	bl	800266c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001e92:	2305      	movs	r3, #5
 8001e94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4806      	ldr	r0, [pc, #24]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001ea4:	f001 f836 	bl	8002f14 <HAL_ADC_ConfigChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001eae:	f000 fbdd 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	2000064c 	.word	0x2000064c
 8001ec0:	40012000 	.word	0x40012000
 8001ec4:	0f000001 	.word	0x0f000001

08001ec8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001ece:	463b      	mov	r3, r7
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <MX_DAC_Init+0x4c>)
 8001ed8:	4a0f      	ldr	r2, [pc, #60]	; (8001f18 <MX_DAC_Init+0x50>)
 8001eda:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001edc:	480d      	ldr	r0, [pc, #52]	; (8001f14 <MX_DAC_Init+0x4c>)
 8001ede:	f001 fb4c 	bl	800357a <HAL_DAC_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001ee8:	f000 fbc0 	bl	800266c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4806      	ldr	r0, [pc, #24]	; (8001f14 <MX_DAC_Init+0x4c>)
 8001efc:	f001 fbf0 	bl	80036e0 <HAL_DAC_ConfigChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001f06:	f000 fbb1 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000694 	.word	0x20000694
 8001f18:	40007400 	.word	0x40007400

08001f1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f22:	f107 0308 	add.w	r3, r7, #8
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f30:	463b      	mov	r3, r7
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <MX_TIM2_Init+0x94>)
 8001f3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 399;
 8001f40:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <MX_TIM2_Init+0x94>)
 8001f42:	f240 128f 	movw	r2, #399	; 0x18f
 8001f46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <MX_TIM2_Init+0x94>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8001f4e:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <MX_TIM2_Init+0x94>)
 8001f50:	22f9      	movs	r2, #249	; 0xf9
 8001f52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f54:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <MX_TIM2_Init+0x94>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <MX_TIM2_Init+0x94>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f60:	4813      	ldr	r0, [pc, #76]	; (8001fb0 <MX_TIM2_Init+0x94>)
 8001f62:	f003 fba1 	bl	80056a8 <HAL_TIM_Base_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f6c:	f000 fb7e 	bl	800266c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f76:	f107 0308 	add.w	r3, r7, #8
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	480c      	ldr	r0, [pc, #48]	; (8001fb0 <MX_TIM2_Init+0x94>)
 8001f7e:	f003 fd87 	bl	8005a90 <HAL_TIM_ConfigClockSource>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f88:	f000 fb70 	bl	800266c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f94:	463b      	mov	r3, r7
 8001f96:	4619      	mov	r1, r3
 8001f98:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_TIM2_Init+0x94>)
 8001f9a:	f003 ff95 	bl	8005ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001fa4:	f000 fb62 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fa8:	bf00      	nop
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200006a8 	.word	0x200006a8

08001fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	; 0x30
 8001fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fba:	f107 031c 	add.w	r3, r7, #28
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	4b63      	ldr	r3, [pc, #396]	; (800215c <MX_GPIO_Init+0x1a8>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a62      	ldr	r2, [pc, #392]	; (800215c <MX_GPIO_Init+0x1a8>)
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b60      	ldr	r3, [pc, #384]	; (800215c <MX_GPIO_Init+0x1a8>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	61bb      	str	r3, [r7, #24]
 8001fe4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	4b5c      	ldr	r3, [pc, #368]	; (800215c <MX_GPIO_Init+0x1a8>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a5b      	ldr	r2, [pc, #364]	; (800215c <MX_GPIO_Init+0x1a8>)
 8001ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b59      	ldr	r3, [pc, #356]	; (800215c <MX_GPIO_Init+0x1a8>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	4b55      	ldr	r3, [pc, #340]	; (800215c <MX_GPIO_Init+0x1a8>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a54      	ldr	r2, [pc, #336]	; (800215c <MX_GPIO_Init+0x1a8>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b52      	ldr	r3, [pc, #328]	; (800215c <MX_GPIO_Init+0x1a8>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	4b4e      	ldr	r3, [pc, #312]	; (800215c <MX_GPIO_Init+0x1a8>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a4d      	ldr	r2, [pc, #308]	; (800215c <MX_GPIO_Init+0x1a8>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b4b      	ldr	r3, [pc, #300]	; (800215c <MX_GPIO_Init+0x1a8>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	4b47      	ldr	r3, [pc, #284]	; (800215c <MX_GPIO_Init+0x1a8>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a46      	ldr	r2, [pc, #280]	; (800215c <MX_GPIO_Init+0x1a8>)
 8002044:	f043 0308 	orr.w	r3, r3, #8
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b44      	ldr	r3, [pc, #272]	; (800215c <MX_GPIO_Init+0x1a8>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	4b40      	ldr	r3, [pc, #256]	; (800215c <MX_GPIO_Init+0x1a8>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a3f      	ldr	r2, [pc, #252]	; (800215c <MX_GPIO_Init+0x1a8>)
 8002060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b3d      	ldr	r3, [pc, #244]	; (800215c <MX_GPIO_Init+0x1a8>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002072:	2200      	movs	r2, #0
 8002074:	f244 0181 	movw	r1, #16513	; 0x4081
 8002078:	4839      	ldr	r0, [pc, #228]	; (8002160 <MX_GPIO_Init+0x1ac>)
 800207a:	f002 fe93 	bl	8004da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800207e:	2200      	movs	r2, #0
 8002080:	2140      	movs	r1, #64	; 0x40
 8002082:	4838      	ldr	r0, [pc, #224]	; (8002164 <MX_GPIO_Init+0x1b0>)
 8002084:	f002 fe8e 	bl	8004da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002088:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800208c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800208e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002092:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002098:	f107 031c 	add.w	r3, r7, #28
 800209c:	4619      	mov	r1, r3
 800209e:	4832      	ldr	r0, [pc, #200]	; (8002168 <MX_GPIO_Init+0x1b4>)
 80020a0:	f002 fce2 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80020a4:	f244 0381 	movw	r3, #16513	; 0x4081
 80020a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020aa:	2301      	movs	r3, #1
 80020ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	2300      	movs	r3, #0
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b6:	f107 031c 	add.w	r3, r7, #28
 80020ba:	4619      	mov	r1, r3
 80020bc:	4828      	ldr	r0, [pc, #160]	; (8002160 <MX_GPIO_Init+0x1ac>)
 80020be:	f002 fcd3 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80020c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	2303      	movs	r3, #3
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020d4:	2307      	movs	r3, #7
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	4823      	ldr	r0, [pc, #140]	; (800216c <MX_GPIO_Init+0x1b8>)
 80020e0:	f002 fcc2 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80020e4:	2340      	movs	r3, #64	; 0x40
 80020e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e8:	2301      	movs	r3, #1
 80020ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80020f4:	f107 031c 	add.w	r3, r7, #28
 80020f8:	4619      	mov	r1, r3
 80020fa:	481a      	ldr	r0, [pc, #104]	; (8002164 <MX_GPIO_Init+0x1b0>)
 80020fc:	f002 fcb4 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800210c:	f107 031c 	add.w	r3, r7, #28
 8002110:	4619      	mov	r1, r3
 8002112:	4814      	ldr	r0, [pc, #80]	; (8002164 <MX_GPIO_Init+0x1b0>)
 8002114:	f002 fca8 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002118:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800211c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800212a:	230a      	movs	r3, #10
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	4619      	mov	r1, r3
 8002134:	480e      	ldr	r0, [pc, #56]	; (8002170 <MX_GPIO_Init+0x1bc>)
 8002136:	f002 fc97 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800213a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800213e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002140:	2300      	movs	r3, #0
 8002142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	4619      	mov	r1, r3
 800214e:	4808      	ldr	r0, [pc, #32]	; (8002170 <MX_GPIO_Init+0x1bc>)
 8002150:	f002 fc8a 	bl	8004a68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002154:	bf00      	nop
 8002156:	3730      	adds	r7, #48	; 0x30
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40023800 	.word	0x40023800
 8002160:	40020400 	.word	0x40020400
 8002164:	40021800 	.word	0x40021800
 8002168:	40020800 	.word	0x40020800
 800216c:	40020c00 	.word	0x40020c00
 8002170:	40020000 	.word	0x40020000

08002174 <setTestStart>:

/* USER CODE BEGIN 4 */

void setTestStart(bool start) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
	//start ? HAL_TIM_Base_Start_IT(&htim3) : HAL_TIM_Base_Stop_IT(&htim3);
	start ? HAL_TIM_Base_Start_IT(&htim2) : HAL_TIM_Base_Stop_IT(&htim2);
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <setTestStart+0x18>
 8002184:	4805      	ldr	r0, [pc, #20]	; (800219c <setTestStart+0x28>)
 8002186:	f003 fadf 	bl	8005748 <HAL_TIM_Base_Start_IT>

}
 800218a:	e002      	b.n	8002192 <setTestStart+0x1e>
	start ? HAL_TIM_Base_Start_IT(&htim2) : HAL_TIM_Base_Stop_IT(&htim2);
 800218c:	4803      	ldr	r0, [pc, #12]	; (800219c <setTestStart+0x28>)
 800218e:	f003 fb49 	bl	8005824 <HAL_TIM_Base_Stop_IT>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200006a8 	.word	0x200006a8

080021a0 <Reconfigure_TIM2>:




/* static*/ void Reconfigure_TIM2(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a6:	f107 0308 	add.w	r3, r7, #8
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b4:	463b      	mov	r3, r7
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80021bc:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <Reconfigure_TIM2+0x98>)
 80021be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PSC;
 80021c4:	4b1d      	ldr	r3, [pc, #116]	; (800223c <Reconfigure_TIM2+0x9c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1b      	ldr	r2, [pc, #108]	; (8002238 <Reconfigure_TIM2+0x98>)
 80021ca:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <Reconfigure_TIM2+0x98>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = ARR;
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <Reconfigure_TIM2+0xa0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a18      	ldr	r2, [pc, #96]	; (8002238 <Reconfigure_TIM2+0x98>)
 80021d8:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021da:	4b17      	ldr	r3, [pc, #92]	; (8002238 <Reconfigure_TIM2+0x98>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e0:	4b15      	ldr	r3, [pc, #84]	; (8002238 <Reconfigure_TIM2+0x98>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021e6:	4814      	ldr	r0, [pc, #80]	; (8002238 <Reconfigure_TIM2+0x98>)
 80021e8:	f003 fa5e 	bl	80056a8 <HAL_TIM_Base_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <Reconfigure_TIM2+0x56>
  {
    Error_Handler();
 80021f2:	f000 fa3b 	bl	800266c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021fc:	f107 0308 	add.w	r3, r7, #8
 8002200:	4619      	mov	r1, r3
 8002202:	480d      	ldr	r0, [pc, #52]	; (8002238 <Reconfigure_TIM2+0x98>)
 8002204:	f003 fc44 	bl	8005a90 <HAL_TIM_ConfigClockSource>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <Reconfigure_TIM2+0x72>
  {
    Error_Handler();
 800220e:	f000 fa2d 	bl	800266c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800221a:	463b      	mov	r3, r7
 800221c:	4619      	mov	r1, r3
 800221e:	4806      	ldr	r0, [pc, #24]	; (8002238 <Reconfigure_TIM2+0x98>)
 8002220:	f003 fe52 	bl	8005ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <Reconfigure_TIM2+0x8e>
  {
    Error_Handler();
 800222a:	f000 fa1f 	bl	800266c <Error_Handler>
  }

}
 800222e:	bf00      	nop
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200006a8 	.word	0x200006a8
 800223c:	200006f4 	.word	0x200006f4
 8002240:	200006f0 	.word	0x200006f0
 8002244:	00000000 	.word	0x00000000

08002248 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002248:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]

	/* variable timer */
	if (htim->Instance == TIM2) {
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800225a:	f040 80d0 	bne.w	80023fe <HAL_TIM_PeriodElapsedCallback+0x1b6>

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800225e:	2101      	movs	r1, #1
 8002260:	48c1      	ldr	r0, [pc, #772]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002262:	f002 fdb7 	bl	8004dd4 <HAL_GPIO_TogglePin>


		dataOut = (uint32_t) (DAC_CTE_CONV
				* (OFFSET_UP
						+ ((actualAmp / 2.0)
 8002266:	4bc1      	ldr	r3, [pc, #772]	; (800256c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe f922 	bl	80004b4 <__aeabi_f2d>
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002278:	f7fe fa9e 	bl	80007b8 <__aeabi_ddiv>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4614      	mov	r4, r2
 8002282:	461d      	mov	r5, r3
								* (cos(
										2.0 * M_PI * ((float) actualFreq)
 8002284:	4bba      	ldr	r3, [pc, #744]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe fd69 	bl	8000d60 <__aeabi_ui2f>
 800228e:	4603      	mov	r3, r0
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe f90f 	bl	80004b4 <__aeabi_f2d>
 8002296:	a3ac      	add	r3, pc, #688	; (adr r3, 8002548 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	f7fe f962 	bl	8000564 <__aeabi_dmul>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4690      	mov	r8, r2
 80022a6:	4699      	mov	r9, r3
												* ((float) sIdx) / sampleFreq)
 80022a8:	4bb2      	ldr	r3, [pc, #712]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe fd57 	bl	8000d60 <__aeabi_ui2f>
 80022b2:	4603      	mov	r3, r0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe f8fd 	bl	80004b4 <__aeabi_f2d>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4640      	mov	r0, r8
 80022c0:	4649      	mov	r1, r9
 80022c2:	f7fe f94f 	bl	8000564 <__aeabi_dmul>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4690      	mov	r8, r2
 80022cc:	4699      	mov	r9, r3
								* (cos(
 80022ce:	4baa      	ldr	r3, [pc, #680]	; (8002578 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe f8ee 	bl	80004b4 <__aeabi_f2d>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4640      	mov	r0, r8
 80022de:	4649      	mov	r1, r9
 80022e0:	f7fe fa6a 	bl	80007b8 <__aeabi_ddiv>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	f00d fe4c 	bl	800ff88 <cos>
										+ 1.0))));
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	4ba1      	ldr	r3, [pc, #644]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x334>)
 80022f6:	f7fd ff7f 	bl	80001f8 <__adddf3>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
								* (cos(
 80022fe:	4620      	mov	r0, r4
 8002300:	4629      	mov	r1, r5
 8002302:	f7fe f92f 	bl	8000564 <__aeabi_dmul>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
						+ ((actualAmp / 2.0)
 800230e:	a390      	add	r3, pc, #576	; (adr r3, 8002550 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002314:	f7fd ff70 	bl	80001f8 <__adddf3>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
				* (OFFSET_UP
 8002320:	a38d      	add	r3, pc, #564	; (adr r3, 8002558 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002326:	f7fe f91d 	bl	8000564 <__aeabi_dmul>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
		dataOut = (uint32_t) (DAC_CTE_CONV
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	f7fe fbef 	bl	8000b14 <__aeabi_d2uiz>
 8002336:	4603      	mov	r3, r0
 8002338:	4a91      	ldr	r2, [pc, #580]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800233a:	6013      	str	r3, [r2, #0]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dataOut);
 800233c:	4b90      	ldr	r3, [pc, #576]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2200      	movs	r2, #0
 8002342:	2100      	movs	r1, #0
 8002344:	488f      	ldr	r0, [pc, #572]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002346:	f001 f9a7 	bl	8003698 <HAL_DAC_SetValue>
		HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800234a:	2100      	movs	r1, #0
 800234c:	488d      	ldr	r0, [pc, #564]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800234e:	f001 f936 	bl	80035be <HAL_DAC_Start>

		HAL_ADC_Start(&hadc1);
 8002352:	488d      	ldr	r0, [pc, #564]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002354:	f000 fc6c 	bl	8002c30 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1);
 8002358:	2101      	movs	r1, #1
 800235a:	488b      	ldr	r0, [pc, #556]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800235c:	f000 fd4a 	bl	8002df4 <HAL_ADC_PollForConversion>
		dataIn = HAL_ADC_GetValue(&hadc1);
 8002360:	4889      	ldr	r0, [pc, #548]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002362:	f000 fdcb 	bl	8002efc <HAL_ADC_GetValue>
 8002366:	4603      	mov	r3, r0
 8002368:	4a88      	ldr	r2, [pc, #544]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x344>)
 800236a:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 800236c:	4886      	ldr	r0, [pc, #536]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800236e:	f000 fd0f 	bl	8002d90 <HAL_ADC_Stop>
		buffSamples[mIdx.ii++] = (dataIn / DAC_CTE_CONV ) - OFFSET_UP;
 8002372:	4b86      	ldr	r3, [pc, #536]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe fcf2 	bl	8000d60 <__aeabi_ui2f>
 800237c:	4603      	mov	r3, r0
 800237e:	4984      	ldr	r1, [pc, #528]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe fdf9 	bl	8000f78 <__aeabi_fdiv>
 8002386:	4603      	mov	r3, r0
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe f893 	bl	80004b4 <__aeabi_f2d>
 800238e:	a370      	add	r3, pc, #448	; (adr r3, 8002550 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	f7fd ff2e 	bl	80001f4 <__aeabi_dsub>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	4b7c      	ldr	r3, [pc, #496]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	b2d4      	uxtb	r4, r2
 80023a8:	4a7a      	ldr	r2, [pc, #488]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80023aa:	7014      	strb	r4, [r2, #0]
 80023ac:	461c      	mov	r4, r3
 80023ae:	f7fe fbd1 	bl	8000b54 <__aeabi_d2f>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4a78      	ldr	r2, [pc, #480]	; (8002598 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80023b6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

		sIdx++;
 80023ba:	4b6e      	ldr	r3, [pc, #440]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	3301      	adds	r3, #1
 80023c0:	4a6c      	ldr	r2, [pc, #432]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80023c2:	6013      	str	r3, [r2, #0]

		if(1 < (float)sIdx / sampleFreq){
 80023c4:	4b6b      	ldr	r3, [pc, #428]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fcc9 	bl	8000d60 <__aeabi_ui2f>
 80023ce:	4602      	mov	r2, r0
 80023d0:	4b69      	ldr	r3, [pc, #420]	; (8002578 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	4610      	mov	r0, r2
 80023d8:	f7fe fdce 	bl	8000f78 <__aeabi_fdiv>
 80023dc:	4603      	mov	r3, r0
 80023de:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fed0 	bl	8001188 <__aeabi_fcmpgt>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d007      	beq.n	80023fe <HAL_TIM_PeriodElapsedCallback+0x1b6>
			HAL_TIM_Base_Stop_IT(&htim2);
 80023ee:	486b      	ldr	r0, [pc, #428]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x354>)
 80023f0:	f003 fa18 	bl	8005824 <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2101      	movs	r1, #1
 80023f8:	485b      	ldr	r0, [pc, #364]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80023fa:	f002 fcd3 	bl	8004da4 <HAL_GPIO_WritePin>


	}

	/* 1 Hz timer */
	if (htim->Instance == TIM3) {
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a67      	ldr	r2, [pc, #412]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d109      	bne.n	800241c <HAL_TIM_PeriodElapsedCallback+0x1d4>

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002408:	2101      	movs	r1, #1
 800240a:	4857      	ldr	r0, [pc, #348]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800240c:	f002 fce2 	bl	8004dd4 <HAL_GPIO_TogglePin>

		/* Update all parameters in this second */
		WG.UpdateTestStep();
 8002410:	4b64      	ldr	r3, [pc, #400]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4798      	blx	r3

		setTestStart(false);
 8002416:	2000      	movs	r0, #0
 8002418:	f7ff feac 	bl	8002174 <setTestStart>

	}

	/* 50KHz timer */
	/* else */if (htim->Instance == TIM4) {
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a61      	ldr	r2, [pc, #388]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002422:	4293      	cmp	r3, r2
 8002424:	f040 8109 	bne.w	800263a <HAL_TIM_PeriodElapsedCallback+0x3f2>

		/* Sampling in the output this calculus */
		/* { Offset + [ (Amp/2) × (1 + cos(2pi × F0 × Ts × i) ] } / DAC_RES */
		dataOut = (uint32_t) (DAC_CTE_CONV
				* (OFFSET_UP
						+ ((actualAmp / 2.0)
 8002428:	4b50      	ldr	r3, [pc, #320]	; (800256c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe f841 	bl	80004b4 <__aeabi_f2d>
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800243a:	f7fe f9bd 	bl	80007b8 <__aeabi_ddiv>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4614      	mov	r4, r2
 8002444:	461d      	mov	r5, r3
								* (cos(
										2.0 * M_PI * ((float) actualFreq)
 8002446:	4b4a      	ldr	r3, [pc, #296]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe fc88 	bl	8000d60 <__aeabi_ui2f>
 8002450:	4603      	mov	r3, r0
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe f82e 	bl	80004b4 <__aeabi_f2d>
 8002458:	a33b      	add	r3, pc, #236	; (adr r3, 8002548 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	f7fe f881 	bl	8000564 <__aeabi_dmul>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4690      	mov	r8, r2
 8002468:	4699      	mov	r9, r3
												* ((float) sIdx) / SAMPLE_FREQ)
 800246a:	4b42      	ldr	r3, [pc, #264]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fc76 	bl	8000d60 <__aeabi_ui2f>
 8002474:	4603      	mov	r3, r0
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe f81c 	bl	80004b4 <__aeabi_f2d>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4640      	mov	r0, r8
 8002482:	4649      	mov	r1, r9
 8002484:	f7fe f86e 	bl	8000564 <__aeabi_dmul>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
								* (cos(
 8002490:	a333      	add	r3, pc, #204	; (adr r3, 8002560 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	f7fe f98f 	bl	80007b8 <__aeabi_ddiv>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	f00d fd71 	bl	800ff88 <cos>
										+ 1.0))));
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	4b34      	ldr	r3, [pc, #208]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x334>)
 80024ac:	f7fd fea4 	bl	80001f8 <__adddf3>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
								* (cos(
 80024b4:	4620      	mov	r0, r4
 80024b6:	4629      	mov	r1, r5
 80024b8:	f7fe f854 	bl	8000564 <__aeabi_dmul>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
						+ ((actualAmp / 2.0)
 80024c4:	a322      	add	r3, pc, #136	; (adr r3, 8002550 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80024c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ca:	f7fd fe95 	bl	80001f8 <__adddf3>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
				* (OFFSET_UP
 80024d6:	a320      	add	r3, pc, #128	; (adr r3, 8002558 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	f7fe f842 	bl	8000564 <__aeabi_dmul>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
		dataOut = (uint32_t) (DAC_CTE_CONV
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	f7fe fb14 	bl	8000b14 <__aeabi_d2uiz>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4a24      	ldr	r2, [pc, #144]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80024f0:	6013      	str	r3, [r2, #0]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dataOut);
 80024f2:	4b23      	ldr	r3, [pc, #140]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2200      	movs	r2, #0
 80024f8:	2100      	movs	r1, #0
 80024fa:	4822      	ldr	r0, [pc, #136]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80024fc:	f001 f8cc 	bl	8003698 <HAL_DAC_SetValue>
		HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8002500:	2100      	movs	r1, #0
 8002502:	4820      	ldr	r0, [pc, #128]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002504:	f001 f85b 	bl	80035be <HAL_DAC_Start>

		/////////////
		record[sIdx] = dataOut;
 8002508:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1c      	ldr	r2, [pc, #112]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	4926      	ldr	r1, [pc, #152]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x364>)
 8002512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (sIdx > 500) {
 8002516:	4b17      	ldr	r3, [pc, #92]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800251e:	d902      	bls.n	8002526 <HAL_TIM_PeriodElapsedCallback+0x2de>

			sIdx = 0;
 8002520:	4b14      	ldr	r3, [pc, #80]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
		}
		///////////////

		sIdx++;
 8002526:	4b13      	ldr	r3, [pc, #76]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	3301      	adds	r3, #1
 800252c:	4a11      	ldr	r2, [pc, #68]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800252e:	6013      	str	r3, [r2, #0]

		sampleCount = WG.getADCSampleCount();
 8002530:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	4798      	blx	r3
 8002536:	4603      	mov	r3, r0
 8002538:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800253a:	6013      	str	r3, [r2, #0]
		if (sampleCount >= WG.getADCPres()) {
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	4798      	blx	r3
 8002542:	4603      	mov	r3, r0
 8002544:	e036      	b.n	80025b4 <HAL_TIM_PeriodElapsedCallback+0x36c>
 8002546:	bf00      	nop
 8002548:	54442d18 	.word	0x54442d18
 800254c:	401921fb 	.word	0x401921fb
 8002550:	9999999a 	.word	0x9999999a
 8002554:	3fb99999 	.word	0x3fb99999
 8002558:	e0000000 	.word	0xe0000000
 800255c:	409363a2 	.word	0x409363a2
 8002560:	00000000 	.word	0x00000000
 8002564:	40e86a00 	.word	0x40e86a00
 8002568:	40020400 	.word	0x40020400
 800256c:	20000230 	.word	0x20000230
 8002570:	2000022c 	.word	0x2000022c
 8002574:	20000248 	.word	0x20000248
 8002578:	2000023c 	.word	0x2000023c
 800257c:	3ff00000 	.word	0x3ff00000
 8002580:	20000704 	.word	0x20000704
 8002584:	20000694 	.word	0x20000694
 8002588:	2000064c 	.word	0x2000064c
 800258c:	20000700 	.word	0x20000700
 8002590:	449b1d17 	.word	0x449b1d17
 8002594:	20000240 	.word	0x20000240
 8002598:	2000024c 	.word	0x2000024c
 800259c:	200006a8 	.word	0x200006a8
 80025a0:	40000400 	.word	0x40000400
 80025a4:	20000000 	.word	0x20000000
 80025a8:	40000800 	.word	0x40000800
 80025ac:	20000708 	.word	0x20000708
 80025b0:	200006fc 	.word	0x200006fc
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b26      	ldr	r3, [pc, #152]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d837      	bhi.n	800262e <HAL_TIM_PeriodElapsedCallback+0x3e6>
			HAL_ADC_Start(&hadc1);
 80025be:	4825      	ldr	r0, [pc, #148]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80025c0:	f000 fb36 	bl	8002c30 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 1);
 80025c4:	2101      	movs	r1, #1
 80025c6:	4823      	ldr	r0, [pc, #140]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80025c8:	f000 fc14 	bl	8002df4 <HAL_ADC_PollForConversion>
			dataIn = HAL_ADC_GetValue(&hadc1);
 80025cc:	4821      	ldr	r0, [pc, #132]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80025ce:	f000 fc95 	bl	8002efc <HAL_ADC_GetValue>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4a20      	ldr	r2, [pc, #128]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x410>)
 80025d6:	6013      	str	r3, [r2, #0]
			HAL_ADC_Stop(&hadc1);
 80025d8:	481e      	ldr	r0, [pc, #120]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80025da:	f000 fbd9 	bl	8002d90 <HAL_ADC_Stop>
			buffSamples[mIdx.ii++] = (dataIn / DAC_CTE_CONV ) - OFFSET_UP;
 80025de:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x410>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe fbbc 	bl	8000d60 <__aeabi_ui2f>
 80025e8:	4603      	mov	r3, r0
 80025ea:	491c      	ldr	r1, [pc, #112]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x414>)
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe fcc3 	bl	8000f78 <__aeabi_fdiv>
 80025f2:	4603      	mov	r3, r0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd ff5d 	bl	80004b4 <__aeabi_f2d>
 80025fa:	a313      	add	r3, pc, #76	; (adr r3, 8002648 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	f7fd fdf8 	bl	80001f4 <__aeabi_dsub>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x418>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	b2d4      	uxtb	r4, r2
 8002614:	4a12      	ldr	r2, [pc, #72]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002616:	7014      	strb	r4, [r2, #0]
 8002618:	461c      	mov	r4, r3
 800261a:	f7fe fa9b 	bl	8000b54 <__aeabi_d2f>
 800261e:	4603      	mov	r3, r0
 8002620:	4a10      	ldr	r2, [pc, #64]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002622:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			ADCcount = 0;
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002628:	2200      	movs	r2, #0
 800262a:	801a      	strh	r2, [r3, #0]
		} else {
			ADCcount++;
		}

	}
}
 800262c:	e005      	b.n	800263a <HAL_TIM_PeriodElapsedCallback+0x3f2>
			ADCcount++;
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	3301      	adds	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002638:	801a      	strh	r2, [r3, #0]
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002644:	f3af 8000 	nop.w
 8002648:	9999999a 	.word	0x9999999a
 800264c:	3fb99999 	.word	0x3fb99999
 8002650:	200006fc 	.word	0x200006fc
 8002654:	2000064c 	.word	0x2000064c
 8002658:	20000700 	.word	0x20000700
 800265c:	449b1d17 	.word	0x449b1d17
 8002660:	20000240 	.word	0x20000240
 8002664:	2000024c 	.word	0x2000024c
 8002668:	2000023a 	.word	0x2000023a

0800266c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002670:	b672      	cpsid	i
}
 8002672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002674:	e7fe      	b.n	8002674 <Error_Handler+0x8>
	...

08002678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <HAL_MspInit+0x48>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	4a0e      	ldr	r2, [pc, #56]	; (80026c0 <HAL_MspInit+0x48>)
 8002688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800268c:	6453      	str	r3, [r2, #68]	; 0x44
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <HAL_MspInit+0x48>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002696:	607b      	str	r3, [r7, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	603b      	str	r3, [r7, #0]
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_MspInit+0x48>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <HAL_MspInit+0x48>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a8:	6413      	str	r3, [r2, #64]	; 0x40
 80026aa:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_MspInit+0x48>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	40023800 	.word	0x40023800

080026c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	; 0x28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a17      	ldr	r2, [pc, #92]	; (8002740 <HAL_ADC_MspInit+0x7c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d127      	bne.n	8002736 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	4b16      	ldr	r3, [pc, #88]	; (8002744 <HAL_ADC_MspInit+0x80>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	4a15      	ldr	r2, [pc, #84]	; (8002744 <HAL_ADC_MspInit+0x80>)
 80026f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f4:	6453      	str	r3, [r2, #68]	; 0x44
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_ADC_MspInit+0x80>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <HAL_ADC_MspInit+0x80>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <HAL_ADC_MspInit+0x80>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <HAL_ADC_MspInit+0x80>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800271e:	2320      	movs	r3, #32
 8002720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002722:	2303      	movs	r3, #3
 8002724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272a:	f107 0314 	add.w	r3, r7, #20
 800272e:	4619      	mov	r1, r3
 8002730:	4805      	ldr	r0, [pc, #20]	; (8002748 <HAL_ADC_MspInit+0x84>)
 8002732:	f002 f999 	bl	8004a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002736:	bf00      	nop
 8002738:	3728      	adds	r7, #40	; 0x28
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40012000 	.word	0x40012000
 8002744:	40023800 	.word	0x40023800
 8002748:	40020000 	.word	0x40020000

0800274c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08a      	sub	sp, #40	; 0x28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <HAL_DAC_MspInit+0x7c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d127      	bne.n	80027be <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	4b16      	ldr	r3, [pc, #88]	; (80027cc <HAL_DAC_MspInit+0x80>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	4a15      	ldr	r2, [pc, #84]	; (80027cc <HAL_DAC_MspInit+0x80>)
 8002778:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800277c:	6413      	str	r3, [r2, #64]	; 0x40
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <HAL_DAC_MspInit+0x80>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_DAC_MspInit+0x80>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4a0e      	ldr	r2, [pc, #56]	; (80027cc <HAL_DAC_MspInit+0x80>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6313      	str	r3, [r2, #48]	; 0x30
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_DAC_MspInit+0x80>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027a6:	2310      	movs	r3, #16
 80027a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027aa:	2303      	movs	r3, #3
 80027ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	4619      	mov	r1, r3
 80027b8:	4805      	ldr	r0, [pc, #20]	; (80027d0 <HAL_DAC_MspInit+0x84>)
 80027ba:	f002 f955 	bl	8004a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80027be:	bf00      	nop
 80027c0:	3728      	adds	r7, #40	; 0x28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40007400 	.word	0x40007400
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40020000 	.word	0x40020000

080027d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e4:	d115      	bne.n	8002812 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b0c      	ldr	r3, [pc, #48]	; (800281c <HAL_TIM_Base_MspInit+0x48>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	4a0b      	ldr	r2, [pc, #44]	; (800281c <HAL_TIM_Base_MspInit+0x48>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_TIM_Base_MspInit+0x48>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002802:	2200      	movs	r2, #0
 8002804:	2101      	movs	r1, #1
 8002806:	201c      	movs	r0, #28
 8002808:	f000 fe81 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800280c:	201c      	movs	r0, #28
 800280e:	f000 fe9a 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800

08002820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002824:	e7fe      	b.n	8002824 <NMI_Handler+0x4>

08002826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002826:	b480      	push	{r7}
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800282a:	e7fe      	b.n	800282a <HardFault_Handler+0x4>

0800282c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002830:	e7fe      	b.n	8002830 <MemManage_Handler+0x4>

08002832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002836:	e7fe      	b.n	8002836 <BusFault_Handler+0x4>

08002838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800283c:	e7fe      	b.n	800283c <UsageFault_Handler+0x4>

0800283e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002866:	f000 f95f 	bl	8002b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <TIM2_IRQHandler+0x10>)
 8002876:	f003 f803 	bl	8005880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	200006a8 	.word	0x200006a8

08002884 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002888:	4802      	ldr	r0, [pc, #8]	; (8002894 <ETH_IRQHandler+0x10>)
 800288a:	f001 fb40 	bl	8003f0e <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200047a4 	.word	0x200047a4

08002898 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return 1;
 800289c:	2301      	movs	r3, #1
}
 800289e:	4618      	mov	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
	...

080028a8 <_kill>:

int _kill(int pid, int sig)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028b2:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <_kill+0x20>)
 80028b4:	2216      	movs	r2, #22
 80028b6:	601a      	str	r2, [r3, #0]
  return -1;
 80028b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20007fe8 	.word	0x20007fe8

080028cc <_exit>:

void _exit (int status)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ffe5 	bl	80028a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028de:	e7fe      	b.n	80028de <_exit+0x12>

080028e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	e00a      	b.n	8002908 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028f2:	f3af 8000 	nop.w
 80028f6:	4601      	mov	r1, r0
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	60ba      	str	r2, [r7, #8]
 80028fe:	b2ca      	uxtb	r2, r1
 8002900:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3301      	adds	r3, #1
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	429a      	cmp	r2, r3
 800290e:	dbf0      	blt.n	80028f2 <_read+0x12>
  }

  return len;
 8002910:	687b      	ldr	r3, [r7, #4]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e009      	b.n	8002940 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	60ba      	str	r2, [r7, #8]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3301      	adds	r3, #1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	dbf1      	blt.n	800292c <_write+0x12>
  }
  return len;
 8002948:	687b      	ldr	r3, [r7, #4]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <_close>:

int _close(int file)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800295a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002978:	605a      	str	r2, [r3, #4]
  return 0;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <_isatty>:

int _isatty(int file)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800298e:	2301      	movs	r3, #1
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800299a:	b480      	push	{r7}
 800299c:	b085      	sub	sp, #20
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
	...

080029b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029bc:	4a14      	ldr	r2, [pc, #80]	; (8002a10 <_sbrk+0x5c>)
 80029be:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <_sbrk+0x60>)
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029c8:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <_sbrk+0x64>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d102      	bne.n	80029d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029d0:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <_sbrk+0x64>)
 80029d2:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <_sbrk+0x68>)
 80029d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <_sbrk+0x64>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d205      	bcs.n	80029f0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <_sbrk+0x6c>)
 80029e6:	220c      	movs	r2, #12
 80029e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029ee:	e009      	b.n	8002a04 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <_sbrk+0x64>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <_sbrk+0x64>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	4a06      	ldr	r2, [pc, #24]	; (8002a18 <_sbrk+0x64>)
 8002a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a02:	68fb      	ldr	r3, [r7, #12]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	371c      	adds	r7, #28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20020000 	.word	0x20020000
 8002a14:	00000400 	.word	0x00000400
 8002a18:	200016a8 	.word	0x200016a8
 8002a1c:	20007ff8 	.word	0x20007ff8
 8002a20:	20007fe8 	.word	0x20007fe8

08002a24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a34:	480d      	ldr	r0, [pc, #52]	; (8002a6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a36:	490e      	ldr	r1, [pc, #56]	; (8002a70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a38:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a3c:	e002      	b.n	8002a44 <LoopCopyDataInit>

08002a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a42:	3304      	adds	r3, #4

08002a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a48:	d3f9      	bcc.n	8002a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4a:	4a0b      	ldr	r2, [pc, #44]	; (8002a78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a4c:	4c0b      	ldr	r4, [pc, #44]	; (8002a7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a50:	e001      	b.n	8002a56 <LoopFillZerobss>

08002a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a54:	3204      	adds	r2, #4

08002a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a58:	d3fb      	bcc.n	8002a52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a5a:	f7ff ffe3 	bl	8002a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a5e:	f00f f917 	bl	8011c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a62:	f7ff f92b 	bl	8001cbc <main>
  bx  lr
 8002a66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a70:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002a74:	08018b44 	.word	0x08018b44
  ldr r2, =_sbss
 8002a78:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002a7c:	20007ff8 	.word	0x20007ff8

08002a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a80:	e7fe      	b.n	8002a80 <ADC_IRQHandler>
	...

08002a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a88:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <HAL_Init+0x40>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ac4 <HAL_Init+0x40>)
 8002a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_Init+0x40>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <HAL_Init+0x40>)
 8002a9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <HAL_Init+0x40>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a07      	ldr	r2, [pc, #28]	; (8002ac4 <HAL_Init+0x40>)
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aac:	2003      	movs	r0, #3
 8002aae:	f000 fd23 	bl	80034f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f000 f808 	bl	8002ac8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002ab8:	f7ff fdde 	bl	8002678 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023c00 	.word	0x40023c00

08002ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ad0:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_InitTick+0x54>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <HAL_InitTick+0x58>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fd3b 	bl	8003562 <HAL_SYSTICK_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e00e      	b.n	8002b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b0f      	cmp	r3, #15
 8002afa:	d80a      	bhi.n	8002b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002afc:	2200      	movs	r2, #0
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b04:	f000 fd03 	bl	800350e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b08:	4a06      	ldr	r2, [pc, #24]	; (8002b24 <HAL_InitTick+0x5c>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e000      	b.n	8002b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000024 	.word	0x20000024
 8002b20:	2000002c 	.word	0x2000002c
 8002b24:	20000028 	.word	0x20000028

08002b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_IncTick+0x1c>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_IncTick+0x20>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4413      	add	r3, r2
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <HAL_IncTick+0x20>)
 8002b3a:	6013      	str	r3, [r2, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	2000002c 	.word	0x2000002c
 8002b48:	200016ac 	.word	0x200016ac

08002b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b50:	4b02      	ldr	r3, [pc, #8]	; (8002b5c <HAL_GetTick+0x10>)
 8002b52:	681b      	ldr	r3, [r3, #0]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr
 8002b5c:	200016ac 	.word	0x200016ac

08002b60 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b68:	f7ff fff0 	bl	8002b4c <HAL_GetTick>
 8002b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b78:	d005      	beq.n	8002b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <HAL_Delay+0x44>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b86:	bf00      	nop
 8002b88:	f7ff ffe0 	bl	8002b4c <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d8f7      	bhi.n	8002b88 <HAL_Delay+0x28>
  {
  }
}
 8002b98:	bf00      	nop
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	2000002c 	.word	0x2000002c

08002ba8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e033      	b.n	8002c26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff fd7c 	bl	80026c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d118      	bne.n	8002c18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bee:	f023 0302 	bic.w	r3, r3, #2
 8002bf2:	f043 0202 	orr.w	r2, r3, #2
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 faaa 	bl	8003154 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f023 0303 	bic.w	r3, r3, #3
 8002c0e:	f043 0201 	orr.w	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
 8002c16:	e001      	b.n	8002c1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_ADC_Start+0x1a>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e095      	b.n	8002d76 <HAL_ADC_Start+0x146>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d018      	beq.n	8002c92 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c70:	4b43      	ldr	r3, [pc, #268]	; (8002d80 <HAL_ADC_Start+0x150>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a43      	ldr	r2, [pc, #268]	; (8002d84 <HAL_ADC_Start+0x154>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	0c9a      	lsrs	r2, r3, #18
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8002c84:	e002      	b.n	8002c8c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f9      	bne.n	8002c86 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d15d      	bne.n	8002d5c <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d007      	beq.n	8002cd2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cde:	d106      	bne.n	8002cee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce4:	f023 0206 	bic.w	r2, r3, #6
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	645a      	str	r2, [r3, #68]	; 0x44
 8002cec:	e002      	b.n	8002cf4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d04:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <HAL_ADC_Start+0x158>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 031f 	and.w	r3, r3, #31
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10f      	bne.n	8002d32 <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d129      	bne.n	8002d74 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	e020      	b.n	8002d74 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a15      	ldr	r2, [pc, #84]	; (8002d8c <HAL_ADC_Start+0x15c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d11b      	bne.n	8002d74 <HAL_ADC_Start+0x144>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d114      	bne.n	8002d74 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	e00b      	b.n	8002d74 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f043 0210 	orr.w	r2, r3, #16
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr
 8002d80:	20000024 	.word	0x20000024
 8002d84:	431bde83 	.word	0x431bde83
 8002d88:	40012300 	.word	0x40012300
 8002d8c:	40012000 	.word	0x40012000

08002d90 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_ADC_Stop+0x16>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e021      	b.n	8002dea <HAL_ADC_Stop+0x5a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0201 	bic.w	r2, r2, #1
 8002dbc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	f043 0201 	orr.w	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e10:	d113      	bne.n	8002e3a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e20:	d10b      	bne.n	8002e3a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f043 0220 	orr.w	r2, r3, #32
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e05c      	b.n	8002ef4 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002e3a:	f7ff fe87 	bl	8002b4c <HAL_GetTick>
 8002e3e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e40:	e01a      	b.n	8002e78 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e48:	d016      	beq.n	8002e78 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <HAL_ADC_PollForConversion+0x6c>
 8002e50:	f7ff fe7c 	bl	8002b4c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d20b      	bcs.n	8002e78 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f043 0204 	orr.w	r2, r3, #4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e03d      	b.n	8002ef4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d1dd      	bne.n	8002e42 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f06f 0212 	mvn.w	r2, #18
 8002e8e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F2, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d123      	bne.n	8002ef2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d11f      	bne.n	8002ef2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d111      	bne.n	8002ef2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d105      	bne.n	8002ef2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f043 0201 	orr.w	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x1c>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e103      	b.n	8003138 <HAL_ADC_ConfigChannel+0x224>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b09      	cmp	r3, #9
 8002f3e:	d925      	bls.n	8002f8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68d9      	ldr	r1, [r3, #12]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4613      	mov	r3, r2
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4413      	add	r3, r2
 8002f54:	3b1e      	subs	r3, #30
 8002f56:	2207      	movs	r2, #7
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43da      	mvns	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	400a      	ands	r2, r1
 8002f64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68d9      	ldr	r1, [r3, #12]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	4618      	mov	r0, r3
 8002f78:	4603      	mov	r3, r0
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4403      	add	r3, r0
 8002f7e:	3b1e      	subs	r3, #30
 8002f80:	409a      	lsls	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	e022      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6919      	ldr	r1, [r3, #16]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4413      	add	r3, r2
 8002fa0:	2207      	movs	r2, #7
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	400a      	ands	r2, r1
 8002fae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6919      	ldr	r1, [r3, #16]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4403      	add	r3, r0
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d824      	bhi.n	8003024 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	3b05      	subs	r3, #5
 8002fec:	221f      	movs	r2, #31
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	400a      	ands	r2, r1
 8002ffa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	b29b      	uxth	r3, r3
 8003008:	4618      	mov	r0, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	3b05      	subs	r3, #5
 8003016:	fa00 f203 	lsl.w	r2, r0, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	635a      	str	r2, [r3, #52]	; 0x34
 8003022:	e04c      	b.n	80030be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b0c      	cmp	r3, #12
 800302a:	d824      	bhi.n	8003076 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	3b23      	subs	r3, #35	; 0x23
 800303e:	221f      	movs	r2, #31
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43da      	mvns	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	400a      	ands	r2, r1
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	b29b      	uxth	r3, r3
 800305a:	4618      	mov	r0, r3
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	3b23      	subs	r3, #35	; 0x23
 8003068:	fa00 f203 	lsl.w	r2, r0, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
 8003074:	e023      	b.n	80030be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	3b41      	subs	r3, #65	; 0x41
 8003088:	221f      	movs	r2, #31
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43da      	mvns	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	400a      	ands	r2, r1
 8003096:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	4618      	mov	r0, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	3b41      	subs	r3, #65	; 0x41
 80030b2:	fa00 f203 	lsl.w	r2, r0, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a20      	ldr	r2, [pc, #128]	; (8003144 <HAL_ADC_ConfigChannel+0x230>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d109      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x1c8>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b12      	cmp	r3, #18
 80030ce:	d105      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80030d0:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <HAL_ADC_ConfigChannel+0x234>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4a1c      	ldr	r2, [pc, #112]	; (8003148 <HAL_ADC_ConfigChannel+0x234>)
 80030d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030da:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a18      	ldr	r2, [pc, #96]	; (8003144 <HAL_ADC_ConfigChannel+0x230>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d123      	bne.n	800312e <HAL_ADC_ConfigChannel+0x21a>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b10      	cmp	r3, #16
 80030ec:	d003      	beq.n	80030f6 <HAL_ADC_ConfigChannel+0x1e2>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b11      	cmp	r3, #17
 80030f4:	d11b      	bne.n	800312e <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80030f6:	4b14      	ldr	r3, [pc, #80]	; (8003148 <HAL_ADC_ConfigChannel+0x234>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4a13      	ldr	r2, [pc, #76]	; (8003148 <HAL_ADC_ConfigChannel+0x234>)
 80030fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003100:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b10      	cmp	r3, #16
 8003108:	d111      	bne.n	800312e <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800310a:	4b10      	ldr	r3, [pc, #64]	; (800314c <HAL_ADC_ConfigChannel+0x238>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a10      	ldr	r2, [pc, #64]	; (8003150 <HAL_ADC_ConfigChannel+0x23c>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	0c9a      	lsrs	r2, r3, #18
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003120:	e002      	b.n	8003128 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3b01      	subs	r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f9      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40012000 	.word	0x40012000
 8003148:	40012300 	.word	0x40012300
 800314c:	20000024 	.word	0x20000024
 8003150:	431bde83 	.word	0x431bde83

08003154 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800315c:	4b7e      	ldr	r3, [pc, #504]	; (8003358 <ADC_Init+0x204>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a7d      	ldr	r2, [pc, #500]	; (8003358 <ADC_Init+0x204>)
 8003162:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003166:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003168:	4b7b      	ldr	r3, [pc, #492]	; (8003358 <ADC_Init+0x204>)
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4979      	ldr	r1, [pc, #484]	; (8003358 <ADC_Init+0x204>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	021a      	lsls	r2, r3, #8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6899      	ldr	r1, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	4a5e      	ldr	r2, [pc, #376]	; (800335c <ADC_Init+0x208>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d022      	beq.n	800322e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6899      	ldr	r1, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6899      	ldr	r1, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	e00f      	b.n	800324e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800323c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800324c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0202 	bic.w	r2, r2, #2
 800325c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6899      	ldr	r1, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	7e1b      	ldrb	r3, [r3, #24]
 8003268:	005a      	lsls	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d027      	beq.n	80032cc <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800328a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800329a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	3b01      	subs	r3, #1
 80032a2:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80032a6:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	fa92 f2a2 	rbit	r2, r2
 80032ae:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	fab2 f282 	clz	r2, r2
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	fa03 f102 	lsl.w	r1, r3, r2
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	e007      	b.n	80032dc <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	051a      	lsls	r2, r3, #20
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003310:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6899      	ldr	r1, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800331e:	025a      	lsls	r2, r3, #9
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003336:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6899      	ldr	r1, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	029a      	lsls	r2, r3, #10
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	609a      	str	r2, [r3, #8]
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40012300 	.word	0x40012300
 800335c:	0f000001 	.word	0x0f000001

08003360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003370:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800337c:	4013      	ands	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800338c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003392:	4a04      	ldr	r2, [pc, #16]	; (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	60d3      	str	r3, [r2, #12]
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f003 0307 	and.w	r3, r3, #7
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	db0b      	blt.n	80033ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	f003 021f 	and.w	r2, r3, #31
 80033dc:	4906      	ldr	r1, [pc, #24]	; (80033f8 <__NVIC_EnableIRQ+0x34>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2001      	movs	r0, #1
 80033e6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	e000e100 	.word	0xe000e100

080033fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	6039      	str	r1, [r7, #0]
 8003406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340c:	2b00      	cmp	r3, #0
 800340e:	db0a      	blt.n	8003426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	b2da      	uxtb	r2, r3
 8003414:	490c      	ldr	r1, [pc, #48]	; (8003448 <__NVIC_SetPriority+0x4c>)
 8003416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341a:	0112      	lsls	r2, r2, #4
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	440b      	add	r3, r1
 8003420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003424:	e00a      	b.n	800343c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	b2da      	uxtb	r2, r3
 800342a:	4908      	ldr	r1, [pc, #32]	; (800344c <__NVIC_SetPriority+0x50>)
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	3b04      	subs	r3, #4
 8003434:	0112      	lsls	r2, r2, #4
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	440b      	add	r3, r1
 800343a:	761a      	strb	r2, [r3, #24]
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	e000e100 	.word	0xe000e100
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003450:	b480      	push	{r7}
 8003452:	b089      	sub	sp, #36	; 0x24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f1c3 0307 	rsb	r3, r3, #7
 800346a:	2b04      	cmp	r3, #4
 800346c:	bf28      	it	cs
 800346e:	2304      	movcs	r3, #4
 8003470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3304      	adds	r3, #4
 8003476:	2b06      	cmp	r3, #6
 8003478:	d902      	bls.n	8003480 <NVIC_EncodePriority+0x30>
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3b03      	subs	r3, #3
 800347e:	e000      	b.n	8003482 <NVIC_EncodePriority+0x32>
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43da      	mvns	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	401a      	ands	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003498:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	fa01 f303 	lsl.w	r3, r1, r3
 80034a2:	43d9      	mvns	r1, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a8:	4313      	orrs	r3, r2
         );
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3724      	adds	r7, #36	; 0x24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c4:	d301      	bcc.n	80034ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034c6:	2301      	movs	r3, #1
 80034c8:	e00f      	b.n	80034ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ca:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <SysTick_Config+0x40>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034d2:	210f      	movs	r1, #15
 80034d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034d8:	f7ff ff90 	bl	80033fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <SysTick_Config+0x40>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <SysTick_Config+0x40>)
 80034e4:	2207      	movs	r2, #7
 80034e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	e000e010 	.word	0xe000e010

080034f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ff2d 	bl	8003360 <__NVIC_SetPriorityGrouping>
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800350e:	b580      	push	{r7, lr}
 8003510:	b086      	sub	sp, #24
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003520:	f7ff ff42 	bl	80033a8 <__NVIC_GetPriorityGrouping>
 8003524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	6978      	ldr	r0, [r7, #20]
 800352c:	f7ff ff90 	bl	8003450 <NVIC_EncodePriority>
 8003530:	4602      	mov	r2, r0
 8003532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff5f 	bl	80033fc <__NVIC_SetPriority>
}
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	4603      	mov	r3, r0
 800354e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff35 	bl	80033c4 <__NVIC_EnableIRQ>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ffa2 	bl	80034b4 <SysTick_Config>
 8003570:	4603      	mov	r3, r0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e014      	b.n	80035b6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	791b      	ldrb	r3, [r3, #4]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d105      	bne.n	80035a2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff f8d5 	bl	800274c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	795b      	ldrb	r3, [r3, #5]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_DAC_Start+0x16>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e040      	b.n	8003656 <HAL_DAC_Start+0x98>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2202      	movs	r2, #2
 80035de:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6819      	ldr	r1, [r3, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2201      	movs	r2, #1
 80035ee:	409a      	lsls	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10f      	bne.n	800361e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003608:	2b3c      	cmp	r3, #60	; 0x3c
 800360a:	d11d      	bne.n	8003648 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	605a      	str	r2, [r3, #4]
 800361c:	e014      	b.n	8003648 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	213c      	movs	r1, #60	; 0x3c
 8003630:	fa01 f303 	lsl.w	r3, r1, r3
 8003634:	429a      	cmp	r2, r3
 8003636:	d107      	bne.n	8003648 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0202 	orr.w	r2, r2, #2
 8003646:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6819      	ldr	r1, [r3, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2201      	movs	r2, #1
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43da      	mvns	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	400a      	ands	r2, r1
 8003684:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr

08003698 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4413      	add	r3, r2
 80036bc:	3308      	adds	r3, #8
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	e004      	b.n	80036cc <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4413      	add	r3, r2
 80036c8:	3314      	adds	r3, #20
 80036ca:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	461a      	mov	r2, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	795b      	ldrb	r3, [r3, #5]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_DAC_ConfigChannel+0x18>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e03c      	b.n	8003772 <HAL_DAC_ConfigChannel+0x92>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2202      	movs	r2, #2
 8003702:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43db      	mvns	r3, r3
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	4013      	ands	r3, r2
 8003720:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6819      	ldr	r1, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	22c0      	movs	r2, #192	; 0xc0
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43da      	mvns	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	400a      	ands	r2, r1
 8003762:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	61fb      	str	r3, [r7, #28]
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800378c:	4ba3      	ldr	r3, [pc, #652]	; (8003a1c <HAL_ETH_Init+0x2a0>)
 800378e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003794:	2300      	movs	r3, #0
 8003796:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e173      	b.n	8003a8a <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f002 fe60 	bl	800647c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037bc:	2300      	movs	r3, #0
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	4b97      	ldr	r3, [pc, #604]	; (8003a20 <HAL_ETH_Init+0x2a4>)
 80037c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c4:	4a96      	ldr	r2, [pc, #600]	; (8003a20 <HAL_ETH_Init+0x2a4>)
 80037c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ca:	6453      	str	r3, [r2, #68]	; 0x44
 80037cc:	4b94      	ldr	r3, [pc, #592]	; (8003a20 <HAL_ETH_Init+0x2a4>)
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80037d8:	4b92      	ldr	r3, [pc, #584]	; (8003a24 <HAL_ETH_Init+0x2a8>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	4a91      	ldr	r2, [pc, #580]	; (8003a24 <HAL_ETH_Init+0x2a8>)
 80037de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037e2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80037e4:	4b8f      	ldr	r3, [pc, #572]	; (8003a24 <HAL_ETH_Init+0x2a8>)
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	498d      	ldr	r1, [pc, #564]	; (8003a24 <HAL_ETH_Init+0x2a8>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003808:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800380a:	f7ff f99f 	bl	8002b4c <HAL_GetTick>
 800380e:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003810:	e011      	b.n	8003836 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8003812:	f7ff f99b 	bl	8002b4c <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003820:	d909      	bls.n	8003836 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2203      	movs	r2, #3
 8003826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e129      	b.n	8003a8a <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e4      	bne.n	8003812 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f023 031c 	bic.w	r3, r3, #28
 8003856:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003858:	f001 ff1c 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 800385c:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	4a71      	ldr	r2, [pc, #452]	; (8003a28 <HAL_ETH_Init+0x2ac>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d908      	bls.n	8003878 <HAL_ETH_Init+0xfc>
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	4a70      	ldr	r2, [pc, #448]	; (8003a2c <HAL_ETH_Init+0x2b0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d804      	bhi.n	8003878 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f043 0308 	orr.w	r3, r3, #8
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	e01a      	b.n	80038ae <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	4a6c      	ldr	r2, [pc, #432]	; (8003a2c <HAL_ETH_Init+0x2b0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d908      	bls.n	8003892 <HAL_ETH_Init+0x116>
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	4a66      	ldr	r2, [pc, #408]	; (8003a1c <HAL_ETH_Init+0x2a0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d204      	bcs.n	8003892 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f043 030c 	orr.w	r3, r3, #12
 800388e:	61fb      	str	r3, [r7, #28]
 8003890:	e00d      	b.n	80038ae <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	4a61      	ldr	r2, [pc, #388]	; (8003a1c <HAL_ETH_Init+0x2a0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d303      	bcc.n	80038a2 <HAL_ETH_Init+0x126>
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	4a64      	ldr	r2, [pc, #400]	; (8003a30 <HAL_ETH_Init+0x2b4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d904      	bls.n	80038ac <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f043 0304 	orr.w	r3, r3, #4
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	e000      	b.n	80038ae <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80038ac:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69fa      	ldr	r2, [r7, #28]
 80038b4:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80038b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80038ba:	2100      	movs	r1, #0
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fc0d 	bl	80040dc <HAL_ETH_WritePHYRegister>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00b      	beq.n	80038e0 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80038cc:	6939      	ldr	r1, [r7, #16]
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fdc2 	bl	8004458 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0d4      	b.n	8003a8a <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80038e0:	20ff      	movs	r0, #255	; 0xff
 80038e2:	f7ff f93d 	bl	8002b60 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 80a2 	beq.w	8003a34 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80038f0:	f7ff f92c 	bl	8002b4c <HAL_GetTick>
 80038f4:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80038f6:	f107 030c 	add.w	r3, r7, #12
 80038fa:	461a      	mov	r2, r3
 80038fc:	2101      	movs	r1, #1
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fb84 	bl	800400c <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8003904:	f7ff f922 	bl	8002b4c <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d90f      	bls.n	8003936 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800391a:	6939      	ldr	r1, [r7, #16]
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fd9b 	bl	8004458 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e0a9      	b.n	8003a8a <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0da      	beq.n	80038f6 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003940:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003944:	2100      	movs	r1, #0
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fbc8 	bl	80040dc <HAL_ETH_WritePHYRegister>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003956:	6939      	ldr	r1, [r7, #16]
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fd7d 	bl	8004458 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e08f      	b.n	8003a8a <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800396a:	f7ff f8ef 	bl	8002b4c <HAL_GetTick>
 800396e:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003970:	f107 030c 	add.w	r3, r7, #12
 8003974:	461a      	mov	r2, r3
 8003976:	2101      	movs	r1, #1
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fb47 	bl	800400c <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800397e:	f7ff f8e5 	bl	8002b4c <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f241 3288 	movw	r2, #5000	; 0x1388
 800398c:	4293      	cmp	r3, r2
 800398e:	d90f      	bls.n	80039b0 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003994:	6939      	ldr	r1, [r7, #16]
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fd5e 	bl	8004458 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e06c      	b.n	8003a8a <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0da      	beq.n	8003970 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80039ba:	f107 030c 	add.w	r3, r7, #12
 80039be:	461a      	mov	r2, r3
 80039c0:	2110      	movs	r1, #16
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fb22 	bl	800400c <HAL_ETH_ReadPHYRegister>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80039d2:	6939      	ldr	r1, [r7, #16]
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 fd3f 	bl	8004458 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e051      	b.n	8003a8a <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d004      	beq.n	80039fa <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039f6:	60da      	str	r2, [r3, #12]
 80039f8:	e002      	b.n	8003a00 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	e032      	b.n	8003a78 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a18:	609a      	str	r2, [r3, #8]
 8003a1a:	e02d      	b.n	8003a78 <HAL_ETH_Init+0x2fc>
 8003a1c:	03938700 	.word	0x03938700
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40013800 	.word	0x40013800
 8003a28:	01312cff 	.word	0x01312cff
 8003a2c:	02160ebf 	.word	0x02160ebf
 8003a30:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	08db      	lsrs	r3, r3, #3
 8003a3a:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003a44:	4313      	orrs	r3, r2
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fb45 	bl	80040dc <HAL_ETH_WritePHYRegister>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00b      	beq.n	8003a70 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003a5c:	6939      	ldr	r1, [r7, #16]
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fcfa 	bl	8004458 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e00c      	b.n	8003a8a <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003a70:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003a74:	f7ff f874 	bl	8002b60 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003a78:	6939      	ldr	r1, [r7, #16]
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fcec 	bl	8004458 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop

08003a94 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_ETH_DMATxDescListInit+0x20>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e051      	b.n	8003b58 <HAL_ETH_DMATxDescListInit+0xc4>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	e030      	b.n	8003b32 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	015b      	lsls	r3, r3, #5
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ae0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003ae8:	fb02 f303 	mul.w	r3, r2, r3
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4413      	add	r3, r2
 8003af0:	461a      	mov	r2, r3
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d105      	bne.n	8003b0a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d208      	bcs.n	8003b26 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	3301      	adds	r3, #1
 8003b18:	015b      	lsls	r3, r3, #5
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	461a      	mov	r2, r3
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	60da      	str	r2, [r3, #12]
 8003b24:	e002      	b.n	8003b2c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d3ca      	bcc.n	8003ad0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b44:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr

08003b62 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b087      	sub	sp, #28
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_ETH_DMARxDescListInit+0x20>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e055      	b.n	8003c2e <HAL_ETH_DMARxDescListInit+0xcc>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	e034      	b.n	8003c08 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	015b      	lsls	r3, r3, #5
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003bae:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003bb6:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003bbe:	fb02 f303 	mul.w	r3, r2, r3
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d105      	bne.n	8003be0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d208      	bcs.n	8003bfc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	3301      	adds	r3, #1
 8003bee:	015b      	lsls	r3, r3, #5
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	60da      	str	r2, [r3, #12]
 8003bfa:	e002      	b.n	8003c02 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	3301      	adds	r3, #1
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d3c6      	bcc.n	8003b9e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c1a:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_ETH_TransmitFrame+0x24>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e0cc      	b.n	8003df6 <HAL_ETH_TransmitFrame+0x1be>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e0b7      	b.n	8003df6 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	da09      	bge.n	8003ca4 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2212      	movs	r2, #18
 8003c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0a8      	b.n	8003df6 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d915      	bls.n	8003cda <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	4a53      	ldr	r2, [pc, #332]	; (8003e00 <HAL_ETH_TransmitFrame+0x1c8>)
 8003cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb6:	0a9b      	lsrs	r3, r3, #10
 8003cb8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	4b50      	ldr	r3, [pc, #320]	; (8003e00 <HAL_ETH_TransmitFrame+0x1c8>)
 8003cbe:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc2:	0a9b      	lsrs	r3, r3, #10
 8003cc4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	e001      	b.n	8003cde <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d11c      	bne.n	8003d1e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003cf2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003cfe:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d0e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	461a      	mov	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d1c:	e04b      	b.n	8003db6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	e044      	b.n	8003dae <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d32:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d107      	bne.n	8003d4a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d48:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003d52:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d116      	bne.n	8003d8c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003d6c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	4a24      	ldr	r2, [pc, #144]	; (8003e04 <HAL_ETH_TransmitFrame+0x1cc>)
 8003d72:	fb03 f202 	mul.w	r2, r3, r2
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003d7e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003d8a:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d9a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	461a      	mov	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	3301      	adds	r3, #1
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d3b6      	bcc.n	8003d24 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00d      	beq.n	8003de4 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	2304      	movs	r3, #4
 8003dd4:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dde:	461a      	mov	r2, r3
 8003de0:	2300      	movs	r3, #0
 8003de2:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	ac02b00b 	.word	0xac02b00b
 8003e04:	fffffa0c 	.word	0xfffffa0c

08003e08 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_ETH_GetReceivedFrame+0x1a>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e070      	b.n	8003f04 <HAL_ETH_GetReceivedFrame+0xfc>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	db5a      	blt.n	8003ef2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d030      	beq.n	8003eac <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d103      	bne.n	8003e64 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	631a      	str	r2, [r3, #48]	; 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	0c1b      	lsrs	r3, r3, #16
 8003e74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003e78:	3b04      	subs	r3, #4
 8003e7a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	461a      	mov	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e02b      	b.n	8003f04 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d010      	beq.n	8003edc <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	629a      	str	r2, [r3, #40]	; 0x28
 8003eda:	e00a      	b.n	8003ef2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	461a      	mov	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr

08003f0e <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b40      	cmp	r3, #64	; 0x40
 8003f26:	d112      	bne.n	8003f4e <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f85d 	bl	8003fe8 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f36:	461a      	mov	r2, r3
 8003f38:	2340      	movs	r3, #64	; 0x40
 8003f3a:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f4c:	e01a      	b.n	8003f84 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d111      	bne.n	8003f84 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f838 	bl	8003fd6 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f6e:	461a      	mov	r2, r3
 8003f70:	2301      	movs	r3, #1
 8003f72:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f92:	6153      	str	r3, [r2, #20]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa6:	d112      	bne.n	8003fce <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f826 	bl	8003ffa <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fbc:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr

0800400c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	460b      	mov	r3, r1
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b82      	cmp	r3, #130	; 0x82
 800402c:	d101      	bne.n	8004032 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800402e:	2302      	movs	r3, #2
 8004030:	e050      	b.n	80040d4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2282      	movs	r2, #130	; 0x82
 8004036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f003 031c 	and.w	r3, r3, #28
 8004048:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8a1b      	ldrh	r3, [r3, #16]
 800404e:	02db      	lsls	r3, r3, #11
 8004050:	b29b      	uxth	r3, r3
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004058:	897b      	ldrh	r3, [r7, #10]
 800405a:	019b      	lsls	r3, r3, #6
 800405c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f023 0302 	bic.w	r3, r3, #2
 800406c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800407e:	f7fe fd65 	bl	8002b4c <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004084:	e015      	b.n	80040b2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004086:	f7fe fd61 	bl	8002b4c <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004094:	d309      	bcc.n	80040aa <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e014      	b.n	80040d4 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e4      	bne.n	8004086 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	460b      	mov	r3, r1
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b42      	cmp	r3, #66	; 0x42
 80040fc:	d101      	bne.n	8004102 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80040fe:	2302      	movs	r3, #2
 8004100:	e04e      	b.n	80041a0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2242      	movs	r2, #66	; 0x42
 8004106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f003 031c 	and.w	r3, r3, #28
 8004118:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8a1b      	ldrh	r3, [r3, #16]
 800411e:	02db      	lsls	r3, r3, #11
 8004120:	b29b      	uxth	r3, r3
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004128:	897b      	ldrh	r3, [r7, #10]
 800412a:	019b      	lsls	r3, r3, #6
 800412c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f043 0302 	orr.w	r3, r3, #2
 800413c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004158:	f7fe fcf8 	bl	8002b4c <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800415e:	e015      	b.n	800418c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004160:	f7fe fcf4 	bl	8002b4c <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416e:	d309      	bcc.n	8004184 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e00d      	b.n	80041a0 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e4      	bne.n	8004160 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d101      	bne.n	80041be <HAL_ETH_Start+0x16>
 80041ba:	2302      	movs	r3, #2
 80041bc:	e01f      	b.n	80041fe <HAL_ETH_Start+0x56>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fb3e 	bl	8004850 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fb75 	bl	80048c4 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fc00 	bl	80049e0 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 fba9 	bl	8004938 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fbd0 	bl	800498c <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_ETH_Stop+0x16>
 8004218:	2302      	movs	r3, #2
 800421a:	e01f      	b.n	800425c <HAL_ETH_Stop+0x56>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fb98 	bl	8004962 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fbbf 	bl	80049b6 <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fb60 	bl	80048fe <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fbce 	bl	80049e0 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fb20 	bl	800488a <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_ETH_ConfigMAC+0x1c>
 800427c:	2302      	movs	r3, #2
 800427e:	e0e4      	b.n	800444a <HAL_ETH_ConfigMAC+0x1e6>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 80b1 	beq.w	80043fa <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4b6c      	ldr	r3, [pc, #432]	; (8004454 <HAL_ETH_ConfigMAC+0x1f0>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80042b0:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 80042b6:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 80042bc:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 80042c2:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 80042c8:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 80042ce:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 80042d4:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 80042da:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 80042e0:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 80042e6:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 80042ec:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 80042f2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800430a:	2001      	movs	r0, #1
 800430c:	f7fe fc28 	bl	8002b60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8004320:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8004326:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800432c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8004332:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8004338:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800433e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800434a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 800434c:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004356:	2001      	movs	r0, #1
 8004358:	f7fe fc02 	bl	8002b60 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800436c:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004376:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004386:	4013      	ands	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004394:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800439a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80043a0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 80043a6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80043ac:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80043c4:	2001      	movs	r0, #1
 80043c6:	f7fe fbcb 	bl	8002b60 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80043ea:	2001      	movs	r0, #1
 80043ec:	f7fe fbb8 	bl	8002b60 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	61da      	str	r2, [r3, #28]
 80043f8:	e01e      	b.n	8004438 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004408:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800442a:	2001      	movs	r0, #1
 800442c:	f7fe fb98 	bl	8002b60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	ff20810f 	.word	0xff20810f

08004458 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b0b0      	sub	sp, #192	; 0xc0
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004474:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800447c:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800447e:	2300      	movs	r3, #0
 8004480:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004482:	2300      	movs	r3, #0
 8004484:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004486:	2300      	movs	r3, #0
 8004488:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800448a:	2300      	movs	r3, #0
 800448c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800448e:	2300      	movs	r3, #0
 8004490:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004492:	2300      	movs	r3, #0
 8004494:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d103      	bne.n	80044a6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800449e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044a2:	663b      	str	r3, [r7, #96]	; 0x60
 80044a4:	e001      	b.n	80044aa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80044a6:	2300      	movs	r3, #0
 80044a8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80044aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044ae:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80044b0:	2300      	movs	r3, #0
 80044b2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80044b4:	2300      	movs	r3, #0
 80044b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80044b8:	2300      	movs	r3, #0
 80044ba:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80044bc:	2300      	movs	r3, #0
 80044be:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80044c4:	2340      	movs	r3, #64	; 0x40
 80044c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80044c8:	2300      	movs	r3, #0
 80044ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80044d4:	2300      	movs	r3, #0
 80044d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80044da:	2300      	movs	r3, #0
 80044dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80044fe:	2300      	movs	r3, #0
 8004500:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004504:	2300      	movs	r3, #0
 8004506:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800450a:	2300      	movs	r3, #0
 800450c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004510:	2300      	movs	r3, #0
 8004512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004516:	2300      	movs	r3, #0
 8004518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800451c:	2300      	movs	r3, #0
 800451e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800452c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004530:	4baa      	ldr	r3, [pc, #680]	; (80047dc <ETH_MACDMAConfig+0x384>)
 8004532:	4013      	ands	r3, r2
 8004534:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8004538:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 800453a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 800453c:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 800453e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8004540:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8004542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8004544:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 800454a:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 800454c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 800454e:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8004550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8004552:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8004558:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 800455a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 800455c:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 800455e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8004560:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8004562:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8004564:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8004566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8004568:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 800456a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 800456c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 800456e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004580:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800458c:	2001      	movs	r0, #1
 800458e:	f7fe fae7 	bl	8002b60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800459a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800459c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800459e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80045a0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80045a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80045a4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 80045a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80045aa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80045ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 80045b0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80045b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80045b6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80045b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80045bc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80045c0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80045c8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80045ca:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80045d6:	2001      	movs	r0, #1
 80045d8:	f7fe fac2 	bl	8002b60 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045e4:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045ee:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80045f8:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004604:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004608:	f64f 7341 	movw	r3, #65345	; 0xff41
 800460c:	4013      	ands	r3, r2
 800460e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8004612:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004616:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004618:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800461c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800461e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004622:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8004624:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004628:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800462a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 800462e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8004630:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004634:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8004636:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004648:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004654:	2001      	movs	r0, #1
 8004656:	f7fe fa83 	bl	8002b60 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004662:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8004664:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 8004668:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800467e:	2001      	movs	r0, #1
 8004680:	f7fe fa6e 	bl	8002b60 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800468c:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800468e:	2300      	movs	r3, #0
 8004690:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004692:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004696:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004698:	2300      	movs	r3, #0
 800469a:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 800469c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80046a0:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80046a6:	2300      	movs	r3, #0
 80046a8:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80046ae:	2300      	movs	r3, #0
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80046b2:	2304      	movs	r3, #4
 80046b4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80046b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80046bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046c0:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80046c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046c6:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80046c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046cc:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80046ce:	2380      	movs	r3, #128	; 0x80
 80046d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80046d6:	2300      	movs	r3, #0
 80046d8:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80046e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80046ec:	4b3c      	ldr	r3, [pc, #240]	; (80047e0 <ETH_MACDMAConfig+0x388>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80046f4:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 80046f6:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80046f8:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 80046fa:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 80046fc:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 80046fe:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8004700:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8004702:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8004704:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8004706:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 8004708:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 800470a:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 800470c:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8004710:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 8004714:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8004716:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004728:	461a      	mov	r2, r3
 800472a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800472e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800473e:	2001      	movs	r0, #1
 8004740:	f7fe fa0e 	bl	8002b60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474c:	461a      	mov	r2, r3
 800474e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004752:	6193      	str	r3, [r2, #24]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8004754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8004758:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800475a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 800475c:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 800475e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004760:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 8004762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 8004764:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8004766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004768:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 800476a:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 800476c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 800476e:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6812      	ldr	r2, [r2, #0]
 8004774:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004778:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800477c:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800478c:	2001      	movs	r0, #1
 800478e:	f7fe f9e7 	bl	8002b60 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479a:	461a      	mov	r2, r3
 800479c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047a0:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d10d      	bne.n	80047c6 <ETH_MACDMAConfig+0x36e>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047c4:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	461a      	mov	r2, r3
 80047cc:	2100      	movs	r1, #0
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f808 	bl	80047e4 <ETH_MACAddressConfig>
}
 80047d4:	bf00      	nop
 80047d6:	37c0      	adds	r7, #192	; 0xc0
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	ff20810f 	.word	0xff20810f
 80047e0:	f8de3f23 	.word	0xf8de3f23

080047e4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3305      	adds	r3, #5
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	3204      	adds	r2, #4
 80047fc:	7812      	ldrb	r2, [r2, #0]
 80047fe:	4313      	orrs	r3, r2
 8004800:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	4b10      	ldr	r3, [pc, #64]	; (8004848 <ETH_MACAddressConfig+0x64>)
 8004806:	4413      	add	r3, r2
 8004808:	461a      	mov	r2, r3
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3303      	adds	r3, #3
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	061a      	lsls	r2, r3, #24
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	3302      	adds	r3, #2
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	041b      	lsls	r3, r3, #16
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3301      	adds	r3, #1
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	021b      	lsls	r3, r3, #8
 8004828:	4313      	orrs	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	7812      	ldrb	r2, [r2, #0]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	4b05      	ldr	r3, [pc, #20]	; (800484c <ETH_MACAddressConfig+0x68>)
 8004836:	4413      	add	r3, r2
 8004838:	461a      	mov	r2, r3
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	6013      	str	r3, [r2, #0]
}
 800483e:	bf00      	nop
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr
 8004848:	40028040 	.word	0x40028040
 800484c:	40028044 	.word	0x40028044

08004850 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0208 	orr.w	r2, r2, #8
 800486a:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004874:	2001      	movs	r0, #1
 8004876:	f000 f8d9 	bl	8004a2c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	601a      	str	r2, [r3, #0]
}
 8004882:	bf00      	nop
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b084      	sub	sp, #16
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0208 	bic.w	r2, r2, #8
 80048a4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80048ae:	2001      	movs	r0, #1
 80048b0:	f000 f8bc 	bl	8004a2c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	601a      	str	r2, [r3, #0]
}
 80048bc:	bf00      	nop
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0204 	orr.w	r2, r2, #4
 80048de:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80048e8:	2001      	movs	r0, #1
 80048ea:	f000 f89f 	bl	8004a2c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	601a      	str	r2, [r3, #0]
}
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0204 	bic.w	r2, r2, #4
 8004918:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004922:	2001      	movs	r0, #1
 8004924:	f000 f882 	bl	8004a2c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	601a      	str	r2, [r3, #0]
}
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004952:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004956:	6193      	str	r3, [r2, #24]
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr

08004962 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800497c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004980:	6193      	str	r3, [r2, #24]
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6812      	ldr	r2, [r2, #0]
 80049a2:	f043 0302 	orr.w	r3, r3, #2
 80049a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049aa:	6193      	str	r3, [r2, #24]
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr

080049b6 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	f023 0302 	bic.w	r3, r3, #2
 80049d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049d4:	6193      	str	r3, [r2, #24]
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr

080049e0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a02:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004a10:	2001      	movs	r0, #1
 8004a12:	f000 f80b 	bl	8004a2c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a20:	6193      	str	r3, [r2, #24]
}
 8004a22:	bf00      	nop
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a34:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <ETH_Delay+0x34>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a0a      	ldr	r2, [pc, #40]	; (8004a64 <ETH_Delay+0x38>)
 8004a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3e:	0a5b      	lsrs	r3, r3, #9
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	fb02 f303 	mul.w	r3, r2, r3
 8004a46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a48:	bf00      	nop
  }
  while (Delay --);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1e5a      	subs	r2, r3, #1
 8004a4e:	60fa      	str	r2, [r7, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1f9      	bne.n	8004a48 <ETH_Delay+0x1c>
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr
 8004a60:	20000024 	.word	0x20000024
 8004a64:	10624dd3 	.word	0x10624dd3

08004a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a76:	e16f      	b.n	8004d58 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	fa01 f303 	lsl.w	r3, r1, r3
 8004a84:	4013      	ands	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 8161 	beq.w	8004d52 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f003 0303 	and.w	r3, r3, #3
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d005      	beq.n	8004aa8 <HAL_GPIO_Init+0x40>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d130      	bne.n	8004b0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	2203      	movs	r2, #3
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4013      	ands	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ade:	2201      	movs	r2, #1
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4013      	ands	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	091b      	lsrs	r3, r3, #4
 8004af4:	f003 0201 	and.w	r2, r3, #1
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d017      	beq.n	8004b46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	2203      	movs	r2, #3
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	43db      	mvns	r3, r3
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d123      	bne.n	8004b9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	08da      	lsrs	r2, r3, #3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3208      	adds	r2, #8
 8004b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	220f      	movs	r2, #15
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4013      	ands	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	691a      	ldr	r2, [r3, #16]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	08da      	lsrs	r2, r3, #3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3208      	adds	r2, #8
 8004b94:	6939      	ldr	r1, [r7, #16]
 8004b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	2203      	movs	r2, #3
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43db      	mvns	r3, r3
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f003 0203 	and.w	r2, r3, #3
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 80bb 	beq.w	8004d52 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	4b64      	ldr	r3, [pc, #400]	; (8004d74 <HAL_GPIO_Init+0x30c>)
 8004be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be4:	4a63      	ldr	r2, [pc, #396]	; (8004d74 <HAL_GPIO_Init+0x30c>)
 8004be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bea:	6453      	str	r3, [r2, #68]	; 0x44
 8004bec:	4b61      	ldr	r3, [pc, #388]	; (8004d74 <HAL_GPIO_Init+0x30c>)
 8004bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004bf8:	4a5f      	ldr	r2, [pc, #380]	; (8004d78 <HAL_GPIO_Init+0x310>)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	089b      	lsrs	r3, r3, #2
 8004bfe:	3302      	adds	r3, #2
 8004c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	220f      	movs	r2, #15
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	43db      	mvns	r3, r3
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a57      	ldr	r2, [pc, #348]	; (8004d7c <HAL_GPIO_Init+0x314>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d031      	beq.n	8004c88 <HAL_GPIO_Init+0x220>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a56      	ldr	r2, [pc, #344]	; (8004d80 <HAL_GPIO_Init+0x318>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d02b      	beq.n	8004c84 <HAL_GPIO_Init+0x21c>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a55      	ldr	r2, [pc, #340]	; (8004d84 <HAL_GPIO_Init+0x31c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d025      	beq.n	8004c80 <HAL_GPIO_Init+0x218>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a54      	ldr	r2, [pc, #336]	; (8004d88 <HAL_GPIO_Init+0x320>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d01f      	beq.n	8004c7c <HAL_GPIO_Init+0x214>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a53      	ldr	r2, [pc, #332]	; (8004d8c <HAL_GPIO_Init+0x324>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d019      	beq.n	8004c78 <HAL_GPIO_Init+0x210>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a52      	ldr	r2, [pc, #328]	; (8004d90 <HAL_GPIO_Init+0x328>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d013      	beq.n	8004c74 <HAL_GPIO_Init+0x20c>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a51      	ldr	r2, [pc, #324]	; (8004d94 <HAL_GPIO_Init+0x32c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00d      	beq.n	8004c70 <HAL_GPIO_Init+0x208>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a50      	ldr	r2, [pc, #320]	; (8004d98 <HAL_GPIO_Init+0x330>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d007      	beq.n	8004c6c <HAL_GPIO_Init+0x204>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a4f      	ldr	r2, [pc, #316]	; (8004d9c <HAL_GPIO_Init+0x334>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d101      	bne.n	8004c68 <HAL_GPIO_Init+0x200>
 8004c64:	2308      	movs	r3, #8
 8004c66:	e010      	b.n	8004c8a <HAL_GPIO_Init+0x222>
 8004c68:	2309      	movs	r3, #9
 8004c6a:	e00e      	b.n	8004c8a <HAL_GPIO_Init+0x222>
 8004c6c:	2307      	movs	r3, #7
 8004c6e:	e00c      	b.n	8004c8a <HAL_GPIO_Init+0x222>
 8004c70:	2306      	movs	r3, #6
 8004c72:	e00a      	b.n	8004c8a <HAL_GPIO_Init+0x222>
 8004c74:	2305      	movs	r3, #5
 8004c76:	e008      	b.n	8004c8a <HAL_GPIO_Init+0x222>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	e006      	b.n	8004c8a <HAL_GPIO_Init+0x222>
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e004      	b.n	8004c8a <HAL_GPIO_Init+0x222>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e002      	b.n	8004c8a <HAL_GPIO_Init+0x222>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <HAL_GPIO_Init+0x222>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	f002 0203 	and.w	r2, r2, #3
 8004c90:	0092      	lsls	r2, r2, #2
 8004c92:	4093      	lsls	r3, r2
 8004c94:	461a      	mov	r2, r3
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c9c:	4936      	ldr	r1, [pc, #216]	; (8004d78 <HAL_GPIO_Init+0x310>)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	089b      	lsrs	r3, r3, #2
 8004ca2:	3302      	adds	r3, #2
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004caa:	4b3d      	ldr	r3, [pc, #244]	; (8004da0 <HAL_GPIO_Init+0x338>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004cce:	4a34      	ldr	r2, [pc, #208]	; (8004da0 <HAL_GPIO_Init+0x338>)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004cd4:	4b32      	ldr	r3, [pc, #200]	; (8004da0 <HAL_GPIO_Init+0x338>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004cf8:	4a29      	ldr	r2, [pc, #164]	; (8004da0 <HAL_GPIO_Init+0x338>)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cfe:	4b28      	ldr	r3, [pc, #160]	; (8004da0 <HAL_GPIO_Init+0x338>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	43db      	mvns	r3, r3
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004d22:	4a1f      	ldr	r2, [pc, #124]	; (8004da0 <HAL_GPIO_Init+0x338>)
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d28:	4b1d      	ldr	r3, [pc, #116]	; (8004da0 <HAL_GPIO_Init+0x338>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4013      	ands	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004d4c:	4a14      	ldr	r2, [pc, #80]	; (8004da0 <HAL_GPIO_Init+0x338>)
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	3301      	adds	r3, #1
 8004d56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f47f ae88 	bne.w	8004a78 <HAL_GPIO_Init+0x10>
  }
}
 8004d68:	bf00      	nop
 8004d6a:	bf00      	nop
 8004d6c:	371c      	adds	r7, #28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40013800 	.word	0x40013800
 8004d7c:	40020000 	.word	0x40020000
 8004d80:	40020400 	.word	0x40020400
 8004d84:	40020800 	.word	0x40020800
 8004d88:	40020c00 	.word	0x40020c00
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	40021400 	.word	0x40021400
 8004d94:	40021800 	.word	0x40021800
 8004d98:	40021c00 	.word	0x40021c00
 8004d9c:	40022000 	.word	0x40022000
 8004da0:	40013c00 	.word	0x40013c00

08004da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	807b      	strh	r3, [r7, #2]
 8004db0:	4613      	mov	r3, r2
 8004db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004db4:	787b      	ldrb	r3, [r7, #1]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dba:	887a      	ldrh	r2, [r7, #2]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004dc0:	e003      	b.n	8004dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dc2:	887b      	ldrh	r3, [r7, #2]
 8004dc4:	041a      	lsls	r2, r3, #16
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	619a      	str	r2, [r3, #24]
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bc80      	pop	{r7}
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004de6:	887a      	ldrh	r2, [r7, #2]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4013      	ands	r3, r2
 8004dec:	041a      	lsls	r2, r3, #16
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	43d9      	mvns	r1, r3
 8004df2:	887b      	ldrh	r3, [r7, #2]
 8004df4:	400b      	ands	r3, r1
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	619a      	str	r2, [r3, #24]
}
 8004dfc:	bf00      	nop
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr
	...

08004e08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	; 0x28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e236      	b.n	8005288 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d050      	beq.n	8004ec8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e26:	4b9e      	ldr	r3, [pc, #632]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d00c      	beq.n	8004e4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e32:	4b9b      	ldr	r3, [pc, #620]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d112      	bne.n	8004e64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e3e:	4b98      	ldr	r3, [pc, #608]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e4a:	d10b      	bne.n	8004e64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e4c:	4b94      	ldr	r3, [pc, #592]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d036      	beq.n	8004ec6 <HAL_RCC_OscConfig+0xbe>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d132      	bne.n	8004ec6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e211      	b.n	8005288 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	4b8e      	ldr	r3, [pc, #568]	; (80050a4 <HAL_RCC_OscConfig+0x29c>)
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d013      	beq.n	8004e9e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e76:	f7fd fe69 	bl	8002b4c <HAL_GetTick>
 8004e7a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e7e:	f7fd fe65 	bl	8002b4c <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b64      	cmp	r3, #100	; 0x64
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e1fb      	b.n	8005288 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e90:	4b83      	ldr	r3, [pc, #524]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCC_OscConfig+0x76>
 8004e9c:	e014      	b.n	8004ec8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9e:	f7fd fe55 	bl	8002b4c <HAL_GetTick>
 8004ea2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ea6:	f7fd fe51 	bl	8002b4c <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b64      	cmp	r3, #100	; 0x64
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e1e7      	b.n	8005288 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eb8:	4b79      	ldr	r3, [pc, #484]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1f0      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x9e>
 8004ec4:	e000      	b.n	8004ec8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d077      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ed4:	4b72      	ldr	r3, [pc, #456]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 030c 	and.w	r3, r3, #12
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00b      	beq.n	8004ef8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ee0:	4b6f      	ldr	r3, [pc, #444]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d126      	bne.n	8004f3a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eec:	4b6c      	ldr	r3, [pc, #432]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d120      	bne.n	8004f3a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ef8:	4b69      	ldr	r3, [pc, #420]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <HAL_RCC_OscConfig+0x108>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d001      	beq.n	8004f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e1bb      	b.n	8005288 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f10:	4b63      	ldr	r3, [pc, #396]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	21f8      	movs	r1, #248	; 0xf8
 8004f1e:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f20:	69b9      	ldr	r1, [r7, #24]
 8004f22:	fa91 f1a1 	rbit	r1, r1
 8004f26:	6179      	str	r1, [r7, #20]
  return result;
 8004f28:	6979      	ldr	r1, [r7, #20]
 8004f2a:	fab1 f181 	clz	r1, r1
 8004f2e:	b2c9      	uxtb	r1, r1
 8004f30:	408b      	lsls	r3, r1
 8004f32:	495b      	ldr	r1, [pc, #364]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f38:	e044      	b.n	8004fc4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d02a      	beq.n	8004f98 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f42:	4b59      	ldr	r3, [pc, #356]	; (80050a8 <HAL_RCC_OscConfig+0x2a0>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fd fe00 	bl	8002b4c <HAL_GetTick>
 8004f4c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f50:	f7fd fdfc 	bl	8002b4c <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e192      	b.n	8005288 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f62:	4b4f      	ldr	r3, [pc, #316]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f6e:	4b4c      	ldr	r3, [pc, #304]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	21f8      	movs	r1, #248	; 0xf8
 8004f7c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7e:	6939      	ldr	r1, [r7, #16]
 8004f80:	fa91 f1a1 	rbit	r1, r1
 8004f84:	60f9      	str	r1, [r7, #12]
  return result;
 8004f86:	68f9      	ldr	r1, [r7, #12]
 8004f88:	fab1 f181 	clz	r1, r1
 8004f8c:	b2c9      	uxtb	r1, r1
 8004f8e:	408b      	lsls	r3, r1
 8004f90:	4943      	ldr	r1, [pc, #268]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	600b      	str	r3, [r1, #0]
 8004f96:	e015      	b.n	8004fc4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f98:	4b43      	ldr	r3, [pc, #268]	; (80050a8 <HAL_RCC_OscConfig+0x2a0>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9e:	f7fd fdd5 	bl	8002b4c <HAL_GetTick>
 8004fa2:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fa6:	f7fd fdd1 	bl	8002b4c <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e167      	b.n	8005288 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb8:	4b39      	ldr	r3, [pc, #228]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1f0      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d030      	beq.n	8005032 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d016      	beq.n	8005006 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fd8:	4b34      	ldr	r3, [pc, #208]	; (80050ac <HAL_RCC_OscConfig+0x2a4>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fde:	f7fd fdb5 	bl	8002b4c <HAL_GetTick>
 8004fe2:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe6:	f7fd fdb1 	bl	8002b4c <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e147      	b.n	8005288 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff8:	4b29      	ldr	r3, [pc, #164]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8004ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0f0      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x1de>
 8005004:	e015      	b.n	8005032 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005006:	4b29      	ldr	r3, [pc, #164]	; (80050ac <HAL_RCC_OscConfig+0x2a4>)
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800500c:	f7fd fd9e 	bl	8002b4c <HAL_GetTick>
 8005010:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005014:	f7fd fd9a 	bl	8002b4c <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e130      	b.n	8005288 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005026:	4b1e      	ldr	r3, [pc, #120]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8005028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 8087 	beq.w	800514e <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005040:	2300      	movs	r3, #0
 8005042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005046:	4b16      	ldr	r3, [pc, #88]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d110      	bne.n	8005074 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005052:	2300      	movs	r3, #0
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	4b12      	ldr	r3, [pc, #72]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	4a11      	ldr	r2, [pc, #68]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 800505c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005060:	6413      	str	r3, [r2, #64]	; 0x40
 8005062:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <HAL_RCC_OscConfig+0x298>)
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506a:	60bb      	str	r3, [r7, #8]
 800506c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800506e:	2301      	movs	r3, #1
 8005070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005074:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <HAL_RCC_OscConfig+0x2a8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a0d      	ldr	r2, [pc, #52]	; (80050b0 <HAL_RCC_OscConfig+0x2a8>)
 800507a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800507e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005080:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <HAL_RCC_OscConfig+0x2a8>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005088:	2b00      	cmp	r3, #0
 800508a:	d122      	bne.n	80050d2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800508c:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <HAL_RCC_OscConfig+0x2a8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a07      	ldr	r2, [pc, #28]	; (80050b0 <HAL_RCC_OscConfig+0x2a8>)
 8005092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005096:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005098:	f7fd fd58 	bl	8002b4c <HAL_GetTick>
 800509c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509e:	e012      	b.n	80050c6 <HAL_RCC_OscConfig+0x2be>
 80050a0:	40023800 	.word	0x40023800
 80050a4:	40023802 	.word	0x40023802
 80050a8:	42470000 	.word	0x42470000
 80050ac:	42470e80 	.word	0x42470e80
 80050b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b4:	f7fd fd4a 	bl	8002b4c <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e0e0      	b.n	8005288 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c6:	4b72      	ldr	r3, [pc, #456]	; (8005290 <HAL_RCC_OscConfig+0x488>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0f0      	beq.n	80050b4 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	4b6f      	ldr	r3, [pc, #444]	; (8005294 <HAL_RCC_OscConfig+0x48c>)
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d015      	beq.n	8005110 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e4:	f7fd fd32 	bl	8002b4c <HAL_GetTick>
 80050e8:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ea:	e00a      	b.n	8005102 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050ec:	f7fd fd2e 	bl	8002b4c <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e0c2      	b.n	8005288 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005102:	4b65      	ldr	r3, [pc, #404]	; (8005298 <HAL_RCC_OscConfig+0x490>)
 8005104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0ee      	beq.n	80050ec <HAL_RCC_OscConfig+0x2e4>
 800510e:	e014      	b.n	800513a <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005110:	f7fd fd1c 	bl	8002b4c <HAL_GetTick>
 8005114:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005116:	e00a      	b.n	800512e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005118:	f7fd fd18 	bl	8002b4c <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	f241 3288 	movw	r2, #5000	; 0x1388
 8005126:	4293      	cmp	r3, r2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e0ac      	b.n	8005288 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800512e:	4b5a      	ldr	r3, [pc, #360]	; (8005298 <HAL_RCC_OscConfig+0x490>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1ee      	bne.n	8005118 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800513a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800513e:	2b01      	cmp	r3, #1
 8005140:	d105      	bne.n	800514e <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005142:	4b55      	ldr	r3, [pc, #340]	; (8005298 <HAL_RCC_OscConfig+0x490>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	4a54      	ldr	r2, [pc, #336]	; (8005298 <HAL_RCC_OscConfig+0x490>)
 8005148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800514c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 8097 	beq.w	8005286 <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005158:	4b4f      	ldr	r3, [pc, #316]	; (8005298 <HAL_RCC_OscConfig+0x490>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 030c 	and.w	r3, r3, #12
 8005160:	2b08      	cmp	r3, #8
 8005162:	d061      	beq.n	8005228 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d146      	bne.n	80051fa <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800516c:	4b4b      	ldr	r3, [pc, #300]	; (800529c <HAL_RCC_OscConfig+0x494>)
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005172:	f7fd fceb 	bl	8002b4c <HAL_GetTick>
 8005176:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800517a:	f7fd fce7 	bl	8002b4c <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b64      	cmp	r3, #100	; 0x64
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e07d      	b.n	8005288 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800518c:	4b42      	ldr	r3, [pc, #264]	; (8005298 <HAL_RCC_OscConfig+0x490>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f0      	bne.n	800517a <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005198:	4b3f      	ldr	r3, [pc, #252]	; (8005298 <HAL_RCC_OscConfig+0x490>)
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	4b40      	ldr	r3, [pc, #256]	; (80052a0 <HAL_RCC_OscConfig+0x498>)
 800519e:	4013      	ands	r3, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	69d1      	ldr	r1, [r2, #28]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6a12      	ldr	r2, [r2, #32]
 80051a8:	4311      	orrs	r1, r2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051ae:	0192      	lsls	r2, r2, #6
 80051b0:	4311      	orrs	r1, r2
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80051b6:	0612      	lsls	r2, r2, #24
 80051b8:	4311      	orrs	r1, r2
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80051be:	0852      	lsrs	r2, r2, #1
 80051c0:	3a01      	subs	r2, #1
 80051c2:	0412      	lsls	r2, r2, #16
 80051c4:	430a      	orrs	r2, r1
 80051c6:	4934      	ldr	r1, [pc, #208]	; (8005298 <HAL_RCC_OscConfig+0x490>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051cc:	4b33      	ldr	r3, [pc, #204]	; (800529c <HAL_RCC_OscConfig+0x494>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d2:	f7fd fcbb 	bl	8002b4c <HAL_GetTick>
 80051d6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051da:	f7fd fcb7 	bl	8002b4c <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b64      	cmp	r3, #100	; 0x64
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e04d      	b.n	8005288 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ec:	4b2a      	ldr	r3, [pc, #168]	; (8005298 <HAL_RCC_OscConfig+0x490>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <HAL_RCC_OscConfig+0x3d2>
 80051f8:	e045      	b.n	8005286 <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fa:	4b28      	ldr	r3, [pc, #160]	; (800529c <HAL_RCC_OscConfig+0x494>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005200:	f7fd fca4 	bl	8002b4c <HAL_GetTick>
 8005204:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005208:	f7fd fca0 	bl	8002b4c <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b64      	cmp	r3, #100	; 0x64
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e036      	b.n	8005288 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521a:	4b1f      	ldr	r3, [pc, #124]	; (8005298 <HAL_RCC_OscConfig+0x490>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1f0      	bne.n	8005208 <HAL_RCC_OscConfig+0x400>
 8005226:	e02e      	b.n	8005286 <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e029      	b.n	8005288 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005234:	4b18      	ldr	r3, [pc, #96]	; (8005298 <HAL_RCC_OscConfig+0x490>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	429a      	cmp	r2, r3
 8005246:	d11c      	bne.n	8005282 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005252:	429a      	cmp	r2, r3
 8005254:	d115      	bne.n	8005282 <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	099b      	lsrs	r3, r3, #6
 800525a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005262:	429a      	cmp	r2, r3
 8005264:	d10d      	bne.n	8005282 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005270:	429a      	cmp	r2, r3
 8005272:	d106      	bne.n	8005282 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800527e:	429a      	cmp	r2, r3
 8005280:	d001      	beq.n	8005286 <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3728      	adds	r7, #40	; 0x28
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40007000 	.word	0x40007000
 8005294:	40023870 	.word	0x40023870
 8005298:	40023800 	.word	0x40023800
 800529c:	42470060 	.word	0x42470060
 80052a0:	f0bc8000 	.word	0xf0bc8000

080052a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0d2      	b.n	800545e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052b8:	4b6b      	ldr	r3, [pc, #428]	; (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d90c      	bls.n	80052e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c6:	4b68      	ldr	r3, [pc, #416]	; (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ce:	4b66      	ldr	r3, [pc, #408]	; (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d001      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0be      	b.n	800545e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d020      	beq.n	800532e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052f8:	4b5c      	ldr	r3, [pc, #368]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	4a5b      	ldr	r2, [pc, #364]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 80052fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005302:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8005310:	4b56      	ldr	r3, [pc, #344]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	4a55      	ldr	r2, [pc, #340]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 8005316:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800531a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800531c:	4b53      	ldr	r3, [pc, #332]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	4950      	ldr	r1, [pc, #320]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 800532a:	4313      	orrs	r3, r2
 800532c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d040      	beq.n	80053bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d107      	bne.n	8005352 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	4b4a      	ldr	r3, [pc, #296]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d115      	bne.n	800537a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e085      	b.n	800545e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d107      	bne.n	800536a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535a:	4b44      	ldr	r3, [pc, #272]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d109      	bne.n	800537a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e079      	b.n	800545e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800536a:	4b40      	ldr	r3, [pc, #256]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e071      	b.n	800545e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800537a:	4b3c      	ldr	r3, [pc, #240]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f023 0203 	bic.w	r2, r3, #3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	4939      	ldr	r1, [pc, #228]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 8005388:	4313      	orrs	r3, r2
 800538a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800538c:	f7fd fbde 	bl	8002b4c <HAL_GetTick>
 8005390:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005392:	e00a      	b.n	80053aa <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005394:	f7fd fbda 	bl	8002b4c <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e059      	b.n	800545e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053aa:	4b30      	ldr	r3, [pc, #192]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 020c 	and.w	r2, r3, #12
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d1eb      	bne.n	8005394 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053bc:	4b2a      	ldr	r3, [pc, #168]	; (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d20c      	bcs.n	80053e4 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ca:	4b27      	ldr	r3, [pc, #156]	; (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053d2:	4b25      	ldr	r3, [pc, #148]	; (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d001      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e03c      	b.n	800545e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053f0:	4b1e      	ldr	r3, [pc, #120]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	491b      	ldr	r1, [pc, #108]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d009      	beq.n	8005422 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800540e:	4b17      	ldr	r3, [pc, #92]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	4913      	ldr	r1, [pc, #76]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 800541e:	4313      	orrs	r3, r2
 8005420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8005422:	f000 f82b 	bl	800547c <HAL_RCC_GetSysClockFreq>
 8005426:	4601      	mov	r1, r0
 8005428:	4b10      	ldr	r3, [pc, #64]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005430:	22f0      	movs	r2, #240	; 0xf0
 8005432:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	fa92 f2a2 	rbit	r2, r2
 800543a:	60fa      	str	r2, [r7, #12]
  return result;
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	fab2 f282 	clz	r2, r2
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	40d3      	lsrs	r3, r2
 8005446:	4a0a      	ldr	r2, [pc, #40]	; (8005470 <HAL_RCC_ClockConfig+0x1cc>)
 8005448:	5cd3      	ldrb	r3, [r2, r3]
 800544a:	fa21 f303 	lsr.w	r3, r1, r3
 800544e:	4a09      	ldr	r2, [pc, #36]	; (8005474 <HAL_RCC_ClockConfig+0x1d0>)
 8005450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005452:	4b09      	ldr	r3, [pc, #36]	; (8005478 <HAL_RCC_ClockConfig+0x1d4>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f7fd fb36 	bl	8002ac8 <HAL_InitTick>

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	40023c00 	.word	0x40023c00
 800546c:	40023800 	.word	0x40023800
 8005470:	08018368 	.word	0x08018368
 8005474:	20000024 	.word	0x20000024
 8005478:	20000028 	.word	0x20000028

0800547c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800547c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005480:	b094      	sub	sp, #80	; 0x50
 8005482:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	647b      	str	r3, [r7, #68]	; 0x44
 8005488:	2300      	movs	r3, #0
 800548a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800548c:	2300      	movs	r3, #0
 800548e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005494:	4b7c      	ldr	r3, [pc, #496]	; (8005688 <HAL_RCC_GetSysClockFreq+0x20c>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 030c 	and.w	r3, r3, #12
 800549c:	2b08      	cmp	r3, #8
 800549e:	d00d      	beq.n	80054bc <HAL_RCC_GetSysClockFreq+0x40>
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	f200 80e7 	bhi.w	8005674 <HAL_RCC_GetSysClockFreq+0x1f8>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <HAL_RCC_GetSysClockFreq+0x34>
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d003      	beq.n	80054b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80054ae:	e0e1      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054b0:	4b76      	ldr	r3, [pc, #472]	; (800568c <HAL_RCC_GetSysClockFreq+0x210>)
 80054b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80054b4:	e0e1      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054b6:	4b76      	ldr	r3, [pc, #472]	; (8005690 <HAL_RCC_GetSysClockFreq+0x214>)
 80054b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054ba:	e0de      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054bc:	4b72      	ldr	r3, [pc, #456]	; (8005688 <HAL_RCC_GetSysClockFreq+0x20c>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054c6:	4b70      	ldr	r3, [pc, #448]	; (8005688 <HAL_RCC_GetSysClockFreq+0x20c>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d065      	beq.n	800559e <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054d2:	4b6d      	ldr	r3, [pc, #436]	; (8005688 <HAL_RCC_GetSysClockFreq+0x20c>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	099b      	lsrs	r3, r3, #6
 80054d8:	2200      	movs	r2, #0
 80054da:	63bb      	str	r3, [r7, #56]	; 0x38
 80054dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e4:	633b      	str	r3, [r7, #48]	; 0x30
 80054e6:	2300      	movs	r3, #0
 80054e8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80054ee:	4622      	mov	r2, r4
 80054f0:	462b      	mov	r3, r5
 80054f2:	f04f 0000 	mov.w	r0, #0
 80054f6:	f04f 0100 	mov.w	r1, #0
 80054fa:	0159      	lsls	r1, r3, #5
 80054fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005500:	0150      	lsls	r0, r2, #5
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4621      	mov	r1, r4
 8005508:	1a51      	subs	r1, r2, r1
 800550a:	6139      	str	r1, [r7, #16]
 800550c:	4629      	mov	r1, r5
 800550e:	eb63 0301 	sbc.w	r3, r3, r1
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005520:	4659      	mov	r1, fp
 8005522:	018b      	lsls	r3, r1, #6
 8005524:	4651      	mov	r1, sl
 8005526:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800552a:	4651      	mov	r1, sl
 800552c:	018a      	lsls	r2, r1, #6
 800552e:	46d4      	mov	ip, sl
 8005530:	ebb2 080c 	subs.w	r8, r2, ip
 8005534:	4659      	mov	r1, fp
 8005536:	eb63 0901 	sbc.w	r9, r3, r1
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005546:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800554a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800554e:	4690      	mov	r8, r2
 8005550:	4699      	mov	r9, r3
 8005552:	4623      	mov	r3, r4
 8005554:	eb18 0303 	adds.w	r3, r8, r3
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	462b      	mov	r3, r5
 800555c:	eb49 0303 	adc.w	r3, r9, r3
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800556e:	4629      	mov	r1, r5
 8005570:	024b      	lsls	r3, r1, #9
 8005572:	4620      	mov	r0, r4
 8005574:	4629      	mov	r1, r5
 8005576:	4604      	mov	r4, r0
 8005578:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800557c:	4601      	mov	r1, r0
 800557e:	024a      	lsls	r2, r1, #9
 8005580:	4610      	mov	r0, r2
 8005582:	4619      	mov	r1, r3
 8005584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005586:	2200      	movs	r2, #0
 8005588:	62bb      	str	r3, [r7, #40]	; 0x28
 800558a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800558c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005590:	f7fb fe04 	bl	800119c <__aeabi_uldivmod>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	4613      	mov	r3, r2
 800559a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800559c:	e05c      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800559e:	4b3a      	ldr	r3, [pc, #232]	; (8005688 <HAL_RCC_GetSysClockFreq+0x20c>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	099b      	lsrs	r3, r3, #6
 80055a4:	2200      	movs	r2, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	4611      	mov	r1, r2
 80055aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055ae:	623b      	str	r3, [r7, #32]
 80055b0:	2300      	movs	r3, #0
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
 80055b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055b8:	4642      	mov	r2, r8
 80055ba:	464b      	mov	r3, r9
 80055bc:	f04f 0000 	mov.w	r0, #0
 80055c0:	f04f 0100 	mov.w	r1, #0
 80055c4:	0159      	lsls	r1, r3, #5
 80055c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055ca:	0150      	lsls	r0, r2, #5
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	46c4      	mov	ip, r8
 80055d2:	ebb2 0a0c 	subs.w	sl, r2, ip
 80055d6:	4640      	mov	r0, r8
 80055d8:	4649      	mov	r1, r9
 80055da:	468c      	mov	ip, r1
 80055dc:	eb63 0b0c 	sbc.w	fp, r3, ip
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055f4:	ebb2 040a 	subs.w	r4, r2, sl
 80055f8:	eb63 050b 	sbc.w	r5, r3, fp
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	00eb      	lsls	r3, r5, #3
 8005606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800560a:	00e2      	lsls	r2, r4, #3
 800560c:	4614      	mov	r4, r2
 800560e:	461d      	mov	r5, r3
 8005610:	4603      	mov	r3, r0
 8005612:	18e3      	adds	r3, r4, r3
 8005614:	603b      	str	r3, [r7, #0]
 8005616:	460b      	mov	r3, r1
 8005618:	eb45 0303 	adc.w	r3, r5, r3
 800561c:	607b      	str	r3, [r7, #4]
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	e9d7 4500 	ldrd	r4, r5, [r7]
 800562a:	4629      	mov	r1, r5
 800562c:	028b      	lsls	r3, r1, #10
 800562e:	4620      	mov	r0, r4
 8005630:	4629      	mov	r1, r5
 8005632:	4604      	mov	r4, r0
 8005634:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8005638:	4601      	mov	r1, r0
 800563a:	028a      	lsls	r2, r1, #10
 800563c:	4610      	mov	r0, r2
 800563e:	4619      	mov	r1, r3
 8005640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005642:	2200      	movs	r2, #0
 8005644:	61bb      	str	r3, [r7, #24]
 8005646:	61fa      	str	r2, [r7, #28]
 8005648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800564c:	f7fb fda6 	bl	800119c <__aeabi_uldivmod>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4613      	mov	r3, r2
 8005656:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <HAL_RCC_GetSysClockFreq+0x20c>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	0c1b      	lsrs	r3, r3, #16
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	3301      	adds	r3, #1
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005668:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800566a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005670:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005672:	e002      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <HAL_RCC_GetSysClockFreq+0x210>)
 8005676:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800567a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800567c:	4618      	mov	r0, r3
 800567e:	3750      	adds	r7, #80	; 0x50
 8005680:	46bd      	mov	sp, r7
 8005682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005686:	bf00      	nop
 8005688:	40023800 	.word	0x40023800
 800568c:	00f42400 	.word	0x00f42400
 8005690:	007a1200 	.word	0x007a1200

08005694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005698:	4b02      	ldr	r3, [pc, #8]	; (80056a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800569a:	681b      	ldr	r3, [r3, #0]
}
 800569c:	4618      	mov	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr
 80056a4:	20000024 	.word	0x20000024

080056a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e041      	b.n	800573e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7fd f880 	bl	80027d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3304      	adds	r3, #4
 80056e4:	4619      	mov	r1, r3
 80056e6:	4610      	mov	r0, r2
 80056e8:	f000 faba 	bl	8005c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	d001      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e04e      	b.n	80057fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0201 	orr.w	r2, r2, #1
 8005776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a22      	ldr	r2, [pc, #136]	; (8005808 <HAL_TIM_Base_Start_IT+0xc0>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d022      	beq.n	80057c8 <HAL_TIM_Base_Start_IT+0x80>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578a:	d01d      	beq.n	80057c8 <HAL_TIM_Base_Start_IT+0x80>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a1e      	ldr	r2, [pc, #120]	; (800580c <HAL_TIM_Base_Start_IT+0xc4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d018      	beq.n	80057c8 <HAL_TIM_Base_Start_IT+0x80>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1d      	ldr	r2, [pc, #116]	; (8005810 <HAL_TIM_Base_Start_IT+0xc8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d013      	beq.n	80057c8 <HAL_TIM_Base_Start_IT+0x80>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <HAL_TIM_Base_Start_IT+0xcc>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d00e      	beq.n	80057c8 <HAL_TIM_Base_Start_IT+0x80>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1a      	ldr	r2, [pc, #104]	; (8005818 <HAL_TIM_Base_Start_IT+0xd0>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d009      	beq.n	80057c8 <HAL_TIM_Base_Start_IT+0x80>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a18      	ldr	r2, [pc, #96]	; (800581c <HAL_TIM_Base_Start_IT+0xd4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d004      	beq.n	80057c8 <HAL_TIM_Base_Start_IT+0x80>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a17      	ldr	r2, [pc, #92]	; (8005820 <HAL_TIM_Base_Start_IT+0xd8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d111      	bne.n	80057ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b06      	cmp	r3, #6
 80057d8:	d010      	beq.n	80057fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 0201 	orr.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ea:	e007      	b.n	80057fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr
 8005808:	40010000 	.word	0x40010000
 800580c:	40000400 	.word	0x40000400
 8005810:	40000800 	.word	0x40000800
 8005814:	40000c00 	.word	0x40000c00
 8005818:	40010400 	.word	0x40010400
 800581c:	40014000 	.word	0x40014000
 8005820:	40001800 	.word	0x40001800

08005824 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0201 	bic.w	r2, r2, #1
 800583a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6a1a      	ldr	r2, [r3, #32]
 8005842:	f241 1311 	movw	r3, #4369	; 0x1111
 8005846:	4013      	ands	r3, r2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10f      	bne.n	800586c <HAL_TIM_Base_Stop_IT+0x48>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6a1a      	ldr	r2, [r3, #32]
 8005852:	f240 4344 	movw	r3, #1092	; 0x444
 8005856:	4013      	ands	r3, r2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d107      	bne.n	800586c <HAL_TIM_Base_Stop_IT+0x48>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0201 	bic.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr

08005880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b02      	cmp	r3, #2
 8005894:	d122      	bne.n	80058dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d11b      	bne.n	80058dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f06f 0202 	mvn.w	r2, #2
 80058ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	f003 0303 	and.w	r3, r3, #3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f9b1 	bl	8005c2a <HAL_TIM_IC_CaptureCallback>
 80058c8:	e005      	b.n	80058d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f9a4 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f9b3 	bl	8005c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d122      	bne.n	8005930 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d11b      	bne.n	8005930 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f06f 0204 	mvn.w	r2, #4
 8005900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2202      	movs	r2, #2
 8005906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f987 	bl	8005c2a <HAL_TIM_IC_CaptureCallback>
 800591c:	e005      	b.n	800592a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f97a 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f989 	bl	8005c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b08      	cmp	r3, #8
 800593c:	d122      	bne.n	8005984 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f003 0308 	and.w	r3, r3, #8
 8005948:	2b08      	cmp	r3, #8
 800594a:	d11b      	bne.n	8005984 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f06f 0208 	mvn.w	r2, #8
 8005954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2204      	movs	r2, #4
 800595a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f95d 	bl	8005c2a <HAL_TIM_IC_CaptureCallback>
 8005970:	e005      	b.n	800597e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f950 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f95f 	bl	8005c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f003 0310 	and.w	r3, r3, #16
 800598e:	2b10      	cmp	r3, #16
 8005990:	d122      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f003 0310 	and.w	r3, r3, #16
 800599c:	2b10      	cmp	r3, #16
 800599e:	d11b      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0210 	mvn.w	r2, #16
 80059a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2208      	movs	r2, #8
 80059ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f933 	bl	8005c2a <HAL_TIM_IC_CaptureCallback>
 80059c4:	e005      	b.n	80059d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f926 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f935 	bl	8005c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d10e      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d107      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f06f 0201 	mvn.w	r2, #1
 80059fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fc fc22 	bl	8002248 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0e:	2b80      	cmp	r3, #128	; 0x80
 8005a10:	d10e      	bne.n	8005a30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1c:	2b80      	cmp	r3, #128	; 0x80
 8005a1e:	d107      	bne.n	8005a30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 facf 	bl	8005fce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b40      	cmp	r3, #64	; 0x40
 8005a3c:	d10e      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b40      	cmp	r3, #64	; 0x40
 8005a4a:	d107      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f8f9 	bl	8005c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	d10e      	bne.n	8005a88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d107      	bne.n	8005a88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0220 	mvn.w	r2, #32
 8005a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fa9a 	bl	8005fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a88:	bf00      	nop
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_TIM_ConfigClockSource+0x18>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e0b3      	b.n	8005c10 <HAL_TIM_ConfigClockSource+0x180>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ac6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ace:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ae0:	d03e      	beq.n	8005b60 <HAL_TIM_ConfigClockSource+0xd0>
 8005ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ae6:	f200 8087 	bhi.w	8005bf8 <HAL_TIM_ConfigClockSource+0x168>
 8005aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aee:	f000 8085 	beq.w	8005bfc <HAL_TIM_ConfigClockSource+0x16c>
 8005af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af6:	d87f      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x168>
 8005af8:	2b70      	cmp	r3, #112	; 0x70
 8005afa:	d01a      	beq.n	8005b32 <HAL_TIM_ConfigClockSource+0xa2>
 8005afc:	2b70      	cmp	r3, #112	; 0x70
 8005afe:	d87b      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x168>
 8005b00:	2b60      	cmp	r3, #96	; 0x60
 8005b02:	d050      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0x116>
 8005b04:	2b60      	cmp	r3, #96	; 0x60
 8005b06:	d877      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x168>
 8005b08:	2b50      	cmp	r3, #80	; 0x50
 8005b0a:	d03c      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0xf6>
 8005b0c:	2b50      	cmp	r3, #80	; 0x50
 8005b0e:	d873      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x168>
 8005b10:	2b40      	cmp	r3, #64	; 0x40
 8005b12:	d058      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0x136>
 8005b14:	2b40      	cmp	r3, #64	; 0x40
 8005b16:	d86f      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x168>
 8005b18:	2b30      	cmp	r3, #48	; 0x30
 8005b1a:	d064      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x156>
 8005b1c:	2b30      	cmp	r3, #48	; 0x30
 8005b1e:	d86b      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x168>
 8005b20:	2b20      	cmp	r3, #32
 8005b22:	d060      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x156>
 8005b24:	2b20      	cmp	r3, #32
 8005b26:	d867      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x168>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d05c      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x156>
 8005b2c:	2b10      	cmp	r3, #16
 8005b2e:	d05a      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b30:	e062      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	6899      	ldr	r1, [r3, #8]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f000 f9a2 	bl	8005e8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b54:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	609a      	str	r2, [r3, #8]
      break;
 8005b5e:	e04e      	b.n	8005bfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6818      	ldr	r0, [r3, #0]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	6899      	ldr	r1, [r3, #8]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f000 f98b 	bl	8005e8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b82:	609a      	str	r2, [r3, #8]
      break;
 8005b84:	e03b      	b.n	8005bfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6818      	ldr	r0, [r3, #0]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	6859      	ldr	r1, [r3, #4]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	461a      	mov	r2, r3
 8005b94:	f000 f902 	bl	8005d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2150      	movs	r1, #80	; 0x50
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 f959 	bl	8005e56 <TIM_ITRx_SetConfig>
      break;
 8005ba4:	e02b      	b.n	8005bfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6818      	ldr	r0, [r3, #0]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	6859      	ldr	r1, [r3, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f000 f920 	bl	8005df8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2160      	movs	r1, #96	; 0x60
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 f949 	bl	8005e56 <TIM_ITRx_SetConfig>
      break;
 8005bc4:	e01b      	b.n	8005bfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6859      	ldr	r1, [r3, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f000 f8e2 	bl	8005d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2140      	movs	r1, #64	; 0x40
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 f939 	bl	8005e56 <TIM_ITRx_SetConfig>
      break;
 8005be4:	e00b      	b.n	8005bfe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	f000 f930 	bl	8005e56 <TIM_ITRx_SetConfig>
        break;
 8005bf6:	e002      	b.n	8005bfe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005bf8:	bf00      	nop
 8005bfa:	e000      	b.n	8005bfe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005bfc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr

08005c2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr

08005c3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr

08005c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr

08005c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a3f      	ldr	r2, [pc, #252]	; (8005d70 <TIM_Base_SetConfig+0x110>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d013      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7e:	d00f      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a3c      	ldr	r2, [pc, #240]	; (8005d74 <TIM_Base_SetConfig+0x114>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00b      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a3b      	ldr	r2, [pc, #236]	; (8005d78 <TIM_Base_SetConfig+0x118>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d007      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a3a      	ldr	r2, [pc, #232]	; (8005d7c <TIM_Base_SetConfig+0x11c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d003      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a39      	ldr	r2, [pc, #228]	; (8005d80 <TIM_Base_SetConfig+0x120>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d108      	bne.n	8005cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2e      	ldr	r2, [pc, #184]	; (8005d70 <TIM_Base_SetConfig+0x110>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d02b      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc0:	d027      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a2b      	ldr	r2, [pc, #172]	; (8005d74 <TIM_Base_SetConfig+0x114>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d023      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a2a      	ldr	r2, [pc, #168]	; (8005d78 <TIM_Base_SetConfig+0x118>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d01f      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a29      	ldr	r2, [pc, #164]	; (8005d7c <TIM_Base_SetConfig+0x11c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d01b      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a28      	ldr	r2, [pc, #160]	; (8005d80 <TIM_Base_SetConfig+0x120>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d017      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a27      	ldr	r2, [pc, #156]	; (8005d84 <TIM_Base_SetConfig+0x124>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d013      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a26      	ldr	r2, [pc, #152]	; (8005d88 <TIM_Base_SetConfig+0x128>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00f      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a25      	ldr	r2, [pc, #148]	; (8005d8c <TIM_Base_SetConfig+0x12c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00b      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a24      	ldr	r2, [pc, #144]	; (8005d90 <TIM_Base_SetConfig+0x130>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d007      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a23      	ldr	r2, [pc, #140]	; (8005d94 <TIM_Base_SetConfig+0x134>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d003      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a22      	ldr	r2, [pc, #136]	; (8005d98 <TIM_Base_SetConfig+0x138>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d108      	bne.n	8005d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a09      	ldr	r2, [pc, #36]	; (8005d70 <TIM_Base_SetConfig+0x110>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d003      	beq.n	8005d58 <TIM_Base_SetConfig+0xf8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a0b      	ldr	r2, [pc, #44]	; (8005d80 <TIM_Base_SetConfig+0x120>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d103      	bne.n	8005d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	615a      	str	r2, [r3, #20]
}
 8005d66:	bf00      	nop
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr
 8005d70:	40010000 	.word	0x40010000
 8005d74:	40000400 	.word	0x40000400
 8005d78:	40000800 	.word	0x40000800
 8005d7c:	40000c00 	.word	0x40000c00
 8005d80:	40010400 	.word	0x40010400
 8005d84:	40014000 	.word	0x40014000
 8005d88:	40014400 	.word	0x40014400
 8005d8c:	40014800 	.word	0x40014800
 8005d90:	40001800 	.word	0x40001800
 8005d94:	40001c00 	.word	0x40001c00
 8005d98:	40002000 	.word	0x40002000

08005d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	f023 0201 	bic.w	r2, r3, #1
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f023 030a 	bic.w	r3, r3, #10
 8005dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	621a      	str	r2, [r3, #32]
}
 8005dee:	bf00      	nop
 8005df0:	371c      	adds	r7, #28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr

08005df8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	f023 0210 	bic.w	r2, r3, #16
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	031b      	lsls	r3, r3, #12
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	011b      	lsls	r3, r3, #4
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	621a      	str	r2, [r3, #32]
}
 8005e4c:	bf00      	nop
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bc80      	pop	{r7}
 8005e54:	4770      	bx	lr

08005e56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b085      	sub	sp, #20
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	f043 0307 	orr.w	r3, r3, #7
 8005e78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	609a      	str	r2, [r3, #8]
}
 8005e80:	bf00      	nop
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc80      	pop	{r7}
 8005e88:	4770      	bx	lr

08005e8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b087      	sub	sp, #28
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	607a      	str	r2, [r7, #4]
 8005e96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	021a      	lsls	r2, r3, #8
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	431a      	orrs	r2, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	609a      	str	r2, [r3, #8]
}
 8005ebe:	bf00      	nop
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bc80      	pop	{r7}
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e05a      	b.n	8005f96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a20      	ldr	r2, [pc, #128]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d022      	beq.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f2c:	d01d      	beq.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a1c      	ldr	r2, [pc, #112]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d018      	beq.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a1a      	ldr	r2, [pc, #104]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d013      	beq.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a19      	ldr	r2, [pc, #100]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d00e      	beq.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a17      	ldr	r2, [pc, #92]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d009      	beq.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a16      	ldr	r2, [pc, #88]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d004      	beq.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a14      	ldr	r2, [pc, #80]	; (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d10c      	bne.n	8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bc80      	pop	{r7}
 8005f9e:	4770      	bx	lr
 8005fa0:	40010000 	.word	0x40010000
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40000800 	.word	0x40000800
 8005fac:	40000c00 	.word	0x40000c00
 8005fb0:	40010400 	.word	0x40010400
 8005fb4:	40014000 	.word	0x40014000
 8005fb8:	40001800 	.word	0x40001800

08005fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bc80      	pop	{r7}
 8005fcc:	4770      	bx	lr

08005fce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bc80      	pop	{r7}
 8005fde:	4770      	bx	lr

08005fe0 <udp_receive_callback>:
  * @param	*addr pointer to IP address UDP datagram source
  * @param	*addr pointer to port UDP datagram source
  * @retval	none
  */
void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port) {
 8005fe0:	b5b0      	push	{r4, r5, r7, lr}
 8005fe2:	f5ad 6dff 	sub.w	sp, sp, #2040	; 0x7f8
 8005fe6:	af02      	add	r7, sp, #8
 8005fe8:	f507 64fe 	add.w	r4, r7, #2032	; 0x7f0
 8005fec:	f2a4 74e4 	subw	r4, r4, #2020	; 0x7e4
 8005ff0:	6020      	str	r0, [r4, #0]
 8005ff2:	f507 60fe 	add.w	r0, r7, #2032	; 0x7f0
 8005ff6:	f5a0 60fd 	sub.w	r0, r0, #2024	; 0x7e8
 8005ffa:	6001      	str	r1, [r0, #0]
 8005ffc:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 8006000:	f2a1 71ec 	subw	r1, r1, #2028	; 0x7ec
 8006004:	600a      	str	r2, [r1, #0]
 8006006:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800600a:	f5a2 62fe 	sub.w	r2, r2, #2032	; 0x7f0
 800600e:	6013      	str	r3, [r2, #0]

	struct pbuf *txBuf;
	err_t errorUDP = ERR_OK;
 8006010:	2300      	movs	r3, #0
 8006012:	f887 37ef 	strb.w	r3, [r7, #2031]	; 0x7ef
//	HAL_NVIC_DisableIRQ(TIM3_IRQn);

	/* Get the IP of the Client */
	//char *remoteIP = ipaddr_ntoa(addr);
	char bufOut[2000];
	uint16_t lenOut = sizeof(bufOut);
 8006016:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800601a:	f2a3 73da 	subw	r3, r3, #2010	; 0x7da
 800601e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006022:	801a      	strh	r2, [r3, #0]

	WG.ProcessData(p->payload, p->len, bufOut, &lenOut, arg);
 8006024:	4b3b      	ldr	r3, [pc, #236]	; (8006114 <udp_receive_callback+0x134>)
 8006026:	681c      	ldr	r4, [r3, #0]
 8006028:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800602c:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6858      	ldr	r0, [r3, #4]
 8006034:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8006038:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	8959      	ldrh	r1, [r3, #10]
 8006040:	f107 0516 	add.w	r5, r7, #22
 8006044:	f107 0218 	add.w	r2, r7, #24
 8006048:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800604c:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	462b      	mov	r3, r5
 8006056:	47a0      	blx	r4

	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT, lenOut, PBUF_RAM);
 8006058:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800605c:	f2a3 73da 	subw	r3, r3, #2010	; 0x7da
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	2200      	movs	r2, #0
 8006064:	4619      	mov	r1, r3
 8006066:	2000      	movs	r0, #0
 8006068:	f001 fc08 	bl	800787c <pbuf_alloc>
 800606c:	f8c7 07e8 	str.w	r0, [r7, #2024]	; 0x7e8

	/* copy the data into the buffer  */
	pbuf_take(txBuf, bufOut, lenOut);
 8006070:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8006074:	f2a3 73da 	subw	r3, r3, #2010	; 0x7da
 8006078:	881a      	ldrh	r2, [r3, #0]
 800607a:	f107 0318 	add.w	r3, r7, #24
 800607e:	4619      	mov	r1, r3
 8006080:	f8d7 07e8 	ldr.w	r0, [r7, #2024]	; 0x7e8
 8006084:	f002 f9ea 	bl	800845c <pbuf_take>

	/* Save the info of pc conection */
	ip_addr_set_ipaddr(&remIpAddr, addr);
 8006088:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800608c:	f5a3 63fe 	sub.w	r3, r3, #2032	; 0x7f0
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d006      	beq.n	80060a4 <udp_receive_callback+0xc4>
 8006096:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800609a:	f5a3 63fe 	sub.w	r3, r3, #2032	; 0x7f0
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	e000      	b.n	80060a6 <udp_receive_callback+0xc6>
 80060a4:	2300      	movs	r3, #0
 80060a6:	4a1c      	ldr	r2, [pc, #112]	; (8006118 <udp_receive_callback+0x138>)
 80060a8:	6013      	str	r3, [r2, #0]

	/* Connect to the remote client */
	errorUDP = udp_connect(upcb, addr, port);
 80060aa:	f8b7 2800 	ldrh.w	r2, [r7, #2048]	; 0x800
 80060ae:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80060b2:	f5a3 61fe 	sub.w	r1, r3, #2032	; 0x7f0
 80060b6:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80060ba:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 80060be:	6809      	ldr	r1, [r1, #0]
 80060c0:	6818      	ldr	r0, [r3, #0]
 80060c2:	f007 fb13 	bl	800d6ec <udp_connect>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f887 37ef 	strb.w	r3, [r7, #2031]	; 0x7ef

	/* Send a Reply to the Client */
	errorUDP = udp_send(upcb, txBuf);
 80060cc:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80060d0:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 80060d4:	f8d7 17e8 	ldr.w	r1, [r7, #2024]	; 0x7e8
 80060d8:	6818      	ldr	r0, [r3, #0]
 80060da:	f007 f969 	bl	800d3b0 <udp_send>
 80060de:	4603      	mov	r3, r0
 80060e0:	f887 37ef 	strb.w	r3, [r7, #2031]	; 0x7ef

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb);
 80060e4:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80060e8:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	f007 fb53 	bl	800d798 <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 80060f2:	f8d7 07e8 	ldr.w	r0, [r7, #2024]	; 0x7e8
 80060f6:	f001 ff39 	bl	8007f6c <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p);
 80060fa:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80060fe:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 8006102:	6818      	ldr	r0, [r3, #0]
 8006104:	f001 ff32 	bl	8007f6c <pbuf_free>

//	HAL_NVIC_EnableIRQ(TIM3_IRQn);

}
 8006108:	bf00      	nop
 800610a:	f507 67fe 	add.w	r7, r7, #2032	; 0x7f0
 800610e:	46bd      	mov	sp, r7
 8006110:	bdb0      	pop	{r4, r5, r7, pc}
 8006112:	bf00      	nop
 8006114:	20000000 	.word	0x20000000
 8006118:	200016b4 	.word	0x200016b4

0800611c <udpServer_init>:

void udpServer_init(void *rec_arg) {
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
	// UDP Control Block structure
	//struct udp_pcb *upcb;
	err_t err;

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8006124:	f007 fb92 	bl	800d84c <udp_new>
 8006128:	4603      	mov	r3, r0
 800612a:	4a32      	ldr	r2, [pc, #200]	; (80061f4 <udpServer_init+0xd8>)
 800612c:	6013      	str	r3, [r2, #0]

	/* 2. Bind the upcb to the local port */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2],
 800612e:	4b32      	ldr	r3, [pc, #200]	; (80061f8 <udpServer_init+0xdc>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	061a      	lsls	r2, r3, #24
 8006134:	4b30      	ldr	r3, [pc, #192]	; (80061f8 <udpServer_init+0xdc>)
 8006136:	785b      	ldrb	r3, [r3, #1]
 8006138:	041b      	lsls	r3, r3, #16
 800613a:	431a      	orrs	r2, r3
 800613c:	4b2e      	ldr	r3, [pc, #184]	; (80061f8 <udpServer_init+0xdc>)
 800613e:	789b      	ldrb	r3, [r3, #2]
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	4313      	orrs	r3, r2
 8006144:	4a2c      	ldr	r2, [pc, #176]	; (80061f8 <udpServer_init+0xdc>)
 8006146:	78d2      	ldrb	r2, [r2, #3]
 8006148:	4313      	orrs	r3, r2
 800614a:	061a      	lsls	r2, r3, #24
 800614c:	4b2a      	ldr	r3, [pc, #168]	; (80061f8 <udpServer_init+0xdc>)
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	0619      	lsls	r1, r3, #24
 8006152:	4b29      	ldr	r3, [pc, #164]	; (80061f8 <udpServer_init+0xdc>)
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	041b      	lsls	r3, r3, #16
 8006158:	4319      	orrs	r1, r3
 800615a:	4b27      	ldr	r3, [pc, #156]	; (80061f8 <udpServer_init+0xdc>)
 800615c:	789b      	ldrb	r3, [r3, #2]
 800615e:	021b      	lsls	r3, r3, #8
 8006160:	430b      	orrs	r3, r1
 8006162:	4925      	ldr	r1, [pc, #148]	; (80061f8 <udpServer_init+0xdc>)
 8006164:	78c9      	ldrb	r1, [r1, #3]
 8006166:	430b      	orrs	r3, r1
 8006168:	021b      	lsls	r3, r3, #8
 800616a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800616e:	431a      	orrs	r2, r3
 8006170:	4b21      	ldr	r3, [pc, #132]	; (80061f8 <udpServer_init+0xdc>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	0619      	lsls	r1, r3, #24
 8006176:	4b20      	ldr	r3, [pc, #128]	; (80061f8 <udpServer_init+0xdc>)
 8006178:	785b      	ldrb	r3, [r3, #1]
 800617a:	041b      	lsls	r3, r3, #16
 800617c:	4319      	orrs	r1, r3
 800617e:	4b1e      	ldr	r3, [pc, #120]	; (80061f8 <udpServer_init+0xdc>)
 8006180:	789b      	ldrb	r3, [r3, #2]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	430b      	orrs	r3, r1
 8006186:	491c      	ldr	r1, [pc, #112]	; (80061f8 <udpServer_init+0xdc>)
 8006188:	78c9      	ldrb	r1, [r1, #3]
 800618a:	430b      	orrs	r3, r1
 800618c:	0a1b      	lsrs	r3, r3, #8
 800618e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006192:	431a      	orrs	r2, r3
 8006194:	4b18      	ldr	r3, [pc, #96]	; (80061f8 <udpServer_init+0xdc>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	0619      	lsls	r1, r3, #24
 800619a:	4b17      	ldr	r3, [pc, #92]	; (80061f8 <udpServer_init+0xdc>)
 800619c:	785b      	ldrb	r3, [r3, #1]
 800619e:	041b      	lsls	r3, r3, #16
 80061a0:	4319      	orrs	r1, r3
 80061a2:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <udpServer_init+0xdc>)
 80061a4:	789b      	ldrb	r3, [r3, #2]
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	430b      	orrs	r3, r1
 80061aa:	4913      	ldr	r1, [pc, #76]	; (80061f8 <udpServer_init+0xdc>)
 80061ac:	78c9      	ldrb	r1, [r1, #3]
 80061ae:	430b      	orrs	r3, r1
 80061b0:	0e1b      	lsrs	r3, r3, #24
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60bb      	str	r3, [r7, #8]
			IP_ADDRESS[3]);

	err = udp_bind(upcb, &myIPADDR, 7);  // 7 is the server UDP port
 80061b6:	4b0f      	ldr	r3, [pc, #60]	; (80061f4 <udpServer_init+0xd8>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f107 0108 	add.w	r1, r7, #8
 80061be:	2207      	movs	r2, #7
 80061c0:	4618      	mov	r0, r3
 80061c2:	f007 fa23 	bl	800d60c <udp_bind>
 80061c6:	4603      	mov	r3, r0
 80061c8:	73fb      	strb	r3, [r7, #15]

	/* 3. Set a receive callback for the upcb */
	if (err == ERR_OK) {
 80061ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d107      	bne.n	80061e2 <udpServer_init+0xc6>
		udp_recv(upcb, udp_receive_callback, rec_arg);
 80061d2:	4b08      	ldr	r3, [pc, #32]	; (80061f4 <udpServer_init+0xd8>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	4908      	ldr	r1, [pc, #32]	; (80061fc <udpServer_init+0xe0>)
 80061da:	4618      	mov	r0, r3
 80061dc:	f007 faf2 	bl	800d7c4 <udp_recv>
	} else {
		udp_remove(upcb);
	}
}
 80061e0:	e004      	b.n	80061ec <udpServer_init+0xd0>
		udp_remove(upcb);
 80061e2:	4b04      	ldr	r3, [pc, #16]	; (80061f4 <udpServer_init+0xd8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f007 fafe 	bl	800d7e8 <udp_remove>
}
 80061ec:	bf00      	nop
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	200016b0 	.word	0x200016b0
 80061f8:	200016f8 	.word	0x200016f8
 80061fc:	08005fe1 	.word	0x08005fe1

08006200 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 16;
 8006206:	4b8d      	ldr	r3, [pc, #564]	; (800643c <MX_LWIP_Init+0x23c>)
 8006208:	2210      	movs	r2, #16
 800620a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800620c:	4b8b      	ldr	r3, [pc, #556]	; (800643c <MX_LWIP_Init+0x23c>)
 800620e:	2200      	movs	r2, #0
 8006210:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8006212:	4b8a      	ldr	r3, [pc, #552]	; (800643c <MX_LWIP_Init+0x23c>)
 8006214:	2200      	movs	r2, #0
 8006216:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 16;
 8006218:	4b88      	ldr	r3, [pc, #544]	; (800643c <MX_LWIP_Init+0x23c>)
 800621a:	2210      	movs	r2, #16
 800621c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800621e:	4b88      	ldr	r3, [pc, #544]	; (8006440 <MX_LWIP_Init+0x240>)
 8006220:	22ff      	movs	r2, #255	; 0xff
 8006222:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006224:	4b86      	ldr	r3, [pc, #536]	; (8006440 <MX_LWIP_Init+0x240>)
 8006226:	22ff      	movs	r2, #255	; 0xff
 8006228:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800622a:	4b85      	ldr	r3, [pc, #532]	; (8006440 <MX_LWIP_Init+0x240>)
 800622c:	22ff      	movs	r2, #255	; 0xff
 800622e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006230:	4b83      	ldr	r3, [pc, #524]	; (8006440 <MX_LWIP_Init+0x240>)
 8006232:	2200      	movs	r2, #0
 8006234:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 16;
 8006236:	4b83      	ldr	r3, [pc, #524]	; (8006444 <MX_LWIP_Init+0x244>)
 8006238:	2210      	movs	r2, #16
 800623a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800623c:	4b81      	ldr	r3, [pc, #516]	; (8006444 <MX_LWIP_Init+0x244>)
 800623e:	2200      	movs	r2, #0
 8006240:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8006242:	4b80      	ldr	r3, [pc, #512]	; (8006444 <MX_LWIP_Init+0x244>)
 8006244:	2200      	movs	r2, #0
 8006246:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006248:	4b7e      	ldr	r3, [pc, #504]	; (8006444 <MX_LWIP_Init+0x244>)
 800624a:	2201      	movs	r2, #1
 800624c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800624e:	f000 fce1 	bl	8006c14 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006252:	4b7a      	ldr	r3, [pc, #488]	; (800643c <MX_LWIP_Init+0x23c>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	061a      	lsls	r2, r3, #24
 8006258:	4b78      	ldr	r3, [pc, #480]	; (800643c <MX_LWIP_Init+0x23c>)
 800625a:	785b      	ldrb	r3, [r3, #1]
 800625c:	041b      	lsls	r3, r3, #16
 800625e:	431a      	orrs	r2, r3
 8006260:	4b76      	ldr	r3, [pc, #472]	; (800643c <MX_LWIP_Init+0x23c>)
 8006262:	789b      	ldrb	r3, [r3, #2]
 8006264:	021b      	lsls	r3, r3, #8
 8006266:	4313      	orrs	r3, r2
 8006268:	4a74      	ldr	r2, [pc, #464]	; (800643c <MX_LWIP_Init+0x23c>)
 800626a:	78d2      	ldrb	r2, [r2, #3]
 800626c:	4313      	orrs	r3, r2
 800626e:	061a      	lsls	r2, r3, #24
 8006270:	4b72      	ldr	r3, [pc, #456]	; (800643c <MX_LWIP_Init+0x23c>)
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	0619      	lsls	r1, r3, #24
 8006276:	4b71      	ldr	r3, [pc, #452]	; (800643c <MX_LWIP_Init+0x23c>)
 8006278:	785b      	ldrb	r3, [r3, #1]
 800627a:	041b      	lsls	r3, r3, #16
 800627c:	4319      	orrs	r1, r3
 800627e:	4b6f      	ldr	r3, [pc, #444]	; (800643c <MX_LWIP_Init+0x23c>)
 8006280:	789b      	ldrb	r3, [r3, #2]
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	430b      	orrs	r3, r1
 8006286:	496d      	ldr	r1, [pc, #436]	; (800643c <MX_LWIP_Init+0x23c>)
 8006288:	78c9      	ldrb	r1, [r1, #3]
 800628a:	430b      	orrs	r3, r1
 800628c:	021b      	lsls	r3, r3, #8
 800628e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006292:	431a      	orrs	r2, r3
 8006294:	4b69      	ldr	r3, [pc, #420]	; (800643c <MX_LWIP_Init+0x23c>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	0619      	lsls	r1, r3, #24
 800629a:	4b68      	ldr	r3, [pc, #416]	; (800643c <MX_LWIP_Init+0x23c>)
 800629c:	785b      	ldrb	r3, [r3, #1]
 800629e:	041b      	lsls	r3, r3, #16
 80062a0:	4319      	orrs	r1, r3
 80062a2:	4b66      	ldr	r3, [pc, #408]	; (800643c <MX_LWIP_Init+0x23c>)
 80062a4:	789b      	ldrb	r3, [r3, #2]
 80062a6:	021b      	lsls	r3, r3, #8
 80062a8:	430b      	orrs	r3, r1
 80062aa:	4964      	ldr	r1, [pc, #400]	; (800643c <MX_LWIP_Init+0x23c>)
 80062ac:	78c9      	ldrb	r1, [r1, #3]
 80062ae:	430b      	orrs	r3, r1
 80062b0:	0a1b      	lsrs	r3, r3, #8
 80062b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80062b6:	431a      	orrs	r2, r3
 80062b8:	4b60      	ldr	r3, [pc, #384]	; (800643c <MX_LWIP_Init+0x23c>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	0619      	lsls	r1, r3, #24
 80062be:	4b5f      	ldr	r3, [pc, #380]	; (800643c <MX_LWIP_Init+0x23c>)
 80062c0:	785b      	ldrb	r3, [r3, #1]
 80062c2:	041b      	lsls	r3, r3, #16
 80062c4:	4319      	orrs	r1, r3
 80062c6:	4b5d      	ldr	r3, [pc, #372]	; (800643c <MX_LWIP_Init+0x23c>)
 80062c8:	789b      	ldrb	r3, [r3, #2]
 80062ca:	021b      	lsls	r3, r3, #8
 80062cc:	430b      	orrs	r3, r1
 80062ce:	495b      	ldr	r1, [pc, #364]	; (800643c <MX_LWIP_Init+0x23c>)
 80062d0:	78c9      	ldrb	r1, [r1, #3]
 80062d2:	430b      	orrs	r3, r1
 80062d4:	0e1b      	lsrs	r3, r3, #24
 80062d6:	4313      	orrs	r3, r2
 80062d8:	4a5b      	ldr	r2, [pc, #364]	; (8006448 <MX_LWIP_Init+0x248>)
 80062da:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80062dc:	4b58      	ldr	r3, [pc, #352]	; (8006440 <MX_LWIP_Init+0x240>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	061a      	lsls	r2, r3, #24
 80062e2:	4b57      	ldr	r3, [pc, #348]	; (8006440 <MX_LWIP_Init+0x240>)
 80062e4:	785b      	ldrb	r3, [r3, #1]
 80062e6:	041b      	lsls	r3, r3, #16
 80062e8:	431a      	orrs	r2, r3
 80062ea:	4b55      	ldr	r3, [pc, #340]	; (8006440 <MX_LWIP_Init+0x240>)
 80062ec:	789b      	ldrb	r3, [r3, #2]
 80062ee:	021b      	lsls	r3, r3, #8
 80062f0:	4313      	orrs	r3, r2
 80062f2:	4a53      	ldr	r2, [pc, #332]	; (8006440 <MX_LWIP_Init+0x240>)
 80062f4:	78d2      	ldrb	r2, [r2, #3]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	061a      	lsls	r2, r3, #24
 80062fa:	4b51      	ldr	r3, [pc, #324]	; (8006440 <MX_LWIP_Init+0x240>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	0619      	lsls	r1, r3, #24
 8006300:	4b4f      	ldr	r3, [pc, #316]	; (8006440 <MX_LWIP_Init+0x240>)
 8006302:	785b      	ldrb	r3, [r3, #1]
 8006304:	041b      	lsls	r3, r3, #16
 8006306:	4319      	orrs	r1, r3
 8006308:	4b4d      	ldr	r3, [pc, #308]	; (8006440 <MX_LWIP_Init+0x240>)
 800630a:	789b      	ldrb	r3, [r3, #2]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	430b      	orrs	r3, r1
 8006310:	494b      	ldr	r1, [pc, #300]	; (8006440 <MX_LWIP_Init+0x240>)
 8006312:	78c9      	ldrb	r1, [r1, #3]
 8006314:	430b      	orrs	r3, r1
 8006316:	021b      	lsls	r3, r3, #8
 8006318:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800631c:	431a      	orrs	r2, r3
 800631e:	4b48      	ldr	r3, [pc, #288]	; (8006440 <MX_LWIP_Init+0x240>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	0619      	lsls	r1, r3, #24
 8006324:	4b46      	ldr	r3, [pc, #280]	; (8006440 <MX_LWIP_Init+0x240>)
 8006326:	785b      	ldrb	r3, [r3, #1]
 8006328:	041b      	lsls	r3, r3, #16
 800632a:	4319      	orrs	r1, r3
 800632c:	4b44      	ldr	r3, [pc, #272]	; (8006440 <MX_LWIP_Init+0x240>)
 800632e:	789b      	ldrb	r3, [r3, #2]
 8006330:	021b      	lsls	r3, r3, #8
 8006332:	430b      	orrs	r3, r1
 8006334:	4942      	ldr	r1, [pc, #264]	; (8006440 <MX_LWIP_Init+0x240>)
 8006336:	78c9      	ldrb	r1, [r1, #3]
 8006338:	430b      	orrs	r3, r1
 800633a:	0a1b      	lsrs	r3, r3, #8
 800633c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006340:	431a      	orrs	r2, r3
 8006342:	4b3f      	ldr	r3, [pc, #252]	; (8006440 <MX_LWIP_Init+0x240>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	0619      	lsls	r1, r3, #24
 8006348:	4b3d      	ldr	r3, [pc, #244]	; (8006440 <MX_LWIP_Init+0x240>)
 800634a:	785b      	ldrb	r3, [r3, #1]
 800634c:	041b      	lsls	r3, r3, #16
 800634e:	4319      	orrs	r1, r3
 8006350:	4b3b      	ldr	r3, [pc, #236]	; (8006440 <MX_LWIP_Init+0x240>)
 8006352:	789b      	ldrb	r3, [r3, #2]
 8006354:	021b      	lsls	r3, r3, #8
 8006356:	430b      	orrs	r3, r1
 8006358:	4939      	ldr	r1, [pc, #228]	; (8006440 <MX_LWIP_Init+0x240>)
 800635a:	78c9      	ldrb	r1, [r1, #3]
 800635c:	430b      	orrs	r3, r1
 800635e:	0e1b      	lsrs	r3, r3, #24
 8006360:	4313      	orrs	r3, r2
 8006362:	4a3a      	ldr	r2, [pc, #232]	; (800644c <MX_LWIP_Init+0x24c>)
 8006364:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006366:	4b37      	ldr	r3, [pc, #220]	; (8006444 <MX_LWIP_Init+0x244>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	061a      	lsls	r2, r3, #24
 800636c:	4b35      	ldr	r3, [pc, #212]	; (8006444 <MX_LWIP_Init+0x244>)
 800636e:	785b      	ldrb	r3, [r3, #1]
 8006370:	041b      	lsls	r3, r3, #16
 8006372:	431a      	orrs	r2, r3
 8006374:	4b33      	ldr	r3, [pc, #204]	; (8006444 <MX_LWIP_Init+0x244>)
 8006376:	789b      	ldrb	r3, [r3, #2]
 8006378:	021b      	lsls	r3, r3, #8
 800637a:	4313      	orrs	r3, r2
 800637c:	4a31      	ldr	r2, [pc, #196]	; (8006444 <MX_LWIP_Init+0x244>)
 800637e:	78d2      	ldrb	r2, [r2, #3]
 8006380:	4313      	orrs	r3, r2
 8006382:	061a      	lsls	r2, r3, #24
 8006384:	4b2f      	ldr	r3, [pc, #188]	; (8006444 <MX_LWIP_Init+0x244>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	0619      	lsls	r1, r3, #24
 800638a:	4b2e      	ldr	r3, [pc, #184]	; (8006444 <MX_LWIP_Init+0x244>)
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	041b      	lsls	r3, r3, #16
 8006390:	4319      	orrs	r1, r3
 8006392:	4b2c      	ldr	r3, [pc, #176]	; (8006444 <MX_LWIP_Init+0x244>)
 8006394:	789b      	ldrb	r3, [r3, #2]
 8006396:	021b      	lsls	r3, r3, #8
 8006398:	430b      	orrs	r3, r1
 800639a:	492a      	ldr	r1, [pc, #168]	; (8006444 <MX_LWIP_Init+0x244>)
 800639c:	78c9      	ldrb	r1, [r1, #3]
 800639e:	430b      	orrs	r3, r1
 80063a0:	021b      	lsls	r3, r3, #8
 80063a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063a6:	431a      	orrs	r2, r3
 80063a8:	4b26      	ldr	r3, [pc, #152]	; (8006444 <MX_LWIP_Init+0x244>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	0619      	lsls	r1, r3, #24
 80063ae:	4b25      	ldr	r3, [pc, #148]	; (8006444 <MX_LWIP_Init+0x244>)
 80063b0:	785b      	ldrb	r3, [r3, #1]
 80063b2:	041b      	lsls	r3, r3, #16
 80063b4:	4319      	orrs	r1, r3
 80063b6:	4b23      	ldr	r3, [pc, #140]	; (8006444 <MX_LWIP_Init+0x244>)
 80063b8:	789b      	ldrb	r3, [r3, #2]
 80063ba:	021b      	lsls	r3, r3, #8
 80063bc:	430b      	orrs	r3, r1
 80063be:	4921      	ldr	r1, [pc, #132]	; (8006444 <MX_LWIP_Init+0x244>)
 80063c0:	78c9      	ldrb	r1, [r1, #3]
 80063c2:	430b      	orrs	r3, r1
 80063c4:	0a1b      	lsrs	r3, r3, #8
 80063c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80063ca:	431a      	orrs	r2, r3
 80063cc:	4b1d      	ldr	r3, [pc, #116]	; (8006444 <MX_LWIP_Init+0x244>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	0619      	lsls	r1, r3, #24
 80063d2:	4b1c      	ldr	r3, [pc, #112]	; (8006444 <MX_LWIP_Init+0x244>)
 80063d4:	785b      	ldrb	r3, [r3, #1]
 80063d6:	041b      	lsls	r3, r3, #16
 80063d8:	4319      	orrs	r1, r3
 80063da:	4b1a      	ldr	r3, [pc, #104]	; (8006444 <MX_LWIP_Init+0x244>)
 80063dc:	789b      	ldrb	r3, [r3, #2]
 80063de:	021b      	lsls	r3, r3, #8
 80063e0:	430b      	orrs	r3, r1
 80063e2:	4918      	ldr	r1, [pc, #96]	; (8006444 <MX_LWIP_Init+0x244>)
 80063e4:	78c9      	ldrb	r1, [r1, #3]
 80063e6:	430b      	orrs	r3, r1
 80063e8:	0e1b      	lsrs	r3, r3, #24
 80063ea:	4313      	orrs	r3, r2
 80063ec:	4a18      	ldr	r2, [pc, #96]	; (8006450 <MX_LWIP_Init+0x250>)
 80063ee:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80063f0:	4b18      	ldr	r3, [pc, #96]	; (8006454 <MX_LWIP_Init+0x254>)
 80063f2:	9302      	str	r3, [sp, #8]
 80063f4:	4b18      	ldr	r3, [pc, #96]	; (8006458 <MX_LWIP_Init+0x258>)
 80063f6:	9301      	str	r3, [sp, #4]
 80063f8:	2300      	movs	r3, #0
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	4b14      	ldr	r3, [pc, #80]	; (8006450 <MX_LWIP_Init+0x250>)
 80063fe:	4a13      	ldr	r2, [pc, #76]	; (800644c <MX_LWIP_Init+0x24c>)
 8006400:	4911      	ldr	r1, [pc, #68]	; (8006448 <MX_LWIP_Init+0x248>)
 8006402:	4816      	ldr	r0, [pc, #88]	; (800645c <MX_LWIP_Init+0x25c>)
 8006404:	f001 f8a4 	bl	8007550 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006408:	4814      	ldr	r0, [pc, #80]	; (800645c <MX_LWIP_Init+0x25c>)
 800640a:	f001 f983 	bl	8007714 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800640e:	4b13      	ldr	r3, [pc, #76]	; (800645c <MX_LWIP_Init+0x25c>)
 8006410:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006414:	089b      	lsrs	r3, r3, #2
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006420:	480e      	ldr	r0, [pc, #56]	; (800645c <MX_LWIP_Init+0x25c>)
 8006422:	f001 f985 	bl	8007730 <netif_set_up>
 8006426:	e002      	b.n	800642e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006428:	480c      	ldr	r0, [pc, #48]	; (800645c <MX_LWIP_Init+0x25c>)
 800642a:	f001 f9c5 	bl	80077b8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800642e:	490c      	ldr	r1, [pc, #48]	; (8006460 <MX_LWIP_Init+0x260>)
 8006430:	480a      	ldr	r0, [pc, #40]	; (800645c <MX_LWIP_Init+0x25c>)
 8006432:	f001 f9e3 	bl	80077fc <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006436:	bf00      	nop
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	200016f8 	.word	0x200016f8
 8006440:	200016fc 	.word	0x200016fc
 8006444:	20001700 	.word	0x20001700
 8006448:	200016ec 	.word	0x200016ec
 800644c:	200016f0 	.word	0x200016f0
 8006450:	200016f4 	.word	0x200016f4
 8006454:	0800fd71 	.word	0x0800fd71
 8006458:	08006a55 	.word	0x08006a55
 800645c:	200016b8 	.word	0x200016b8
 8006460:	08006ac1 	.word	0x08006ac1

08006464 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8006468:	4803      	ldr	r0, [pc, #12]	; (8006478 <MX_LWIP_Process+0x14>)
 800646a:	f000 fad3 	bl	8006a14 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800646e:	f006 fdb5 	bl	800cfdc <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8006472:	bf00      	nop
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	200016b8 	.word	0x200016b8

0800647c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08e      	sub	sp, #56	; 0x38
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	605a      	str	r2, [r3, #4]
 800648e:	609a      	str	r2, [r3, #8]
 8006490:	60da      	str	r2, [r3, #12]
 8006492:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a59      	ldr	r2, [pc, #356]	; (8006600 <HAL_ETH_MspInit+0x184>)
 800649a:	4293      	cmp	r3, r2
 800649c:	f040 80ac 	bne.w	80065f8 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80064a0:	2300      	movs	r3, #0
 80064a2:	623b      	str	r3, [r7, #32]
 80064a4:	4b57      	ldr	r3, [pc, #348]	; (8006604 <HAL_ETH_MspInit+0x188>)
 80064a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a8:	4a56      	ldr	r2, [pc, #344]	; (8006604 <HAL_ETH_MspInit+0x188>)
 80064aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80064ae:	6313      	str	r3, [r2, #48]	; 0x30
 80064b0:	4b54      	ldr	r3, [pc, #336]	; (8006604 <HAL_ETH_MspInit+0x188>)
 80064b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b8:	623b      	str	r3, [r7, #32]
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	2300      	movs	r3, #0
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	4b50      	ldr	r3, [pc, #320]	; (8006604 <HAL_ETH_MspInit+0x188>)
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	4a4f      	ldr	r2, [pc, #316]	; (8006604 <HAL_ETH_MspInit+0x188>)
 80064c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064ca:	6313      	str	r3, [r2, #48]	; 0x30
 80064cc:	4b4d      	ldr	r3, [pc, #308]	; (8006604 <HAL_ETH_MspInit+0x188>)
 80064ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064d4:	61fb      	str	r3, [r7, #28]
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	2300      	movs	r3, #0
 80064da:	61bb      	str	r3, [r7, #24]
 80064dc:	4b49      	ldr	r3, [pc, #292]	; (8006604 <HAL_ETH_MspInit+0x188>)
 80064de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e0:	4a48      	ldr	r2, [pc, #288]	; (8006604 <HAL_ETH_MspInit+0x188>)
 80064e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064e6:	6313      	str	r3, [r2, #48]	; 0x30
 80064e8:	4b46      	ldr	r3, [pc, #280]	; (8006604 <HAL_ETH_MspInit+0x188>)
 80064ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064f0:	61bb      	str	r3, [r7, #24]
 80064f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064f4:	2300      	movs	r3, #0
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	4b42      	ldr	r3, [pc, #264]	; (8006604 <HAL_ETH_MspInit+0x188>)
 80064fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fc:	4a41      	ldr	r2, [pc, #260]	; (8006604 <HAL_ETH_MspInit+0x188>)
 80064fe:	f043 0304 	orr.w	r3, r3, #4
 8006502:	6313      	str	r3, [r2, #48]	; 0x30
 8006504:	4b3f      	ldr	r3, [pc, #252]	; (8006604 <HAL_ETH_MspInit+0x188>)
 8006506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006510:	2300      	movs	r3, #0
 8006512:	613b      	str	r3, [r7, #16]
 8006514:	4b3b      	ldr	r3, [pc, #236]	; (8006604 <HAL_ETH_MspInit+0x188>)
 8006516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006518:	4a3a      	ldr	r2, [pc, #232]	; (8006604 <HAL_ETH_MspInit+0x188>)
 800651a:	f043 0301 	orr.w	r3, r3, #1
 800651e:	6313      	str	r3, [r2, #48]	; 0x30
 8006520:	4b38      	ldr	r3, [pc, #224]	; (8006604 <HAL_ETH_MspInit+0x188>)
 8006522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	613b      	str	r3, [r7, #16]
 800652a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800652c:	2300      	movs	r3, #0
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	4b34      	ldr	r3, [pc, #208]	; (8006604 <HAL_ETH_MspInit+0x188>)
 8006532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006534:	4a33      	ldr	r2, [pc, #204]	; (8006604 <HAL_ETH_MspInit+0x188>)
 8006536:	f043 0302 	orr.w	r3, r3, #2
 800653a:	6313      	str	r3, [r2, #48]	; 0x30
 800653c:	4b31      	ldr	r3, [pc, #196]	; (8006604 <HAL_ETH_MspInit+0x188>)
 800653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	60fb      	str	r3, [r7, #12]
 8006546:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006548:	2300      	movs	r3, #0
 800654a:	60bb      	str	r3, [r7, #8]
 800654c:	4b2d      	ldr	r3, [pc, #180]	; (8006604 <HAL_ETH_MspInit+0x188>)
 800654e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006550:	4a2c      	ldr	r2, [pc, #176]	; (8006604 <HAL_ETH_MspInit+0x188>)
 8006552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006556:	6313      	str	r3, [r2, #48]	; 0x30
 8006558:	4b2a      	ldr	r3, [pc, #168]	; (8006604 <HAL_ETH_MspInit+0x188>)
 800655a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006560:	60bb      	str	r3, [r7, #8]
 8006562:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006564:	2332      	movs	r3, #50	; 0x32
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006568:	2302      	movs	r3, #2
 800656a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800656c:	2300      	movs	r3, #0
 800656e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006570:	2303      	movs	r3, #3
 8006572:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006574:	230b      	movs	r3, #11
 8006576:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800657c:	4619      	mov	r1, r3
 800657e:	4822      	ldr	r0, [pc, #136]	; (8006608 <HAL_ETH_MspInit+0x18c>)
 8006580:	f7fe fa72 	bl	8004a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006584:	2386      	movs	r3, #134	; 0x86
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006588:	2302      	movs	r3, #2
 800658a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800658c:	2300      	movs	r3, #0
 800658e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006590:	2303      	movs	r3, #3
 8006592:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006594:	230b      	movs	r3, #11
 8006596:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800659c:	4619      	mov	r1, r3
 800659e:	481b      	ldr	r0, [pc, #108]	; (800660c <HAL_ETH_MspInit+0x190>)
 80065a0:	f7fe fa62 	bl	8004a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80065a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065aa:	2302      	movs	r3, #2
 80065ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065b2:	2303      	movs	r3, #3
 80065b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80065b6:	230b      	movs	r3, #11
 80065b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80065ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065be:	4619      	mov	r1, r3
 80065c0:	4813      	ldr	r0, [pc, #76]	; (8006610 <HAL_ETH_MspInit+0x194>)
 80065c2:	f7fe fa51 	bl	8004a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80065c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065cc:	2302      	movs	r3, #2
 80065ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065d4:	2303      	movs	r3, #3
 80065d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80065d8:	230b      	movs	r3, #11
 80065da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80065dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065e0:	4619      	mov	r1, r3
 80065e2:	480c      	ldr	r0, [pc, #48]	; (8006614 <HAL_ETH_MspInit+0x198>)
 80065e4:	f7fe fa40 	bl	8004a68 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80065e8:	2200      	movs	r2, #0
 80065ea:	2100      	movs	r1, #0
 80065ec:	203d      	movs	r0, #61	; 0x3d
 80065ee:	f7fc ff8e 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80065f2:	203d      	movs	r0, #61	; 0x3d
 80065f4:	f7fc ffa7 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80065f8:	bf00      	nop
 80065fa:	3738      	adds	r7, #56	; 0x38
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	40028000 	.word	0x40028000
 8006604:	40023800 	.word	0x40023800
 8006608:	40020800 	.word	0x40020800
 800660c:	40020000 	.word	0x40020000
 8006610:	40020400 	.word	0x40020400
 8006614:	40021800 	.word	0x40021800

08006618 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006620:	2300      	movs	r3, #0
 8006622:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006624:	4b4d      	ldr	r3, [pc, #308]	; (800675c <low_level_init+0x144>)
 8006626:	4a4e      	ldr	r2, [pc, #312]	; (8006760 <low_level_init+0x148>)
 8006628:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800662a:	4b4c      	ldr	r3, [pc, #304]	; (800675c <low_level_init+0x144>)
 800662c:	2201      	movs	r2, #1
 800662e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8006630:	4b4a      	ldr	r3, [pc, #296]	; (800675c <low_level_init+0x144>)
 8006632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006636:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006638:	4b48      	ldr	r3, [pc, #288]	; (800675c <low_level_init+0x144>)
 800663a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800663e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006640:	4b46      	ldr	r3, [pc, #280]	; (800675c <low_level_init+0x144>)
 8006642:	2200      	movs	r2, #0
 8006644:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x56;
 8006646:	2356      	movs	r3, #86	; 0x56
 8006648:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0xCD;
 800664a:	23cd      	movs	r3, #205	; 0xcd
 800664c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x43;
 800664e:	2343      	movs	r3, #67	; 0x43
 8006650:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x54;
 8006652:	2354      	movs	r3, #84	; 0x54
 8006654:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x4F;
 8006656:	234f      	movs	r3, #79	; 0x4f
 8006658:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x52;
 800665a:	2352      	movs	r3, #82	; 0x52
 800665c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800665e:	4a3f      	ldr	r2, [pc, #252]	; (800675c <low_level_init+0x144>)
 8006660:	f107 0308 	add.w	r3, r7, #8
 8006664:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8006666:	4b3d      	ldr	r3, [pc, #244]	; (800675c <low_level_init+0x144>)
 8006668:	2200      	movs	r2, #0
 800666a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800666c:	4b3b      	ldr	r3, [pc, #236]	; (800675c <low_level_init+0x144>)
 800666e:	2200      	movs	r2, #0
 8006670:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006672:	4b3a      	ldr	r3, [pc, #232]	; (800675c <low_level_init+0x144>)
 8006674:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006678:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800667a:	4838      	ldr	r0, [pc, #224]	; (800675c <low_level_init+0x144>)
 800667c:	f7fd f87e 	bl	800377c <HAL_ETH_Init>
 8006680:	4603      	mov	r3, r0
 8006682:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8006684:	7dfb      	ldrb	r3, [r7, #23]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d108      	bne.n	800669c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006690:	f043 0304 	orr.w	r3, r3, #4
 8006694:	b2da      	uxtb	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800669c:	2304      	movs	r3, #4
 800669e:	4a31      	ldr	r2, [pc, #196]	; (8006764 <low_level_init+0x14c>)
 80066a0:	4931      	ldr	r1, [pc, #196]	; (8006768 <low_level_init+0x150>)
 80066a2:	482e      	ldr	r0, [pc, #184]	; (800675c <low_level_init+0x144>)
 80066a4:	f7fd f9f6 	bl	8003a94 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80066a8:	2304      	movs	r3, #4
 80066aa:	4a30      	ldr	r2, [pc, #192]	; (800676c <low_level_init+0x154>)
 80066ac:	4930      	ldr	r1, [pc, #192]	; (8006770 <low_level_init+0x158>)
 80066ae:	482b      	ldr	r0, [pc, #172]	; (800675c <low_level_init+0x144>)
 80066b0:	f7fd fa57 	bl	8003b62 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2206      	movs	r2, #6
 80066b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80066bc:	4b27      	ldr	r3, [pc, #156]	; (800675c <low_level_init+0x144>)
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	781a      	ldrb	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80066c8:	4b24      	ldr	r3, [pc, #144]	; (800675c <low_level_init+0x144>)
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	785a      	ldrb	r2, [r3, #1]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80066d4:	4b21      	ldr	r3, [pc, #132]	; (800675c <low_level_init+0x144>)
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	789a      	ldrb	r2, [r3, #2]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80066e0:	4b1e      	ldr	r3, [pc, #120]	; (800675c <low_level_init+0x144>)
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	78da      	ldrb	r2, [r3, #3]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80066ec:	4b1b      	ldr	r3, [pc, #108]	; (800675c <low_level_init+0x144>)
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	791a      	ldrb	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80066f8:	4b18      	ldr	r3, [pc, #96]	; (800675c <low_level_init+0x144>)
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	795a      	ldrb	r2, [r3, #5]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800670a:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006712:	f043 030a 	orr.w	r3, r3, #10
 8006716:	b2da      	uxtb	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800671e:	480f      	ldr	r0, [pc, #60]	; (800675c <low_level_init+0x144>)
 8006720:	f7fd fd42 	bl	80041a8 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006724:	f107 0310 	add.w	r3, r7, #16
 8006728:	461a      	mov	r2, r3
 800672a:	211d      	movs	r1, #29
 800672c:	480b      	ldr	r0, [pc, #44]	; (800675c <low_level_init+0x144>)
 800672e:	f7fd fc6d 	bl	800400c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f043 030b 	orr.w	r3, r3, #11
 8006738:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	461a      	mov	r2, r3
 800673e:	211d      	movs	r1, #29
 8006740:	4806      	ldr	r0, [pc, #24]	; (800675c <low_level_init+0x144>)
 8006742:	f7fd fccb 	bl	80040dc <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006746:	f107 0310 	add.w	r3, r7, #16
 800674a:	461a      	mov	r2, r3
 800674c:	211d      	movs	r1, #29
 800674e:	4803      	ldr	r0, [pc, #12]	; (800675c <low_level_init+0x144>)
 8006750:	f7fd fc5c 	bl	800400c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006754:	bf00      	nop
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	200047a4 	.word	0x200047a4
 8006760:	40028000 	.word	0x40028000
 8006764:	20002fd4 	.word	0x20002fd4
 8006768:	20001784 	.word	0x20001784
 800676c:	20001804 	.word	0x20001804
 8006770:	20001704 	.word	0x20001704

08006774 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08a      	sub	sp, #40	; 0x28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800677e:	4b4b      	ldr	r3, [pc, #300]	; (80068ac <low_level_output+0x138>)
 8006780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006786:	2300      	movs	r3, #0
 8006788:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800678e:	2300      	movs	r3, #0
 8006790:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006796:	4b45      	ldr	r3, [pc, #276]	; (80068ac <low_level_output+0x138>)
 8006798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	623b      	str	r3, [r7, #32]
 80067a4:	e05a      	b.n	800685c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	da03      	bge.n	80067b6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80067ae:	23f8      	movs	r3, #248	; 0xf8
 80067b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80067b4:	e05c      	b.n	8006870 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	895b      	ldrh	r3, [r3, #10]
 80067ba:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80067bc:	2300      	movs	r3, #0
 80067be:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80067c0:	e02f      	b.n	8006822 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	18d0      	adds	r0, r2, r3
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	18d1      	adds	r1, r2, r3
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80067d6:	3304      	adds	r3, #4
 80067d8:	461a      	mov	r2, r3
 80067da:	f00b fa8d 	bl	8011cf8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	da03      	bge.n	80067f4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80067ec:	23f8      	movs	r3, #248	; 0xf8
 80067ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80067f2:	e03d      	b.n	8006870 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4413      	add	r3, r2
 8006800:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006804:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006810:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800681c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800681e:	2300      	movs	r3, #0
 8006820:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	4413      	add	r3, r2
 8006828:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800682c:	4293      	cmp	r3, r2
 800682e:	d8c8      	bhi.n	80067c2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006830:	69fa      	ldr	r2, [r7, #28]
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	18d0      	adds	r0, r2, r3
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	4413      	add	r3, r2
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4619      	mov	r1, r3
 8006842:	f00b fa59 	bl	8011cf8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	623b      	str	r3, [r7, #32]
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1a1      	bne.n	80067a6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006862:	6979      	ldr	r1, [r7, #20]
 8006864:	4811      	ldr	r0, [pc, #68]	; (80068ac <low_level_output+0x138>)
 8006866:	f7fd f9e7 	bl	8003c38 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006870:	4b0e      	ldr	r3, [pc, #56]	; (80068ac <low_level_output+0x138>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	f003 0320 	and.w	r3, r3, #32
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00d      	beq.n	800689e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006882:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <low_level_output+0x138>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800688a:	461a      	mov	r2, r3
 800688c:	2320      	movs	r3, #32
 800688e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006890:	4b06      	ldr	r3, [pc, #24]	; (80068ac <low_level_output+0x138>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006898:	461a      	mov	r2, r3
 800689a:	2300      	movs	r3, #0
 800689c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800689e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3728      	adds	r7, #40	; 0x28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	200047a4 	.word	0x200047a4

080068b0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08c      	sub	sp, #48	; 0x30
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80068b8:	2300      	movs	r3, #0
 80068ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80068bc:	2300      	movs	r3, #0
 80068be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80068c0:	2300      	movs	r3, #0
 80068c2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80068d0:	2300      	movs	r3, #0
 80068d2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80068d4:	484e      	ldr	r0, [pc, #312]	; (8006a10 <low_level_input+0x160>)
 80068d6:	f7fd fa97 	bl	8003e08 <HAL_ETH_GetReceivedFrame>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <low_level_input+0x34>

    return NULL;
 80068e0:	2300      	movs	r3, #0
 80068e2:	e090      	b.n	8006a06 <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80068e4:	4b4a      	ldr	r3, [pc, #296]	; (8006a10 <low_level_input+0x160>)
 80068e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80068ea:	4b49      	ldr	r3, [pc, #292]	; (8006a10 <low_level_input+0x160>)
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80068f0:	89fb      	ldrh	r3, [r7, #14]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d006      	beq.n	8006904 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80068f6:	89fb      	ldrh	r3, [r7, #14]
 80068f8:	2203      	movs	r2, #3
 80068fa:	4619      	mov	r1, r3
 80068fc:	2004      	movs	r0, #4
 80068fe:	f000 ffbd 	bl	800787c <pbuf_alloc>
 8006902:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	2b00      	cmp	r3, #0
 8006908:	d04b      	beq.n	80069a2 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800690a:	4b41      	ldr	r3, [pc, #260]	; (8006a10 <low_level_input+0x160>)
 800690c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690e:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	62bb      	str	r3, [r7, #40]	; 0x28
 8006918:	e040      	b.n	800699c <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	895b      	ldrh	r3, [r3, #10]
 800691e:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006920:	2300      	movs	r3, #0
 8006922:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006924:	e021      	b.n	800696a <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	18d0      	adds	r0, r2, r3
 800692e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	18d1      	adds	r1, r2, r3
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800693a:	3304      	adds	r3, #4
 800693c:	461a      	mov	r2, r3
 800693e:	f00b f9db 	bl	8011cf8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	4413      	add	r3, r2
 8006954:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006958:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006964:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	4413      	add	r3, r2
 8006970:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006974:	4293      	cmp	r3, r2
 8006976:	d8d6      	bhi.n	8006926 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	18d0      	adds	r0, r2, r3
 8006980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	4413      	add	r3, r2
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4619      	mov	r1, r3
 800698a:	f00b f9b5 	bl	8011cf8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	4413      	add	r3, r2
 8006994:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	62bb      	str	r3, [r7, #40]	; 0x28
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1bb      	bne.n	800691a <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80069a2:	4b1b      	ldr	r3, [pc, #108]	; (8006a10 <low_level_input+0x160>)
 80069a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a6:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80069a8:	2300      	movs	r3, #0
 80069aa:	613b      	str	r3, [r7, #16]
 80069ac:	e00b      	b.n	80069c6 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	3301      	adds	r3, #1
 80069c4:	613b      	str	r3, [r7, #16]
 80069c6:	4b12      	ldr	r3, [pc, #72]	; (8006a10 <low_level_input+0x160>)
 80069c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d3ee      	bcc.n	80069ae <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80069d0:	4b0f      	ldr	r3, [pc, #60]	; (8006a10 <low_level_input+0x160>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80069d6:	4b0e      	ldr	r3, [pc, #56]	; (8006a10 <low_level_input+0x160>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00d      	beq.n	8006a04 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80069e8:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <low_level_input+0x160>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f0:	461a      	mov	r2, r3
 80069f2:	2380      	movs	r3, #128	; 0x80
 80069f4:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80069f6:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <low_level_input+0x160>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069fe:	461a      	mov	r2, r3
 8006a00:	2300      	movs	r3, #0
 8006a02:	6093      	str	r3, [r2, #8]
  }
  return p;
 8006a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3730      	adds	r7, #48	; 0x30
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	200047a4 	.word	0x200047a4

08006a14 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff ff47 	bl	80068b0 <low_level_input>
 8006a22:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d010      	beq.n	8006a4c <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	4798      	blx	r3
 8006a34:	4603      	mov	r3, r0
 8006a36:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8006a38:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d006      	beq.n	8006a4e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f001 fa93 	bl	8007f6c <pbuf_free>
    p = NULL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	e000      	b.n	8006a4e <ethernetif_input+0x3a>
  if (p == NULL) return;
 8006a4c:	bf00      	nop
  }
}
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d106      	bne.n	8006a70 <ethernetif_init+0x1c>
 8006a62:	4b0e      	ldr	r3, [pc, #56]	; (8006a9c <ethernetif_init+0x48>)
 8006a64:	f240 221a 	movw	r2, #538	; 0x21a
 8006a68:	490d      	ldr	r1, [pc, #52]	; (8006aa0 <ethernetif_init+0x4c>)
 8006a6a:	480e      	ldr	r0, [pc, #56]	; (8006aa4 <ethernetif_init+0x50>)
 8006a6c:	f00b ffc8 	bl	8012a00 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2273      	movs	r2, #115	; 0x73
 8006a74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2274      	movs	r2, #116	; 0x74
 8006a7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a09      	ldr	r2, [pc, #36]	; (8006aa8 <ethernetif_init+0x54>)
 8006a84:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a08      	ldr	r2, [pc, #32]	; (8006aac <ethernetif_init+0x58>)
 8006a8a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7ff fdc3 	bl	8006618 <low_level_init>

  return ERR_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	080166b0 	.word	0x080166b0
 8006aa0:	080166cc 	.word	0x080166cc
 8006aa4:	080166dc 	.word	0x080166dc
 8006aa8:	0800e14d 	.word	0x0800e14d
 8006aac:	08006775 	.word	0x08006775

08006ab0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006ab4:	f7fc f84a 	bl	8002b4c <HAL_GetTick>
 8006ab8:	4603      	mov	r3, r0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006acc:	2300      	movs	r3, #0
 8006ace:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ad6:	089b      	lsrs	r3, r3, #2
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d05d      	beq.n	8006b9e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006ae2:	4b34      	ldr	r3, [pc, #208]	; (8006bb4 <ethernetif_update_config+0xf4>)
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d03f      	beq.n	8006b6a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006aea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006aee:	2100      	movs	r1, #0
 8006af0:	4830      	ldr	r0, [pc, #192]	; (8006bb4 <ethernetif_update_config+0xf4>)
 8006af2:	f7fd faf3 	bl	80040dc <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8006af6:	f7fc f829 	bl	8002b4c <HAL_GetTick>
 8006afa:	4603      	mov	r3, r0
 8006afc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006afe:	f107 0308 	add.w	r3, r7, #8
 8006b02:	461a      	mov	r2, r3
 8006b04:	2101      	movs	r1, #1
 8006b06:	482b      	ldr	r0, [pc, #172]	; (8006bb4 <ethernetif_update_config+0xf4>)
 8006b08:	f7fd fa80 	bl	800400c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006b0c:	f7fc f81e 	bl	8002b4c <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b1a:	d828      	bhi.n	8006b6e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0eb      	beq.n	8006afe <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006b26:	f107 0308 	add.w	r3, r7, #8
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	2110      	movs	r1, #16
 8006b2e:	4821      	ldr	r0, [pc, #132]	; (8006bb4 <ethernetif_update_config+0xf4>)
 8006b30:	f7fd fa6c 	bl	800400c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d004      	beq.n	8006b48 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006b3e:	4b1d      	ldr	r3, [pc, #116]	; (8006bb4 <ethernetif_update_config+0xf4>)
 8006b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b44:	60da      	str	r2, [r3, #12]
 8006b46:	e002      	b.n	8006b4e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006b48:	4b1a      	ldr	r3, [pc, #104]	; (8006bb4 <ethernetif_update_config+0xf4>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006b58:	4b16      	ldr	r3, [pc, #88]	; (8006bb4 <ethernetif_update_config+0xf4>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	609a      	str	r2, [r3, #8]
 8006b5e:	e016      	b.n	8006b8e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006b60:	4b14      	ldr	r3, [pc, #80]	; (8006bb4 <ethernetif_update_config+0xf4>)
 8006b62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b66:	609a      	str	r2, [r3, #8]
 8006b68:	e011      	b.n	8006b8e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006b6a:	bf00      	nop
 8006b6c:	e000      	b.n	8006b70 <ethernetif_update_config+0xb0>
          goto error;
 8006b6e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006b70:	4b10      	ldr	r3, [pc, #64]	; (8006bb4 <ethernetif_update_config+0xf4>)
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	08db      	lsrs	r3, r3, #3
 8006b76:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006b78:	4b0e      	ldr	r3, [pc, #56]	; (8006bb4 <ethernetif_update_config+0xf4>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	085b      	lsrs	r3, r3, #1
 8006b7e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006b80:	4313      	orrs	r3, r2
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	461a      	mov	r2, r3
 8006b86:	2100      	movs	r1, #0
 8006b88:	480a      	ldr	r0, [pc, #40]	; (8006bb4 <ethernetif_update_config+0xf4>)
 8006b8a:	f7fd faa7 	bl	80040dc <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8006b8e:	2100      	movs	r1, #0
 8006b90:	4808      	ldr	r0, [pc, #32]	; (8006bb4 <ethernetif_update_config+0xf4>)
 8006b92:	f7fd fb67 	bl	8004264 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006b96:	4807      	ldr	r0, [pc, #28]	; (8006bb4 <ethernetif_update_config+0xf4>)
 8006b98:	f7fd fb06 	bl	80041a8 <HAL_ETH_Start>
 8006b9c:	e002      	b.n	8006ba4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8006b9e:	4805      	ldr	r0, [pc, #20]	; (8006bb4 <ethernetif_update_config+0xf4>)
 8006ba0:	f7fd fb31 	bl	8004206 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f807 	bl	8006bb8 <ethernetif_notify_conn_changed>
}
 8006baa:	bf00      	nop
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	200047a4 	.word	0x200047a4

08006bb8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr

08006bca <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8006bd4:	88fb      	ldrh	r3, [r7, #6]
 8006bd6:	ba5b      	rev16	r3, r3
 8006bd8:	b29b      	uxth	r3, r3
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bc80      	pop	{r7}
 8006be2:	4770      	bx	lr

08006be4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	061a      	lsls	r2, r3, #24
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	021b      	lsls	r3, r3, #8
 8006bf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	0a1b      	lsrs	r3, r3, #8
 8006bfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	0e1b      	lsrs	r3, r3, #24
 8006c08:	4313      	orrs	r3, r2
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bc80      	pop	{r7}
 8006c12:	4770      	bx	lr

08006c14 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8006c1e:	f001 fcaf 	bl	8008580 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006c22:	f000 f8a7 	bl	8006d74 <mem_init>
  memp_init();
 8006c26:	f000 fba5 	bl	8007374 <memp_init>
  pbuf_init();
  netif_init();
 8006c2a:	f000 fc8b 	bl	8007544 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006c2e:	f006 fa27 	bl	800d080 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006c32:	f001 fcab 	bl	800858c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8006c36:	f006 f905 	bl	800ce44 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006c3a:	bf00      	nop
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006c4c:	4b40      	ldr	r3, [pc, #256]	; (8006d50 <plug_holes+0x10c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d206      	bcs.n	8006c64 <plug_holes+0x20>
 8006c56:	4b3f      	ldr	r3, [pc, #252]	; (8006d54 <plug_holes+0x110>)
 8006c58:	f240 125d 	movw	r2, #349	; 0x15d
 8006c5c:	493e      	ldr	r1, [pc, #248]	; (8006d58 <plug_holes+0x114>)
 8006c5e:	483f      	ldr	r0, [pc, #252]	; (8006d5c <plug_holes+0x118>)
 8006c60:	f00b fece 	bl	8012a00 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006c64:	4b3e      	ldr	r3, [pc, #248]	; (8006d60 <plug_holes+0x11c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d306      	bcc.n	8006c7c <plug_holes+0x38>
 8006c6e:	4b39      	ldr	r3, [pc, #228]	; (8006d54 <plug_holes+0x110>)
 8006c70:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006c74:	493b      	ldr	r1, [pc, #236]	; (8006d64 <plug_holes+0x120>)
 8006c76:	4839      	ldr	r0, [pc, #228]	; (8006d5c <plug_holes+0x118>)
 8006c78:	f00b fec2 	bl	8012a00 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	791b      	ldrb	r3, [r3, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d006      	beq.n	8006c92 <plug_holes+0x4e>
 8006c84:	4b33      	ldr	r3, [pc, #204]	; (8006d54 <plug_holes+0x110>)
 8006c86:	f240 125f 	movw	r2, #351	; 0x15f
 8006c8a:	4937      	ldr	r1, [pc, #220]	; (8006d68 <plug_holes+0x124>)
 8006c8c:	4833      	ldr	r0, [pc, #204]	; (8006d5c <plug_holes+0x118>)
 8006c8e:	f00b feb7 	bl	8012a00 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006c9a:	d906      	bls.n	8006caa <plug_holes+0x66>
 8006c9c:	4b2d      	ldr	r3, [pc, #180]	; (8006d54 <plug_holes+0x110>)
 8006c9e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8006ca2:	4932      	ldr	r1, [pc, #200]	; (8006d6c <plug_holes+0x128>)
 8006ca4:	482d      	ldr	r0, [pc, #180]	; (8006d5c <plug_holes+0x118>)
 8006ca6:	f00b feab 	bl	8012a00 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8006caa:	4b29      	ldr	r3, [pc, #164]	; (8006d50 <plug_holes+0x10c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	8812      	ldrh	r2, [r2, #0]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d01f      	beq.n	8006cfe <plug_holes+0xba>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	791b      	ldrb	r3, [r3, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d11b      	bne.n	8006cfe <plug_holes+0xba>
 8006cc6:	4b26      	ldr	r3, [pc, #152]	; (8006d60 <plug_holes+0x11c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d016      	beq.n	8006cfe <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006cd0:	4b27      	ldr	r3, [pc, #156]	; (8006d70 <plug_holes+0x12c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d102      	bne.n	8006ce0 <plug_holes+0x9c>
      lfree = mem;
 8006cda:	4a25      	ldr	r2, [pc, #148]	; (8006d70 <plug_holes+0x12c>)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	881a      	ldrh	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8006ce8:	4b19      	ldr	r3, [pc, #100]	; (8006d50 <plug_holes+0x10c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	1ad1      	subs	r1, r2, r3
 8006cf0:	4b17      	ldr	r3, [pc, #92]	; (8006d50 <plug_holes+0x10c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	8812      	ldrh	r2, [r2, #0]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	b28a      	uxth	r2, r1
 8006cfc:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8006cfe:	4b14      	ldr	r3, [pc, #80]	; (8006d50 <plug_holes+0x10c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	8852      	ldrh	r2, [r2, #2]
 8006d06:	4413      	add	r3, r2
 8006d08:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d01a      	beq.n	8006d48 <plug_holes+0x104>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	791b      	ldrb	r3, [r3, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d116      	bne.n	8006d48 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006d1a:	4b15      	ldr	r3, [pc, #84]	; (8006d70 <plug_holes+0x12c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d102      	bne.n	8006d2a <plug_holes+0xe6>
      lfree = pmem;
 8006d24:	4a12      	ldr	r2, [pc, #72]	; (8006d70 <plug_holes+0x12c>)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	881a      	ldrh	r2, [r3, #0]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8006d32:	4b07      	ldr	r3, [pc, #28]	; (8006d50 <plug_holes+0x10c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	1ad1      	subs	r1, r2, r3
 8006d3a:	4b05      	ldr	r3, [pc, #20]	; (8006d50 <plug_holes+0x10c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	8812      	ldrh	r2, [r2, #0]
 8006d42:	4413      	add	r3, r2
 8006d44:	b28a      	uxth	r2, r1
 8006d46:	805a      	strh	r2, [r3, #2]
  }
}
 8006d48:	bf00      	nop
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20004e58 	.word	0x20004e58
 8006d54:	08016704 	.word	0x08016704
 8006d58:	08016734 	.word	0x08016734
 8006d5c:	0801674c 	.word	0x0801674c
 8006d60:	20004e5c 	.word	0x20004e5c
 8006d64:	08016774 	.word	0x08016774
 8006d68:	08016790 	.word	0x08016790
 8006d6c:	080167ac 	.word	0x080167ac
 8006d70:	20004e60 	.word	0x20004e60

08006d74 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006d7a:	4b1b      	ldr	r3, [pc, #108]	; (8006de8 <mem_init+0x74>)
 8006d7c:	3303      	adds	r3, #3
 8006d7e:	f023 0303 	bic.w	r3, r3, #3
 8006d82:	461a      	mov	r2, r3
 8006d84:	4b19      	ldr	r3, [pc, #100]	; (8006dec <mem_init+0x78>)
 8006d86:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006d88:	4b18      	ldr	r3, [pc, #96]	; (8006dec <mem_init+0x78>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006d94:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8006da2:	4b12      	ldr	r3, [pc, #72]	; (8006dec <mem_init+0x78>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8006daa:	4a11      	ldr	r2, [pc, #68]	; (8006df0 <mem_init+0x7c>)
 8006dac:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006dae:	4b10      	ldr	r3, [pc, #64]	; (8006df0 <mem_init+0x7c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2201      	movs	r2, #1
 8006db4:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006db6:	4b0e      	ldr	r3, [pc, #56]	; (8006df0 <mem_init+0x7c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006dbe:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006dc0:	4b0b      	ldr	r3, [pc, #44]	; (8006df0 <mem_init+0x7c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006dc8:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006dca:	4b08      	ldr	r3, [pc, #32]	; (8006dec <mem_init+0x78>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a09      	ldr	r2, [pc, #36]	; (8006df4 <mem_init+0x80>)
 8006dd0:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8006dd2:	4b09      	ldr	r3, [pc, #36]	; (8006df8 <mem_init+0x84>)
 8006dd4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006dd8:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bc80      	pop	{r7}
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	20004804 	.word	0x20004804
 8006dec:	20004e58 	.word	0x20004e58
 8006df0:	20004e5c 	.word	0x20004e5c
 8006df4:	20004e60 	.word	0x20004e60
 8006df8:	20007db4 	.word	0x20007db4

08006dfc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d05d      	beq.n	8006ec6 <mem_free+0xca>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f003 0303 	and.w	r3, r3, #3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d006      	beq.n	8006e22 <mem_free+0x26>
 8006e14:	4b2e      	ldr	r3, [pc, #184]	; (8006ed0 <mem_free+0xd4>)
 8006e16:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8006e1a:	492e      	ldr	r1, [pc, #184]	; (8006ed4 <mem_free+0xd8>)
 8006e1c:	482e      	ldr	r0, [pc, #184]	; (8006ed8 <mem_free+0xdc>)
 8006e1e:	f00b fdef 	bl	8012a00 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006e22:	4b2e      	ldr	r3, [pc, #184]	; (8006edc <mem_free+0xe0>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d304      	bcc.n	8006e36 <mem_free+0x3a>
 8006e2c:	4b2c      	ldr	r3, [pc, #176]	; (8006ee0 <mem_free+0xe4>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d306      	bcc.n	8006e44 <mem_free+0x48>
 8006e36:	4b26      	ldr	r3, [pc, #152]	; (8006ed0 <mem_free+0xd4>)
 8006e38:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8006e3c:	4929      	ldr	r1, [pc, #164]	; (8006ee4 <mem_free+0xe8>)
 8006e3e:	4826      	ldr	r0, [pc, #152]	; (8006ed8 <mem_free+0xdc>)
 8006e40:	f00b fdde 	bl	8012a00 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006e44:	4b25      	ldr	r3, [pc, #148]	; (8006edc <mem_free+0xe0>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d304      	bcc.n	8006e58 <mem_free+0x5c>
 8006e4e:	4b24      	ldr	r3, [pc, #144]	; (8006ee0 <mem_free+0xe4>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d308      	bcc.n	8006e6a <mem_free+0x6e>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8006e58:	4b23      	ldr	r3, [pc, #140]	; (8006ee8 <mem_free+0xec>)
 8006e5a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8006e5e:	3301      	adds	r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	4b21      	ldr	r3, [pc, #132]	; (8006ee8 <mem_free+0xec>)
 8006e64:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return;
 8006e68:	e02e      	b.n	8006ec8 <mem_free+0xcc>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3b08      	subs	r3, #8
 8006e6e:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	791b      	ldrb	r3, [r3, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d106      	bne.n	8006e86 <mem_free+0x8a>
 8006e78:	4b15      	ldr	r3, [pc, #84]	; (8006ed0 <mem_free+0xd4>)
 8006e7a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8006e7e:	491b      	ldr	r1, [pc, #108]	; (8006eec <mem_free+0xf0>)
 8006e80:	4815      	ldr	r0, [pc, #84]	; (8006ed8 <mem_free+0xdc>)
 8006e82:	f00b fdbd 	bl	8012a00 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006e8c:	4b18      	ldr	r3, [pc, #96]	; (8006ef0 <mem_free+0xf4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d202      	bcs.n	8006e9c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006e96:	4a16      	ldr	r2, [pc, #88]	; (8006ef0 <mem_free+0xf4>)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8006e9c:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <mem_free+0xec>)
 8006e9e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006ea2:	4b0e      	ldr	r3, [pc, #56]	; (8006edc <mem_free+0xe0>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68f9      	ldr	r1, [r7, #12]
 8006ea8:	1acb      	subs	r3, r1, r3
 8006eaa:	b299      	uxth	r1, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	1acb      	subs	r3, r1, r3
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	4413      	add	r3, r2
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	4b0b      	ldr	r3, [pc, #44]	; (8006ee8 <mem_free+0xec>)
 8006eba:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f7ff fec0 	bl	8006c44 <plug_holes>
 8006ec4:	e000      	b.n	8006ec8 <mem_free+0xcc>
    return;
 8006ec6:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	08016704 	.word	0x08016704
 8006ed4:	080167d8 	.word	0x080167d8
 8006ed8:	0801674c 	.word	0x0801674c
 8006edc:	20004e58 	.word	0x20004e58
 8006ee0:	20004e5c 	.word	0x20004e5c
 8006ee4:	080167fc 	.word	0x080167fc
 8006ee8:	20007db4 	.word	0x20007db4
 8006eec:	08016814 	.word	0x08016814
 8006ef0:	20004e60 	.word	0x20004e60

08006ef4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8006f00:	887b      	ldrh	r3, [r7, #2]
 8006f02:	3303      	adds	r3, #3
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	f023 0303 	bic.w	r3, r3, #3
 8006f0a:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8006f0c:	887b      	ldrh	r3, [r7, #2]
 8006f0e:	2b0b      	cmp	r3, #11
 8006f10:	d801      	bhi.n	8006f16 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006f12:	230c      	movs	r3, #12
 8006f14:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8006f16:	887b      	ldrh	r3, [r7, #2]
 8006f18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006f1c:	d901      	bls.n	8006f22 <mem_trim+0x2e>
    return NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e0d1      	b.n	80070c6 <mem_trim+0x1d2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006f22:	4b6b      	ldr	r3, [pc, #428]	; (80070d0 <mem_trim+0x1dc>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d304      	bcc.n	8006f36 <mem_trim+0x42>
 8006f2c:	4b69      	ldr	r3, [pc, #420]	; (80070d4 <mem_trim+0x1e0>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d306      	bcc.n	8006f44 <mem_trim+0x50>
 8006f36:	4b68      	ldr	r3, [pc, #416]	; (80070d8 <mem_trim+0x1e4>)
 8006f38:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006f3c:	4967      	ldr	r1, [pc, #412]	; (80070dc <mem_trim+0x1e8>)
 8006f3e:	4868      	ldr	r0, [pc, #416]	; (80070e0 <mem_trim+0x1ec>)
 8006f40:	f00b fd5e 	bl	8012a00 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006f44:	4b62      	ldr	r3, [pc, #392]	; (80070d0 <mem_trim+0x1dc>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d304      	bcc.n	8006f58 <mem_trim+0x64>
 8006f4e:	4b61      	ldr	r3, [pc, #388]	; (80070d4 <mem_trim+0x1e0>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d309      	bcc.n	8006f6c <mem_trim+0x78>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8006f58:	4b62      	ldr	r3, [pc, #392]	; (80070e4 <mem_trim+0x1f0>)
 8006f5a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8006f5e:	3301      	adds	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	4b60      	ldr	r3, [pc, #384]	; (80070e4 <mem_trim+0x1f0>)
 8006f64:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	e0ac      	b.n	80070c6 <mem_trim+0x1d2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3b08      	subs	r3, #8
 8006f70:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8006f72:	4b57      	ldr	r3, [pc, #348]	; (80070d0 <mem_trim+0x1dc>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	881a      	ldrh	r2, [r3, #0]
 8006f80:	8a7b      	ldrh	r3, [r7, #18]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	3b08      	subs	r3, #8
 8006f88:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006f8a:	887a      	ldrh	r2, [r7, #2]
 8006f8c:	8a3b      	ldrh	r3, [r7, #16]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d906      	bls.n	8006fa0 <mem_trim+0xac>
 8006f92:	4b51      	ldr	r3, [pc, #324]	; (80070d8 <mem_trim+0x1e4>)
 8006f94:	f240 2206 	movw	r2, #518	; 0x206
 8006f98:	4953      	ldr	r1, [pc, #332]	; (80070e8 <mem_trim+0x1f4>)
 8006f9a:	4851      	ldr	r0, [pc, #324]	; (80070e0 <mem_trim+0x1ec>)
 8006f9c:	f00b fd30 	bl	8012a00 <iprintf>
  if (newsize > size) {
 8006fa0:	887a      	ldrh	r2, [r7, #2]
 8006fa2:	8a3b      	ldrh	r3, [r7, #16]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d901      	bls.n	8006fac <mem_trim+0xb8>
    /* not supported */
    return NULL;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e08c      	b.n	80070c6 <mem_trim+0x1d2>
  }
  if (newsize == size) {
 8006fac:	887a      	ldrh	r2, [r7, #2]
 8006fae:	8a3b      	ldrh	r3, [r7, #16]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d101      	bne.n	8006fb8 <mem_trim+0xc4>
    /* No change in size, simply return */
    return rmem;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	e086      	b.n	80070c6 <mem_trim+0x1d2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8006fb8:	4b45      	ldr	r3, [pc, #276]	; (80070d0 <mem_trim+0x1dc>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	8812      	ldrh	r2, [r2, #0]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	791b      	ldrb	r3, [r3, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d13d      	bne.n	8007048 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006fd2:	8a7a      	ldrh	r2, [r7, #18]
 8006fd4:	887b      	ldrh	r3, [r7, #2]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	3308      	adds	r3, #8
 8006fdc:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8006fde:	4b43      	ldr	r3, [pc, #268]	; (80070ec <mem_trim+0x1f8>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d105      	bne.n	8006ff4 <mem_trim+0x100>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8006fe8:	4b39      	ldr	r3, [pc, #228]	; (80070d0 <mem_trim+0x1dc>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	897b      	ldrh	r3, [r7, #10]
 8006fee:	4413      	add	r3, r2
 8006ff0:	4a3e      	ldr	r2, [pc, #248]	; (80070ec <mem_trim+0x1f8>)
 8006ff2:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8006ff4:	4b36      	ldr	r3, [pc, #216]	; (80070d0 <mem_trim+0x1dc>)
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	897b      	ldrh	r3, [r7, #10]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	893a      	ldrh	r2, [r7, #8]
 8007008:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8a7a      	ldrh	r2, [r7, #18]
 800700e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	897a      	ldrh	r2, [r7, #10]
 8007014:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800701e:	d006      	beq.n	800702e <mem_trim+0x13a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007020:	4b2b      	ldr	r3, [pc, #172]	; (80070d0 <mem_trim+0x1dc>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	8812      	ldrh	r2, [r2, #0]
 8007028:	4413      	add	r3, r2
 800702a:	897a      	ldrh	r2, [r7, #10]
 800702c:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 800702e:	4b2d      	ldr	r3, [pc, #180]	; (80070e4 <mem_trim+0x1f0>)
 8007030:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8007034:	8879      	ldrh	r1, [r7, #2]
 8007036:	8a3b      	ldrh	r3, [r7, #16]
 8007038:	1acb      	subs	r3, r1, r3
 800703a:	b29b      	uxth	r3, r3
 800703c:	4413      	add	r3, r2
 800703e:	b29a      	uxth	r2, r3
 8007040:	4b28      	ldr	r3, [pc, #160]	; (80070e4 <mem_trim+0x1f0>)
 8007042:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8007046:	e03d      	b.n	80070c4 <mem_trim+0x1d0>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007048:	887b      	ldrh	r3, [r7, #2]
 800704a:	f103 0214 	add.w	r2, r3, #20
 800704e:	8a3b      	ldrh	r3, [r7, #16]
 8007050:	429a      	cmp	r2, r3
 8007052:	d837      	bhi.n	80070c4 <mem_trim+0x1d0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007054:	8a7a      	ldrh	r2, [r7, #18]
 8007056:	887b      	ldrh	r3, [r7, #2]
 8007058:	4413      	add	r3, r2
 800705a:	b29b      	uxth	r3, r3
 800705c:	3308      	adds	r3, #8
 800705e:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8007060:	4b1b      	ldr	r3, [pc, #108]	; (80070d0 <mem_trim+0x1dc>)
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	897b      	ldrh	r3, [r7, #10]
 8007066:	4413      	add	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 800706a:	4b20      	ldr	r3, [pc, #128]	; (80070ec <mem_trim+0x1f8>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	429a      	cmp	r2, r3
 8007072:	d202      	bcs.n	800707a <mem_trim+0x186>
      lfree = mem2;
 8007074:	4a1d      	ldr	r2, [pc, #116]	; (80070ec <mem_trim+0x1f8>)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	881a      	ldrh	r2, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8a7a      	ldrh	r2, [r7, #18]
 800708c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	897a      	ldrh	r2, [r7, #10]
 8007092:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	881b      	ldrh	r3, [r3, #0]
 8007098:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800709c:	d006      	beq.n	80070ac <mem_trim+0x1b8>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800709e:	4b0c      	ldr	r3, [pc, #48]	; (80070d0 <mem_trim+0x1dc>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	8812      	ldrh	r2, [r2, #0]
 80070a6:	4413      	add	r3, r2
 80070a8:	897a      	ldrh	r2, [r7, #10]
 80070aa:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 80070ac:	4b0d      	ldr	r3, [pc, #52]	; (80070e4 <mem_trim+0x1f0>)
 80070ae:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80070b2:	8879      	ldrh	r1, [r7, #2]
 80070b4:	8a3b      	ldrh	r3, [r7, #16]
 80070b6:	1acb      	subs	r3, r1, r3
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	4413      	add	r3, r2
 80070bc:	b29a      	uxth	r2, r3
 80070be:	4b09      	ldr	r3, [pc, #36]	; (80070e4 <mem_trim+0x1f0>)
 80070c0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80070c4:	687b      	ldr	r3, [r7, #4]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	20004e58 	.word	0x20004e58
 80070d4:	20004e5c 	.word	0x20004e5c
 80070d8:	08016704 	.word	0x08016704
 80070dc:	08016828 	.word	0x08016828
 80070e0:	0801674c 	.word	0x0801674c
 80070e4:	20007db4 	.word	0x20007db4
 80070e8:	08016840 	.word	0x08016840
 80070ec:	20004e60 	.word	0x20004e60

080070f0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80070fa:	88fb      	ldrh	r3, [r7, #6]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <mem_malloc+0x14>
    return NULL;
 8007100:	2300      	movs	r3, #0
 8007102:	e0eb      	b.n	80072dc <mem_malloc+0x1ec>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8007104:	88fb      	ldrh	r3, [r7, #6]
 8007106:	3303      	adds	r3, #3
 8007108:	b29b      	uxth	r3, r3
 800710a:	f023 0303 	bic.w	r3, r3, #3
 800710e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8007110:	88fb      	ldrh	r3, [r7, #6]
 8007112:	2b0b      	cmp	r3, #11
 8007114:	d801      	bhi.n	800711a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007116:	230c      	movs	r3, #12
 8007118:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800711a:	88fb      	ldrh	r3, [r7, #6]
 800711c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007120:	d901      	bls.n	8007126 <mem_malloc+0x36>
    return NULL;
 8007122:	2300      	movs	r3, #0
 8007124:	e0da      	b.n	80072dc <mem_malloc+0x1ec>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007126:	4b6f      	ldr	r3, [pc, #444]	; (80072e4 <mem_malloc+0x1f4>)
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	4b6f      	ldr	r3, [pc, #444]	; (80072e8 <mem_malloc+0x1f8>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	83fb      	strh	r3, [r7, #30]
 8007132:	e0c3      	b.n	80072bc <mem_malloc+0x1cc>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8007134:	4b6c      	ldr	r3, [pc, #432]	; (80072e8 <mem_malloc+0x1f8>)
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	8bfb      	ldrh	r3, [r7, #30]
 800713a:	4413      	add	r3, r2
 800713c:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	791b      	ldrb	r3, [r3, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	f040 80b4 	bne.w	80072b0 <mem_malloc+0x1c0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	8bfb      	ldrh	r3, [r7, #30]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	f1a3 0208 	sub.w	r2, r3, #8
 8007156:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8007158:	429a      	cmp	r2, r3
 800715a:	f0c0 80a9 	bcc.w	80072b0 <mem_malloc+0x1c0>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	461a      	mov	r2, r3
 8007164:	8bfb      	ldrh	r3, [r7, #30]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	f1a3 0208 	sub.w	r2, r3, #8
 800716c:	88fb      	ldrh	r3, [r7, #6]
 800716e:	3314      	adds	r3, #20
 8007170:	429a      	cmp	r2, r3
 8007172:	d332      	bcc.n	80071da <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8007174:	8bfa      	ldrh	r2, [r7, #30]
 8007176:	88fb      	ldrh	r3, [r7, #6]
 8007178:	4413      	add	r3, r2
 800717a:	b29b      	uxth	r3, r3
 800717c:	3308      	adds	r3, #8
 800717e:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8007180:	4b59      	ldr	r3, [pc, #356]	; (80072e8 <mem_malloc+0x1f8>)
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	8a7b      	ldrh	r3, [r7, #18]
 8007186:	4413      	add	r3, r2
 8007188:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	881a      	ldrh	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8bfa      	ldrh	r2, [r7, #30]
 800719c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	8a7a      	ldrh	r2, [r7, #18]
 80071a2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	2201      	movs	r2, #1
 80071a8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80071b2:	d006      	beq.n	80071c2 <mem_malloc+0xd2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80071b4:	4b4c      	ldr	r3, [pc, #304]	; (80072e8 <mem_malloc+0x1f8>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	8812      	ldrh	r2, [r2, #0]
 80071bc:	4413      	add	r3, r2
 80071be:	8a7a      	ldrh	r2, [r7, #18]
 80071c0:	805a      	strh	r2, [r3, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 80071c2:	4b4a      	ldr	r3, [pc, #296]	; (80072ec <mem_malloc+0x1fc>)
 80071c4:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80071c8:	88fb      	ldrh	r3, [r7, #6]
 80071ca:	4413      	add	r3, r2
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3308      	adds	r3, #8
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	4b46      	ldr	r3, [pc, #280]	; (80072ec <mem_malloc+0x1fc>)
 80071d4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80071d8:	e013      	b.n	8007202 <mem_malloc+0x112>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2201      	movs	r2, #1
 80071de:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 80071e0:	4b42      	ldr	r3, [pc, #264]	; (80072ec <mem_malloc+0x1fc>)
 80071e2:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	8819      	ldrh	r1, [r3, #0]
 80071ea:	4b3f      	ldr	r3, [pc, #252]	; (80072e8 <mem_malloc+0x1f8>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6978      	ldr	r0, [r7, #20]
 80071f0:	1ac3      	subs	r3, r0, r3
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	1acb      	subs	r3, r1, r3
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	4413      	add	r3, r2
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	4b3b      	ldr	r3, [pc, #236]	; (80072ec <mem_malloc+0x1fc>)
 80071fe:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007202:	4b38      	ldr	r3, [pc, #224]	; (80072e4 <mem_malloc+0x1f4>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	429a      	cmp	r2, r3
 800720a:	d127      	bne.n	800725c <mem_malloc+0x16c>
          struct mem *cur = lfree;
 800720c:	4b35      	ldr	r3, [pc, #212]	; (80072e4 <mem_malloc+0x1f4>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007212:	e005      	b.n	8007220 <mem_malloc+0x130>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8007214:	4b34      	ldr	r3, [pc, #208]	; (80072e8 <mem_malloc+0x1f8>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	8812      	ldrh	r2, [r2, #0]
 800721c:	4413      	add	r3, r2
 800721e:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	791b      	ldrb	r3, [r3, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d004      	beq.n	8007232 <mem_malloc+0x142>
 8007228:	4b31      	ldr	r3, [pc, #196]	; (80072f0 <mem_malloc+0x200>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	429a      	cmp	r2, r3
 8007230:	d1f0      	bne.n	8007214 <mem_malloc+0x124>
          }
          lfree = cur;
 8007232:	4a2c      	ldr	r2, [pc, #176]	; (80072e4 <mem_malloc+0x1f4>)
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007238:	4b2a      	ldr	r3, [pc, #168]	; (80072e4 <mem_malloc+0x1f4>)
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	4b2c      	ldr	r3, [pc, #176]	; (80072f0 <mem_malloc+0x200>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	429a      	cmp	r2, r3
 8007242:	d00b      	beq.n	800725c <mem_malloc+0x16c>
 8007244:	4b27      	ldr	r3, [pc, #156]	; (80072e4 <mem_malloc+0x1f4>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	791b      	ldrb	r3, [r3, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d006      	beq.n	800725c <mem_malloc+0x16c>
 800724e:	4b29      	ldr	r3, [pc, #164]	; (80072f4 <mem_malloc+0x204>)
 8007250:	f240 22cf 	movw	r2, #719	; 0x2cf
 8007254:	4928      	ldr	r1, [pc, #160]	; (80072f8 <mem_malloc+0x208>)
 8007256:	4829      	ldr	r0, [pc, #164]	; (80072fc <mem_malloc+0x20c>)
 8007258:	f00b fbd2 	bl	8012a00 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800725c:	88fa      	ldrh	r2, [r7, #6]
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	4413      	add	r3, r2
 8007262:	3308      	adds	r3, #8
 8007264:	4a22      	ldr	r2, [pc, #136]	; (80072f0 <mem_malloc+0x200>)
 8007266:	6812      	ldr	r2, [r2, #0]
 8007268:	4293      	cmp	r3, r2
 800726a:	d906      	bls.n	800727a <mem_malloc+0x18a>
 800726c:	4b21      	ldr	r3, [pc, #132]	; (80072f4 <mem_malloc+0x204>)
 800726e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8007272:	4923      	ldr	r1, [pc, #140]	; (8007300 <mem_malloc+0x210>)
 8007274:	4821      	ldr	r0, [pc, #132]	; (80072fc <mem_malloc+0x20c>)
 8007276:	f00b fbc3 	bl	8012a00 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f003 0303 	and.w	r3, r3, #3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d006      	beq.n	8007292 <mem_malloc+0x1a2>
 8007284:	4b1b      	ldr	r3, [pc, #108]	; (80072f4 <mem_malloc+0x204>)
 8007286:	f240 22d5 	movw	r2, #725	; 0x2d5
 800728a:	491e      	ldr	r1, [pc, #120]	; (8007304 <mem_malloc+0x214>)
 800728c:	481b      	ldr	r0, [pc, #108]	; (80072fc <mem_malloc+0x20c>)
 800728e:	f00b fbb7 	bl	8012a00 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f003 0303 	and.w	r3, r3, #3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d006      	beq.n	80072aa <mem_malloc+0x1ba>
 800729c:	4b15      	ldr	r3, [pc, #84]	; (80072f4 <mem_malloc+0x204>)
 800729e:	f240 22d7 	movw	r2, #727	; 0x2d7
 80072a2:	4919      	ldr	r1, [pc, #100]	; (8007308 <mem_malloc+0x218>)
 80072a4:	4815      	ldr	r0, [pc, #84]	; (80072fc <mem_malloc+0x20c>)
 80072a6:	f00b fbab 	bl	8012a00 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	3308      	adds	r3, #8
 80072ae:	e015      	b.n	80072dc <mem_malloc+0x1ec>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80072b0:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <mem_malloc+0x1f8>)
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	8bfb      	ldrh	r3, [r7, #30]
 80072b6:	4413      	add	r3, r2
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80072bc:	8bfa      	ldrh	r2, [r7, #30]
 80072be:	88fb      	ldrh	r3, [r7, #6]
 80072c0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80072c4:	429a      	cmp	r2, r3
 80072c6:	f4ff af35 	bcc.w	8007134 <mem_malloc+0x44>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
 80072ca:	4b08      	ldr	r3, [pc, #32]	; (80072ec <mem_malloc+0x1fc>)
 80072cc:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80072d0:	3301      	adds	r3, #1
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	4b05      	ldr	r3, [pc, #20]	; (80072ec <mem_malloc+0x1fc>)
 80072d6:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3720      	adds	r7, #32
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	20004e60 	.word	0x20004e60
 80072e8:	20004e58 	.word	0x20004e58
 80072ec:	20007db4 	.word	0x20007db4
 80072f0:	20004e5c 	.word	0x20004e5c
 80072f4:	08016704 	.word	0x08016704
 80072f8:	08016860 	.word	0x08016860
 80072fc:	0801674c 	.word	0x0801674c
 8007300:	0801687c 	.word	0x0801687c
 8007304:	080168ac 	.word	0x080168ac
 8007308:	080168dc 	.word	0x080168dc

0800730c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	3303      	adds	r3, #3
 8007322:	f023 0303 	bic.w	r3, r3, #3
 8007326:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007328:	2300      	movs	r3, #0
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	e011      	b.n	8007352 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	889b      	ldrh	r3, [r3, #4]
 8007344:	461a      	mov	r2, r3
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	4413      	add	r3, r2
 800734a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	3301      	adds	r3, #1
 8007350:	60fb      	str	r3, [r7, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	88db      	ldrh	r3, [r3, #6]
 8007356:	461a      	mov	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4293      	cmp	r3, r2
 800735c:	dbe7      	blt.n	800732e <memp_init_pool+0x22>
      + MEMP_SANITY_REGION_AFTER_ALIGNED
#endif
    );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	88d2      	ldrh	r2, [r2, #6]
 8007366:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007368:	bf00      	nop
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	bc80      	pop	{r7}
 8007370:	4770      	bx	lr
	...

08007374 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800737a:	2300      	movs	r3, #0
 800737c:	80fb      	strh	r3, [r7, #6]
 800737e:	e014      	b.n	80073aa <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 8007380:	88fb      	ldrh	r3, [r7, #6]
 8007382:	4a0e      	ldr	r2, [pc, #56]	; (80073bc <memp_init+0x48>)
 8007384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007388:	4618      	mov	r0, r3
 800738a:	f7ff ffbf 	bl	800730c <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 800738e:	88fb      	ldrh	r3, [r7, #6]
 8007390:	4a0a      	ldr	r2, [pc, #40]	; (80073bc <memp_init+0x48>)
 8007392:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007396:	88fb      	ldrh	r3, [r7, #6]
 8007398:	6812      	ldr	r2, [r2, #0]
 800739a:	4909      	ldr	r1, [pc, #36]	; (80073c0 <memp_init+0x4c>)
 800739c:	332c      	adds	r3, #44	; 0x2c
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	440b      	add	r3, r1
 80073a2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80073a4:	88fb      	ldrh	r3, [r7, #6]
 80073a6:	3301      	adds	r3, #1
 80073a8:	80fb      	strh	r3, [r7, #6]
 80073aa:	88fb      	ldrh	r3, [r7, #6]
 80073ac:	2b08      	cmp	r3, #8
 80073ae:	d9e7      	bls.n	8007380 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80073b0:	bf00      	nop
 80073b2:	bf00      	nop
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	08018408 	.word	0x08018408
 80073c0:	20007db4 	.word	0x20007db4

080073c4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d026      	beq.n	8007428 <do_memp_malloc_pool+0x64>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	6812      	ldr	r2, [r2, #0]
 80073e2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d006      	beq.n	80073fc <do_memp_malloc_pool+0x38>
 80073ee:	4b14      	ldr	r3, [pc, #80]	; (8007440 <do_memp_malloc_pool+0x7c>)
 80073f0:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80073f4:	4913      	ldr	r1, [pc, #76]	; (8007444 <do_memp_malloc_pool+0x80>)
 80073f6:	4814      	ldr	r0, [pc, #80]	; (8007448 <do_memp_malloc_pool+0x84>)
 80073f8:	f00b fb02 	bl	8012a00 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	889a      	ldrh	r2, [r3, #4]
 8007402:	3201      	adds	r2, #1
 8007404:	b292      	uxth	r2, r2
 8007406:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	889a      	ldrh	r2, [r3, #4]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	88db      	ldrh	r3, [r3, #6]
 8007414:	429a      	cmp	r2, r3
 8007416:	d905      	bls.n	8007424 <do_memp_malloc_pool+0x60>
      desc->stats->max = desc->stats->used;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	8892      	ldrh	r2, [r2, #4]
 8007422:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	e006      	b.n	8007436 <do_memp_malloc_pool+0x72>
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
#if MEMP_STATS
    desc->stats->err++;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	881a      	ldrh	r2, [r3, #0]
 800742e:	3201      	adds	r2, #1
 8007430:	b292      	uxth	r2, r2
 8007432:	801a      	strh	r2, [r3, #0]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	08016900 	.word	0x08016900
 8007444:	08016930 	.word	0x08016930
 8007448:	08016954 	.word	0x08016954

0800744c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007456:	79fb      	ldrb	r3, [r7, #7]
 8007458:	2b08      	cmp	r3, #8
 800745a:	d908      	bls.n	800746e <memp_malloc+0x22>
 800745c:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <memp_malloc+0x3c>)
 800745e:	f240 1287 	movw	r2, #391	; 0x187
 8007462:	490a      	ldr	r1, [pc, #40]	; (800748c <memp_malloc+0x40>)
 8007464:	480a      	ldr	r0, [pc, #40]	; (8007490 <memp_malloc+0x44>)
 8007466:	f00b facb 	bl	8012a00 <iprintf>
 800746a:	2300      	movs	r3, #0
 800746c:	e008      	b.n	8007480 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800746e:	79fb      	ldrb	r3, [r7, #7]
 8007470:	4a08      	ldr	r2, [pc, #32]	; (8007494 <memp_malloc+0x48>)
 8007472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff ffa4 	bl	80073c4 <do_memp_malloc_pool>
 800747c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800747e:	68fb      	ldr	r3, [r7, #12]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	08016900 	.word	0x08016900
 800748c:	08016990 	.word	0x08016990
 8007490:	08016954 	.word	0x08016954
 8007494:	08018408 	.word	0x08018408

08007498 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	f003 0303 	and.w	r3, r3, #3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d006      	beq.n	80074ba <do_memp_free_pool+0x22>
 80074ac:	4b0d      	ldr	r3, [pc, #52]	; (80074e4 <do_memp_free_pool+0x4c>)
 80074ae:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80074b2:	490d      	ldr	r1, [pc, #52]	; (80074e8 <do_memp_free_pool+0x50>)
 80074b4:	480d      	ldr	r0, [pc, #52]	; (80074ec <do_memp_free_pool+0x54>)
 80074b6:	f00b faa3 	bl	8012a00 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	60fb      	str	r3, [r7, #12]
  memp_overflow_check_element_overflow(memp, desc);
  memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	889a      	ldrh	r2, [r3, #4]
 80074c4:	3a01      	subs	r2, #1
 80074c6:	b292      	uxth	r2, r2
 80074c8:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80074dc:	bf00      	nop
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	08016900 	.word	0x08016900
 80074e8:	080169b0 	.word	0x080169b0
 80074ec:	08016954 	.word	0x08016954

080074f0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	4603      	mov	r3, r0
 80074f8:	6039      	str	r1, [r7, #0]
 80074fa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80074fc:	79fb      	ldrb	r3, [r7, #7]
 80074fe:	2b08      	cmp	r3, #8
 8007500:	d907      	bls.n	8007512 <memp_free+0x22>
 8007502:	4b0c      	ldr	r3, [pc, #48]	; (8007534 <memp_free+0x44>)
 8007504:	f240 12db 	movw	r2, #475	; 0x1db
 8007508:	490b      	ldr	r1, [pc, #44]	; (8007538 <memp_free+0x48>)
 800750a:	480c      	ldr	r0, [pc, #48]	; (800753c <memp_free+0x4c>)
 800750c:	f00b fa78 	bl	8012a00 <iprintf>
 8007510:	e00c      	b.n	800752c <memp_free+0x3c>

  if (mem == NULL) {
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d008      	beq.n	800752a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007518:	79fb      	ldrb	r3, [r7, #7]
 800751a:	4a09      	ldr	r2, [pc, #36]	; (8007540 <memp_free+0x50>)
 800751c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	4618      	mov	r0, r3
 8007524:	f7ff ffb8 	bl	8007498 <do_memp_free_pool>
 8007528:	e000      	b.n	800752c <memp_free+0x3c>
    return;
 800752a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	08016900 	.word	0x08016900
 8007538:	080169d0 	.word	0x080169d0
 800753c:	08016954 	.word	0x08016954
 8007540:	08018408 	.word	0x08018408

08007544 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007544:	b480      	push	{r7}
 8007546:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007548:	bf00      	nop
 800754a:	46bd      	mov	sp, r7
 800754c:	bc80      	pop	{r7}
 800754e:	4770      	bx	lr

08007550 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d105      	bne.n	8007570 <netif_add+0x20>
 8007564:	4b21      	ldr	r3, [pc, #132]	; (80075ec <netif_add+0x9c>)
 8007566:	22fb      	movs	r2, #251	; 0xfb
 8007568:	4921      	ldr	r1, [pc, #132]	; (80075f0 <netif_add+0xa0>)
 800756a:	4822      	ldr	r0, [pc, #136]	; (80075f4 <netif_add+0xa4>)
 800756c:	f00b fa48 	bl	8012a00 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2203      	movs	r2, #3
 800758e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 800759e:	4b16      	ldr	r3, [pc, #88]	; (80075f8 <netif_add+0xa8>)
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	1c5a      	adds	r2, r3, #1
 80075a4:	b2d1      	uxtb	r1, r2
 80075a6:	4a14      	ldr	r2, [pc, #80]	; (80075f8 <netif_add+0xa8>)
 80075a8:	7011      	strb	r1, [r2, #0]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a3a      	ldr	r2, [r7, #32]
 80075b4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	68b9      	ldr	r1, [r7, #8]
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 f81f 	bl	8007600 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	4798      	blx	r3
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <netif_add+0x82>
    return NULL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	e007      	b.n	80075e2 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80075d2:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <netif_add+0xac>)
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80075da:	4a08      	ldr	r2, [pc, #32]	; (80075fc <netif_add+0xac>)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80075e0:	68fb      	ldr	r3, [r7, #12]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	080169ec 	.word	0x080169ec
 80075f0:	08016a20 	.word	0x08016a20
 80075f4:	08016a38 	.word	0x08016a38
 80075f8:	20007db0 	.word	0x20007db0
 80075fc:	20007da8 	.word	0x20007da8

08007600 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
 800760c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d003      	beq.n	800761c <netif_set_addr+0x1c>
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10c      	bne.n	8007636 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800761c:	68b9      	ldr	r1, [r7, #8]
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f000 f81a 	bl	8007658 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8007624:	6879      	ldr	r1, [r7, #4]
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 f861 	bl	80076ee <netif_set_netmask>
    netif_set_gw(netif, gw);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 f84a 	bl	80076c8 <netif_set_gw>
 8007634:	e00c      	b.n	8007650 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8007636:	6879      	ldr	r1, [r7, #4]
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 f858 	bl	80076ee <netif_set_netmask>
    netif_set_gw(netif, gw);
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 f841 	bl	80076c8 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8007646:	68b9      	ldr	r1, [r7, #8]
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 f805 	bl	8007658 <netif_set_ipaddr>
  }
}
 800764e:	bf00      	nop
 8007650:	bf00      	nop
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <netif_set_ipaddr+0x18>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	e002      	b.n	8007676 <netif_set_ipaddr+0x1e>
 8007670:	4b14      	ldr	r3, [pc, #80]	; (80076c4 <netif_set_ipaddr+0x6c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3304      	adds	r3, #4
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	429a      	cmp	r2, r3
 8007680:	d01c      	beq.n	80076bc <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3304      	adds	r3, #4
 8007686:	f107 020c 	add.w	r2, r7, #12
 800768a:	4611      	mov	r1, r2
 800768c:	4618      	mov	r0, r3
 800768e:	f002 f93b 	bl	8009908 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	3304      	adds	r3, #4
 8007696:	f107 020c 	add.w	r2, r7, #12
 800769a:	4611      	mov	r1, r2
 800769c:	4618      	mov	r0, r3
 800769e:	f006 f8ed 	bl	800d87c <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d002      	beq.n	80076ae <netif_set_ipaddr+0x56>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	e000      	b.n	80076b0 <netif_set_ipaddr+0x58>
 80076ae:	2300      	movs	r3, #0
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80076b4:	2101      	movs	r1, #1
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f85d 	bl	8007776 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80076bc:	bf00      	nop
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	0801846c 	.word	0x0801846c

080076c8 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <netif_set_gw+0x16>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	e000      	b.n	80076e0 <netif_set_gw+0x18>
 80076de:	2300      	movs	r3, #0
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bc80      	pop	{r7}
 80076ec:	4770      	bx	lr

080076ee <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <netif_set_netmask+0x16>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	e000      	b.n	8007706 <netif_set_netmask+0x18>
 8007704:	2300      	movs	r3, #0
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	bc80      	pop	{r7}
 8007712:	4770      	bx	lr

08007714 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800771c:	4a03      	ldr	r2, [pc, #12]	; (800772c <netif_set_default+0x18>)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007722:	bf00      	nop
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	bc80      	pop	{r7}
 800772a:	4770      	bx	lr
 800772c:	20007dac 	.word	0x20007dac

08007730 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	d113      	bne.n	800776e <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800774c:	f043 0301 	orr.w	r3, r3, #1
 8007750:	b2da      	uxtb	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800775e:	f003 0304 	and.w	r3, r3, #4
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8007766:	2103      	movs	r1, #3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f804 	bl	8007776 <netif_issue_reports>
    }
  }
}
 800776e:	bf00      	nop
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	460b      	mov	r3, r1
 8007780:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007782:	78fb      	ldrb	r3, [r7, #3]
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	2b00      	cmp	r3, #0
 800778a:	d011      	beq.n	80077b0 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3304      	adds	r3, #4
 8007790:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00c      	beq.n	80077b0 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800779c:	f003 0308 	and.w	r3, r3, #8
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d005      	beq.n	80077b0 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	3304      	adds	r3, #4
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f006 ffda 	bl	800e764 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80077b0:	bf00      	nop
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d012      	beq.n	80077f4 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80077d4:	f023 0301 	bic.w	r3, r3, #1
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80077e6:	f003 0308 	and.w	r3, r3, #8
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d002      	beq.n	80077f4 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f006 fb3c 	bl	800de6c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80077f4:	bf00      	nop
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  if (netif) {
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	61da      	str	r2, [r3, #28]
  }
}
 8007812:	bf00      	nop
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	bc80      	pop	{r7}
 800781a:	4770      	bx	lr

0800781c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007822:	4b0e      	ldr	r3, [pc, #56]	; (800785c <pbuf_free_ooseq+0x40>)
 8007824:	2200      	movs	r2, #0
 8007826:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007828:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <pbuf_free_ooseq+0x44>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	607b      	str	r3, [r7, #4]
 800782e:	e00f      	b.n	8007850 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007834:	2b00      	cmp	r3, #0
 8007836:	d008      	beq.n	800784a <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783c:	4618      	mov	r0, r3
 800783e:	f001 fd76 	bl	800932e <tcp_segs_free>
      pcb->ooseq = NULL;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8007848:	e005      	b.n	8007856 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	607b      	str	r3, [r7, #4]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1ec      	bne.n	8007830 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	20007db1 	.word	0x20007db1
 8007860:	20007e98 	.word	0x20007e98

08007864 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007868:	4b03      	ldr	r3, [pc, #12]	; (8007878 <pbuf_pool_is_empty+0x14>)
 800786a:	2201      	movs	r2, #1
 800786c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800786e:	bf00      	nop
 8007870:	46bd      	mov	sp, r7
 8007872:	bc80      	pop	{r7}
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	20007db1 	.word	0x20007db1

0800787c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	71fb      	strb	r3, [r7, #7]
 8007886:	460b      	mov	r3, r1
 8007888:	80bb      	strh	r3, [r7, #4]
 800788a:	4613      	mov	r3, r2
 800788c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	2b04      	cmp	r3, #4
 8007892:	d81c      	bhi.n	80078ce <pbuf_alloc+0x52>
 8007894:	a201      	add	r2, pc, #4	; (adr r2, 800789c <pbuf_alloc+0x20>)
 8007896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789a:	bf00      	nop
 800789c:	080078b1 	.word	0x080078b1
 80078a0:	080078b7 	.word	0x080078b7
 80078a4:	080078bd 	.word	0x080078bd
 80078a8:	080078c3 	.word	0x080078c3
 80078ac:	080078c9 	.word	0x080078c9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80078b0:	2336      	movs	r3, #54	; 0x36
 80078b2:	82fb      	strh	r3, [r7, #22]
    break;
 80078b4:	e014      	b.n	80078e0 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80078b6:	2322      	movs	r3, #34	; 0x22
 80078b8:	82fb      	strh	r3, [r7, #22]
    break;
 80078ba:	e011      	b.n	80078e0 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80078bc:	230e      	movs	r3, #14
 80078be:	82fb      	strh	r3, [r7, #22]
    break;
 80078c0:	e00e      	b.n	80078e0 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80078c2:	2300      	movs	r3, #0
 80078c4:	82fb      	strh	r3, [r7, #22]
    break;
 80078c6:	e00b      	b.n	80078e0 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 80078c8:	2300      	movs	r3, #0
 80078ca:	82fb      	strh	r3, [r7, #22]
    break;
 80078cc:	e008      	b.n	80078e0 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80078ce:	4ba1      	ldr	r3, [pc, #644]	; (8007b54 <pbuf_alloc+0x2d8>)
 80078d0:	f44f 728b 	mov.w	r2, #278	; 0x116
 80078d4:	49a0      	ldr	r1, [pc, #640]	; (8007b58 <pbuf_alloc+0x2dc>)
 80078d6:	48a1      	ldr	r0, [pc, #644]	; (8007b5c <pbuf_alloc+0x2e0>)
 80078d8:	f00b f892 	bl	8012a00 <iprintf>
    return NULL;
 80078dc:	2300      	movs	r3, #0
 80078de:	e15c      	b.n	8007b9a <pbuf_alloc+0x31e>
  }

  switch (type) {
 80078e0:	79bb      	ldrb	r3, [r7, #6]
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d00d      	beq.n	8007902 <pbuf_alloc+0x86>
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	f300 8146 	bgt.w	8007b78 <pbuf_alloc+0x2fc>
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 80d0 	beq.w	8007a92 <pbuf_alloc+0x216>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f2c0 8140 	blt.w	8007b78 <pbuf_alloc+0x2fc>
 80078f8:	3b01      	subs	r3, #1
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	f200 813c 	bhi.w	8007b78 <pbuf_alloc+0x2fc>
 8007900:	e10d      	b.n	8007b1e <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007902:	2008      	movs	r0, #8
 8007904:	f7ff fda2 	bl	800744c <memp_malloc>
 8007908:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d103      	bne.n	8007918 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8007910:	f7ff ffa8 	bl	8007864 <pbuf_pool_is_empty>
      return NULL;
 8007914:	2300      	movs	r3, #0
 8007916:	e140      	b.n	8007b9a <pbuf_alloc+0x31e>
    }
    p->type = type;
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	79ba      	ldrb	r2, [r7, #6]
 800791c:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	2200      	movs	r2, #0
 8007922:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8007924:	8afb      	ldrh	r3, [r7, #22]
 8007926:	3310      	adds	r3, #16
 8007928:	69fa      	ldr	r2, [r7, #28]
 800792a:	4413      	add	r3, r2
 800792c:	3303      	adds	r3, #3
 800792e:	f023 0303 	bic.w	r3, r3, #3
 8007932:	461a      	mov	r2, r3
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f003 0303 	and.w	r3, r3, #3
 8007940:	2b00      	cmp	r3, #0
 8007942:	d006      	beq.n	8007952 <pbuf_alloc+0xd6>
 8007944:	4b83      	ldr	r3, [pc, #524]	; (8007b54 <pbuf_alloc+0x2d8>)
 8007946:	f44f 7294 	mov.w	r2, #296	; 0x128
 800794a:	4985      	ldr	r1, [pc, #532]	; (8007b60 <pbuf_alloc+0x2e4>)
 800794c:	4883      	ldr	r0, [pc, #524]	; (8007b5c <pbuf_alloc+0x2e0>)
 800794e:	f00b f857 	bl	8012a00 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	88ba      	ldrh	r2, [r7, #4]
 8007956:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8007958:	8afb      	ldrh	r3, [r7, #22]
 800795a:	3303      	adds	r3, #3
 800795c:	f023 0303 	bic.w	r3, r3, #3
 8007960:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8007964:	88bb      	ldrh	r3, [r7, #4]
 8007966:	4293      	cmp	r3, r2
 8007968:	bf28      	it	cs
 800796a:	4613      	movcs	r3, r2
 800796c:	b29a      	uxth	r2, r3
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	69fa      	ldr	r2, [r7, #28]
 8007978:	8952      	ldrh	r2, [r2, #10]
 800797a:	441a      	add	r2, r3
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007982:	429a      	cmp	r2, r3
 8007984:	d906      	bls.n	8007994 <pbuf_alloc+0x118>
 8007986:	4b73      	ldr	r3, [pc, #460]	; (8007b54 <pbuf_alloc+0x2d8>)
 8007988:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800798c:	4975      	ldr	r1, [pc, #468]	; (8007b64 <pbuf_alloc+0x2e8>)
 800798e:	4873      	ldr	r0, [pc, #460]	; (8007b5c <pbuf_alloc+0x2e0>)
 8007990:	f00b f836 	bl	8012a00 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007994:	8afb      	ldrh	r3, [r7, #22]
 8007996:	3303      	adds	r3, #3
 8007998:	f023 0303 	bic.w	r3, r3, #3
 800799c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80079a0:	d106      	bne.n	80079b0 <pbuf_alloc+0x134>
 80079a2:	4b6c      	ldr	r3, [pc, #432]	; (8007b54 <pbuf_alloc+0x2d8>)
 80079a4:	f240 1231 	movw	r2, #305	; 0x131
 80079a8:	496f      	ldr	r1, [pc, #444]	; (8007b68 <pbuf_alloc+0x2ec>)
 80079aa:	486c      	ldr	r0, [pc, #432]	; (8007b5c <pbuf_alloc+0x2e0>)
 80079ac:	f00b f828 	bl	8012a00 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	2201      	movs	r2, #1
 80079b4:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 80079ba:	88bb      	ldrh	r3, [r7, #4]
 80079bc:	69fa      	ldr	r2, [r7, #28]
 80079be:	8952      	ldrh	r2, [r2, #10]
 80079c0:	1a9b      	subs	r3, r3, r2
 80079c2:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 80079c4:	e061      	b.n	8007a8a <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80079c6:	2008      	movs	r0, #8
 80079c8:	f7ff fd40 	bl	800744c <memp_malloc>
 80079cc:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d106      	bne.n	80079e2 <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 80079d4:	f7ff ff46 	bl	8007864 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 80079d8:	69f8      	ldr	r0, [r7, #28]
 80079da:	f000 fac7 	bl	8007f6c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	e0db      	b.n	8007b9a <pbuf_alloc+0x31e>
      }
      q->type = type;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	79ba      	ldrb	r2, [r7, #6]
 80079e6:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007a00:	4293      	cmp	r3, r2
 8007a02:	dd06      	ble.n	8007a12 <pbuf_alloc+0x196>
 8007a04:	4b53      	ldr	r3, [pc, #332]	; (8007b54 <pbuf_alloc+0x2d8>)
 8007a06:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8007a0a:	4958      	ldr	r1, [pc, #352]	; (8007b6c <pbuf_alloc+0x2f0>)
 8007a0c:	4853      	ldr	r0, [pc, #332]	; (8007b5c <pbuf_alloc+0x2e0>)
 8007a0e:	f00a fff7 	bl	8012a00 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8007a22:	bf28      	it	cs
 8007a24:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f103 0210 	add.w	r2, r3, #16
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d006      	beq.n	8007a52 <pbuf_alloc+0x1d6>
 8007a44:	4b43      	ldr	r3, [pc, #268]	; (8007b54 <pbuf_alloc+0x2d8>)
 8007a46:	f240 1251 	movw	r2, #337	; 0x151
 8007a4a:	4949      	ldr	r1, [pc, #292]	; (8007b70 <pbuf_alloc+0x2f4>)
 8007a4c:	4843      	ldr	r0, [pc, #268]	; (8007b5c <pbuf_alloc+0x2e0>)
 8007a4e:	f00a ffd7 	bl	8012a00 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	69fa      	ldr	r2, [r7, #28]
 8007a58:	8952      	ldrh	r2, [r2, #10]
 8007a5a:	441a      	add	r2, r3
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d906      	bls.n	8007a74 <pbuf_alloc+0x1f8>
 8007a66:	4b3b      	ldr	r3, [pc, #236]	; (8007b54 <pbuf_alloc+0x2d8>)
 8007a68:	f240 1253 	movw	r2, #339	; 0x153
 8007a6c:	493d      	ldr	r1, [pc, #244]	; (8007b64 <pbuf_alloc+0x2e8>)
 8007a6e:	483b      	ldr	r0, [pc, #236]	; (8007b5c <pbuf_alloc+0x2e0>)
 8007a70:	f00a ffc6 	bl	8012a00 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2201      	movs	r2, #1
 8007a78:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	895b      	ldrh	r3, [r3, #10]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	1a9b      	subs	r3, r3, r2
 8007a84:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	dc9a      	bgt.n	80079c6 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8007a90:	e07c      	b.n	8007b8c <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8007a92:	8afb      	ldrh	r3, [r7, #22]
 8007a94:	3313      	adds	r3, #19
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	f023 0303 	bic.w	r3, r3, #3
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	88bb      	ldrh	r3, [r7, #4]
 8007aa0:	3303      	adds	r3, #3
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	f023 0303 	bic.w	r3, r3, #3
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	4413      	add	r3, r2
 8007aac:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8007aae:	897a      	ldrh	r2, [r7, #10]
 8007ab0:	88bb      	ldrh	r3, [r7, #4]
 8007ab2:	3303      	adds	r3, #3
 8007ab4:	f023 0303 	bic.w	r3, r3, #3
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d201      	bcs.n	8007ac0 <pbuf_alloc+0x244>
        return NULL;
 8007abc:	2300      	movs	r3, #0
 8007abe:	e06c      	b.n	8007b9a <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8007ac0:	897b      	ldrh	r3, [r7, #10]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7ff fb14 	bl	80070f0 <mem_malloc>
 8007ac8:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <pbuf_alloc+0x258>
      return NULL;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	e062      	b.n	8007b9a <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8007ad4:	8afb      	ldrh	r3, [r7, #22]
 8007ad6:	3310      	adds	r3, #16
 8007ad8:	69fa      	ldr	r2, [r7, #28]
 8007ada:	4413      	add	r3, r2
 8007adc:	3303      	adds	r3, #3
 8007ade:	f023 0303 	bic.w	r3, r3, #3
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	88ba      	ldrh	r2, [r7, #4]
 8007aec:	811a      	strh	r2, [r3, #8]
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	891a      	ldrh	r2, [r3, #8]
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]
    p->type = type;
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	79ba      	ldrb	r2, [r7, #6]
 8007b00:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f003 0303 	and.w	r3, r3, #3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d03d      	beq.n	8007b8a <pbuf_alloc+0x30e>
 8007b0e:	4b11      	ldr	r3, [pc, #68]	; (8007b54 <pbuf_alloc+0x2d8>)
 8007b10:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8007b14:	4917      	ldr	r1, [pc, #92]	; (8007b74 <pbuf_alloc+0x2f8>)
 8007b16:	4811      	ldr	r0, [pc, #68]	; (8007b5c <pbuf_alloc+0x2e0>)
 8007b18:	f00a ff72 	bl	8012a00 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8007b1c:	e035      	b.n	8007b8a <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007b1e:	2007      	movs	r0, #7
 8007b20:	f7ff fc94 	bl	800744c <memp_malloc>
 8007b24:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d101      	bne.n	8007b30 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	e034      	b.n	8007b9a <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	2200      	movs	r2, #0
 8007b34:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	88ba      	ldrh	r2, [r7, #4]
 8007b3a:	811a      	strh	r2, [r3, #8]
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	891a      	ldrh	r2, [r3, #8]
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	2200      	movs	r2, #0
 8007b48:	601a      	str	r2, [r3, #0]
    p->type = type;
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	79ba      	ldrb	r2, [r7, #6]
 8007b4e:	731a      	strb	r2, [r3, #12]
    break;
 8007b50:	e01c      	b.n	8007b8c <pbuf_alloc+0x310>
 8007b52:	bf00      	nop
 8007b54:	08016a60 	.word	0x08016a60
 8007b58:	08016a90 	.word	0x08016a90
 8007b5c:	08016aac 	.word	0x08016aac
 8007b60:	08016ad4 	.word	0x08016ad4
 8007b64:	08016b04 	.word	0x08016b04
 8007b68:	08016b38 	.word	0x08016b38
 8007b6c:	08016b6c 	.word	0x08016b6c
 8007b70:	08016b80 	.word	0x08016b80
 8007b74:	08016bb0 	.word	0x08016bb0
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007b78:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <pbuf_alloc+0x328>)
 8007b7a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8007b7e:	490a      	ldr	r1, [pc, #40]	; (8007ba8 <pbuf_alloc+0x32c>)
 8007b80:	480a      	ldr	r0, [pc, #40]	; (8007bac <pbuf_alloc+0x330>)
 8007b82:	f00a ff3d 	bl	8012a00 <iprintf>
    return NULL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	e007      	b.n	8007b9a <pbuf_alloc+0x31e>
    break;
 8007b8a:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	2200      	movs	r2, #0
 8007b96:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007b98:	69fb      	ldr	r3, [r7, #28]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3720      	adds	r7, #32
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	08016a60 	.word	0x08016a60
 8007ba8:	08016bdc 	.word	0x08016bdc
 8007bac:	08016aac 	.word	0x08016aac

08007bb0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	4603      	mov	r3, r0
 8007bba:	71fb      	strb	r3, [r7, #7]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	80bb      	strh	r3, [r7, #4]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8007bc4:	79fb      	ldrb	r3, [r7, #7]
 8007bc6:	2b04      	cmp	r3, #4
 8007bc8:	d81b      	bhi.n	8007c02 <pbuf_alloced_custom+0x52>
 8007bca:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <pbuf_alloced_custom+0x20>)
 8007bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd0:	08007be5 	.word	0x08007be5
 8007bd4:	08007beb 	.word	0x08007beb
 8007bd8:	08007bf1 	.word	0x08007bf1
 8007bdc:	08007bf7 	.word	0x08007bf7
 8007be0:	08007bfd 	.word	0x08007bfd
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8007be4:	2336      	movs	r3, #54	; 0x36
 8007be6:	81fb      	strh	r3, [r7, #14]
    break;
 8007be8:	e014      	b.n	8007c14 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8007bea:	2322      	movs	r3, #34	; 0x22
 8007bec:	81fb      	strh	r3, [r7, #14]
    break;
 8007bee:	e011      	b.n	8007c14 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8007bf0:	230e      	movs	r3, #14
 8007bf2:	81fb      	strh	r3, [r7, #14]
    break;
 8007bf4:	e00e      	b.n	8007c14 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	81fb      	strh	r3, [r7, #14]
    break;
 8007bfa:	e00b      	b.n	8007c14 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	81fb      	strh	r3, [r7, #14]
    break;
 8007c00:	e008      	b.n	8007c14 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8007c02:	4b1d      	ldr	r3, [pc, #116]	; (8007c78 <pbuf_alloced_custom+0xc8>)
 8007c04:	f240 12c5 	movw	r2, #453	; 0x1c5
 8007c08:	491c      	ldr	r1, [pc, #112]	; (8007c7c <pbuf_alloced_custom+0xcc>)
 8007c0a:	481d      	ldr	r0, [pc, #116]	; (8007c80 <pbuf_alloced_custom+0xd0>)
 8007c0c:	f00a fef8 	bl	8012a00 <iprintf>
    return NULL;
 8007c10:	2300      	movs	r3, #0
 8007c12:	e02d      	b.n	8007c70 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007c14:	89fb      	ldrh	r3, [r7, #14]
 8007c16:	3303      	adds	r3, #3
 8007c18:	f023 0203 	bic.w	r2, r3, #3
 8007c1c:	88bb      	ldrh	r3, [r7, #4]
 8007c1e:	441a      	add	r2, r3
 8007c20:	8bbb      	ldrh	r3, [r7, #28]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d901      	bls.n	8007c2a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	e022      	b.n	8007c70 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d008      	beq.n	8007c48 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007c36:	89fb      	ldrh	r3, [r7, #14]
 8007c38:	3303      	adds	r3, #3
 8007c3a:	f023 0303 	bic.w	r3, r3, #3
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	441a      	add	r2, r3
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	605a      	str	r2, [r3, #4]
 8007c46:	e002      	b.n	8007c4e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2202      	movs	r2, #2
 8007c52:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	88ba      	ldrh	r2, [r7, #4]
 8007c58:	811a      	strh	r2, [r3, #8]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	891a      	ldrh	r2, [r3, #8]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	79ba      	ldrb	r2, [r7, #6]
 8007c66:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8007c6e:	683b      	ldr	r3, [r7, #0]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	08016a60 	.word	0x08016a60
 8007c7c:	08016bf8 	.word	0x08016bf8
 8007c80:	08016aac 	.word	0x08016aac

08007c84 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d106      	bne.n	8007ca4 <pbuf_realloc+0x20>
 8007c96:	4b4b      	ldr	r3, [pc, #300]	; (8007dc4 <pbuf_realloc+0x140>)
 8007c98:	f240 12f3 	movw	r2, #499	; 0x1f3
 8007c9c:	494a      	ldr	r1, [pc, #296]	; (8007dc8 <pbuf_realloc+0x144>)
 8007c9e:	484b      	ldr	r0, [pc, #300]	; (8007dcc <pbuf_realloc+0x148>)
 8007ca0:	f00a feae 	bl	8012a00 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	7b1b      	ldrb	r3, [r3, #12]
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d012      	beq.n	8007cd2 <pbuf_realloc+0x4e>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	7b1b      	ldrb	r3, [r3, #12]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d00e      	beq.n	8007cd2 <pbuf_realloc+0x4e>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	7b1b      	ldrb	r3, [r3, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00a      	beq.n	8007cd2 <pbuf_realloc+0x4e>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	7b1b      	ldrb	r3, [r3, #12]
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d006      	beq.n	8007cd2 <pbuf_realloc+0x4e>
 8007cc4:	4b3f      	ldr	r3, [pc, #252]	; (8007dc4 <pbuf_realloc+0x140>)
 8007cc6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007cca:	4941      	ldr	r1, [pc, #260]	; (8007dd0 <pbuf_realloc+0x14c>)
 8007ccc:	483f      	ldr	r0, [pc, #252]	; (8007dcc <pbuf_realloc+0x148>)
 8007cce:	f00a fe97 	bl	8012a00 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	891b      	ldrh	r3, [r3, #8]
 8007cd6:	887a      	ldrh	r2, [r7, #2]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d26e      	bcs.n	8007dba <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8007cdc:	887b      	ldrh	r3, [r7, #2]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	8912      	ldrh	r2, [r2, #8]
 8007ce2:	1a9b      	subs	r3, r3, r2
 8007ce4:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007ce6:	887b      	ldrh	r3, [r7, #2]
 8007ce8:	827b      	strh	r3, [r7, #18]
  q = p;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007cee:	e025      	b.n	8007d3c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	895b      	ldrh	r3, [r3, #10]
 8007cf4:	8a7a      	ldrh	r2, [r7, #18]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007d00:	4293      	cmp	r3, r2
 8007d02:	dd06      	ble.n	8007d12 <pbuf_realloc+0x8e>
 8007d04:	4b2f      	ldr	r3, [pc, #188]	; (8007dc4 <pbuf_realloc+0x140>)
 8007d06:	f240 220b 	movw	r2, #523	; 0x20b
 8007d0a:	4932      	ldr	r1, [pc, #200]	; (8007dd4 <pbuf_realloc+0x150>)
 8007d0c:	482f      	ldr	r0, [pc, #188]	; (8007dcc <pbuf_realloc+0x148>)
 8007d0e:	f00a fe77 	bl	8012a00 <iprintf>
    q->tot_len += (u16_t)grow;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	891a      	ldrh	r2, [r3, #8]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	4413      	add	r3, r2
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d106      	bne.n	8007d3c <pbuf_realloc+0xb8>
 8007d2e:	4b25      	ldr	r3, [pc, #148]	; (8007dc4 <pbuf_realloc+0x140>)
 8007d30:	f240 220f 	movw	r2, #527	; 0x20f
 8007d34:	4928      	ldr	r1, [pc, #160]	; (8007dd8 <pbuf_realloc+0x154>)
 8007d36:	4825      	ldr	r0, [pc, #148]	; (8007dcc <pbuf_realloc+0x148>)
 8007d38:	f00a fe62 	bl	8012a00 <iprintf>
  while (rem_len > q->len) {
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	895b      	ldrh	r3, [r3, #10]
 8007d40:	8a7a      	ldrh	r2, [r7, #18]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d8d4      	bhi.n	8007cf0 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	7b1b      	ldrb	r3, [r3, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d121      	bne.n	8007d92 <pbuf_realloc+0x10e>
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	895b      	ldrh	r3, [r3, #10]
 8007d52:	8a7a      	ldrh	r2, [r7, #18]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d01c      	beq.n	8007d92 <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	7b5b      	ldrb	r3, [r3, #13]
 8007d5c:	f003 0302 	and.w	r3, r3, #2
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d116      	bne.n	8007d92 <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	8a7b      	ldrh	r3, [r7, #18]
 8007d70:	4413      	add	r3, r2
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	4619      	mov	r1, r3
 8007d76:	6978      	ldr	r0, [r7, #20]
 8007d78:	f7ff f8bc 	bl	8006ef4 <mem_trim>
 8007d7c:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d106      	bne.n	8007d92 <pbuf_realloc+0x10e>
 8007d84:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <pbuf_realloc+0x140>)
 8007d86:	f240 221d 	movw	r2, #541	; 0x21d
 8007d8a:	4914      	ldr	r1, [pc, #80]	; (8007ddc <pbuf_realloc+0x158>)
 8007d8c:	480f      	ldr	r0, [pc, #60]	; (8007dcc <pbuf_realloc+0x148>)
 8007d8e:	f00a fe37 	bl	8012a00 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	8a7a      	ldrh	r2, [r7, #18]
 8007d96:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	895a      	ldrh	r2, [r3, #10]
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d004      	beq.n	8007db2 <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 f8dd 	bl	8007f6c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2200      	movs	r2, #0
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	e000      	b.n	8007dbc <pbuf_realloc+0x138>
    return;
 8007dba:	bf00      	nop

}
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	08016a60 	.word	0x08016a60
 8007dc8:	08016c1c 	.word	0x08016c1c
 8007dcc:	08016aac 	.word	0x08016aac
 8007dd0:	08016c34 	.word	0x08016c34
 8007dd4:	08016c50 	.word	0x08016c50
 8007dd8:	08016c64 	.word	0x08016c64
 8007ddc:	08016c7c 	.word	0x08016c7c

08007de0 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	807b      	strh	r3, [r7, #2]
 8007dec:	4613      	mov	r3, r2
 8007dee:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d106      	bne.n	8007e04 <pbuf_header_impl+0x24>
 8007df6:	4b46      	ldr	r3, [pc, #280]	; (8007f10 <pbuf_header_impl+0x130>)
 8007df8:	f240 223f 	movw	r2, #575	; 0x23f
 8007dfc:	4945      	ldr	r1, [pc, #276]	; (8007f14 <pbuf_header_impl+0x134>)
 8007dfe:	4846      	ldr	r0, [pc, #280]	; (8007f18 <pbuf_header_impl+0x138>)
 8007e00:	f00a fdfe 	bl	8012a00 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8007e04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <pbuf_header_impl+0x32>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <pbuf_header_impl+0x36>
    return 0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	e078      	b.n	8007f08 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8007e16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	da10      	bge.n	8007e40 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8007e1e:	887b      	ldrh	r3, [r7, #2]
 8007e20:	425b      	negs	r3, r3
 8007e22:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	895b      	ldrh	r3, [r3, #10]
 8007e28:	89fa      	ldrh	r2, [r7, #14]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d90a      	bls.n	8007e44 <pbuf_header_impl+0x64>
 8007e2e:	4b38      	ldr	r3, [pc, #224]	; (8007f10 <pbuf_header_impl+0x130>)
 8007e30:	f240 2247 	movw	r2, #583	; 0x247
 8007e34:	4939      	ldr	r1, [pc, #228]	; (8007f1c <pbuf_header_impl+0x13c>)
 8007e36:	4838      	ldr	r0, [pc, #224]	; (8007f18 <pbuf_header_impl+0x138>)
 8007e38:	f00a fde2 	bl	8012a00 <iprintf>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e063      	b.n	8007f08 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8007e40:	887b      	ldrh	r3, [r7, #2]
 8007e42:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	7b1b      	ldrb	r3, [r3, #12]
 8007e48:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8007e50:	89bb      	ldrh	r3, [r7, #12]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <pbuf_header_impl+0x7c>
 8007e56:	89bb      	ldrh	r3, [r7, #12]
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d112      	bne.n	8007e82 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e64:	425b      	negs	r3, r3
 8007e66:	441a      	add	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3310      	adds	r3, #16
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d238      	bcs.n	8007eea <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e042      	b.n	8007f08 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8007e82:	89bb      	ldrh	r3, [r7, #12]
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d002      	beq.n	8007e8e <pbuf_header_impl+0xae>
 8007e88:	89bb      	ldrh	r3, [r7, #12]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d124      	bne.n	8007ed8 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8007e8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	da0d      	bge.n	8007eb2 <pbuf_header_impl+0xd2>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	895b      	ldrh	r3, [r3, #10]
 8007e9a:	89fa      	ldrh	r2, [r7, #14]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d808      	bhi.n	8007eb2 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007ea8:	425b      	negs	r3, r3
 8007eaa:	441a      	add	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	605a      	str	r2, [r3, #4]
 8007eb0:	e011      	b.n	8007ed6 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8007eb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	dd0b      	ble.n	8007ed2 <pbuf_header_impl+0xf2>
 8007eba:	787b      	ldrb	r3, [r7, #1]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d008      	beq.n	8007ed2 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007ec8:	425b      	negs	r3, r3
 8007eca:	441a      	add	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	605a      	str	r2, [r3, #4]
 8007ed0:	e001      	b.n	8007ed6 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e018      	b.n	8007f08 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8007ed6:	e008      	b.n	8007eea <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8007ed8:	4b0d      	ldr	r3, [pc, #52]	; (8007f10 <pbuf_header_impl+0x130>)
 8007eda:	f240 2277 	movw	r2, #631	; 0x277
 8007ede:	4910      	ldr	r1, [pc, #64]	; (8007f20 <pbuf_header_impl+0x140>)
 8007ee0:	480d      	ldr	r0, [pc, #52]	; (8007f18 <pbuf_header_impl+0x138>)
 8007ee2:	f00a fd8d 	bl	8012a00 <iprintf>
    return 1;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e00e      	b.n	8007f08 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	895a      	ldrh	r2, [r3, #10]
 8007eee:	887b      	ldrh	r3, [r7, #2]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	891a      	ldrh	r2, [r3, #8]
 8007efc:	887b      	ldrh	r3, [r7, #2]
 8007efe:	4413      	add	r3, r2
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	08016a60 	.word	0x08016a60
 8007f14:	08016c98 	.word	0x08016c98
 8007f18:	08016aac 	.word	0x08016aac
 8007f1c:	08016ca4 	.word	0x08016ca4
 8007f20:	08016cc4 	.word	0x08016cc4

08007f24 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8007f30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f34:	2200      	movs	r2, #0
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7ff ff51 	bl	8007de0 <pbuf_header_impl>
 8007f3e:	4603      	mov	r3, r0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8007f54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7ff ff3f 	bl	8007de0 <pbuf_header_impl>
 8007f62:	4603      	mov	r3, r0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10b      	bne.n	8007f92 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d106      	bne.n	8007f8e <pbuf_free+0x22>
 8007f80:	4b3e      	ldr	r3, [pc, #248]	; (800807c <pbuf_free+0x110>)
 8007f82:	f240 22d2 	movw	r2, #722	; 0x2d2
 8007f86:	493e      	ldr	r1, [pc, #248]	; (8008080 <pbuf_free+0x114>)
 8007f88:	483e      	ldr	r0, [pc, #248]	; (8008084 <pbuf_free+0x118>)
 8007f8a:	f00a fd39 	bl	8012a00 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	e070      	b.n	8008074 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	7b1b      	ldrb	r3, [r3, #12]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d012      	beq.n	8007fc0 <pbuf_free+0x54>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	7b1b      	ldrb	r3, [r3, #12]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d00e      	beq.n	8007fc0 <pbuf_free+0x54>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	7b1b      	ldrb	r3, [r3, #12]
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d00a      	beq.n	8007fc0 <pbuf_free+0x54>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	7b1b      	ldrb	r3, [r3, #12]
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	d006      	beq.n	8007fc0 <pbuf_free+0x54>
 8007fb2:	4b32      	ldr	r3, [pc, #200]	; (800807c <pbuf_free+0x110>)
 8007fb4:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007fb8:	4933      	ldr	r1, [pc, #204]	; (8008088 <pbuf_free+0x11c>)
 8007fba:	4832      	ldr	r0, [pc, #200]	; (8008084 <pbuf_free+0x118>)
 8007fbc:	f00a fd20 	bl	8012a00 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007fc4:	e052      	b.n	800806c <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	89db      	ldrh	r3, [r3, #14]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d106      	bne.n	8007fdc <pbuf_free+0x70>
 8007fce:	4b2b      	ldr	r3, [pc, #172]	; (800807c <pbuf_free+0x110>)
 8007fd0:	f240 22eb 	movw	r2, #747	; 0x2eb
 8007fd4:	492d      	ldr	r1, [pc, #180]	; (800808c <pbuf_free+0x120>)
 8007fd6:	482b      	ldr	r0, [pc, #172]	; (8008084 <pbuf_free+0x118>)
 8007fd8:	f00a fd12 	bl	8012a00 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	89db      	ldrh	r3, [r3, #14]
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	81da      	strh	r2, [r3, #14]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	89db      	ldrh	r3, [r3, #14]
 8007fec:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007fee:	8abb      	ldrh	r3, [r7, #20]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d139      	bne.n	8008068 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	7b1b      	ldrb	r3, [r3, #12]
 8007ffe:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	7b5b      	ldrb	r3, [r3, #13]
 8008004:	f003 0302 	and.w	r3, r3, #2
 8008008:	2b00      	cmp	r3, #0
 800800a:	d011      	beq.n	8008030 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d106      	bne.n	8008026 <pbuf_free+0xba>
 8008018:	4b18      	ldr	r3, [pc, #96]	; (800807c <pbuf_free+0x110>)
 800801a:	f240 22f9 	movw	r2, #761	; 0x2f9
 800801e:	491c      	ldr	r1, [pc, #112]	; (8008090 <pbuf_free+0x124>)
 8008020:	4818      	ldr	r0, [pc, #96]	; (8008084 <pbuf_free+0x118>)
 8008022:	f00a fced 	bl	8012a00 <iprintf>
        pc->custom_free_function(p);
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	4798      	blx	r3
 800802e:	e015      	b.n	800805c <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8008030:	89fb      	ldrh	r3, [r7, #14]
 8008032:	2b03      	cmp	r3, #3
 8008034:	d104      	bne.n	8008040 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8008036:	6879      	ldr	r1, [r7, #4]
 8008038:	2008      	movs	r0, #8
 800803a:	f7ff fa59 	bl	80074f0 <memp_free>
 800803e:	e00d      	b.n	800805c <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8008040:	89fb      	ldrh	r3, [r7, #14]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d002      	beq.n	800804c <pbuf_free+0xe0>
 8008046:	89fb      	ldrh	r3, [r7, #14]
 8008048:	2b02      	cmp	r3, #2
 800804a:	d104      	bne.n	8008056 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 800804c:	6879      	ldr	r1, [r7, #4]
 800804e:	2007      	movs	r0, #7
 8008050:	f7ff fa4e 	bl	80074f0 <memp_free>
 8008054:	e002      	b.n	800805c <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7fe fed0 	bl	8006dfc <mem_free>
        }
      }
      count++;
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	3301      	adds	r3, #1
 8008060:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	607b      	str	r3, [r7, #4]
 8008066:	e001      	b.n	800806c <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8008068:	2300      	movs	r3, #0
 800806a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1a9      	bne.n	8007fc6 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008072:	7dfb      	ldrb	r3, [r7, #23]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	08016a60 	.word	0x08016a60
 8008080:	08016c98 	.word	0x08016c98
 8008084:	08016aac 	.word	0x08016aac
 8008088:	08016cd4 	.word	0x08016cd4
 800808c:	08016cec 	.word	0x08016cec
 8008090:	08016d04 	.word	0x08016d04

08008094 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800809c:	2300      	movs	r3, #0
 800809e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80080a0:	e005      	b.n	80080ae <pbuf_clen+0x1a>
    ++len;
 80080a2:	89fb      	ldrh	r3, [r7, #14]
 80080a4:	3301      	adds	r3, #1
 80080a6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1f6      	bne.n	80080a2 <pbuf_clen+0xe>
  }
  return len;
 80080b4:	89fb      	ldrh	r3, [r7, #14]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bc80      	pop	{r7}
 80080be:	4770      	bx	lr

080080c0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d010      	beq.n	80080f0 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	89db      	ldrh	r3, [r3, #14]
 80080d2:	3301      	adds	r3, #1
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	89db      	ldrh	r3, [r3, #14]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d106      	bne.n	80080f0 <pbuf_ref+0x30>
 80080e2:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <pbuf_ref+0x38>)
 80080e4:	f240 3239 	movw	r2, #825	; 0x339
 80080e8:	4904      	ldr	r1, [pc, #16]	; (80080fc <pbuf_ref+0x3c>)
 80080ea:	4805      	ldr	r0, [pc, #20]	; (8008100 <pbuf_ref+0x40>)
 80080ec:	f00a fc88 	bl	8012a00 <iprintf>
  }
}
 80080f0:	bf00      	nop
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	08016a60 	.word	0x08016a60
 80080fc:	08016d28 	.word	0x08016d28
 8008100:	08016aac 	.word	0x08016aac

08008104 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <pbuf_cat+0x16>
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d107      	bne.n	800812a <pbuf_cat+0x26>
 800811a:	4b20      	ldr	r3, [pc, #128]	; (800819c <pbuf_cat+0x98>)
 800811c:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8008120:	491f      	ldr	r1, [pc, #124]	; (80081a0 <pbuf_cat+0x9c>)
 8008122:	4820      	ldr	r0, [pc, #128]	; (80081a4 <pbuf_cat+0xa0>)
 8008124:	f00a fc6c 	bl	8012a00 <iprintf>
 8008128:	e034      	b.n	8008194 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	e00a      	b.n	8008146 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	891a      	ldrh	r2, [r3, #8]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	891b      	ldrh	r3, [r3, #8]
 8008138:	4413      	add	r3, r2
 800813a:	b29a      	uxth	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1f0      	bne.n	8008130 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	891a      	ldrh	r2, [r3, #8]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	895b      	ldrh	r3, [r3, #10]
 8008156:	429a      	cmp	r2, r3
 8008158:	d006      	beq.n	8008168 <pbuf_cat+0x64>
 800815a:	4b10      	ldr	r3, [pc, #64]	; (800819c <pbuf_cat+0x98>)
 800815c:	f240 3255 	movw	r2, #853	; 0x355
 8008160:	4911      	ldr	r1, [pc, #68]	; (80081a8 <pbuf_cat+0xa4>)
 8008162:	4810      	ldr	r0, [pc, #64]	; (80081a4 <pbuf_cat+0xa0>)
 8008164:	f00a fc4c 	bl	8012a00 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d006      	beq.n	800817e <pbuf_cat+0x7a>
 8008170:	4b0a      	ldr	r3, [pc, #40]	; (800819c <pbuf_cat+0x98>)
 8008172:	f240 3256 	movw	r2, #854	; 0x356
 8008176:	490d      	ldr	r1, [pc, #52]	; (80081ac <pbuf_cat+0xa8>)
 8008178:	480a      	ldr	r0, [pc, #40]	; (80081a4 <pbuf_cat+0xa0>)
 800817a:	f00a fc41 	bl	8012a00 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	891a      	ldrh	r2, [r3, #8]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	891b      	ldrh	r3, [r3, #8]
 8008186:	4413      	add	r3, r2
 8008188:	b29a      	uxth	r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	08016a60 	.word	0x08016a60
 80081a0:	08016d3c 	.word	0x08016d3c
 80081a4:	08016aac 	.word	0x08016aac
 80081a8:	08016d74 	.word	0x08016d74
 80081ac:	08016da4 	.word	0x08016da4

080081b0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff ffa1 	bl	8008104 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80081c2:	6838      	ldr	r0, [r7, #0]
 80081c4:	f7ff ff7c 	bl	80080c0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80081c8:	bf00      	nop
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 80081da:	2300      	movs	r3, #0
 80081dc:	81fb      	strh	r3, [r7, #14]
 80081de:	2300      	movs	r3, #0
 80081e0:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d008      	beq.n	80081fa <pbuf_copy+0x2a>
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d005      	beq.n	80081fa <pbuf_copy+0x2a>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	891a      	ldrh	r2, [r3, #8]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	891b      	ldrh	r3, [r3, #8]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d209      	bcs.n	800820e <pbuf_copy+0x3e>
 80081fa:	4b54      	ldr	r3, [pc, #336]	; (800834c <pbuf_copy+0x17c>)
 80081fc:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8008200:	4953      	ldr	r1, [pc, #332]	; (8008350 <pbuf_copy+0x180>)
 8008202:	4854      	ldr	r0, [pc, #336]	; (8008354 <pbuf_copy+0x184>)
 8008204:	f00a fbfc 	bl	8012a00 <iprintf>
 8008208:	f06f 030f 	mvn.w	r3, #15
 800820c:	e099      	b.n	8008342 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	895b      	ldrh	r3, [r3, #10]
 8008212:	461a      	mov	r2, r3
 8008214:	89fb      	ldrh	r3, [r7, #14]
 8008216:	1ad2      	subs	r2, r2, r3
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	895b      	ldrh	r3, [r3, #10]
 800821c:	4619      	mov	r1, r3
 800821e:	89bb      	ldrh	r3, [r7, #12]
 8008220:	1acb      	subs	r3, r1, r3
 8008222:	429a      	cmp	r2, r3
 8008224:	db05      	blt.n	8008232 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	895a      	ldrh	r2, [r3, #10]
 800822a:	89bb      	ldrh	r3, [r7, #12]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	817b      	strh	r3, [r7, #10]
 8008230:	e004      	b.n	800823c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	895a      	ldrh	r2, [r3, #10]
 8008236:	89fb      	ldrh	r3, [r7, #14]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685a      	ldr	r2, [r3, #4]
 8008240:	89fb      	ldrh	r3, [r7, #14]
 8008242:	18d0      	adds	r0, r2, r3
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	89bb      	ldrh	r3, [r7, #12]
 800824a:	4413      	add	r3, r2
 800824c:	897a      	ldrh	r2, [r7, #10]
 800824e:	4619      	mov	r1, r3
 8008250:	f009 fd52 	bl	8011cf8 <memcpy>
    offset_to += len;
 8008254:	89fa      	ldrh	r2, [r7, #14]
 8008256:	897b      	ldrh	r3, [r7, #10]
 8008258:	4413      	add	r3, r2
 800825a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800825c:	89ba      	ldrh	r2, [r7, #12]
 800825e:	897b      	ldrh	r3, [r7, #10]
 8008260:	4413      	add	r3, r2
 8008262:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	895b      	ldrh	r3, [r3, #10]
 8008268:	89fa      	ldrh	r2, [r7, #14]
 800826a:	429a      	cmp	r2, r3
 800826c:	d906      	bls.n	800827c <pbuf_copy+0xac>
 800826e:	4b37      	ldr	r3, [pc, #220]	; (800834c <pbuf_copy+0x17c>)
 8008270:	f240 32cd 	movw	r2, #973	; 0x3cd
 8008274:	4938      	ldr	r1, [pc, #224]	; (8008358 <pbuf_copy+0x188>)
 8008276:	4837      	ldr	r0, [pc, #220]	; (8008354 <pbuf_copy+0x184>)
 8008278:	f00a fbc2 	bl	8012a00 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	895b      	ldrh	r3, [r3, #10]
 8008280:	89ba      	ldrh	r2, [r7, #12]
 8008282:	429a      	cmp	r2, r3
 8008284:	d906      	bls.n	8008294 <pbuf_copy+0xc4>
 8008286:	4b31      	ldr	r3, [pc, #196]	; (800834c <pbuf_copy+0x17c>)
 8008288:	f240 32ce 	movw	r2, #974	; 0x3ce
 800828c:	4933      	ldr	r1, [pc, #204]	; (800835c <pbuf_copy+0x18c>)
 800828e:	4831      	ldr	r0, [pc, #196]	; (8008354 <pbuf_copy+0x184>)
 8008290:	f00a fbb6 	bl	8012a00 <iprintf>
    if (offset_from >= p_from->len) {
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	895b      	ldrh	r3, [r3, #10]
 8008298:	89ba      	ldrh	r2, [r7, #12]
 800829a:	429a      	cmp	r2, r3
 800829c:	d304      	bcc.n	80082a8 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	895b      	ldrh	r3, [r3, #10]
 80082ac:	89fa      	ldrh	r2, [r7, #14]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d114      	bne.n	80082dc <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 80082b2:	2300      	movs	r3, #0
 80082b4:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10c      	bne.n	80082dc <pbuf_copy+0x10c>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d009      	beq.n	80082dc <pbuf_copy+0x10c>
 80082c8:	4b20      	ldr	r3, [pc, #128]	; (800834c <pbuf_copy+0x17c>)
 80082ca:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80082ce:	4924      	ldr	r1, [pc, #144]	; (8008360 <pbuf_copy+0x190>)
 80082d0:	4820      	ldr	r0, [pc, #128]	; (8008354 <pbuf_copy+0x184>)
 80082d2:	f00a fb95 	bl	8012a00 <iprintf>
 80082d6:	f06f 030f 	mvn.w	r3, #15
 80082da:	e032      	b.n	8008342 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d013      	beq.n	800830a <pbuf_copy+0x13a>
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	895a      	ldrh	r2, [r3, #10]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	891b      	ldrh	r3, [r3, #8]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d10d      	bne.n	800830a <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d009      	beq.n	800830a <pbuf_copy+0x13a>
 80082f6:	4b15      	ldr	r3, [pc, #84]	; (800834c <pbuf_copy+0x17c>)
 80082f8:	f240 32dd 	movw	r2, #989	; 0x3dd
 80082fc:	4919      	ldr	r1, [pc, #100]	; (8008364 <pbuf_copy+0x194>)
 80082fe:	4815      	ldr	r0, [pc, #84]	; (8008354 <pbuf_copy+0x184>)
 8008300:	f00a fb7e 	bl	8012a00 <iprintf>
 8008304:	f06f 0305 	mvn.w	r3, #5
 8008308:	e01b      	b.n	8008342 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d013      	beq.n	8008338 <pbuf_copy+0x168>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	895a      	ldrh	r2, [r3, #10]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	891b      	ldrh	r3, [r3, #8]
 8008318:	429a      	cmp	r2, r3
 800831a:	d10d      	bne.n	8008338 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d009      	beq.n	8008338 <pbuf_copy+0x168>
 8008324:	4b09      	ldr	r3, [pc, #36]	; (800834c <pbuf_copy+0x17c>)
 8008326:	f240 32e2 	movw	r2, #994	; 0x3e2
 800832a:	490e      	ldr	r1, [pc, #56]	; (8008364 <pbuf_copy+0x194>)
 800832c:	4809      	ldr	r0, [pc, #36]	; (8008354 <pbuf_copy+0x184>)
 800832e:	f00a fb67 	bl	8012a00 <iprintf>
 8008332:	f06f 0305 	mvn.w	r3, #5
 8008336:	e004      	b.n	8008342 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	f47f af67 	bne.w	800820e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	08016a60 	.word	0x08016a60
 8008350:	08016df0 	.word	0x08016df0
 8008354:	08016aac 	.word	0x08016aac
 8008358:	08016e20 	.word	0x08016e20
 800835c:	08016e38 	.word	0x08016e38
 8008360:	08016e54 	.word	0x08016e54
 8008364:	08016e64 	.word	0x08016e64

08008368 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	4611      	mov	r1, r2
 8008374:	461a      	mov	r2, r3
 8008376:	460b      	mov	r3, r1
 8008378:	80fb      	strh	r3, [r7, #6]
 800837a:	4613      	mov	r3, r2
 800837c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d108      	bne.n	800839a <pbuf_copy_partial+0x32>
 8008388:	4b30      	ldr	r3, [pc, #192]	; (800844c <pbuf_copy_partial+0xe4>)
 800838a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800838e:	4930      	ldr	r1, [pc, #192]	; (8008450 <pbuf_copy_partial+0xe8>)
 8008390:	4830      	ldr	r0, [pc, #192]	; (8008454 <pbuf_copy_partial+0xec>)
 8008392:	f00a fb35 	bl	8012a00 <iprintf>
 8008396:	2300      	movs	r3, #0
 8008398:	e054      	b.n	8008444 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d108      	bne.n	80083b2 <pbuf_copy_partial+0x4a>
 80083a0:	4b2a      	ldr	r3, [pc, #168]	; (800844c <pbuf_copy_partial+0xe4>)
 80083a2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80083a6:	492c      	ldr	r1, [pc, #176]	; (8008458 <pbuf_copy_partial+0xf0>)
 80083a8:	482a      	ldr	r0, [pc, #168]	; (8008454 <pbuf_copy_partial+0xec>)
 80083aa:	f00a fb29 	bl	8012a00 <iprintf>
 80083ae:	2300      	movs	r3, #0
 80083b0:	e048      	b.n	8008444 <pbuf_copy_partial+0xdc>

  left = 0;
 80083b2:	2300      	movs	r3, #0
 80083b4:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d002      	beq.n	80083c2 <pbuf_copy_partial+0x5a>
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <pbuf_copy_partial+0x5e>
    return 0;
 80083c2:	2300      	movs	r3, #0
 80083c4:	e03e      	b.n	8008444 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	61fb      	str	r3, [r7, #28]
 80083ca:	e034      	b.n	8008436 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 80083cc:	88bb      	ldrh	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00a      	beq.n	80083e8 <pbuf_copy_partial+0x80>
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	895b      	ldrh	r3, [r3, #10]
 80083d6:	88ba      	ldrh	r2, [r7, #4]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d305      	bcc.n	80083e8 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	895b      	ldrh	r3, [r3, #10]
 80083e0:	88ba      	ldrh	r2, [r7, #4]
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	80bb      	strh	r3, [r7, #4]
 80083e6:	e023      	b.n	8008430 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	895a      	ldrh	r2, [r3, #10]
 80083ec:	88bb      	ldrh	r3, [r7, #4]
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80083f2:	8b3a      	ldrh	r2, [r7, #24]
 80083f4:	88fb      	ldrh	r3, [r7, #6]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d901      	bls.n	80083fe <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 80083fa:	88fb      	ldrh	r3, [r7, #6]
 80083fc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80083fe:	8b7b      	ldrh	r3, [r7, #26]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	18d0      	adds	r0, r2, r3
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	88bb      	ldrh	r3, [r7, #4]
 800840a:	4413      	add	r3, r2
 800840c:	8b3a      	ldrh	r2, [r7, #24]
 800840e:	4619      	mov	r1, r3
 8008410:	f009 fc72 	bl	8011cf8 <memcpy>
      copied_total += buf_copy_len;
 8008414:	8afa      	ldrh	r2, [r7, #22]
 8008416:	8b3b      	ldrh	r3, [r7, #24]
 8008418:	4413      	add	r3, r2
 800841a:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800841c:	8b7a      	ldrh	r2, [r7, #26]
 800841e:	8b3b      	ldrh	r3, [r7, #24]
 8008420:	4413      	add	r3, r2
 8008422:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8008424:	88fa      	ldrh	r2, [r7, #6]
 8008426:	8b3b      	ldrh	r3, [r7, #24]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800842c:	2300      	movs	r3, #0
 800842e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	61fb      	str	r3, [r7, #28]
 8008436:	88fb      	ldrh	r3, [r7, #6]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <pbuf_copy_partial+0xda>
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1c4      	bne.n	80083cc <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8008442:	8afb      	ldrh	r3, [r7, #22]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3720      	adds	r7, #32
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	08016a60 	.word	0x08016a60
 8008450:	08016e90 	.word	0x08016e90
 8008454:	08016aac 	.word	0x08016aac
 8008458:	08016eb0 	.word	0x08016eb0

0800845c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b088      	sub	sp, #32
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	4613      	mov	r3, r2
 8008468:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 800846a:	88fb      	ldrh	r3, [r7, #6]
 800846c:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 800846e:	2300      	movs	r3, #0
 8008470:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d109      	bne.n	800848c <pbuf_take+0x30>
 8008478:	4b3a      	ldr	r3, [pc, #232]	; (8008564 <pbuf_take+0x108>)
 800847a:	f240 4284 	movw	r2, #1156	; 0x484
 800847e:	493a      	ldr	r1, [pc, #232]	; (8008568 <pbuf_take+0x10c>)
 8008480:	483a      	ldr	r0, [pc, #232]	; (800856c <pbuf_take+0x110>)
 8008482:	f00a fabd 	bl	8012a00 <iprintf>
 8008486:	f06f 030f 	mvn.w	r3, #15
 800848a:	e066      	b.n	800855a <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d109      	bne.n	80084a6 <pbuf_take+0x4a>
 8008492:	4b34      	ldr	r3, [pc, #208]	; (8008564 <pbuf_take+0x108>)
 8008494:	f240 4285 	movw	r2, #1157	; 0x485
 8008498:	4935      	ldr	r1, [pc, #212]	; (8008570 <pbuf_take+0x114>)
 800849a:	4834      	ldr	r0, [pc, #208]	; (800856c <pbuf_take+0x110>)
 800849c:	f00a fab0 	bl	8012a00 <iprintf>
 80084a0:	f06f 030f 	mvn.w	r3, #15
 80084a4:	e059      	b.n	800855a <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	891b      	ldrh	r3, [r3, #8]
 80084aa:	88fa      	ldrh	r2, [r7, #6]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d909      	bls.n	80084c4 <pbuf_take+0x68>
 80084b0:	4b2c      	ldr	r3, [pc, #176]	; (8008564 <pbuf_take+0x108>)
 80084b2:	f240 4286 	movw	r2, #1158	; 0x486
 80084b6:	492f      	ldr	r1, [pc, #188]	; (8008574 <pbuf_take+0x118>)
 80084b8:	482c      	ldr	r0, [pc, #176]	; (800856c <pbuf_take+0x110>)
 80084ba:	f00a faa1 	bl	8012a00 <iprintf>
 80084be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084c2:	e04a      	b.n	800855a <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d007      	beq.n	80084da <pbuf_take+0x7e>
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d004      	beq.n	80084da <pbuf_take+0x7e>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	891b      	ldrh	r3, [r3, #8]
 80084d4:	88fa      	ldrh	r2, [r7, #6]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d902      	bls.n	80084e0 <pbuf_take+0x84>
    return ERR_ARG;
 80084da:	f06f 030f 	mvn.w	r3, #15
 80084de:	e03c      	b.n	800855a <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	61fb      	str	r3, [r7, #28]
 80084e4:	e027      	b.n	8008536 <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d106      	bne.n	80084fa <pbuf_take+0x9e>
 80084ec:	4b1d      	ldr	r3, [pc, #116]	; (8008564 <pbuf_take+0x108>)
 80084ee:	f240 428e 	movw	r2, #1166	; 0x48e
 80084f2:	4921      	ldr	r1, [pc, #132]	; (8008578 <pbuf_take+0x11c>)
 80084f4:	481d      	ldr	r0, [pc, #116]	; (800856c <pbuf_take+0x110>)
 80084f6:	f00a fa83 	bl	8012a00 <iprintf>
    buf_copy_len = total_copy_len;
 80084fa:	8b3b      	ldrh	r3, [r7, #24]
 80084fc:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	895b      	ldrh	r3, [r3, #10]
 8008502:	8b7a      	ldrh	r2, [r7, #26]
 8008504:	429a      	cmp	r2, r3
 8008506:	d902      	bls.n	800850e <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	895b      	ldrh	r3, [r3, #10]
 800850c:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	6858      	ldr	r0, [r3, #4]
 8008512:	8afb      	ldrh	r3, [r7, #22]
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	4413      	add	r3, r2
 8008518:	8b7a      	ldrh	r2, [r7, #26]
 800851a:	4619      	mov	r1, r3
 800851c:	f009 fbec 	bl	8011cf8 <memcpy>
    total_copy_len -= buf_copy_len;
 8008520:	8b3a      	ldrh	r2, [r7, #24]
 8008522:	8b7b      	ldrh	r3, [r7, #26]
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 8008528:	8afa      	ldrh	r2, [r7, #22]
 800852a:	8b7b      	ldrh	r3, [r7, #26]
 800852c:	4413      	add	r3, r2
 800852e:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	61fb      	str	r3, [r7, #28]
 8008536:	8b3b      	ldrh	r3, [r7, #24]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1d4      	bne.n	80084e6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800853c:	8b3b      	ldrh	r3, [r7, #24]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d103      	bne.n	800854a <pbuf_take+0xee>
 8008542:	8afa      	ldrh	r2, [r7, #22]
 8008544:	88fb      	ldrh	r3, [r7, #6]
 8008546:	429a      	cmp	r2, r3
 8008548:	d006      	beq.n	8008558 <pbuf_take+0xfc>
 800854a:	4b06      	ldr	r3, [pc, #24]	; (8008564 <pbuf_take+0x108>)
 800854c:	f240 4299 	movw	r2, #1177	; 0x499
 8008550:	490a      	ldr	r1, [pc, #40]	; (800857c <pbuf_take+0x120>)
 8008552:	4806      	ldr	r0, [pc, #24]	; (800856c <pbuf_take+0x110>)
 8008554:	f00a fa54 	bl	8012a00 <iprintf>
  return ERR_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3720      	adds	r7, #32
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	08016a60 	.word	0x08016a60
 8008568:	08016ed4 	.word	0x08016ed4
 800856c:	08016aac 	.word	0x08016aac
 8008570:	08016eec 	.word	0x08016eec
 8008574:	08016f08 	.word	0x08016f08
 8008578:	08016f28 	.word	0x08016f28
 800857c:	08016f40 	.word	0x08016f40

08008580 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8008580:	b480      	push	{r7}
 8008582:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8008584:	bf00      	nop
 8008586:	46bd      	mov	sp, r7
 8008588:	bc80      	pop	{r7}
 800858a:	4770      	bx	lr

0800858c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8008590:	bf00      	nop
 8008592:	46bd      	mov	sp, r7
 8008594:	bc80      	pop	{r7}
 8008596:	4770      	bx	lr

08008598 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800859c:	f000 fdfa 	bl	8009194 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80085a0:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <tcp_tmr+0x28>)
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	3301      	adds	r3, #1
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <tcp_tmr+0x28>)
 80085aa:	701a      	strb	r2, [r3, #0]
 80085ac:	4b04      	ldr	r3, [pc, #16]	; (80085c0 <tcp_tmr+0x28>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	f003 0301 	and.w	r3, r3, #1
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80085b8:	f000 fb2a 	bl	8008c10 <tcp_slowtmr>
  }
}
 80085bc:	bf00      	nop
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	20007ea1 	.word	0x20007ea1

080085c4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	e00a      	b.n	80085ea <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d102      	bne.n	80085e4 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1f1      	bne.n	80085d4 <tcp_remove_listener+0x10>
      }
   }
}
 80085f0:	bf00      	nop
 80085f2:	bf00      	nop
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bc80      	pop	{r7}
 80085fa:	4770      	bx	lr

080085fc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d105      	bne.n	8008616 <tcp_listen_closed+0x1a>
 800860a:	4b13      	ldr	r3, [pc, #76]	; (8008658 <tcp_listen_closed+0x5c>)
 800860c:	22c0      	movs	r2, #192	; 0xc0
 800860e:	4913      	ldr	r1, [pc, #76]	; (800865c <tcp_listen_closed+0x60>)
 8008610:	4813      	ldr	r0, [pc, #76]	; (8008660 <tcp_listen_closed+0x64>)
 8008612:	f00a f9f5 	bl	8012a00 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	7d1b      	ldrb	r3, [r3, #20]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d005      	beq.n	800862a <tcp_listen_closed+0x2e>
 800861e:	4b0e      	ldr	r3, [pc, #56]	; (8008658 <tcp_listen_closed+0x5c>)
 8008620:	22c1      	movs	r2, #193	; 0xc1
 8008622:	4910      	ldr	r1, [pc, #64]	; (8008664 <tcp_listen_closed+0x68>)
 8008624:	480e      	ldr	r0, [pc, #56]	; (8008660 <tcp_listen_closed+0x64>)
 8008626:	f00a f9eb 	bl	8012a00 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800862a:	2301      	movs	r3, #1
 800862c:	60fb      	str	r3, [r7, #12]
 800862e:	e00b      	b.n	8008648 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8008630:	4a0d      	ldr	r2, [pc, #52]	; (8008668 <tcp_listen_closed+0x6c>)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	6879      	ldr	r1, [r7, #4]
 800863c:	4618      	mov	r0, r3
 800863e:	f7ff ffc1 	bl	80085c4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3301      	adds	r3, #1
 8008646:	60fb      	str	r3, [r7, #12]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b03      	cmp	r3, #3
 800864c:	d9f0      	bls.n	8008630 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800864e:	bf00      	nop
 8008650:	bf00      	nop
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	08016fe4 	.word	0x08016fe4
 800865c:	08017014 	.word	0x08017014
 8008660:	08017020 	.word	0x08017020
 8008664:	08017048 	.word	0x08017048
 8008668:	08018444 	.word	0x08018444

0800866c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800866c:	b5b0      	push	{r4, r5, r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af02      	add	r7, sp, #8
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008678:	78fb      	ldrb	r3, [r7, #3]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d075      	beq.n	800876a <tcp_close_shutdown+0xfe>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	7d1b      	ldrb	r3, [r3, #20]
 8008682:	2b04      	cmp	r3, #4
 8008684:	d003      	beq.n	800868e <tcp_close_shutdown+0x22>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	7d1b      	ldrb	r3, [r3, #20]
 800868a:	2b07      	cmp	r3, #7
 800868c:	d16d      	bne.n	800876a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008692:	2b00      	cmp	r3, #0
 8008694:	d104      	bne.n	80086a0 <tcp_close_shutdown+0x34>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800869a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800869e:	d064      	beq.n	800876a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	7e9b      	ldrb	r3, [r3, #26]
 80086a4:	f003 0310 	and.w	r3, r3, #16
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d106      	bne.n	80086ba <tcp_close_shutdown+0x4e>
 80086ac:	4b5b      	ldr	r3, [pc, #364]	; (800881c <tcp_close_shutdown+0x1b0>)
 80086ae:	f240 120f 	movw	r2, #271	; 0x10f
 80086b2:	495b      	ldr	r1, [pc, #364]	; (8008820 <tcp_close_shutdown+0x1b4>)
 80086b4:	485b      	ldr	r0, [pc, #364]	; (8008824 <tcp_close_shutdown+0x1b8>)
 80086b6:	f00a f9a3 	bl	8012a00 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80086c2:	687c      	ldr	r4, [r7, #4]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	1d1d      	adds	r5, r3, #4
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	8adb      	ldrh	r3, [r3, #22]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	8b12      	ldrh	r2, [r2, #24]
 80086d0:	9201      	str	r2, [sp, #4]
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	462b      	mov	r3, r5
 80086d6:	4622      	mov	r2, r4
 80086d8:	f004 f918 	bl	800c90c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fff9 	bl	80096d4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80086e2:	4b51      	ldr	r3, [pc, #324]	; (8008828 <tcp_close_shutdown+0x1bc>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d105      	bne.n	80086f8 <tcp_close_shutdown+0x8c>
 80086ec:	4b4e      	ldr	r3, [pc, #312]	; (8008828 <tcp_close_shutdown+0x1bc>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	4a4d      	ldr	r2, [pc, #308]	; (8008828 <tcp_close_shutdown+0x1bc>)
 80086f4:	6013      	str	r3, [r2, #0]
 80086f6:	e013      	b.n	8008720 <tcp_close_shutdown+0xb4>
 80086f8:	4b4b      	ldr	r3, [pc, #300]	; (8008828 <tcp_close_shutdown+0x1bc>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	60fb      	str	r3, [r7, #12]
 80086fe:	e00c      	b.n	800871a <tcp_close_shutdown+0xae>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	429a      	cmp	r2, r3
 8008708:	d104      	bne.n	8008714 <tcp_close_shutdown+0xa8>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	60da      	str	r2, [r3, #12]
 8008712:	e005      	b.n	8008720 <tcp_close_shutdown+0xb4>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	60fb      	str	r3, [r7, #12]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1ef      	bne.n	8008700 <tcp_close_shutdown+0x94>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	60da      	str	r2, [r3, #12]
 8008726:	4b41      	ldr	r3, [pc, #260]	; (800882c <tcp_close_shutdown+0x1c0>)
 8008728:	2201      	movs	r2, #1
 800872a:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	7d1b      	ldrb	r3, [r3, #20]
 8008730:	2b04      	cmp	r3, #4
 8008732:	d10c      	bne.n	800874e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	220a      	movs	r2, #10
 8008738:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800873a:	4b3d      	ldr	r3, [pc, #244]	; (8008830 <tcp_close_shutdown+0x1c4>)
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	60da      	str	r2, [r3, #12]
 8008742:	4a3b      	ldr	r2, [pc, #236]	; (8008830 <tcp_close_shutdown+0x1c4>)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6013      	str	r3, [r2, #0]
 8008748:	f004 fb46 	bl	800cdd8 <tcp_timer_needed>
 800874c:	e00b      	b.n	8008766 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800874e:	4b39      	ldr	r3, [pc, #228]	; (8008834 <tcp_close_shutdown+0x1c8>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	429a      	cmp	r2, r3
 8008756:	d102      	bne.n	800875e <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8008758:	f003 fb7c 	bl	800be54 <tcp_trigger_input_pcb_close>
 800875c:	e003      	b.n	8008766 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	2001      	movs	r0, #1
 8008762:	f7fe fec5 	bl	80074f0 <memp_free>
        }
      }
      return ERR_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	e053      	b.n	8008812 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	7d1b      	ldrb	r3, [r3, #20]
 800876e:	2b02      	cmp	r3, #2
 8008770:	d03d      	beq.n	80087ee <tcp_close_shutdown+0x182>
 8008772:	2b02      	cmp	r3, #2
 8008774:	dc47      	bgt.n	8008806 <tcp_close_shutdown+0x19a>
 8008776:	2b00      	cmp	r3, #0
 8008778:	d002      	beq.n	8008780 <tcp_close_shutdown+0x114>
 800877a:	2b01      	cmp	r3, #1
 800877c:	d02b      	beq.n	80087d6 <tcp_close_shutdown+0x16a>
 800877e:	e042      	b.n	8008806 <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	8adb      	ldrh	r3, [r3, #22]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d021      	beq.n	80087cc <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008788:	4b2b      	ldr	r3, [pc, #172]	; (8008838 <tcp_close_shutdown+0x1cc>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	429a      	cmp	r2, r3
 8008790:	d105      	bne.n	800879e <tcp_close_shutdown+0x132>
 8008792:	4b29      	ldr	r3, [pc, #164]	; (8008838 <tcp_close_shutdown+0x1cc>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	4a27      	ldr	r2, [pc, #156]	; (8008838 <tcp_close_shutdown+0x1cc>)
 800879a:	6013      	str	r3, [r2, #0]
 800879c:	e013      	b.n	80087c6 <tcp_close_shutdown+0x15a>
 800879e:	4b26      	ldr	r3, [pc, #152]	; (8008838 <tcp_close_shutdown+0x1cc>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	60bb      	str	r3, [r7, #8]
 80087a4:	e00c      	b.n	80087c0 <tcp_close_shutdown+0x154>
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d104      	bne.n	80087ba <tcp_close_shutdown+0x14e>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68da      	ldr	r2, [r3, #12]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	60da      	str	r2, [r3, #12]
 80087b8:	e005      	b.n	80087c6 <tcp_close_shutdown+0x15a>
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	60bb      	str	r3, [r7, #8]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1ef      	bne.n	80087a6 <tcp_close_shutdown+0x13a>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 80087cc:	6879      	ldr	r1, [r7, #4]
 80087ce:	2001      	movs	r0, #1
 80087d0:	f7fe fe8e 	bl	80074f0 <memp_free>
    break;
 80087d4:	e01c      	b.n	8008810 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7ff ff10 	bl	80085fc <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80087dc:	6879      	ldr	r1, [r7, #4]
 80087de:	4817      	ldr	r0, [pc, #92]	; (800883c <tcp_close_shutdown+0x1d0>)
 80087e0:	f000 ffba 	bl	8009758 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80087e4:	6879      	ldr	r1, [r7, #4]
 80087e6:	2002      	movs	r0, #2
 80087e8:	f7fe fe82 	bl	80074f0 <memp_free>
    break;
 80087ec:	e010      	b.n	8008810 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80087ee:	6879      	ldr	r1, [r7, #4]
 80087f0:	480d      	ldr	r0, [pc, #52]	; (8008828 <tcp_close_shutdown+0x1bc>)
 80087f2:	f000 ffb1 	bl	8009758 <tcp_pcb_remove>
 80087f6:	4b0d      	ldr	r3, [pc, #52]	; (800882c <tcp_close_shutdown+0x1c0>)
 80087f8:	2201      	movs	r2, #1
 80087fa:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	2001      	movs	r0, #1
 8008800:	f7fe fe76 	bl	80074f0 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8008804:	e004      	b.n	8008810 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f81a 	bl	8008840 <tcp_close_shutdown_fin>
 800880c:	4603      	mov	r3, r0
 800880e:	e000      	b.n	8008812 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bdb0      	pop	{r4, r5, r7, pc}
 800881a:	bf00      	nop
 800881c:	08016fe4 	.word	0x08016fe4
 8008820:	08017060 	.word	0x08017060
 8008824:	08017020 	.word	0x08017020
 8008828:	20007e98 	.word	0x20007e98
 800882c:	20007ea0 	.word	0x20007ea0
 8008830:	20007e9c 	.word	0x20007e9c
 8008834:	20007ed8 	.word	0x20007ed8
 8008838:	20007e90 	.word	0x20007e90
 800883c:	20007e94 	.word	0x20007e94

08008840 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d106      	bne.n	800885c <tcp_close_shutdown_fin+0x1c>
 800884e:	4b2e      	ldr	r3, [pc, #184]	; (8008908 <tcp_close_shutdown_fin+0xc8>)
 8008850:	f240 124d 	movw	r2, #333	; 0x14d
 8008854:	492d      	ldr	r1, [pc, #180]	; (800890c <tcp_close_shutdown_fin+0xcc>)
 8008856:	482e      	ldr	r0, [pc, #184]	; (8008910 <tcp_close_shutdown_fin+0xd0>)
 8008858:	f00a f8d2 	bl	8012a00 <iprintf>

  switch (pcb->state) {
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	7d1b      	ldrb	r3, [r3, #20]
 8008860:	2b07      	cmp	r3, #7
 8008862:	d020      	beq.n	80088a6 <tcp_close_shutdown_fin+0x66>
 8008864:	2b07      	cmp	r3, #7
 8008866:	dc2b      	bgt.n	80088c0 <tcp_close_shutdown_fin+0x80>
 8008868:	2b03      	cmp	r3, #3
 800886a:	d002      	beq.n	8008872 <tcp_close_shutdown_fin+0x32>
 800886c:	2b04      	cmp	r3, #4
 800886e:	d00d      	beq.n	800888c <tcp_close_shutdown_fin+0x4c>
 8008870:	e026      	b.n	80088c0 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f003 fb78 	bl	800bf68 <tcp_send_fin>
 8008878:	4603      	mov	r3, r0
 800887a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800887c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d11f      	bne.n	80088c4 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2205      	movs	r2, #5
 8008888:	751a      	strb	r2, [r3, #20]
    }
    break;
 800888a:	e01b      	b.n	80088c4 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f003 fb6b 	bl	800bf68 <tcp_send_fin>
 8008892:	4603      	mov	r3, r0
 8008894:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d114      	bne.n	80088c8 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2205      	movs	r2, #5
 80088a2:	751a      	strb	r2, [r3, #20]
    }
    break;
 80088a4:	e010      	b.n	80088c8 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f003 fb5e 	bl	800bf68 <tcp_send_fin>
 80088ac:	4603      	mov	r3, r0
 80088ae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80088b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d109      	bne.n	80088cc <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2209      	movs	r2, #9
 80088bc:	751a      	strb	r2, [r3, #20]
    }
    break;
 80088be:	e005      	b.n	80088cc <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	e01c      	b.n	80088fe <tcp_close_shutdown_fin+0xbe>
    break;
 80088c4:	bf00      	nop
 80088c6:	e002      	b.n	80088ce <tcp_close_shutdown_fin+0x8e>
    break;
 80088c8:	bf00      	nop
 80088ca:	e000      	b.n	80088ce <tcp_close_shutdown_fin+0x8e>
    break;
 80088cc:	bf00      	nop
  }

  if (err == ERR_OK) {
 80088ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d103      	bne.n	80088de <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f003 fd8a 	bl	800c3f0 <tcp_output>
 80088dc:	e00d      	b.n	80088fa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80088de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088e6:	d108      	bne.n	80088fa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	7e9b      	ldrb	r3, [r3, #26]
 80088ec:	f043 0308 	orr.w	r3, r3, #8
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	e001      	b.n	80088fe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80088fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	08016fe4 	.word	0x08016fe4
 800890c:	08017014 	.word	0x08017014
 8008910:	08017020 	.word	0x08017020

08008914 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	7d1b      	ldrb	r3, [r3, #20]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d006      	beq.n	8008932 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	7e9b      	ldrb	r3, [r3, #26]
 8008928:	f043 0310 	orr.w	r3, r3, #16
 800892c:	b2da      	uxtb	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008932:	2101      	movs	r1, #1
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff fe99 	bl	800866c <tcp_close_shutdown>
 800893a:	4603      	mov	r3, r0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b08c      	sub	sp, #48	; 0x30
 8008948:	af02      	add	r7, sp, #8
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	7d1b      	ldrb	r3, [r3, #20]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d106      	bne.n	8008964 <tcp_abandon+0x20>
 8008956:	4b4d      	ldr	r3, [pc, #308]	; (8008a8c <tcp_abandon+0x148>)
 8008958:	f240 12df 	movw	r2, #479	; 0x1df
 800895c:	494c      	ldr	r1, [pc, #304]	; (8008a90 <tcp_abandon+0x14c>)
 800895e:	484d      	ldr	r0, [pc, #308]	; (8008a94 <tcp_abandon+0x150>)
 8008960:	f00a f84e 	bl	8012a00 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	7d1b      	ldrb	r3, [r3, #20]
 8008968:	2b0a      	cmp	r3, #10
 800896a:	d108      	bne.n	800897e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	484a      	ldr	r0, [pc, #296]	; (8008a98 <tcp_abandon+0x154>)
 8008970:	f000 fef2 	bl	8009758 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8008974:	6879      	ldr	r1, [r7, #4]
 8008976:	2001      	movs	r0, #1
 8008978:	f7fe fdba 	bl	80074f0 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800897c:	e081      	b.n	8008a82 <tcp_abandon+0x13e>
    int send_rst = 0;
 800897e:	2300      	movs	r3, #0
 8008980:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008982:	2300      	movs	r3, #0
 8008984:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800898a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008990:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008998:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	7d1b      	ldrb	r3, [r3, #20]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d126      	bne.n	80089f6 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	8adb      	ldrh	r3, [r3, #22]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d02e      	beq.n	8008a0e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80089b0:	4b3a      	ldr	r3, [pc, #232]	; (8008a9c <tcp_abandon+0x158>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d105      	bne.n	80089c6 <tcp_abandon+0x82>
 80089ba:	4b38      	ldr	r3, [pc, #224]	; (8008a9c <tcp_abandon+0x158>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	4a36      	ldr	r2, [pc, #216]	; (8008a9c <tcp_abandon+0x158>)
 80089c2:	6013      	str	r3, [r2, #0]
 80089c4:	e013      	b.n	80089ee <tcp_abandon+0xaa>
 80089c6:	4b35      	ldr	r3, [pc, #212]	; (8008a9c <tcp_abandon+0x158>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	61fb      	str	r3, [r7, #28]
 80089cc:	e00c      	b.n	80089e8 <tcp_abandon+0xa4>
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d104      	bne.n	80089e2 <tcp_abandon+0x9e>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	68da      	ldr	r2, [r3, #12]
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	60da      	str	r2, [r3, #12]
 80089e0:	e005      	b.n	80089ee <tcp_abandon+0xaa>
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	61fb      	str	r3, [r7, #28]
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1ef      	bne.n	80089ce <tcp_abandon+0x8a>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	60da      	str	r2, [r3, #12]
 80089f4:	e00b      	b.n	8008a0e <tcp_abandon+0xca>
      send_rst = reset;
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	8adb      	ldrh	r3, [r3, #22]
 80089fe:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008a00:	6879      	ldr	r1, [r7, #4]
 8008a02:	4827      	ldr	r0, [pc, #156]	; (8008aa0 <tcp_abandon+0x15c>)
 8008a04:	f000 fea8 	bl	8009758 <tcp_pcb_remove>
 8008a08:	4b26      	ldr	r3, [pc, #152]	; (8008aa4 <tcp_abandon+0x160>)
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d004      	beq.n	8008a20 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 fc87 	bl	800932e <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d004      	beq.n	8008a32 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 fc7e 	bl	800932e <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d004      	beq.n	8008a44 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 fc75 	bl	800932e <tcp_segs_free>
    if (send_rst) {
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00c      	beq.n	8008a64 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	1d19      	adds	r1, r3, #4
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	8b1b      	ldrh	r3, [r3, #24]
 8008a54:	9301      	str	r3, [sp, #4]
 8008a56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	6979      	ldr	r1, [r7, #20]
 8008a5e:	69b8      	ldr	r0, [r7, #24]
 8008a60:	f003 ff54 	bl	800c90c <tcp_rst>
    last_state = pcb->state;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	7d1b      	ldrb	r3, [r3, #20]
 8008a68:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8008a6a:	6879      	ldr	r1, [r7, #4]
 8008a6c:	2001      	movs	r0, #1
 8008a6e:	f7fe fd3f 	bl	80074f0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d004      	beq.n	8008a82 <tcp_abandon+0x13e>
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	f06f 010c 	mvn.w	r1, #12
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	4798      	blx	r3
}
 8008a82:	bf00      	nop
 8008a84:	3728      	adds	r7, #40	; 0x28
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	08016fe4 	.word	0x08016fe4
 8008a90:	0801707c 	.word	0x0801707c
 8008a94:	08017020 	.word	0x08017020
 8008a98:	20007e9c 	.word	0x20007e9c
 8008a9c:	20007e90 	.word	0x20007e90
 8008aa0:	20007e98 	.word	0x20007e98
 8008aa4:	20007ea0 	.word	0x20007ea0

08008aa8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7ff ff46 	bl	8008944 <tcp_abandon>
}
 8008ab8:	bf00      	nop
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008ad0:	4413      	add	r3, r2
 8008ad2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008adc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008ae0:	bf28      	it	cs
 8008ae2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8008ae6:	b292      	uxth	r2, r2
 8008ae8:	4413      	add	r3, r2
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	db08      	blt.n	8008b04 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	e020      	b.n	8008b46 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	dd03      	ble.n	8008b1a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008b18:	e014      	b.n	8008b44 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b2c:	d306      	bcc.n	8008b3c <tcp_update_rcv_ann_wnd+0x7c>
 8008b2e:	4b08      	ldr	r3, [pc, #32]	; (8008b50 <tcp_update_rcv_ann_wnd+0x90>)
 8008b30:	f44f 7242 	mov.w	r2, #776	; 0x308
 8008b34:	4907      	ldr	r1, [pc, #28]	; (8008b54 <tcp_update_rcv_ann_wnd+0x94>)
 8008b36:	4808      	ldr	r0, [pc, #32]	; (8008b58 <tcp_update_rcv_ann_wnd+0x98>)
 8008b38:	f009 ff62 	bl	8012a00 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008b44:	2300      	movs	r3, #0
  }
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	08016fe4 	.word	0x08016fe4
 8008b54:	080170fc 	.word	0x080170fc
 8008b58:	08017020 	.word	0x08017020

08008b5c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	7d1b      	ldrb	r3, [r3, #20]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d106      	bne.n	8008b7e <tcp_recved+0x22>
 8008b70:	4b23      	ldr	r3, [pc, #140]	; (8008c00 <tcp_recved+0xa4>)
 8008b72:	f240 321f 	movw	r2, #799	; 0x31f
 8008b76:	4923      	ldr	r1, [pc, #140]	; (8008c04 <tcp_recved+0xa8>)
 8008b78:	4823      	ldr	r0, [pc, #140]	; (8008c08 <tcp_recved+0xac>)
 8008b7a:	f009 ff41 	bl	8012a00 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008b82:	887b      	ldrh	r3, [r7, #2]
 8008b84:	4413      	add	r3, r2
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b90:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008b94:	d904      	bls.n	8008ba0 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008b9c:	851a      	strh	r2, [r3, #40]	; 0x28
 8008b9e:	e017      	b.n	8008bd0 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d113      	bne.n	8008bd0 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	7d1b      	ldrb	r3, [r3, #20]
 8008bac:	2b07      	cmp	r3, #7
 8008bae:	d003      	beq.n	8008bb8 <tcp_recved+0x5c>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	7d1b      	ldrb	r3, [r3, #20]
 8008bb4:	2b09      	cmp	r3, #9
 8008bb6:	d104      	bne.n	8008bc2 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008bbe:	851a      	strh	r2, [r3, #40]	; 0x28
 8008bc0:	e006      	b.n	8008bd0 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8008bc2:	4b0f      	ldr	r3, [pc, #60]	; (8008c00 <tcp_recved+0xa4>)
 8008bc4:	f240 322d 	movw	r2, #813	; 0x32d
 8008bc8:	4910      	ldr	r1, [pc, #64]	; (8008c0c <tcp_recved+0xb0>)
 8008bca:	480f      	ldr	r0, [pc, #60]	; (8008c08 <tcp_recved+0xac>)
 8008bcc:	f009 ff18 	bl	8012a00 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7ff ff75 	bl	8008ac0 <tcp_update_rcv_ann_wnd>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008be0:	db09      	blt.n	8008bf6 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	7e9b      	ldrb	r3, [r3, #26]
 8008be6:	f043 0302 	orr.w	r3, r3, #2
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f003 fbfd 	bl	800c3f0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008bf6:	bf00      	nop
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	08016fe4 	.word	0x08016fe4
 8008c04:	08017118 	.word	0x08017118
 8008c08:	08017020 	.word	0x08017020
 8008c0c:	08017140 	.word	0x08017140

08008c10 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008c10:	b5b0      	push	{r4, r5, r7, lr}
 8008c12:	b08c      	sub	sp, #48	; 0x30
 8008c14:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8008c1a:	4b97      	ldr	r3, [pc, #604]	; (8008e78 <tcp_slowtmr+0x268>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	4a95      	ldr	r2, [pc, #596]	; (8008e78 <tcp_slowtmr+0x268>)
 8008c22:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008c24:	4b95      	ldr	r3, [pc, #596]	; (8008e7c <tcp_slowtmr+0x26c>)
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	4b93      	ldr	r3, [pc, #588]	; (8008e7c <tcp_slowtmr+0x26c>)
 8008c2e:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008c30:	2300      	movs	r3, #0
 8008c32:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8008c34:	4b92      	ldr	r3, [pc, #584]	; (8008e80 <tcp_slowtmr+0x270>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008c3a:	e227      	b.n	800908c <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3e:	7d1b      	ldrb	r3, [r3, #20]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d106      	bne.n	8008c52 <tcp_slowtmr+0x42>
 8008c44:	4b8f      	ldr	r3, [pc, #572]	; (8008e84 <tcp_slowtmr+0x274>)
 8008c46:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8008c4a:	498f      	ldr	r1, [pc, #572]	; (8008e88 <tcp_slowtmr+0x278>)
 8008c4c:	488f      	ldr	r0, [pc, #572]	; (8008e8c <tcp_slowtmr+0x27c>)
 8008c4e:	f009 fed7 	bl	8012a00 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c54:	7d1b      	ldrb	r3, [r3, #20]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d106      	bne.n	8008c68 <tcp_slowtmr+0x58>
 8008c5a:	4b8a      	ldr	r3, [pc, #552]	; (8008e84 <tcp_slowtmr+0x274>)
 8008c5c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8008c60:	498b      	ldr	r1, [pc, #556]	; (8008e90 <tcp_slowtmr+0x280>)
 8008c62:	488a      	ldr	r0, [pc, #552]	; (8008e8c <tcp_slowtmr+0x27c>)
 8008c64:	f009 fecc 	bl	8012a00 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	7d1b      	ldrb	r3, [r3, #20]
 8008c6c:	2b0a      	cmp	r3, #10
 8008c6e:	d106      	bne.n	8008c7e <tcp_slowtmr+0x6e>
 8008c70:	4b84      	ldr	r3, [pc, #528]	; (8008e84 <tcp_slowtmr+0x274>)
 8008c72:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8008c76:	4987      	ldr	r1, [pc, #540]	; (8008e94 <tcp_slowtmr+0x284>)
 8008c78:	4884      	ldr	r0, [pc, #528]	; (8008e8c <tcp_slowtmr+0x27c>)
 8008c7a:	f009 fec1 	bl	8012a00 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	7f5a      	ldrb	r2, [r3, #29]
 8008c82:	4b7e      	ldr	r3, [pc, #504]	; (8008e7c <tcp_slowtmr+0x26c>)
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d103      	bne.n	8008c92 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8008c90:	e1fc      	b.n	800908c <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008c92:	4b7a      	ldr	r3, [pc, #488]	; (8008e7c <tcp_slowtmr+0x26c>)
 8008c94:	781a      	ldrb	r2, [r3, #0]
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca4:	7d1b      	ldrb	r3, [r3, #20]
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d108      	bne.n	8008cbc <tcp_slowtmr+0xac>
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008cb0:	2b05      	cmp	r3, #5
 8008cb2:	d903      	bls.n	8008cbc <tcp_slowtmr+0xac>
      ++pcb_remove;
 8008cb4:	7ffb      	ldrb	r3, [r7, #31]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	77fb      	strb	r3, [r7, #31]
 8008cba:	e0a2      	b.n	8008e02 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008cc2:	2b0b      	cmp	r3, #11
 8008cc4:	d903      	bls.n	8008cce <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8008cc6:	7ffb      	ldrb	r3, [r7, #31]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	77fb      	strb	r3, [r7, #31]
 8008ccc:	e099      	b.n	8008e02 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d032      	beq.n	8008d3e <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	4a6d      	ldr	r2, [pc, #436]	; (8008e98 <tcp_slowtmr+0x288>)
 8008ce2:	5cd3      	ldrb	r3, [r2, r3]
 8008ce4:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8008cec:	7cfa      	ldrb	r2, [r7, #19]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d907      	bls.n	8008d02 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8008d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d04:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8008d08:	7cfa      	ldrb	r2, [r7, #19]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d879      	bhi.n	8008e02 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8008d0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d10:	f003 ff98 	bl	800cc44 <tcp_zero_window_probe>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d173      	bne.n	8008e02 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008d28:	2b06      	cmp	r3, #6
 8008d2a:	d86a      	bhi.n	8008e02 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008d32:	3301      	adds	r3, #1
 8008d34:	b2da      	uxtb	r2, r3
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8008d3c:	e061      	b.n	8008e02 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	db08      	blt.n	8008d5a <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8008d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	3301      	adds	r3, #1
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	b21a      	sxth	r2, r3
 8008d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d58:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d04f      	beq.n	8008e02 <tcp_slowtmr+0x1f2>
 8008d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d64:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	db47      	blt.n	8008e02 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	7d1b      	ldrb	r3, [r3, #20]
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d018      	beq.n	8008dac <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d80:	2b0c      	cmp	r3, #12
 8008d82:	bf28      	it	cs
 8008d84:	230c      	movcs	r3, #12
 8008d86:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008d8e:	10db      	asrs	r3, r3, #3
 8008d90:	b21b      	sxth	r3, r3
 8008d92:	461a      	mov	r2, r3
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008d9a:	4413      	add	r3, r2
 8008d9c:	7dfa      	ldrb	r2, [r7, #23]
 8008d9e:	493f      	ldr	r1, [pc, #252]	; (8008e9c <tcp_slowtmr+0x28c>)
 8008da0:	5c8a      	ldrb	r2, [r1, r2]
 8008da2:	4093      	lsls	r3, r2
 8008da4:	b21a      	sxth	r2, r3
 8008da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	2200      	movs	r2, #0
 8008db0:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	bf28      	it	cs
 8008dc2:	4613      	movcs	r3, r2
 8008dc4:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8008dc6:	8abb      	ldrh	r3, [r7, #20]
 8008dc8:	085b      	lsrs	r3, r3, #1
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dce:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ddc:	005b      	lsls	r3, r3, #1
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d206      	bcs.n	8008df2 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008de8:	005b      	lsls	r3, r3, #1
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8008dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dfe:	f003 fe05 	bl	800ca0c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e04:	7d1b      	ldrb	r3, [r3, #20]
 8008e06:	2b06      	cmp	r3, #6
 8008e08:	d10f      	bne.n	8008e2a <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	7e9b      	ldrb	r3, [r3, #26]
 8008e0e:	f003 0310 	and.w	r3, r3, #16
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d009      	beq.n	8008e2a <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008e16:	4b18      	ldr	r3, [pc, #96]	; (8008e78 <tcp_slowtmr+0x268>)
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	6a1b      	ldr	r3, [r3, #32]
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	2b28      	cmp	r3, #40	; 0x28
 8008e22:	d902      	bls.n	8008e2a <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008e24:	7ffb      	ldrb	r3, [r7, #31]
 8008e26:	3301      	adds	r3, #1
 8008e28:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	7a1b      	ldrb	r3, [r3, #8]
 8008e2e:	f003 0308 	and.w	r3, r3, #8
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d05d      	beq.n	8008ef2 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	d003      	beq.n	8008e46 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8008e42:	2b07      	cmp	r3, #7
 8008e44:	d155      	bne.n	8008ef2 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008e46:	4b0c      	ldr	r3, [pc, #48]	; (8008e78 <tcp_slowtmr+0x268>)
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e56:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8008e5a:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8008e5e:	4910      	ldr	r1, [pc, #64]	; (8008ea0 <tcp_slowtmr+0x290>)
 8008e60:	fba1 1303 	umull	r1, r3, r1, r3
 8008e64:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d91c      	bls.n	8008ea4 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008e6a:	7ffb      	ldrb	r3, [r7, #31]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8008e70:	7fbb      	ldrb	r3, [r7, #30]
 8008e72:	3301      	adds	r3, #1
 8008e74:	77bb      	strb	r3, [r7, #30]
 8008e76:	e03c      	b.n	8008ef2 <tcp_slowtmr+0x2e2>
 8008e78:	20007e8c 	.word	0x20007e8c
 8008e7c:	20007ea2 	.word	0x20007ea2
 8008e80:	20007e98 	.word	0x20007e98
 8008e84:	08016fe4 	.word	0x08016fe4
 8008e88:	08017194 	.word	0x08017194
 8008e8c:	08017020 	.word	0x08017020
 8008e90:	080171c0 	.word	0x080171c0
 8008e94:	080171ec 	.word	0x080171ec
 8008e98:	0801843c 	.word	0x0801843c
 8008e9c:	0801842c 	.word	0x0801842c
 8008ea0:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ea4:	4b97      	ldr	r3, [pc, #604]	; (8009104 <tcp_slowtmr+0x4f4>)
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	6a1b      	ldr	r3, [r3, #32]
 8008eac:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8008eba:	4618      	mov	r0, r3
 8008ebc:	4b92      	ldr	r3, [pc, #584]	; (8009108 <tcp_slowtmr+0x4f8>)
 8008ebe:	fb00 f303 	mul.w	r3, r0, r3
 8008ec2:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8008ec4:	4991      	ldr	r1, [pc, #580]	; (800910c <tcp_slowtmr+0x4fc>)
 8008ec6:	fba1 1303 	umull	r1, r3, r1, r3
 8008eca:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d910      	bls.n	8008ef2 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8008ed0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ed2:	f003 fe6f 	bl	800cbb4 <tcp_keepalive>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8008eda:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d107      	bne.n	8008ef2 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8008ee8:	3301      	adds	r3, #1
 8008eea:	b2da      	uxtb	r2, r3
 8008eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eee:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d016      	beq.n	8008f28 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8008efa:	4b82      	ldr	r3, [pc, #520]	; (8009104 <tcp_slowtmr+0x4f4>)
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	1ad2      	subs	r2, r2, r3
 8008f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f06:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	005b      	lsls	r3, r3, #1
 8008f10:	440b      	add	r3, r1
 8008f12:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d307      	bcc.n	8008f28 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 fa06 	bl	800932e <tcp_segs_free>
      pcb->ooseq = NULL;
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f24:	2200      	movs	r2, #0
 8008f26:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	7d1b      	ldrb	r3, [r3, #20]
 8008f2c:	2b03      	cmp	r3, #3
 8008f2e:	d109      	bne.n	8008f44 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008f30:	4b74      	ldr	r3, [pc, #464]	; (8009104 <tcp_slowtmr+0x4f4>)
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	6a1b      	ldr	r3, [r3, #32]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	2b28      	cmp	r3, #40	; 0x28
 8008f3c:	d902      	bls.n	8008f44 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008f3e:	7ffb      	ldrb	r3, [r7, #31]
 8008f40:	3301      	adds	r3, #1
 8008f42:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	7d1b      	ldrb	r3, [r3, #20]
 8008f48:	2b09      	cmp	r3, #9
 8008f4a:	d109      	bne.n	8008f60 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008f4c:	4b6d      	ldr	r3, [pc, #436]	; (8009104 <tcp_slowtmr+0x4f4>)
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f52:	6a1b      	ldr	r3, [r3, #32]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	2bf0      	cmp	r3, #240	; 0xf0
 8008f58:	d902      	bls.n	8008f60 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8008f5a:	7ffb      	ldrb	r3, [r7, #31]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008f60:	7ffb      	ldrb	r3, [r7, #31]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d05d      	beq.n	8009022 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f6c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008f6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f70:	f000 fbb0 	bl	80096d4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008f74:	6a3b      	ldr	r3, [r7, #32]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d010      	beq.n	8008f9c <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008f7a:	4b65      	ldr	r3, [pc, #404]	; (8009110 <tcp_slowtmr+0x500>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d106      	bne.n	8008f92 <tcp_slowtmr+0x382>
 8008f84:	4b63      	ldr	r3, [pc, #396]	; (8009114 <tcp_slowtmr+0x504>)
 8008f86:	f240 4289 	movw	r2, #1161	; 0x489
 8008f8a:	4963      	ldr	r1, [pc, #396]	; (8009118 <tcp_slowtmr+0x508>)
 8008f8c:	4863      	ldr	r0, [pc, #396]	; (800911c <tcp_slowtmr+0x50c>)
 8008f8e:	f009 fd37 	bl	8012a00 <iprintf>
        prev->next = pcb->next;
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	6a3b      	ldr	r3, [r7, #32]
 8008f98:	60da      	str	r2, [r3, #12]
 8008f9a:	e00f      	b.n	8008fbc <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008f9c:	4b5c      	ldr	r3, [pc, #368]	; (8009110 <tcp_slowtmr+0x500>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d006      	beq.n	8008fb4 <tcp_slowtmr+0x3a4>
 8008fa6:	4b5b      	ldr	r3, [pc, #364]	; (8009114 <tcp_slowtmr+0x504>)
 8008fa8:	f240 428d 	movw	r2, #1165	; 0x48d
 8008fac:	495c      	ldr	r1, [pc, #368]	; (8009120 <tcp_slowtmr+0x510>)
 8008fae:	485b      	ldr	r0, [pc, #364]	; (800911c <tcp_slowtmr+0x50c>)
 8008fb0:	f009 fd26 	bl	8012a00 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	4a55      	ldr	r2, [pc, #340]	; (8009110 <tcp_slowtmr+0x500>)
 8008fba:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008fbc:	7fbb      	ldrb	r3, [r7, #30]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d010      	beq.n	8008fe4 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008fca:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	1d1d      	adds	r5, r3, #4
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd2:	8adb      	ldrh	r3, [r3, #22]
 8008fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fd6:	8b12      	ldrh	r2, [r2, #24]
 8008fd8:	9201      	str	r2, [sp, #4]
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	462b      	mov	r3, r5
 8008fde:	4622      	mov	r2, r4
 8008fe0:	f003 fc94 	bl	800c90c <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	7d1b      	ldrb	r3, [r3, #20]
 8008fee:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	2001      	movs	r0, #1
 8008ffe:	f7fe fa77 	bl	80074f0 <memp_free>

      tcp_active_pcbs_changed = 0;
 8009002:	4b48      	ldr	r3, [pc, #288]	; (8009124 <tcp_slowtmr+0x514>)
 8009004:	2200      	movs	r2, #0
 8009006:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d004      	beq.n	8009018 <tcp_slowtmr+0x408>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f06f 010c 	mvn.w	r1, #12
 8009014:	68b8      	ldr	r0, [r7, #8]
 8009016:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009018:	4b42      	ldr	r3, [pc, #264]	; (8009124 <tcp_slowtmr+0x514>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d035      	beq.n	800908c <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8009020:	e606      	b.n	8008c30 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8009026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	7edb      	ldrb	r3, [r3, #27]
 8009030:	3301      	adds	r3, #1
 8009032:	b2da      	uxtb	r2, r3
 8009034:	6a3b      	ldr	r3, [r7, #32]
 8009036:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	7eda      	ldrb	r2, [r3, #27]
 800903c:	6a3b      	ldr	r3, [r7, #32]
 800903e:	7f1b      	ldrb	r3, [r3, #28]
 8009040:	429a      	cmp	r2, r3
 8009042:	d323      	bcc.n	800908c <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8009044:	6a3b      	ldr	r3, [r7, #32]
 8009046:	2200      	movs	r2, #0
 8009048:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800904a:	4b36      	ldr	r3, [pc, #216]	; (8009124 <tcp_slowtmr+0x514>)
 800904c:	2200      	movs	r2, #0
 800904e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009050:	6a3b      	ldr	r3, [r7, #32]
 8009052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00a      	beq.n	8009070 <tcp_slowtmr+0x460>
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009060:	6a3a      	ldr	r2, [r7, #32]
 8009062:	6912      	ldr	r2, [r2, #16]
 8009064:	6a39      	ldr	r1, [r7, #32]
 8009066:	4610      	mov	r0, r2
 8009068:	4798      	blx	r3
 800906a:	4603      	mov	r3, r0
 800906c:	777b      	strb	r3, [r7, #29]
 800906e:	e001      	b.n	8009074 <tcp_slowtmr+0x464>
 8009070:	2300      	movs	r3, #0
 8009072:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8009074:	4b2b      	ldr	r3, [pc, #172]	; (8009124 <tcp_slowtmr+0x514>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d000      	beq.n	800907e <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800907c:	e5d8      	b.n	8008c30 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800907e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d102      	bne.n	800908c <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8009086:	6a38      	ldr	r0, [r7, #32]
 8009088:	f003 f9b2 	bl	800c3f0 <tcp_output>
  while (pcb != NULL) {
 800908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908e:	2b00      	cmp	r3, #0
 8009090:	f47f add4 	bne.w	8008c3c <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009094:	2300      	movs	r3, #0
 8009096:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8009098:	4b23      	ldr	r3, [pc, #140]	; (8009128 <tcp_slowtmr+0x518>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800909e:	e068      	b.n	8009172 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	7d1b      	ldrb	r3, [r3, #20]
 80090a4:	2b0a      	cmp	r3, #10
 80090a6:	d006      	beq.n	80090b6 <tcp_slowtmr+0x4a6>
 80090a8:	4b1a      	ldr	r3, [pc, #104]	; (8009114 <tcp_slowtmr+0x504>)
 80090aa:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80090ae:	491f      	ldr	r1, [pc, #124]	; (800912c <tcp_slowtmr+0x51c>)
 80090b0:	481a      	ldr	r0, [pc, #104]	; (800911c <tcp_slowtmr+0x50c>)
 80090b2:	f009 fca5 	bl	8012a00 <iprintf>
    pcb_remove = 0;
 80090b6:	2300      	movs	r3, #0
 80090b8:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80090ba:	4b12      	ldr	r3, [pc, #72]	; (8009104 <tcp_slowtmr+0x4f4>)
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	2bf0      	cmp	r3, #240	; 0xf0
 80090c6:	d902      	bls.n	80090ce <tcp_slowtmr+0x4be>
      ++pcb_remove;
 80090c8:	7ffb      	ldrb	r3, [r7, #31]
 80090ca:	3301      	adds	r3, #1
 80090cc:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80090ce:	7ffb      	ldrb	r3, [r7, #31]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d049      	beq.n	8009168 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80090d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090d6:	f000 fafd 	bl	80096d4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d029      	beq.n	8009134 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80090e0:	4b11      	ldr	r3, [pc, #68]	; (8009128 <tcp_slowtmr+0x518>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d106      	bne.n	80090f8 <tcp_slowtmr+0x4e8>
 80090ea:	4b0a      	ldr	r3, [pc, #40]	; (8009114 <tcp_slowtmr+0x504>)
 80090ec:	f240 42cb 	movw	r2, #1227	; 0x4cb
 80090f0:	490f      	ldr	r1, [pc, #60]	; (8009130 <tcp_slowtmr+0x520>)
 80090f2:	480a      	ldr	r0, [pc, #40]	; (800911c <tcp_slowtmr+0x50c>)
 80090f4:	f009 fc84 	bl	8012a00 <iprintf>
        prev->next = pcb->next;
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	68da      	ldr	r2, [r3, #12]
 80090fc:	6a3b      	ldr	r3, [r7, #32]
 80090fe:	60da      	str	r2, [r3, #12]
 8009100:	e028      	b.n	8009154 <tcp_slowtmr+0x544>
 8009102:	bf00      	nop
 8009104:	20007e8c 	.word	0x20007e8c
 8009108:	000124f8 	.word	0x000124f8
 800910c:	10624dd3 	.word	0x10624dd3
 8009110:	20007e98 	.word	0x20007e98
 8009114:	08016fe4 	.word	0x08016fe4
 8009118:	0801721c 	.word	0x0801721c
 800911c:	08017020 	.word	0x08017020
 8009120:	08017248 	.word	0x08017248
 8009124:	20007ea0 	.word	0x20007ea0
 8009128:	20007e9c 	.word	0x20007e9c
 800912c:	08017274 	.word	0x08017274
 8009130:	080172a4 	.word	0x080172a4
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009134:	4b13      	ldr	r3, [pc, #76]	; (8009184 <tcp_slowtmr+0x574>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800913a:	429a      	cmp	r2, r3
 800913c:	d006      	beq.n	800914c <tcp_slowtmr+0x53c>
 800913e:	4b12      	ldr	r3, [pc, #72]	; (8009188 <tcp_slowtmr+0x578>)
 8009140:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8009144:	4911      	ldr	r1, [pc, #68]	; (800918c <tcp_slowtmr+0x57c>)
 8009146:	4812      	ldr	r0, [pc, #72]	; (8009190 <tcp_slowtmr+0x580>)
 8009148:	f009 fc5a 	bl	8012a00 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	4a0c      	ldr	r2, [pc, #48]	; (8009184 <tcp_slowtmr+0x574>)
 8009152:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8009158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800915e:	69b9      	ldr	r1, [r7, #24]
 8009160:	2001      	movs	r0, #1
 8009162:	f7fe f9c5 	bl	80074f0 <memp_free>
 8009166:	e004      	b.n	8009172 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800916c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8009172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009174:	2b00      	cmp	r3, #0
 8009176:	d193      	bne.n	80090a0 <tcp_slowtmr+0x490>
    }
  }
}
 8009178:	bf00      	nop
 800917a:	bf00      	nop
 800917c:	3728      	adds	r7, #40	; 0x28
 800917e:	46bd      	mov	sp, r7
 8009180:	bdb0      	pop	{r4, r5, r7, pc}
 8009182:	bf00      	nop
 8009184:	20007e9c 	.word	0x20007e9c
 8009188:	08016fe4 	.word	0x08016fe4
 800918c:	080172cc 	.word	0x080172cc
 8009190:	08017020 	.word	0x08017020

08009194 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800919a:	4b2d      	ldr	r3, [pc, #180]	; (8009250 <tcp_fasttmr+0xbc>)
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	3301      	adds	r3, #1
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	4b2b      	ldr	r3, [pc, #172]	; (8009250 <tcp_fasttmr+0xbc>)
 80091a4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80091a6:	4b2b      	ldr	r3, [pc, #172]	; (8009254 <tcp_fasttmr+0xc0>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80091ac:	e048      	b.n	8009240 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	7f5a      	ldrb	r2, [r3, #29]
 80091b2:	4b27      	ldr	r3, [pc, #156]	; (8009250 <tcp_fasttmr+0xbc>)
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d03f      	beq.n	800923a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80091ba:	4b25      	ldr	r3, [pc, #148]	; (8009250 <tcp_fasttmr+0xbc>)
 80091bc:	781a      	ldrb	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	7e9b      	ldrb	r3, [r3, #26]
 80091c6:	f003 0301 	and.w	r3, r3, #1
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d010      	beq.n	80091f0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	7e9b      	ldrb	r3, [r3, #26]
 80091d2:	f043 0302 	orr.w	r3, r3, #2
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f003 f907 	bl	800c3f0 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	7e9b      	ldrb	r3, [r3, #26]
 80091e6:	f023 0303 	bic.w	r3, r3, #3
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	7e9b      	ldrb	r3, [r3, #26]
 80091f4:	f003 0308 	and.w	r3, r3, #8
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d009      	beq.n	8009210 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	7e9b      	ldrb	r3, [r3, #26]
 8009200:	f023 0308 	bic.w	r3, r3, #8
 8009204:	b2da      	uxtb	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7ff fb18 	bl	8008840 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00a      	beq.n	8009234 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800921e:	4b0e      	ldr	r3, [pc, #56]	; (8009258 <tcp_fasttmr+0xc4>)
 8009220:	2200      	movs	r2, #0
 8009222:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f819 	bl	800925c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800922a:	4b0b      	ldr	r3, [pc, #44]	; (8009258 <tcp_fasttmr+0xc4>)
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d000      	beq.n	8009234 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009232:	e7b8      	b.n	80091a6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	607b      	str	r3, [r7, #4]
 8009238:	e002      	b.n	8009240 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1b3      	bne.n	80091ae <tcp_fasttmr+0x1a>
    }
  }
}
 8009246:	bf00      	nop
 8009248:	bf00      	nop
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	20007ea2 	.word	0x20007ea2
 8009254:	20007e98 	.word	0x20007e98
 8009258:	20007ea0 	.word	0x20007ea0

0800925c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800925c:	b590      	push	{r4, r7, lr}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009268:	7b5b      	ldrb	r3, [r3, #13]
 800926a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009270:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00b      	beq.n	800929a <tcp_process_refused_data+0x3e>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6918      	ldr	r0, [r3, #16]
 800928c:	2300      	movs	r3, #0
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	6879      	ldr	r1, [r7, #4]
 8009292:	47a0      	blx	r4
 8009294:	4603      	mov	r3, r0
 8009296:	73fb      	strb	r3, [r7, #15]
 8009298:	e007      	b.n	80092aa <tcp_process_refused_data+0x4e>
 800929a:	2300      	movs	r3, #0
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	6879      	ldr	r1, [r7, #4]
 80092a0:	2000      	movs	r0, #0
 80092a2:	f000 f88d 	bl	80093c0 <tcp_recv_null>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80092aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d12a      	bne.n	8009308 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80092b2:	7bbb      	ldrb	r3, [r7, #14]
 80092b4:	f003 0320 	and.w	r3, r3, #32
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d033      	beq.n	8009324 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092c0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80092c4:	d005      	beq.n	80092d2 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ca:	3301      	adds	r3, #1
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00b      	beq.n	80092f4 <tcp_process_refused_data+0x98>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6918      	ldr	r0, [r3, #16]
 80092e6:	2300      	movs	r3, #0
 80092e8:	2200      	movs	r2, #0
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	47a0      	blx	r4
 80092ee:	4603      	mov	r3, r0
 80092f0:	73fb      	strb	r3, [r7, #15]
 80092f2:	e001      	b.n	80092f8 <tcp_process_refused_data+0x9c>
 80092f4:	2300      	movs	r3, #0
 80092f6:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80092f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092fc:	f113 0f0d 	cmn.w	r3, #13
 8009300:	d110      	bne.n	8009324 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8009302:	f06f 030c 	mvn.w	r3, #12
 8009306:	e00e      	b.n	8009326 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8009308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800930c:	f113 0f0d 	cmn.w	r3, #13
 8009310:	d102      	bne.n	8009318 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009312:	f06f 030c 	mvn.w	r3, #12
 8009316:	e006      	b.n	8009326 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800931e:	f06f 0304 	mvn.w	r3, #4
 8009322:	e000      	b.n	8009326 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3714      	adds	r7, #20
 800932a:	46bd      	mov	sp, r7
 800932c:	bd90      	pop	{r4, r7, pc}

0800932e <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b084      	sub	sp, #16
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009336:	e007      	b.n	8009348 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f80a 	bl	8009358 <tcp_seg_free>
    seg = next;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1f4      	bne.n	8009338 <tcp_segs_free+0xa>
  }
}
 800934e:	bf00      	nop
 8009350:	bf00      	nop
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00c      	beq.n	8009380 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d004      	beq.n	8009378 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	4618      	mov	r0, r3
 8009374:	f7fe fdfa 	bl	8007f6c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009378:	6879      	ldr	r1, [r7, #4]
 800937a:	2003      	movs	r0, #3
 800937c:	f7fe f8b8 	bl	80074f0 <memp_free>
  }
}
 8009380:	bf00      	nop
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009390:	2003      	movs	r0, #3
 8009392:	f7fe f85b 	bl	800744c <memp_malloc>
 8009396:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <tcp_seg_copy+0x1a>
    return NULL;
 800939e:	2300      	movs	r3, #0
 80093a0:	e00a      	b.n	80093b8 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80093a2:	2210      	movs	r2, #16
 80093a4:	6879      	ldr	r1, [r7, #4]
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f008 fca6 	bl	8011cf8 <memcpy>
  pbuf_ref(cseg->p);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fe fe85 	bl	80080c0 <pbuf_ref>
  return cseg;
 80093b6:	68fb      	ldr	r3, [r7, #12]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]
 80093cc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d009      	beq.n	80093e8 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	891b      	ldrh	r3, [r3, #8]
 80093d8:	4619      	mov	r1, r3
 80093da:	68b8      	ldr	r0, [r7, #8]
 80093dc:	f7ff fbbe 	bl	8008b5c <tcp_recved>
    pbuf_free(p);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f7fe fdc3 	bl	8007f6c <pbuf_free>
 80093e6:	e008      	b.n	80093fa <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 80093e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d104      	bne.n	80093fa <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 80093f0:	68b8      	ldr	r0, [r7, #8]
 80093f2:	f7ff fa8f 	bl	8008914 <tcp_close>
 80093f6:	4603      	mov	r3, r0
 80093f8:	e000      	b.n	80093fc <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	4603      	mov	r3, r0
 800940c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800940e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009412:	2b00      	cmp	r3, #0
 8009414:	db01      	blt.n	800941a <tcp_kill_prio+0x16>
 8009416:	79fb      	ldrb	r3, [r7, #7]
 8009418:	e000      	b.n	800941c <tcp_kill_prio+0x18>
 800941a:	237f      	movs	r3, #127	; 0x7f
 800941c:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009422:	2300      	movs	r3, #0
 8009424:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009426:	4b16      	ldr	r3, [pc, #88]	; (8009480 <tcp_kill_prio+0x7c>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	617b      	str	r3, [r7, #20]
 800942c:	e01a      	b.n	8009464 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	7d5b      	ldrb	r3, [r3, #21]
 8009432:	7afa      	ldrb	r2, [r7, #11]
 8009434:	429a      	cmp	r2, r3
 8009436:	d312      	bcc.n	800945e <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009438:	4b12      	ldr	r3, [pc, #72]	; (8009484 <tcp_kill_prio+0x80>)
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	6a1b      	ldr	r3, [r3, #32]
 8009440:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	429a      	cmp	r2, r3
 8009446:	d80a      	bhi.n	800945e <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8009448:	4b0e      	ldr	r3, [pc, #56]	; (8009484 <tcp_kill_prio+0x80>)
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	6a1b      	ldr	r3, [r3, #32]
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	7d5b      	ldrb	r3, [r3, #21]
 800945c:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	617b      	str	r3, [r7, #20]
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1e1      	bne.n	800942e <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d002      	beq.n	8009476 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009470:	6938      	ldr	r0, [r7, #16]
 8009472:	f7ff fb19 	bl	8008aa8 <tcp_abort>
  }
}
 8009476:	bf00      	nop
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	20007e98 	.word	0x20007e98
 8009484:	20007e8c 	.word	0x20007e8c

08009488 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009492:	79fb      	ldrb	r3, [r7, #7]
 8009494:	2b08      	cmp	r3, #8
 8009496:	d009      	beq.n	80094ac <tcp_kill_state+0x24>
 8009498:	79fb      	ldrb	r3, [r7, #7]
 800949a:	2b09      	cmp	r3, #9
 800949c:	d006      	beq.n	80094ac <tcp_kill_state+0x24>
 800949e:	4b1a      	ldr	r3, [pc, #104]	; (8009508 <tcp_kill_state+0x80>)
 80094a0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80094a4:	4919      	ldr	r1, [pc, #100]	; (800950c <tcp_kill_state+0x84>)
 80094a6:	481a      	ldr	r0, [pc, #104]	; (8009510 <tcp_kill_state+0x88>)
 80094a8:	f009 faaa 	bl	8012a00 <iprintf>

  inactivity = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80094b0:	2300      	movs	r3, #0
 80094b2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80094b4:	4b17      	ldr	r3, [pc, #92]	; (8009514 <tcp_kill_state+0x8c>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	617b      	str	r3, [r7, #20]
 80094ba:	e017      	b.n	80094ec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	7d1b      	ldrb	r3, [r3, #20]
 80094c0:	79fa      	ldrb	r2, [r7, #7]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d10f      	bne.n	80094e6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80094c6:	4b14      	ldr	r3, [pc, #80]	; (8009518 <tcp_kill_state+0x90>)
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d807      	bhi.n	80094e6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80094d6:	4b10      	ldr	r3, [pc, #64]	; (8009518 <tcp_kill_state+0x90>)
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	617b      	str	r3, [r7, #20]
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1e4      	bne.n	80094bc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d003      	beq.n	8009500 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80094f8:	2100      	movs	r1, #0
 80094fa:	6938      	ldr	r0, [r7, #16]
 80094fc:	f7ff fa22 	bl	8008944 <tcp_abandon>
  }
}
 8009500:	bf00      	nop
 8009502:	3718      	adds	r7, #24
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	08016fe4 	.word	0x08016fe4
 800950c:	080172f4 	.word	0x080172f4
 8009510:	08017020 	.word	0x08017020
 8009514:	20007e98 	.word	0x20007e98
 8009518:	20007e8c 	.word	0x20007e8c

0800951c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009522:	2300      	movs	r3, #0
 8009524:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009526:	2300      	movs	r3, #0
 8009528:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800952a:	4b12      	ldr	r3, [pc, #72]	; (8009574 <tcp_kill_timewait+0x58>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	60fb      	str	r3, [r7, #12]
 8009530:	e012      	b.n	8009558 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009532:	4b11      	ldr	r3, [pc, #68]	; (8009578 <tcp_kill_timewait+0x5c>)
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	429a      	cmp	r2, r3
 8009540:	d807      	bhi.n	8009552 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009542:	4b0d      	ldr	r3, [pc, #52]	; (8009578 <tcp_kill_timewait+0x5c>)
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1e9      	bne.n	8009532 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d002      	beq.n	800956a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009564:	68b8      	ldr	r0, [r7, #8]
 8009566:	f7ff fa9f 	bl	8008aa8 <tcp_abort>
  }
}
 800956a:	bf00      	nop
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	20007e9c 	.word	0x20007e9c
 8009578:	20007e8c 	.word	0x20007e8c

0800957c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	4603      	mov	r3, r0
 8009584:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009586:	2001      	movs	r0, #1
 8009588:	f7fd ff60 	bl	800744c <memp_malloc>
 800958c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d14c      	bne.n	800962e <tcp_alloc+0xb2>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009594:	f7ff ffc2 	bl	800951c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009598:	2001      	movs	r0, #1
 800959a:	f7fd ff57 	bl	800744c <memp_malloc>
 800959e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d139      	bne.n	800961a <tcp_alloc+0x9e>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80095a6:	2009      	movs	r0, #9
 80095a8:	f7ff ff6e 	bl	8009488 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80095ac:	2001      	movs	r0, #1
 80095ae:	f7fd ff4d 	bl	800744c <memp_malloc>
 80095b2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d125      	bne.n	8009606 <tcp_alloc+0x8a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80095ba:	2008      	movs	r0, #8
 80095bc:	f7ff ff64 	bl	8009488 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80095c0:	2001      	movs	r0, #1
 80095c2:	f7fd ff43 	bl	800744c <memp_malloc>
 80095c6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d111      	bne.n	80095f2 <tcp_alloc+0x76>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80095ce:	79fb      	ldrb	r3, [r7, #7]
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7ff ff17 	bl	8009404 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80095d6:	2001      	movs	r0, #1
 80095d8:	f7fd ff38 	bl	800744c <memp_malloc>
 80095dc:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d006      	beq.n	80095f2 <tcp_alloc+0x76>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80095e4:	4b36      	ldr	r3, [pc, #216]	; (80096c0 <tcp_alloc+0x144>)
 80095e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80095ea:	881a      	ldrh	r2, [r3, #0]
 80095ec:	3a01      	subs	r2, #1
 80095ee:	b292      	uxth	r2, r2
 80095f0:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d006      	beq.n	8009606 <tcp_alloc+0x8a>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80095f8:	4b31      	ldr	r3, [pc, #196]	; (80096c0 <tcp_alloc+0x144>)
 80095fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80095fe:	881a      	ldrh	r2, [r3, #0]
 8009600:	3a01      	subs	r2, #1
 8009602:	b292      	uxth	r2, r2
 8009604:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d006      	beq.n	800961a <tcp_alloc+0x9e>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800960c:	4b2c      	ldr	r3, [pc, #176]	; (80096c0 <tcp_alloc+0x144>)
 800960e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009612:	881a      	ldrh	r2, [r3, #0]
 8009614:	3a01      	subs	r2, #1
 8009616:	b292      	uxth	r2, r2
 8009618:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d006      	beq.n	800962e <tcp_alloc+0xb2>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8009620:	4b27      	ldr	r3, [pc, #156]	; (80096c0 <tcp_alloc+0x144>)
 8009622:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009626:	881a      	ldrh	r2, [r3, #0]
 8009628:	3a01      	subs	r2, #1
 800962a:	b292      	uxth	r2, r2
 800962c:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d03f      	beq.n	80096b4 <tcp_alloc+0x138>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009634:	2298      	movs	r2, #152	; 0x98
 8009636:	2100      	movs	r1, #0
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f008 fb6b 	bl	8011d14 <memset>
    pcb->prio = prio;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	79fa      	ldrb	r2, [r7, #7]
 8009642:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800964a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009654:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	22ff      	movs	r2, #255	; 0xff
 8009662:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f44f 7206 	mov.w	r2, #536	; 0x218
 800966a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2206      	movs	r2, #6
 8009670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2206      	movs	r2, #6
 8009678:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009680:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2201      	movs	r2, #1
 8009686:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800968a:	4b0e      	ldr	r3, [pc, #56]	; (80096c4 <tcp_alloc+0x148>)
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009692:	4b0d      	ldr	r3, [pc, #52]	; (80096c8 <tcp_alloc+0x14c>)
 8009694:	781a      	ldrb	r2, [r3, #0]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80096a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4a09      	ldr	r2, [pc, #36]	; (80096cc <tcp_alloc+0x150>)
 80096a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4a08      	ldr	r2, [pc, #32]	; (80096d0 <tcp_alloc+0x154>)
 80096b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80096b4:	68fb      	ldr	r3, [r7, #12]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	20007db4 	.word	0x20007db4
 80096c4:	20007e8c 	.word	0x20007e8c
 80096c8:	20007ea2 	.word	0x20007ea2
 80096cc:	080093c1 	.word	0x080093c1
 80096d0:	006ddd00 	.word	0x006ddd00

080096d4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	7d1b      	ldrb	r3, [r3, #20]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d034      	beq.n	800974e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80096e8:	2b0a      	cmp	r3, #10
 80096ea:	d030      	beq.n	800974e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d02c      	beq.n	800974e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d007      	beq.n	800970c <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009700:	4618      	mov	r0, r3
 8009702:	f7fe fc33 	bl	8007f6c <pbuf_free>
      pcb->refused_data = NULL;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009710:	4618      	mov	r0, r3
 8009712:	f7ff fe0c 	bl	800932e <tcp_segs_free>
    pcb->ooseq = NULL;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009722:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009728:	4618      	mov	r0, r3
 800972a:	f7ff fe00 	bl	800932e <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009732:	4618      	mov	r0, r3
 8009734:	f7ff fdfb 	bl	800932e <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	669a      	str	r2, [r3, #104]	; 0x68
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800974e:	bf00      	nop
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
	...

08009758 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	683a      	ldr	r2, [r7, #0]
 8009768:	429a      	cmp	r2, r3
 800976a:	d105      	bne.n	8009778 <tcp_pcb_remove+0x20>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68da      	ldr	r2, [r3, #12]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	601a      	str	r2, [r3, #0]
 8009776:	e013      	b.n	80097a0 <tcp_pcb_remove+0x48>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	60fb      	str	r3, [r7, #12]
 800977e:	e00c      	b.n	800979a <tcp_pcb_remove+0x42>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	429a      	cmp	r2, r3
 8009788:	d104      	bne.n	8009794 <tcp_pcb_remove+0x3c>
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	68da      	ldr	r2, [r3, #12]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	60da      	str	r2, [r3, #12]
 8009792:	e005      	b.n	80097a0 <tcp_pcb_remove+0x48>
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	60fb      	str	r3, [r7, #12]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1ef      	bne.n	8009780 <tcp_pcb_remove+0x28>
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	2200      	movs	r2, #0
 80097a4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80097a6:	6838      	ldr	r0, [r7, #0]
 80097a8:	f7ff ff94 	bl	80096d4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	7d1b      	ldrb	r3, [r3, #20]
 80097b0:	2b0a      	cmp	r3, #10
 80097b2:	d013      	beq.n	80097dc <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d00f      	beq.n	80097dc <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	7e9b      	ldrb	r3, [r3, #26]
 80097c0:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d009      	beq.n	80097dc <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	7e9b      	ldrb	r3, [r3, #26]
 80097cc:	f043 0302 	orr.w	r3, r3, #2
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80097d6:	6838      	ldr	r0, [r7, #0]
 80097d8:	f002 fe0a 	bl	800c3f0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	7d1b      	ldrb	r3, [r3, #20]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d020      	beq.n	8009826 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d006      	beq.n	80097fa <tcp_pcb_remove+0xa2>
 80097ec:	4b13      	ldr	r3, [pc, #76]	; (800983c <tcp_pcb_remove+0xe4>)
 80097ee:	f240 7253 	movw	r2, #1875	; 0x753
 80097f2:	4913      	ldr	r1, [pc, #76]	; (8009840 <tcp_pcb_remove+0xe8>)
 80097f4:	4813      	ldr	r0, [pc, #76]	; (8009844 <tcp_pcb_remove+0xec>)
 80097f6:	f009 f903 	bl	8012a00 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d006      	beq.n	8009810 <tcp_pcb_remove+0xb8>
 8009802:	4b0e      	ldr	r3, [pc, #56]	; (800983c <tcp_pcb_remove+0xe4>)
 8009804:	f240 7254 	movw	r2, #1876	; 0x754
 8009808:	490f      	ldr	r1, [pc, #60]	; (8009848 <tcp_pcb_remove+0xf0>)
 800980a:	480e      	ldr	r0, [pc, #56]	; (8009844 <tcp_pcb_remove+0xec>)
 800980c:	f009 f8f8 	bl	8012a00 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009814:	2b00      	cmp	r3, #0
 8009816:	d006      	beq.n	8009826 <tcp_pcb_remove+0xce>
 8009818:	4b08      	ldr	r3, [pc, #32]	; (800983c <tcp_pcb_remove+0xe4>)
 800981a:	f240 7256 	movw	r2, #1878	; 0x756
 800981e:	490b      	ldr	r1, [pc, #44]	; (800984c <tcp_pcb_remove+0xf4>)
 8009820:	4808      	ldr	r0, [pc, #32]	; (8009844 <tcp_pcb_remove+0xec>)
 8009822:	f009 f8ed 	bl	8012a00 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	2200      	movs	r2, #0
 800982a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	2200      	movs	r2, #0
 8009830:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009832:	bf00      	nop
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	08016fe4 	.word	0x08016fe4
 8009840:	0801739c 	.word	0x0801739c
 8009844:	08017020 	.word	0x08017020
 8009848:	080173b4 	.word	0x080173b4
 800984c:	080173d0 	.word	0x080173d0

08009850 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009858:	4b06      	ldr	r3, [pc, #24]	; (8009874 <tcp_next_iss+0x24>)
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	4b06      	ldr	r3, [pc, #24]	; (8009878 <tcp_next_iss+0x28>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4413      	add	r3, r2
 8009862:	4a04      	ldr	r2, [pc, #16]	; (8009874 <tcp_next_iss+0x24>)
 8009864:	6013      	str	r3, [r2, #0]
  return iss;
 8009866:	4b03      	ldr	r3, [pc, #12]	; (8009874 <tcp_next_iss+0x24>)
 8009868:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800986a:	4618      	mov	r0, r3
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	bc80      	pop	{r7}
 8009872:	4770      	bx	lr
 8009874:	20000030 	.word	0x20000030
 8009878:	20007e8c 	.word	0x20007e8c

0800987c <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	4603      	mov	r3, r0
 8009884:	6039      	str	r1, [r7, #0]
 8009886:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8009888:	6838      	ldr	r0, [r7, #0]
 800988a:	f005 f949 	bl	800eb20 <ip4_route>
 800988e:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d101      	bne.n	800989a <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8009896:	88fb      	ldrh	r3, [r7, #6]
 8009898:	e010      	b.n	80098bc <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800989e:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80098a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d008      	beq.n	80098ba <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80098a8:	897b      	ldrh	r3, [r7, #10]
 80098aa:	3b28      	subs	r3, #40	; 0x28
 80098ac:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80098ae:	893a      	ldrh	r2, [r7, #8]
 80098b0:	88fb      	ldrh	r3, [r7, #6]
 80098b2:	4293      	cmp	r3, r2
 80098b4:	bf28      	it	cs
 80098b6:	4613      	movcs	r3, r2
 80098b8:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 80098ba:	88fb      	ldrh	r3, [r7, #6]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80098d2:	e011      	b.n	80098f8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d108      	bne.n	80098f2 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f7ff f8de 	bl	8008aa8 <tcp_abort>
      pcb = next;
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	e002      	b.n	80098f8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1ea      	bne.n	80098d4 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80098fe:	bf00      	nop
 8009900:	bf00      	nop
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d02c      	beq.n	8009972 <tcp_netif_ip_addr_changed+0x6a>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d028      	beq.n	8009972 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009920:	4b16      	ldr	r3, [pc, #88]	; (800997c <tcp_netif_ip_addr_changed+0x74>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4619      	mov	r1, r3
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7ff ffcc 	bl	80098c4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800992c:	4b14      	ldr	r3, [pc, #80]	; (8009980 <tcp_netif_ip_addr_changed+0x78>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4619      	mov	r1, r3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7ff ffc6 	bl	80098c4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d019      	beq.n	8009972 <tcp_netif_ip_addr_changed+0x6a>
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d015      	beq.n	8009972 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8009946:	4b0f      	ldr	r3, [pc, #60]	; (8009984 <tcp_netif_ip_addr_changed+0x7c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	60fb      	str	r3, [r7, #12]
 800994c:	e00e      	b.n	800996c <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	429a      	cmp	r2, r3
 800995e:	d103      	bne.n	8009968 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1ed      	bne.n	800994e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009972:	bf00      	nop
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	20007e98 	.word	0x20007e98
 8009980:	20007e90 	.word	0x20007e90
 8009984:	20007e94 	.word	0x20007e94

08009988 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009988:	b590      	push	{r4, r7, lr}
 800998a:	b08b      	sub	sp, #44	; 0x2c
 800998c:	af02      	add	r7, sp, #8
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8009992:	4b96      	ldr	r3, [pc, #600]	; (8009bec <tcp_input+0x264>)
 8009994:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8009998:	3301      	adds	r3, #1
 800999a:	b29a      	uxth	r2, r3
 800999c:	4b93      	ldr	r3, [pc, #588]	; (8009bec <tcp_input+0x264>)
 800999e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	4a92      	ldr	r2, [pc, #584]	; (8009bf0 <tcp_input+0x268>)
 80099a8:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	895b      	ldrh	r3, [r3, #10]
 80099ae:	2b13      	cmp	r3, #19
 80099b0:	d808      	bhi.n	80099c4 <tcp_input+0x3c>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 80099b2:	4b8e      	ldr	r3, [pc, #568]	; (8009bec <tcp_input+0x264>)
 80099b4:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80099b8:	3301      	adds	r3, #1
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	4b8b      	ldr	r3, [pc, #556]	; (8009bec <tcp_input+0x264>)
 80099be:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 80099c2:	e3db      	b.n	800a17c <tcp_input+0x7f4>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80099c4:	4b8b      	ldr	r3, [pc, #556]	; (8009bf4 <tcp_input+0x26c>)
 80099c6:	695b      	ldr	r3, [r3, #20]
 80099c8:	4a8a      	ldr	r2, [pc, #552]	; (8009bf4 <tcp_input+0x26c>)
 80099ca:	6812      	ldr	r2, [r2, #0]
 80099cc:	4611      	mov	r1, r2
 80099ce:	4618      	mov	r0, r3
 80099d0:	f005 fb8c 	bl	800f0ec <ip4_addr_isbroadcast_u32>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d105      	bne.n	80099e6 <tcp_input+0x5e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80099da:	4b86      	ldr	r3, [pc, #536]	; (8009bf4 <tcp_input+0x26c>)
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80099e2:	2be0      	cmp	r3, #224	; 0xe0
 80099e4:	d108      	bne.n	80099f8 <tcp_input+0x70>
    TCP_STATS_INC(tcp.proterr);
 80099e6:	4b81      	ldr	r3, [pc, #516]	; (8009bec <tcp_input+0x264>)
 80099e8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80099ec:	3301      	adds	r3, #1
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	4b7e      	ldr	r3, [pc, #504]	; (8009bec <tcp_input+0x264>)
 80099f2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    goto dropped;
 80099f6:	e3c1      	b.n	800a17c <tcp_input+0x7f4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80099f8:	4b7d      	ldr	r3, [pc, #500]	; (8009bf0 <tcp_input+0x268>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	899b      	ldrh	r3, [r3, #12]
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7fd f8e2 	bl	8006bca <lwip_htons>
 8009a06:	4603      	mov	r3, r0
 8009a08:	0b1b      	lsrs	r3, r3, #12
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009a12:	7cbb      	ldrb	r3, [r7, #18]
 8009a14:	2b13      	cmp	r3, #19
 8009a16:	d905      	bls.n	8009a24 <tcp_input+0x9c>
 8009a18:	7cbb      	ldrb	r3, [r7, #18]
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	891b      	ldrh	r3, [r3, #8]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d908      	bls.n	8009a36 <tcp_input+0xae>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8009a24:	4b71      	ldr	r3, [pc, #452]	; (8009bec <tcp_input+0x264>)
 8009a26:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	4b6f      	ldr	r3, [pc, #444]	; (8009bec <tcp_input+0x264>)
 8009a30:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 8009a34:	e3a2      	b.n	800a17c <tcp_input+0x7f4>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8009a36:	7cbb      	ldrb	r3, [r7, #18]
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	3b14      	subs	r3, #20
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	4b6e      	ldr	r3, [pc, #440]	; (8009bf8 <tcp_input+0x270>)
 8009a40:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009a42:	4b6e      	ldr	r3, [pc, #440]	; (8009bfc <tcp_input+0x274>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	895a      	ldrh	r2, [r3, #10]
 8009a4c:	7cbb      	ldrb	r3, [r7, #18]
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d30d      	bcc.n	8009a70 <tcp_input+0xe8>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009a54:	4b68      	ldr	r3, [pc, #416]	; (8009bf8 <tcp_input+0x270>)
 8009a56:	881a      	ldrh	r2, [r3, #0]
 8009a58:	4b69      	ldr	r3, [pc, #420]	; (8009c00 <tcp_input+0x278>)
 8009a5a:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8009a5c:	7cbb      	ldrb	r3, [r7, #18]
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	425b      	negs	r3, r3
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	b21b      	sxth	r3, r3
 8009a66:	4619      	mov	r1, r3
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f7fe fa5b 	bl	8007f24 <pbuf_header>
 8009a6e:	e05d      	b.n	8009b2c <tcp_input+0x1a4>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d105      	bne.n	8009a84 <tcp_input+0xfc>
 8009a78:	4b62      	ldr	r3, [pc, #392]	; (8009c04 <tcp_input+0x27c>)
 8009a7a:	22b2      	movs	r2, #178	; 0xb2
 8009a7c:	4962      	ldr	r1, [pc, #392]	; (8009c08 <tcp_input+0x280>)
 8009a7e:	4863      	ldr	r0, [pc, #396]	; (8009c0c <tcp_input+0x284>)
 8009a80:	f008 ffbe 	bl	8012a00 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8009a84:	f06f 0113 	mvn.w	r1, #19
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f7fe fa4b 	bl	8007f24 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	895a      	ldrh	r2, [r3, #10]
 8009a92:	4b5b      	ldr	r3, [pc, #364]	; (8009c00 <tcp_input+0x278>)
 8009a94:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8009a96:	4b58      	ldr	r3, [pc, #352]	; (8009bf8 <tcp_input+0x270>)
 8009a98:	881a      	ldrh	r2, [r3, #0]
 8009a9a:	4b59      	ldr	r3, [pc, #356]	; (8009c00 <tcp_input+0x278>)
 8009a9c:	881b      	ldrh	r3, [r3, #0]
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8009aa2:	4b57      	ldr	r3, [pc, #348]	; (8009c00 <tcp_input+0x278>)
 8009aa4:	881b      	ldrh	r3, [r3, #0]
 8009aa6:	425b      	negs	r3, r3
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	b21b      	sxth	r3, r3
 8009aac:	4619      	mov	r1, r3
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7fe fa38 	bl	8007f24 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	895b      	ldrh	r3, [r3, #10]
 8009aba:	8a3a      	ldrh	r2, [r7, #16]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d908      	bls.n	8009ad2 <tcp_input+0x14a>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8009ac0:	4b4a      	ldr	r3, [pc, #296]	; (8009bec <tcp_input+0x264>)
 8009ac2:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	4b48      	ldr	r3, [pc, #288]	; (8009bec <tcp_input+0x264>)
 8009acc:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 8009ad0:	e354      	b.n	800a17c <tcp_input+0x7f4>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	4a48      	ldr	r2, [pc, #288]	; (8009bfc <tcp_input+0x274>)
 8009ada:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	8a3b      	ldrh	r3, [r7, #16]
 8009ae2:	425b      	negs	r3, r3
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	b21b      	sxth	r3, r3
 8009ae8:	4619      	mov	r1, r3
 8009aea:	4610      	mov	r0, r2
 8009aec:	f7fe fa1a 	bl	8007f24 <pbuf_header>
    p->tot_len -= opt2len;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	891a      	ldrh	r2, [r3, #8]
 8009af4:	8a3b      	ldrh	r3, [r7, #16]
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	895b      	ldrh	r3, [r3, #10]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d005      	beq.n	8009b12 <tcp_input+0x18a>
 8009b06:	4b3f      	ldr	r3, [pc, #252]	; (8009c04 <tcp_input+0x27c>)
 8009b08:	22cf      	movs	r2, #207	; 0xcf
 8009b0a:	4941      	ldr	r1, [pc, #260]	; (8009c10 <tcp_input+0x288>)
 8009b0c:	483f      	ldr	r0, [pc, #252]	; (8009c0c <tcp_input+0x284>)
 8009b0e:	f008 ff77 	bl	8012a00 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	891a      	ldrh	r2, [r3, #8]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	891b      	ldrh	r3, [r3, #8]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d005      	beq.n	8009b2c <tcp_input+0x1a4>
 8009b20:	4b38      	ldr	r3, [pc, #224]	; (8009c04 <tcp_input+0x27c>)
 8009b22:	22d0      	movs	r2, #208	; 0xd0
 8009b24:	493b      	ldr	r1, [pc, #236]	; (8009c14 <tcp_input+0x28c>)
 8009b26:	4839      	ldr	r0, [pc, #228]	; (8009c0c <tcp_input+0x284>)
 8009b28:	f008 ff6a 	bl	8012a00 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009b2c:	4b30      	ldr	r3, [pc, #192]	; (8009bf0 <tcp_input+0x268>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	881b      	ldrh	r3, [r3, #0]
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	4a2e      	ldr	r2, [pc, #184]	; (8009bf0 <tcp_input+0x268>)
 8009b36:	6814      	ldr	r4, [r2, #0]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7fd f846 	bl	8006bca <lwip_htons>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009b42:	4b2b      	ldr	r3, [pc, #172]	; (8009bf0 <tcp_input+0x268>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	885b      	ldrh	r3, [r3, #2]
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	4a29      	ldr	r2, [pc, #164]	; (8009bf0 <tcp_input+0x268>)
 8009b4c:	6814      	ldr	r4, [r2, #0]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fd f83b 	bl	8006bca <lwip_htons>
 8009b54:	4603      	mov	r3, r0
 8009b56:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009b58:	4b25      	ldr	r3, [pc, #148]	; (8009bf0 <tcp_input+0x268>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	4a24      	ldr	r2, [pc, #144]	; (8009bf0 <tcp_input+0x268>)
 8009b60:	6814      	ldr	r4, [r2, #0]
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fd f83e 	bl	8006be4 <lwip_htonl>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	6063      	str	r3, [r4, #4]
 8009b6c:	6863      	ldr	r3, [r4, #4]
 8009b6e:	4a2a      	ldr	r2, [pc, #168]	; (8009c18 <tcp_input+0x290>)
 8009b70:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009b72:	4b1f      	ldr	r3, [pc, #124]	; (8009bf0 <tcp_input+0x268>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	4a1d      	ldr	r2, [pc, #116]	; (8009bf0 <tcp_input+0x268>)
 8009b7a:	6814      	ldr	r4, [r2, #0]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7fd f831 	bl	8006be4 <lwip_htonl>
 8009b82:	4603      	mov	r3, r0
 8009b84:	60a3      	str	r3, [r4, #8]
 8009b86:	68a3      	ldr	r3, [r4, #8]
 8009b88:	4a24      	ldr	r2, [pc, #144]	; (8009c1c <tcp_input+0x294>)
 8009b8a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009b8c:	4b18      	ldr	r3, [pc, #96]	; (8009bf0 <tcp_input+0x268>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	89db      	ldrh	r3, [r3, #14]
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	4a16      	ldr	r2, [pc, #88]	; (8009bf0 <tcp_input+0x268>)
 8009b96:	6814      	ldr	r4, [r2, #0]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fd f816 	bl	8006bca <lwip_htons>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009ba2:	4b13      	ldr	r3, [pc, #76]	; (8009bf0 <tcp_input+0x268>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	899b      	ldrh	r3, [r3, #12]
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fd f80d 	bl	8006bca <lwip_htons>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	4b19      	ldr	r3, [pc, #100]	; (8009c20 <tcp_input+0x298>)
 8009bbc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	891a      	ldrh	r2, [r3, #8]
 8009bc2:	4b17      	ldr	r3, [pc, #92]	; (8009c20 <tcp_input+0x298>)
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	f003 0303 	and.w	r3, r3, #3
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	bf14      	ite	ne
 8009bce:	2301      	movne	r3, #1
 8009bd0:	2300      	moveq	r3, #0
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	4413      	add	r3, r2
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	4b12      	ldr	r3, [pc, #72]	; (8009c24 <tcp_input+0x29c>)
 8009bdc:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009bde:	2300      	movs	r3, #0
 8009be0:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009be2:	4b11      	ldr	r3, [pc, #68]	; (8009c28 <tcp_input+0x2a0>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	61fb      	str	r3, [r7, #28]
 8009be8:	e08d      	b.n	8009d06 <tcp_input+0x37e>
 8009bea:	bf00      	nop
 8009bec:	20007db4 	.word	0x20007db4
 8009bf0:	20007eb4 	.word	0x20007eb4
 8009bf4:	200047ec 	.word	0x200047ec
 8009bf8:	20007eb8 	.word	0x20007eb8
 8009bfc:	20007ebc 	.word	0x20007ebc
 8009c00:	20007eba 	.word	0x20007eba
 8009c04:	080173e8 	.word	0x080173e8
 8009c08:	0801741c 	.word	0x0801741c
 8009c0c:	0801742c 	.word	0x0801742c
 8009c10:	08017454 	.word	0x08017454
 8009c14:	08017460 	.word	0x08017460
 8009c18:	20007ec4 	.word	0x20007ec4
 8009c1c:	20007ec8 	.word	0x20007ec8
 8009c20:	20007ed0 	.word	0x20007ed0
 8009c24:	20007ece 	.word	0x20007ece
 8009c28:	20007e98 	.word	0x20007e98
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	7d1b      	ldrb	r3, [r3, #20]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d105      	bne.n	8009c40 <tcp_input+0x2b8>
 8009c34:	4b77      	ldr	r3, [pc, #476]	; (8009e14 <tcp_input+0x48c>)
 8009c36:	22e2      	movs	r2, #226	; 0xe2
 8009c38:	4977      	ldr	r1, [pc, #476]	; (8009e18 <tcp_input+0x490>)
 8009c3a:	4878      	ldr	r0, [pc, #480]	; (8009e1c <tcp_input+0x494>)
 8009c3c:	f008 fee0 	bl	8012a00 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	7d1b      	ldrb	r3, [r3, #20]
 8009c44:	2b0a      	cmp	r3, #10
 8009c46:	d105      	bne.n	8009c54 <tcp_input+0x2cc>
 8009c48:	4b72      	ldr	r3, [pc, #456]	; (8009e14 <tcp_input+0x48c>)
 8009c4a:	22e3      	movs	r2, #227	; 0xe3
 8009c4c:	4974      	ldr	r1, [pc, #464]	; (8009e20 <tcp_input+0x498>)
 8009c4e:	4873      	ldr	r0, [pc, #460]	; (8009e1c <tcp_input+0x494>)
 8009c50:	f008 fed6 	bl	8012a00 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	7d1b      	ldrb	r3, [r3, #20]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d105      	bne.n	8009c68 <tcp_input+0x2e0>
 8009c5c:	4b6d      	ldr	r3, [pc, #436]	; (8009e14 <tcp_input+0x48c>)
 8009c5e:	22e4      	movs	r2, #228	; 0xe4
 8009c60:	4970      	ldr	r1, [pc, #448]	; (8009e24 <tcp_input+0x49c>)
 8009c62:	486e      	ldr	r0, [pc, #440]	; (8009e1c <tcp_input+0x494>)
 8009c64:	f008 fecc 	bl	8012a00 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	8b1a      	ldrh	r2, [r3, #24]
 8009c6c:	4b6e      	ldr	r3, [pc, #440]	; (8009e28 <tcp_input+0x4a0>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	881b      	ldrh	r3, [r3, #0]
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d141      	bne.n	8009cfc <tcp_input+0x374>
        pcb->local_port == tcphdr->dest &&
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	8ada      	ldrh	r2, [r3, #22]
 8009c7c:	4b6a      	ldr	r3, [pc, #424]	; (8009e28 <tcp_input+0x4a0>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	885b      	ldrh	r3, [r3, #2]
 8009c82:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d139      	bne.n	8009cfc <tcp_input+0x374>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	685a      	ldr	r2, [r3, #4]
 8009c8c:	4b67      	ldr	r3, [pc, #412]	; (8009e2c <tcp_input+0x4a4>)
 8009c8e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d133      	bne.n	8009cfc <tcp_input+0x374>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	4b64      	ldr	r3, [pc, #400]	; (8009e2c <tcp_input+0x4a4>)
 8009c9a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d12d      	bne.n	8009cfc <tcp_input+0x374>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	69fa      	ldr	r2, [r7, #28]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d105      	bne.n	8009cb6 <tcp_input+0x32e>
 8009caa:	4b5a      	ldr	r3, [pc, #360]	; (8009e14 <tcp_input+0x48c>)
 8009cac:	22ec      	movs	r2, #236	; 0xec
 8009cae:	4960      	ldr	r1, [pc, #384]	; (8009e30 <tcp_input+0x4a8>)
 8009cb0:	485a      	ldr	r0, [pc, #360]	; (8009e1c <tcp_input+0x494>)
 8009cb2:	f008 fea5 	bl	8012a00 <iprintf>
      if (prev != NULL) {
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00b      	beq.n	8009cd4 <tcp_input+0x34c>
        prev->next = pcb->next;
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	68da      	ldr	r2, [r3, #12]
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009cc4:	4b5b      	ldr	r3, [pc, #364]	; (8009e34 <tcp_input+0x4ac>)
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009ccc:	4a59      	ldr	r2, [pc, #356]	; (8009e34 <tcp_input+0x4ac>)
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	6013      	str	r3, [r2, #0]
 8009cd2:	e007      	b.n	8009ce4 <tcp_input+0x35c>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8009cd4:	4b58      	ldr	r3, [pc, #352]	; (8009e38 <tcp_input+0x4b0>)
 8009cd6:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8009cda:	3301      	adds	r3, #1
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	4b56      	ldr	r3, [pc, #344]	; (8009e38 <tcp_input+0x4b0>)
 8009ce0:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	69fa      	ldr	r2, [r7, #28]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d10f      	bne.n	8009d0e <tcp_input+0x386>
 8009cee:	4b49      	ldr	r3, [pc, #292]	; (8009e14 <tcp_input+0x48c>)
 8009cf0:	22f4      	movs	r2, #244	; 0xf4
 8009cf2:	4952      	ldr	r1, [pc, #328]	; (8009e3c <tcp_input+0x4b4>)
 8009cf4:	4849      	ldr	r0, [pc, #292]	; (8009e1c <tcp_input+0x494>)
 8009cf6:	f008 fe83 	bl	8012a00 <iprintf>
      break;
 8009cfa:	e008      	b.n	8009d0e <tcp_input+0x386>
    }
    prev = pcb;
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	61fb      	str	r3, [r7, #28]
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d18f      	bne.n	8009c2c <tcp_input+0x2a4>
 8009d0c:	e000      	b.n	8009d10 <tcp_input+0x388>
      break;
 8009d0e:	bf00      	nop
  }

  if (pcb == NULL) {
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f040 809a 	bne.w	8009e4c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d18:	4b49      	ldr	r3, [pc, #292]	; (8009e40 <tcp_input+0x4b8>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	61fb      	str	r3, [r7, #28]
 8009d1e:	e02f      	b.n	8009d80 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	7d1b      	ldrb	r3, [r3, #20]
 8009d24:	2b0a      	cmp	r3, #10
 8009d26:	d005      	beq.n	8009d34 <tcp_input+0x3ac>
 8009d28:	4b3a      	ldr	r3, [pc, #232]	; (8009e14 <tcp_input+0x48c>)
 8009d2a:	22fe      	movs	r2, #254	; 0xfe
 8009d2c:	4945      	ldr	r1, [pc, #276]	; (8009e44 <tcp_input+0x4bc>)
 8009d2e:	483b      	ldr	r0, [pc, #236]	; (8009e1c <tcp_input+0x494>)
 8009d30:	f008 fe66 	bl	8012a00 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	8b1a      	ldrh	r2, [r3, #24]
 8009d38:	4b3b      	ldr	r3, [pc, #236]	; (8009e28 <tcp_input+0x4a0>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	881b      	ldrh	r3, [r3, #0]
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d11a      	bne.n	8009d7a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	8ada      	ldrh	r2, [r3, #22]
 8009d48:	4b37      	ldr	r3, [pc, #220]	; (8009e28 <tcp_input+0x4a0>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	885b      	ldrh	r3, [r3, #2]
 8009d4e:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d112      	bne.n	8009d7a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	685a      	ldr	r2, [r3, #4]
 8009d58:	4b34      	ldr	r3, [pc, #208]	; (8009e2c <tcp_input+0x4a4>)
 8009d5a:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d10c      	bne.n	8009d7a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	4b31      	ldr	r3, [pc, #196]	; (8009e2c <tcp_input+0x4a4>)
 8009d66:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d106      	bne.n	8009d7a <tcp_input+0x3f2>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8009d6c:	69f8      	ldr	r0, [r7, #28]
 8009d6e:	f000 fb45 	bl	800a3fc <tcp_timewait_input>
        pbuf_free(p);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f7fe f8fa 	bl	8007f6c <pbuf_free>
        return;
 8009d78:	e20d      	b.n	800a196 <tcp_input+0x80e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	61fb      	str	r3, [r7, #28]
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1cc      	bne.n	8009d20 <tcp_input+0x398>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009d86:	2300      	movs	r3, #0
 8009d88:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009d8a:	4b2f      	ldr	r3, [pc, #188]	; (8009e48 <tcp_input+0x4c0>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	617b      	str	r3, [r7, #20]
 8009d90:	e019      	b.n	8009dc6 <tcp_input+0x43e>
      if (lpcb->local_port == tcphdr->dest) {
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	8ada      	ldrh	r2, [r3, #22]
 8009d96:	4b24      	ldr	r3, [pc, #144]	; (8009e28 <tcp_input+0x4a0>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	885b      	ldrh	r3, [r3, #2]
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d10c      	bne.n	8009dbc <tcp_input+0x434>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	4b21      	ldr	r3, [pc, #132]	; (8009e2c <tcp_input+0x4a4>)
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d00f      	beq.n	8009dce <tcp_input+0x446>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00d      	beq.n	8009dd0 <tcp_input+0x448>
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d009      	beq.n	8009dd0 <tcp_input+0x448>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	617b      	str	r3, [r7, #20]
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1e2      	bne.n	8009d92 <tcp_input+0x40a>
 8009dcc:	e000      	b.n	8009dd0 <tcp_input+0x448>
            break;
 8009dce:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d03a      	beq.n	8009e4c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00b      	beq.n	8009df4 <tcp_input+0x46c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	68da      	ldr	r2, [r3, #12]
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009de4:	4b18      	ldr	r3, [pc, #96]	; (8009e48 <tcp_input+0x4c0>)
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009dec:	4a16      	ldr	r2, [pc, #88]	; (8009e48 <tcp_input+0x4c0>)
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	6013      	str	r3, [r2, #0]
 8009df2:	e007      	b.n	8009e04 <tcp_input+0x47c>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8009df4:	4b10      	ldr	r3, [pc, #64]	; (8009e38 <tcp_input+0x4b0>)
 8009df6:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	4b0e      	ldr	r3, [pc, #56]	; (8009e38 <tcp_input+0x4b0>)
 8009e00:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8009e04:	6978      	ldr	r0, [r7, #20]
 8009e06:	f000 fa0f 	bl	800a228 <tcp_listen_input>
      pbuf_free(p);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7fe f8ae 	bl	8007f6c <pbuf_free>
      return;
 8009e10:	e1c1      	b.n	800a196 <tcp_input+0x80e>
 8009e12:	bf00      	nop
 8009e14:	080173e8 	.word	0x080173e8
 8009e18:	08017480 	.word	0x08017480
 8009e1c:	0801742c 	.word	0x0801742c
 8009e20:	080174a8 	.word	0x080174a8
 8009e24:	080174d4 	.word	0x080174d4
 8009e28:	20007eb4 	.word	0x20007eb4
 8009e2c:	200047ec 	.word	0x200047ec
 8009e30:	080174fc 	.word	0x080174fc
 8009e34:	20007e98 	.word	0x20007e98
 8009e38:	20007db4 	.word	0x20007db4
 8009e3c:	08017528 	.word	0x08017528
 8009e40:	20007e9c 	.word	0x20007e9c
 8009e44:	08017554 	.word	0x08017554
 8009e48:	20007e94 	.word	0x20007e94
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f000 815e 	beq.w	800a110 <tcp_input+0x788>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009e54:	4b97      	ldr	r3, [pc, #604]	; (800a0b4 <tcp_input+0x72c>)
 8009e56:	2200      	movs	r2, #0
 8009e58:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	891a      	ldrh	r2, [r3, #8]
 8009e5e:	4b95      	ldr	r3, [pc, #596]	; (800a0b4 <tcp_input+0x72c>)
 8009e60:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009e62:	4a94      	ldr	r2, [pc, #592]	; (800a0b4 <tcp_input+0x72c>)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009e68:	4b93      	ldr	r3, [pc, #588]	; (800a0b8 <tcp_input+0x730>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a91      	ldr	r2, [pc, #580]	; (800a0b4 <tcp_input+0x72c>)
 8009e6e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009e70:	4b92      	ldr	r3, [pc, #584]	; (800a0bc <tcp_input+0x734>)
 8009e72:	2200      	movs	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009e76:	4b92      	ldr	r3, [pc, #584]	; (800a0c0 <tcp_input+0x738>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009e7c:	4b91      	ldr	r3, [pc, #580]	; (800a0c4 <tcp_input+0x73c>)
 8009e7e:	2200      	movs	r2, #0
 8009e80:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009e82:	4b91      	ldr	r3, [pc, #580]	; (800a0c8 <tcp_input+0x740>)
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	f003 0308 	and.w	r3, r3, #8
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d006      	beq.n	8009e9c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	7b5b      	ldrb	r3, [r3, #13]
 8009e92:	f043 0301 	orr.w	r3, r3, #1
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d01e      	beq.n	8009ee2 <tcp_input+0x55a>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009ea4:	69f8      	ldr	r0, [r7, #28]
 8009ea6:	f7ff f9d9 	bl	800925c <tcp_process_refused_data>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	f113 0f0d 	cmn.w	r3, #13
 8009eb0:	d007      	beq.n	8009ec2 <tcp_input+0x53a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d013      	beq.n	8009ee2 <tcp_input+0x55a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009eba:	4b84      	ldr	r3, [pc, #528]	; (800a0cc <tcp_input+0x744>)
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d00f      	beq.n	8009ee2 <tcp_input+0x55a>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d102      	bne.n	8009ed0 <tcp_input+0x548>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009eca:	69f8      	ldr	r0, [r7, #28]
 8009ecc:	f002 fa34 	bl	800c338 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8009ed0:	4b7f      	ldr	r3, [pc, #508]	; (800a0d0 <tcp_input+0x748>)
 8009ed2:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	4b7d      	ldr	r3, [pc, #500]	; (800a0d0 <tcp_input+0x748>)
 8009edc:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009ee0:	e103      	b.n	800a0ea <tcp_input+0x762>
      }
    }
    tcp_input_pcb = pcb;
 8009ee2:	4a7c      	ldr	r2, [pc, #496]	; (800a0d4 <tcp_input+0x74c>)
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009ee8:	69f8      	ldr	r0, [r7, #28]
 8009eea:	f000 faef 	bl	800a4cc <tcp_process>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009ef2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ef6:	f113 0f0d 	cmn.w	r3, #13
 8009efa:	f000 80d0 	beq.w	800a09e <tcp_input+0x716>
      if (recv_flags & TF_RESET) {
 8009efe:	4b70      	ldr	r3, [pc, #448]	; (800a0c0 <tcp_input+0x738>)
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	f003 0308 	and.w	r3, r3, #8
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d016      	beq.n	8009f38 <tcp_input+0x5b0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d008      	beq.n	8009f26 <tcp_input+0x59e>
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f1a:	69fa      	ldr	r2, [r7, #28]
 8009f1c:	6912      	ldr	r2, [r2, #16]
 8009f1e:	f06f 010d 	mvn.w	r1, #13
 8009f22:	4610      	mov	r0, r2
 8009f24:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009f26:	69f9      	ldr	r1, [r7, #28]
 8009f28:	486b      	ldr	r0, [pc, #428]	; (800a0d8 <tcp_input+0x750>)
 8009f2a:	f7ff fc15 	bl	8009758 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8009f2e:	69f9      	ldr	r1, [r7, #28]
 8009f30:	2001      	movs	r0, #1
 8009f32:	f7fd fadd 	bl	80074f0 <memp_free>
 8009f36:	e0d8      	b.n	800a0ea <tcp_input+0x762>
      } else {
        err = ERR_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009f3c:	4b61      	ldr	r3, [pc, #388]	; (800a0c4 <tcp_input+0x73c>)
 8009f3e:	881b      	ldrh	r3, [r3, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d01b      	beq.n	8009f7c <tcp_input+0x5f4>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009f44:	4b5f      	ldr	r3, [pc, #380]	; (800a0c4 <tcp_input+0x73c>)
 8009f46:	881b      	ldrh	r3, [r3, #0]
 8009f48:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d009      	beq.n	8009f66 <tcp_input+0x5de>
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f56:	69fa      	ldr	r2, [r7, #28]
 8009f58:	6910      	ldr	r0, [r2, #16]
 8009f5a:	89fa      	ldrh	r2, [r7, #14]
 8009f5c:	69f9      	ldr	r1, [r7, #28]
 8009f5e:	4798      	blx	r3
 8009f60:	4603      	mov	r3, r0
 8009f62:	74fb      	strb	r3, [r7, #19]
 8009f64:	e001      	b.n	8009f6a <tcp_input+0x5e2>
 8009f66:	2300      	movs	r3, #0
 8009f68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009f6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f6e:	f113 0f0d 	cmn.w	r3, #13
 8009f72:	f000 8096 	beq.w	800a0a2 <tcp_input+0x71a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009f76:	4b53      	ldr	r3, [pc, #332]	; (800a0c4 <tcp_input+0x73c>)
 8009f78:	2200      	movs	r2, #0
 8009f7a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009f7c:	69f8      	ldr	r0, [r7, #28]
 8009f7e:	f000 f921 	bl	800a1c4 <tcp_input_delayed_close>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f040 808e 	bne.w	800a0a6 <tcp_input+0x71e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009f8a:	4b4c      	ldr	r3, [pc, #304]	; (800a0bc <tcp_input+0x734>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d041      	beq.n	800a016 <tcp_input+0x68e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d006      	beq.n	8009fa8 <tcp_input+0x620>
 8009f9a:	4b50      	ldr	r3, [pc, #320]	; (800a0dc <tcp_input+0x754>)
 8009f9c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8009fa0:	494f      	ldr	r1, [pc, #316]	; (800a0e0 <tcp_input+0x758>)
 8009fa2:	4850      	ldr	r0, [pc, #320]	; (800a0e4 <tcp_input+0x75c>)
 8009fa4:	f008 fd2c 	bl	8012a00 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	7e9b      	ldrb	r3, [r3, #26]
 8009fac:	f003 0310 	and.w	r3, r3, #16
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d008      	beq.n	8009fc6 <tcp_input+0x63e>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009fb4:	4b41      	ldr	r3, [pc, #260]	; (800a0bc <tcp_input+0x734>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fd ffd7 	bl	8007f6c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009fbe:	69f8      	ldr	r0, [r7, #28]
 8009fc0:	f7fe fd72 	bl	8008aa8 <tcp_abort>
            goto aborted;
 8009fc4:	e091      	b.n	800a0ea <tcp_input+0x762>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00c      	beq.n	8009fea <tcp_input+0x662>
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	6918      	ldr	r0, [r3, #16]
 8009fda:	4b38      	ldr	r3, [pc, #224]	; (800a0bc <tcp_input+0x734>)
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	2300      	movs	r3, #0
 8009fe0:	69f9      	ldr	r1, [r7, #28]
 8009fe2:	47a0      	blx	r4
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	74fb      	strb	r3, [r7, #19]
 8009fe8:	e008      	b.n	8009ffc <tcp_input+0x674>
 8009fea:	4b34      	ldr	r3, [pc, #208]	; (800a0bc <tcp_input+0x734>)
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	2300      	movs	r3, #0
 8009ff0:	69f9      	ldr	r1, [r7, #28]
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	f7ff f9e4 	bl	80093c0 <tcp_recv_null>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009ffc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a000:	f113 0f0d 	cmn.w	r3, #13
 800a004:	d051      	beq.n	800a0aa <tcp_input+0x722>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a006:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d003      	beq.n	800a016 <tcp_input+0x68e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a00e:	4b2b      	ldr	r3, [pc, #172]	; (800a0bc <tcp_input+0x734>)
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a016:	4b2a      	ldr	r3, [pc, #168]	; (800a0c0 <tcp_input+0x738>)
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	f003 0320 	and.w	r3, r3, #32
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d030      	beq.n	800a084 <tcp_input+0x6fc>
          if (pcb->refused_data != NULL) {
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a026:	2b00      	cmp	r3, #0
 800a028:	d009      	beq.n	800a03e <tcp_input+0x6b6>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a02e:	7b5a      	ldrb	r2, [r3, #13]
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a034:	f042 0220 	orr.w	r2, r2, #32
 800a038:	b2d2      	uxtb	r2, r2
 800a03a:	735a      	strb	r2, [r3, #13]
 800a03c:	e022      	b.n	800a084 <tcp_input+0x6fc>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a042:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a046:	d005      	beq.n	800a054 <tcp_input+0x6cc>
              pcb->rcv_wnd++;
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a04c:	3301      	adds	r3, #1
 800a04e:	b29a      	uxth	r2, r3
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00b      	beq.n	800a076 <tcp_input+0x6ee>
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	6918      	ldr	r0, [r3, #16]
 800a068:	2300      	movs	r3, #0
 800a06a:	2200      	movs	r2, #0
 800a06c:	69f9      	ldr	r1, [r7, #28]
 800a06e:	47a0      	blx	r4
 800a070:	4603      	mov	r3, r0
 800a072:	74fb      	strb	r3, [r7, #19]
 800a074:	e001      	b.n	800a07a <tcp_input+0x6f2>
 800a076:	2300      	movs	r3, #0
 800a078:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a07a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a07e:	f113 0f0d 	cmn.w	r3, #13
 800a082:	d014      	beq.n	800a0ae <tcp_input+0x726>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a084:	4b13      	ldr	r3, [pc, #76]	; (800a0d4 <tcp_input+0x74c>)
 800a086:	2200      	movs	r2, #0
 800a088:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a08a:	69f8      	ldr	r0, [r7, #28]
 800a08c:	f000 f89a 	bl	800a1c4 <tcp_input_delayed_close>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d128      	bne.n	800a0e8 <tcp_input+0x760>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a096:	69f8      	ldr	r0, [r7, #28]
 800a098:	f002 f9aa 	bl	800c3f0 <tcp_output>
 800a09c:	e025      	b.n	800a0ea <tcp_input+0x762>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a09e:	bf00      	nop
 800a0a0:	e023      	b.n	800a0ea <tcp_input+0x762>
              goto aborted;
 800a0a2:	bf00      	nop
 800a0a4:	e021      	b.n	800a0ea <tcp_input+0x762>
          goto aborted;
 800a0a6:	bf00      	nop
 800a0a8:	e01f      	b.n	800a0ea <tcp_input+0x762>
            goto aborted;
 800a0aa:	bf00      	nop
 800a0ac:	e01d      	b.n	800a0ea <tcp_input+0x762>
              goto aborted;
 800a0ae:	bf00      	nop
 800a0b0:	e01b      	b.n	800a0ea <tcp_input+0x762>
 800a0b2:	bf00      	nop
 800a0b4:	20007ea4 	.word	0x20007ea4
 800a0b8:	20007eb4 	.word	0x20007eb4
 800a0bc:	20007ed4 	.word	0x20007ed4
 800a0c0:	20007ed1 	.word	0x20007ed1
 800a0c4:	20007ecc 	.word	0x20007ecc
 800a0c8:	20007ed0 	.word	0x20007ed0
 800a0cc:	20007ece 	.word	0x20007ece
 800a0d0:	20007db4 	.word	0x20007db4
 800a0d4:	20007ed8 	.word	0x20007ed8
 800a0d8:	20007e98 	.word	0x20007e98
 800a0dc:	080173e8 	.word	0x080173e8
 800a0e0:	08017584 	.word	0x08017584
 800a0e4:	0801742c 	.word	0x0801742c
          goto aborted;
 800a0e8:	bf00      	nop
    tcp_input_pcb = NULL;
 800a0ea:	4b2c      	ldr	r3, [pc, #176]	; (800a19c <tcp_input+0x814>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a0f0:	4b2b      	ldr	r3, [pc, #172]	; (800a1a0 <tcp_input+0x818>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800a0f6:	4b2b      	ldr	r3, [pc, #172]	; (800a1a4 <tcp_input+0x81c>)
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d04a      	beq.n	800a194 <tcp_input+0x80c>
    {
      pbuf_free(inseg.p);
 800a0fe:	4b29      	ldr	r3, [pc, #164]	; (800a1a4 <tcp_input+0x81c>)
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	4618      	mov	r0, r3
 800a104:	f7fd ff32 	bl	8007f6c <pbuf_free>
      inseg.p = NULL;
 800a108:	4b26      	ldr	r3, [pc, #152]	; (800a1a4 <tcp_input+0x81c>)
 800a10a:	2200      	movs	r2, #0
 800a10c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a10e:	e041      	b.n	800a194 <tcp_input+0x80c>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a110:	4b25      	ldr	r3, [pc, #148]	; (800a1a8 <tcp_input+0x820>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	899b      	ldrh	r3, [r3, #12]
 800a116:	b29b      	uxth	r3, r3
 800a118:	4618      	mov	r0, r3
 800a11a:	f7fc fd56 	bl	8006bca <lwip_htons>
 800a11e:	4603      	mov	r3, r0
 800a120:	f003 0304 	and.w	r3, r3, #4
 800a124:	2b00      	cmp	r3, #0
 800a126:	d125      	bne.n	800a174 <tcp_input+0x7ec>
      TCP_STATS_INC(tcp.proterr);
 800a128:	4b20      	ldr	r3, [pc, #128]	; (800a1ac <tcp_input+0x824>)
 800a12a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800a12e:	3301      	adds	r3, #1
 800a130:	b29a      	uxth	r2, r3
 800a132:	4b1e      	ldr	r3, [pc, #120]	; (800a1ac <tcp_input+0x824>)
 800a134:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 800a138:	4b1c      	ldr	r3, [pc, #112]	; (800a1ac <tcp_input+0x824>)
 800a13a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800a13e:	3301      	adds	r3, #1
 800a140:	b29a      	uxth	r2, r3
 800a142:	4b1a      	ldr	r3, [pc, #104]	; (800a1ac <tcp_input+0x824>)
 800a144:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a148:	4b19      	ldr	r3, [pc, #100]	; (800a1b0 <tcp_input+0x828>)
 800a14a:	6818      	ldr	r0, [r3, #0]
 800a14c:	4b19      	ldr	r3, [pc, #100]	; (800a1b4 <tcp_input+0x82c>)
 800a14e:	881b      	ldrh	r3, [r3, #0]
 800a150:	461a      	mov	r2, r3
 800a152:	4b19      	ldr	r3, [pc, #100]	; (800a1b8 <tcp_input+0x830>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a158:	4b13      	ldr	r3, [pc, #76]	; (800a1a8 <tcp_input+0x820>)
 800a15a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a15c:	885b      	ldrh	r3, [r3, #2]
 800a15e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a160:	4a11      	ldr	r2, [pc, #68]	; (800a1a8 <tcp_input+0x820>)
 800a162:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a164:	8812      	ldrh	r2, [r2, #0]
 800a166:	b292      	uxth	r2, r2
 800a168:	9201      	str	r2, [sp, #4]
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	4b13      	ldr	r3, [pc, #76]	; (800a1bc <tcp_input+0x834>)
 800a16e:	4a14      	ldr	r2, [pc, #80]	; (800a1c0 <tcp_input+0x838>)
 800a170:	f002 fbcc 	bl	800c90c <tcp_rst>
    pbuf_free(p);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7fd fef9 	bl	8007f6c <pbuf_free>
  return;
 800a17a:	e00b      	b.n	800a194 <tcp_input+0x80c>
dropped:
  TCP_STATS_INC(tcp.drop);
 800a17c:	4b0b      	ldr	r3, [pc, #44]	; (800a1ac <tcp_input+0x824>)
 800a17e:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800a182:	3301      	adds	r3, #1
 800a184:	b29a      	uxth	r2, r3
 800a186:	4b09      	ldr	r3, [pc, #36]	; (800a1ac <tcp_input+0x824>)
 800a188:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f7fd feed 	bl	8007f6c <pbuf_free>
 800a192:	e000      	b.n	800a196 <tcp_input+0x80e>
  return;
 800a194:	bf00      	nop
}
 800a196:	3724      	adds	r7, #36	; 0x24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd90      	pop	{r4, r7, pc}
 800a19c:	20007ed8 	.word	0x20007ed8
 800a1a0:	20007ed4 	.word	0x20007ed4
 800a1a4:	20007ea4 	.word	0x20007ea4
 800a1a8:	20007eb4 	.word	0x20007eb4
 800a1ac:	20007db4 	.word	0x20007db4
 800a1b0:	20007ec8 	.word	0x20007ec8
 800a1b4:	20007ece 	.word	0x20007ece
 800a1b8:	20007ec4 	.word	0x20007ec4
 800a1bc:	200047fc 	.word	0x200047fc
 800a1c0:	20004800 	.word	0x20004800

0800a1c4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800a1cc:	4b14      	ldr	r3, [pc, #80]	; (800a220 <tcp_input_delayed_close+0x5c>)
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	f003 0310 	and.w	r3, r3, #16
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d01d      	beq.n	800a214 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	7e9b      	ldrb	r3, [r3, #26]
 800a1dc:	f003 0310 	and.w	r3, r3, #16
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d10d      	bne.n	800a200 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d008      	beq.n	800a200 <tcp_input_delayed_close+0x3c>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	6912      	ldr	r2, [r2, #16]
 800a1f8:	f06f 010e 	mvn.w	r1, #14
 800a1fc:	4610      	mov	r0, r2
 800a1fe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a200:	6879      	ldr	r1, [r7, #4]
 800a202:	4808      	ldr	r0, [pc, #32]	; (800a224 <tcp_input_delayed_close+0x60>)
 800a204:	f7ff faa8 	bl	8009758 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800a208:	6879      	ldr	r1, [r7, #4]
 800a20a:	2001      	movs	r0, #1
 800a20c:	f7fd f970 	bl	80074f0 <memp_free>
    return 1;
 800a210:	2301      	movs	r3, #1
 800a212:	e000      	b.n	800a216 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20007ed1 	.word	0x20007ed1
 800a224:	20007e98 	.word	0x20007e98

0800a228 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b088      	sub	sp, #32
 800a22c:	af02      	add	r7, sp, #8
 800a22e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a230:	4b67      	ldr	r3, [pc, #412]	; (800a3d0 <tcp_listen_input+0x1a8>)
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	f003 0304 	and.w	r3, r3, #4
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f040 80c3 	bne.w	800a3c4 <tcp_listen_input+0x19c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a23e:	4b64      	ldr	r3, [pc, #400]	; (800a3d0 <tcp_listen_input+0x1a8>)
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	f003 0310 	and.w	r3, r3, #16
 800a246:	2b00      	cmp	r3, #0
 800a248:	d016      	beq.n	800a278 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a24a:	4b62      	ldr	r3, [pc, #392]	; (800a3d4 <tcp_listen_input+0x1ac>)
 800a24c:	6818      	ldr	r0, [r3, #0]
 800a24e:	4b62      	ldr	r3, [pc, #392]	; (800a3d8 <tcp_listen_input+0x1b0>)
 800a250:	881b      	ldrh	r3, [r3, #0]
 800a252:	461a      	mov	r2, r3
 800a254:	4b61      	ldr	r3, [pc, #388]	; (800a3dc <tcp_listen_input+0x1b4>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a25a:	4b61      	ldr	r3, [pc, #388]	; (800a3e0 <tcp_listen_input+0x1b8>)
 800a25c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a25e:	885b      	ldrh	r3, [r3, #2]
 800a260:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a262:	4a5f      	ldr	r2, [pc, #380]	; (800a3e0 <tcp_listen_input+0x1b8>)
 800a264:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a266:	8812      	ldrh	r2, [r2, #0]
 800a268:	b292      	uxth	r2, r2
 800a26a:	9201      	str	r2, [sp, #4]
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	4b5d      	ldr	r3, [pc, #372]	; (800a3e4 <tcp_listen_input+0x1bc>)
 800a270:	4a5d      	ldr	r2, [pc, #372]	; (800a3e8 <tcp_listen_input+0x1c0>)
 800a272:	f002 fb4b 	bl	800c90c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a276:	e0a7      	b.n	800a3c8 <tcp_listen_input+0x1a0>
  } else if (flags & TCP_SYN) {
 800a278:	4b55      	ldr	r3, [pc, #340]	; (800a3d0 <tcp_listen_input+0x1a8>)
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	f003 0302 	and.w	r3, r3, #2
 800a280:	2b00      	cmp	r3, #0
 800a282:	f000 80a1 	beq.w	800a3c8 <tcp_listen_input+0x1a0>
    npcb = tcp_alloc(pcb->prio);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	7d5b      	ldrb	r3, [r3, #21]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7ff f976 	bl	800957c <tcp_alloc>
 800a290:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d119      	bne.n	800a2cc <tcp_listen_input+0xa4>
      TCP_STATS_INC(tcp.memerr);
 800a298:	4b54      	ldr	r3, [pc, #336]	; (800a3ec <tcp_listen_input+0x1c4>)
 800a29a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800a29e:	3301      	adds	r3, #1
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	4b52      	ldr	r3, [pc, #328]	; (800a3ec <tcp_listen_input+0x1c4>)
 800a2a4:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00a      	beq.n	800a2c6 <tcp_listen_input+0x9e>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	6910      	ldr	r0, [r2, #16]
 800a2b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2bc:	2100      	movs	r1, #0
 800a2be:	4798      	blx	r3
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	73bb      	strb	r3, [r7, #14]
      return;
 800a2c4:	e081      	b.n	800a3ca <tcp_listen_input+0x1a2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a2c6:	23f0      	movs	r3, #240	; 0xf0
 800a2c8:	73bb      	strb	r3, [r7, #14]
      return;
 800a2ca:	e07e      	b.n	800a3ca <tcp_listen_input+0x1a2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a2cc:	4b48      	ldr	r3, [pc, #288]	; (800a3f0 <tcp_listen_input+0x1c8>)
 800a2ce:	695a      	ldr	r2, [r3, #20]
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a2d4:	4b46      	ldr	r3, [pc, #280]	; (800a3f0 <tcp_listen_input+0x1c8>)
 800a2d6:	691a      	ldr	r2, [r3, #16]
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	8ada      	ldrh	r2, [r3, #22]
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a2e4:	4b3e      	ldr	r3, [pc, #248]	; (800a3e0 <tcp_listen_input+0x1b8>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	881b      	ldrh	r3, [r3, #0]
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	2203      	movs	r2, #3
 800a2f4:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a2f6:	4b39      	ldr	r3, [pc, #228]	; (800a3dc <tcp_listen_input+0x1b4>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a308:	6978      	ldr	r0, [r7, #20]
 800a30a:	f7ff faa1 	bl	8009850 <tcp_next_iss>
 800a30e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	693a      	ldr	r2, [r7, #16]
 800a314:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a328:	4b2c      	ldr	r3, [pc, #176]	; (800a3dc <tcp_listen_input+0x1b4>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	1e5a      	subs	r2, r3, #1
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	691a      	ldr	r2, [r3, #16]
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	7a1b      	ldrb	r3, [r3, #8]
 800a344:	f003 030c 	and.w	r3, r3, #12
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a34e:	4b29      	ldr	r3, [pc, #164]	; (800a3f4 <tcp_listen_input+0x1cc>)
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	60da      	str	r2, [r3, #12]
 800a356:	4a27      	ldr	r2, [pc, #156]	; (800a3f4 <tcp_listen_input+0x1cc>)
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	6013      	str	r3, [r2, #0]
 800a35c:	f002 fd3c 	bl	800cdd8 <tcp_timer_needed>
 800a360:	4b25      	ldr	r3, [pc, #148]	; (800a3f8 <tcp_listen_input+0x1d0>)
 800a362:	2201      	movs	r2, #1
 800a364:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a366:	6978      	ldr	r0, [r7, #20]
 800a368:	f001 fd0e 	bl	800bd88 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a36c:	4b1c      	ldr	r3, [pc, #112]	; (800a3e0 <tcp_listen_input+0x1b8>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	89db      	ldrh	r3, [r3, #14]
 800a372:	b29a      	uxth	r2, r3
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	3304      	adds	r3, #4
 800a38e:	4619      	mov	r1, r3
 800a390:	4610      	mov	r0, r2
 800a392:	f7ff fa73 	bl	800987c <tcp_eff_send_mss_impl>
 800a396:	4603      	mov	r3, r0
 800a398:	461a      	mov	r2, r3
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a39e:	2112      	movs	r1, #18
 800a3a0:	6978      	ldr	r0, [r7, #20]
 800a3a2:	f001 feb3 	bl	800c10c <tcp_enqueue_flags>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a3aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d004      	beq.n	800a3bc <tcp_listen_input+0x194>
      tcp_abandon(npcb, 0);
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	6978      	ldr	r0, [r7, #20]
 800a3b6:	f7fe fac5 	bl	8008944 <tcp_abandon>
      return;
 800a3ba:	e006      	b.n	800a3ca <tcp_listen_input+0x1a2>
    tcp_output(npcb);
 800a3bc:	6978      	ldr	r0, [r7, #20]
 800a3be:	f002 f817 	bl	800c3f0 <tcp_output>
  return;
 800a3c2:	e001      	b.n	800a3c8 <tcp_listen_input+0x1a0>
    return;
 800a3c4:	bf00      	nop
 800a3c6:	e000      	b.n	800a3ca <tcp_listen_input+0x1a2>
  return;
 800a3c8:	bf00      	nop
}
 800a3ca:	3718      	adds	r7, #24
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	20007ed0 	.word	0x20007ed0
 800a3d4:	20007ec8 	.word	0x20007ec8
 800a3d8:	20007ece 	.word	0x20007ece
 800a3dc:	20007ec4 	.word	0x20007ec4
 800a3e0:	20007eb4 	.word	0x20007eb4
 800a3e4:	200047fc 	.word	0x200047fc
 800a3e8:	20004800 	.word	0x20004800
 800a3ec:	20007db4 	.word	0x20007db4
 800a3f0:	200047ec 	.word	0x200047ec
 800a3f4:	20007e98 	.word	0x20007e98
 800a3f8:	20007ea0 	.word	0x20007ea0

0800a3fc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af02      	add	r7, sp, #8
 800a402:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a404:	4b29      	ldr	r3, [pc, #164]	; (800a4ac <tcp_timewait_input+0xb0>)
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	f003 0304 	and.w	r3, r3, #4
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d146      	bne.n	800a49e <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a410:	4b26      	ldr	r3, [pc, #152]	; (800a4ac <tcp_timewait_input+0xb0>)
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	f003 0302 	and.w	r3, r3, #2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d027      	beq.n	800a46c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a41c:	4b24      	ldr	r3, [pc, #144]	; (800a4b0 <tcp_timewait_input+0xb4>)
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	2b00      	cmp	r3, #0
 800a428:	db2a      	blt.n	800a480 <tcp_timewait_input+0x84>
 800a42a:	4b21      	ldr	r3, [pc, #132]	; (800a4b0 <tcp_timewait_input+0xb4>)
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a432:	6879      	ldr	r1, [r7, #4]
 800a434:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a436:	440b      	add	r3, r1
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	dc20      	bgt.n	800a480 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a43e:	4b1d      	ldr	r3, [pc, #116]	; (800a4b4 <tcp_timewait_input+0xb8>)
 800a440:	6818      	ldr	r0, [r3, #0]
 800a442:	4b1d      	ldr	r3, [pc, #116]	; (800a4b8 <tcp_timewait_input+0xbc>)
 800a444:	881b      	ldrh	r3, [r3, #0]
 800a446:	461a      	mov	r2, r3
 800a448:	4b19      	ldr	r3, [pc, #100]	; (800a4b0 <tcp_timewait_input+0xb4>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a44e:	4b1b      	ldr	r3, [pc, #108]	; (800a4bc <tcp_timewait_input+0xc0>)
 800a450:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a452:	885b      	ldrh	r3, [r3, #2]
 800a454:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a456:	4a19      	ldr	r2, [pc, #100]	; (800a4bc <tcp_timewait_input+0xc0>)
 800a458:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a45a:	8812      	ldrh	r2, [r2, #0]
 800a45c:	b292      	uxth	r2, r2
 800a45e:	9201      	str	r2, [sp, #4]
 800a460:	9300      	str	r3, [sp, #0]
 800a462:	4b17      	ldr	r3, [pc, #92]	; (800a4c0 <tcp_timewait_input+0xc4>)
 800a464:	4a17      	ldr	r2, [pc, #92]	; (800a4c4 <tcp_timewait_input+0xc8>)
 800a466:	f002 fa51 	bl	800c90c <tcp_rst>
      return;
 800a46a:	e01b      	b.n	800a4a4 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 800a46c:	4b0f      	ldr	r3, [pc, #60]	; (800a4ac <tcp_timewait_input+0xb0>)
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	f003 0301 	and.w	r3, r3, #1
 800a474:	2b00      	cmp	r3, #0
 800a476:	d003      	beq.n	800a480 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a478:	4b13      	ldr	r3, [pc, #76]	; (800a4c8 <tcp_timewait_input+0xcc>)
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a480:	4b0d      	ldr	r3, [pc, #52]	; (800a4b8 <tcp_timewait_input+0xbc>)
 800a482:	881b      	ldrh	r3, [r3, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00c      	beq.n	800a4a2 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	7e9b      	ldrb	r3, [r3, #26]
 800a48c:	f043 0302 	orr.w	r3, r3, #2
 800a490:	b2da      	uxtb	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f001 ffaa 	bl	800c3f0 <tcp_output>
  }
  return;
 800a49c:	e001      	b.n	800a4a2 <tcp_timewait_input+0xa6>
    return;
 800a49e:	bf00      	nop
 800a4a0:	e000      	b.n	800a4a4 <tcp_timewait_input+0xa8>
  return;
 800a4a2:	bf00      	nop
}
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	20007ed0 	.word	0x20007ed0
 800a4b0:	20007ec4 	.word	0x20007ec4
 800a4b4:	20007ec8 	.word	0x20007ec8
 800a4b8:	20007ece 	.word	0x20007ece
 800a4bc:	20007eb4 	.word	0x20007eb4
 800a4c0:	200047fc 	.word	0x200047fc
 800a4c4:	20004800 	.word	0x20004800
 800a4c8:	20007e8c 	.word	0x20007e8c

0800a4cc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b08a      	sub	sp, #40	; 0x28
 800a4d0:	af02      	add	r7, sp, #8
 800a4d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a4dc:	4b93      	ldr	r3, [pc, #588]	; (800a72c <tcp_process+0x260>)
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	f003 0304 	and.w	r3, r3, #4
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d04e      	beq.n	800a586 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	7d1b      	ldrb	r3, [r3, #20]
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d108      	bne.n	800a502 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4f4:	4b8e      	ldr	r3, [pc, #568]	; (800a730 <tcp_process+0x264>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d123      	bne.n	800a544 <tcp_process+0x78>
        acceptable = 1;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	76fb      	strb	r3, [r7, #27]
 800a500:	e020      	b.n	800a544 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a506:	4b8b      	ldr	r3, [pc, #556]	; (800a734 <tcp_process+0x268>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d102      	bne.n	800a514 <tcp_process+0x48>
        acceptable = 1;
 800a50e:	2301      	movs	r3, #1
 800a510:	76fb      	strb	r3, [r7, #27]
 800a512:	e017      	b.n	800a544 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a514:	4b87      	ldr	r3, [pc, #540]	; (800a734 <tcp_process+0x268>)
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	db10      	blt.n	800a544 <tcp_process+0x78>
 800a522:	4b84      	ldr	r3, [pc, #528]	; (800a734 <tcp_process+0x268>)
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52a:	6879      	ldr	r1, [r7, #4]
 800a52c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a52e:	440b      	add	r3, r1
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	2b00      	cmp	r3, #0
 800a534:	dc06      	bgt.n	800a544 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	7e9b      	ldrb	r3, [r3, #26]
 800a53a:	f043 0302 	orr.w	r3, r3, #2
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a544:	7efb      	ldrb	r3, [r7, #27]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d01b      	beq.n	800a582 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	7d1b      	ldrb	r3, [r3, #20]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d106      	bne.n	800a560 <tcp_process+0x94>
 800a552:	4b79      	ldr	r3, [pc, #484]	; (800a738 <tcp_process+0x26c>)
 800a554:	f240 22e7 	movw	r2, #743	; 0x2e7
 800a558:	4978      	ldr	r1, [pc, #480]	; (800a73c <tcp_process+0x270>)
 800a55a:	4879      	ldr	r0, [pc, #484]	; (800a740 <tcp_process+0x274>)
 800a55c:	f008 fa50 	bl	8012a00 <iprintf>
      recv_flags |= TF_RESET;
 800a560:	4b78      	ldr	r3, [pc, #480]	; (800a744 <tcp_process+0x278>)
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	f043 0308 	orr.w	r3, r3, #8
 800a568:	b2da      	uxtb	r2, r3
 800a56a:	4b76      	ldr	r3, [pc, #472]	; (800a744 <tcp_process+0x278>)
 800a56c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	7e9b      	ldrb	r3, [r3, #26]
 800a572:	f023 0301 	bic.w	r3, r3, #1
 800a576:	b2da      	uxtb	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800a57c:	f06f 030d 	mvn.w	r3, #13
 800a580:	e348      	b.n	800ac14 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	e346      	b.n	800ac14 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a586:	4b69      	ldr	r3, [pc, #420]	; (800a72c <tcp_process+0x260>)
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	f003 0302 	and.w	r3, r3, #2
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d010      	beq.n	800a5b4 <tcp_process+0xe8>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	7d1b      	ldrb	r3, [r3, #20]
 800a596:	2b02      	cmp	r3, #2
 800a598:	d00c      	beq.n	800a5b4 <tcp_process+0xe8>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	7d1b      	ldrb	r3, [r3, #20]
 800a59e:	2b03      	cmp	r3, #3
 800a5a0:	d008      	beq.n	800a5b4 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	7e9b      	ldrb	r3, [r3, #26]
 800a5a6:	f043 0302 	orr.w	r3, r3, #2
 800a5aa:	b2da      	uxtb	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	e32f      	b.n	800ac14 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	7e9b      	ldrb	r3, [r3, #26]
 800a5b8:	f003 0310 	and.w	r3, r3, #16
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d103      	bne.n	800a5c8 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a5c0:	4b61      	ldr	r3, [pc, #388]	; (800a748 <tcp_process+0x27c>)
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f001 fbd9 	bl	800bd88 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	7d1b      	ldrb	r3, [r3, #20]
 800a5da:	3b02      	subs	r3, #2
 800a5dc:	2b07      	cmp	r3, #7
 800a5de:	f200 8309 	bhi.w	800abf4 <tcp_process+0x728>
 800a5e2:	a201      	add	r2, pc, #4	; (adr r2, 800a5e8 <tcp_process+0x11c>)
 800a5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e8:	0800a609 	.word	0x0800a609
 800a5ec:	0800a7ff 	.word	0x0800a7ff
 800a5f0:	0800a957 	.word	0x0800a957
 800a5f4:	0800a981 	.word	0x0800a981
 800a5f8:	0800aaa3 	.word	0x0800aaa3
 800a5fc:	0800a957 	.word	0x0800a957
 800a600:	0800ab2f 	.word	0x0800ab2f
 800a604:	0800abbf 	.word	0x0800abbf
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a608:	4b48      	ldr	r3, [pc, #288]	; (800a72c <tcp_process+0x260>)
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	f003 0310 	and.w	r3, r3, #16
 800a610:	2b00      	cmp	r3, #0
 800a612:	f000 80ca 	beq.w	800a7aa <tcp_process+0x2de>
 800a616:	4b45      	ldr	r3, [pc, #276]	; (800a72c <tcp_process+0x260>)
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	f003 0302 	and.w	r3, r3, #2
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f000 80c3 	beq.w	800a7aa <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a628:	1c5a      	adds	r2, r3, #1
 800a62a:	4b41      	ldr	r3, [pc, #260]	; (800a730 <tcp_process+0x264>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	429a      	cmp	r2, r3
 800a630:	f040 80bb 	bne.w	800a7aa <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 800a634:	4b3f      	ldr	r3, [pc, #252]	; (800a734 <tcp_process+0x268>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	1c5a      	adds	r2, r3, #1
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800a646:	4b3a      	ldr	r3, [pc, #232]	; (800a730 <tcp_process+0x264>)
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800a64e:	4b3f      	ldr	r3, [pc, #252]	; (800a74c <tcp_process+0x280>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	89db      	ldrh	r3, [r3, #14]
 800a654:	b29a      	uxth	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a668:	4b32      	ldr	r3, [pc, #200]	; (800a734 <tcp_process+0x268>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	1e5a      	subs	r2, r3, #1
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2204      	movs	r2, #4
 800a676:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	3304      	adds	r3, #4
 800a680:	4619      	mov	r1, r3
 800a682:	4610      	mov	r0, r2
 800a684:	f7ff f8fa 	bl	800987c <tcp_eff_send_mss_impl>
 800a688:	4603      	mov	r3, r0
 800a68a:	461a      	mov	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a694:	005b      	lsls	r3, r3, #1
 800a696:	f241 121c 	movw	r2, #4380	; 0x111c
 800a69a:	429a      	cmp	r2, r3
 800a69c:	bf38      	it	cc
 800a69e:	461a      	movcc	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	bf28      	it	cs
 800a6aa:	4613      	movcs	r3, r2
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d106      	bne.n	800a6cc <tcp_process+0x200>
 800a6be:	4b1e      	ldr	r3, [pc, #120]	; (800a738 <tcp_process+0x26c>)
 800a6c0:	f240 321a 	movw	r2, #794	; 0x31a
 800a6c4:	4922      	ldr	r1, [pc, #136]	; (800a750 <tcp_process+0x284>)
 800a6c6:	481e      	ldr	r0, [pc, #120]	; (800a740 <tcp_process+0x274>)
 800a6c8:	f008 f99a 	bl	8012a00 <iprintf>
      --pcb->snd_queuelen;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	b29a      	uxth	r2, r3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6e0:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d111      	bne.n	800a70c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6ec:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d106      	bne.n	800a702 <tcp_process+0x236>
 800a6f4:	4b10      	ldr	r3, [pc, #64]	; (800a738 <tcp_process+0x26c>)
 800a6f6:	f240 3222 	movw	r2, #802	; 0x322
 800a6fa:	4916      	ldr	r1, [pc, #88]	; (800a754 <tcp_process+0x288>)
 800a6fc:	4810      	ldr	r0, [pc, #64]	; (800a740 <tcp_process+0x274>)
 800a6fe:	f008 f97f 	bl	8012a00 <iprintf>
        pcb->unsent = rseg->next;
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	669a      	str	r2, [r3, #104]	; 0x68
 800a70a:	e003      	b.n	800a714 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800a714:	69f8      	ldr	r0, [r7, #28]
 800a716:	f7fe fe1f 	bl	8009358 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d11a      	bne.n	800a758 <tcp_process+0x28c>
        pcb->rtime = -1;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a728:	861a      	strh	r2, [r3, #48]	; 0x30
 800a72a:	e01c      	b.n	800a766 <tcp_process+0x29a>
 800a72c:	20007ed0 	.word	0x20007ed0
 800a730:	20007ec8 	.word	0x20007ec8
 800a734:	20007ec4 	.word	0x20007ec4
 800a738:	080173e8 	.word	0x080173e8
 800a73c:	080175a0 	.word	0x080175a0
 800a740:	0801742c 	.word	0x0801742c
 800a744:	20007ed1 	.word	0x20007ed1
 800a748:	20007e8c 	.word	0x20007e8c
 800a74c:	20007eb4 	.word	0x20007eb4
 800a750:	080175c0 	.word	0x080175c0
 800a754:	080175d8 	.word	0x080175d8
      } else {
        pcb->rtime = 0;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00a      	beq.n	800a786 <tcp_process+0x2ba>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	6910      	ldr	r0, [r2, #16]
 800a77a:	2200      	movs	r2, #0
 800a77c:	6879      	ldr	r1, [r7, #4]
 800a77e:	4798      	blx	r3
 800a780:	4603      	mov	r3, r0
 800a782:	76bb      	strb	r3, [r7, #26]
 800a784:	e001      	b.n	800a78a <tcp_process+0x2be>
 800a786:	2300      	movs	r3, #0
 800a788:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800a78a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a78e:	f113 0f0d 	cmn.w	r3, #13
 800a792:	d102      	bne.n	800a79a <tcp_process+0x2ce>
        return ERR_ABRT;
 800a794:	f06f 030c 	mvn.w	r3, #12
 800a798:	e23c      	b.n	800ac14 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	7e9b      	ldrb	r3, [r3, #26]
 800a79e:	f043 0302 	orr.w	r3, r3, #2
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800a7a8:	e226      	b.n	800abf8 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 800a7aa:	4b93      	ldr	r3, [pc, #588]	; (800a9f8 <tcp_process+0x52c>)
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	f003 0310 	and.w	r3, r3, #16
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f000 8220 	beq.w	800abf8 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a7b8:	4b90      	ldr	r3, [pc, #576]	; (800a9fc <tcp_process+0x530>)
 800a7ba:	6818      	ldr	r0, [r3, #0]
 800a7bc:	4b90      	ldr	r3, [pc, #576]	; (800aa00 <tcp_process+0x534>)
 800a7be:	881b      	ldrh	r3, [r3, #0]
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	4b90      	ldr	r3, [pc, #576]	; (800aa04 <tcp_process+0x538>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a7c8:	4b8f      	ldr	r3, [pc, #572]	; (800aa08 <tcp_process+0x53c>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a7cc:	885b      	ldrh	r3, [r3, #2]
 800a7ce:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a7d0:	4a8d      	ldr	r2, [pc, #564]	; (800aa08 <tcp_process+0x53c>)
 800a7d2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a7d4:	8812      	ldrh	r2, [r2, #0]
 800a7d6:	b292      	uxth	r2, r2
 800a7d8:	9201      	str	r2, [sp, #4]
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	4b8b      	ldr	r3, [pc, #556]	; (800aa0c <tcp_process+0x540>)
 800a7de:	4a8c      	ldr	r2, [pc, #560]	; (800aa10 <tcp_process+0x544>)
 800a7e0:	f002 f894 	bl	800c90c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a7ea:	2b05      	cmp	r3, #5
 800a7ec:	f200 8204 	bhi.w	800abf8 <tcp_process+0x72c>
        pcb->rtime = 0;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f002 f908 	bl	800ca0c <tcp_rexmit_rto>
    break;
 800a7fc:	e1fc      	b.n	800abf8 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800a7fe:	4b7e      	ldr	r3, [pc, #504]	; (800a9f8 <tcp_process+0x52c>)
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	f003 0310 	and.w	r3, r3, #16
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 8091 	beq.w	800a92e <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800a80c:	4b7b      	ldr	r3, [pc, #492]	; (800a9fc <tcp_process+0x530>)
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	3b01      	subs	r3, #1
 800a818:	2b00      	cmp	r3, #0
 800a81a:	db71      	blt.n	800a900 <tcp_process+0x434>
 800a81c:	4b77      	ldr	r3, [pc, #476]	; (800a9fc <tcp_process+0x530>)
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	2b00      	cmp	r3, #0
 800a828:	dc6a      	bgt.n	800a900 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2204      	movs	r2, #4
 800a82e:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00b      	beq.n	800a850 <tcp_process+0x384>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a83c:	699b      	ldr	r3, [r3, #24]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d106      	bne.n	800a850 <tcp_process+0x384>
 800a842:	4b74      	ldr	r3, [pc, #464]	; (800aa14 <tcp_process+0x548>)
 800a844:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a848:	4973      	ldr	r1, [pc, #460]	; (800aa18 <tcp_process+0x54c>)
 800a84a:	4874      	ldr	r0, [pc, #464]	; (800aa1c <tcp_process+0x550>)
 800a84c:	f008 f8d8 	bl	8012a00 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a854:	2b00      	cmp	r3, #0
 800a856:	d102      	bne.n	800a85e <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800a858:	23fa      	movs	r3, #250	; 0xfa
 800a85a:	76bb      	strb	r3, [r7, #26]
 800a85c:	e011      	b.n	800a882 <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00a      	beq.n	800a87e <tcp_process+0x3b2>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a86c:	699b      	ldr	r3, [r3, #24]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	6910      	ldr	r0, [r2, #16]
 800a872:	2200      	movs	r2, #0
 800a874:	6879      	ldr	r1, [r7, #4]
 800a876:	4798      	blx	r3
 800a878:	4603      	mov	r3, r0
 800a87a:	76bb      	strb	r3, [r7, #26]
 800a87c:	e001      	b.n	800a882 <tcp_process+0x3b6>
 800a87e:	23f0      	movs	r3, #240	; 0xf0
 800a880:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800a882:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00a      	beq.n	800a8a0 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800a88a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a88e:	f113 0f0d 	cmn.w	r3, #13
 800a892:	d002      	beq.n	800a89a <tcp_process+0x3ce>
            tcp_abort(pcb);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f7fe f907 	bl	8008aa8 <tcp_abort>
          }
          return ERR_ABRT;
 800a89a:	f06f 030c 	mvn.w	r3, #12
 800a89e:	e1b9      	b.n	800ac14 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fa3d 	bl	800ad20 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800a8a6:	4b5e      	ldr	r3, [pc, #376]	; (800aa20 <tcp_process+0x554>)
 800a8a8:	881b      	ldrh	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d005      	beq.n	800a8ba <tcp_process+0x3ee>
          recv_acked--;
 800a8ae:	4b5c      	ldr	r3, [pc, #368]	; (800aa20 <tcp_process+0x554>)
 800a8b0:	881b      	ldrh	r3, [r3, #0]
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	4b5a      	ldr	r3, [pc, #360]	; (800aa20 <tcp_process+0x554>)
 800a8b8:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8be:	005b      	lsls	r3, r3, #1
 800a8c0:	f241 121c 	movw	r2, #4380	; 0x111c
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	bf38      	it	cc
 800a8c8:	461a      	movcc	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	bf28      	it	cs
 800a8d4:	4613      	movcs	r3, r2
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800a8de:	4b51      	ldr	r3, [pc, #324]	; (800aa24 <tcp_process+0x558>)
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	f003 0320 	and.w	r3, r3, #32
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d034      	beq.n	800a954 <tcp_process+0x488>
          tcp_ack_now(pcb);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	7e9b      	ldrb	r3, [r3, #26]
 800a8ee:	f043 0302 	orr.w	r3, r3, #2
 800a8f2:	b2da      	uxtb	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2207      	movs	r2, #7
 800a8fc:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800a8fe:	e029      	b.n	800a954 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a900:	4b3e      	ldr	r3, [pc, #248]	; (800a9fc <tcp_process+0x530>)
 800a902:	6818      	ldr	r0, [r3, #0]
 800a904:	4b3e      	ldr	r3, [pc, #248]	; (800aa00 <tcp_process+0x534>)
 800a906:	881b      	ldrh	r3, [r3, #0]
 800a908:	461a      	mov	r2, r3
 800a90a:	4b3e      	ldr	r3, [pc, #248]	; (800aa04 <tcp_process+0x538>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a910:	4b3d      	ldr	r3, [pc, #244]	; (800aa08 <tcp_process+0x53c>)
 800a912:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a914:	885b      	ldrh	r3, [r3, #2]
 800a916:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a918:	4a3b      	ldr	r2, [pc, #236]	; (800aa08 <tcp_process+0x53c>)
 800a91a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a91c:	8812      	ldrh	r2, [r2, #0]
 800a91e:	b292      	uxth	r2, r2
 800a920:	9201      	str	r2, [sp, #4]
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	4b39      	ldr	r3, [pc, #228]	; (800aa0c <tcp_process+0x540>)
 800a926:	4a3a      	ldr	r2, [pc, #232]	; (800aa10 <tcp_process+0x544>)
 800a928:	f001 fff0 	bl	800c90c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800a92c:	e166      	b.n	800abfc <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a92e:	4b32      	ldr	r3, [pc, #200]	; (800a9f8 <tcp_process+0x52c>)
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	f003 0302 	and.w	r3, r3, #2
 800a936:	2b00      	cmp	r3, #0
 800a938:	f000 8160 	beq.w	800abfc <tcp_process+0x730>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a940:	1e5a      	subs	r2, r3, #1
 800a942:	4b30      	ldr	r3, [pc, #192]	; (800aa04 <tcp_process+0x538>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	429a      	cmp	r2, r3
 800a948:	f040 8158 	bne.w	800abfc <tcp_process+0x730>
      tcp_rexmit(pcb);
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f002 f893 	bl	800ca78 <tcp_rexmit>
    break;
 800a952:	e153      	b.n	800abfc <tcp_process+0x730>
 800a954:	e152      	b.n	800abfc <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f9e2 	bl	800ad20 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a95c:	4b31      	ldr	r3, [pc, #196]	; (800aa24 <tcp_process+0x558>)
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	f003 0320 	and.w	r3, r3, #32
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 814b 	beq.w	800ac00 <tcp_process+0x734>
      tcp_ack_now(pcb);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	7e9b      	ldrb	r3, [r3, #26]
 800a96e:	f043 0302 	orr.w	r3, r3, #2
 800a972:	b2da      	uxtb	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2207      	movs	r2, #7
 800a97c:	751a      	strb	r2, [r3, #20]
    }
    break;
 800a97e:	e13f      	b.n	800ac00 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 f9cd 	bl	800ad20 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800a986:	4b27      	ldr	r3, [pc, #156]	; (800aa24 <tcp_process+0x558>)
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	f003 0320 	and.w	r3, r3, #32
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d070      	beq.n	800aa74 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a992:	4b19      	ldr	r3, [pc, #100]	; (800a9f8 <tcp_process+0x52c>)
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	f003 0310 	and.w	r3, r3, #16
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d05f      	beq.n	800aa5e <tcp_process+0x592>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9a2:	4b16      	ldr	r3, [pc, #88]	; (800a9fc <tcp_process+0x530>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d159      	bne.n	800aa5e <tcp_process+0x592>
          pcb->unsent == NULL) {
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d155      	bne.n	800aa5e <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	7e9b      	ldrb	r3, [r3, #26]
 800a9b6:	f043 0302 	orr.w	r3, r3, #2
 800a9ba:	b2da      	uxtb	r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7fe fe87 	bl	80096d4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a9c6:	4b18      	ldr	r3, [pc, #96]	; (800aa28 <tcp_process+0x55c>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d105      	bne.n	800a9dc <tcp_process+0x510>
 800a9d0:	4b15      	ldr	r3, [pc, #84]	; (800aa28 <tcp_process+0x55c>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	4a14      	ldr	r2, [pc, #80]	; (800aa28 <tcp_process+0x55c>)
 800a9d8:	6013      	str	r3, [r2, #0]
 800a9da:	e02d      	b.n	800aa38 <tcp_process+0x56c>
 800a9dc:	4b12      	ldr	r3, [pc, #72]	; (800aa28 <tcp_process+0x55c>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	617b      	str	r3, [r7, #20]
 800a9e2:	e026      	b.n	800aa32 <tcp_process+0x566>
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d11e      	bne.n	800aa2c <tcp_process+0x560>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68da      	ldr	r2, [r3, #12]
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	60da      	str	r2, [r3, #12]
 800a9f6:	e01f      	b.n	800aa38 <tcp_process+0x56c>
 800a9f8:	20007ed0 	.word	0x20007ed0
 800a9fc:	20007ec8 	.word	0x20007ec8
 800aa00:	20007ece 	.word	0x20007ece
 800aa04:	20007ec4 	.word	0x20007ec4
 800aa08:	20007eb4 	.word	0x20007eb4
 800aa0c:	200047fc 	.word	0x200047fc
 800aa10:	20004800 	.word	0x20004800
 800aa14:	080173e8 	.word	0x080173e8
 800aa18:	080175ec 	.word	0x080175ec
 800aa1c:	0801742c 	.word	0x0801742c
 800aa20:	20007ecc 	.word	0x20007ecc
 800aa24:	20007ed1 	.word	0x20007ed1
 800aa28:	20007e98 	.word	0x20007e98
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	617b      	str	r3, [r7, #20]
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1d5      	bne.n	800a9e4 <tcp_process+0x518>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	60da      	str	r2, [r3, #12]
 800aa3e:	4b77      	ldr	r3, [pc, #476]	; (800ac1c <tcp_process+0x750>)
 800aa40:	2201      	movs	r2, #1
 800aa42:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	220a      	movs	r2, #10
 800aa48:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aa4a:	4b75      	ldr	r3, [pc, #468]	; (800ac20 <tcp_process+0x754>)
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	60da      	str	r2, [r3, #12]
 800aa52:	4a73      	ldr	r2, [pc, #460]	; (800ac20 <tcp_process+0x754>)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6013      	str	r3, [r2, #0]
 800aa58:	f002 f9be 	bl	800cdd8 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800aa5c:	e0d2      	b.n	800ac04 <tcp_process+0x738>
        tcp_ack_now(pcb);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	7e9b      	ldrb	r3, [r3, #26]
 800aa62:	f043 0302 	orr.w	r3, r3, #2
 800aa66:	b2da      	uxtb	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2208      	movs	r2, #8
 800aa70:	751a      	strb	r2, [r3, #20]
    break;
 800aa72:	e0c7      	b.n	800ac04 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa74:	4b6b      	ldr	r3, [pc, #428]	; (800ac24 <tcp_process+0x758>)
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	f003 0310 	and.w	r3, r3, #16
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 80c1 	beq.w	800ac04 <tcp_process+0x738>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa86:	4b68      	ldr	r3, [pc, #416]	; (800ac28 <tcp_process+0x75c>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	f040 80ba 	bne.w	800ac04 <tcp_process+0x738>
               pcb->unsent == NULL) {
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f040 80b5 	bne.w	800ac04 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2206      	movs	r2, #6
 800aa9e:	751a      	strb	r2, [r3, #20]
    break;
 800aaa0:	e0b0      	b.n	800ac04 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f93c 	bl	800ad20 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800aaa8:	4b60      	ldr	r3, [pc, #384]	; (800ac2c <tcp_process+0x760>)
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	f003 0320 	and.w	r3, r3, #32
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f000 80a9 	beq.w	800ac08 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	7e9b      	ldrb	r3, [r3, #26]
 800aaba:	f043 0302 	orr.w	r3, r3, #2
 800aabe:	b2da      	uxtb	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f7fe fe05 	bl	80096d4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800aaca:	4b59      	ldr	r3, [pc, #356]	; (800ac30 <tcp_process+0x764>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d105      	bne.n	800aae0 <tcp_process+0x614>
 800aad4:	4b56      	ldr	r3, [pc, #344]	; (800ac30 <tcp_process+0x764>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	4a55      	ldr	r2, [pc, #340]	; (800ac30 <tcp_process+0x764>)
 800aadc:	6013      	str	r3, [r2, #0]
 800aade:	e013      	b.n	800ab08 <tcp_process+0x63c>
 800aae0:	4b53      	ldr	r3, [pc, #332]	; (800ac30 <tcp_process+0x764>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	613b      	str	r3, [r7, #16]
 800aae6:	e00c      	b.n	800ab02 <tcp_process+0x636>
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d104      	bne.n	800aafc <tcp_process+0x630>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	68da      	ldr	r2, [r3, #12]
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	60da      	str	r2, [r3, #12]
 800aafa:	e005      	b.n	800ab08 <tcp_process+0x63c>
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	613b      	str	r3, [r7, #16]
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1ef      	bne.n	800aae8 <tcp_process+0x61c>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	60da      	str	r2, [r3, #12]
 800ab0e:	4b43      	ldr	r3, [pc, #268]	; (800ac1c <tcp_process+0x750>)
 800ab10:	2201      	movs	r2, #1
 800ab12:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	220a      	movs	r2, #10
 800ab18:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800ab1a:	4b41      	ldr	r3, [pc, #260]	; (800ac20 <tcp_process+0x754>)
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	60da      	str	r2, [r3, #12]
 800ab22:	4a3f      	ldr	r2, [pc, #252]	; (800ac20 <tcp_process+0x754>)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6013      	str	r3, [r2, #0]
 800ab28:	f002 f956 	bl	800cdd8 <tcp_timer_needed>
    }
    break;
 800ab2c:	e06c      	b.n	800ac08 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 f8f6 	bl	800ad20 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ab34:	4b3b      	ldr	r3, [pc, #236]	; (800ac24 <tcp_process+0x758>)
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	f003 0310 	and.w	r3, r3, #16
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d065      	beq.n	800ac0c <tcp_process+0x740>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab44:	4b38      	ldr	r3, [pc, #224]	; (800ac28 <tcp_process+0x75c>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d15f      	bne.n	800ac0c <tcp_process+0x740>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d15b      	bne.n	800ac0c <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7fe fdbd 	bl	80096d4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ab5a:	4b35      	ldr	r3, [pc, #212]	; (800ac30 <tcp_process+0x764>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d105      	bne.n	800ab70 <tcp_process+0x6a4>
 800ab64:	4b32      	ldr	r3, [pc, #200]	; (800ac30 <tcp_process+0x764>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	4a31      	ldr	r2, [pc, #196]	; (800ac30 <tcp_process+0x764>)
 800ab6c:	6013      	str	r3, [r2, #0]
 800ab6e:	e013      	b.n	800ab98 <tcp_process+0x6cc>
 800ab70:	4b2f      	ldr	r3, [pc, #188]	; (800ac30 <tcp_process+0x764>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	60fb      	str	r3, [r7, #12]
 800ab76:	e00c      	b.n	800ab92 <tcp_process+0x6c6>
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d104      	bne.n	800ab8c <tcp_process+0x6c0>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68da      	ldr	r2, [r3, #12]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	60da      	str	r2, [r3, #12]
 800ab8a:	e005      	b.n	800ab98 <tcp_process+0x6cc>
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	60fb      	str	r3, [r7, #12]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1ef      	bne.n	800ab78 <tcp_process+0x6ac>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	60da      	str	r2, [r3, #12]
 800ab9e:	4b1f      	ldr	r3, [pc, #124]	; (800ac1c <tcp_process+0x750>)
 800aba0:	2201      	movs	r2, #1
 800aba2:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	220a      	movs	r2, #10
 800aba8:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800abaa:	4b1d      	ldr	r3, [pc, #116]	; (800ac20 <tcp_process+0x754>)
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	60da      	str	r2, [r3, #12]
 800abb2:	4a1b      	ldr	r2, [pc, #108]	; (800ac20 <tcp_process+0x754>)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6013      	str	r3, [r2, #0]
 800abb8:	f002 f90e 	bl	800cdd8 <tcp_timer_needed>
    }
    break;
 800abbc:	e026      	b.n	800ac0c <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 f8ae 	bl	800ad20 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800abc4:	4b17      	ldr	r3, [pc, #92]	; (800ac24 <tcp_process+0x758>)
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	f003 0310 	and.w	r3, r3, #16
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d01f      	beq.n	800ac10 <tcp_process+0x744>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abd4:	4b14      	ldr	r3, [pc, #80]	; (800ac28 <tcp_process+0x75c>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d119      	bne.n	800ac10 <tcp_process+0x744>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d115      	bne.n	800ac10 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800abe4:	4b11      	ldr	r3, [pc, #68]	; (800ac2c <tcp_process+0x760>)
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	f043 0310 	orr.w	r3, r3, #16
 800abec:	b2da      	uxtb	r2, r3
 800abee:	4b0f      	ldr	r3, [pc, #60]	; (800ac2c <tcp_process+0x760>)
 800abf0:	701a      	strb	r2, [r3, #0]
    }
    break;
 800abf2:	e00d      	b.n	800ac10 <tcp_process+0x744>
  default:
    break;
 800abf4:	bf00      	nop
 800abf6:	e00c      	b.n	800ac12 <tcp_process+0x746>
    break;
 800abf8:	bf00      	nop
 800abfa:	e00a      	b.n	800ac12 <tcp_process+0x746>
    break;
 800abfc:	bf00      	nop
 800abfe:	e008      	b.n	800ac12 <tcp_process+0x746>
    break;
 800ac00:	bf00      	nop
 800ac02:	e006      	b.n	800ac12 <tcp_process+0x746>
    break;
 800ac04:	bf00      	nop
 800ac06:	e004      	b.n	800ac12 <tcp_process+0x746>
    break;
 800ac08:	bf00      	nop
 800ac0a:	e002      	b.n	800ac12 <tcp_process+0x746>
    break;
 800ac0c:	bf00      	nop
 800ac0e:	e000      	b.n	800ac12 <tcp_process+0x746>
    break;
 800ac10:	bf00      	nop
  }
  return ERR_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3720      	adds	r7, #32
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	20007ea0 	.word	0x20007ea0
 800ac20:	20007e9c 	.word	0x20007e9c
 800ac24:	20007ed0 	.word	0x20007ed0
 800ac28:	20007ec8 	.word	0x20007ec8
 800ac2c:	20007ed1 	.word	0x20007ed1
 800ac30:	20007e98 	.word	0x20007e98

0800ac34 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ac34:	b590      	push	{r4, r7, lr}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	899b      	ldrh	r3, [r3, #12]
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fb ffbf 	bl	8006bca <lwip_htons>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	f003 0301 	and.w	r3, r3, #1
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d027      	beq.n	800aca6 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ac56:	6838      	ldr	r0, [r7, #0]
 800ac58:	f7fe fb69 	bl	800932e <tcp_segs_free>
    next = NULL;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	603b      	str	r3, [r7, #0]
 800ac60:	e055      	b.n	800ad0e <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	899b      	ldrh	r3, [r3, #12]
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fb ffad 	bl	8006bca <lwip_htons>
 800ac70:	4603      	mov	r3, r0
 800ac72:	f003 0301 	and.w	r3, r3, #1
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00d      	beq.n	800ac96 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	899b      	ldrh	r3, [r3, #12]
 800ac80:	b29c      	uxth	r4, r3
 800ac82:	2001      	movs	r0, #1
 800ac84:	f7fb ffa1 	bl	8006bca <lwip_htons>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	4322      	orrs	r2, r4
 800ac92:	b292      	uxth	r2, r2
 800ac94:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f7fe fb59 	bl	8009358 <tcp_seg_free>
    while (next &&
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d00e      	beq.n	800acca <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	891b      	ldrh	r3, [r3, #8]
 800acb0:	461a      	mov	r2, r3
 800acb2:	4b1a      	ldr	r3, [pc, #104]	; (800ad1c <tcp_oos_insert_segment+0xe8>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	441a      	add	r2, r3
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	6839      	ldr	r1, [r7, #0]
 800acc0:	8909      	ldrh	r1, [r1, #8]
 800acc2:	440b      	add	r3, r1
 800acc4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	dacb      	bge.n	800ac62 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d01e      	beq.n	800ad0e <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	891b      	ldrh	r3, [r3, #8]
 800acd4:	461a      	mov	r2, r3
 800acd6:	4b11      	ldr	r3, [pc, #68]	; (800ad1c <tcp_oos_insert_segment+0xe8>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	441a      	add	r2, r3
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	dd12      	ble.n	800ad0e <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	b29a      	uxth	r2, r3
 800acf0:	4b0a      	ldr	r3, [pc, #40]	; (800ad1c <tcp_oos_insert_segment+0xe8>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	b29a      	uxth	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	685a      	ldr	r2, [r3, #4]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	891b      	ldrh	r3, [r3, #8]
 800ad06:	4619      	mov	r1, r3
 800ad08:	4610      	mov	r0, r2
 800ad0a:	f7fc ffbb 	bl	8007c84 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	683a      	ldr	r2, [r7, #0]
 800ad12:	601a      	str	r2, [r3, #0]
}
 800ad14:	bf00      	nop
 800ad16:	3714      	adds	r7, #20
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd90      	pop	{r4, r7, pc}
 800ad1c:	20007ec4 	.word	0x20007ec4

0800ad20 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ad20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad22:	b08d      	sub	sp, #52	; 0x34
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	7d1b      	ldrb	r3, [r3, #20]
 800ad30:	2b03      	cmp	r3, #3
 800ad32:	d806      	bhi.n	800ad42 <tcp_receive+0x22>
 800ad34:	4b98      	ldr	r3, [pc, #608]	; (800af98 <tcp_receive+0x278>)
 800ad36:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800ad3a:	4998      	ldr	r1, [pc, #608]	; (800af9c <tcp_receive+0x27c>)
 800ad3c:	4898      	ldr	r0, [pc, #608]	; (800afa0 <tcp_receive+0x280>)
 800ad3e:	f007 fe5f 	bl	8012a00 <iprintf>

  if (flags & TCP_ACK) {
 800ad42:	4b98      	ldr	r3, [pc, #608]	; (800afa4 <tcp_receive+0x284>)
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	f003 0310 	and.w	r3, r3, #16
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f000 82c1 	beq.w	800b2d2 <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad56:	461a      	mov	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad5c:	4413      	add	r3, r2
 800ad5e:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad64:	4b90      	ldr	r3, [pc, #576]	; (800afa8 <tcp_receive+0x288>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	1ad3      	subs	r3, r2, r3
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	db1b      	blt.n	800ada6 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad72:	4b8d      	ldr	r3, [pc, #564]	; (800afa8 <tcp_receive+0x288>)
 800ad74:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d106      	bne.n	800ad88 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad7e:	4b8b      	ldr	r3, [pc, #556]	; (800afac <tcp_receive+0x28c>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	1ad3      	subs	r3, r2, r3
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	db0e      	blt.n	800ada6 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad8c:	4b87      	ldr	r3, [pc, #540]	; (800afac <tcp_receive+0x28c>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d141      	bne.n	800ae18 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ad94:	4b86      	ldr	r3, [pc, #536]	; (800afb0 <tcp_receive+0x290>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	89db      	ldrh	r3, [r3, #14]
 800ad9a:	b29a      	uxth	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d938      	bls.n	800ae18 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ada6:	4b82      	ldr	r3, [pc, #520]	; (800afb0 <tcp_receive+0x290>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	89db      	ldrh	r3, [r3, #14]
 800adac:	b29a      	uxth	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d205      	bcs.n	800add0 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800add0:	4b75      	ldr	r3, [pc, #468]	; (800afa8 <tcp_receive+0x288>)
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800add8:	4b74      	ldr	r3, [pc, #464]	; (800afac <tcp_receive+0x28c>)
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d10d      	bne.n	800ae06 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d111      	bne.n	800ae18 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800ae04:	e008      	b.n	800ae18 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d003      	beq.n	800ae18 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ae18:	4b64      	ldr	r3, [pc, #400]	; (800afac <tcp_receive+0x28c>)
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	dc53      	bgt.n	800aece <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800ae26:	4b63      	ldr	r3, [pc, #396]	; (800afb4 <tcp_receive+0x294>)
 800ae28:	881b      	ldrh	r3, [r3, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d146      	bne.n	800aebc <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800ae38:	4413      	add	r3, r2
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d13d      	bne.n	800aebc <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	db38      	blt.n	800aebc <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae4e:	4b57      	ldr	r3, [pc, #348]	; (800afac <tcp_receive+0x28c>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d132      	bne.n	800aebc <tcp_receive+0x19c>
              found_dupack = 1;
 800ae56:	2301      	movs	r3, #1
 800ae58:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ae60:	2bff      	cmp	r3, #255	; 0xff
 800ae62:	d007      	beq.n	800ae74 <tcp_receive+0x154>
                ++pcb->dupacks;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ae7a:	2b03      	cmp	r3, #3
 800ae7c:	d916      	bls.n	800aeac <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae88:	4413      	add	r3, r2
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d912      	bls.n	800aebc <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aea0:	4413      	add	r3, r2
 800aea2:	b29a      	uxth	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800aeaa:	e007      	b.n	800aebc <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aeb2:	2b03      	cmp	r3, #3
 800aeb4:	d102      	bne.n	800aebc <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f001 fe2e 	bl	800cb18 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f040 816a 	bne.w	800b198 <tcp_receive+0x478>
        pcb->dupacks = 0;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aecc:	e164      	b.n	800b198 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800aece:	4b37      	ldr	r3, [pc, #220]	; (800afac <tcp_receive+0x28c>)
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	3b01      	subs	r3, #1
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f2c0 8108 	blt.w	800b0f0 <tcp_receive+0x3d0>
 800aee0:	4b32      	ldr	r3, [pc, #200]	; (800afac <tcp_receive+0x28c>)
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aee8:	1ad3      	subs	r3, r2, r3
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f300 8100 	bgt.w	800b0f0 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	7e9b      	ldrb	r3, [r3, #26]
 800aef4:	f003 0304 	and.w	r3, r3, #4
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00c      	beq.n	800af16 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	7e9b      	ldrb	r3, [r3, #26]
 800af00:	f023 0304 	bic.w	r3, r3, #4
 800af04:	b2da      	uxtb	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800af24:	10db      	asrs	r3, r3, #3
 800af26:	b21b      	sxth	r3, r3
 800af28:	b29a      	uxth	r2, r3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800af30:	b29b      	uxth	r3, r3
 800af32:	4413      	add	r3, r2
 800af34:	b29b      	uxth	r3, r3
 800af36:	b21a      	sxth	r2, r3
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800af46:	4b19      	ldr	r3, [pc, #100]	; (800afac <tcp_receive+0x28c>)
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	7d1b      	ldrb	r3, [r3, #20]
 800af52:	2b03      	cmp	r3, #3
 800af54:	f240 8095 	bls.w	800b082 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800af64:	429a      	cmp	r2, r3
 800af66:	d227      	bcs.n	800afb8 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800af72:	4413      	add	r3, r2
 800af74:	b29a      	uxth	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800af7c:	429a      	cmp	r2, r3
 800af7e:	f240 8080 	bls.w	800b082 <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800af8c:	4413      	add	r3, r2
 800af8e:	b29a      	uxth	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800af96:	e074      	b.n	800b082 <tcp_receive+0x362>
 800af98:	080173e8 	.word	0x080173e8
 800af9c:	0801760c 	.word	0x0801760c
 800afa0:	0801742c 	.word	0x0801742c
 800afa4:	20007ed0 	.word	0x20007ed0
 800afa8:	20007ec4 	.word	0x20007ec4
 800afac:	20007ec8 	.word	0x20007ec8
 800afb0:	20007eb4 	.word	0x20007eb4
 800afb4:	20007ece 	.word	0x20007ece
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800afc2:	4619      	mov	r1, r3
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800afc8:	fb01 f303 	mul.w	r3, r1, r3
 800afcc:	6879      	ldr	r1, [r7, #4]
 800afce:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800afd2:	fb93 f3f1 	sdiv	r3, r3, r1
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	4413      	add	r3, r2
 800afda:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800afe2:	8a7a      	ldrh	r2, [r7, #18]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d94c      	bls.n	800b082 <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	8a7a      	ldrh	r2, [r7, #18]
 800afec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800aff0:	e047      	b.n	800b082 <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800b008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7fd f841 	bl	8008094 <pbuf_clen>
 800b012:	4603      	mov	r3, r0
 800b014:	429c      	cmp	r4, r3
 800b016:	d206      	bcs.n	800b026 <tcp_receive+0x306>
 800b018:	4b70      	ldr	r3, [pc, #448]	; (800b1dc <tcp_receive+0x4bc>)
 800b01a:	f240 429e 	movw	r2, #1182	; 0x49e
 800b01e:	4970      	ldr	r1, [pc, #448]	; (800b1e0 <tcp_receive+0x4c0>)
 800b020:	4870      	ldr	r0, [pc, #448]	; (800b1e4 <tcp_receive+0x4c4>)
 800b022:	f007 fced 	bl	8012a00 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800b026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fd f832 	bl	8008094 <pbuf_clen>
 800b030:	4603      	mov	r3, r0
 800b032:	461a      	mov	r2, r3
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b03a:	1a9b      	subs	r3, r3, r2
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800b044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b046:	891a      	ldrh	r2, [r3, #8]
 800b048:	4b67      	ldr	r3, [pc, #412]	; (800b1e8 <tcp_receive+0x4c8>)
 800b04a:	881b      	ldrh	r3, [r3, #0]
 800b04c:	4413      	add	r3, r2
 800b04e:	b29a      	uxth	r2, r3
 800b050:	4b65      	ldr	r3, [pc, #404]	; (800b1e8 <tcp_receive+0x4c8>)
 800b052:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800b054:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b056:	f7fe f97f 	bl	8009358 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00e      	beq.n	800b082 <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d10a      	bne.n	800b082 <tcp_receive+0x362>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b070:	2b00      	cmp	r3, #0
 800b072:	d106      	bne.n	800b082 <tcp_receive+0x362>
 800b074:	4b59      	ldr	r3, [pc, #356]	; (800b1dc <tcp_receive+0x4bc>)
 800b076:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800b07a:	495c      	ldr	r1, [pc, #368]	; (800b1ec <tcp_receive+0x4cc>)
 800b07c:	4859      	ldr	r0, [pc, #356]	; (800b1e4 <tcp_receive+0x4c4>)
 800b07e:	f007 fcbf 	bl	8012a00 <iprintf>
      while (pcb->unacked != NULL &&
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b086:	2b00      	cmp	r3, #0
 800b088:	d022      	beq.n	800b0d0 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	4618      	mov	r0, r3
 800b094:	f7fb fda6 	bl	8006be4 <lwip_htonl>
 800b098:	4604      	mov	r4, r0
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b09e:	891b      	ldrh	r3, [r3, #8]
 800b0a0:	461d      	mov	r5, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	899b      	ldrh	r3, [r3, #12]
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7fb fd8c 	bl	8006bca <lwip_htons>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	f003 0303 	and.w	r3, r3, #3
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d001      	beq.n	800b0c0 <tcp_receive+0x3a0>
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e000      	b.n	800b0c2 <tcp_receive+0x3a2>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	442b      	add	r3, r5
 800b0c4:	18e2      	adds	r2, r4, r3
 800b0c6:	4b4a      	ldr	r3, [pc, #296]	; (800b1f0 <tcp_receive+0x4d0>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	dd90      	ble.n	800aff2 <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d104      	bne.n	800b0e2 <tcp_receive+0x3c2>
        pcb->rtime = -1;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0de:	861a      	strh	r2, [r3, #48]	; 0x30
 800b0e0:	e002      	b.n	800b0e8 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	76da      	strb	r2, [r3, #27]
 800b0ee:	e002      	b.n	800b0f6 <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f001 f921 	bl	800c338 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800b0f6:	e04f      	b.n	800b198 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d103      	bne.n	800b118 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800b11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	4618      	mov	r0, r3
 800b124:	f7fc ffb6 	bl	8008094 <pbuf_clen>
 800b128:	4603      	mov	r3, r0
 800b12a:	429c      	cmp	r4, r3
 800b12c:	d206      	bcs.n	800b13c <tcp_receive+0x41c>
 800b12e:	4b2b      	ldr	r3, [pc, #172]	; (800b1dc <tcp_receive+0x4bc>)
 800b130:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b134:	492a      	ldr	r1, [pc, #168]	; (800b1e0 <tcp_receive+0x4c0>)
 800b136:	482b      	ldr	r0, [pc, #172]	; (800b1e4 <tcp_receive+0x4c4>)
 800b138:	f007 fc62 	bl	8012a00 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800b13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	4618      	mov	r0, r3
 800b142:	f7fc ffa7 	bl	8008094 <pbuf_clen>
 800b146:	4603      	mov	r3, r0
 800b148:	461a      	mov	r2, r3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b150:	1a9b      	subs	r3, r3, r2
 800b152:	b29a      	uxth	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800b15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b15c:	891a      	ldrh	r2, [r3, #8]
 800b15e:	4b22      	ldr	r3, [pc, #136]	; (800b1e8 <tcp_receive+0x4c8>)
 800b160:	881b      	ldrh	r3, [r3, #0]
 800b162:	4413      	add	r3, r2
 800b164:	b29a      	uxth	r2, r3
 800b166:	4b20      	ldr	r3, [pc, #128]	; (800b1e8 <tcp_receive+0x4c8>)
 800b168:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800b16a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b16c:	f7fe f8f4 	bl	8009358 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00e      	beq.n	800b198 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10a      	bne.n	800b198 <tcp_receive+0x478>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b186:	2b00      	cmp	r3, #0
 800b188:	d106      	bne.n	800b198 <tcp_receive+0x478>
 800b18a:	4b14      	ldr	r3, [pc, #80]	; (800b1dc <tcp_receive+0x4bc>)
 800b18c:	f240 42dc 	movw	r2, #1244	; 0x4dc
 800b190:	4916      	ldr	r1, [pc, #88]	; (800b1ec <tcp_receive+0x4cc>)
 800b192:	4814      	ldr	r0, [pc, #80]	; (800b1e4 <tcp_receive+0x4c4>)
 800b194:	f007 fc34 	bl	8012a00 <iprintf>
    while (pcb->unsent != NULL &&
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d037      	beq.n	800b210 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800b1a0:	4b13      	ldr	r3, [pc, #76]	; (800b1f0 <tcp_receive+0x4d0>)
 800b1a2:	681c      	ldr	r4, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7fb fd19 	bl	8006be4 <lwip_htonl>
 800b1b2:	4605      	mov	r5, r0
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1b8:	891b      	ldrh	r3, [r3, #8]
 800b1ba:	461e      	mov	r6, r3
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1c0:	68db      	ldr	r3, [r3, #12]
 800b1c2:	899b      	ldrh	r3, [r3, #12]
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fb fcff 	bl	8006bca <lwip_htons>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	f003 0303 	and.w	r3, r3, #3
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00e      	beq.n	800b1f4 <tcp_receive+0x4d4>
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e00d      	b.n	800b1f6 <tcp_receive+0x4d6>
 800b1da:	bf00      	nop
 800b1dc:	080173e8 	.word	0x080173e8
 800b1e0:	08017628 	.word	0x08017628
 800b1e4:	0801742c 	.word	0x0801742c
 800b1e8:	20007ecc 	.word	0x20007ecc
 800b1ec:	08017650 	.word	0x08017650
 800b1f0:	20007ec8 	.word	0x20007ec8
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	4433      	add	r3, r6
 800b1f8:	442b      	add	r3, r5
 800b1fa:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	db07      	blt.n	800b210 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800b200:	4b8d      	ldr	r3, [pc, #564]	; (800b438 <tcp_receive+0x718>)
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f77f af74 	ble.w	800b0f8 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b216:	4b89      	ldr	r3, [pc, #548]	; (800b43c <tcp_receive+0x71c>)
 800b218:	881b      	ldrh	r3, [r3, #0]
 800b21a:	4413      	add	r3, r2
 800b21c:	b29a      	uxth	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d052      	beq.n	800b2d2 <tcp_receive+0x5b2>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b230:	4b81      	ldr	r3, [pc, #516]	; (800b438 <tcp_receive+0x718>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	1ad3      	subs	r3, r2, r3
 800b236:	2b00      	cmp	r3, #0
 800b238:	da4b      	bge.n	800b2d2 <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b23a:	4b81      	ldr	r3, [pc, #516]	; (800b440 <tcp_receive+0x720>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	b29a      	uxth	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b244:	b29b      	uxth	r3, r3
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	b29b      	uxth	r3, r3
 800b24a:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800b24c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b254:	10db      	asrs	r3, r3, #3
 800b256:	b21b      	sxth	r3, r3
 800b258:	b29b      	uxth	r3, r3
 800b25a:	1ad3      	subs	r3, r2, r3
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b266:	b29a      	uxth	r2, r3
 800b268:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b26a:	4413      	add	r3, r2
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	b21a      	sxth	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b274:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b278:	2b00      	cmp	r3, #0
 800b27a:	da03      	bge.n	800b284 <tcp_receive+0x564>
        m = -m;
 800b27c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b27e:	425b      	negs	r3, r3
 800b280:	b29b      	uxth	r3, r3
 800b282:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800b284:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b28c:	109b      	asrs	r3, r3, #2
 800b28e:	b21b      	sxth	r3, r3
 800b290:	b29b      	uxth	r3, r3
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	b29b      	uxth	r3, r3
 800b296:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2a2:	4413      	add	r3, r2
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	b21a      	sxth	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b2b2:	10db      	asrs	r3, r3, #3
 800b2b4:	b21b      	sxth	r3, r3
 800b2b6:	b29a      	uxth	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	4413      	add	r3, r2
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	b21a      	sxth	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b2d2:	4b5c      	ldr	r3, [pc, #368]	; (800b444 <tcp_receive+0x724>)
 800b2d4:	881b      	ldrh	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	f000 84f1 	beq.w	800bcbe <tcp_receive+0xf9e>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	7d1b      	ldrb	r3, [r3, #20]
 800b2e0:	2b06      	cmp	r3, #6
 800b2e2:	f200 84ec 	bhi.w	800bcbe <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2ea:	4b57      	ldr	r3, [pc, #348]	; (800b448 <tcp_receive+0x728>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f2c0 80b8 	blt.w	800b468 <tcp_receive+0x748>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2fc:	4b51      	ldr	r3, [pc, #324]	; (800b444 <tcp_receive+0x724>)
 800b2fe:	881b      	ldrh	r3, [r3, #0]
 800b300:	4619      	mov	r1, r3
 800b302:	4b51      	ldr	r3, [pc, #324]	; (800b448 <tcp_receive+0x728>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	440b      	add	r3, r1
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	3301      	adds	r3, #1
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f300 80ab 	bgt.w	800b468 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b312:	4b4e      	ldr	r3, [pc, #312]	; (800b44c <tcp_receive+0x72c>)
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b31c:	4b4a      	ldr	r3, [pc, #296]	; (800b448 <tcp_receive+0x728>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b324:	4b49      	ldr	r3, [pc, #292]	; (800b44c <tcp_receive+0x72c>)
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d106      	bne.n	800b33a <tcp_receive+0x61a>
 800b32c:	4b48      	ldr	r3, [pc, #288]	; (800b450 <tcp_receive+0x730>)
 800b32e:	f240 523c 	movw	r2, #1340	; 0x53c
 800b332:	4948      	ldr	r1, [pc, #288]	; (800b454 <tcp_receive+0x734>)
 800b334:	4848      	ldr	r0, [pc, #288]	; (800b458 <tcp_receive+0x738>)
 800b336:	f007 fb63 	bl	8012a00 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800b33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b340:	4293      	cmp	r3, r2
 800b342:	dd06      	ble.n	800b352 <tcp_receive+0x632>
 800b344:	4b42      	ldr	r3, [pc, #264]	; (800b450 <tcp_receive+0x730>)
 800b346:	f240 523d 	movw	r2, #1341	; 0x53d
 800b34a:	4944      	ldr	r1, [pc, #272]	; (800b45c <tcp_receive+0x73c>)
 800b34c:	4842      	ldr	r0, [pc, #264]	; (800b458 <tcp_receive+0x738>)
 800b34e:	f007 fb57 	bl	8012a00 <iprintf>
      if (inseg.p->len < off) {
 800b352:	4b3e      	ldr	r3, [pc, #248]	; (800b44c <tcp_receive+0x72c>)
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	895b      	ldrh	r3, [r3, #10]
 800b358:	461a      	mov	r2, r3
 800b35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35c:	4293      	cmp	r3, r2
 800b35e:	dd3e      	ble.n	800b3de <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b360:	4b3a      	ldr	r3, [pc, #232]	; (800b44c <tcp_receive+0x72c>)
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	891b      	ldrh	r3, [r3, #8]
 800b366:	461a      	mov	r2, r3
 800b368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36a:	4293      	cmp	r3, r2
 800b36c:	dd06      	ble.n	800b37c <tcp_receive+0x65c>
 800b36e:	4b38      	ldr	r3, [pc, #224]	; (800b450 <tcp_receive+0x730>)
 800b370:	f240 523f 	movw	r2, #1343	; 0x53f
 800b374:	493a      	ldr	r1, [pc, #232]	; (800b460 <tcp_receive+0x740>)
 800b376:	4838      	ldr	r0, [pc, #224]	; (800b458 <tcp_receive+0x738>)
 800b378:	f007 fb42 	bl	8012a00 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b37c:	4b33      	ldr	r3, [pc, #204]	; (800b44c <tcp_receive+0x72c>)
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	891a      	ldrh	r2, [r3, #8]
 800b382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b384:	b29b      	uxth	r3, r3
 800b386:	1ad3      	subs	r3, r2, r3
 800b388:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800b38a:	e00e      	b.n	800b3aa <tcp_receive+0x68a>
          off -= p->len;
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	895b      	ldrh	r3, [r3, #10]
 800b390:	461a      	mov	r2, r3
 800b392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b394:	1a9b      	subs	r3, r3, r2
 800b396:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	8a3a      	ldrh	r2, [r7, #16]
 800b39c:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	895b      	ldrh	r3, [r3, #10]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	dcea      	bgt.n	800b38c <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	425b      	negs	r3, r3
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	b21b      	sxth	r3, r3
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	69b8      	ldr	r0, [r7, #24]
 800b3c4:	f7fc fdae 	bl	8007f24 <pbuf_header>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d01c      	beq.n	800b408 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800b3ce:	4b20      	ldr	r3, [pc, #128]	; (800b450 <tcp_receive+0x730>)
 800b3d0:	f240 524c 	movw	r2, #1356	; 0x54c
 800b3d4:	4923      	ldr	r1, [pc, #140]	; (800b464 <tcp_receive+0x744>)
 800b3d6:	4820      	ldr	r0, [pc, #128]	; (800b458 <tcp_receive+0x738>)
 800b3d8:	f007 fb12 	bl	8012a00 <iprintf>
 800b3dc:	e014      	b.n	800b408 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800b3de:	4b1b      	ldr	r3, [pc, #108]	; (800b44c <tcp_receive+0x72c>)
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3e4:	b292      	uxth	r2, r2
 800b3e6:	4252      	negs	r2, r2
 800b3e8:	b292      	uxth	r2, r2
 800b3ea:	b212      	sxth	r2, r2
 800b3ec:	4611      	mov	r1, r2
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7fc fd98 	bl	8007f24 <pbuf_header>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d006      	beq.n	800b408 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800b3fa:	4b15      	ldr	r3, [pc, #84]	; (800b450 <tcp_receive+0x730>)
 800b3fc:	f240 5251 	movw	r2, #1361	; 0x551
 800b400:	4918      	ldr	r1, [pc, #96]	; (800b464 <tcp_receive+0x744>)
 800b402:	4815      	ldr	r0, [pc, #84]	; (800b458 <tcp_receive+0x738>)
 800b404:	f007 fafc 	bl	8012a00 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800b408:	4b10      	ldr	r3, [pc, #64]	; (800b44c <tcp_receive+0x72c>)
 800b40a:	891a      	ldrh	r2, [r3, #8]
 800b40c:	4b0e      	ldr	r3, [pc, #56]	; (800b448 <tcp_receive+0x728>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	b299      	uxth	r1, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b416:	b29b      	uxth	r3, r3
 800b418:	1acb      	subs	r3, r1, r3
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	4413      	add	r3, r2
 800b41e:	b29a      	uxth	r2, r3
 800b420:	4b0a      	ldr	r3, [pc, #40]	; (800b44c <tcp_receive+0x72c>)
 800b422:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b428:	4a07      	ldr	r2, [pc, #28]	; (800b448 <tcp_receive+0x728>)
 800b42a:	6013      	str	r3, [r2, #0]
 800b42c:	4b07      	ldr	r3, [pc, #28]	; (800b44c <tcp_receive+0x72c>)
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	4a05      	ldr	r2, [pc, #20]	; (800b448 <tcp_receive+0x728>)
 800b432:	6812      	ldr	r2, [r2, #0]
 800b434:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b436:	e025      	b.n	800b484 <tcp_receive+0x764>
 800b438:	20007ec8 	.word	0x20007ec8
 800b43c:	20007ecc 	.word	0x20007ecc
 800b440:	20007e8c 	.word	0x20007e8c
 800b444:	20007ece 	.word	0x20007ece
 800b448:	20007ec4 	.word	0x20007ec4
 800b44c:	20007ea4 	.word	0x20007ea4
 800b450:	080173e8 	.word	0x080173e8
 800b454:	08017670 	.word	0x08017670
 800b458:	0801742c 	.word	0x0801742c
 800b45c:	08017680 	.word	0x08017680
 800b460:	08017690 	.word	0x08017690
 800b464:	080176a0 	.word	0x080176a0
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b468:	4b87      	ldr	r3, [pc, #540]	; (800b688 <tcp_receive+0x968>)
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b470:	1ad3      	subs	r3, r2, r3
 800b472:	2b00      	cmp	r3, #0
 800b474:	da06      	bge.n	800b484 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	7e9b      	ldrb	r3, [r3, #26]
 800b47a:	f043 0302 	orr.w	r3, r3, #2
 800b47e:	b2da      	uxtb	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b484:	4b80      	ldr	r3, [pc, #512]	; (800b688 <tcp_receive+0x968>)
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48c:	1ad3      	subs	r3, r2, r3
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f2c0 8410 	blt.w	800bcb4 <tcp_receive+0xf94>
 800b494:	4b7c      	ldr	r3, [pc, #496]	; (800b688 <tcp_receive+0x968>)
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49c:	6879      	ldr	r1, [r7, #4]
 800b49e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b4a0:	440b      	add	r3, r1
 800b4a2:	1ad3      	subs	r3, r2, r3
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f300 8404 	bgt.w	800bcb4 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4b0:	4b75      	ldr	r3, [pc, #468]	; (800b688 <tcp_receive+0x968>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	f040 8287 	bne.w	800b9c8 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b4ba:	4b74      	ldr	r3, [pc, #464]	; (800b68c <tcp_receive+0x96c>)
 800b4bc:	891c      	ldrh	r4, [r3, #8]
 800b4be:	4b73      	ldr	r3, [pc, #460]	; (800b68c <tcp_receive+0x96c>)
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	899b      	ldrh	r3, [r3, #12]
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fb fb7f 	bl	8006bca <lwip_htons>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	f003 0303 	and.w	r3, r3, #3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d001      	beq.n	800b4da <tcp_receive+0x7ba>
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e000      	b.n	800b4dc <tcp_receive+0x7bc>
 800b4da:	2300      	movs	r3, #0
 800b4dc:	4423      	add	r3, r4
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	4b6b      	ldr	r3, [pc, #428]	; (800b690 <tcp_receive+0x970>)
 800b4e2:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b4e8:	4b69      	ldr	r3, [pc, #420]	; (800b690 <tcp_receive+0x970>)
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d26e      	bcs.n	800b5ce <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b4f0:	4b66      	ldr	r3, [pc, #408]	; (800b68c <tcp_receive+0x96c>)
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	899b      	ldrh	r3, [r3, #12]
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7fb fb66 	bl	8006bca <lwip_htons>
 800b4fe:	4603      	mov	r3, r0
 800b500:	f003 0301 	and.w	r3, r3, #1
 800b504:	2b00      	cmp	r3, #0
 800b506:	d01b      	beq.n	800b540 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b508:	4b60      	ldr	r3, [pc, #384]	; (800b68c <tcp_receive+0x96c>)
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	899b      	ldrh	r3, [r3, #12]
 800b50e:	b29b      	uxth	r3, r3
 800b510:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b514:	b29c      	uxth	r4, r3
 800b516:	4b5d      	ldr	r3, [pc, #372]	; (800b68c <tcp_receive+0x96c>)
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	899b      	ldrh	r3, [r3, #12]
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	4618      	mov	r0, r3
 800b520:	f7fb fb53 	bl	8006bca <lwip_htons>
 800b524:	4603      	mov	r3, r0
 800b526:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7fb fb4c 	bl	8006bca <lwip_htons>
 800b532:	4603      	mov	r3, r0
 800b534:	461a      	mov	r2, r3
 800b536:	4b55      	ldr	r3, [pc, #340]	; (800b68c <tcp_receive+0x96c>)
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	4322      	orrs	r2, r4
 800b53c:	b292      	uxth	r2, r2
 800b53e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b544:	4b51      	ldr	r3, [pc, #324]	; (800b68c <tcp_receive+0x96c>)
 800b546:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b548:	4b50      	ldr	r3, [pc, #320]	; (800b68c <tcp_receive+0x96c>)
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	899b      	ldrh	r3, [r3, #12]
 800b54e:	b29b      	uxth	r3, r3
 800b550:	4618      	mov	r0, r3
 800b552:	f7fb fb3a 	bl	8006bca <lwip_htons>
 800b556:	4603      	mov	r3, r0
 800b558:	f003 0302 	and.w	r3, r3, #2
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d005      	beq.n	800b56c <tcp_receive+0x84c>
            inseg.len -= 1;
 800b560:	4b4a      	ldr	r3, [pc, #296]	; (800b68c <tcp_receive+0x96c>)
 800b562:	891b      	ldrh	r3, [r3, #8]
 800b564:	3b01      	subs	r3, #1
 800b566:	b29a      	uxth	r2, r3
 800b568:	4b48      	ldr	r3, [pc, #288]	; (800b68c <tcp_receive+0x96c>)
 800b56a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b56c:	4b47      	ldr	r3, [pc, #284]	; (800b68c <tcp_receive+0x96c>)
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	4a46      	ldr	r2, [pc, #280]	; (800b68c <tcp_receive+0x96c>)
 800b572:	8912      	ldrh	r2, [r2, #8]
 800b574:	4611      	mov	r1, r2
 800b576:	4618      	mov	r0, r3
 800b578:	f7fc fb84 	bl	8007c84 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b57c:	4b43      	ldr	r3, [pc, #268]	; (800b68c <tcp_receive+0x96c>)
 800b57e:	891c      	ldrh	r4, [r3, #8]
 800b580:	4b42      	ldr	r3, [pc, #264]	; (800b68c <tcp_receive+0x96c>)
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	899b      	ldrh	r3, [r3, #12]
 800b586:	b29b      	uxth	r3, r3
 800b588:	4618      	mov	r0, r3
 800b58a:	f7fb fb1e 	bl	8006bca <lwip_htons>
 800b58e:	4603      	mov	r3, r0
 800b590:	f003 0303 	and.w	r3, r3, #3
 800b594:	2b00      	cmp	r3, #0
 800b596:	d001      	beq.n	800b59c <tcp_receive+0x87c>
 800b598:	2301      	movs	r3, #1
 800b59a:	e000      	b.n	800b59e <tcp_receive+0x87e>
 800b59c:	2300      	movs	r3, #0
 800b59e:	4423      	add	r3, r4
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	4b3b      	ldr	r3, [pc, #236]	; (800b690 <tcp_receive+0x970>)
 800b5a4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b5a6:	4b3a      	ldr	r3, [pc, #232]	; (800b690 <tcp_receive+0x970>)
 800b5a8:	881b      	ldrh	r3, [r3, #0]
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	4b36      	ldr	r3, [pc, #216]	; (800b688 <tcp_receive+0x968>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	441a      	add	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b6:	6879      	ldr	r1, [r7, #4]
 800b5b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b5ba:	440b      	add	r3, r1
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d006      	beq.n	800b5ce <tcp_receive+0x8ae>
 800b5c0:	4b34      	ldr	r3, [pc, #208]	; (800b694 <tcp_receive+0x974>)
 800b5c2:	f240 527e 	movw	r2, #1406	; 0x57e
 800b5c6:	4934      	ldr	r1, [pc, #208]	; (800b698 <tcp_receive+0x978>)
 800b5c8:	4834      	ldr	r0, [pc, #208]	; (800b69c <tcp_receive+0x97c>)
 800b5ca:	f007 fa19 	bl	8012a00 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f000 80e1 	beq.w	800b79a <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b5d8:	4b2c      	ldr	r3, [pc, #176]	; (800b68c <tcp_receive+0x96c>)
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	899b      	ldrh	r3, [r3, #12]
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7fb faf2 	bl	8006bca <lwip_htons>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	f003 0301 	and.w	r3, r3, #1
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d010      	beq.n	800b612 <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b5f0:	e00a      	b.n	800b608 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5f6:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800b602:	68b8      	ldr	r0, [r7, #8]
 800b604:	f7fd fea8 	bl	8009358 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d1f0      	bne.n	800b5f2 <tcp_receive+0x8d2>
 800b610:	e0c3      	b.n	800b79a <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b616:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b618:	e04f      	b.n	800b6ba <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	899b      	ldrh	r3, [r3, #12]
 800b620:	b29b      	uxth	r3, r3
 800b622:	4618      	mov	r0, r3
 800b624:	f7fb fad1 	bl	8006bca <lwip_htons>
 800b628:	4603      	mov	r3, r0
 800b62a:	f003 0301 	and.w	r3, r3, #1
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d03b      	beq.n	800b6aa <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b632:	4b16      	ldr	r3, [pc, #88]	; (800b68c <tcp_receive+0x96c>)
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	899b      	ldrh	r3, [r3, #12]
 800b638:	b29b      	uxth	r3, r3
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7fb fac5 	bl	8006bca <lwip_htons>
 800b640:	4603      	mov	r3, r0
 800b642:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b646:	2b00      	cmp	r3, #0
 800b648:	d12f      	bne.n	800b6aa <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b64a:	4b10      	ldr	r3, [pc, #64]	; (800b68c <tcp_receive+0x96c>)
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	899b      	ldrh	r3, [r3, #12]
 800b650:	b29c      	uxth	r4, r3
 800b652:	2001      	movs	r0, #1
 800b654:	f7fb fab9 	bl	8006bca <lwip_htons>
 800b658:	4603      	mov	r3, r0
 800b65a:	461a      	mov	r2, r3
 800b65c:	4b0b      	ldr	r3, [pc, #44]	; (800b68c <tcp_receive+0x96c>)
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	4322      	orrs	r2, r4
 800b662:	b292      	uxth	r2, r2
 800b664:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b666:	4b09      	ldr	r3, [pc, #36]	; (800b68c <tcp_receive+0x96c>)
 800b668:	891c      	ldrh	r4, [r3, #8]
 800b66a:	4b08      	ldr	r3, [pc, #32]	; (800b68c <tcp_receive+0x96c>)
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	899b      	ldrh	r3, [r3, #12]
 800b670:	b29b      	uxth	r3, r3
 800b672:	4618      	mov	r0, r3
 800b674:	f7fb faa9 	bl	8006bca <lwip_htons>
 800b678:	4603      	mov	r3, r0
 800b67a:	f003 0303 	and.w	r3, r3, #3
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00e      	beq.n	800b6a0 <tcp_receive+0x980>
 800b682:	2301      	movs	r3, #1
 800b684:	e00d      	b.n	800b6a2 <tcp_receive+0x982>
 800b686:	bf00      	nop
 800b688:	20007ec4 	.word	0x20007ec4
 800b68c:	20007ea4 	.word	0x20007ea4
 800b690:	20007ece 	.word	0x20007ece
 800b694:	080173e8 	.word	0x080173e8
 800b698:	080176b4 	.word	0x080176b4
 800b69c:	0801742c 	.word	0x0801742c
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4423      	add	r3, r4
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	4b95      	ldr	r3, [pc, #596]	; (800b8fc <tcp_receive+0xbdc>)
 800b6a8:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800b6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ac:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800b6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800b6b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6b6:	f7fd fe4f 	bl	8009358 <tcp_seg_free>
            while (next &&
 800b6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d00e      	beq.n	800b6de <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b6c0:	4b8e      	ldr	r3, [pc, #568]	; (800b8fc <tcp_receive+0xbdc>)
 800b6c2:	881b      	ldrh	r3, [r3, #0]
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	4b8e      	ldr	r3, [pc, #568]	; (800b900 <tcp_receive+0xbe0>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	441a      	add	r2, r3
 800b6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6d4:	8909      	ldrh	r1, [r1, #8]
 800b6d6:	440b      	add	r3, r1
 800b6d8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	da9d      	bge.n	800b61a <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d057      	beq.n	800b794 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 800b6e4:	4b85      	ldr	r3, [pc, #532]	; (800b8fc <tcp_receive+0xbdc>)
 800b6e6:	881b      	ldrh	r3, [r3, #0]
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	4b85      	ldr	r3, [pc, #532]	; (800b900 <tcp_receive+0xbe0>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	441a      	add	r2, r3
 800b6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	dd4b      	ble.n	800b794 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fe:	68db      	ldr	r3, [r3, #12]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	b29a      	uxth	r2, r3
 800b704:	4b7e      	ldr	r3, [pc, #504]	; (800b900 <tcp_receive+0xbe0>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	b29b      	uxth	r3, r3
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	b29a      	uxth	r2, r3
 800b70e:	4b7d      	ldr	r3, [pc, #500]	; (800b904 <tcp_receive+0xbe4>)
 800b710:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b712:	4b7c      	ldr	r3, [pc, #496]	; (800b904 <tcp_receive+0xbe4>)
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	899b      	ldrh	r3, [r3, #12]
 800b718:	b29b      	uxth	r3, r3
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fb fa55 	bl	8006bca <lwip_htons>
 800b720:	4603      	mov	r3, r0
 800b722:	f003 0302 	and.w	r3, r3, #2
 800b726:	2b00      	cmp	r3, #0
 800b728:	d005      	beq.n	800b736 <tcp_receive+0xa16>
                inseg.len -= 1;
 800b72a:	4b76      	ldr	r3, [pc, #472]	; (800b904 <tcp_receive+0xbe4>)
 800b72c:	891b      	ldrh	r3, [r3, #8]
 800b72e:	3b01      	subs	r3, #1
 800b730:	b29a      	uxth	r2, r3
 800b732:	4b74      	ldr	r3, [pc, #464]	; (800b904 <tcp_receive+0xbe4>)
 800b734:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b736:	4b73      	ldr	r3, [pc, #460]	; (800b904 <tcp_receive+0xbe4>)
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	4a72      	ldr	r2, [pc, #456]	; (800b904 <tcp_receive+0xbe4>)
 800b73c:	8912      	ldrh	r2, [r2, #8]
 800b73e:	4611      	mov	r1, r2
 800b740:	4618      	mov	r0, r3
 800b742:	f7fc fa9f 	bl	8007c84 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b746:	4b6f      	ldr	r3, [pc, #444]	; (800b904 <tcp_receive+0xbe4>)
 800b748:	891c      	ldrh	r4, [r3, #8]
 800b74a:	4b6e      	ldr	r3, [pc, #440]	; (800b904 <tcp_receive+0xbe4>)
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	899b      	ldrh	r3, [r3, #12]
 800b750:	b29b      	uxth	r3, r3
 800b752:	4618      	mov	r0, r3
 800b754:	f7fb fa39 	bl	8006bca <lwip_htons>
 800b758:	4603      	mov	r3, r0
 800b75a:	f003 0303 	and.w	r3, r3, #3
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d001      	beq.n	800b766 <tcp_receive+0xa46>
 800b762:	2301      	movs	r3, #1
 800b764:	e000      	b.n	800b768 <tcp_receive+0xa48>
 800b766:	2300      	movs	r3, #0
 800b768:	4423      	add	r3, r4
 800b76a:	b29a      	uxth	r2, r3
 800b76c:	4b63      	ldr	r3, [pc, #396]	; (800b8fc <tcp_receive+0xbdc>)
 800b76e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b770:	4b62      	ldr	r3, [pc, #392]	; (800b8fc <tcp_receive+0xbdc>)
 800b772:	881b      	ldrh	r3, [r3, #0]
 800b774:	461a      	mov	r2, r3
 800b776:	4b62      	ldr	r3, [pc, #392]	; (800b900 <tcp_receive+0xbe0>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	441a      	add	r2, r3
 800b77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	429a      	cmp	r2, r3
 800b784:	d006      	beq.n	800b794 <tcp_receive+0xa74>
 800b786:	4b60      	ldr	r3, [pc, #384]	; (800b908 <tcp_receive+0xbe8>)
 800b788:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800b78c:	495f      	ldr	r1, [pc, #380]	; (800b90c <tcp_receive+0xbec>)
 800b78e:	4860      	ldr	r0, [pc, #384]	; (800b910 <tcp_receive+0xbf0>)
 800b790:	f007 f936 	bl	8012a00 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b798:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b79a:	4b58      	ldr	r3, [pc, #352]	; (800b8fc <tcp_receive+0xbdc>)
 800b79c:	881b      	ldrh	r3, [r3, #0]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	4b57      	ldr	r3, [pc, #348]	; (800b900 <tcp_receive+0xbe0>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	441a      	add	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b7ae:	4b53      	ldr	r3, [pc, #332]	; (800b8fc <tcp_receive+0xbdc>)
 800b7b0:	881b      	ldrh	r3, [r3, #0]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d206      	bcs.n	800b7c4 <tcp_receive+0xaa4>
 800b7b6:	4b54      	ldr	r3, [pc, #336]	; (800b908 <tcp_receive+0xbe8>)
 800b7b8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b7bc:	4955      	ldr	r1, [pc, #340]	; (800b914 <tcp_receive+0xbf4>)
 800b7be:	4854      	ldr	r0, [pc, #336]	; (800b910 <tcp_receive+0xbf0>)
 800b7c0:	f007 f91e 	bl	8012a00 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b7c8:	4b4c      	ldr	r3, [pc, #304]	; (800b8fc <tcp_receive+0xbdc>)
 800b7ca:	881b      	ldrh	r3, [r3, #0]
 800b7cc:	1ad3      	subs	r3, r2, r3
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f7fd f973 	bl	8008ac0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b7da:	4b4a      	ldr	r3, [pc, #296]	; (800b904 <tcp_receive+0xbe4>)
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	891b      	ldrh	r3, [r3, #8]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d006      	beq.n	800b7f2 <tcp_receive+0xad2>
          recv_data = inseg.p;
 800b7e4:	4b47      	ldr	r3, [pc, #284]	; (800b904 <tcp_receive+0xbe4>)
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	4a4b      	ldr	r2, [pc, #300]	; (800b918 <tcp_receive+0xbf8>)
 800b7ea:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b7ec:	4b45      	ldr	r3, [pc, #276]	; (800b904 <tcp_receive+0xbe4>)
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b7f2:	4b44      	ldr	r3, [pc, #272]	; (800b904 <tcp_receive+0xbe4>)
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	899b      	ldrh	r3, [r3, #12]
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7fb f9e5 	bl	8006bca <lwip_htons>
 800b800:	4603      	mov	r3, r0
 800b802:	f003 0301 	and.w	r3, r3, #1
 800b806:	2b00      	cmp	r3, #0
 800b808:	f000 80b4 	beq.w	800b974 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b80c:	4b43      	ldr	r3, [pc, #268]	; (800b91c <tcp_receive+0xbfc>)
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	f043 0320 	orr.w	r3, r3, #32
 800b814:	b2da      	uxtb	r2, r3
 800b816:	4b41      	ldr	r3, [pc, #260]	; (800b91c <tcp_receive+0xbfc>)
 800b818:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b81a:	e0ab      	b.n	800b974 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b820:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	4a35      	ldr	r2, [pc, #212]	; (800b900 <tcp_receive+0xbe0>)
 800b82c:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	891b      	ldrh	r3, [r3, #8]
 800b832:	461c      	mov	r4, r3
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	899b      	ldrh	r3, [r3, #12]
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7fb f9c4 	bl	8006bca <lwip_htons>
 800b842:	4603      	mov	r3, r0
 800b844:	f003 0303 	and.w	r3, r3, #3
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d001      	beq.n	800b850 <tcp_receive+0xb30>
 800b84c:	2301      	movs	r3, #1
 800b84e:	e000      	b.n	800b852 <tcp_receive+0xb32>
 800b850:	2300      	movs	r3, #0
 800b852:	191a      	adds	r2, r3, r4
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b858:	441a      	add	r2, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b862:	461c      	mov	r4, r3
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	891b      	ldrh	r3, [r3, #8]
 800b868:	461d      	mov	r5, r3
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	899b      	ldrh	r3, [r3, #12]
 800b870:	b29b      	uxth	r3, r3
 800b872:	4618      	mov	r0, r3
 800b874:	f7fb f9a9 	bl	8006bca <lwip_htons>
 800b878:	4603      	mov	r3, r0
 800b87a:	f003 0303 	and.w	r3, r3, #3
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d001      	beq.n	800b886 <tcp_receive+0xb66>
 800b882:	2301      	movs	r3, #1
 800b884:	e000      	b.n	800b888 <tcp_receive+0xb68>
 800b886:	2300      	movs	r3, #0
 800b888:	442b      	add	r3, r5
 800b88a:	429c      	cmp	r4, r3
 800b88c:	d206      	bcs.n	800b89c <tcp_receive+0xb7c>
 800b88e:	4b1e      	ldr	r3, [pc, #120]	; (800b908 <tcp_receive+0xbe8>)
 800b890:	f240 52dd 	movw	r2, #1501	; 0x5dd
 800b894:	4922      	ldr	r1, [pc, #136]	; (800b920 <tcp_receive+0xc00>)
 800b896:	481e      	ldr	r0, [pc, #120]	; (800b910 <tcp_receive+0xbf0>)
 800b898:	f007 f8b2 	bl	8012a00 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	891b      	ldrh	r3, [r3, #8]
 800b8a0:	461c      	mov	r4, r3
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	899b      	ldrh	r3, [r3, #12]
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fb f98d 	bl	8006bca <lwip_htons>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	f003 0303 	and.w	r3, r3, #3
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d001      	beq.n	800b8be <tcp_receive+0xb9e>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e000      	b.n	800b8c0 <tcp_receive+0xba0>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	1919      	adds	r1, r3, r4
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b8c6:	b28b      	uxth	r3, r1
 800b8c8:	1ad3      	subs	r3, r2, r3
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f7fd f8f5 	bl	8008ac0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	891b      	ldrh	r3, [r3, #8]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d028      	beq.n	800b932 <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b8e0:	4b0d      	ldr	r3, [pc, #52]	; (800b918 <tcp_receive+0xbf8>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d01d      	beq.n	800b924 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 800b8e8:	4b0b      	ldr	r3, [pc, #44]	; (800b918 <tcp_receive+0xbf8>)
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	4610      	mov	r0, r2
 800b8f4:	f7fc fc06 	bl	8008104 <pbuf_cat>
 800b8f8:	e018      	b.n	800b92c <tcp_receive+0xc0c>
 800b8fa:	bf00      	nop
 800b8fc:	20007ece 	.word	0x20007ece
 800b900:	20007ec4 	.word	0x20007ec4
 800b904:	20007ea4 	.word	0x20007ea4
 800b908:	080173e8 	.word	0x080173e8
 800b90c:	080176ec 	.word	0x080176ec
 800b910:	0801742c 	.word	0x0801742c
 800b914:	08017728 	.word	0x08017728
 800b918:	20007ed4 	.word	0x20007ed4
 800b91c:	20007ed1 	.word	0x20007ed1
 800b920:	08017748 	.word	0x08017748
            } else {
              recv_data = cseg->p;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	4a71      	ldr	r2, [pc, #452]	; (800baf0 <tcp_receive+0xdd0>)
 800b92a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2200      	movs	r2, #0
 800b930:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	899b      	ldrh	r3, [r3, #12]
 800b938:	b29b      	uxth	r3, r3
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fb f945 	bl	8006bca <lwip_htons>
 800b940:	4603      	mov	r3, r0
 800b942:	f003 0301 	and.w	r3, r3, #1
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00d      	beq.n	800b966 <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b94a:	4b6a      	ldr	r3, [pc, #424]	; (800baf4 <tcp_receive+0xdd4>)
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	f043 0320 	orr.w	r3, r3, #32
 800b952:	b2da      	uxtb	r2, r3
 800b954:	4b67      	ldr	r3, [pc, #412]	; (800baf4 <tcp_receive+0xdd4>)
 800b956:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	7d1b      	ldrb	r3, [r3, #20]
 800b95c:	2b04      	cmp	r3, #4
 800b95e:	d102      	bne.n	800b966 <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2207      	movs	r2, #7
 800b964:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	f7fd fcf2 	bl	8009358 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d008      	beq.n	800b98e <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b980:	68db      	ldr	r3, [r3, #12]
 800b982:	685a      	ldr	r2, [r3, #4]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b988:	429a      	cmp	r2, r3
 800b98a:	f43f af47 	beq.w	800b81c <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	7e9b      	ldrb	r3, [r3, #26]
 800b992:	f003 0301 	and.w	r3, r3, #1
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00e      	beq.n	800b9b8 <tcp_receive+0xc98>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	7e9b      	ldrb	r3, [r3, #26]
 800b99e:	f023 0301 	bic.w	r3, r3, #1
 800b9a2:	b2da      	uxtb	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	769a      	strb	r2, [r3, #26]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	7e9b      	ldrb	r3, [r3, #26]
 800b9ac:	f043 0302 	orr.w	r3, r3, #2
 800b9b0:	b2da      	uxtb	r2, r3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b9b6:	e181      	b.n	800bcbc <tcp_receive+0xf9c>
        tcp_ack(pcb);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	7e9b      	ldrb	r3, [r3, #26]
 800b9bc:	f043 0301 	orr.w	r3, r3, #1
 800b9c0:	b2da      	uxtb	r2, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b9c6:	e179      	b.n	800bcbc <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 fcb5 	bl	800c338 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d106      	bne.n	800b9e4 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b9d6:	4848      	ldr	r0, [pc, #288]	; (800baf8 <tcp_receive+0xdd8>)
 800b9d8:	f7fd fcd6 	bl	8009388 <tcp_seg_copy>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800b9e2:	e16b      	b.n	800bcbc <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9ee:	e150      	b.n	800bc92 <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 800b9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	685a      	ldr	r2, [r3, #4]
 800b9f6:	4b41      	ldr	r3, [pc, #260]	; (800bafc <tcp_receive+0xddc>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d11d      	bne.n	800ba3a <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b9fe:	4b3e      	ldr	r3, [pc, #248]	; (800baf8 <tcp_receive+0xdd8>)
 800ba00:	891a      	ldrh	r2, [r3, #8]
 800ba02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba04:	891b      	ldrh	r3, [r3, #8]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	f240 8148 	bls.w	800bc9c <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800ba0c:	483a      	ldr	r0, [pc, #232]	; (800baf8 <tcp_receive+0xdd8>)
 800ba0e:	f7fd fcbb 	bl	8009388 <tcp_seg_copy>
 800ba12:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f000 8142 	beq.w	800bca0 <tcp_receive+0xf80>
                  if (prev != NULL) {
 800ba1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d003      	beq.n	800ba2a <tcp_receive+0xd0a>
                    prev->next = cseg;
 800ba22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	601a      	str	r2, [r3, #0]
 800ba28:	e002      	b.n	800ba30 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ba30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f7ff f8fe 	bl	800ac34 <tcp_oos_insert_segment>
                }
                break;
 800ba38:	e132      	b.n	800bca0 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ba3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d117      	bne.n	800ba70 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ba40:	4b2e      	ldr	r3, [pc, #184]	; (800bafc <tcp_receive+0xddc>)
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	1ad3      	subs	r3, r2, r3
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	da57      	bge.n	800bb00 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800ba50:	4829      	ldr	r0, [pc, #164]	; (800baf8 <tcp_receive+0xdd8>)
 800ba52:	f7fd fc99 	bl	8009388 <tcp_seg_copy>
 800ba56:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f000 8122 	beq.w	800bca4 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	68fa      	ldr	r2, [r7, #12]
 800ba64:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800ba66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f7ff f8e3 	bl	800ac34 <tcp_oos_insert_segment>
                  }
                  break;
 800ba6e:	e119      	b.n	800bca4 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800ba70:	4b22      	ldr	r3, [pc, #136]	; (800bafc <tcp_receive+0xddc>)
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	1ad3      	subs	r3, r2, r3
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	db3e      	blt.n	800bb00 <tcp_receive+0xde0>
 800ba82:	4b1e      	ldr	r3, [pc, #120]	; (800bafc <tcp_receive+0xddc>)
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	1ad3      	subs	r3, r2, r3
 800ba8e:	3301      	adds	r3, #1
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	dc35      	bgt.n	800bb00 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800ba94:	4818      	ldr	r0, [pc, #96]	; (800baf8 <tcp_receive+0xdd8>)
 800ba96:	f7fd fc77 	bl	8009388 <tcp_seg_copy>
 800ba9a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 8102 	beq.w	800bca8 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800baa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baac:	8912      	ldrh	r2, [r2, #8]
 800baae:	441a      	add	r2, r3
 800bab0:	4b12      	ldr	r3, [pc, #72]	; (800bafc <tcp_receive+0xddc>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	dd12      	ble.n	800bae0 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800baba:	4b10      	ldr	r3, [pc, #64]	; (800bafc <tcp_receive+0xddc>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	b29a      	uxth	r2, r3
 800bac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	1ad3      	subs	r3, r2, r3
 800baca:	b29a      	uxth	r2, r3
 800bacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bace:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad2:	685a      	ldr	r2, [r3, #4]
 800bad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad6:	891b      	ldrh	r3, [r3, #8]
 800bad8:	4619      	mov	r1, r3
 800bada:	4610      	mov	r0, r2
 800badc:	f7fc f8d2 	bl	8007c84 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800bae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	f7ff f8a3 	bl	800ac34 <tcp_oos_insert_segment>
                  }
                  break;
 800baee:	e0db      	b.n	800bca8 <tcp_receive+0xf88>
 800baf0:	20007ed4 	.word	0x20007ed4
 800baf4:	20007ed1 	.word	0x20007ed1
 800baf8:	20007ea4 	.word	0x20007ea4
 800bafc:	20007ec4 	.word	0x20007ec4
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f040 80bf 	bne.w	800bc88 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800bb0a:	4b7c      	ldr	r3, [pc, #496]	; (800bcfc <tcp_receive+0xfdc>)
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	f340 80b6 	ble.w	800bc88 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	899b      	ldrh	r3, [r3, #12]
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7fb f850 	bl	8006bca <lwip_htons>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	f003 0301 	and.w	r3, r3, #1
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f040 80bb 	bne.w	800bcac <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800bb36:	4872      	ldr	r0, [pc, #456]	; (800bd00 <tcp_receive+0xfe0>)
 800bb38:	f7fd fc26 	bl	8009388 <tcp_seg_copy>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb40:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	f000 80b2 	beq.w	800bcb0 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb54:	8912      	ldrh	r2, [r2, #8]
 800bb56:	441a      	add	r2, r3
 800bb58:	4b68      	ldr	r3, [pc, #416]	; (800bcfc <tcp_receive+0xfdc>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	dd12      	ble.n	800bb88 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bb62:	4b66      	ldr	r3, [pc, #408]	; (800bcfc <tcp_receive+0xfdc>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	1ad3      	subs	r3, r2, r3
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb76:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb7a:	685a      	ldr	r2, [r3, #4]
 800bb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb7e:	891b      	ldrh	r3, [r3, #8]
 800bb80:	4619      	mov	r1, r3
 800bb82:	4610      	mov	r0, r2
 800bb84:	f7fc f87e 	bl	8007c84 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bb88:	4b5e      	ldr	r3, [pc, #376]	; (800bd04 <tcp_receive+0xfe4>)
 800bb8a:	881b      	ldrh	r3, [r3, #0]
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	4b5b      	ldr	r3, [pc, #364]	; (800bcfc <tcp_receive+0xfdc>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	441a      	add	r2, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb98:	6879      	ldr	r1, [r7, #4]
 800bb9a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bb9c:	440b      	add	r3, r1
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f340 8085 	ble.w	800bcb0 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	899b      	ldrh	r3, [r3, #12]
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7fb f80a 	bl	8006bca <lwip_htons>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	f003 0301 	and.w	r3, r3, #1
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d01e      	beq.n	800bbfe <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	899b      	ldrh	r3, [r3, #12]
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bbce:	b29c      	uxth	r4, r3
 800bbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	899b      	ldrh	r3, [r3, #12]
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7fa fff5 	bl	8006bca <lwip_htons>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7fa ffee 	bl	8006bca <lwip_htons>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	4322      	orrs	r2, r4
 800bbfa:	b292      	uxth	r2, r2
 800bbfc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc02:	b29a      	uxth	r2, r3
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc08:	4413      	add	r3, r2
 800bc0a:	b299      	uxth	r1, r3
 800bc0c:	4b3b      	ldr	r3, [pc, #236]	; (800bcfc <tcp_receive+0xfdc>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	b29a      	uxth	r2, r3
 800bc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	1a8a      	subs	r2, r1, r2
 800bc18:	b292      	uxth	r2, r2
 800bc1a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	685a      	ldr	r2, [r3, #4]
 800bc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	891b      	ldrh	r3, [r3, #8]
 800bc28:	4619      	mov	r1, r3
 800bc2a:	4610      	mov	r0, r2
 800bc2c:	f7fc f82a 	bl	8007c84 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	891c      	ldrh	r4, [r3, #8]
 800bc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	899b      	ldrh	r3, [r3, #12]
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7fa ffc2 	bl	8006bca <lwip_htons>
 800bc46:	4603      	mov	r3, r0
 800bc48:	f003 0303 	and.w	r3, r3, #3
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d001      	beq.n	800bc54 <tcp_receive+0xf34>
 800bc50:	2301      	movs	r3, #1
 800bc52:	e000      	b.n	800bc56 <tcp_receive+0xf36>
 800bc54:	2300      	movs	r3, #0
 800bc56:	4423      	add	r3, r4
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	4b2a      	ldr	r3, [pc, #168]	; (800bd04 <tcp_receive+0xfe4>)
 800bc5c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bc5e:	4b29      	ldr	r3, [pc, #164]	; (800bd04 <tcp_receive+0xfe4>)
 800bc60:	881b      	ldrh	r3, [r3, #0]
 800bc62:	461a      	mov	r2, r3
 800bc64:	4b25      	ldr	r3, [pc, #148]	; (800bcfc <tcp_receive+0xfdc>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	441a      	add	r2, r3
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6e:	6879      	ldr	r1, [r7, #4]
 800bc70:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bc72:	440b      	add	r3, r1
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d01b      	beq.n	800bcb0 <tcp_receive+0xf90>
 800bc78:	4b23      	ldr	r3, [pc, #140]	; (800bd08 <tcp_receive+0xfe8>)
 800bc7a:	f240 627a 	movw	r2, #1658	; 0x67a
 800bc7e:	4923      	ldr	r1, [pc, #140]	; (800bd0c <tcp_receive+0xfec>)
 800bc80:	4823      	ldr	r0, [pc, #140]	; (800bd10 <tcp_receive+0xff0>)
 800bc82:	f006 febd 	bl	8012a00 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bc86:	e013      	b.n	800bcb0 <tcp_receive+0xf90>
              }
            }
            prev = next;
 800bc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f47f aeab 	bne.w	800b9f0 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 800bc9a:	e00f      	b.n	800bcbc <tcp_receive+0xf9c>
                break;
 800bc9c:	bf00      	nop
 800bc9e:	e00d      	b.n	800bcbc <tcp_receive+0xf9c>
                break;
 800bca0:	bf00      	nop
 800bca2:	e00b      	b.n	800bcbc <tcp_receive+0xf9c>
                  break;
 800bca4:	bf00      	nop
 800bca6:	e009      	b.n	800bcbc <tcp_receive+0xf9c>
                  break;
 800bca8:	bf00      	nop
 800bcaa:	e007      	b.n	800bcbc <tcp_receive+0xf9c>
                  break;
 800bcac:	bf00      	nop
 800bcae:	e005      	b.n	800bcbc <tcp_receive+0xf9c>
                break;
 800bcb0:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800bcb2:	e003      	b.n	800bcbc <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 fb3f 	bl	800c338 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bcba:	e01a      	b.n	800bcf2 <tcp_receive+0xfd2>
 800bcbc:	e019      	b.n	800bcf2 <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bcbe:	4b0f      	ldr	r3, [pc, #60]	; (800bcfc <tcp_receive+0xfdc>)
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc6:	1ad3      	subs	r3, r2, r3
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	db0a      	blt.n	800bce2 <tcp_receive+0xfc2>
 800bccc:	4b0b      	ldr	r3, [pc, #44]	; (800bcfc <tcp_receive+0xfdc>)
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd4:	6879      	ldr	r1, [r7, #4]
 800bcd6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bcd8:	440b      	add	r3, r1
 800bcda:	1ad3      	subs	r3, r2, r3
 800bcdc:	3301      	adds	r3, #1
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	dd07      	ble.n	800bcf2 <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	7e9b      	ldrb	r3, [r3, #26]
 800bce6:	f043 0302 	orr.w	r3, r3, #2
 800bcea:	b2da      	uxtb	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800bcf0:	e7ff      	b.n	800bcf2 <tcp_receive+0xfd2>
 800bcf2:	bf00      	nop
 800bcf4:	3734      	adds	r7, #52	; 0x34
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20007ec4 	.word	0x20007ec4
 800bd00:	20007ea4 	.word	0x20007ea4
 800bd04:	20007ece 	.word	0x20007ece
 800bd08:	080173e8 	.word	0x080173e8
 800bd0c:	080176b4 	.word	0x080176b4
 800bd10:	0801742c 	.word	0x0801742c

0800bd14 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800bd1a:	4b17      	ldr	r3, [pc, #92]	; (800bd78 <tcp_getoptbyte+0x64>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d005      	beq.n	800bd2e <tcp_getoptbyte+0x1a>
 800bd22:	4b16      	ldr	r3, [pc, #88]	; (800bd7c <tcp_getoptbyte+0x68>)
 800bd24:	881a      	ldrh	r2, [r3, #0]
 800bd26:	4b16      	ldr	r3, [pc, #88]	; (800bd80 <tcp_getoptbyte+0x6c>)
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d20e      	bcs.n	800bd4c <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800bd2e:	4b15      	ldr	r3, [pc, #84]	; (800bd84 <tcp_getoptbyte+0x70>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	3314      	adds	r3, #20
 800bd34:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800bd36:	4b11      	ldr	r3, [pc, #68]	; (800bd7c <tcp_getoptbyte+0x68>)
 800bd38:	881b      	ldrh	r3, [r3, #0]
 800bd3a:	1c5a      	adds	r2, r3, #1
 800bd3c:	b291      	uxth	r1, r2
 800bd3e:	4a0f      	ldr	r2, [pc, #60]	; (800bd7c <tcp_getoptbyte+0x68>)
 800bd40:	8011      	strh	r1, [r2, #0]
 800bd42:	461a      	mov	r2, r3
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	4413      	add	r3, r2
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	e010      	b.n	800bd6e <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800bd4c:	4b0b      	ldr	r3, [pc, #44]	; (800bd7c <tcp_getoptbyte+0x68>)
 800bd4e:	881b      	ldrh	r3, [r3, #0]
 800bd50:	1c5a      	adds	r2, r3, #1
 800bd52:	b291      	uxth	r1, r2
 800bd54:	4a09      	ldr	r2, [pc, #36]	; (800bd7c <tcp_getoptbyte+0x68>)
 800bd56:	8011      	strh	r1, [r2, #0]
 800bd58:	b2da      	uxtb	r2, r3
 800bd5a:	4b09      	ldr	r3, [pc, #36]	; (800bd80 <tcp_getoptbyte+0x6c>)
 800bd5c:	881b      	ldrh	r3, [r3, #0]
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	1ad3      	subs	r3, r2, r3
 800bd62:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800bd64:	4b04      	ldr	r3, [pc, #16]	; (800bd78 <tcp_getoptbyte+0x64>)
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	79fb      	ldrb	r3, [r7, #7]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	370c      	adds	r7, #12
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bc80      	pop	{r7}
 800bd76:	4770      	bx	lr
 800bd78:	20007ebc 	.word	0x20007ebc
 800bd7c:	20007ec0 	.word	0x20007ec0
 800bd80:	20007eba 	.word	0x20007eba
 800bd84:	20007eb4 	.word	0x20007eb4

0800bd88 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bd90:	4b2e      	ldr	r3, [pc, #184]	; (800be4c <tcp_parseopt+0xc4>)
 800bd92:	881b      	ldrh	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d055      	beq.n	800be44 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bd98:	4b2d      	ldr	r3, [pc, #180]	; (800be50 <tcp_parseopt+0xc8>)
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	801a      	strh	r2, [r3, #0]
 800bd9e:	e045      	b.n	800be2c <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 800bda0:	f7ff ffb8 	bl	800bd14 <tcp_getoptbyte>
 800bda4:	4603      	mov	r3, r0
 800bda6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800bda8:	7bfb      	ldrb	r3, [r7, #15]
 800bdaa:	2b02      	cmp	r3, #2
 800bdac:	d006      	beq.n	800bdbc <tcp_parseopt+0x34>
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	dc2b      	bgt.n	800be0a <tcp_parseopt+0x82>
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d041      	beq.n	800be3a <tcp_parseopt+0xb2>
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d127      	bne.n	800be0a <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 800bdba:	e037      	b.n	800be2c <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800bdbc:	f7ff ffaa 	bl	800bd14 <tcp_getoptbyte>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b04      	cmp	r3, #4
 800bdc4:	d13b      	bne.n	800be3e <tcp_parseopt+0xb6>
 800bdc6:	4b22      	ldr	r3, [pc, #136]	; (800be50 <tcp_parseopt+0xc8>)
 800bdc8:	881b      	ldrh	r3, [r3, #0]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	4a1f      	ldr	r2, [pc, #124]	; (800be4c <tcp_parseopt+0xc4>)
 800bdce:	8812      	ldrh	r2, [r2, #0]
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	da34      	bge.n	800be3e <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800bdd4:	f7ff ff9e 	bl	800bd14 <tcp_getoptbyte>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	021b      	lsls	r3, r3, #8
 800bdde:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800bde0:	f7ff ff98 	bl	800bd14 <tcp_getoptbyte>
 800bde4:	4603      	mov	r3, r0
 800bde6:	b29a      	uxth	r2, r3
 800bde8:	89bb      	ldrh	r3, [r7, #12]
 800bdea:	4313      	orrs	r3, r2
 800bdec:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bdee:	89bb      	ldrh	r3, [r7, #12]
 800bdf0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bdf4:	d804      	bhi.n	800be00 <tcp_parseopt+0x78>
 800bdf6:	89bb      	ldrh	r3, [r7, #12]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d001      	beq.n	800be00 <tcp_parseopt+0x78>
 800bdfc:	89ba      	ldrh	r2, [r7, #12]
 800bdfe:	e001      	b.n	800be04 <tcp_parseopt+0x7c>
 800be00:	f44f 7206 	mov.w	r2, #536	; 0x218
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800be08:	e010      	b.n	800be2c <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800be0a:	f7ff ff83 	bl	800bd14 <tcp_getoptbyte>
 800be0e:	4603      	mov	r3, r0
 800be10:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800be12:	7afb      	ldrb	r3, [r7, #11]
 800be14:	2b01      	cmp	r3, #1
 800be16:	d914      	bls.n	800be42 <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800be18:	7afb      	ldrb	r3, [r7, #11]
 800be1a:	b29a      	uxth	r2, r3
 800be1c:	4b0c      	ldr	r3, [pc, #48]	; (800be50 <tcp_parseopt+0xc8>)
 800be1e:	881b      	ldrh	r3, [r3, #0]
 800be20:	4413      	add	r3, r2
 800be22:	b29b      	uxth	r3, r3
 800be24:	3b02      	subs	r3, #2
 800be26:	b29a      	uxth	r2, r3
 800be28:	4b09      	ldr	r3, [pc, #36]	; (800be50 <tcp_parseopt+0xc8>)
 800be2a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800be2c:	4b08      	ldr	r3, [pc, #32]	; (800be50 <tcp_parseopt+0xc8>)
 800be2e:	881a      	ldrh	r2, [r3, #0]
 800be30:	4b06      	ldr	r3, [pc, #24]	; (800be4c <tcp_parseopt+0xc4>)
 800be32:	881b      	ldrh	r3, [r3, #0]
 800be34:	429a      	cmp	r2, r3
 800be36:	d3b3      	bcc.n	800bda0 <tcp_parseopt+0x18>
 800be38:	e004      	b.n	800be44 <tcp_parseopt+0xbc>
        return;
 800be3a:	bf00      	nop
 800be3c:	e002      	b.n	800be44 <tcp_parseopt+0xbc>
          return;
 800be3e:	bf00      	nop
 800be40:	e000      	b.n	800be44 <tcp_parseopt+0xbc>
          return;
 800be42:	bf00      	nop
      }
    }
  }
}
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	20007eb8 	.word	0x20007eb8
 800be50:	20007ec0 	.word	0x20007ec0

0800be54 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800be54:	b480      	push	{r7}
 800be56:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800be58:	4b05      	ldr	r3, [pc, #20]	; (800be70 <tcp_trigger_input_pcb_close+0x1c>)
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	f043 0310 	orr.w	r3, r3, #16
 800be60:	b2da      	uxtb	r2, r3
 800be62:	4b03      	ldr	r3, [pc, #12]	; (800be70 <tcp_trigger_input_pcb_close+0x1c>)
 800be64:	701a      	strb	r2, [r3, #0]
}
 800be66:	bf00      	nop
 800be68:	46bd      	mov	sp, r7
 800be6a:	bc80      	pop	{r7}
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop
 800be70:	20007ed1 	.word	0x20007ed1

0800be74 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	607b      	str	r3, [r7, #4]
 800be7e:	460b      	mov	r3, r1
 800be80:	817b      	strh	r3, [r7, #10]
 800be82:	4613      	mov	r3, r2
 800be84:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800be86:	897a      	ldrh	r2, [r7, #10]
 800be88:	893b      	ldrh	r3, [r7, #8]
 800be8a:	4413      	add	r3, r2
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	3314      	adds	r3, #20
 800be90:	b29b      	uxth	r3, r3
 800be92:	2200      	movs	r2, #0
 800be94:	4619      	mov	r1, r3
 800be96:	2001      	movs	r0, #1
 800be98:	f7fb fcf0 	bl	800787c <pbuf_alloc>
 800be9c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d056      	beq.n	800bf52 <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800bea4:	897b      	ldrh	r3, [r7, #10]
 800bea6:	3313      	adds	r3, #19
 800bea8:	697a      	ldr	r2, [r7, #20]
 800beaa:	8952      	ldrh	r2, [r2, #10]
 800beac:	4293      	cmp	r3, r2
 800beae:	db05      	blt.n	800bebc <tcp_output_alloc_header+0x48>
 800beb0:	4b2a      	ldr	r3, [pc, #168]	; (800bf5c <tcp_output_alloc_header+0xe8>)
 800beb2:	2272      	movs	r2, #114	; 0x72
 800beb4:	492a      	ldr	r1, [pc, #168]	; (800bf60 <tcp_output_alloc_header+0xec>)
 800beb6:	482b      	ldr	r0, [pc, #172]	; (800bf64 <tcp_output_alloc_header+0xf0>)
 800beb8:	f006 fda2 	bl	8012a00 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	8adb      	ldrh	r3, [r3, #22]
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7fa fe7f 	bl	8006bca <lwip_htons>
 800becc:	4603      	mov	r3, r0
 800bece:	461a      	mov	r2, r3
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	8b1b      	ldrh	r3, [r3, #24]
 800bed8:	4618      	mov	r0, r3
 800beda:	f7fa fe76 	bl	8006bca <lwip_htons>
 800bede:	4603      	mov	r3, r0
 800bee0:	461a      	mov	r2, r3
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7fa fe77 	bl	8006be4 <lwip_htonl>
 800bef6:	4602      	mov	r2, r0
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800befc:	897b      	ldrh	r3, [r7, #10]
 800befe:	089b      	lsrs	r3, r3, #2
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	3305      	adds	r3, #5
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	031b      	lsls	r3, r3, #12
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	f043 0310 	orr.w	r3, r3, #16
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7fa fe5a 	bl	8006bca <lwip_htons>
 800bf16:	4603      	mov	r3, r0
 800bf18:	461a      	mov	r2, r3
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fa fe51 	bl	8006bca <lwip_htons>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	2200      	movs	r2, #0
 800bf34:	741a      	strb	r2, [r3, #16]
 800bf36:	2200      	movs	r2, #0
 800bf38:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	749a      	strb	r2, [r3, #18]
 800bf40:	2200      	movs	r2, #0
 800bf42:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bf4c:	441a      	add	r2, r3
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800bf52:	697b      	ldr	r3, [r7, #20]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3718      	adds	r7, #24
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	08017770 	.word	0x08017770
 800bf60:	080177a4 	.word	0x080177a4
 800bf64:	080177d4 	.word	0x080177d4

0800bf68 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800bf68:	b590      	push	{r4, r7, lr}
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d02d      	beq.n	800bfd4 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf7c:	60fb      	str	r3, [r7, #12]
 800bf7e:	e002      	b.n	800bf86 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1f8      	bne.n	800bf80 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	899b      	ldrh	r3, [r3, #12]
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7fa fe17 	bl	8006bca <lwip_htons>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	f003 0307 	and.w	r3, r3, #7
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d116      	bne.n	800bfd4 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	899b      	ldrh	r3, [r3, #12]
 800bfac:	b29c      	uxth	r4, r3
 800bfae:	2001      	movs	r0, #1
 800bfb0:	f7fa fe0b 	bl	8006bca <lwip_htons>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	4322      	orrs	r2, r4
 800bfbe:	b292      	uxth	r2, r2
 800bfc0:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	7e9b      	ldrb	r3, [r3, #26]
 800bfc6:	f043 0320 	orr.w	r3, r3, #32
 800bfca:	b2da      	uxtb	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	e004      	b.n	800bfde <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bfd4:	2101      	movs	r1, #1
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 f898 	bl	800c10c <tcp_enqueue_flags>
 800bfdc:	4603      	mov	r3, r0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3714      	adds	r7, #20
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd90      	pop	{r4, r7, pc}
	...

0800bfe8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800bfe8:	b590      	push	{r4, r7, lr}
 800bfea:	b087      	sub	sp, #28
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	603b      	str	r3, [r7, #0]
 800bff4:	4613      	mov	r3, r2
 800bff6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bff8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	f003 0304 	and.w	r3, r3, #4
 800c004:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c006:	2003      	movs	r0, #3
 800c008:	f7fb fa20 	bl	800744c <memp_malloc>
 800c00c:	6138      	str	r0, [r7, #16]
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d104      	bne.n	800c01e <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c014:	68b8      	ldr	r0, [r7, #8]
 800c016:	f7fb ffa9 	bl	8007f6c <pbuf_free>
    return NULL;
 800c01a:	2300      	movs	r3, #0
 800c01c:	e069      	b.n	800c0f2 <tcp_create_segment+0x10a>
  }
  seg->flags = optflags;
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c024:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	2200      	movs	r2, #0
 800c02a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	68ba      	ldr	r2, [r7, #8]
 800c030:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	891a      	ldrh	r2, [r3, #8]
 800c036:	7dfb      	ldrb	r3, [r7, #23]
 800c038:	b29b      	uxth	r3, r3
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d205      	bcs.n	800c04a <tcp_create_segment+0x62>
 800c03e:	4b2f      	ldr	r3, [pc, #188]	; (800c0fc <tcp_create_segment+0x114>)
 800c040:	22ba      	movs	r2, #186	; 0xba
 800c042:	492f      	ldr	r1, [pc, #188]	; (800c100 <tcp_create_segment+0x118>)
 800c044:	482f      	ldr	r0, [pc, #188]	; (800c104 <tcp_create_segment+0x11c>)
 800c046:	f006 fcdb 	bl	8012a00 <iprintf>
  seg->len = p->tot_len - optlen;
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	891a      	ldrh	r2, [r3, #8]
 800c04e:	7dfb      	ldrb	r3, [r7, #23]
 800c050:	b29b      	uxth	r3, r3
 800c052:	1ad3      	subs	r3, r2, r3
 800c054:	b29a      	uxth	r2, r3
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800c05a:	2114      	movs	r1, #20
 800c05c:	68b8      	ldr	r0, [r7, #8]
 800c05e:	f7fb ff61 	bl	8007f24 <pbuf_header>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d00c      	beq.n	800c082 <tcp_create_segment+0x9a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 800c068:	4b27      	ldr	r3, [pc, #156]	; (800c108 <tcp_create_segment+0x120>)
 800c06a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800c06e:	3301      	adds	r3, #1
 800c070:	b29a      	uxth	r2, r3
 800c072:	4b25      	ldr	r3, [pc, #148]	; (800c108 <tcp_create_segment+0x120>)
 800c074:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
 800c078:	6938      	ldr	r0, [r7, #16]
 800c07a:	f7fd f96d 	bl	8009358 <tcp_seg_free>
    return NULL;
 800c07e:	2300      	movs	r3, #0
 800c080:	e037      	b.n	800c0f2 <tcp_create_segment+0x10a>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	685a      	ldr	r2, [r3, #4]
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	8ada      	ldrh	r2, [r3, #22]
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	68dc      	ldr	r4, [r3, #12]
 800c094:	4610      	mov	r0, r2
 800c096:	f7fa fd98 	bl	8006bca <lwip_htons>
 800c09a:	4603      	mov	r3, r0
 800c09c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	8b1a      	ldrh	r2, [r3, #24]
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	68dc      	ldr	r4, [r3, #12]
 800c0a6:	4610      	mov	r0, r2
 800c0a8:	f7fa fd8f 	bl	8006bca <lwip_htons>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	68dc      	ldr	r4, [r3, #12]
 800c0b4:	6838      	ldr	r0, [r7, #0]
 800c0b6:	f7fa fd95 	bl	8006be4 <lwip_htonl>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800c0be:	7dfb      	ldrb	r3, [r7, #23]
 800c0c0:	089b      	lsrs	r3, r3, #2
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	3305      	adds	r3, #5
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	031b      	lsls	r3, r3, #12
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	79fb      	ldrb	r3, [r7, #7]
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	68dc      	ldr	r4, [r3, #12]
 800c0da:	4610      	mov	r0, r2
 800c0dc:	f7fa fd75 	bl	8006bca <lwip_htons>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	749a      	strb	r2, [r3, #18]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	74da      	strb	r2, [r3, #19]
  return seg;
 800c0f0:	693b      	ldr	r3, [r7, #16]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	371c      	adds	r7, #28
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd90      	pop	{r4, r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	08017770 	.word	0x08017770
 800c100:	080177fc 	.word	0x080177fc
 800c104:	080177d4 	.word	0x080177d4
 800c108:	20007db4 	.word	0x20007db4

0800c10c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b08a      	sub	sp, #40	; 0x28
 800c110:	af02      	add	r7, sp, #8
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	460b      	mov	r3, r1
 800c116:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c118:	2300      	movs	r3, #0
 800c11a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c11c:	2300      	movs	r3, #0
 800c11e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c120:	78fb      	ldrb	r3, [r7, #3]
 800c122:	f003 0303 	and.w	r3, r3, #3
 800c126:	2b00      	cmp	r3, #0
 800c128:	d106      	bne.n	800c138 <tcp_enqueue_flags+0x2c>
 800c12a:	4b7b      	ldr	r3, [pc, #492]	; (800c318 <tcp_enqueue_flags+0x20c>)
 800c12c:	f240 321a 	movw	r2, #794	; 0x31a
 800c130:	497a      	ldr	r1, [pc, #488]	; (800c31c <tcp_enqueue_flags+0x210>)
 800c132:	487b      	ldr	r0, [pc, #492]	; (800c320 <tcp_enqueue_flags+0x214>)
 800c134:	f006 fc64 	bl	8012a00 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c13e:	2b08      	cmp	r3, #8
 800c140:	d806      	bhi.n	800c150 <tcp_enqueue_flags+0x44>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c148:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d916      	bls.n	800c17e <tcp_enqueue_flags+0x72>
      ((flags & TCP_FIN) == 0)) {
 800c150:	78fb      	ldrb	r3, [r7, #3]
 800c152:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800c156:	2b00      	cmp	r3, #0
 800c158:	d111      	bne.n	800c17e <tcp_enqueue_flags+0x72>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 800c15a:	4b72      	ldr	r3, [pc, #456]	; (800c324 <tcp_enqueue_flags+0x218>)
 800c15c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800c160:	3301      	adds	r3, #1
 800c162:	b29a      	uxth	r2, r3
 800c164:	4b6f      	ldr	r3, [pc, #444]	; (800c324 <tcp_enqueue_flags+0x218>)
 800c166:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	7e9b      	ldrb	r3, [r3, #26]
 800c16e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c172:	b2da      	uxtb	r2, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800c178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c17c:	e0c7      	b.n	800c30e <tcp_enqueue_flags+0x202>
  }

  if (flags & TCP_SYN) {
 800c17e:	78fb      	ldrb	r3, [r7, #3]
 800c180:	f003 0302 	and.w	r3, r3, #2
 800c184:	2b00      	cmp	r3, #0
 800c186:	d001      	beq.n	800c18c <tcp_enqueue_flags+0x80>
    optflags = TF_SEG_OPTS_MSS;
 800c188:	2301      	movs	r3, #1
 800c18a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c18c:	7ffb      	ldrb	r3, [r7, #31]
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	b2db      	uxtb	r3, r3
 800c192:	f003 0304 	and.w	r3, r3, #4
 800c196:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c198:	7dfb      	ldrb	r3, [r7, #23]
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	2200      	movs	r2, #0
 800c19e:	4619      	mov	r1, r3
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	f7fb fb6b 	bl	800787c <pbuf_alloc>
 800c1a6:	6138      	str	r0, [r7, #16]
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d111      	bne.n	800c1d2 <tcp_enqueue_flags+0xc6>
    pcb->flags |= TF_NAGLEMEMERR;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	7e9b      	ldrb	r3, [r3, #26]
 800c1b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c1b6:	b2da      	uxtb	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800c1bc:	4b59      	ldr	r3, [pc, #356]	; (800c324 <tcp_enqueue_flags+0x218>)
 800c1be:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	b29a      	uxth	r2, r3
 800c1c6:	4b57      	ldr	r3, [pc, #348]	; (800c324 <tcp_enqueue_flags+0x218>)
 800c1c8:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 800c1cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1d0:	e09d      	b.n	800c30e <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	895a      	ldrh	r2, [r3, #10]
 800c1d6:	7dfb      	ldrb	r3, [r7, #23]
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d206      	bcs.n	800c1ec <tcp_enqueue_flags+0xe0>
 800c1de:	4b4e      	ldr	r3, [pc, #312]	; (800c318 <tcp_enqueue_flags+0x20c>)
 800c1e0:	f44f 7250 	mov.w	r2, #832	; 0x340
 800c1e4:	4950      	ldr	r1, [pc, #320]	; (800c328 <tcp_enqueue_flags+0x21c>)
 800c1e6:	484e      	ldr	r0, [pc, #312]	; (800c320 <tcp_enqueue_flags+0x214>)
 800c1e8:	f006 fc0a 	bl	8012a00 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800c1f0:	78fa      	ldrb	r2, [r7, #3]
 800c1f2:	7ffb      	ldrb	r3, [r7, #31]
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	6939      	ldr	r1, [r7, #16]
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f7ff fef4 	bl	800bfe8 <tcp_create_segment>
 800c200:	60f8      	str	r0, [r7, #12]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d111      	bne.n	800c22c <tcp_enqueue_flags+0x120>
    pcb->flags |= TF_NAGLEMEMERR;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	7e9b      	ldrb	r3, [r3, #26]
 800c20c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c210:	b2da      	uxtb	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800c216:	4b43      	ldr	r3, [pc, #268]	; (800c324 <tcp_enqueue_flags+0x218>)
 800c218:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800c21c:	3301      	adds	r3, #1
 800c21e:	b29a      	uxth	r2, r3
 800c220:	4b40      	ldr	r3, [pc, #256]	; (800c324 <tcp_enqueue_flags+0x218>)
 800c222:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 800c226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c22a:	e070      	b.n	800c30e <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	f003 0303 	and.w	r3, r3, #3
 800c234:	2b00      	cmp	r3, #0
 800c236:	d006      	beq.n	800c246 <tcp_enqueue_flags+0x13a>
 800c238:	4b37      	ldr	r3, [pc, #220]	; (800c318 <tcp_enqueue_flags+0x20c>)
 800c23a:	f240 3249 	movw	r2, #841	; 0x349
 800c23e:	493b      	ldr	r1, [pc, #236]	; (800c32c <tcp_enqueue_flags+0x220>)
 800c240:	4837      	ldr	r0, [pc, #220]	; (800c320 <tcp_enqueue_flags+0x214>)
 800c242:	f006 fbdd 	bl	8012a00 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	891b      	ldrh	r3, [r3, #8]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d006      	beq.n	800c25c <tcp_enqueue_flags+0x150>
 800c24e:	4b32      	ldr	r3, [pc, #200]	; (800c318 <tcp_enqueue_flags+0x20c>)
 800c250:	f240 324a 	movw	r2, #842	; 0x34a
 800c254:	4936      	ldr	r1, [pc, #216]	; (800c330 <tcp_enqueue_flags+0x224>)
 800c256:	4832      	ldr	r0, [pc, #200]	; (800c320 <tcp_enqueue_flags+0x214>)
 800c258:	f006 fbd2 	bl	8012a00 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c260:	2b00      	cmp	r3, #0
 800c262:	d103      	bne.n	800c26c <tcp_enqueue_flags+0x160>
    pcb->unsent = seg;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	68fa      	ldr	r2, [r7, #12]
 800c268:	669a      	str	r2, [r3, #104]	; 0x68
 800c26a:	e00d      	b.n	800c288 <tcp_enqueue_flags+0x17c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c270:	61bb      	str	r3, [r7, #24]
 800c272:	e002      	b.n	800c27a <tcp_enqueue_flags+0x16e>
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	61bb      	str	r3, [r7, #24]
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d1f8      	bne.n	800c274 <tcp_enqueue_flags+0x168>
    useg->next = seg;
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2200      	movs	r2, #0
 800c28c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c290:	78fb      	ldrb	r3, [r7, #3]
 800c292:	f003 0302 	and.w	r3, r3, #2
 800c296:	2b00      	cmp	r3, #0
 800c298:	d104      	bne.n	800c2a4 <tcp_enqueue_flags+0x198>
 800c29a:	78fb      	ldrb	r3, [r7, #3]
 800c29c:	f003 0301 	and.w	r3, r3, #1
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d004      	beq.n	800c2ae <tcp_enqueue_flags+0x1a2>
    pcb->snd_lbb++;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2a8:	1c5a      	adds	r2, r3, #1
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c2ae:	78fb      	ldrb	r3, [r7, #3]
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d006      	beq.n	800c2c6 <tcp_enqueue_flags+0x1ba>
    pcb->flags |= TF_FIN;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	7e9b      	ldrb	r3, [r3, #26]
 800c2bc:	f043 0320 	orr.w	r3, r3, #32
 800c2c0:	b2da      	uxtb	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fb fee2 	bl	8008094 <pbuf_clen>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2da:	4413      	add	r3, r2
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d00e      	beq.n	800c30c <tcp_enqueue_flags+0x200>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d10a      	bne.n	800c30c <tcp_enqueue_flags+0x200>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d106      	bne.n	800c30c <tcp_enqueue_flags+0x200>
 800c2fe:	4b06      	ldr	r3, [pc, #24]	; (800c318 <tcp_enqueue_flags+0x20c>)
 800c300:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c304:	490b      	ldr	r1, [pc, #44]	; (800c334 <tcp_enqueue_flags+0x228>)
 800c306:	4806      	ldr	r0, [pc, #24]	; (800c320 <tcp_enqueue_flags+0x214>)
 800c308:	f006 fb7a 	bl	8012a00 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c30c:	2300      	movs	r3, #0
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3720      	adds	r7, #32
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	08017770 	.word	0x08017770
 800c31c:	08017a74 	.word	0x08017a74
 800c320:	080177d4 	.word	0x080177d4
 800c324:	20007db4 	.word	0x20007db4
 800c328:	08017acc 	.word	0x08017acc
 800c32c:	08017b08 	.word	0x08017b08
 800c330:	08017b20 	.word	0x08017b20
 800c334:	08017b4c 	.word	0x08017b4c

0800c338 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c338:	b590      	push	{r4, r7, lr}
 800c33a:	b08b      	sub	sp, #44	; 0x2c
 800c33c:	af04      	add	r7, sp, #16
 800c33e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800c340:	2300      	movs	r3, #0
 800c342:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c344:	7dbb      	ldrb	r3, [r7, #22]
 800c346:	b29c      	uxth	r4, r3
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7fa fc49 	bl	8006be4 <lwip_htonl>
 800c352:	4603      	mov	r3, r0
 800c354:	2200      	movs	r2, #0
 800c356:	4621      	mov	r1, r4
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f7ff fd8b 	bl	800be74 <tcp_output_alloc_header>
 800c35e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d109      	bne.n	800c37a <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	7e9b      	ldrb	r3, [r3, #26]
 800c36a:	f043 0303 	orr.w	r3, r3, #3
 800c36e:	b2da      	uxtb	r2, r3
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c374:	f06f 0301 	mvn.w	r3, #1
 800c378:	e036      	b.n	800c3e8 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	3304      	adds	r3, #4
 800c37e:	4618      	mov	r0, r3
 800c380:	f002 fbce 	bl	800eb20 <ip4_route>
 800c384:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d102      	bne.n	800c392 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800c38c:	23fc      	movs	r3, #252	; 0xfc
 800c38e:	75fb      	strb	r3, [r7, #23]
 800c390:	e012      	b.n	800c3b8 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800c392:	6879      	ldr	r1, [r7, #4]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	1d18      	adds	r0, r3, #4
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	7a9c      	ldrb	r4, [r3, #10]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	7a5b      	ldrb	r3, [r3, #9]
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	9202      	str	r2, [sp, #8]
 800c3a4:	2206      	movs	r2, #6
 800c3a6:	9201      	str	r2, [sp, #4]
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	4623      	mov	r3, r4
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	6938      	ldr	r0, [r7, #16]
 800c3b0:	f002 fdb8 	bl	800ef24 <ip4_output_if>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800c3b8:	6938      	ldr	r0, [r7, #16]
 800c3ba:	f7fb fdd7 	bl	8007f6c <pbuf_free>

  if (err != ERR_OK) {
 800c3be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d007      	beq.n	800c3d6 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	7e9b      	ldrb	r3, [r3, #26]
 800c3ca:	f043 0303 	orr.w	r3, r3, #3
 800c3ce:	b2da      	uxtb	r2, r3
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	769a      	strb	r2, [r3, #26]
 800c3d4:	e006      	b.n	800c3e4 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	7e9b      	ldrb	r3, [r3, #26]
 800c3da:	f023 0303 	bic.w	r3, r3, #3
 800c3de:	b2da      	uxtb	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800c3e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	371c      	adds	r7, #28
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd90      	pop	{r4, r7, pc}

0800c3f0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c3f0:	b5b0      	push	{r4, r5, r7, lr}
 800c3f2:	b08a      	sub	sp, #40	; 0x28
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	7d1b      	ldrb	r3, [r3, #20]
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d106      	bne.n	800c40e <tcp_output+0x1e>
 800c400:	4b99      	ldr	r3, [pc, #612]	; (800c668 <tcp_output+0x278>)
 800c402:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800c406:	4999      	ldr	r1, [pc, #612]	; (800c66c <tcp_output+0x27c>)
 800c408:	4899      	ldr	r0, [pc, #612]	; (800c670 <tcp_output+0x280>)
 800c40a:	f006 faf9 	bl	8012a00 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c40e:	4b99      	ldr	r3, [pc, #612]	; (800c674 <tcp_output+0x284>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	429a      	cmp	r2, r3
 800c416:	d101      	bne.n	800c41c <tcp_output+0x2c>
    return ERR_OK;
 800c418:	2300      	movs	r3, #0
 800c41a:	e1cb      	b.n	800c7b4 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c428:	4293      	cmp	r3, r2
 800c42a:	bf28      	it	cs
 800c42c:	4613      	movcs	r3, r2
 800c42e:	b29b      	uxth	r3, r3
 800c430:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c436:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	7e9b      	ldrb	r3, [r3, #26]
 800c43c:	f003 0302 	and.w	r3, r3, #2
 800c440:	2b00      	cmp	r3, #0
 800c442:	d017      	beq.n	800c474 <tcp_output+0x84>
 800c444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c446:	2b00      	cmp	r3, #0
 800c448:	d00f      	beq.n	800c46a <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800c44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	4618      	mov	r0, r3
 800c452:	f7fa fbc7 	bl	8006be4 <lwip_htonl>
 800c456:	4602      	mov	r2, r0
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c45c:	1ad3      	subs	r3, r2, r3
 800c45e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c460:	8912      	ldrh	r2, [r2, #8]
 800c462:	4413      	add	r3, r2
     (seg == NULL ||
 800c464:	69ba      	ldr	r2, [r7, #24]
 800c466:	429a      	cmp	r2, r3
 800c468:	d204      	bcs.n	800c474 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f7ff ff64 	bl	800c338 <tcp_send_empty_ack>
 800c470:	4603      	mov	r3, r0
 800c472:	e19f      	b.n	800c7b4 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c478:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c47a:	6a3b      	ldr	r3, [r7, #32]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d007      	beq.n	800c490 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 800c480:	e002      	b.n	800c488 <tcp_output+0x98>
 800c482:	6a3b      	ldr	r3, [r7, #32]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	623b      	str	r3, [r7, #32]
 800c488:	6a3b      	ldr	r3, [r7, #32]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d1f8      	bne.n	800c482 <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	3304      	adds	r3, #4
 800c494:	4618      	mov	r0, r3
 800c496:	f002 fb43 	bl	800eb20 <ip4_route>
 800c49a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d102      	bne.n	800c4a8 <tcp_output+0xb8>
    return ERR_RTE;
 800c4a2:	f06f 0303 	mvn.w	r3, #3
 800c4a6:	e185      	b.n	800c7b4 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d003      	beq.n	800c4b6 <tcp_output+0xc6>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d111      	bne.n	800c4da <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d002      	beq.n	800c4c2 <tcp_output+0xd2>
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	3304      	adds	r3, #4
 800c4c0:	e000      	b.n	800c4c4 <tcp_output+0xd4>
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d102      	bne.n	800c4d2 <tcp_output+0xe2>
      return ERR_RTE;
 800c4cc:	f06f 0303 	mvn.w	r3, #3
 800c4d0:	e170      	b.n	800c7b4 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	681a      	ldr	r2, [r3, #0]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800c4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f000 813f 	beq.w	800c760 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7fa fb7b 	bl	8006be4 <lwip_htonl>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4f4:	1ad3      	subs	r3, r2, r3
 800c4f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4f8:	8912      	ldrh	r2, [r2, #8]
 800c4fa:	4413      	add	r3, r2
  if (seg != NULL &&
 800c4fc:	69ba      	ldr	r2, [r7, #24]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	f080 812e 	bcs.w	800c760 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800c504:	69bb      	ldr	r3, [r7, #24]
 800c506:	2b00      	cmp	r3, #0
 800c508:	f000 812a 	beq.w	800c760 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c512:	461a      	mov	r2, r3
 800c514:	69bb      	ldr	r3, [r7, #24]
 800c516:	4293      	cmp	r3, r2
 800c518:	f040 8122 	bne.w	800c760 <tcp_output+0x370>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c520:	2b00      	cmp	r3, #0
 800c522:	f040 811d 	bne.w	800c760 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f040 812c 	bne.w	800c78a <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2200      	movs	r2, #0
 800c536:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2201      	movs	r2, #1
 800c53e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800c542:	e122      	b.n	800c78a <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	899b      	ldrh	r3, [r3, #12]
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7fa fb3c 	bl	8006bca <lwip_htons>
 800c552:	4603      	mov	r3, r0
 800c554:	f003 0304 	and.w	r3, r3, #4
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d006      	beq.n	800c56a <tcp_output+0x17a>
 800c55c:	4b42      	ldr	r3, [pc, #264]	; (800c668 <tcp_output+0x278>)
 800c55e:	f240 4245 	movw	r2, #1093	; 0x445
 800c562:	4945      	ldr	r1, [pc, #276]	; (800c678 <tcp_output+0x288>)
 800c564:	4842      	ldr	r0, [pc, #264]	; (800c670 <tcp_output+0x280>)
 800c566:	f006 fa4b 	bl	8012a00 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d01f      	beq.n	800c5b2 <tcp_output+0x1c2>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	7e9b      	ldrb	r3, [r3, #26]
 800c576:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d119      	bne.n	800c5b2 <tcp_output+0x1c2>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00b      	beq.n	800c59e <tcp_output+0x1ae>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d110      	bne.n	800c5b2 <tcp_output+0x1c2>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c594:	891a      	ldrh	r2, [r3, #8]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d209      	bcs.n	800c5b2 <tcp_output+0x1c2>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d004      	beq.n	800c5b2 <tcp_output+0x1c2>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c5ae:	2b08      	cmp	r3, #8
 800c5b0:	d901      	bls.n	800c5b6 <tcp_output+0x1c6>
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e000      	b.n	800c5b8 <tcp_output+0x1c8>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d106      	bne.n	800c5ca <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	7e9b      	ldrb	r3, [r3, #26]
 800c5c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	f000 80e2 	beq.w	800c78e <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	7d1b      	ldrb	r3, [r3, #20]
 800c5ce:	2b02      	cmp	r3, #2
 800c5d0:	d00d      	beq.n	800c5ee <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	899b      	ldrh	r3, [r3, #12]
 800c5d8:	b29c      	uxth	r4, r3
 800c5da:	2010      	movs	r0, #16
 800c5dc:	f7fa faf5 	bl	8006bca <lwip_htons>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	4322      	orrs	r2, r4
 800c5ea:	b292      	uxth	r2, r2
 800c5ec:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800c5ee:	697a      	ldr	r2, [r7, #20]
 800c5f0:	6879      	ldr	r1, [r7, #4]
 800c5f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5f4:	f000 f8e2 	bl	800c7bc <tcp_output_segment>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c5fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d009      	beq.n	800c618 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	7e9b      	ldrb	r3, [r3, #26]
 800c608:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c60c:	b2da      	uxtb	r2, r3
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	769a      	strb	r2, [r3, #26]
      return err;
 800c612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c616:	e0cd      	b.n	800c7b4 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800c618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	7d1b      	ldrb	r3, [r3, #20]
 800c624:	2b02      	cmp	r3, #2
 800c626:	d006      	beq.n	800c636 <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	7e9b      	ldrb	r3, [r3, #26]
 800c62c:	f023 0303 	bic.w	r3, r3, #3
 800c630:	b2da      	uxtb	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7fa fad1 	bl	8006be4 <lwip_htonl>
 800c642:	4604      	mov	r4, r0
 800c644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c646:	891b      	ldrh	r3, [r3, #8]
 800c648:	461d      	mov	r5, r3
 800c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	899b      	ldrh	r3, [r3, #12]
 800c650:	b29b      	uxth	r3, r3
 800c652:	4618      	mov	r0, r3
 800c654:	f7fa fab9 	bl	8006bca <lwip_htons>
 800c658:	4603      	mov	r3, r0
 800c65a:	f003 0303 	and.w	r3, r3, #3
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00c      	beq.n	800c67c <tcp_output+0x28c>
 800c662:	2301      	movs	r3, #1
 800c664:	e00b      	b.n	800c67e <tcp_output+0x28e>
 800c666:	bf00      	nop
 800c668:	08017770 	.word	0x08017770
 800c66c:	08017b74 	.word	0x08017b74
 800c670:	080177d4 	.word	0x080177d4
 800c674:	20007ed8 	.word	0x20007ed8
 800c678:	08017b9c 	.word	0x08017b9c
 800c67c:	2300      	movs	r3, #0
 800c67e:	442b      	add	r3, r5
 800c680:	4423      	add	r3, r4
 800c682:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	1ad3      	subs	r3, r2, r3
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	da02      	bge.n	800c696 <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	68ba      	ldr	r2, [r7, #8]
 800c694:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c698:	891b      	ldrh	r3, [r3, #8]
 800c69a:	461c      	mov	r4, r3
 800c69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69e:	68db      	ldr	r3, [r3, #12]
 800c6a0:	899b      	ldrh	r3, [r3, #12]
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7fa fa90 	bl	8006bca <lwip_htons>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	f003 0303 	and.w	r3, r3, #3
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d001      	beq.n	800c6b8 <tcp_output+0x2c8>
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e000      	b.n	800c6ba <tcp_output+0x2ca>
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	4423      	add	r3, r4
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d049      	beq.n	800c754 <tcp_output+0x364>
      seg->next = NULL;
 800c6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d105      	bne.n	800c6da <tcp_output+0x2ea>
        pcb->unacked = seg;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6d2:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d6:	623b      	str	r3, [r7, #32]
 800c6d8:	e03f      	b.n	800c75a <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7fa fa7f 	bl	8006be4 <lwip_htonl>
 800c6e6:	4604      	mov	r4, r0
 800c6e8:	6a3b      	ldr	r3, [r7, #32]
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7fa fa78 	bl	8006be4 <lwip_htonl>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	1ae3      	subs	r3, r4, r3
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	da24      	bge.n	800c746 <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	336c      	adds	r3, #108	; 0x6c
 800c700:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c702:	e002      	b.n	800c70a <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c70a:	69fb      	ldr	r3, [r7, #28]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d011      	beq.n	800c736 <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7fa fa62 	bl	8006be4 <lwip_htonl>
 800c720:	4604      	mov	r4, r0
 800c722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c724:	68db      	ldr	r3, [r3, #12]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	4618      	mov	r0, r3
 800c72a:	f7fa fa5b 	bl	8006be4 <lwip_htonl>
 800c72e:	4603      	mov	r3, r0
 800c730:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c732:	2b00      	cmp	r3, #0
 800c734:	dbe6      	blt.n	800c704 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c73e:	69fb      	ldr	r3, [r7, #28]
 800c740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c742:	601a      	str	r2, [r3, #0]
 800c744:	e009      	b.n	800c75a <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c746:	6a3b      	ldr	r3, [r7, #32]
 800c748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c74a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c74c:	6a3b      	ldr	r3, [r7, #32]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	623b      	str	r3, [r7, #32]
 800c752:	e002      	b.n	800c75a <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c754:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c756:	f7fc fdff 	bl	8009358 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c75e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c762:	2b00      	cmp	r3, #0
 800c764:	d015      	beq.n	800c792 <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c768:	68db      	ldr	r3, [r3, #12]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7fa fa39 	bl	8006be4 <lwip_htonl>
 800c772:	4602      	mov	r2, r0
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c77c:	8912      	ldrh	r2, [r2, #8]
 800c77e:	4413      	add	r3, r2
  while (seg != NULL &&
 800c780:	69ba      	ldr	r2, [r7, #24]
 800c782:	429a      	cmp	r2, r3
 800c784:	f4bf aede 	bcs.w	800c544 <tcp_output+0x154>
  }
output_done:
 800c788:	e003      	b.n	800c792 <tcp_output+0x3a2>
    goto output_done;
 800c78a:	bf00      	nop
 800c78c:	e002      	b.n	800c794 <tcp_output+0x3a4>
      break;
 800c78e:	bf00      	nop
 800c790:	e000      	b.n	800c794 <tcp_output+0x3a4>
output_done:
 800c792:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d103      	bne.n	800c7a4 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	7e9b      	ldrb	r3, [r3, #26]
 800c7a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7ac:	b2da      	uxtb	r2, r3
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800c7b2:	2300      	movs	r3, #0
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3728      	adds	r7, #40	; 0x28
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bdb0      	pop	{r4, r5, r7, pc}

0800c7bc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c7bc:	b5b0      	push	{r4, r5, r7, lr}
 800c7be:	b08c      	sub	sp, #48	; 0x30
 800c7c0:	af04      	add	r7, sp, #16
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	89db      	ldrh	r3, [r3, #14]
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d001      	beq.n	800c7d6 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	e092      	b.n	800c8fc <tcp_output_segment+0x140>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	68dc      	ldr	r4, [r3, #12]
 800c7de:	4610      	mov	r0, r2
 800c7e0:	f7fa fa00 	bl	8006be4 <lwip_htonl>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	68dc      	ldr	r4, [r3, #12]
 800c7f0:	4610      	mov	r0, r2
 800c7f2:	f7fa f9ea 	bl	8006bca <lwip_htons>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fe:	68ba      	ldr	r2, [r7, #8]
 800c800:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c802:	441a      	add	r2, r3
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	3314      	adds	r3, #20
 800c80e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	7a9b      	ldrb	r3, [r3, #10]
 800c814:	f003 0301 	and.w	r3, r3, #1
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d014      	beq.n	800c846 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	3304      	adds	r3, #4
 800c820:	4619      	mov	r1, r3
 800c822:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c826:	f7fd f829 	bl	800987c <tcp_eff_send_mss_impl>
 800c82a:	4603      	mov	r3, r0
 800c82c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c82e:	8b7b      	ldrh	r3, [r7, #26]
 800c830:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c834:	4618      	mov	r0, r3
 800c836:	f7fa f9d5 	bl	8006be4 <lwip_htonl>
 800c83a:	4602      	mov	r2, r0
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	3304      	adds	r3, #4
 800c844:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	da02      	bge.n	800c856 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	2200      	movs	r2, #0
 800c854:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d10c      	bne.n	800c878 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800c85e:	4b29      	ldr	r3, [pc, #164]	; (800c904 <tcp_output_segment+0x148>)
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7fa f9b9 	bl	8006be4 <lwip_htonl>
 800c872:	4602      	mov	r2, r0
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	68da      	ldr	r2, [r3, #12]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	1ad3      	subs	r3, r2, r3
 800c884:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	8959      	ldrh	r1, [r3, #10]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	8b3a      	ldrh	r2, [r7, #24]
 800c892:	1a8a      	subs	r2, r1, r2
 800c894:	b292      	uxth	r2, r2
 800c896:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	8919      	ldrh	r1, [r3, #8]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	8b3a      	ldrh	r2, [r7, #24]
 800c8a4:	1a8a      	subs	r2, r1, r2
 800c8a6:	b292      	uxth	r2, r2
 800c8a8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	68d2      	ldr	r2, [r2, #12]
 800c8b2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	741a      	strb	r2, [r3, #16]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	745a      	strb	r2, [r3, #17]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 800c8c0:	4b11      	ldr	r3, [pc, #68]	; (800c908 <tcp_output_segment+0x14c>)
 800c8c2:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	4b0f      	ldr	r3, [pc, #60]	; (800c908 <tcp_output_segment+0x14c>)
 800c8cc:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6858      	ldr	r0, [r3, #4]
 800c8d4:	68b9      	ldr	r1, [r7, #8]
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	1d1c      	adds	r4, r3, #4
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	7a9d      	ldrb	r5, [r3, #10]
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	7a5b      	ldrb	r3, [r3, #9]
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	9202      	str	r2, [sp, #8]
 800c8e6:	2206      	movs	r2, #6
 800c8e8:	9201      	str	r2, [sp, #4]
 800c8ea:	9300      	str	r3, [sp, #0]
 800c8ec:	462b      	mov	r3, r5
 800c8ee:	4622      	mov	r2, r4
 800c8f0:	f002 fb18 	bl	800ef24 <ip4_output_if>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800c8f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3720      	adds	r7, #32
 800c900:	46bd      	mov	sp, r7
 800c902:	bdb0      	pop	{r4, r5, r7, pc}
 800c904:	20007e8c 	.word	0x20007e8c
 800c908:	20007db4 	.word	0x20007db4

0800c90c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b08c      	sub	sp, #48	; 0x30
 800c910:	af04      	add	r7, sp, #16
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	607a      	str	r2, [r7, #4]
 800c918:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800c91a:	2200      	movs	r2, #0
 800c91c:	2114      	movs	r1, #20
 800c91e:	2001      	movs	r0, #1
 800c920:	f7fa ffac 	bl	800787c <pbuf_alloc>
 800c924:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800c926:	69fb      	ldr	r3, [r7, #28]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d063      	beq.n	800c9f4 <tcp_rst+0xe8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c92c:	69fb      	ldr	r3, [r7, #28]
 800c92e:	895b      	ldrh	r3, [r3, #10]
 800c930:	2b13      	cmp	r3, #19
 800c932:	d806      	bhi.n	800c942 <tcp_rst+0x36>
 800c934:	4b31      	ldr	r3, [pc, #196]	; (800c9fc <tcp_rst+0xf0>)
 800c936:	f240 524c 	movw	r2, #1356	; 0x54c
 800c93a:	4931      	ldr	r1, [pc, #196]	; (800ca00 <tcp_rst+0xf4>)
 800c93c:	4831      	ldr	r0, [pc, #196]	; (800ca04 <tcp_rst+0xf8>)
 800c93e:	f006 f85f 	bl	8012a00 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800c942:	69fb      	ldr	r3, [r7, #28]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800c948:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7fa f93d 	bl	8006bca <lwip_htons>
 800c950:	4603      	mov	r3, r0
 800c952:	461a      	mov	r2, r3
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800c958:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7fa f935 	bl	8006bca <lwip_htons>
 800c960:	4603      	mov	r3, r0
 800c962:	461a      	mov	r2, r3
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800c968:	68f8      	ldr	r0, [r7, #12]
 800c96a:	f7fa f93b 	bl	8006be4 <lwip_htonl>
 800c96e:	4602      	mov	r2, r0
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800c974:	68b8      	ldr	r0, [r7, #8]
 800c976:	f7fa f935 	bl	8006be4 <lwip_htonl>
 800c97a:	4602      	mov	r2, r0
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800c980:	f245 0014 	movw	r0, #20500	; 0x5014
 800c984:	f7fa f921 	bl	8006bca <lwip_htons>
 800c988:	4603      	mov	r3, r0
 800c98a:	461a      	mov	r2, r3
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	2200      	movs	r2, #0
 800c994:	f042 0208 	orr.w	r2, r2, #8
 800c998:	739a      	strb	r2, [r3, #14]
 800c99a:	2200      	movs	r2, #0
 800c99c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800c9a0:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	741a      	strb	r2, [r3, #16]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800c9ac:	69bb      	ldr	r3, [r7, #24]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	749a      	strb	r2, [r3, #18]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
 800c9b6:	4b14      	ldr	r3, [pc, #80]	; (800ca08 <tcp_rst+0xfc>)
 800c9b8:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800c9bc:	3301      	adds	r3, #1
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	4b11      	ldr	r3, [pc, #68]	; (800ca08 <tcp_rst+0xfc>)
 800c9c2:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800c9c6:	6838      	ldr	r0, [r7, #0]
 800c9c8:	f002 f8aa 	bl	800eb20 <ip4_route>
 800c9cc:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d00b      	beq.n	800c9ec <tcp_rst+0xe0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	9302      	str	r3, [sp, #8]
 800c9d8:	2306      	movs	r3, #6
 800c9da:	9301      	str	r3, [sp, #4]
 800c9dc:	2300      	movs	r3, #0
 800c9de:	9300      	str	r3, [sp, #0]
 800c9e0:	23ff      	movs	r3, #255	; 0xff
 800c9e2:	683a      	ldr	r2, [r7, #0]
 800c9e4:	6879      	ldr	r1, [r7, #4]
 800c9e6:	69f8      	ldr	r0, [r7, #28]
 800c9e8:	f002 fa9c 	bl	800ef24 <ip4_output_if>
  }
  pbuf_free(p);
 800c9ec:	69f8      	ldr	r0, [r7, #28]
 800c9ee:	f7fb fabd 	bl	8007f6c <pbuf_free>
 800c9f2:	e000      	b.n	800c9f6 <tcp_rst+0xea>
    return;
 800c9f4:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c9f6:	3720      	adds	r7, #32
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	08017770 	.word	0x08017770
 800ca00:	080177a4 	.word	0x080177a4
 800ca04:	080177d4 	.word	0x080177d4
 800ca08:	20007db4 	.word	0x20007db4

0800ca0c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d029      	beq.n	800ca70 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca20:	60fb      	str	r3, [r7, #12]
 800ca22:	e002      	b.n	800ca2a <tcp_rexmit_rto+0x1e>
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	60fb      	str	r3, [r7, #12]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1f8      	bne.n	800ca24 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca4e:	2bff      	cmp	r3, #255	; 0xff
 800ca50:	d007      	beq.n	800ca62 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca58:	3301      	adds	r3, #1
 800ca5a:	b2da      	uxtb	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f7ff fcc1 	bl	800c3f0 <tcp_output>
 800ca6e:	e000      	b.n	800ca72 <tcp_rexmit_rto+0x66>
    return;
 800ca70:	bf00      	nop
}
 800ca72:	3710      	adds	r7, #16
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ca78:	b590      	push	{r4, r7, lr}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d043      	beq.n	800cb10 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca8c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	3368      	adds	r3, #104	; 0x68
 800ca9a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ca9c:	e002      	b.n	800caa4 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d011      	beq.n	800cad0 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7fa f895 	bl	8006be4 <lwip_htonl>
 800caba:	4604      	mov	r4, r0
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7fa f88e 	bl	8006be4 <lwip_htonl>
 800cac8:	4603      	mov	r3, r0
 800caca:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800cacc:	2b00      	cmp	r3, #0
 800cace:	dbe6      	blt.n	800ca9e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d103      	bne.n	800caee <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2200      	movs	r2, #0
 800caea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800caf4:	2bff      	cmp	r3, #255	; 0xff
 800caf6:	d007      	beq.n	800cb08 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cafe:	3301      	adds	r3, #1
 800cb00:	b2da      	uxtb	r2, r3
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	635a      	str	r2, [r3, #52]	; 0x34
 800cb0e:	e000      	b.n	800cb12 <tcp_rexmit+0x9a>
    return;
 800cb10:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800cb12:	3714      	adds	r7, #20
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd90      	pop	{r4, r7, pc}

0800cb18 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d041      	beq.n	800cbac <tcp_rexmit_fast+0x94>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	7e9b      	ldrb	r3, [r3, #26]
 800cb2c:	f003 0304 	and.w	r3, r3, #4
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d13b      	bne.n	800cbac <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7ff ff9f 	bl	800ca78 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb46:	4293      	cmp	r3, r2
 800cb48:	bf28      	it	cs
 800cb4a:	4613      	movcs	r3, r2
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	0fda      	lsrs	r2, r3, #31
 800cb50:	4413      	add	r3, r2
 800cb52:	105b      	asrs	r3, r3, #1
 800cb54:	b29a      	uxth	r2, r3
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cb62:	461a      	mov	r2, r3
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb68:	005b      	lsls	r3, r3, #1
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d206      	bcs.n	800cb7c <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb72:	005b      	lsls	r3, r3, #1
 800cb74:	b29a      	uxth	r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb86:	4619      	mov	r1, r3
 800cb88:	0049      	lsls	r1, r1, #1
 800cb8a:	440b      	add	r3, r1
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	4413      	add	r3, r2
 800cb90:	b29a      	uxth	r2, r3
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	7e9b      	ldrb	r3, [r3, #26]
 800cb9c:	f043 0304 	orr.w	r3, r3, #4
 800cba0:	b2da      	uxtb	r2, r3
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800cbac:	bf00      	nop
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b08a      	sub	sp, #40	; 0x28
 800cbb8:	af04      	add	r7, sp, #16
 800cbba:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbc0:	3b01      	subs	r3, #1
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f7fa f80e 	bl	8006be4 <lwip_htonl>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2200      	movs	r2, #0
 800cbcc:	2100      	movs	r1, #0
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f7ff f950 	bl	800be74 <tcp_output_alloc_header>
 800cbd4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d102      	bne.n	800cbe2 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800cbdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbe0:	e029      	b.n	800cc36 <tcp_keepalive+0x82>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	3304      	adds	r3, #4
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f001 ff9a 	bl	800eb20 <ip4_route>
 800cbec:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d102      	bne.n	800cbfa <tcp_keepalive+0x46>
    err = ERR_RTE;
 800cbf4:	23fc      	movs	r3, #252	; 0xfc
 800cbf6:	75fb      	strb	r3, [r7, #23]
 800cbf8:	e018      	b.n	800cc2c <tcp_keepalive+0x78>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
 800cbfa:	4b11      	ldr	r3, [pc, #68]	; (800cc40 <tcp_keepalive+0x8c>)
 800cbfc:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800cc00:	3301      	adds	r3, #1
 800cc02:	b29a      	uxth	r2, r3
 800cc04:	4b0e      	ldr	r3, [pc, #56]	; (800cc40 <tcp_keepalive+0x8c>)
 800cc06:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800cc0a:	6879      	ldr	r1, [r7, #4]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	1d1a      	adds	r2, r3, #4
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	7a98      	ldrb	r0, [r3, #10]
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	9302      	str	r3, [sp, #8]
 800cc18:	2306      	movs	r3, #6
 800cc1a:	9301      	str	r3, [sp, #4]
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	9300      	str	r3, [sp, #0]
 800cc20:	4603      	mov	r3, r0
 800cc22:	6938      	ldr	r0, [r7, #16]
 800cc24:	f002 f97e 	bl	800ef24 <ip4_output_if>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800cc2c:	6938      	ldr	r0, [r7, #16]
 800cc2e:	f7fb f99d 	bl	8007f6c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cc32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3718      	adds	r7, #24
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	20007db4 	.word	0x20007db4

0800cc44 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800cc44:	b590      	push	{r4, r7, lr}
 800cc46:	b08f      	sub	sp, #60	; 0x3c
 800cc48:	af04      	add	r7, sp, #16
 800cc4a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc50:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800cc52:	6a3b      	ldr	r3, [r7, #32]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d102      	bne.n	800cc5e <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc5c:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800cc5e:	6a3b      	ldr	r3, [r7, #32]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d101      	bne.n	800cc68 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800cc64:	2300      	movs	r3, #0
 800cc66:	e08d      	b.n	800cd84 <tcp_zero_window_probe+0x140>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cc68:	6a3b      	ldr	r3, [r7, #32]
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	899b      	ldrh	r3, [r3, #12]
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7f9 ffaa 	bl	8006bca <lwip_htons>
 800cc76:	4603      	mov	r3, r0
 800cc78:	f003 0301 	and.w	r3, r3, #1
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d005      	beq.n	800cc8c <tcp_zero_window_probe+0x48>
 800cc80:	6a3b      	ldr	r3, [r7, #32]
 800cc82:	891b      	ldrh	r3, [r3, #8]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d101      	bne.n	800cc8c <tcp_zero_window_probe+0x48>
 800cc88:	2301      	movs	r3, #1
 800cc8a:	e000      	b.n	800cc8e <tcp_zero_window_probe+0x4a>
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800cc90:	7ffb      	ldrb	r3, [r7, #31]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	bf0c      	ite	eq
 800cc96:	2301      	moveq	r3, #1
 800cc98:	2300      	movne	r3, #0
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800cc9e:	6a3b      	ldr	r3, [r7, #32]
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	8bba      	ldrh	r2, [r7, #28]
 800cca6:	2100      	movs	r1, #0
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f7ff f8e3 	bl	800be74 <tcp_output_alloc_header>
 800ccae:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ccb0:	69bb      	ldr	r3, [r7, #24]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d102      	bne.n	800ccbc <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ccb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccba:	e063      	b.n	800cd84 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ccbc:	69bb      	ldr	r3, [r7, #24]
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ccc2:	7ffb      	ldrb	r3, [r7, #31]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d00e      	beq.n	800cce6 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	899b      	ldrh	r3, [r3, #12]
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ccd2:	b29c      	uxth	r4, r3
 800ccd4:	2011      	movs	r0, #17
 800ccd6:	f7f9 ff78 	bl	8006bca <lwip_htons>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	4323      	orrs	r3, r4
 800ccde:	b29a      	uxth	r2, r3
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	819a      	strh	r2, [r3, #12]
 800cce4:	e010      	b.n	800cd08 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800cce6:	69bb      	ldr	r3, [r7, #24]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	3314      	adds	r3, #20
 800ccec:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ccee:	6a3b      	ldr	r3, [r7, #32]
 800ccf0:	6858      	ldr	r0, [r3, #4]
 800ccf2:	6a3b      	ldr	r3, [r7, #32]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	891a      	ldrh	r2, [r3, #8]
 800ccf8:	6a3b      	ldr	r3, [r7, #32]
 800ccfa:	891b      	ldrh	r3, [r3, #8]
 800ccfc:	1ad3      	subs	r3, r2, r3
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	2201      	movs	r2, #1
 800cd02:	6939      	ldr	r1, [r7, #16]
 800cd04:	f7fb fb30 	bl	8008368 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800cd08:	6a3b      	ldr	r3, [r7, #32]
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7f9 ff68 	bl	8006be4 <lwip_htonl>
 800cd14:	4603      	mov	r3, r0
 800cd16:	3301      	adds	r3, #1
 800cd18:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	1ad3      	subs	r3, r2, r3
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	da02      	bge.n	800cd2c <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	68fa      	ldr	r2, [r7, #12]
 800cd2a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	3304      	adds	r3, #4
 800cd30:	4618      	mov	r0, r3
 800cd32:	f001 fef5 	bl	800eb20 <ip4_route>
 800cd36:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d103      	bne.n	800cd46 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800cd3e:	23fc      	movs	r3, #252	; 0xfc
 800cd40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd44:	e019      	b.n	800cd7a <tcp_zero_window_probe+0x136>
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    TCP_STATS_INC(tcp.xmit);
 800cd46:	4b11      	ldr	r3, [pc, #68]	; (800cd8c <tcp_zero_window_probe+0x148>)
 800cd48:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	b29a      	uxth	r2, r3
 800cd50:	4b0e      	ldr	r3, [pc, #56]	; (800cd8c <tcp_zero_window_probe+0x148>)
 800cd52:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800cd56:	6879      	ldr	r1, [r7, #4]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	1d1a      	adds	r2, r3, #4
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	7a98      	ldrb	r0, [r3, #10]
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	9302      	str	r3, [sp, #8]
 800cd64:	2306      	movs	r3, #6
 800cd66:	9301      	str	r3, [sp, #4]
 800cd68:	2300      	movs	r3, #0
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	69b8      	ldr	r0, [r7, #24]
 800cd70:	f002 f8d8 	bl	800ef24 <ip4_output_if>
 800cd74:	4603      	mov	r3, r0
 800cd76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800cd7a:	69b8      	ldr	r0, [r7, #24]
 800cd7c:	f7fb f8f6 	bl	8007f6c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cd80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	372c      	adds	r7, #44	; 0x2c
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd90      	pop	{r4, r7, pc}
 800cd8c:	20007db4 	.word	0x20007db4

0800cd90 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800cd98:	f7fb fbfe 	bl	8008598 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800cd9c:	4b0a      	ldr	r3, [pc, #40]	; (800cdc8 <tcpip_tcp_timer+0x38>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d103      	bne.n	800cdac <tcpip_tcp_timer+0x1c>
 800cda4:	4b09      	ldr	r3, [pc, #36]	; (800cdcc <tcpip_tcp_timer+0x3c>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d005      	beq.n	800cdb8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cdac:	2200      	movs	r2, #0
 800cdae:	4908      	ldr	r1, [pc, #32]	; (800cdd0 <tcpip_tcp_timer+0x40>)
 800cdb0:	20fa      	movs	r0, #250	; 0xfa
 800cdb2:	f000 f86f 	bl	800ce94 <sys_timeout>
 800cdb6:	e003      	b.n	800cdc0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800cdb8:	4b06      	ldr	r3, [pc, #24]	; (800cdd4 <tcpip_tcp_timer+0x44>)
 800cdba:	2200      	movs	r2, #0
 800cdbc:	601a      	str	r2, [r3, #0]
  }
}
 800cdbe:	bf00      	nop
 800cdc0:	bf00      	nop
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	20007e98 	.word	0x20007e98
 800cdcc:	20007e9c 	.word	0x20007e9c
 800cdd0:	0800cd91 	.word	0x0800cd91
 800cdd4:	20007ee4 	.word	0x20007ee4

0800cdd8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cddc:	4b0a      	ldr	r3, [pc, #40]	; (800ce08 <tcp_timer_needed+0x30>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d10f      	bne.n	800ce04 <tcp_timer_needed+0x2c>
 800cde4:	4b09      	ldr	r3, [pc, #36]	; (800ce0c <tcp_timer_needed+0x34>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d103      	bne.n	800cdf4 <tcp_timer_needed+0x1c>
 800cdec:	4b08      	ldr	r3, [pc, #32]	; (800ce10 <tcp_timer_needed+0x38>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d007      	beq.n	800ce04 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800cdf4:	4b04      	ldr	r3, [pc, #16]	; (800ce08 <tcp_timer_needed+0x30>)
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	4905      	ldr	r1, [pc, #20]	; (800ce14 <tcp_timer_needed+0x3c>)
 800cdfe:	20fa      	movs	r0, #250	; 0xfa
 800ce00:	f000 f848 	bl	800ce94 <sys_timeout>
  }
}
 800ce04:	bf00      	nop
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	20007ee4 	.word	0x20007ee4
 800ce0c:	20007e98 	.word	0x20007e98
 800ce10:	20007e9c 	.word	0x20007e9c
 800ce14:	0800cd91 	.word	0x0800cd91

0800ce18 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	4903      	ldr	r1, [pc, #12]	; (800ce40 <cyclic_timer+0x28>)
 800ce32:	4618      	mov	r0, r3
 800ce34:	f000 f82e 	bl	800ce94 <sys_timeout>
}
 800ce38:	bf00      	nop
 800ce3a:	3710      	adds	r7, #16
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	0800ce19 	.word	0x0800ce19

0800ce44 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	607b      	str	r3, [r7, #4]
 800ce4e:	e00e      	b.n	800ce6e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800ce50:	4a0d      	ldr	r2, [pc, #52]	; (800ce88 <sys_timeouts_init+0x44>)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	00db      	lsls	r3, r3, #3
 800ce5c:	4a0a      	ldr	r2, [pc, #40]	; (800ce88 <sys_timeouts_init+0x44>)
 800ce5e:	4413      	add	r3, r2
 800ce60:	461a      	mov	r2, r3
 800ce62:	490a      	ldr	r1, [pc, #40]	; (800ce8c <sys_timeouts_init+0x48>)
 800ce64:	f000 f816 	bl	800ce94 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	607b      	str	r3, [r7, #4]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2b02      	cmp	r3, #2
 800ce72:	d9ed      	bls.n	800ce50 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800ce74:	f7f9 fe1c 	bl	8006ab0 <sys_now>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	4a05      	ldr	r2, [pc, #20]	; (800ce90 <sys_timeouts_init+0x4c>)
 800ce7c:	6013      	str	r3, [r2, #0]
}
 800ce7e:	bf00      	nop
 800ce80:	3708      	adds	r7, #8
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	08018454 	.word	0x08018454
 800ce8c:	0800ce19 	.word	0x0800ce19
 800ce90:	20007ee0 	.word	0x20007ee0

0800ce94 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b088      	sub	sp, #32
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cea0:	2006      	movs	r0, #6
 800cea2:	f7fa fad3 	bl	800744c <memp_malloc>
 800cea6:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d10a      	bne.n	800cec4 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f040 8084 	bne.w	800cfbe <sys_timeout+0x12a>
 800ceb6:	4b44      	ldr	r3, [pc, #272]	; (800cfc8 <sys_timeout+0x134>)
 800ceb8:	22d4      	movs	r2, #212	; 0xd4
 800ceba:	4944      	ldr	r1, [pc, #272]	; (800cfcc <sys_timeout+0x138>)
 800cebc:	4844      	ldr	r0, [pc, #272]	; (800cfd0 <sys_timeout+0x13c>)
 800cebe:	f005 fd9f 	bl	8012a00 <iprintf>
    return;
 800cec2:	e07c      	b.n	800cfbe <sys_timeout+0x12a>
  }

  now = sys_now();
 800cec4:	f7f9 fdf4 	bl	8006ab0 <sys_now>
 800cec8:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800ceca:	4b42      	ldr	r3, [pc, #264]	; (800cfd4 <sys_timeout+0x140>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d105      	bne.n	800cede <sys_timeout+0x4a>
    diff = 0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800ced6:	4a40      	ldr	r2, [pc, #256]	; (800cfd8 <sys_timeout+0x144>)
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	6013      	str	r3, [r2, #0]
 800cedc:	e004      	b.n	800cee8 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800cede:	4b3e      	ldr	r3, [pc, #248]	; (800cfd8 <sys_timeout+0x144>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	693a      	ldr	r2, [r7, #16]
 800cee4:	1ad3      	subs	r3, r2, r3
 800cee6:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	2200      	movs	r2, #0
 800ceec:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	68ba      	ldr	r2, [r7, #8]
 800cef2:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	441a      	add	r2, r3
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800cf04:	4b33      	ldr	r3, [pc, #204]	; (800cfd4 <sys_timeout+0x140>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d103      	bne.n	800cf14 <sys_timeout+0x80>
    next_timeout = timeout;
 800cf0c:	4a31      	ldr	r2, [pc, #196]	; (800cfd4 <sys_timeout+0x140>)
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	6013      	str	r3, [r2, #0]
    return;
 800cf12:	e055      	b.n	800cfc0 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800cf14:	4b2f      	ldr	r3, [pc, #188]	; (800cfd4 <sys_timeout+0x140>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	68fa      	ldr	r2, [r7, #12]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d20f      	bcs.n	800cf40 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800cf20:	4b2c      	ldr	r3, [pc, #176]	; (800cfd4 <sys_timeout+0x140>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	6859      	ldr	r1, [r3, #4]
 800cf26:	4b2b      	ldr	r3, [pc, #172]	; (800cfd4 <sys_timeout+0x140>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	68fa      	ldr	r2, [r7, #12]
 800cf2c:	1a8a      	subs	r2, r1, r2
 800cf2e:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800cf30:	4b28      	ldr	r3, [pc, #160]	; (800cfd4 <sys_timeout+0x140>)
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800cf38:	4a26      	ldr	r2, [pc, #152]	; (800cfd4 <sys_timeout+0x140>)
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	6013      	str	r3, [r2, #0]
 800cf3e:	e03f      	b.n	800cfc0 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800cf40:	4b24      	ldr	r3, [pc, #144]	; (800cfd4 <sys_timeout+0x140>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	61fb      	str	r3, [r7, #28]
 800cf46:	e036      	b.n	800cfb6 <sys_timeout+0x122>
      timeout->time -= t->time;
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	685a      	ldr	r2, [r3, #4]
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	1ad2      	subs	r2, r2, r3
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d006      	beq.n	800cf6c <sys_timeout+0xd8>
 800cf5e:	69fb      	ldr	r3, [r7, #28]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	685a      	ldr	r2, [r3, #4]
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d921      	bls.n	800cfb0 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d009      	beq.n	800cf88 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800cf74:	69fb      	ldr	r3, [r7, #28]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	6859      	ldr	r1, [r3, #4]
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	685a      	ldr	r2, [r3, #4]
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	1a8a      	subs	r2, r1, r2
 800cf84:	605a      	str	r2, [r3, #4]
 800cf86:	e00b      	b.n	800cfa0 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	68fa      	ldr	r2, [r7, #12]
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d206      	bcs.n	800cfa0 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800cf92:	4b10      	ldr	r3, [pc, #64]	; (800cfd4 <sys_timeout+0x140>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	685a      	ldr	r2, [r3, #4]
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	441a      	add	r2, r3
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	681a      	ldr	r2, [r3, #0]
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	697a      	ldr	r2, [r7, #20]
 800cfac:	601a      	str	r2, [r3, #0]
        break;
 800cfae:	e007      	b.n	800cfc0 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	61fb      	str	r3, [r7, #28]
 800cfb6:	69fb      	ldr	r3, [r7, #28]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1c5      	bne.n	800cf48 <sys_timeout+0xb4>
 800cfbc:	e000      	b.n	800cfc0 <sys_timeout+0x12c>
    return;
 800cfbe:	bf00      	nop
      }
    }
  }
}
 800cfc0:	3720      	adds	r7, #32
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	08017bb4 	.word	0x08017bb4
 800cfcc:	08017be8 	.word	0x08017be8
 800cfd0:	08017c28 	.word	0x08017c28
 800cfd4:	20007edc 	.word	0x20007edc
 800cfd8:	20007ee0 	.word	0x20007ee0

0800cfdc <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b086      	sub	sp, #24
 800cfe0:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800cfe2:	4b24      	ldr	r3, [pc, #144]	; (800d074 <sys_check_timeouts+0x98>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d040      	beq.n	800d06c <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800cfea:	f7f9 fd61 	bl	8006ab0 <sys_now>
 800cfee:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800cff0:	4b21      	ldr	r3, [pc, #132]	; (800d078 <sys_check_timeouts+0x9c>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	1ad3      	subs	r3, r2, r3
 800cff8:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800cffa:	4b20      	ldr	r3, [pc, #128]	; (800d07c <sys_check_timeouts+0xa0>)
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	2b00      	cmp	r3, #0
 800d002:	d001      	beq.n	800d008 <sys_check_timeouts+0x2c>
 800d004:	f7fa fc0a 	bl	800781c <pbuf_free_ooseq>
      had_one = 0;
 800d008:	2300      	movs	r3, #0
 800d00a:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800d00c:	4b19      	ldr	r3, [pc, #100]	; (800d074 <sys_check_timeouts+0x98>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d026      	beq.n	800d066 <sys_check_timeouts+0x8a>
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	697a      	ldr	r2, [r7, #20]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d321      	bcc.n	800d066 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800d022:	2301      	movs	r3, #1
 800d024:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	685a      	ldr	r2, [r3, #4]
 800d02a:	4b13      	ldr	r3, [pc, #76]	; (800d078 <sys_check_timeouts+0x9c>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4413      	add	r3, r2
 800d030:	4a11      	ldr	r2, [pc, #68]	; (800d078 <sys_check_timeouts+0x9c>)
 800d032:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	697a      	ldr	r2, [r7, #20]
 800d03a:	1ad3      	subs	r3, r2, r3
 800d03c:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4a0c      	ldr	r2, [pc, #48]	; (800d074 <sys_check_timeouts+0x98>)
 800d044:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	689b      	ldr	r3, [r3, #8]
 800d04a:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d052:	68b9      	ldr	r1, [r7, #8]
 800d054:	2006      	movs	r0, #6
 800d056:	f7fa fa4b 	bl	80074f0 <memp_free>
        if (handler != NULL) {
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d002      	beq.n	800d066 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6838      	ldr	r0, [r7, #0]
 800d064:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800d066:	7cfb      	ldrb	r3, [r7, #19]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d1c6      	bne.n	800cffa <sys_check_timeouts+0x1e>
  }
}
 800d06c:	bf00      	nop
 800d06e:	3718      	adds	r7, #24
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	20007edc 	.word	0x20007edc
 800d078:	20007ee0 	.word	0x20007ee0
 800d07c:	20007db1 	.word	0x20007db1

0800d080 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d080:	b480      	push	{r7}
 800d082:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800d084:	bf00      	nop
 800d086:	46bd      	mov	sp, r7
 800d088:	bc80      	pop	{r7}
 800d08a:	4770      	bx	lr

0800d08c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800d092:	2300      	movs	r3, #0
 800d094:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d096:	4b17      	ldr	r3, [pc, #92]	; (800d0f4 <udp_new_port+0x68>)
 800d098:	881b      	ldrh	r3, [r3, #0]
 800d09a:	1c5a      	adds	r2, r3, #1
 800d09c:	b291      	uxth	r1, r2
 800d09e:	4a15      	ldr	r2, [pc, #84]	; (800d0f4 <udp_new_port+0x68>)
 800d0a0:	8011      	strh	r1, [r2, #0]
 800d0a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d103      	bne.n	800d0b2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d0aa:	4b12      	ldr	r3, [pc, #72]	; (800d0f4 <udp_new_port+0x68>)
 800d0ac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d0b0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0b2:	4b11      	ldr	r3, [pc, #68]	; (800d0f8 <udp_new_port+0x6c>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	603b      	str	r3, [r7, #0]
 800d0b8:	e011      	b.n	800d0de <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	8a5a      	ldrh	r2, [r3, #18]
 800d0be:	4b0d      	ldr	r3, [pc, #52]	; (800d0f4 <udp_new_port+0x68>)
 800d0c0:	881b      	ldrh	r3, [r3, #0]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d108      	bne.n	800d0d8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d0c6:	88fb      	ldrh	r3, [r7, #6]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	80fb      	strh	r3, [r7, #6]
 800d0cc:	88fb      	ldrh	r3, [r7, #6]
 800d0ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0d2:	d3e0      	bcc.n	800d096 <udp_new_port+0xa>
        return 0;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	e007      	b.n	800d0e8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	603b      	str	r3, [r7, #0]
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d1ea      	bne.n	800d0ba <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800d0e4:	4b03      	ldr	r3, [pc, #12]	; (800d0f4 <udp_new_port+0x68>)
 800d0e6:	881b      	ldrh	r3, [r3, #0]
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	370c      	adds	r7, #12
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bc80      	pop	{r7}
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	20000034 	.word	0x20000034
 800d0f8:	20007ee8 	.word	0x20007ee8

0800d0fc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b085      	sub	sp, #20
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	4613      	mov	r3, r2
 800d108:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d10a:	79fb      	ldrb	r3, [r7, #7]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d018      	beq.n	800d142 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d013      	beq.n	800d13e <udp_input_local_match+0x42>
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d00f      	beq.n	800d13e <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d11e:	4b13      	ldr	r3, [pc, #76]	; (800d16c <udp_input_local_match+0x70>)
 800d120:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d122:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d126:	d00a      	beq.n	800d13e <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	4b0f      	ldr	r3, [pc, #60]	; (800d16c <udp_input_local_match+0x70>)
 800d12e:	695b      	ldr	r3, [r3, #20]
 800d130:	405a      	eors	r2, r3
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	3308      	adds	r3, #8
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d110      	bne.n	800d160 <udp_input_local_match+0x64>
          return 1;
 800d13e:	2301      	movs	r3, #1
 800d140:	e00f      	b.n	800d162 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d009      	beq.n	800d15c <udp_input_local_match+0x60>
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d005      	beq.n	800d15c <udp_input_local_match+0x60>
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	4b05      	ldr	r3, [pc, #20]	; (800d16c <udp_input_local_match+0x70>)
 800d156:	695b      	ldr	r3, [r3, #20]
 800d158:	429a      	cmp	r2, r3
 800d15a:	d101      	bne.n	800d160 <udp_input_local_match+0x64>
      return 1;
 800d15c:	2301      	movs	r3, #1
 800d15e:	e000      	b.n	800d162 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800d160:	2300      	movs	r3, #0
}
 800d162:	4618      	mov	r0, r3
 800d164:	3714      	adds	r7, #20
 800d166:	46bd      	mov	sp, r7
 800d168:	bc80      	pop	{r7}
 800d16a:	4770      	bx	lr
 800d16c:	200047ec 	.word	0x200047ec

0800d170 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d170:	b590      	push	{r4, r7, lr}
 800d172:	b08d      	sub	sp, #52	; 0x34
 800d174:	af02      	add	r7, sp, #8
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d17a:	2300      	movs	r3, #0
 800d17c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
 800d17e:	4b85      	ldr	r3, [pc, #532]	; (800d394 <udp_input+0x224>)
 800d180:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800d184:	3301      	adds	r3, #1
 800d186:	b29a      	uxth	r2, r3
 800d188:	4b82      	ldr	r3, [pc, #520]	; (800d394 <udp_input+0x224>)
 800d18a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	895b      	ldrh	r3, [r3, #10]
 800d192:	2b07      	cmp	r3, #7
 800d194:	d813      	bhi.n	800d1be <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 800d196:	4b7f      	ldr	r3, [pc, #508]	; (800d394 <udp_input+0x224>)
 800d198:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d19c:	3301      	adds	r3, #1
 800d19e:	b29a      	uxth	r2, r3
 800d1a0:	4b7c      	ldr	r3, [pc, #496]	; (800d394 <udp_input+0x224>)
 800d1a2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 800d1a6:	4b7b      	ldr	r3, [pc, #492]	; (800d394 <udp_input+0x224>)
 800d1a8:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	4b78      	ldr	r3, [pc, #480]	; (800d394 <udp_input+0x224>)
 800d1b2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f7fa fed8 	bl	8007f6c <pbuf_free>
    goto end;
 800d1bc:	e0e5      	b.n	800d38a <udp_input+0x21a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d1c4:	4b74      	ldr	r3, [pc, #464]	; (800d398 <udp_input+0x228>)
 800d1c6:	695b      	ldr	r3, [r3, #20]
 800d1c8:	4a73      	ldr	r2, [pc, #460]	; (800d398 <udp_input+0x228>)
 800d1ca:	6812      	ldr	r2, [r2, #0]
 800d1cc:	4611      	mov	r1, r2
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f001 ff8c 	bl	800f0ec <ip4_addr_isbroadcast_u32>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	881b      	ldrh	r3, [r3, #0]
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7f9 fcf3 	bl	8006bca <lwip_htons>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	885b      	ldrh	r3, [r3, #2]
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7f9 fceb 	bl	8006bca <lwip_htons>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d200:	2300      	movs	r3, #0
 800d202:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d204:	4b65      	ldr	r3, [pc, #404]	; (800d39c <udp_input+0x22c>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	627b      	str	r3, [r7, #36]	; 0x24
 800d20a:	e044      	b.n	800d296 <udp_input+0x126>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20e:	8a5b      	ldrh	r3, [r3, #18]
 800d210:	89fa      	ldrh	r2, [r7, #14]
 800d212:	429a      	cmp	r2, r3
 800d214:	d13a      	bne.n	800d28c <udp_input+0x11c>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d216:	7cfb      	ldrb	r3, [r7, #19]
 800d218:	461a      	mov	r2, r3
 800d21a:	6839      	ldr	r1, [r7, #0]
 800d21c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d21e:	f7ff ff6d 	bl	800d0fc <udp_input_local_match>
 800d222:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d224:	2b00      	cmp	r3, #0
 800d226:	d031      	beq.n	800d28c <udp_input+0x11c>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800d228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22a:	7c1b      	ldrb	r3, [r3, #16]
 800d22c:	f003 0304 	and.w	r3, r3, #4
 800d230:	2b00      	cmp	r3, #0
 800d232:	d104      	bne.n	800d23e <udp_input+0xce>
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d101      	bne.n	800d23e <udp_input+0xce>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800d23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23c:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d240:	8a9b      	ldrh	r3, [r3, #20]
 800d242:	8a3a      	ldrh	r2, [r7, #16]
 800d244:	429a      	cmp	r2, r3
 800d246:	d121      	bne.n	800d28c <udp_input+0x11c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24a:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d005      	beq.n	800d25c <udp_input+0xec>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d252:	685a      	ldr	r2, [r3, #4]
 800d254:	4b50      	ldr	r3, [pc, #320]	; (800d398 <udp_input+0x228>)
 800d256:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d258:	429a      	cmp	r2, r3
 800d25a:	d117      	bne.n	800d28c <udp_input+0x11c>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d25c:	6a3b      	ldr	r3, [r7, #32]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d00b      	beq.n	800d27a <udp_input+0x10a>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d264:	68da      	ldr	r2, [r3, #12]
 800d266:	6a3b      	ldr	r3, [r7, #32]
 800d268:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d26a:	4b4c      	ldr	r3, [pc, #304]	; (800d39c <udp_input+0x22c>)
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d270:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d272:	4a4a      	ldr	r2, [pc, #296]	; (800d39c <udp_input+0x22c>)
 800d274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d276:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d278:	e010      	b.n	800d29c <udp_input+0x12c>
          UDP_STATS_INC(udp.cachehit);
 800d27a:	4b46      	ldr	r3, [pc, #280]	; (800d394 <udp_input+0x224>)
 800d27c:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800d280:	3301      	adds	r3, #1
 800d282:	b29a      	uxth	r2, r3
 800d284:	4b43      	ldr	r3, [pc, #268]	; (800d394 <udp_input+0x224>)
 800d286:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        break;
 800d28a:	e007      	b.n	800d29c <udp_input+0x12c>
      }
    }

    prev = pcb;
 800d28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	627b      	str	r3, [r7, #36]	; 0x24
 800d296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d1b7      	bne.n	800d20c <udp_input+0x9c>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d101      	bne.n	800d2a6 <udp_input+0x136>
    pcb = uncon_pcb;
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d002      	beq.n	800d2b2 <udp_input+0x142>
    for_us = 1;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	76fb      	strb	r3, [r7, #27]
 800d2b0:	e00a      	b.n	800d2c8 <udp_input+0x158>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	3304      	adds	r3, #4
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	4b37      	ldr	r3, [pc, #220]	; (800d398 <udp_input+0x228>)
 800d2ba:	695b      	ldr	r3, [r3, #20]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	bf0c      	ite	eq
 800d2c0:	2301      	moveq	r3, #1
 800d2c2:	2300      	movne	r3, #0
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d2c8:	7efb      	ldrb	r3, [r7, #27]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d05a      	beq.n	800d384 <udp_input+0x214>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800d2ce:	f06f 0107 	mvn.w	r1, #7
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f7fa fe26 	bl	8007f24 <pbuf_header>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d012      	beq.n	800d304 <udp_input+0x194>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800d2de:	4b30      	ldr	r3, [pc, #192]	; (800d3a0 <udp_input+0x230>)
 800d2e0:	f240 1255 	movw	r2, #341	; 0x155
 800d2e4:	492f      	ldr	r1, [pc, #188]	; (800d3a4 <udp_input+0x234>)
 800d2e6:	4830      	ldr	r0, [pc, #192]	; (800d3a8 <udp_input+0x238>)
 800d2e8:	f005 fb8a 	bl	8012a00 <iprintf>
      UDP_STATS_INC(udp.drop);
 800d2ec:	4b29      	ldr	r3, [pc, #164]	; (800d394 <udp_input+0x224>)
 800d2ee:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	4b27      	ldr	r3, [pc, #156]	; (800d394 <udp_input+0x224>)
 800d2f8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f7fa fe35 	bl	8007f6c <pbuf_free>
      goto end;
 800d302:	e042      	b.n	800d38a <udp_input+0x21a>
    }

    if (pcb != NULL) {
 800d304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d306:	2b00      	cmp	r3, #0
 800d308:	d012      	beq.n	800d330 <udp_input+0x1c0>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30c:	699b      	ldr	r3, [r3, #24]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d00a      	beq.n	800d328 <udp_input+0x1b8>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d314:	699c      	ldr	r4, [r3, #24]
 800d316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d318:	69d8      	ldr	r0, [r3, #28]
 800d31a:	8a3b      	ldrh	r3, [r7, #16]
 800d31c:	9300      	str	r3, [sp, #0]
 800d31e:	4b23      	ldr	r3, [pc, #140]	; (800d3ac <udp_input+0x23c>)
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d324:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d326:	e031      	b.n	800d38c <udp_input+0x21c>
        pbuf_free(p);
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f7fa fe1f 	bl	8007f6c <pbuf_free>
        goto end;
 800d32e:	e02c      	b.n	800d38a <udp_input+0x21a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d330:	7cfb      	ldrb	r3, [r7, #19]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d112      	bne.n	800d35c <udp_input+0x1ec>
 800d336:	4b18      	ldr	r3, [pc, #96]	; (800d398 <udp_input+0x228>)
 800d338:	695b      	ldr	r3, [r3, #20]
 800d33a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d33e:	2be0      	cmp	r3, #224	; 0xe0
 800d340:	d00c      	beq.n	800d35c <udp_input+0x1ec>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d342:	4b15      	ldr	r3, [pc, #84]	; (800d398 <udp_input+0x228>)
 800d344:	899b      	ldrh	r3, [r3, #12]
 800d346:	3308      	adds	r3, #8
 800d348:	b29b      	uxth	r3, r3
 800d34a:	b21b      	sxth	r3, r3
 800d34c:	4619      	mov	r1, r3
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f7fa fdfa 	bl	8007f48 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d354:	2103      	movs	r1, #3
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f001 fb50 	bl	800e9fc <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 800d35c:	4b0d      	ldr	r3, [pc, #52]	; (800d394 <udp_input+0x224>)
 800d35e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800d362:	3301      	adds	r3, #1
 800d364:	b29a      	uxth	r2, r3
 800d366:	4b0b      	ldr	r3, [pc, #44]	; (800d394 <udp_input+0x224>)
 800d368:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
 800d36c:	4b09      	ldr	r3, [pc, #36]	; (800d394 <udp_input+0x224>)
 800d36e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800d372:	3301      	adds	r3, #1
 800d374:	b29a      	uxth	r2, r3
 800d376:	4b07      	ldr	r3, [pc, #28]	; (800d394 <udp_input+0x224>)
 800d378:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      pbuf_free(p);
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f7fa fdf5 	bl	8007f6c <pbuf_free>
  return;
 800d382:	e003      	b.n	800d38c <udp_input+0x21c>
    pbuf_free(p);
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f7fa fdf1 	bl	8007f6c <pbuf_free>
  return;
 800d38a:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d38c:	372c      	adds	r7, #44	; 0x2c
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd90      	pop	{r4, r7, pc}
 800d392:	bf00      	nop
 800d394:	20007db4 	.word	0x20007db4
 800d398:	200047ec 	.word	0x200047ec
 800d39c:	20007ee8 	.word	0x20007ee8
 800d3a0:	08017c50 	.word	0x08017c50
 800d3a4:	08017c80 	.word	0x08017c80
 800d3a8:	08017c94 	.word	0x08017c94
 800d3ac:	200047fc 	.word	0x200047fc

0800d3b0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b082      	sub	sp, #8
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d102      	bne.n	800d3c6 <udp_send+0x16>
    return ERR_VAL;
 800d3c0:	f06f 0305 	mvn.w	r3, #5
 800d3c4:	e008      	b.n	800d3d8 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	1d1a      	adds	r2, r3, #4
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	8a9b      	ldrh	r3, [r3, #20]
 800d3ce:	6839      	ldr	r1, [r7, #0]
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f000 f805 	bl	800d3e0 <udp_sendto>
 800d3d6:	4603      	mov	r3, r0
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3708      	adds	r7, #8
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b088      	sub	sp, #32
 800d3e4:	af02      	add	r7, sp, #8
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
 800d3ec:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d002      	beq.n	800d3fe <udp_sendto+0x1e>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d102      	bne.n	800d404 <udp_sendto+0x24>
    return ERR_VAL;
 800d3fe:	f06f 0305 	mvn.w	r3, #5
 800d402:	e01b      	b.n	800d43c <udp_sendto+0x5c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800d404:	6978      	ldr	r0, [r7, #20]
 800d406:	f001 fb8b 	bl	800eb20 <ip4_route>
 800d40a:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d10a      	bne.n	800d428 <udp_sendto+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 800d412:	4b0c      	ldr	r3, [pc, #48]	; (800d444 <udp_sendto+0x64>)
 800d414:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d418:	3301      	adds	r3, #1
 800d41a:	b29a      	uxth	r2, r3
 800d41c:	4b09      	ldr	r3, [pc, #36]	; (800d444 <udp_sendto+0x64>)
 800d41e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    return ERR_RTE;
 800d422:	f06f 0303 	mvn.w	r3, #3
 800d426:	e009      	b.n	800d43c <udp_sendto+0x5c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800d428:	887a      	ldrh	r2, [r7, #2]
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	9300      	str	r3, [sp, #0]
 800d42e:	4613      	mov	r3, r2
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	68b9      	ldr	r1, [r7, #8]
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f000 f807 	bl	800d448 <udp_sendto_if>
 800d43a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3718      	adds	r7, #24
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	20007db4 	.word	0x20007db4

0800d448 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b088      	sub	sp, #32
 800d44c:	af02      	add	r7, sp, #8
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	607a      	str	r2, [r7, #4]
 800d454:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d002      	beq.n	800d462 <udp_sendto_if+0x1a>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d102      	bne.n	800d468 <udp_sendto_if+0x20>
    return ERR_VAL;
 800d462:	f06f 0305 	mvn.w	r3, #5
 800d466:	e028      	b.n	800d4ba <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d009      	beq.n	800d482 <udp_sendto_if+0x3a>
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d005      	beq.n	800d482 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d47e:	2be0      	cmp	r3, #224	; 0xe0
 800d480:	d103      	bne.n	800d48a <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800d482:	6a3b      	ldr	r3, [r7, #32]
 800d484:	3304      	adds	r3, #4
 800d486:	617b      	str	r3, [r7, #20]
 800d488:	e00b      	b.n	800d4a2 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	6a3b      	ldr	r3, [r7, #32]
 800d490:	3304      	adds	r3, #4
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	429a      	cmp	r2, r3
 800d496:	d002      	beq.n	800d49e <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800d498:	f06f 0303 	mvn.w	r3, #3
 800d49c:	e00d      	b.n	800d4ba <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d4a2:	887a      	ldrh	r2, [r7, #2]
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	9301      	str	r3, [sp, #4]
 800d4a8:	6a3b      	ldr	r3, [r7, #32]
 800d4aa:	9300      	str	r3, [sp, #0]
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	687a      	ldr	r2, [r7, #4]
 800d4b0:	68b9      	ldr	r1, [r7, #8]
 800d4b2:	68f8      	ldr	r0, [r7, #12]
 800d4b4:	f000 f806 	bl	800d4c4 <udp_sendto_if_src>
 800d4b8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3718      	adds	r7, #24
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
	...

0800d4c4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b08c      	sub	sp, #48	; 0x30
 800d4c8:	af04      	add	r7, sp, #16
 800d4ca:	60f8      	str	r0, [r7, #12]
 800d4cc:	60b9      	str	r1, [r7, #8]
 800d4ce:	607a      	str	r2, [r7, #4]
 800d4d0:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d002      	beq.n	800d4de <udp_sendto_if_src+0x1a>
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d102      	bne.n	800d4e4 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800d4de:	f06f 0305 	mvn.w	r3, #5
 800d4e2:	e086      	b.n	800d5f2 <udp_sendto_if_src+0x12e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	8a5b      	ldrh	r3, [r3, #18]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10f      	bne.n	800d50c <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d4ec:	68f9      	ldr	r1, [r7, #12]
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	8a5b      	ldrh	r3, [r3, #18]
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f000 f889 	bl	800d60c <udp_bind>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800d4fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d002      	beq.n	800d50c <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800d506:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d50a:	e072      	b.n	800d5f2 <udp_sendto_if_src+0x12e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800d50c:	2108      	movs	r1, #8
 800d50e:	68b8      	ldr	r0, [r7, #8]
 800d510:	f7fa fd08 	bl	8007f24 <pbuf_header>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d014      	beq.n	800d544 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d51a:	2200      	movs	r2, #0
 800d51c:	2108      	movs	r1, #8
 800d51e:	2001      	movs	r0, #1
 800d520:	f7fa f9ac 	bl	800787c <pbuf_alloc>
 800d524:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d102      	bne.n	800d532 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800d52c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d530:	e05f      	b.n	800d5f2 <udp_sendto_if_src+0x12e>
    }
    if (p->tot_len != 0) {
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	891b      	ldrh	r3, [r3, #8]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d006      	beq.n	800d548 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800d53a:	68b9      	ldr	r1, [r7, #8]
 800d53c:	69f8      	ldr	r0, [r7, #28]
 800d53e:	f7fa fe37 	bl	80081b0 <pbuf_chain>
 800d542:	e001      	b.n	800d548 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	895b      	ldrh	r3, [r3, #10]
 800d54c:	2b07      	cmp	r3, #7
 800d54e:	d806      	bhi.n	800d55e <udp_sendto_if_src+0x9a>
 800d550:	4b2a      	ldr	r3, [pc, #168]	; (800d5fc <udp_sendto_if_src+0x138>)
 800d552:	f240 22db 	movw	r2, #731	; 0x2db
 800d556:	492a      	ldr	r1, [pc, #168]	; (800d600 <udp_sendto_if_src+0x13c>)
 800d558:	482a      	ldr	r0, [pc, #168]	; (800d604 <udp_sendto_if_src+0x140>)
 800d55a:	f005 fa51 	bl	8012a00 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800d55e:	69fb      	ldr	r3, [r7, #28]
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	8a5b      	ldrh	r3, [r3, #18]
 800d568:	4618      	mov	r0, r3
 800d56a:	f7f9 fb2e 	bl	8006bca <lwip_htons>
 800d56e:	4603      	mov	r3, r0
 800d570:	461a      	mov	r2, r3
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d576:	887b      	ldrh	r3, [r7, #2]
 800d578:	4618      	mov	r0, r3
 800d57a:	f7f9 fb26 	bl	8006bca <lwip_htons>
 800d57e:	4603      	mov	r3, r0
 800d580:	461a      	mov	r2, r3
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	2200      	movs	r2, #0
 800d58a:	719a      	strb	r2, [r3, #6]
 800d58c:	2200      	movs	r2, #0
 800d58e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800d590:	69fb      	ldr	r3, [r7, #28]
 800d592:	891b      	ldrh	r3, [r3, #8]
 800d594:	4618      	mov	r0, r3
 800d596:	f7f9 fb18 	bl	8006bca <lwip_htons>
 800d59a:	4603      	mov	r3, r0
 800d59c:	461a      	mov	r2, r3
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800d5a2:	2311      	movs	r3, #17
 800d5a4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	7a9b      	ldrb	r3, [r3, #10]
 800d5aa:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	7a5b      	ldrb	r3, [r3, #9]
 800d5b0:	7cb9      	ldrb	r1, [r7, #18]
 800d5b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5b4:	9202      	str	r2, [sp, #8]
 800d5b6:	7cfa      	ldrb	r2, [r7, #19]
 800d5b8:	9201      	str	r2, [sp, #4]
 800d5ba:	9300      	str	r3, [sp, #0]
 800d5bc:	460b      	mov	r3, r1
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5c2:	69f8      	ldr	r0, [r7, #28]
 800d5c4:	f001 fcd8 	bl	800ef78 <ip4_output_if_src>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800d5cc:	69fa      	ldr	r2, [r7, #28]
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d004      	beq.n	800d5de <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800d5d4:	69f8      	ldr	r0, [r7, #28]
 800d5d6:	f7fa fcc9 	bl	8007f6c <pbuf_free>
    q = NULL;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 800d5de:	4b0a      	ldr	r3, [pc, #40]	; (800d608 <udp_sendto_if_src+0x144>)
 800d5e0:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	b29a      	uxth	r2, r3
 800d5e8:	4b07      	ldr	r3, [pc, #28]	; (800d608 <udp_sendto_if_src+0x144>)
 800d5ea:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
  return err;
 800d5ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3720      	adds	r7, #32
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	08017c50 	.word	0x08017c50
 800d600:	08017cbc 	.word	0x08017cbc
 800d604:	08017c94 	.word	0x08017c94
 800d608:	20007db4 	.word	0x20007db4

0800d60c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b086      	sub	sp, #24
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	4613      	mov	r3, r2
 800d618:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d101      	bne.n	800d624 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800d620:	4b30      	ldr	r3, [pc, #192]	; (800d6e4 <udp_bind+0xd8>)
 800d622:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d002      	beq.n	800d630 <udp_bind+0x24>
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d102      	bne.n	800d636 <udp_bind+0x2a>
    return ERR_VAL;
 800d630:	f06f 0305 	mvn.w	r3, #5
 800d634:	e052      	b.n	800d6dc <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d636:	2300      	movs	r3, #0
 800d638:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d63a:	4b2b      	ldr	r3, [pc, #172]	; (800d6e8 <udp_bind+0xdc>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	617b      	str	r3, [r7, #20]
 800d640:	e009      	b.n	800d656 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d642:	68fa      	ldr	r2, [r7, #12]
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	429a      	cmp	r2, r3
 800d648:	d102      	bne.n	800d650 <udp_bind+0x44>
      rebind = 1;
 800d64a:	2301      	movs	r3, #1
 800d64c:	74fb      	strb	r3, [r7, #19]
      break;
 800d64e:	e005      	b.n	800d65c <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	68db      	ldr	r3, [r3, #12]
 800d654:	617b      	str	r3, [r7, #20]
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d1f2      	bne.n	800d642 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800d65c:	88fb      	ldrh	r3, [r7, #6]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d109      	bne.n	800d676 <udp_bind+0x6a>
    port = udp_new_port();
 800d662:	f7ff fd13 	bl	800d08c <udp_new_port>
 800d666:	4603      	mov	r3, r0
 800d668:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d66a:	88fb      	ldrh	r3, [r7, #6]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d11e      	bne.n	800d6ae <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d670:	f06f 0307 	mvn.w	r3, #7
 800d674:	e032      	b.n	800d6dc <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d676:	4b1c      	ldr	r3, [pc, #112]	; (800d6e8 <udp_bind+0xdc>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	617b      	str	r3, [r7, #20]
 800d67c:	e014      	b.n	800d6a8 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800d67e:	68fa      	ldr	r2, [r7, #12]
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	429a      	cmp	r2, r3
 800d684:	d00d      	beq.n	800d6a2 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	8a5b      	ldrh	r3, [r3, #18]
 800d68a:	88fa      	ldrh	r2, [r7, #6]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d108      	bne.n	800d6a2 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d698:	429a      	cmp	r2, r3
 800d69a:	d102      	bne.n	800d6a2 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800d69c:	f06f 0307 	mvn.w	r3, #7
 800d6a0:	e01c      	b.n	800d6dc <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	617b      	str	r3, [r7, #20]
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d1e7      	bne.n	800d67e <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d002      	beq.n	800d6ba <udp_bind+0xae>
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	e000      	b.n	800d6bc <udp_bind+0xb0>
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	68fa      	ldr	r2, [r7, #12]
 800d6be:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	88fa      	ldrh	r2, [r7, #6]
 800d6c4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d6c6:	7cfb      	ldrb	r3, [r7, #19]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d106      	bne.n	800d6da <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d6cc:	4b06      	ldr	r3, [pc, #24]	; (800d6e8 <udp_bind+0xdc>)
 800d6ce:	681a      	ldr	r2, [r3, #0]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d6d4:	4a04      	ldr	r2, [pc, #16]	; (800d6e8 <udp_bind+0xdc>)
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d6da:	2300      	movs	r3, #0
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3718      	adds	r7, #24
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}
 800d6e4:	0801846c 	.word	0x0801846c
 800d6e8:	20007ee8 	.word	0x20007ee8

0800d6ec <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b086      	sub	sp, #24
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	4613      	mov	r3, r2
 800d6f8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d002      	beq.n	800d706 <udp_connect+0x1a>
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d102      	bne.n	800d70c <udp_connect+0x20>
    return ERR_VAL;
 800d706:	f06f 0305 	mvn.w	r3, #5
 800d70a:	e03e      	b.n	800d78a <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	8a5b      	ldrh	r3, [r3, #18]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d10f      	bne.n	800d734 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d714:	68f9      	ldr	r1, [r7, #12]
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	8a5b      	ldrh	r3, [r3, #18]
 800d71a:	461a      	mov	r2, r3
 800d71c:	68f8      	ldr	r0, [r7, #12]
 800d71e:	f7ff ff75 	bl	800d60c <udp_bind>
 800d722:	4603      	mov	r3, r0
 800d724:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d726:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d002      	beq.n	800d734 <udp_connect+0x48>
      return err;
 800d72e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d732:	e02a      	b.n	800d78a <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d002      	beq.n	800d740 <udp_connect+0x54>
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	e000      	b.n	800d742 <udp_connect+0x56>
 800d740:	2300      	movs	r3, #0
 800d742:	68fa      	ldr	r2, [r7, #12]
 800d744:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	88fa      	ldrh	r2, [r7, #6]
 800d74a:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	7c1b      	ldrb	r3, [r3, #16]
 800d750:	f043 0304 	orr.w	r3, r3, #4
 800d754:	b2da      	uxtb	r2, r3
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d75a:	4b0e      	ldr	r3, [pc, #56]	; (800d794 <udp_connect+0xa8>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	617b      	str	r3, [r7, #20]
 800d760:	e008      	b.n	800d774 <udp_connect+0x88>
    if (pcb == ipcb) {
 800d762:	68fa      	ldr	r2, [r7, #12]
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	429a      	cmp	r2, r3
 800d768:	d101      	bne.n	800d76e <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800d76a:	2300      	movs	r3, #0
 800d76c:	e00d      	b.n	800d78a <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	68db      	ldr	r3, [r3, #12]
 800d772:	617b      	str	r3, [r7, #20]
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d1f3      	bne.n	800d762 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800d77a:	4b06      	ldr	r3, [pc, #24]	; (800d794 <udp_connect+0xa8>)
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800d782:	4a04      	ldr	r2, [pc, #16]	; (800d794 <udp_connect+0xa8>)
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800d788:	2300      	movs	r3, #0
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3718      	adds	r7, #24
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
 800d792:	bf00      	nop
 800d794:	20007ee8 	.word	0x20007ee8

0800d798 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	829a      	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	7c1b      	ldrb	r3, [r3, #16]
 800d7b0:	f023 0304 	bic.w	r3, r3, #4
 800d7b4:	b2da      	uxtb	r2, r3
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	741a      	strb	r2, [r3, #16]
}
 800d7ba:	bf00      	nop
 800d7bc:	370c      	adds	r7, #12
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bc80      	pop	{r7}
 800d7c2:	4770      	bx	lr

0800d7c4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b085      	sub	sp, #20
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	68ba      	ldr	r2, [r7, #8]
 800d7d4:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	61da      	str	r2, [r3, #28]
}
 800d7dc:	bf00      	nop
 800d7de:	3714      	adds	r7, #20
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bc80      	pop	{r7}
 800d7e4:	4770      	bx	lr
	...

0800d7e8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d7f0:	4b15      	ldr	r3, [pc, #84]	; (800d848 <udp_remove+0x60>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d105      	bne.n	800d806 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800d7fa:	4b13      	ldr	r3, [pc, #76]	; (800d848 <udp_remove+0x60>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	4a11      	ldr	r2, [pc, #68]	; (800d848 <udp_remove+0x60>)
 800d802:	6013      	str	r3, [r2, #0]
 800d804:	e017      	b.n	800d836 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d806:	4b10      	ldr	r3, [pc, #64]	; (800d848 <udp_remove+0x60>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	60fb      	str	r3, [r7, #12]
 800d80c:	e010      	b.n	800d830 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d009      	beq.n	800d82a <udp_remove+0x42>
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	687a      	ldr	r2, [r7, #4]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d104      	bne.n	800d82a <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	68da      	ldr	r2, [r3, #12]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	60da      	str	r2, [r3, #12]
        break;
 800d828:	e005      	b.n	800d836 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	60fb      	str	r3, [r7, #12]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d1eb      	bne.n	800d80e <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d836:	6879      	ldr	r1, [r7, #4]
 800d838:	2000      	movs	r0, #0
 800d83a:	f7f9 fe59 	bl	80074f0 <memp_free>
}
 800d83e:	bf00      	nop
 800d840:	3710      	adds	r7, #16
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	20007ee8 	.word	0x20007ee8

0800d84c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d852:	2000      	movs	r0, #0
 800d854:	f7f9 fdfa 	bl	800744c <memp_malloc>
 800d858:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d007      	beq.n	800d870 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d860:	2220      	movs	r2, #32
 800d862:	2100      	movs	r1, #0
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f004 fa55 	bl	8011d14 <memset>
    pcb->ttl = UDP_TTL;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	22ff      	movs	r2, #255	; 0xff
 800d86e:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800d870:	687b      	ldr	r3, [r7, #4]
}
 800d872:	4618      	mov	r0, r3
 800d874:	3708      	adds	r7, #8
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
	...

0800d87c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d01e      	beq.n	800d8ca <udp_netif_ip_addr_changed+0x4e>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d01a      	beq.n	800d8ca <udp_netif_ip_addr_changed+0x4e>
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d017      	beq.n	800d8ca <udp_netif_ip_addr_changed+0x4e>
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d013      	beq.n	800d8ca <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d8a2:	4b0c      	ldr	r3, [pc, #48]	; (800d8d4 <udp_netif_ip_addr_changed+0x58>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	60fb      	str	r3, [r7, #12]
 800d8a8:	e00c      	b.n	800d8c4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d103      	bne.n	800d8be <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	68db      	ldr	r3, [r3, #12]
 800d8c2:	60fb      	str	r3, [r7, #12]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d1ef      	bne.n	800d8aa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d8ca:	bf00      	nop
 800d8cc:	3714      	adds	r7, #20
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bc80      	pop	{r7}
 800d8d2:	4770      	bx	lr
 800d8d4:	20007ee8 	.word	0x20007ee8

0800d8d8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d8e0:	4915      	ldr	r1, [pc, #84]	; (800d938 <etharp_free_entry+0x60>)
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	4613      	mov	r3, r2
 800d8e6:	005b      	lsls	r3, r3, #1
 800d8e8:	4413      	add	r3, r2
 800d8ea:	00db      	lsls	r3, r3, #3
 800d8ec:	440b      	add	r3, r1
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d013      	beq.n	800d91c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d8f4:	4910      	ldr	r1, [pc, #64]	; (800d938 <etharp_free_entry+0x60>)
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	4613      	mov	r3, r2
 800d8fa:	005b      	lsls	r3, r3, #1
 800d8fc:	4413      	add	r3, r2
 800d8fe:	00db      	lsls	r3, r3, #3
 800d900:	440b      	add	r3, r1
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4618      	mov	r0, r3
 800d906:	f7fa fb31 	bl	8007f6c <pbuf_free>
    arp_table[i].q = NULL;
 800d90a:	490b      	ldr	r1, [pc, #44]	; (800d938 <etharp_free_entry+0x60>)
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	4613      	mov	r3, r2
 800d910:	005b      	lsls	r3, r3, #1
 800d912:	4413      	add	r3, r2
 800d914:	00db      	lsls	r3, r3, #3
 800d916:	440b      	add	r3, r1
 800d918:	2200      	movs	r2, #0
 800d91a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d91c:	4906      	ldr	r1, [pc, #24]	; (800d938 <etharp_free_entry+0x60>)
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	4613      	mov	r3, r2
 800d922:	005b      	lsls	r3, r3, #1
 800d924:	4413      	add	r3, r2
 800d926:	00db      	lsls	r3, r3, #3
 800d928:	440b      	add	r3, r1
 800d92a:	3314      	adds	r3, #20
 800d92c:	2200      	movs	r2, #0
 800d92e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d930:	bf00      	nop
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	20007eec 	.word	0x20007eec

0800d93c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d942:	2300      	movs	r3, #0
 800d944:	71fb      	strb	r3, [r7, #7]
 800d946:	e096      	b.n	800da76 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d948:	79fa      	ldrb	r2, [r7, #7]
 800d94a:	494f      	ldr	r1, [pc, #316]	; (800da88 <etharp_tmr+0x14c>)
 800d94c:	4613      	mov	r3, r2
 800d94e:	005b      	lsls	r3, r3, #1
 800d950:	4413      	add	r3, r2
 800d952:	00db      	lsls	r3, r3, #3
 800d954:	440b      	add	r3, r1
 800d956:	3314      	adds	r3, #20
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800d95c:	79bb      	ldrb	r3, [r7, #6]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	f000 8086 	beq.w	800da70 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800d964:	79fa      	ldrb	r2, [r7, #7]
 800d966:	4948      	ldr	r1, [pc, #288]	; (800da88 <etharp_tmr+0x14c>)
 800d968:	4613      	mov	r3, r2
 800d96a:	005b      	lsls	r3, r3, #1
 800d96c:	4413      	add	r3, r2
 800d96e:	00db      	lsls	r3, r3, #3
 800d970:	440b      	add	r3, r1
 800d972:	3312      	adds	r3, #18
 800d974:	881b      	ldrh	r3, [r3, #0]
 800d976:	3301      	adds	r3, #1
 800d978:	b298      	uxth	r0, r3
 800d97a:	4943      	ldr	r1, [pc, #268]	; (800da88 <etharp_tmr+0x14c>)
 800d97c:	4613      	mov	r3, r2
 800d97e:	005b      	lsls	r3, r3, #1
 800d980:	4413      	add	r3, r2
 800d982:	00db      	lsls	r3, r3, #3
 800d984:	440b      	add	r3, r1
 800d986:	3312      	adds	r3, #18
 800d988:	4602      	mov	r2, r0
 800d98a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d98c:	79fa      	ldrb	r2, [r7, #7]
 800d98e:	493e      	ldr	r1, [pc, #248]	; (800da88 <etharp_tmr+0x14c>)
 800d990:	4613      	mov	r3, r2
 800d992:	005b      	lsls	r3, r3, #1
 800d994:	4413      	add	r3, r2
 800d996:	00db      	lsls	r3, r3, #3
 800d998:	440b      	add	r3, r1
 800d99a:	3312      	adds	r3, #18
 800d99c:	881b      	ldrh	r3, [r3, #0]
 800d99e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d9a2:	d215      	bcs.n	800d9d0 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d9a4:	79fa      	ldrb	r2, [r7, #7]
 800d9a6:	4938      	ldr	r1, [pc, #224]	; (800da88 <etharp_tmr+0x14c>)
 800d9a8:	4613      	mov	r3, r2
 800d9aa:	005b      	lsls	r3, r3, #1
 800d9ac:	4413      	add	r3, r2
 800d9ae:	00db      	lsls	r3, r3, #3
 800d9b0:	440b      	add	r3, r1
 800d9b2:	3314      	adds	r3, #20
 800d9b4:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d10f      	bne.n	800d9da <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d9ba:	79fa      	ldrb	r2, [r7, #7]
 800d9bc:	4932      	ldr	r1, [pc, #200]	; (800da88 <etharp_tmr+0x14c>)
 800d9be:	4613      	mov	r3, r2
 800d9c0:	005b      	lsls	r3, r3, #1
 800d9c2:	4413      	add	r3, r2
 800d9c4:	00db      	lsls	r3, r3, #3
 800d9c6:	440b      	add	r3, r1
 800d9c8:	3312      	adds	r3, #18
 800d9ca:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d9cc:	2b04      	cmp	r3, #4
 800d9ce:	d904      	bls.n	800d9da <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d9d0:	79fb      	ldrb	r3, [r7, #7]
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7ff ff80 	bl	800d8d8 <etharp_free_entry>
 800d9d8:	e04a      	b.n	800da70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d9da:	79fa      	ldrb	r2, [r7, #7]
 800d9dc:	492a      	ldr	r1, [pc, #168]	; (800da88 <etharp_tmr+0x14c>)
 800d9de:	4613      	mov	r3, r2
 800d9e0:	005b      	lsls	r3, r3, #1
 800d9e2:	4413      	add	r3, r2
 800d9e4:	00db      	lsls	r3, r3, #3
 800d9e6:	440b      	add	r3, r1
 800d9e8:	3314      	adds	r3, #20
 800d9ea:	781b      	ldrb	r3, [r3, #0]
 800d9ec:	2b03      	cmp	r3, #3
 800d9ee:	d10a      	bne.n	800da06 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d9f0:	79fa      	ldrb	r2, [r7, #7]
 800d9f2:	4925      	ldr	r1, [pc, #148]	; (800da88 <etharp_tmr+0x14c>)
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	005b      	lsls	r3, r3, #1
 800d9f8:	4413      	add	r3, r2
 800d9fa:	00db      	lsls	r3, r3, #3
 800d9fc:	440b      	add	r3, r1
 800d9fe:	3314      	adds	r3, #20
 800da00:	2204      	movs	r2, #4
 800da02:	701a      	strb	r2, [r3, #0]
 800da04:	e034      	b.n	800da70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800da06:	79fa      	ldrb	r2, [r7, #7]
 800da08:	491f      	ldr	r1, [pc, #124]	; (800da88 <etharp_tmr+0x14c>)
 800da0a:	4613      	mov	r3, r2
 800da0c:	005b      	lsls	r3, r3, #1
 800da0e:	4413      	add	r3, r2
 800da10:	00db      	lsls	r3, r3, #3
 800da12:	440b      	add	r3, r1
 800da14:	3314      	adds	r3, #20
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	2b04      	cmp	r3, #4
 800da1a:	d10a      	bne.n	800da32 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800da1c:	79fa      	ldrb	r2, [r7, #7]
 800da1e:	491a      	ldr	r1, [pc, #104]	; (800da88 <etharp_tmr+0x14c>)
 800da20:	4613      	mov	r3, r2
 800da22:	005b      	lsls	r3, r3, #1
 800da24:	4413      	add	r3, r2
 800da26:	00db      	lsls	r3, r3, #3
 800da28:	440b      	add	r3, r1
 800da2a:	3314      	adds	r3, #20
 800da2c:	2202      	movs	r2, #2
 800da2e:	701a      	strb	r2, [r3, #0]
 800da30:	e01e      	b.n	800da70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800da32:	79fa      	ldrb	r2, [r7, #7]
 800da34:	4914      	ldr	r1, [pc, #80]	; (800da88 <etharp_tmr+0x14c>)
 800da36:	4613      	mov	r3, r2
 800da38:	005b      	lsls	r3, r3, #1
 800da3a:	4413      	add	r3, r2
 800da3c:	00db      	lsls	r3, r3, #3
 800da3e:	440b      	add	r3, r1
 800da40:	3314      	adds	r3, #20
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	2b01      	cmp	r3, #1
 800da46:	d113      	bne.n	800da70 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800da48:	79fa      	ldrb	r2, [r7, #7]
 800da4a:	490f      	ldr	r1, [pc, #60]	; (800da88 <etharp_tmr+0x14c>)
 800da4c:	4613      	mov	r3, r2
 800da4e:	005b      	lsls	r3, r3, #1
 800da50:	4413      	add	r3, r2
 800da52:	00db      	lsls	r3, r3, #3
 800da54:	440b      	add	r3, r1
 800da56:	3308      	adds	r3, #8
 800da58:	6818      	ldr	r0, [r3, #0]
 800da5a:	79fa      	ldrb	r2, [r7, #7]
 800da5c:	4613      	mov	r3, r2
 800da5e:	005b      	lsls	r3, r3, #1
 800da60:	4413      	add	r3, r2
 800da62:	00db      	lsls	r3, r3, #3
 800da64:	4a08      	ldr	r2, [pc, #32]	; (800da88 <etharp_tmr+0x14c>)
 800da66:	4413      	add	r3, r2
 800da68:	3304      	adds	r3, #4
 800da6a:	4619      	mov	r1, r3
 800da6c:	f000 fe7a 	bl	800e764 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800da70:	79fb      	ldrb	r3, [r7, #7]
 800da72:	3301      	adds	r3, #1
 800da74:	71fb      	strb	r3, [r7, #7]
 800da76:	79fb      	ldrb	r3, [r7, #7]
 800da78:	2b09      	cmp	r3, #9
 800da7a:	f67f af65 	bls.w	800d948 <etharp_tmr+0xc>
      }
    }
  }
}
 800da7e:	bf00      	nop
 800da80:	bf00      	nop
 800da82:	3708      	adds	r7, #8
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	20007eec 	.word	0x20007eec

0800da8c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b088      	sub	sp, #32
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	460b      	mov	r3, r1
 800da96:	607a      	str	r2, [r7, #4]
 800da98:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800da9a:	230a      	movs	r3, #10
 800da9c:	77fb      	strb	r3, [r7, #31]
 800da9e:	230a      	movs	r3, #10
 800daa0:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800daa2:	230a      	movs	r3, #10
 800daa4:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800daa6:	2300      	movs	r3, #0
 800daa8:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800daaa:	230a      	movs	r3, #10
 800daac:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800daae:	2300      	movs	r3, #0
 800dab0:	833b      	strh	r3, [r7, #24]
 800dab2:	2300      	movs	r3, #0
 800dab4:	82fb      	strh	r3, [r7, #22]
 800dab6:	2300      	movs	r3, #0
 800dab8:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800daba:	2300      	movs	r3, #0
 800dabc:	773b      	strb	r3, [r7, #28]
 800dabe:	e093      	b.n	800dbe8 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800dac0:	7f3a      	ldrb	r2, [r7, #28]
 800dac2:	4990      	ldr	r1, [pc, #576]	; (800dd04 <etharp_find_entry+0x278>)
 800dac4:	4613      	mov	r3, r2
 800dac6:	005b      	lsls	r3, r3, #1
 800dac8:	4413      	add	r3, r2
 800daca:	00db      	lsls	r3, r3, #3
 800dacc:	440b      	add	r3, r1
 800dace:	3314      	adds	r3, #20
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800dad4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dad8:	2b0a      	cmp	r3, #10
 800dada:	d105      	bne.n	800dae8 <etharp_find_entry+0x5c>
 800dadc:	7cfb      	ldrb	r3, [r7, #19]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d102      	bne.n	800dae8 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800dae2:	7f3b      	ldrb	r3, [r7, #28]
 800dae4:	777b      	strb	r3, [r7, #29]
 800dae6:	e07c      	b.n	800dbe2 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800dae8:	7cfb      	ldrb	r3, [r7, #19]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d079      	beq.n	800dbe2 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800daee:	7cfb      	ldrb	r3, [r7, #19]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d009      	beq.n	800db08 <etharp_find_entry+0x7c>
 800daf4:	7cfb      	ldrb	r3, [r7, #19]
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d806      	bhi.n	800db08 <etharp_find_entry+0x7c>
 800dafa:	4b83      	ldr	r3, [pc, #524]	; (800dd08 <etharp_find_entry+0x27c>)
 800dafc:	f240 1225 	movw	r2, #293	; 0x125
 800db00:	4982      	ldr	r1, [pc, #520]	; (800dd0c <etharp_find_entry+0x280>)
 800db02:	4883      	ldr	r0, [pc, #524]	; (800dd10 <etharp_find_entry+0x284>)
 800db04:	f004 ff7c 	bl	8012a00 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d00f      	beq.n	800db2e <etharp_find_entry+0xa2>
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	6819      	ldr	r1, [r3, #0]
 800db12:	7f3a      	ldrb	r2, [r7, #28]
 800db14:	487b      	ldr	r0, [pc, #492]	; (800dd04 <etharp_find_entry+0x278>)
 800db16:	4613      	mov	r3, r2
 800db18:	005b      	lsls	r3, r3, #1
 800db1a:	4413      	add	r3, r2
 800db1c:	00db      	lsls	r3, r3, #3
 800db1e:	4403      	add	r3, r0
 800db20:	3304      	adds	r3, #4
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4299      	cmp	r1, r3
 800db26:	d102      	bne.n	800db2e <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800db28:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800db2c:	e0e5      	b.n	800dcfa <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800db2e:	7cfb      	ldrb	r3, [r7, #19]
 800db30:	2b01      	cmp	r3, #1
 800db32:	d13b      	bne.n	800dbac <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800db34:	7f3a      	ldrb	r2, [r7, #28]
 800db36:	4973      	ldr	r1, [pc, #460]	; (800dd04 <etharp_find_entry+0x278>)
 800db38:	4613      	mov	r3, r2
 800db3a:	005b      	lsls	r3, r3, #1
 800db3c:	4413      	add	r3, r2
 800db3e:	00db      	lsls	r3, r3, #3
 800db40:	440b      	add	r3, r1
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d018      	beq.n	800db7a <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800db48:	7f3a      	ldrb	r2, [r7, #28]
 800db4a:	496e      	ldr	r1, [pc, #440]	; (800dd04 <etharp_find_entry+0x278>)
 800db4c:	4613      	mov	r3, r2
 800db4e:	005b      	lsls	r3, r3, #1
 800db50:	4413      	add	r3, r2
 800db52:	00db      	lsls	r3, r3, #3
 800db54:	440b      	add	r3, r1
 800db56:	3312      	adds	r3, #18
 800db58:	881b      	ldrh	r3, [r3, #0]
 800db5a:	8b3a      	ldrh	r2, [r7, #24]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d840      	bhi.n	800dbe2 <etharp_find_entry+0x156>
            old_queue = i;
 800db60:	7f3b      	ldrb	r3, [r7, #28]
 800db62:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800db64:	7f3a      	ldrb	r2, [r7, #28]
 800db66:	4967      	ldr	r1, [pc, #412]	; (800dd04 <etharp_find_entry+0x278>)
 800db68:	4613      	mov	r3, r2
 800db6a:	005b      	lsls	r3, r3, #1
 800db6c:	4413      	add	r3, r2
 800db6e:	00db      	lsls	r3, r3, #3
 800db70:	440b      	add	r3, r1
 800db72:	3312      	adds	r3, #18
 800db74:	881b      	ldrh	r3, [r3, #0]
 800db76:	833b      	strh	r3, [r7, #24]
 800db78:	e033      	b.n	800dbe2 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800db7a:	7f3a      	ldrb	r2, [r7, #28]
 800db7c:	4961      	ldr	r1, [pc, #388]	; (800dd04 <etharp_find_entry+0x278>)
 800db7e:	4613      	mov	r3, r2
 800db80:	005b      	lsls	r3, r3, #1
 800db82:	4413      	add	r3, r2
 800db84:	00db      	lsls	r3, r3, #3
 800db86:	440b      	add	r3, r1
 800db88:	3312      	adds	r3, #18
 800db8a:	881b      	ldrh	r3, [r3, #0]
 800db8c:	8afa      	ldrh	r2, [r7, #22]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d827      	bhi.n	800dbe2 <etharp_find_entry+0x156>
            old_pending = i;
 800db92:	7f3b      	ldrb	r3, [r7, #28]
 800db94:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800db96:	7f3a      	ldrb	r2, [r7, #28]
 800db98:	495a      	ldr	r1, [pc, #360]	; (800dd04 <etharp_find_entry+0x278>)
 800db9a:	4613      	mov	r3, r2
 800db9c:	005b      	lsls	r3, r3, #1
 800db9e:	4413      	add	r3, r2
 800dba0:	00db      	lsls	r3, r3, #3
 800dba2:	440b      	add	r3, r1
 800dba4:	3312      	adds	r3, #18
 800dba6:	881b      	ldrh	r3, [r3, #0]
 800dba8:	82fb      	strh	r3, [r7, #22]
 800dbaa:	e01a      	b.n	800dbe2 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800dbac:	7cfb      	ldrb	r3, [r7, #19]
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d917      	bls.n	800dbe2 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800dbb2:	7f3a      	ldrb	r2, [r7, #28]
 800dbb4:	4953      	ldr	r1, [pc, #332]	; (800dd04 <etharp_find_entry+0x278>)
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	005b      	lsls	r3, r3, #1
 800dbba:	4413      	add	r3, r2
 800dbbc:	00db      	lsls	r3, r3, #3
 800dbbe:	440b      	add	r3, r1
 800dbc0:	3312      	adds	r3, #18
 800dbc2:	881b      	ldrh	r3, [r3, #0]
 800dbc4:	8aba      	ldrh	r2, [r7, #20]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d80b      	bhi.n	800dbe2 <etharp_find_entry+0x156>
            old_stable = i;
 800dbca:	7f3b      	ldrb	r3, [r7, #28]
 800dbcc:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800dbce:	7f3a      	ldrb	r2, [r7, #28]
 800dbd0:	494c      	ldr	r1, [pc, #304]	; (800dd04 <etharp_find_entry+0x278>)
 800dbd2:	4613      	mov	r3, r2
 800dbd4:	005b      	lsls	r3, r3, #1
 800dbd6:	4413      	add	r3, r2
 800dbd8:	00db      	lsls	r3, r3, #3
 800dbda:	440b      	add	r3, r1
 800dbdc:	3312      	adds	r3, #18
 800dbde:	881b      	ldrh	r3, [r3, #0]
 800dbe0:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dbe2:	7f3b      	ldrb	r3, [r7, #28]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	773b      	strb	r3, [r7, #28]
 800dbe8:	7f3b      	ldrb	r3, [r7, #28]
 800dbea:	2b09      	cmp	r3, #9
 800dbec:	f67f af68 	bls.w	800dac0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800dbf0:	7afb      	ldrb	r3, [r7, #11]
 800dbf2:	f003 0302 	and.w	r3, r3, #2
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d108      	bne.n	800dc0c <etharp_find_entry+0x180>
 800dbfa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dbfe:	2b0a      	cmp	r3, #10
 800dc00:	d107      	bne.n	800dc12 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800dc02:	7afb      	ldrb	r3, [r7, #11]
 800dc04:	f003 0301 	and.w	r3, r3, #1
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d102      	bne.n	800dc12 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800dc0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc10:	e073      	b.n	800dcfa <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800dc12:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dc16:	2b09      	cmp	r3, #9
 800dc18:	dc02      	bgt.n	800dc20 <etharp_find_entry+0x194>
    i = empty;
 800dc1a:	7f7b      	ldrb	r3, [r7, #29]
 800dc1c:	773b      	strb	r3, [r7, #28]
 800dc1e:	e036      	b.n	800dc8e <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800dc20:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800dc24:	2b09      	cmp	r3, #9
 800dc26:	dc13      	bgt.n	800dc50 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800dc28:	7fbb      	ldrb	r3, [r7, #30]
 800dc2a:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800dc2c:	7f3a      	ldrb	r2, [r7, #28]
 800dc2e:	4935      	ldr	r1, [pc, #212]	; (800dd04 <etharp_find_entry+0x278>)
 800dc30:	4613      	mov	r3, r2
 800dc32:	005b      	lsls	r3, r3, #1
 800dc34:	4413      	add	r3, r2
 800dc36:	00db      	lsls	r3, r3, #3
 800dc38:	440b      	add	r3, r1
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d018      	beq.n	800dc72 <etharp_find_entry+0x1e6>
 800dc40:	4b31      	ldr	r3, [pc, #196]	; (800dd08 <etharp_find_entry+0x27c>)
 800dc42:	f240 126f 	movw	r2, #367	; 0x16f
 800dc46:	4933      	ldr	r1, [pc, #204]	; (800dd14 <etharp_find_entry+0x288>)
 800dc48:	4831      	ldr	r0, [pc, #196]	; (800dd10 <etharp_find_entry+0x284>)
 800dc4a:	f004 fed9 	bl	8012a00 <iprintf>
 800dc4e:	e010      	b.n	800dc72 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800dc50:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc54:	2b09      	cmp	r3, #9
 800dc56:	dc02      	bgt.n	800dc5e <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800dc58:	7ffb      	ldrb	r3, [r7, #31]
 800dc5a:	773b      	strb	r3, [r7, #28]
 800dc5c:	e009      	b.n	800dc72 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800dc5e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dc62:	2b09      	cmp	r3, #9
 800dc64:	dc02      	bgt.n	800dc6c <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800dc66:	7efb      	ldrb	r3, [r7, #27]
 800dc68:	773b      	strb	r3, [r7, #28]
 800dc6a:	e002      	b.n	800dc72 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800dc6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc70:	e043      	b.n	800dcfa <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800dc72:	7f3b      	ldrb	r3, [r7, #28]
 800dc74:	2b09      	cmp	r3, #9
 800dc76:	d906      	bls.n	800dc86 <etharp_find_entry+0x1fa>
 800dc78:	4b23      	ldr	r3, [pc, #140]	; (800dd08 <etharp_find_entry+0x27c>)
 800dc7a:	f240 1281 	movw	r2, #385	; 0x181
 800dc7e:	4926      	ldr	r1, [pc, #152]	; (800dd18 <etharp_find_entry+0x28c>)
 800dc80:	4823      	ldr	r0, [pc, #140]	; (800dd10 <etharp_find_entry+0x284>)
 800dc82:	f004 febd 	bl	8012a00 <iprintf>
    etharp_free_entry(i);
 800dc86:	7f3b      	ldrb	r3, [r7, #28]
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7ff fe25 	bl	800d8d8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800dc8e:	7f3b      	ldrb	r3, [r7, #28]
 800dc90:	2b09      	cmp	r3, #9
 800dc92:	d906      	bls.n	800dca2 <etharp_find_entry+0x216>
 800dc94:	4b1c      	ldr	r3, [pc, #112]	; (800dd08 <etharp_find_entry+0x27c>)
 800dc96:	f240 1285 	movw	r2, #389	; 0x185
 800dc9a:	491f      	ldr	r1, [pc, #124]	; (800dd18 <etharp_find_entry+0x28c>)
 800dc9c:	481c      	ldr	r0, [pc, #112]	; (800dd10 <etharp_find_entry+0x284>)
 800dc9e:	f004 feaf 	bl	8012a00 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800dca2:	7f3a      	ldrb	r2, [r7, #28]
 800dca4:	4917      	ldr	r1, [pc, #92]	; (800dd04 <etharp_find_entry+0x278>)
 800dca6:	4613      	mov	r3, r2
 800dca8:	005b      	lsls	r3, r3, #1
 800dcaa:	4413      	add	r3, r2
 800dcac:	00db      	lsls	r3, r3, #3
 800dcae:	440b      	add	r3, r1
 800dcb0:	3314      	adds	r3, #20
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d006      	beq.n	800dcc6 <etharp_find_entry+0x23a>
 800dcb8:	4b13      	ldr	r3, [pc, #76]	; (800dd08 <etharp_find_entry+0x27c>)
 800dcba:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800dcbe:	4917      	ldr	r1, [pc, #92]	; (800dd1c <etharp_find_entry+0x290>)
 800dcc0:	4813      	ldr	r0, [pc, #76]	; (800dd10 <etharp_find_entry+0x284>)
 800dcc2:	f004 fe9d 	bl	8012a00 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d00a      	beq.n	800dce2 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800dccc:	7f3a      	ldrb	r2, [r7, #28]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	6819      	ldr	r1, [r3, #0]
 800dcd2:	480c      	ldr	r0, [pc, #48]	; (800dd04 <etharp_find_entry+0x278>)
 800dcd4:	4613      	mov	r3, r2
 800dcd6:	005b      	lsls	r3, r3, #1
 800dcd8:	4413      	add	r3, r2
 800dcda:	00db      	lsls	r3, r3, #3
 800dcdc:	4403      	add	r3, r0
 800dcde:	3304      	adds	r3, #4
 800dce0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800dce2:	7f3a      	ldrb	r2, [r7, #28]
 800dce4:	4907      	ldr	r1, [pc, #28]	; (800dd04 <etharp_find_entry+0x278>)
 800dce6:	4613      	mov	r3, r2
 800dce8:	005b      	lsls	r3, r3, #1
 800dcea:	4413      	add	r3, r2
 800dcec:	00db      	lsls	r3, r3, #3
 800dcee:	440b      	add	r3, r1
 800dcf0:	3312      	adds	r3, #18
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800dcf6:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3720      	adds	r7, #32
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	20007eec 	.word	0x20007eec
 800dd08:	08017cec 	.word	0x08017cec
 800dd0c:	08017d24 	.word	0x08017d24
 800dd10:	08017d64 	.word	0x08017d64
 800dd14:	08017d8c 	.word	0x08017d8c
 800dd18:	08017da4 	.word	0x08017da4
 800dd1c:	08017db8 	.word	0x08017db8

0800dd20 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b088      	sub	sp, #32
 800dd24:	af02      	add	r7, sp, #8
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	607a      	str	r2, [r7, #4]
 800dd2c:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd34:	2b06      	cmp	r3, #6
 800dd36:	d006      	beq.n	800dd46 <etharp_update_arp_entry+0x26>
 800dd38:	4b48      	ldr	r3, [pc, #288]	; (800de5c <etharp_update_arp_entry+0x13c>)
 800dd3a:	f240 12ab 	movw	r2, #427	; 0x1ab
 800dd3e:	4948      	ldr	r1, [pc, #288]	; (800de60 <etharp_update_arp_entry+0x140>)
 800dd40:	4848      	ldr	r0, [pc, #288]	; (800de64 <etharp_update_arp_entry+0x144>)
 800dd42:	f004 fe5d 	bl	8012a00 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d012      	beq.n	800dd72 <etharp_update_arp_entry+0x52>
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d00e      	beq.n	800dd72 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	68f9      	ldr	r1, [r7, #12]
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f001 f9c6 	bl	800f0ec <ip4_addr_isbroadcast_u32>
 800dd60:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d105      	bne.n	800dd72 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dd6e:	2be0      	cmp	r3, #224	; 0xe0
 800dd70:	d102      	bne.n	800dd78 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800dd72:	f06f 030f 	mvn.w	r3, #15
 800dd76:	e06c      	b.n	800de52 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800dd78:	78fb      	ldrb	r3, [r7, #3]
 800dd7a:	68fa      	ldr	r2, [r7, #12]
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	68b8      	ldr	r0, [r7, #8]
 800dd80:	f7ff fe84 	bl	800da8c <etharp_find_entry>
 800dd84:	4603      	mov	r3, r0
 800dd86:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800dd88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	da02      	bge.n	800dd96 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800dd90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd94:	e05d      	b.n	800de52 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dd96:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800dd9a:	4933      	ldr	r1, [pc, #204]	; (800de68 <etharp_update_arp_entry+0x148>)
 800dd9c:	4613      	mov	r3, r2
 800dd9e:	005b      	lsls	r3, r3, #1
 800dda0:	4413      	add	r3, r2
 800dda2:	00db      	lsls	r3, r3, #3
 800dda4:	440b      	add	r3, r1
 800dda6:	3314      	adds	r3, #20
 800dda8:	2202      	movs	r2, #2
 800ddaa:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ddac:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ddb0:	492d      	ldr	r1, [pc, #180]	; (800de68 <etharp_update_arp_entry+0x148>)
 800ddb2:	4613      	mov	r3, r2
 800ddb4:	005b      	lsls	r3, r3, #1
 800ddb6:	4413      	add	r3, r2
 800ddb8:	00db      	lsls	r3, r3, #3
 800ddba:	440b      	add	r3, r1
 800ddbc:	3308      	adds	r3, #8
 800ddbe:	68fa      	ldr	r2, [r7, #12]
 800ddc0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800ddc2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ddc6:	4613      	mov	r3, r2
 800ddc8:	005b      	lsls	r3, r3, #1
 800ddca:	4413      	add	r3, r2
 800ddcc:	00db      	lsls	r3, r3, #3
 800ddce:	3308      	adds	r3, #8
 800ddd0:	4a25      	ldr	r2, [pc, #148]	; (800de68 <etharp_update_arp_entry+0x148>)
 800ddd2:	4413      	add	r3, r2
 800ddd4:	3304      	adds	r3, #4
 800ddd6:	2206      	movs	r2, #6
 800ddd8:	6879      	ldr	r1, [r7, #4]
 800ddda:	4618      	mov	r0, r3
 800dddc:	f003 ff8c 	bl	8011cf8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800dde0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800dde4:	4920      	ldr	r1, [pc, #128]	; (800de68 <etharp_update_arp_entry+0x148>)
 800dde6:	4613      	mov	r3, r2
 800dde8:	005b      	lsls	r3, r3, #1
 800ddea:	4413      	add	r3, r2
 800ddec:	00db      	lsls	r3, r3, #3
 800ddee:	440b      	add	r3, r1
 800ddf0:	3312      	adds	r3, #18
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ddf6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ddfa:	491b      	ldr	r1, [pc, #108]	; (800de68 <etharp_update_arp_entry+0x148>)
 800ddfc:	4613      	mov	r3, r2
 800ddfe:	005b      	lsls	r3, r3, #1
 800de00:	4413      	add	r3, r2
 800de02:	00db      	lsls	r3, r3, #3
 800de04:	440b      	add	r3, r1
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d021      	beq.n	800de50 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800de0c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800de10:	4915      	ldr	r1, [pc, #84]	; (800de68 <etharp_update_arp_entry+0x148>)
 800de12:	4613      	mov	r3, r2
 800de14:	005b      	lsls	r3, r3, #1
 800de16:	4413      	add	r3, r2
 800de18:	00db      	lsls	r3, r3, #3
 800de1a:	440b      	add	r3, r1
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800de20:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800de24:	4910      	ldr	r1, [pc, #64]	; (800de68 <etharp_update_arp_entry+0x148>)
 800de26:	4613      	mov	r3, r2
 800de28:	005b      	lsls	r3, r3, #1
 800de2a:	4413      	add	r3, r2
 800de2c:	00db      	lsls	r3, r3, #3
 800de2e:	440b      	add	r3, r1
 800de30:	2200      	movs	r2, #0
 800de32:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800de3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6939      	ldr	r1, [r7, #16]
 800de44:	68f8      	ldr	r0, [r7, #12]
 800de46:	f002 f84f 	bl	800fee8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800de4a:	6938      	ldr	r0, [r7, #16]
 800de4c:	f7fa f88e 	bl	8007f6c <pbuf_free>
  }
  return ERR_OK;
 800de50:	2300      	movs	r3, #0
}
 800de52:	4618      	mov	r0, r3
 800de54:	3718      	adds	r7, #24
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	08017cec 	.word	0x08017cec
 800de60:	08017de4 	.word	0x08017de4
 800de64:	08017d64 	.word	0x08017d64
 800de68:	20007eec 	.word	0x20007eec

0800de6c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800de74:	2300      	movs	r3, #0
 800de76:	73fb      	strb	r3, [r7, #15]
 800de78:	e01f      	b.n	800deba <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800de7a:	7bfa      	ldrb	r2, [r7, #15]
 800de7c:	4913      	ldr	r1, [pc, #76]	; (800decc <etharp_cleanup_netif+0x60>)
 800de7e:	4613      	mov	r3, r2
 800de80:	005b      	lsls	r3, r3, #1
 800de82:	4413      	add	r3, r2
 800de84:	00db      	lsls	r3, r3, #3
 800de86:	440b      	add	r3, r1
 800de88:	3314      	adds	r3, #20
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800de8e:	7bbb      	ldrb	r3, [r7, #14]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d00f      	beq.n	800deb4 <etharp_cleanup_netif+0x48>
 800de94:	7bfa      	ldrb	r2, [r7, #15]
 800de96:	490d      	ldr	r1, [pc, #52]	; (800decc <etharp_cleanup_netif+0x60>)
 800de98:	4613      	mov	r3, r2
 800de9a:	005b      	lsls	r3, r3, #1
 800de9c:	4413      	add	r3, r2
 800de9e:	00db      	lsls	r3, r3, #3
 800dea0:	440b      	add	r3, r1
 800dea2:	3308      	adds	r3, #8
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d103      	bne.n	800deb4 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800deac:	7bfb      	ldrb	r3, [r7, #15]
 800deae:	4618      	mov	r0, r3
 800deb0:	f7ff fd12 	bl	800d8d8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800deb4:	7bfb      	ldrb	r3, [r7, #15]
 800deb6:	3301      	adds	r3, #1
 800deb8:	73fb      	strb	r3, [r7, #15]
 800deba:	7bfb      	ldrb	r3, [r7, #15]
 800debc:	2b09      	cmp	r3, #9
 800debe:	d9dc      	bls.n	800de7a <etharp_cleanup_netif+0xe>
    }
  }
}
 800dec0:	bf00      	nop
 800dec2:	bf00      	nop
 800dec4:	3710      	adds	r7, #16
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	20007eec 	.word	0x20007eec

0800ded0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ded0:	b5b0      	push	{r4, r5, r7, lr}
 800ded2:	b08a      	sub	sp, #40	; 0x28
 800ded4:	af04      	add	r7, sp, #16
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d107      	bne.n	800def0 <etharp_input+0x20>
 800dee0:	4b49      	ldr	r3, [pc, #292]	; (800e008 <etharp_input+0x138>)
 800dee2:	f44f 7222 	mov.w	r2, #648	; 0x288
 800dee6:	4949      	ldr	r1, [pc, #292]	; (800e00c <etharp_input+0x13c>)
 800dee8:	4849      	ldr	r0, [pc, #292]	; (800e010 <etharp_input+0x140>)
 800deea:	f004 fd89 	bl	8012a00 <iprintf>
 800deee:	e088      	b.n	800e002 <etharp_input+0x132>

  hdr = (struct etharp_hdr *)p->payload;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	881b      	ldrh	r3, [r3, #0]
 800defa:	b29b      	uxth	r3, r3
 800defc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df00:	d10c      	bne.n	800df1c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800df06:	2b06      	cmp	r3, #6
 800df08:	d108      	bne.n	800df1c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800df0e:	2b04      	cmp	r3, #4
 800df10:	d104      	bne.n	800df1c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	885b      	ldrh	r3, [r3, #2]
 800df16:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800df18:	2b08      	cmp	r3, #8
 800df1a:	d00f      	beq.n	800df3c <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 800df1c:	4b3d      	ldr	r3, [pc, #244]	; (800e014 <etharp_input+0x144>)
 800df1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df20:	3301      	adds	r3, #1
 800df22:	b29a      	uxth	r2, r3
 800df24:	4b3b      	ldr	r3, [pc, #236]	; (800e014 <etharp_input+0x144>)
 800df26:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 800df28:	4b3a      	ldr	r3, [pc, #232]	; (800e014 <etharp_input+0x144>)
 800df2a:	8bdb      	ldrh	r3, [r3, #30]
 800df2c:	3301      	adds	r3, #1
 800df2e:	b29a      	uxth	r2, r3
 800df30:	4b38      	ldr	r3, [pc, #224]	; (800e014 <etharp_input+0x144>)
 800df32:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f7fa f819 	bl	8007f6c <pbuf_free>
    return;
 800df3a:	e062      	b.n	800e002 <etharp_input+0x132>
  }
  ETHARP_STATS_INC(etharp.recv);
 800df3c:	4b35      	ldr	r3, [pc, #212]	; (800e014 <etharp_input+0x144>)
 800df3e:	8b5b      	ldrh	r3, [r3, #26]
 800df40:	3301      	adds	r3, #1
 800df42:	b29a      	uxth	r2, r3
 800df44:	4b33      	ldr	r3, [pc, #204]	; (800e014 <etharp_input+0x144>)
 800df46:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	330e      	adds	r3, #14
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	3318      	adds	r3, #24
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	3304      	adds	r3, #4
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d102      	bne.n	800df68 <etharp_input+0x98>
    for_us = 0;
 800df62:	2300      	movs	r3, #0
 800df64:	75fb      	strb	r3, [r7, #23]
 800df66:	e009      	b.n	800df7c <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800df68:	68ba      	ldr	r2, [r7, #8]
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	3304      	adds	r3, #4
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	429a      	cmp	r2, r3
 800df72:	bf0c      	ite	eq
 800df74:	2301      	moveq	r3, #1
 800df76:	2300      	movne	r3, #0
 800df78:	b2db      	uxtb	r3, r3
 800df7a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	f103 0208 	add.w	r2, r3, #8
 800df82:	7dfb      	ldrb	r3, [r7, #23]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d001      	beq.n	800df8c <etharp_input+0xbc>
 800df88:	2301      	movs	r3, #1
 800df8a:	e000      	b.n	800df8e <etharp_input+0xbe>
 800df8c:	2302      	movs	r3, #2
 800df8e:	f107 010c 	add.w	r1, r7, #12
 800df92:	6838      	ldr	r0, [r7, #0]
 800df94:	f7ff fec4 	bl	800dd20 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	88db      	ldrh	r3, [r3, #6]
 800df9c:	b29b      	uxth	r3, r3
 800df9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfa2:	d003      	beq.n	800dfac <etharp_input+0xdc>
 800dfa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfa8:	d025      	beq.n	800dff6 <etharp_input+0x126>
 800dfaa:	e01d      	b.n	800dfe8 <etharp_input+0x118>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 800dfac:	7dfb      	ldrb	r3, [r7, #23]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d023      	beq.n	800dffa <etharp_input+0x12a>
      /* send ARP response */
      etharp_raw(netif,
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800dfc8:	693a      	ldr	r2, [r7, #16]
 800dfca:	3208      	adds	r2, #8
      etharp_raw(netif,
 800dfcc:	2102      	movs	r1, #2
 800dfce:	9103      	str	r1, [sp, #12]
 800dfd0:	f107 010c 	add.w	r1, r7, #12
 800dfd4:	9102      	str	r1, [sp, #8]
 800dfd6:	9201      	str	r2, [sp, #4]
 800dfd8:	9300      	str	r3, [sp, #0]
 800dfda:	462b      	mov	r3, r5
 800dfdc:	4622      	mov	r2, r4
 800dfde:	4601      	mov	r1, r0
 800dfe0:	6838      	ldr	r0, [r7, #0]
 800dfe2:	f000 fb03 	bl	800e5ec <etharp_raw>
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
    }
    break;
 800dfe6:	e008      	b.n	800dffa <etharp_input+0x12a>
    dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
 800dfe8:	4b0a      	ldr	r3, [pc, #40]	; (800e014 <etharp_input+0x144>)
 800dfea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dfec:	3301      	adds	r3, #1
 800dfee:	b29a      	uxth	r2, r3
 800dff0:	4b08      	ldr	r3, [pc, #32]	; (800e014 <etharp_input+0x144>)
 800dff2:	859a      	strh	r2, [r3, #44]	; 0x2c
    break;
 800dff4:	e002      	b.n	800dffc <etharp_input+0x12c>
    break;
 800dff6:	bf00      	nop
 800dff8:	e000      	b.n	800dffc <etharp_input+0x12c>
    break;
 800dffa:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f7f9 ffb5 	bl	8007f6c <pbuf_free>
}
 800e002:	3718      	adds	r7, #24
 800e004:	46bd      	mov	sp, r7
 800e006:	bdb0      	pop	{r4, r5, r7, pc}
 800e008:	08017cec 	.word	0x08017cec
 800e00c:	08017e3c 	.word	0x08017e3c
 800e010:	08017d64 	.word	0x08017d64
 800e014:	20007db4 	.word	0x20007db4

0800e018 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b086      	sub	sp, #24
 800e01c:	af02      	add	r7, sp, #8
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	4613      	mov	r3, r2
 800e024:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e026:	79fa      	ldrb	r2, [r7, #7]
 800e028:	4944      	ldr	r1, [pc, #272]	; (800e13c <etharp_output_to_arp_index+0x124>)
 800e02a:	4613      	mov	r3, r2
 800e02c:	005b      	lsls	r3, r3, #1
 800e02e:	4413      	add	r3, r2
 800e030:	00db      	lsls	r3, r3, #3
 800e032:	440b      	add	r3, r1
 800e034:	3314      	adds	r3, #20
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d806      	bhi.n	800e04a <etharp_output_to_arp_index+0x32>
 800e03c:	4b40      	ldr	r3, [pc, #256]	; (800e140 <etharp_output_to_arp_index+0x128>)
 800e03e:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800e042:	4940      	ldr	r1, [pc, #256]	; (800e144 <etharp_output_to_arp_index+0x12c>)
 800e044:	4840      	ldr	r0, [pc, #256]	; (800e148 <etharp_output_to_arp_index+0x130>)
 800e046:	f004 fcdb 	bl	8012a00 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e04a:	79fa      	ldrb	r2, [r7, #7]
 800e04c:	493b      	ldr	r1, [pc, #236]	; (800e13c <etharp_output_to_arp_index+0x124>)
 800e04e:	4613      	mov	r3, r2
 800e050:	005b      	lsls	r3, r3, #1
 800e052:	4413      	add	r3, r2
 800e054:	00db      	lsls	r3, r3, #3
 800e056:	440b      	add	r3, r1
 800e058:	3314      	adds	r3, #20
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	2b02      	cmp	r3, #2
 800e05e:	d153      	bne.n	800e108 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e060:	79fa      	ldrb	r2, [r7, #7]
 800e062:	4936      	ldr	r1, [pc, #216]	; (800e13c <etharp_output_to_arp_index+0x124>)
 800e064:	4613      	mov	r3, r2
 800e066:	005b      	lsls	r3, r3, #1
 800e068:	4413      	add	r3, r2
 800e06a:	00db      	lsls	r3, r3, #3
 800e06c:	440b      	add	r3, r1
 800e06e:	3312      	adds	r3, #18
 800e070:	881b      	ldrh	r3, [r3, #0]
 800e072:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e076:	d919      	bls.n	800e0ac <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e078:	79fa      	ldrb	r2, [r7, #7]
 800e07a:	4613      	mov	r3, r2
 800e07c:	005b      	lsls	r3, r3, #1
 800e07e:	4413      	add	r3, r2
 800e080:	00db      	lsls	r3, r3, #3
 800e082:	4a2e      	ldr	r2, [pc, #184]	; (800e13c <etharp_output_to_arp_index+0x124>)
 800e084:	4413      	add	r3, r2
 800e086:	3304      	adds	r3, #4
 800e088:	4619      	mov	r1, r3
 800e08a:	68f8      	ldr	r0, [r7, #12]
 800e08c:	f000 fb6a 	bl	800e764 <etharp_request>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d138      	bne.n	800e108 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e096:	79fa      	ldrb	r2, [r7, #7]
 800e098:	4928      	ldr	r1, [pc, #160]	; (800e13c <etharp_output_to_arp_index+0x124>)
 800e09a:	4613      	mov	r3, r2
 800e09c:	005b      	lsls	r3, r3, #1
 800e09e:	4413      	add	r3, r2
 800e0a0:	00db      	lsls	r3, r3, #3
 800e0a2:	440b      	add	r3, r1
 800e0a4:	3314      	adds	r3, #20
 800e0a6:	2203      	movs	r2, #3
 800e0a8:	701a      	strb	r2, [r3, #0]
 800e0aa:	e02d      	b.n	800e108 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e0ac:	79fa      	ldrb	r2, [r7, #7]
 800e0ae:	4923      	ldr	r1, [pc, #140]	; (800e13c <etharp_output_to_arp_index+0x124>)
 800e0b0:	4613      	mov	r3, r2
 800e0b2:	005b      	lsls	r3, r3, #1
 800e0b4:	4413      	add	r3, r2
 800e0b6:	00db      	lsls	r3, r3, #3
 800e0b8:	440b      	add	r3, r1
 800e0ba:	3312      	adds	r3, #18
 800e0bc:	881b      	ldrh	r3, [r3, #0]
 800e0be:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e0c2:	d321      	bcc.n	800e108 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e0c4:	79fa      	ldrb	r2, [r7, #7]
 800e0c6:	4613      	mov	r3, r2
 800e0c8:	005b      	lsls	r3, r3, #1
 800e0ca:	4413      	add	r3, r2
 800e0cc:	00db      	lsls	r3, r3, #3
 800e0ce:	4a1b      	ldr	r2, [pc, #108]	; (800e13c <etharp_output_to_arp_index+0x124>)
 800e0d0:	4413      	add	r3, r2
 800e0d2:	1d19      	adds	r1, r3, #4
 800e0d4:	79fa      	ldrb	r2, [r7, #7]
 800e0d6:	4613      	mov	r3, r2
 800e0d8:	005b      	lsls	r3, r3, #1
 800e0da:	4413      	add	r3, r2
 800e0dc:	00db      	lsls	r3, r3, #3
 800e0de:	3308      	adds	r3, #8
 800e0e0:	4a16      	ldr	r2, [pc, #88]	; (800e13c <etharp_output_to_arp_index+0x124>)
 800e0e2:	4413      	add	r3, r2
 800e0e4:	3304      	adds	r3, #4
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	68f8      	ldr	r0, [r7, #12]
 800e0ea:	f000 fb19 	bl	800e720 <etharp_request_dst>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d109      	bne.n	800e108 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e0f4:	79fa      	ldrb	r2, [r7, #7]
 800e0f6:	4911      	ldr	r1, [pc, #68]	; (800e13c <etharp_output_to_arp_index+0x124>)
 800e0f8:	4613      	mov	r3, r2
 800e0fa:	005b      	lsls	r3, r3, #1
 800e0fc:	4413      	add	r3, r2
 800e0fe:	00db      	lsls	r3, r3, #3
 800e100:	440b      	add	r3, r1
 800e102:	3314      	adds	r3, #20
 800e104:	2203      	movs	r2, #3
 800e106:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800e10e:	79fa      	ldrb	r2, [r7, #7]
 800e110:	4613      	mov	r3, r2
 800e112:	005b      	lsls	r3, r3, #1
 800e114:	4413      	add	r3, r2
 800e116:	00db      	lsls	r3, r3, #3
 800e118:	3308      	adds	r3, #8
 800e11a:	4a08      	ldr	r2, [pc, #32]	; (800e13c <etharp_output_to_arp_index+0x124>)
 800e11c:	4413      	add	r3, r2
 800e11e:	3304      	adds	r3, #4
 800e120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e124:	9200      	str	r2, [sp, #0]
 800e126:	460a      	mov	r2, r1
 800e128:	68b9      	ldr	r1, [r7, #8]
 800e12a:	68f8      	ldr	r0, [r7, #12]
 800e12c:	f001 fedc 	bl	800fee8 <ethernet_output>
 800e130:	4603      	mov	r3, r0
}
 800e132:	4618      	mov	r0, r3
 800e134:	3710      	adds	r7, #16
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
 800e13a:	bf00      	nop
 800e13c:	20007eec 	.word	0x20007eec
 800e140:	08017cec 	.word	0x08017cec
 800e144:	08017e5c 	.word	0x08017e5c
 800e148:	08017d64 	.word	0x08017d64

0800e14c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b08a      	sub	sp, #40	; 0x28
 800e150:	af02      	add	r7, sp, #8
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	60b9      	str	r1, [r7, #8]
 800e156:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d106      	bne.n	800e170 <etharp_output+0x24>
 800e162:	4b6c      	ldr	r3, [pc, #432]	; (800e314 <etharp_output+0x1c8>)
 800e164:	f240 321b 	movw	r2, #795	; 0x31b
 800e168:	496b      	ldr	r1, [pc, #428]	; (800e318 <etharp_output+0x1cc>)
 800e16a:	486c      	ldr	r0, [pc, #432]	; (800e31c <etharp_output+0x1d0>)
 800e16c:	f004 fc48 	bl	8012a00 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d106      	bne.n	800e184 <etharp_output+0x38>
 800e176:	4b67      	ldr	r3, [pc, #412]	; (800e314 <etharp_output+0x1c8>)
 800e178:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e17c:	4968      	ldr	r1, [pc, #416]	; (800e320 <etharp_output+0x1d4>)
 800e17e:	4867      	ldr	r0, [pc, #412]	; (800e31c <etharp_output+0x1d0>)
 800e180:	f004 fc3e 	bl	8012a00 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d106      	bne.n	800e198 <etharp_output+0x4c>
 800e18a:	4b62      	ldr	r3, [pc, #392]	; (800e314 <etharp_output+0x1c8>)
 800e18c:	f240 321d 	movw	r2, #797	; 0x31d
 800e190:	4964      	ldr	r1, [pc, #400]	; (800e324 <etharp_output+0x1d8>)
 800e192:	4862      	ldr	r0, [pc, #392]	; (800e31c <etharp_output+0x1d0>)
 800e194:	f004 fc34 	bl	8012a00 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	68f9      	ldr	r1, [r7, #12]
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f000 ffa4 	bl	800f0ec <ip4_addr_isbroadcast_u32>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d002      	beq.n	800e1b0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e1aa:	4b5f      	ldr	r3, [pc, #380]	; (800e328 <etharp_output+0x1dc>)
 800e1ac:	61fb      	str	r3, [r7, #28]
 800e1ae:	e0a1      	b.n	800e2f4 <etharp_output+0x1a8>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e1b8:	2be0      	cmp	r3, #224	; 0xe0
 800e1ba:	d118      	bne.n	800e1ee <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e1c4:	235e      	movs	r3, #94	; 0x5e
 800e1c6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	3302      	adds	r3, #2
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	3303      	adds	r3, #3
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e1e6:	f107 0310 	add.w	r3, r7, #16
 800e1ea:	61fb      	str	r3, [r7, #28]
 800e1ec:	e082      	b.n	800e2f4 <etharp_output+0x1a8>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	3304      	adds	r3, #4
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	405a      	eors	r2, r3
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	3308      	adds	r3, #8
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	4013      	ands	r3, r2
 800e202:	2b00      	cmp	r3, #0
 800e204:	d012      	beq.n	800e22c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e20c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e210:	4293      	cmp	r3, r2
 800e212:	d00b      	beq.n	800e22c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	330c      	adds	r3, #12
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d003      	beq.n	800e226 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	330c      	adds	r3, #12
 800e222:	61bb      	str	r3, [r7, #24]
 800e224:	e002      	b.n	800e22c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e226:	f06f 0303 	mvn.w	r3, #3
 800e22a:	e06f      	b.n	800e30c <etharp_output+0x1c0>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e22c:	4b3f      	ldr	r3, [pc, #252]	; (800e32c <etharp_output+0x1e0>)
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	4619      	mov	r1, r3
 800e232:	4a3f      	ldr	r2, [pc, #252]	; (800e330 <etharp_output+0x1e4>)
 800e234:	460b      	mov	r3, r1
 800e236:	005b      	lsls	r3, r3, #1
 800e238:	440b      	add	r3, r1
 800e23a:	00db      	lsls	r3, r3, #3
 800e23c:	4413      	add	r3, r2
 800e23e:	3314      	adds	r3, #20
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	2b01      	cmp	r3, #1
 800e244:	d91d      	bls.n	800e282 <etharp_output+0x136>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e246:	69bb      	ldr	r3, [r7, #24]
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	4b38      	ldr	r3, [pc, #224]	; (800e32c <etharp_output+0x1e0>)
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	4618      	mov	r0, r3
 800e250:	4937      	ldr	r1, [pc, #220]	; (800e330 <etharp_output+0x1e4>)
 800e252:	4603      	mov	r3, r0
 800e254:	005b      	lsls	r3, r3, #1
 800e256:	4403      	add	r3, r0
 800e258:	00db      	lsls	r3, r3, #3
 800e25a:	440b      	add	r3, r1
 800e25c:	3304      	adds	r3, #4
 800e25e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e260:	429a      	cmp	r2, r3
 800e262:	d10e      	bne.n	800e282 <etharp_output+0x136>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 800e264:	4b33      	ldr	r3, [pc, #204]	; (800e334 <etharp_output+0x1e8>)
 800e266:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e268:	3301      	adds	r3, #1
 800e26a:	b29a      	uxth	r2, r3
 800e26c:	4b31      	ldr	r3, [pc, #196]	; (800e334 <etharp_output+0x1e8>)
 800e26e:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e270:	4b2e      	ldr	r3, [pc, #184]	; (800e32c <etharp_output+0x1e0>)
 800e272:	781b      	ldrb	r3, [r3, #0]
 800e274:	461a      	mov	r2, r3
 800e276:	68b9      	ldr	r1, [r7, #8]
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f7ff fecd 	bl	800e018 <etharp_output_to_arp_index>
 800e27e:	4603      	mov	r3, r0
 800e280:	e044      	b.n	800e30c <etharp_output+0x1c0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e282:	2300      	movs	r3, #0
 800e284:	75fb      	strb	r3, [r7, #23]
 800e286:	e02a      	b.n	800e2de <etharp_output+0x192>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e288:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800e28c:	4928      	ldr	r1, [pc, #160]	; (800e330 <etharp_output+0x1e4>)
 800e28e:	4613      	mov	r3, r2
 800e290:	005b      	lsls	r3, r3, #1
 800e292:	4413      	add	r3, r2
 800e294:	00db      	lsls	r3, r3, #3
 800e296:	440b      	add	r3, r1
 800e298:	3314      	adds	r3, #20
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d918      	bls.n	800e2d2 <etharp_output+0x186>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e2a0:	69bb      	ldr	r3, [r7, #24]
 800e2a2:	6819      	ldr	r1, [r3, #0]
 800e2a4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800e2a8:	4821      	ldr	r0, [pc, #132]	; (800e330 <etharp_output+0x1e4>)
 800e2aa:	4613      	mov	r3, r2
 800e2ac:	005b      	lsls	r3, r3, #1
 800e2ae:	4413      	add	r3, r2
 800e2b0:	00db      	lsls	r3, r3, #3
 800e2b2:	4403      	add	r3, r0
 800e2b4:	3304      	adds	r3, #4
 800e2b6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e2b8:	4299      	cmp	r1, r3
 800e2ba:	d10a      	bne.n	800e2d2 <etharp_output+0x186>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800e2bc:	7dfa      	ldrb	r2, [r7, #23]
 800e2be:	4b1b      	ldr	r3, [pc, #108]	; (800e32c <etharp_output+0x1e0>)
 800e2c0:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e2c2:	7dfb      	ldrb	r3, [r7, #23]
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	68b9      	ldr	r1, [r7, #8]
 800e2c8:	68f8      	ldr	r0, [r7, #12]
 800e2ca:	f7ff fea5 	bl	800e018 <etharp_output_to_arp_index>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	e01c      	b.n	800e30c <etharp_output+0x1c0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e2d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e2d6:	b2db      	uxtb	r3, r3
 800e2d8:	3301      	adds	r3, #1
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	75fb      	strb	r3, [r7, #23]
 800e2de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e2e2:	2b09      	cmp	r3, #9
 800e2e4:	ddd0      	ble.n	800e288 <etharp_output+0x13c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e2e6:	68ba      	ldr	r2, [r7, #8]
 800e2e8:	69b9      	ldr	r1, [r7, #24]
 800e2ea:	68f8      	ldr	r0, [r7, #12]
 800e2ec:	f000 f824 	bl	800e338 <etharp_query>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	e00b      	b.n	800e30c <etharp_output+0x1c0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800e2fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2fe:	9300      	str	r3, [sp, #0]
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	68b9      	ldr	r1, [r7, #8]
 800e304:	68f8      	ldr	r0, [r7, #12]
 800e306:	f001 fdef 	bl	800fee8 <ethernet_output>
 800e30a:	4603      	mov	r3, r0
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3720      	adds	r7, #32
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	08017cec 	.word	0x08017cec
 800e318:	08017e3c 	.word	0x08017e3c
 800e31c:	08017d64 	.word	0x08017d64
 800e320:	08017e8c 	.word	0x08017e8c
 800e324:	08017e2c 	.word	0x08017e2c
 800e328:	08018470 	.word	0x08018470
 800e32c:	20007fdc 	.word	0x20007fdc
 800e330:	20007eec 	.word	0x20007eec
 800e334:	20007db4 	.word	0x20007db4

0800e338 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b08c      	sub	sp, #48	; 0x30
 800e33c:	af02      	add	r7, sp, #8
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	60b9      	str	r1, [r7, #8]
 800e342:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	3329      	adds	r3, #41	; 0x29
 800e348:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e34a:	23ff      	movs	r3, #255	; 0xff
 800e34c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e350:	2300      	movs	r3, #0
 800e352:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	68f9      	ldr	r1, [r7, #12]
 800e35a:	4618      	mov	r0, r3
 800e35c:	f000 fec6 	bl	800f0ec <ip4_addr_isbroadcast_u32>
 800e360:	4603      	mov	r3, r0
 800e362:	2b00      	cmp	r3, #0
 800e364:	d10c      	bne.n	800e380 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e36e:	2be0      	cmp	r3, #224	; 0xe0
 800e370:	d006      	beq.n	800e380 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d003      	beq.n	800e380 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d102      	bne.n	800e386 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e380:	f06f 030f 	mvn.w	r3, #15
 800e384:	e11d      	b.n	800e5c2 <etharp_query+0x28a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e386:	68fa      	ldr	r2, [r7, #12]
 800e388:	2101      	movs	r1, #1
 800e38a:	68b8      	ldr	r0, [r7, #8]
 800e38c:	f7ff fb7e 	bl	800da8c <etharp_find_entry>
 800e390:	4603      	mov	r3, r0
 800e392:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800e394:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	da0b      	bge.n	800e3b4 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d005      	beq.n	800e3ae <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 800e3a2:	4b8a      	ldr	r3, [pc, #552]	; (800e5cc <etharp_query+0x294>)
 800e3a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	b29a      	uxth	r2, r3
 800e3aa:	4b88      	ldr	r3, [pc, #544]	; (800e5cc <etharp_query+0x294>)
 800e3ac:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i;
 800e3ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3b2:	e106      	b.n	800e5c2 <etharp_query+0x28a>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e3b4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e3b8:	4985      	ldr	r1, [pc, #532]	; (800e5d0 <etharp_query+0x298>)
 800e3ba:	4613      	mov	r3, r2
 800e3bc:	005b      	lsls	r3, r3, #1
 800e3be:	4413      	add	r3, r2
 800e3c0:	00db      	lsls	r3, r3, #3
 800e3c2:	440b      	add	r3, r1
 800e3c4:	3314      	adds	r3, #20
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d117      	bne.n	800e3fc <etharp_query+0xc4>
    is_new_entry = 1;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e3d0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e3d4:	497e      	ldr	r1, [pc, #504]	; (800e5d0 <etharp_query+0x298>)
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	005b      	lsls	r3, r3, #1
 800e3da:	4413      	add	r3, r2
 800e3dc:	00db      	lsls	r3, r3, #3
 800e3de:	440b      	add	r3, r1
 800e3e0:	3314      	adds	r3, #20
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e3e6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e3ea:	4979      	ldr	r1, [pc, #484]	; (800e5d0 <etharp_query+0x298>)
 800e3ec:	4613      	mov	r3, r2
 800e3ee:	005b      	lsls	r3, r3, #1
 800e3f0:	4413      	add	r3, r2
 800e3f2:	00db      	lsls	r3, r3, #3
 800e3f4:	440b      	add	r3, r1
 800e3f6:	3308      	adds	r3, #8
 800e3f8:	68fa      	ldr	r2, [r7, #12]
 800e3fa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e3fc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e400:	4973      	ldr	r1, [pc, #460]	; (800e5d0 <etharp_query+0x298>)
 800e402:	4613      	mov	r3, r2
 800e404:	005b      	lsls	r3, r3, #1
 800e406:	4413      	add	r3, r2
 800e408:	00db      	lsls	r3, r3, #3
 800e40a:	440b      	add	r3, r1
 800e40c:	3314      	adds	r3, #20
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	2b01      	cmp	r3, #1
 800e412:	d012      	beq.n	800e43a <etharp_query+0x102>
 800e414:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e418:	496d      	ldr	r1, [pc, #436]	; (800e5d0 <etharp_query+0x298>)
 800e41a:	4613      	mov	r3, r2
 800e41c:	005b      	lsls	r3, r3, #1
 800e41e:	4413      	add	r3, r2
 800e420:	00db      	lsls	r3, r3, #3
 800e422:	440b      	add	r3, r1
 800e424:	3314      	adds	r3, #20
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	2b01      	cmp	r3, #1
 800e42a:	d806      	bhi.n	800e43a <etharp_query+0x102>
 800e42c:	4b69      	ldr	r3, [pc, #420]	; (800e5d4 <etharp_query+0x29c>)
 800e42e:	f240 32c7 	movw	r2, #967	; 0x3c7
 800e432:	4969      	ldr	r1, [pc, #420]	; (800e5d8 <etharp_query+0x2a0>)
 800e434:	4869      	ldr	r0, [pc, #420]	; (800e5dc <etharp_query+0x2a4>)
 800e436:	f004 fae3 	bl	8012a00 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e43a:	6a3b      	ldr	r3, [r7, #32]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d102      	bne.n	800e446 <etharp_query+0x10e>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d10c      	bne.n	800e460 <etharp_query+0x128>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e446:	68b9      	ldr	r1, [r7, #8]
 800e448:	68f8      	ldr	r0, [r7, #12]
 800e44a:	f000 f98b 	bl	800e764 <etharp_request>
 800e44e:	4603      	mov	r3, r0
 800e450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d102      	bne.n	800e460 <etharp_query+0x128>
      return result;
 800e45a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e45e:	e0b0      	b.n	800e5c2 <etharp_query+0x28a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d106      	bne.n	800e474 <etharp_query+0x13c>
 800e466:	4b5b      	ldr	r3, [pc, #364]	; (800e5d4 <etharp_query+0x29c>)
 800e468:	f240 32db 	movw	r2, #987	; 0x3db
 800e46c:	495c      	ldr	r1, [pc, #368]	; (800e5e0 <etharp_query+0x2a8>)
 800e46e:	485b      	ldr	r0, [pc, #364]	; (800e5dc <etharp_query+0x2a4>)
 800e470:	f004 fac6 	bl	8012a00 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e474:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e478:	4955      	ldr	r1, [pc, #340]	; (800e5d0 <etharp_query+0x298>)
 800e47a:	4613      	mov	r3, r2
 800e47c:	005b      	lsls	r3, r3, #1
 800e47e:	4413      	add	r3, r2
 800e480:	00db      	lsls	r3, r3, #3
 800e482:	440b      	add	r3, r1
 800e484:	3314      	adds	r3, #20
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	2b01      	cmp	r3, #1
 800e48a:	d918      	bls.n	800e4be <etharp_query+0x186>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800e48c:	7cfa      	ldrb	r2, [r7, #19]
 800e48e:	4b55      	ldr	r3, [pc, #340]	; (800e5e4 <etharp_query+0x2ac>)
 800e490:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e492:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e496:	4613      	mov	r3, r2
 800e498:	005b      	lsls	r3, r3, #1
 800e49a:	4413      	add	r3, r2
 800e49c:	00db      	lsls	r3, r3, #3
 800e49e:	3308      	adds	r3, #8
 800e4a0:	4a4b      	ldr	r2, [pc, #300]	; (800e5d0 <etharp_query+0x298>)
 800e4a2:	4413      	add	r3, r2
 800e4a4:	3304      	adds	r3, #4
 800e4a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e4aa:	9200      	str	r2, [sp, #0]
 800e4ac:	697a      	ldr	r2, [r7, #20]
 800e4ae:	6879      	ldr	r1, [r7, #4]
 800e4b0:	68f8      	ldr	r0, [r7, #12]
 800e4b2:	f001 fd19 	bl	800fee8 <ethernet_output>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4bc:	e07f      	b.n	800e5be <etharp_query+0x286>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e4be:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e4c2:	4943      	ldr	r1, [pc, #268]	; (800e5d0 <etharp_query+0x298>)
 800e4c4:	4613      	mov	r3, r2
 800e4c6:	005b      	lsls	r3, r3, #1
 800e4c8:	4413      	add	r3, r2
 800e4ca:	00db      	lsls	r3, r3, #3
 800e4cc:	440b      	add	r3, r1
 800e4ce:	3314      	adds	r3, #20
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	2b01      	cmp	r3, #1
 800e4d4:	d173      	bne.n	800e5be <etharp_query+0x286>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e4de:	e01a      	b.n	800e516 <etharp_query+0x1de>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	895a      	ldrh	r2, [r3, #10]
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	891b      	ldrh	r3, [r3, #8]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d10a      	bne.n	800e502 <etharp_query+0x1ca>
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d006      	beq.n	800e502 <etharp_query+0x1ca>
 800e4f4:	4b37      	ldr	r3, [pc, #220]	; (800e5d4 <etharp_query+0x29c>)
 800e4f6:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800e4fa:	493b      	ldr	r1, [pc, #236]	; (800e5e8 <etharp_query+0x2b0>)
 800e4fc:	4837      	ldr	r0, [pc, #220]	; (800e5dc <etharp_query+0x2a4>)
 800e4fe:	f004 fa7f 	bl	8012a00 <iprintf>
      if (p->type != PBUF_ROM) {
 800e502:	69fb      	ldr	r3, [r7, #28]
 800e504:	7b1b      	ldrb	r3, [r3, #12]
 800e506:	2b01      	cmp	r3, #1
 800e508:	d002      	beq.n	800e510 <etharp_query+0x1d8>
        copy_needed = 1;
 800e50a:	2301      	movs	r3, #1
 800e50c:	61bb      	str	r3, [r7, #24]
        break;
 800e50e:	e005      	b.n	800e51c <etharp_query+0x1e4>
      }
      p = p->next;
 800e510:	69fb      	ldr	r3, [r7, #28]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e516:	69fb      	ldr	r3, [r7, #28]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d1e1      	bne.n	800e4e0 <etharp_query+0x1a8>
    }
    if (copy_needed) {
 800e51c:	69bb      	ldr	r3, [r7, #24]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d017      	beq.n	800e552 <etharp_query+0x21a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	891b      	ldrh	r3, [r3, #8]
 800e526:	2200      	movs	r2, #0
 800e528:	4619      	mov	r1, r3
 800e52a:	2002      	movs	r0, #2
 800e52c:	f7f9 f9a6 	bl	800787c <pbuf_alloc>
 800e530:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800e532:	69fb      	ldr	r3, [r7, #28]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d011      	beq.n	800e55c <etharp_query+0x224>
        if (pbuf_copy(p, q) != ERR_OK) {
 800e538:	6879      	ldr	r1, [r7, #4]
 800e53a:	69f8      	ldr	r0, [r7, #28]
 800e53c:	f7f9 fe48 	bl	80081d0 <pbuf_copy>
 800e540:	4603      	mov	r3, r0
 800e542:	2b00      	cmp	r3, #0
 800e544:	d00a      	beq.n	800e55c <etharp_query+0x224>
          pbuf_free(p);
 800e546:	69f8      	ldr	r0, [r7, #28]
 800e548:	f7f9 fd10 	bl	8007f6c <pbuf_free>
          p = NULL;
 800e54c:	2300      	movs	r3, #0
 800e54e:	61fb      	str	r3, [r7, #28]
 800e550:	e004      	b.n	800e55c <etharp_query+0x224>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e556:	69f8      	ldr	r0, [r7, #28]
 800e558:	f7f9 fdb2 	bl	80080c0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d024      	beq.n	800e5ac <etharp_query+0x274>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e562:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e566:	491a      	ldr	r1, [pc, #104]	; (800e5d0 <etharp_query+0x298>)
 800e568:	4613      	mov	r3, r2
 800e56a:	005b      	lsls	r3, r3, #1
 800e56c:	4413      	add	r3, r2
 800e56e:	00db      	lsls	r3, r3, #3
 800e570:	440b      	add	r3, r1
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d00b      	beq.n	800e590 <etharp_query+0x258>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800e578:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e57c:	4914      	ldr	r1, [pc, #80]	; (800e5d0 <etharp_query+0x298>)
 800e57e:	4613      	mov	r3, r2
 800e580:	005b      	lsls	r3, r3, #1
 800e582:	4413      	add	r3, r2
 800e584:	00db      	lsls	r3, r3, #3
 800e586:	440b      	add	r3, r1
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7f9 fcee 	bl	8007f6c <pbuf_free>
      }
      arp_table[i].q = p;
 800e590:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e594:	490e      	ldr	r1, [pc, #56]	; (800e5d0 <etharp_query+0x298>)
 800e596:	4613      	mov	r3, r2
 800e598:	005b      	lsls	r3, r3, #1
 800e59a:	4413      	add	r3, r2
 800e59c:	00db      	lsls	r3, r3, #3
 800e59e:	440b      	add	r3, r1
 800e5a0:	69fa      	ldr	r2, [r7, #28]
 800e5a2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e5aa:	e008      	b.n	800e5be <etharp_query+0x286>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 800e5ac:	4b07      	ldr	r3, [pc, #28]	; (800e5cc <etharp_query+0x294>)
 800e5ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	4b05      	ldr	r3, [pc, #20]	; (800e5cc <etharp_query+0x294>)
 800e5b6:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e5b8:	23ff      	movs	r3, #255	; 0xff
 800e5ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e5be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3728      	adds	r7, #40	; 0x28
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	20007db4 	.word	0x20007db4
 800e5d0:	20007eec 	.word	0x20007eec
 800e5d4:	08017cec 	.word	0x08017cec
 800e5d8:	08017e98 	.word	0x08017e98
 800e5dc:	08017d64 	.word	0x08017d64
 800e5e0:	08017e8c 	.word	0x08017e8c
 800e5e4:	20007fdc 	.word	0x20007fdc
 800e5e8:	08017ec0 	.word	0x08017ec0

0800e5ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b08a      	sub	sp, #40	; 0x28
 800e5f0:	af02      	add	r7, sp, #8
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	60b9      	str	r1, [r7, #8]
 800e5f6:	607a      	str	r2, [r7, #4]
 800e5f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d106      	bne.n	800e612 <etharp_raw+0x26>
 800e604:	4b40      	ldr	r3, [pc, #256]	; (800e708 <etharp_raw+0x11c>)
 800e606:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800e60a:	4940      	ldr	r1, [pc, #256]	; (800e70c <etharp_raw+0x120>)
 800e60c:	4840      	ldr	r0, [pc, #256]	; (800e710 <etharp_raw+0x124>)
 800e60e:	f004 f9f7 	bl	8012a00 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e612:	2200      	movs	r2, #0
 800e614:	211c      	movs	r1, #28
 800e616:	2002      	movs	r0, #2
 800e618:	f7f9 f930 	bl	800787c <pbuf_alloc>
 800e61c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e61e:	69bb      	ldr	r3, [r7, #24]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d108      	bne.n	800e636 <etharp_raw+0x4a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 800e624:	4b3b      	ldr	r3, [pc, #236]	; (800e714 <etharp_raw+0x128>)
 800e626:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e628:	3301      	adds	r3, #1
 800e62a:	b29a      	uxth	r2, r3
 800e62c:	4b39      	ldr	r3, [pc, #228]	; (800e714 <etharp_raw+0x128>)
 800e62e:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 800e630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e634:	e063      	b.n	800e6fe <etharp_raw+0x112>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e636:	69bb      	ldr	r3, [r7, #24]
 800e638:	895b      	ldrh	r3, [r3, #10]
 800e63a:	2b1b      	cmp	r3, #27
 800e63c:	d806      	bhi.n	800e64c <etharp_raw+0x60>
 800e63e:	4b32      	ldr	r3, [pc, #200]	; (800e708 <etharp_raw+0x11c>)
 800e640:	f240 4263 	movw	r2, #1123	; 0x463
 800e644:	4934      	ldr	r1, [pc, #208]	; (800e718 <etharp_raw+0x12c>)
 800e646:	4832      	ldr	r0, [pc, #200]	; (800e710 <etharp_raw+0x124>)
 800e648:	f004 f9da 	bl	8012a00 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e64c:	69bb      	ldr	r3, [r7, #24]
 800e64e:	685b      	ldr	r3, [r3, #4]
 800e650:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e652:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e654:	4618      	mov	r0, r3
 800e656:	f7f8 fab8 	bl	8006bca <lwip_htons>
 800e65a:	4603      	mov	r3, r0
 800e65c:	461a      	mov	r2, r3
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e668:	2b06      	cmp	r3, #6
 800e66a:	d006      	beq.n	800e67a <etharp_raw+0x8e>
 800e66c:	4b26      	ldr	r3, [pc, #152]	; (800e708 <etharp_raw+0x11c>)
 800e66e:	f240 426a 	movw	r2, #1130	; 0x46a
 800e672:	492a      	ldr	r1, [pc, #168]	; (800e71c <etharp_raw+0x130>)
 800e674:	4826      	ldr	r0, [pc, #152]	; (800e710 <etharp_raw+0x124>)
 800e676:	f004 f9c3 	bl	8012a00 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	3308      	adds	r3, #8
 800e67e:	2206      	movs	r2, #6
 800e680:	6839      	ldr	r1, [r7, #0]
 800e682:	4618      	mov	r0, r3
 800e684:	f003 fb38 	bl	8011cf8 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	3312      	adds	r3, #18
 800e68c:	2206      	movs	r2, #6
 800e68e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e690:	4618      	mov	r0, r3
 800e692:	f003 fb31 	bl	8011cf8 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	330e      	adds	r3, #14
 800e69a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e69c:	6812      	ldr	r2, [r2, #0]
 800e69e:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	3318      	adds	r3, #24
 800e6a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6a6:	6812      	ldr	r2, [r2, #0]
 800e6a8:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	701a      	strb	r2, [r3, #0]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	f042 0201 	orr.w	r2, r2, #1
 800e6b6:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	f042 0208 	orr.w	r2, r2, #8
 800e6c0:	709a      	strb	r2, [r3, #2]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	2206      	movs	r2, #6
 800e6ca:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	2204      	movs	r2, #4
 800e6d0:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e6d2:	f640 0306 	movw	r3, #2054	; 0x806
 800e6d6:	9300      	str	r3, [sp, #0]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	68ba      	ldr	r2, [r7, #8]
 800e6dc:	69b9      	ldr	r1, [r7, #24]
 800e6de:	68f8      	ldr	r0, [r7, #12]
 800e6e0:	f001 fc02 	bl	800fee8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 800e6e4:	4b0b      	ldr	r3, [pc, #44]	; (800e714 <etharp_raw+0x128>)
 800e6e6:	8b1b      	ldrh	r3, [r3, #24]
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	b29a      	uxth	r2, r3
 800e6ec:	4b09      	ldr	r3, [pc, #36]	; (800e714 <etharp_raw+0x128>)
 800e6ee:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 800e6f0:	69b8      	ldr	r0, [r7, #24]
 800e6f2:	f7f9 fc3b 	bl	8007f6c <pbuf_free>
  p = NULL;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e6fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3720      	adds	r7, #32
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	08017cec 	.word	0x08017cec
 800e70c:	08017e3c 	.word	0x08017e3c
 800e710:	08017d64 	.word	0x08017d64
 800e714:	20007db4 	.word	0x20007db4
 800e718:	08017edc 	.word	0x08017edc
 800e71c:	08017f10 	.word	0x08017f10

0800e720 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b088      	sub	sp, #32
 800e724:	af04      	add	r7, sp, #16
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e73c:	2201      	movs	r2, #1
 800e73e:	9203      	str	r2, [sp, #12]
 800e740:	68ba      	ldr	r2, [r7, #8]
 800e742:	9202      	str	r2, [sp, #8]
 800e744:	4a06      	ldr	r2, [pc, #24]	; (800e760 <etharp_request_dst+0x40>)
 800e746:	9201      	str	r2, [sp, #4]
 800e748:	9300      	str	r3, [sp, #0]
 800e74a:	4603      	mov	r3, r0
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	68f8      	ldr	r0, [r7, #12]
 800e750:	f7ff ff4c 	bl	800e5ec <etharp_raw>
 800e754:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e756:	4618      	mov	r0, r3
 800e758:	3710      	adds	r7, #16
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	08018478 	.word	0x08018478

0800e764 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e76e:	4a05      	ldr	r2, [pc, #20]	; (800e784 <etharp_request+0x20>)
 800e770:	6839      	ldr	r1, [r7, #0]
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f7ff ffd4 	bl	800e720 <etharp_request_dst>
 800e778:	4603      	mov	r3, r0
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3708      	adds	r7, #8
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	08018470 	.word	0x08018470

0800e788 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b08e      	sub	sp, #56	; 0x38
 800e78c:	af04      	add	r7, sp, #16
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
 800e792:	4b93      	ldr	r3, [pc, #588]	; (800e9e0 <icmp_input+0x258>)
 800e794:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e798:	3301      	adds	r3, #1
 800e79a:	b29a      	uxth	r2, r3
 800e79c:	4b90      	ldr	r3, [pc, #576]	; (800e9e0 <icmp_input+0x258>)
 800e79e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e7a2:	4b90      	ldr	r3, [pc, #576]	; (800e9e4 <icmp_input+0x25c>)
 800e7a4:	689b      	ldr	r3, [r3, #8]
 800e7a6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800e7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	f003 030f 	and.w	r3, r3, #15
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e7b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e7ba:	2b13      	cmp	r3, #19
 800e7bc:	f240 80ea 	bls.w	800e994 <icmp_input+0x20c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	895b      	ldrh	r3, [r3, #10]
 800e7c4:	2b03      	cmp	r3, #3
 800e7c6:	f240 80e7 	bls.w	800e998 <icmp_input+0x210>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e7d4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	f000 80d4 	beq.w	800e986 <icmp_input+0x1fe>
 800e7de:	2b08      	cmp	r3, #8
 800e7e0:	f040 80c0 	bne.w	800e964 <icmp_input+0x1dc>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800e7e4:	4b80      	ldr	r3, [pc, #512]	; (800e9e8 <icmp_input+0x260>)
 800e7e6:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e7e8:	4b7e      	ldr	r3, [pc, #504]	; (800e9e4 <icmp_input+0x25c>)
 800e7ea:	695b      	ldr	r3, [r3, #20]
 800e7ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e7f0:	2be0      	cmp	r3, #224	; 0xe0
 800e7f2:	f000 80e0 	beq.w	800e9b6 <icmp_input+0x22e>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e7f6:	4b7b      	ldr	r3, [pc, #492]	; (800e9e4 <icmp_input+0x25c>)
 800e7f8:	695b      	ldr	r3, [r3, #20]
 800e7fa:	4a7a      	ldr	r2, [pc, #488]	; (800e9e4 <icmp_input+0x25c>)
 800e7fc:	6812      	ldr	r2, [r2, #0]
 800e7fe:	4611      	mov	r1, r2
 800e800:	4618      	mov	r0, r3
 800e802:	f000 fc73 	bl	800f0ec <ip4_addr_isbroadcast_u32>
 800e806:	4603      	mov	r3, r0
 800e808:	2b00      	cmp	r3, #0
 800e80a:	f040 80d6 	bne.w	800e9ba <icmp_input+0x232>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	891b      	ldrh	r3, [r3, #8]
 800e812:	2b07      	cmp	r3, #7
 800e814:	f240 80c2 	bls.w	800e99c <icmp_input+0x214>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800e818:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e81a:	330e      	adds	r3, #14
 800e81c:	b29b      	uxth	r3, r3
 800e81e:	b21b      	sxth	r3, r3
 800e820:	4619      	mov	r1, r3
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f7f9 fb7e 	bl	8007f24 <pbuf_header>
 800e828:	4603      	mov	r3, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d046      	beq.n	800e8bc <icmp_input+0x134>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	891a      	ldrh	r2, [r3, #8]
 800e832:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e834:	4413      	add	r3, r2
 800e836:	b29b      	uxth	r3, r3
 800e838:	2200      	movs	r2, #0
 800e83a:	4619      	mov	r1, r3
 800e83c:	2002      	movs	r0, #2
 800e83e:	f7f9 f81d 	bl	800787c <pbuf_alloc>
 800e842:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800e844:	69bb      	ldr	r3, [r7, #24]
 800e846:	2b00      	cmp	r3, #0
 800e848:	f000 80b9 	beq.w	800e9be <icmp_input+0x236>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	895b      	ldrh	r3, [r3, #10]
 800e850:	461a      	mov	r2, r3
 800e852:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e854:	3308      	adds	r3, #8
 800e856:	429a      	cmp	r2, r3
 800e858:	d203      	bcs.n	800e862 <icmp_input+0xda>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800e85a:	69b8      	ldr	r0, [r7, #24]
 800e85c:	f7f9 fb86 	bl	8007f6c <pbuf_free>
        goto icmperr;
 800e860:	e0ae      	b.n	800e9c0 <icmp_input+0x238>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e86a:	4618      	mov	r0, r3
 800e86c:	f003 fa44 	bl	8011cf8 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800e870:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e872:	425b      	negs	r3, r3
 800e874:	b29b      	uxth	r3, r3
 800e876:	b21b      	sxth	r3, r3
 800e878:	4619      	mov	r1, r3
 800e87a:	69b8      	ldr	r0, [r7, #24]
 800e87c:	f7f9 fb52 	bl	8007f24 <pbuf_header>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	d009      	beq.n	800e89a <icmp_input+0x112>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e886:	4b59      	ldr	r3, [pc, #356]	; (800e9ec <icmp_input+0x264>)
 800e888:	22af      	movs	r2, #175	; 0xaf
 800e88a:	4959      	ldr	r1, [pc, #356]	; (800e9f0 <icmp_input+0x268>)
 800e88c:	4859      	ldr	r0, [pc, #356]	; (800e9f4 <icmp_input+0x26c>)
 800e88e:	f004 f8b7 	bl	8012a00 <iprintf>
        pbuf_free(r);
 800e892:	69b8      	ldr	r0, [r7, #24]
 800e894:	f7f9 fb6a 	bl	8007f6c <pbuf_free>
        goto icmperr;
 800e898:	e092      	b.n	800e9c0 <icmp_input+0x238>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800e89a:	6879      	ldr	r1, [r7, #4]
 800e89c:	69b8      	ldr	r0, [r7, #24]
 800e89e:	f7f9 fc97 	bl	80081d0 <pbuf_copy>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d003      	beq.n	800e8b0 <icmp_input+0x128>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800e8a8:	69b8      	ldr	r0, [r7, #24]
 800e8aa:	f7f9 fb5f 	bl	8007f6c <pbuf_free>
        goto icmperr;
 800e8ae:	e087      	b.n	800e9c0 <icmp_input+0x238>
      }
      /* free the original p */
      pbuf_free(p);
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f7f9 fb5b 	bl	8007f6c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800e8b6:	69bb      	ldr	r3, [r7, #24]
 800e8b8:	607b      	str	r3, [r7, #4]
 800e8ba:	e015      	b.n	800e8e8 <icmp_input+0x160>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800e8bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8be:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800e8c2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800e8c6:	33f2      	adds	r3, #242	; 0xf2
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	b21b      	sxth	r3, r3
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f7f9 fb28 	bl	8007f24 <pbuf_header>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d006      	beq.n	800e8e8 <icmp_input+0x160>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e8da:	4b44      	ldr	r3, [pc, #272]	; (800e9ec <icmp_input+0x264>)
 800e8dc:	22c0      	movs	r2, #192	; 0xc0
 800e8de:	4946      	ldr	r1, [pc, #280]	; (800e9f8 <icmp_input+0x270>)
 800e8e0:	4844      	ldr	r0, [pc, #272]	; (800e9f4 <icmp_input+0x26c>)
 800e8e2:	f004 f88d 	bl	8012a00 <iprintf>
        goto icmperr;
 800e8e6:	e06b      	b.n	800e9c0 <icmp_input+0x238>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800e8ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f7f9 fb15 	bl	8007f24 <pbuf_header>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d144      	bne.n	800e98a <icmp_input+0x202>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e90e:	4b35      	ldr	r3, [pc, #212]	; (800e9e4 <icmp_input+0x25c>)
 800e910:	691a      	ldr	r2, [r3, #16]
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	2200      	movs	r2, #0
 800e91a:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	2200      	movs	r2, #0
 800e920:	709a      	strb	r2, [r3, #2]
 800e922:	2200      	movs	r2, #0
 800e924:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	22ff      	movs	r2, #255	; 0xff
 800e92a:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	2200      	movs	r2, #0
 800e930:	729a      	strb	r2, [r3, #10]
 800e932:	2200      	movs	r2, #0
 800e934:	72da      	strb	r2, [r3, #11]
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
      }
#endif /* CHECKSUM_GEN_IP */

      ICMP_STATS_INC(icmp.xmit);
 800e936:	4b2a      	ldr	r3, [pc, #168]	; (800e9e0 <icmp_input+0x258>)
 800e938:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e93c:	3301      	adds	r3, #1
 800e93e:	b29a      	uxth	r2, r3
 800e940:	4b27      	ldr	r3, [pc, #156]	; (800e9e0 <icmp_input+0x258>)
 800e942:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	9302      	str	r3, [sp, #8]
 800e94a:	2301      	movs	r3, #1
 800e94c:	9301      	str	r3, [sp, #4]
 800e94e:	2300      	movs	r3, #0
 800e950:	9300      	str	r3, [sp, #0]
 800e952:	23ff      	movs	r3, #255	; 0xff
 800e954:	2200      	movs	r2, #0
 800e956:	69f9      	ldr	r1, [r7, #28]
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f000 fae3 	bl	800ef24 <ip4_output_if>
 800e95e:	4603      	mov	r3, r0
 800e960:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800e962:	e012      	b.n	800e98a <icmp_input+0x202>
    } else if (type == ICMP_AMR) {
      MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
 800e964:	4b1e      	ldr	r3, [pc, #120]	; (800e9e0 <icmp_input+0x258>)
 800e966:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800e96a:	3301      	adds	r3, #1
 800e96c:	b29a      	uxth	r2, r3
 800e96e:	4b1c      	ldr	r3, [pc, #112]	; (800e9e0 <icmp_input+0x258>)
 800e970:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
    ICMP_STATS_INC(icmp.drop);
 800e974:	4b1a      	ldr	r3, [pc, #104]	; (800e9e0 <icmp_input+0x258>)
 800e976:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e97a:	3301      	adds	r3, #1
 800e97c:	b29a      	uxth	r2, r3
 800e97e:	4b18      	ldr	r3, [pc, #96]	; (800e9e0 <icmp_input+0x258>)
 800e980:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 800e984:	e002      	b.n	800e98c <icmp_input+0x204>
    break;
 800e986:	bf00      	nop
 800e988:	e000      	b.n	800e98c <icmp_input+0x204>
    break;
 800e98a:	bf00      	nop
  }
  pbuf_free(p);
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f7f9 faed 	bl	8007f6c <pbuf_free>
  return;
 800e992:	e021      	b.n	800e9d8 <icmp_input+0x250>
    goto lenerr;
 800e994:	bf00      	nop
 800e996:	e002      	b.n	800e99e <icmp_input+0x216>
    goto lenerr;
 800e998:	bf00      	nop
 800e99a:	e000      	b.n	800e99e <icmp_input+0x216>
      goto lenerr;
 800e99c:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f7f9 fae4 	bl	8007f6c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 800e9a4:	4b0e      	ldr	r3, [pc, #56]	; (800e9e0 <icmp_input+0x258>)
 800e9a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e9aa:	3301      	adds	r3, #1
 800e9ac:	b29a      	uxth	r2, r3
 800e9ae:	4b0c      	ldr	r3, [pc, #48]	; (800e9e0 <icmp_input+0x258>)
 800e9b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e9b4:	e010      	b.n	800e9d8 <icmp_input+0x250>
      goto icmperr;
 800e9b6:	bf00      	nop
 800e9b8:	e002      	b.n	800e9c0 <icmp_input+0x238>
      goto icmperr;
 800e9ba:	bf00      	nop
 800e9bc:	e000      	b.n	800e9c0 <icmp_input+0x238>
        goto icmperr;
 800e9be:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f7f9 fad3 	bl	8007f6c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 800e9c6:	4b06      	ldr	r3, [pc, #24]	; (800e9e0 <icmp_input+0x258>)
 800e9c8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800e9cc:	3301      	adds	r3, #1
 800e9ce:	b29a      	uxth	r2, r3
 800e9d0:	4b03      	ldr	r3, [pc, #12]	; (800e9e0 <icmp_input+0x258>)
 800e9d2:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e9d6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e9d8:	3728      	adds	r7, #40	; 0x28
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}
 800e9de:	bf00      	nop
 800e9e0:	20007db4 	.word	0x20007db4
 800e9e4:	200047ec 	.word	0x200047ec
 800e9e8:	20004800 	.word	0x20004800
 800e9ec:	08017f54 	.word	0x08017f54
 800e9f0:	08017f8c 	.word	0x08017f8c
 800e9f4:	08017fc4 	.word	0x08017fc4
 800e9f8:	08017fec 	.word	0x08017fec

0800e9fc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	460b      	mov	r3, r1
 800ea06:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ea08:	78fb      	ldrb	r3, [r7, #3]
 800ea0a:	461a      	mov	r2, r3
 800ea0c:	2103      	movs	r1, #3
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f000 f814 	bl	800ea3c <icmp_send_response>
}
 800ea14:	bf00      	nop
 800ea16:	3708      	adds	r7, #8
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	460b      	mov	r3, r1
 800ea26:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ea28:	78fb      	ldrb	r3, [r7, #3]
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	210b      	movs	r1, #11
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 f804 	bl	800ea3c <icmp_send_response>
}
 800ea34:	bf00      	nop
 800ea36:	3708      	adds	r7, #8
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b08c      	sub	sp, #48	; 0x30
 800ea40:	af04      	add	r7, sp, #16
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	460b      	mov	r3, r1
 800ea46:	70fb      	strb	r3, [r7, #3]
 800ea48:	4613      	mov	r3, r2
 800ea4a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	2124      	movs	r1, #36	; 0x24
 800ea50:	2001      	movs	r0, #1
 800ea52:	f7f8 ff13 	bl	800787c <pbuf_alloc>
 800ea56:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ea58:	69fb      	ldr	r3, [r7, #28]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d054      	beq.n	800eb08 <icmp_send_response+0xcc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ea5e:	69fb      	ldr	r3, [r7, #28]
 800ea60:	895b      	ldrh	r3, [r3, #10]
 800ea62:	2b23      	cmp	r3, #35	; 0x23
 800ea64:	d806      	bhi.n	800ea74 <icmp_send_response+0x38>
 800ea66:	4b2a      	ldr	r3, [pc, #168]	; (800eb10 <icmp_send_response+0xd4>)
 800ea68:	f240 1261 	movw	r2, #353	; 0x161
 800ea6c:	4929      	ldr	r1, [pc, #164]	; (800eb14 <icmp_send_response+0xd8>)
 800ea6e:	482a      	ldr	r0, [pc, #168]	; (800eb18 <icmp_send_response+0xdc>)
 800ea70:	f003 ffc6 	bl	8012a00 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	78fa      	ldrb	r2, [r7, #3]
 800ea84:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	78ba      	ldrb	r2, [r7, #2]
 800ea8a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	711a      	strb	r2, [r3, #4]
 800ea92:	2200      	movs	r2, #0
 800ea94:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	719a      	strb	r2, [r3, #6]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	f103 0008 	add.w	r0, r3, #8
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	221c      	movs	r2, #28
 800eaae:	4619      	mov	r1, r3
 800eab0:	f003 f922 	bl	8011cf8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	68db      	ldr	r3, [r3, #12]
 800eab8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800eaba:	f107 030c 	add.w	r3, r7, #12
 800eabe:	4618      	mov	r0, r3
 800eac0:	f000 f82e 	bl	800eb20 <ip4_route>
 800eac4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d019      	beq.n	800eb00 <icmp_send_response+0xc4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	2200      	movs	r2, #0
 800ead0:	709a      	strb	r2, [r3, #2]
 800ead2:	2200      	movs	r2, #0
 800ead4:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 800ead6:	4b11      	ldr	r3, [pc, #68]	; (800eb1c <icmp_send_response+0xe0>)
 800ead8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eadc:	3301      	adds	r3, #1
 800eade:	b29a      	uxth	r2, r3
 800eae0:	4b0e      	ldr	r3, [pc, #56]	; (800eb1c <icmp_send_response+0xe0>)
 800eae2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800eae6:	f107 020c 	add.w	r2, r7, #12
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	9302      	str	r3, [sp, #8]
 800eaee:	2301      	movs	r3, #1
 800eaf0:	9301      	str	r3, [sp, #4]
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	9300      	str	r3, [sp, #0]
 800eaf6:	23ff      	movs	r3, #255	; 0xff
 800eaf8:	2100      	movs	r1, #0
 800eafa:	69f8      	ldr	r0, [r7, #28]
 800eafc:	f000 fa12 	bl	800ef24 <ip4_output_if>
  }
  pbuf_free(q);
 800eb00:	69f8      	ldr	r0, [r7, #28]
 800eb02:	f7f9 fa33 	bl	8007f6c <pbuf_free>
 800eb06:	e000      	b.n	800eb0a <icmp_send_response+0xce>
    return;
 800eb08:	bf00      	nop
}
 800eb0a:	3720      	adds	r7, #32
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	08017f54 	.word	0x08017f54
 800eb14:	08018020 	.word	0x08018020
 800eb18:	08017fc4 	.word	0x08017fc4
 800eb1c:	20007db4 	.word	0x20007db4

0800eb20 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b085      	sub	sp, #20
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800eb28:	4b34      	ldr	r3, [pc, #208]	; (800ebfc <ip4_route+0xdc>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	60fb      	str	r3, [r7, #12]
 800eb2e:	e036      	b.n	800eb9e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb36:	f003 0301 	and.w	r3, r3, #1
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d02b      	beq.n	800eb98 <ip4_route+0x78>
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb46:	089b      	lsrs	r3, r3, #2
 800eb48:	f003 0301 	and.w	r3, r3, #1
 800eb4c:	b2db      	uxtb	r3, r3
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d022      	beq.n	800eb98 <ip4_route+0x78>
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	3304      	adds	r3, #4
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d01d      	beq.n	800eb98 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681a      	ldr	r2, [r3, #0]
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	3304      	adds	r3, #4
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	405a      	eors	r2, r3
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	3308      	adds	r3, #8
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	4013      	ands	r3, r2
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d101      	bne.n	800eb78 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	e03b      	b.n	800ebf0 <ip4_route+0xd0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb7e:	f003 0302 	and.w	r3, r3, #2
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d108      	bne.n	800eb98 <ip4_route+0x78>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681a      	ldr	r2, [r3, #0]
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	330c      	adds	r3, #12
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d101      	bne.n	800eb98 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	e02b      	b.n	800ebf0 <ip4_route+0xd0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	60fb      	str	r3, [r7, #12]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d1c5      	bne.n	800eb30 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800eba4:	4b16      	ldr	r3, [pc, #88]	; (800ec00 <ip4_route+0xe0>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d015      	beq.n	800ebd8 <ip4_route+0xb8>
 800ebac:	4b14      	ldr	r3, [pc, #80]	; (800ec00 <ip4_route+0xe0>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ebb4:	f003 0301 	and.w	r3, r3, #1
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d00d      	beq.n	800ebd8 <ip4_route+0xb8>
 800ebbc:	4b10      	ldr	r3, [pc, #64]	; (800ec00 <ip4_route+0xe0>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ebc4:	f003 0304 	and.w	r3, r3, #4
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d005      	beq.n	800ebd8 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800ebcc:	4b0c      	ldr	r3, [pc, #48]	; (800ec00 <ip4_route+0xe0>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	3304      	adds	r3, #4
 800ebd2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d109      	bne.n	800ebec <ip4_route+0xcc>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 800ebd8:	4b0a      	ldr	r3, [pc, #40]	; (800ec04 <ip4_route+0xe4>)
 800ebda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ebde:	3301      	adds	r3, #1
 800ebe0:	b29a      	uxth	r2, r3
 800ebe2:	4b08      	ldr	r3, [pc, #32]	; (800ec04 <ip4_route+0xe4>)
 800ebe4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	e001      	b.n	800ebf0 <ip4_route+0xd0>
  }

  return netif_default;
 800ebec:	4b04      	ldr	r3, [pc, #16]	; (800ec00 <ip4_route+0xe0>)
 800ebee:	681b      	ldr	r3, [r3, #0]
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3714      	adds	r7, #20
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bc80      	pop	{r7}
 800ebf8:	4770      	bx	lr
 800ebfa:	bf00      	nop
 800ebfc:	20007da8 	.word	0x20007da8
 800ec00:	20007dac 	.word	0x20007dac
 800ec04:	20007db4 	.word	0x20007db4

0800ec08 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b086      	sub	sp, #24
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
 800ec12:	4b97      	ldr	r3, [pc, #604]	; (800ee70 <ip4_input+0x268>)
 800ec14:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ec18:	3301      	adds	r3, #1
 800ec1a:	b29a      	uxth	r2, r3
 800ec1c:	4b94      	ldr	r3, [pc, #592]	; (800ee70 <ip4_input+0x268>)
 800ec1e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	091b      	lsrs	r3, r3, #4
 800ec2e:	b2db      	uxtb	r3, r3
 800ec30:	2b04      	cmp	r3, #4
 800ec32:	d014      	beq.n	800ec5e <ip4_input+0x56>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f7f9 f999 	bl	8007f6c <pbuf_free>
    IP_STATS_INC(ip.err);
 800ec3a:	4b8d      	ldr	r3, [pc, #564]	; (800ee70 <ip4_input+0x268>)
 800ec3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ec40:	3301      	adds	r3, #1
 800ec42:	b29a      	uxth	r2, r3
 800ec44:	4b8a      	ldr	r3, [pc, #552]	; (800ee70 <ip4_input+0x268>)
 800ec46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 800ec4a:	4b89      	ldr	r3, [pc, #548]	; (800ee70 <ip4_input+0x268>)
 800ec4c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800ec50:	3301      	adds	r3, #1
 800ec52:	b29a      	uxth	r2, r3
 800ec54:	4b86      	ldr	r3, [pc, #536]	; (800ee70 <ip4_input+0x268>)
 800ec56:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	e15a      	b.n	800ef14 <ip4_input+0x30c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	f003 030f 	and.w	r3, r3, #15
 800ec68:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800ec6a:	897b      	ldrh	r3, [r7, #10]
 800ec6c:	009b      	lsls	r3, r3, #2
 800ec6e:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	885b      	ldrh	r3, [r3, #2]
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7f7 ffa7 	bl	8006bca <lwip_htons>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	891b      	ldrh	r3, [r3, #8]
 800ec84:	893a      	ldrh	r2, [r7, #8]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d204      	bcs.n	800ec94 <ip4_input+0x8c>
    pbuf_realloc(p, iphdr_len);
 800ec8a:	893b      	ldrh	r3, [r7, #8]
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f7f8 fff8 	bl	8007c84 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	895b      	ldrh	r3, [r3, #10]
 800ec98:	897a      	ldrh	r2, [r7, #10]
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d807      	bhi.n	800ecae <ip4_input+0xa6>
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	891b      	ldrh	r3, [r3, #8]
 800eca2:	893a      	ldrh	r2, [r7, #8]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d802      	bhi.n	800ecae <ip4_input+0xa6>
 800eca8:	897b      	ldrh	r3, [r7, #10]
 800ecaa:	2b13      	cmp	r3, #19
 800ecac:	d814      	bhi.n	800ecd8 <ip4_input+0xd0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f7f9 f95c 	bl	8007f6c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 800ecb4:	4b6e      	ldr	r3, [pc, #440]	; (800ee70 <ip4_input+0x268>)
 800ecb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ecba:	3301      	adds	r3, #1
 800ecbc:	b29a      	uxth	r2, r3
 800ecbe:	4b6c      	ldr	r3, [pc, #432]	; (800ee70 <ip4_input+0x268>)
 800ecc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 800ecc4:	4b6a      	ldr	r3, [pc, #424]	; (800ee70 <ip4_input+0x268>)
 800ecc6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800ecca:	3301      	adds	r3, #1
 800eccc:	b29a      	uxth	r2, r3
 800ecce:	4b68      	ldr	r3, [pc, #416]	; (800ee70 <ip4_input+0x268>)
 800ecd0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	e11d      	b.n	800ef14 <ip4_input+0x30c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	691b      	ldr	r3, [r3, #16]
 800ecdc:	4a65      	ldr	r2, [pc, #404]	; (800ee74 <ip4_input+0x26c>)
 800ecde:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	4a63      	ldr	r2, [pc, #396]	; (800ee74 <ip4_input+0x26c>)
 800ece6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ece8:	4b62      	ldr	r3, [pc, #392]	; (800ee74 <ip4_input+0x26c>)
 800ecea:	695b      	ldr	r3, [r3, #20]
 800ecec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ecf0:	2be0      	cmp	r3, #224	; 0xe0
 800ecf2:	d112      	bne.n	800ed1a <ip4_input+0x112>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ecfa:	f003 0301 	and.w	r3, r3, #1
 800ecfe:	b2db      	uxtb	r3, r3
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d007      	beq.n	800ed14 <ip4_input+0x10c>
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	3304      	adds	r3, #4
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d002      	beq.n	800ed14 <ip4_input+0x10c>
      netif = inp;
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	613b      	str	r3, [r7, #16]
 800ed12:	e041      	b.n	800ed98 <ip4_input+0x190>
    } else {
      netif = NULL;
 800ed14:	2300      	movs	r3, #0
 800ed16:	613b      	str	r3, [r7, #16]
 800ed18:	e03e      	b.n	800ed98 <ip4_input+0x190>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ed28:	f003 0301 	and.w	r3, r3, #1
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d014      	beq.n	800ed5c <ip4_input+0x154>
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	3304      	adds	r3, #4
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00f      	beq.n	800ed5c <ip4_input+0x154>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ed3c:	4b4d      	ldr	r3, [pc, #308]	; (800ee74 <ip4_input+0x26c>)
 800ed3e:	695a      	ldr	r2, [r3, #20]
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	3304      	adds	r3, #4
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d026      	beq.n	800ed98 <ip4_input+0x190>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ed4a:	4b4a      	ldr	r3, [pc, #296]	; (800ee74 <ip4_input+0x26c>)
 800ed4c:	695b      	ldr	r3, [r3, #20]
 800ed4e:	6939      	ldr	r1, [r7, #16]
 800ed50:	4618      	mov	r0, r3
 800ed52:	f000 f9cb 	bl	800f0ec <ip4_addr_isbroadcast_u32>
 800ed56:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d11d      	bne.n	800ed98 <ip4_input+0x190>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d00d      	beq.n	800ed7e <ip4_input+0x176>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800ed62:	4b44      	ldr	r3, [pc, #272]	; (800ee74 <ip4_input+0x26c>)
 800ed64:	695b      	ldr	r3, [r3, #20]
 800ed66:	b2db      	uxtb	r3, r3
 800ed68:	2b7f      	cmp	r3, #127	; 0x7f
 800ed6a:	d102      	bne.n	800ed72 <ip4_input+0x16a>
          netif = NULL;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	613b      	str	r3, [r7, #16]
          break;
 800ed70:	e012      	b.n	800ed98 <ip4_input+0x190>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800ed72:	2300      	movs	r3, #0
 800ed74:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800ed76:	4b40      	ldr	r3, [pc, #256]	; (800ee78 <ip4_input+0x270>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	613b      	str	r3, [r7, #16]
 800ed7c:	e002      	b.n	800ed84 <ip4_input+0x17c>
      } else {
        netif = netif->next;
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800ed84:	693a      	ldr	r2, [r7, #16]
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d102      	bne.n	800ed92 <ip4_input+0x18a>
        netif = netif->next;
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d1c4      	bne.n	800ed22 <ip4_input+0x11a>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ed98:	4b36      	ldr	r3, [pc, #216]	; (800ee74 <ip4_input+0x26c>)
 800ed9a:	691b      	ldr	r3, [r3, #16]
 800ed9c:	6839      	ldr	r1, [r7, #0]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f000 f9a4 	bl	800f0ec <ip4_addr_isbroadcast_u32>
 800eda4:	4603      	mov	r3, r0
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d105      	bne.n	800edb6 <ip4_input+0x1ae>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800edaa:	4b32      	ldr	r3, [pc, #200]	; (800ee74 <ip4_input+0x26c>)
 800edac:	691b      	ldr	r3, [r3, #16]
 800edae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800edb2:	2be0      	cmp	r3, #224	; 0xe0
 800edb4:	d10c      	bne.n	800edd0 <ip4_input+0x1c8>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f7f9 f8d8 	bl	8007f6c <pbuf_free>
      IP_STATS_INC(ip.drop);
 800edbc:	4b2c      	ldr	r3, [pc, #176]	; (800ee70 <ip4_input+0x268>)
 800edbe:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800edc2:	3301      	adds	r3, #1
 800edc4:	b29a      	uxth	r2, r3
 800edc6:	4b2a      	ldr	r3, [pc, #168]	; (800ee70 <ip4_input+0x268>)
 800edc8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800edcc:	2300      	movs	r3, #0
 800edce:	e0a1      	b.n	800ef14 <ip4_input+0x30c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d10c      	bne.n	800edf0 <ip4_input+0x1e8>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, iphdr, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 800edd6:	4b26      	ldr	r3, [pc, #152]	; (800ee70 <ip4_input+0x268>)
 800edd8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800eddc:	3301      	adds	r3, #1
 800edde:	b29a      	uxth	r2, r3
 800ede0:	4b23      	ldr	r3, [pc, #140]	; (800ee70 <ip4_input+0x268>)
 800ede2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f7f9 f8c0 	bl	8007f6c <pbuf_free>
    return ERR_OK;
 800edec:	2300      	movs	r3, #0
 800edee:	e091      	b.n	800ef14 <ip4_input+0x30c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	88db      	ldrh	r3, [r3, #6]
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	461a      	mov	r2, r3
 800edf8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800edfc:	4013      	ands	r3, r2
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d00b      	beq.n	800ee1a <ip4_input+0x212>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f000 fcbe 	bl	800f784 <ip4_reass>
 800ee08:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d101      	bne.n	800ee14 <ip4_input+0x20c>
      return ERR_OK;
 800ee10:	2300      	movs	r3, #0
 800ee12:	e07f      	b.n	800ef14 <ip4_input+0x30c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	685b      	ldr	r3, [r3, #4]
 800ee18:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ee1a:	4a16      	ldr	r2, [pc, #88]	; (800ee74 <ip4_input+0x26c>)
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ee20:	4a14      	ldr	r2, [pc, #80]	; (800ee74 <ip4_input+0x26c>)
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ee26:	4a13      	ldr	r2, [pc, #76]	; (800ee74 <ip4_input+0x26c>)
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	f003 030f 	and.w	r3, r3, #15
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	009b      	lsls	r3, r3, #2
 800ee3a:	b29a      	uxth	r2, r3
 800ee3c:	4b0d      	ldr	r3, [pc, #52]	; (800ee74 <ip4_input+0x26c>)
 800ee3e:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800ee40:	897b      	ldrh	r3, [r7, #10]
 800ee42:	425b      	negs	r3, r3
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	b21b      	sxth	r3, r3
 800ee48:	4619      	mov	r1, r3
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f7f9 f86a 	bl	8007f24 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	7a5b      	ldrb	r3, [r3, #9]
 800ee54:	2b11      	cmp	r3, #17
 800ee56:	d006      	beq.n	800ee66 <ip4_input+0x25e>
 800ee58:	2b11      	cmp	r3, #17
 800ee5a:	dc19      	bgt.n	800ee90 <ip4_input+0x288>
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	d012      	beq.n	800ee86 <ip4_input+0x27e>
 800ee60:	2b06      	cmp	r3, #6
 800ee62:	d00b      	beq.n	800ee7c <ip4_input+0x274>
 800ee64:	e014      	b.n	800ee90 <ip4_input+0x288>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800ee66:	6839      	ldr	r1, [r7, #0]
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f7fe f981 	bl	800d170 <udp_input>
      break;
 800ee6e:	e03e      	b.n	800eeee <ip4_input+0x2e6>
 800ee70:	20007db4 	.word	0x20007db4
 800ee74:	200047ec 	.word	0x200047ec
 800ee78:	20007da8 	.word	0x20007da8
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800ee7c:	6839      	ldr	r1, [r7, #0]
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f7fa fd82 	bl	8009988 <tcp_input>
      break;
 800ee84:	e033      	b.n	800eeee <ip4_input+0x2e6>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800ee86:	6839      	ldr	r1, [r7, #0]
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f7ff fc7d 	bl	800e788 <icmp_input>
      break;
 800ee8e:	e02e      	b.n	800eeee <ip4_input+0x2e6>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ee90:	4b22      	ldr	r3, [pc, #136]	; (800ef1c <ip4_input+0x314>)
 800ee92:	695b      	ldr	r3, [r3, #20]
 800ee94:	6939      	ldr	r1, [r7, #16]
 800ee96:	4618      	mov	r0, r3
 800ee98:	f000 f928 	bl	800f0ec <ip4_addr_isbroadcast_u32>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d112      	bne.n	800eec8 <ip4_input+0x2c0>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800eea2:	4b1e      	ldr	r3, [pc, #120]	; (800ef1c <ip4_input+0x314>)
 800eea4:	695b      	ldr	r3, [r3, #20]
 800eea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800eeaa:	2be0      	cmp	r3, #224	; 0xe0
 800eeac:	d00c      	beq.n	800eec8 <ip4_input+0x2c0>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800eeae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f7f9 f847 	bl	8007f48 <pbuf_header_force>
        p->payload = iphdr;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	697a      	ldr	r2, [r7, #20]
 800eebe:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800eec0:	2102      	movs	r1, #2
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f7ff fd9a 	bl	800e9fc <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f7f9 f84f 	bl	8007f6c <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
 800eece:	4b14      	ldr	r3, [pc, #80]	; (800ef20 <ip4_input+0x318>)
 800eed0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800eed4:	3301      	adds	r3, #1
 800eed6:	b29a      	uxth	r2, r3
 800eed8:	4b11      	ldr	r3, [pc, #68]	; (800ef20 <ip4_input+0x318>)
 800eeda:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
      IP_STATS_INC(ip.drop);
 800eede:	4b10      	ldr	r3, [pc, #64]	; (800ef20 <ip4_input+0x318>)
 800eee0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800eee4:	3301      	adds	r3, #1
 800eee6:	b29a      	uxth	r2, r3
 800eee8:	4b0d      	ldr	r3, [pc, #52]	; (800ef20 <ip4_input+0x318>)
 800eeea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800eeee:	4b0b      	ldr	r3, [pc, #44]	; (800ef1c <ip4_input+0x314>)
 800eef0:	2200      	movs	r2, #0
 800eef2:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800eef4:	4b09      	ldr	r3, [pc, #36]	; (800ef1c <ip4_input+0x314>)
 800eef6:	2200      	movs	r2, #0
 800eef8:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800eefa:	4b08      	ldr	r3, [pc, #32]	; (800ef1c <ip4_input+0x314>)
 800eefc:	2200      	movs	r2, #0
 800eefe:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ef00:	4b06      	ldr	r3, [pc, #24]	; (800ef1c <ip4_input+0x314>)
 800ef02:	2200      	movs	r2, #0
 800ef04:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ef06:	4b05      	ldr	r3, [pc, #20]	; (800ef1c <ip4_input+0x314>)
 800ef08:	2200      	movs	r2, #0
 800ef0a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ef0c:	4b03      	ldr	r3, [pc, #12]	; (800ef1c <ip4_input+0x314>)
 800ef0e:	2200      	movs	r2, #0
 800ef10:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ef12:	2300      	movs	r3, #0
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3718      	adds	r7, #24
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	200047ec 	.word	0x200047ec
 800ef20:	20007db4 	.word	0x20007db4

0800ef24 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b08a      	sub	sp, #40	; 0x28
 800ef28:	af04      	add	r7, sp, #16
 800ef2a:	60f8      	str	r0, [r7, #12]
 800ef2c:	60b9      	str	r1, [r7, #8]
 800ef2e:	607a      	str	r2, [r7, #4]
 800ef30:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d009      	beq.n	800ef50 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d003      	beq.n	800ef4a <ip4_output_if+0x26>
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d102      	bne.n	800ef50 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ef4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef4c:	3304      	adds	r3, #4
 800ef4e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ef50:	78fa      	ldrb	r2, [r7, #3]
 800ef52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef54:	9302      	str	r3, [sp, #8]
 800ef56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ef5a:	9301      	str	r3, [sp, #4]
 800ef5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef60:	9300      	str	r3, [sp, #0]
 800ef62:	4613      	mov	r3, r2
 800ef64:	687a      	ldr	r2, [r7, #4]
 800ef66:	6979      	ldr	r1, [r7, #20]
 800ef68:	68f8      	ldr	r0, [r7, #12]
 800ef6a:	f000 f805 	bl	800ef78 <ip4_output_if_src>
 800ef6e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3718      	adds	r7, #24
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b088      	sub	sp, #32
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	607a      	str	r2, [r7, #4]
 800ef84:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	89db      	ldrh	r3, [r3, #14]
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	d006      	beq.n	800ef9c <ip4_output_if_src+0x24>
 800ef8e:	4b50      	ldr	r3, [pc, #320]	; (800f0d0 <ip4_output_if_src+0x158>)
 800ef90:	f240 3233 	movw	r2, #819	; 0x333
 800ef94:	494f      	ldr	r1, [pc, #316]	; (800f0d4 <ip4_output_if_src+0x15c>)
 800ef96:	4850      	ldr	r0, [pc, #320]	; (800f0d8 <ip4_output_if_src+0x160>)
 800ef98:	f003 fd32 	bl	8012a00 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d068      	beq.n	800f074 <ip4_output_if_src+0xfc>
    u16_t ip_hlen = IP_HLEN;
 800efa2:	2314      	movs	r3, #20
 800efa4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800efa6:	2114      	movs	r1, #20
 800efa8:	68f8      	ldr	r0, [r7, #12]
 800efaa:	f7f8 ffbb 	bl	8007f24 <pbuf_header>
 800efae:	4603      	mov	r3, r0
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d00a      	beq.n	800efca <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 800efb4:	4b49      	ldr	r3, [pc, #292]	; (800f0dc <ip4_output_if_src+0x164>)
 800efb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800efba:	3301      	adds	r3, #1
 800efbc:	b29a      	uxth	r2, r3
 800efbe:	4b47      	ldr	r3, [pc, #284]	; (800f0dc <ip4_output_if_src+0x164>)
 800efc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800efc4:	f06f 0301 	mvn.w	r3, #1
 800efc8:	e07d      	b.n	800f0c6 <ip4_output_if_src+0x14e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	895b      	ldrh	r3, [r3, #10]
 800efd4:	2b13      	cmp	r3, #19
 800efd6:	d806      	bhi.n	800efe6 <ip4_output_if_src+0x6e>
 800efd8:	4b3d      	ldr	r3, [pc, #244]	; (800f0d0 <ip4_output_if_src+0x158>)
 800efda:	f44f 7258 	mov.w	r2, #864	; 0x360
 800efde:	4940      	ldr	r1, [pc, #256]	; (800f0e0 <ip4_output_if_src+0x168>)
 800efe0:	483d      	ldr	r0, [pc, #244]	; (800f0d8 <ip4_output_if_src+0x160>)
 800efe2:	f003 fd0d 	bl	8012a00 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800efe6:	69fb      	ldr	r3, [r7, #28]
 800efe8:	78fa      	ldrb	r2, [r7, #3]
 800efea:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800efec:	69fb      	ldr	r3, [r7, #28]
 800efee:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800eff2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	69fb      	ldr	r3, [r7, #28]
 800effa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800effc:	8b7b      	ldrh	r3, [r7, #26]
 800effe:	089b      	lsrs	r3, r3, #2
 800f000:	b29b      	uxth	r3, r3
 800f002:	b2db      	uxtb	r3, r3
 800f004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f008:	b2da      	uxtb	r2, r3
 800f00a:	69fb      	ldr	r3, [r7, #28]
 800f00c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f00e:	69fb      	ldr	r3, [r7, #28]
 800f010:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f014:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	891b      	ldrh	r3, [r3, #8]
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7f7 fdd5 	bl	8006bca <lwip_htons>
 800f020:	4603      	mov	r3, r0
 800f022:	461a      	mov	r2, r3
 800f024:	69fb      	ldr	r3, [r7, #28]
 800f026:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f028:	69fb      	ldr	r3, [r7, #28]
 800f02a:	2200      	movs	r2, #0
 800f02c:	719a      	strb	r2, [r3, #6]
 800f02e:	2200      	movs	r2, #0
 800f030:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f032:	4b2c      	ldr	r3, [pc, #176]	; (800f0e4 <ip4_output_if_src+0x16c>)
 800f034:	881b      	ldrh	r3, [r3, #0]
 800f036:	4618      	mov	r0, r3
 800f038:	f7f7 fdc7 	bl	8006bca <lwip_htons>
 800f03c:	4603      	mov	r3, r0
 800f03e:	461a      	mov	r2, r3
 800f040:	69fb      	ldr	r3, [r7, #28]
 800f042:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f044:	4b27      	ldr	r3, [pc, #156]	; (800f0e4 <ip4_output_if_src+0x16c>)
 800f046:	881b      	ldrh	r3, [r3, #0]
 800f048:	3301      	adds	r3, #1
 800f04a:	b29a      	uxth	r2, r3
 800f04c:	4b25      	ldr	r3, [pc, #148]	; (800f0e4 <ip4_output_if_src+0x16c>)
 800f04e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d104      	bne.n	800f060 <ip4_output_if_src+0xe8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f056:	4b24      	ldr	r3, [pc, #144]	; (800f0e8 <ip4_output_if_src+0x170>)
 800f058:	681a      	ldr	r2, [r3, #0]
 800f05a:	69fb      	ldr	r3, [r7, #28]
 800f05c:	60da      	str	r2, [r3, #12]
 800f05e:	e003      	b.n	800f068 <ip4_output_if_src+0xf0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	681a      	ldr	r2, [r3, #0]
 800f064:	69fb      	ldr	r3, [r7, #28]
 800f066:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	2200      	movs	r2, #0
 800f06c:	729a      	strb	r2, [r3, #10]
 800f06e:	2200      	movs	r2, #0
 800f070:	72da      	strb	r2, [r3, #11]
 800f072:	e008      	b.n	800f086 <ip4_output_if_src+0x10e>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f07a:	69fb      	ldr	r3, [r7, #28]
 800f07c:	691b      	ldr	r3, [r3, #16]
 800f07e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f080:	f107 0314 	add.w	r3, r7, #20
 800f084:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 800f086:	4b15      	ldr	r3, [pc, #84]	; (800f0dc <ip4_output_if_src+0x164>)
 800f088:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f08c:	3301      	adds	r3, #1
 800f08e:	b29a      	uxth	r2, r3
 800f090:	4b12      	ldr	r3, [pc, #72]	; (800f0dc <ip4_output_if_src+0x164>)
 800f092:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f098:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d00c      	beq.n	800f0b8 <ip4_output_if_src+0x140>
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	891a      	ldrh	r2, [r3, #8]
 800f0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d906      	bls.n	800f0b8 <ip4_output_if_src+0x140>
    return ip4_frag(p, netif, dest);
 800f0aa:	687a      	ldr	r2, [r7, #4]
 800f0ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f0ae:	68f8      	ldr	r0, [r7, #12]
 800f0b0:	f000 fd36 	bl	800fb20 <ip4_frag>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	e006      	b.n	800f0c6 <ip4_output_if_src+0x14e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ba:	695b      	ldr	r3, [r3, #20]
 800f0bc:	687a      	ldr	r2, [r7, #4]
 800f0be:	68f9      	ldr	r1, [r7, #12]
 800f0c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0c2:	4798      	blx	r3
 800f0c4:	4603      	mov	r3, r0
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3720      	adds	r7, #32
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	0801804c 	.word	0x0801804c
 800f0d4:	08018080 	.word	0x08018080
 800f0d8:	0801808c 	.word	0x0801808c
 800f0dc:	20007db4 	.word	0x20007db4
 800f0e0:	080180b4 	.word	0x080180b4
 800f0e4:	20007fde 	.word	0x20007fde
 800f0e8:	0801846c 	.word	0x0801846c

0800f0ec <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f100:	d002      	beq.n	800f108 <ip4_addr_isbroadcast_u32+0x1c>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d101      	bne.n	800f10c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f108:	2301      	movs	r3, #1
 800f10a:	e02a      	b.n	800f162 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f112:	f003 0302 	and.w	r3, r3, #2
 800f116:	2b00      	cmp	r3, #0
 800f118:	d101      	bne.n	800f11e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f11a:	2300      	movs	r3, #0
 800f11c:	e021      	b.n	800f162 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	3304      	adds	r3, #4
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	429a      	cmp	r2, r3
 800f128:	d101      	bne.n	800f12e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f12a:	2300      	movs	r3, #0
 800f12c:	e019      	b.n	800f162 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f12e:	68fa      	ldr	r2, [r7, #12]
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	3304      	adds	r3, #4
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	405a      	eors	r2, r3
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	3308      	adds	r3, #8
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	4013      	ands	r3, r2
 800f140:	2b00      	cmp	r3, #0
 800f142:	d10d      	bne.n	800f160 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	3308      	adds	r3, #8
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	43da      	mvns	r2, r3
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	3308      	adds	r3, #8
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f158:	429a      	cmp	r2, r3
 800f15a:	d101      	bne.n	800f160 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f15c:	2301      	movs	r3, #1
 800f15e:	e000      	b.n	800f162 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f160:	2300      	movs	r3, #0
  }
}
 800f162:	4618      	mov	r0, r3
 800f164:	3714      	adds	r7, #20
 800f166:	46bd      	mov	sp, r7
 800f168:	bc80      	pop	{r7}
 800f16a:	4770      	bx	lr

0800f16c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b084      	sub	sp, #16
 800f170:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f172:	2300      	movs	r3, #0
 800f174:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f176:	4b12      	ldr	r3, [pc, #72]	; (800f1c0 <ip_reass_tmr+0x54>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f17c:	e018      	b.n	800f1b0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	7fdb      	ldrb	r3, [r3, #31]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d00b      	beq.n	800f19e <ip_reass_tmr+0x32>
      r->timer--;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	7fdb      	ldrb	r3, [r3, #31]
 800f18a:	3b01      	subs	r3, #1
 800f18c:	b2da      	uxtb	r2, r3
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	60fb      	str	r3, [r7, #12]
 800f19c:	e008      	b.n	800f1b0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f1a8:	68b9      	ldr	r1, [r7, #8]
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f000 f80a 	bl	800f1c4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d1e3      	bne.n	800f17e <ip_reass_tmr+0x12>
     }
   }
}
 800f1b6:	bf00      	nop
 800f1b8:	bf00      	nop
 800f1ba:	3710      	adds	r7, #16
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	20007fe0 	.word	0x20007fe0

0800f1c4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b088      	sub	sp, #32
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
 800f1cc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f1d2:	683a      	ldr	r2, [r7, #0]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d105      	bne.n	800f1e6 <ip_reass_free_complete_datagram+0x22>
 800f1da:	4b45      	ldr	r3, [pc, #276]	; (800f2f0 <ip_reass_free_complete_datagram+0x12c>)
 800f1dc:	22ab      	movs	r2, #171	; 0xab
 800f1de:	4945      	ldr	r1, [pc, #276]	; (800f2f4 <ip_reass_free_complete_datagram+0x130>)
 800f1e0:	4845      	ldr	r0, [pc, #276]	; (800f2f8 <ip_reass_free_complete_datagram+0x134>)
 800f1e2:	f003 fc0d 	bl	8012a00 <iprintf>
  if (prev != NULL) {
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d00a      	beq.n	800f202 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	687a      	ldr	r2, [r7, #4]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d005      	beq.n	800f202 <ip_reass_free_complete_datagram+0x3e>
 800f1f6:	4b3e      	ldr	r3, [pc, #248]	; (800f2f0 <ip_reass_free_complete_datagram+0x12c>)
 800f1f8:	22ad      	movs	r2, #173	; 0xad
 800f1fa:	4940      	ldr	r1, [pc, #256]	; (800f2fc <ip_reass_free_complete_datagram+0x138>)
 800f1fc:	483e      	ldr	r0, [pc, #248]	; (800f2f8 <ip_reass_free_complete_datagram+0x134>)
 800f1fe:	f003 fbff 	bl	8012a00 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	685b      	ldr	r3, [r3, #4]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	889b      	ldrh	r3, [r3, #4]
 800f20e:	b29b      	uxth	r3, r3
 800f210:	2b00      	cmp	r3, #0
 800f212:	d12a      	bne.n	800f26a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	685b      	ldr	r3, [r3, #4]
 800f218:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	681a      	ldr	r2, [r3, #0]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	6858      	ldr	r0, [r3, #4]
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	3308      	adds	r3, #8
 800f22a:	2214      	movs	r2, #20
 800f22c:	4619      	mov	r1, r3
 800f22e:	f002 fd63 	bl	8011cf8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f232:	2101      	movs	r1, #1
 800f234:	69b8      	ldr	r0, [r7, #24]
 800f236:	f7ff fbf1 	bl	800ea1c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f23a:	69b8      	ldr	r0, [r7, #24]
 800f23c:	f7f8 ff2a 	bl	8008094 <pbuf_clen>
 800f240:	4603      	mov	r3, r0
 800f242:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f244:	8bfa      	ldrh	r2, [r7, #30]
 800f246:	8a7b      	ldrh	r3, [r7, #18]
 800f248:	4413      	add	r3, r2
 800f24a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f24e:	db05      	blt.n	800f25c <ip_reass_free_complete_datagram+0x98>
 800f250:	4b27      	ldr	r3, [pc, #156]	; (800f2f0 <ip_reass_free_complete_datagram+0x12c>)
 800f252:	22bc      	movs	r2, #188	; 0xbc
 800f254:	492a      	ldr	r1, [pc, #168]	; (800f300 <ip_reass_free_complete_datagram+0x13c>)
 800f256:	4828      	ldr	r0, [pc, #160]	; (800f2f8 <ip_reass_free_complete_datagram+0x134>)
 800f258:	f003 fbd2 	bl	8012a00 <iprintf>
    pbufs_freed += clen;
 800f25c:	8bfa      	ldrh	r2, [r7, #30]
 800f25e:	8a7b      	ldrh	r3, [r7, #18]
 800f260:	4413      	add	r3, r2
 800f262:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f264:	69b8      	ldr	r0, [r7, #24]
 800f266:	f7f8 fe81 	bl	8007f6c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	685b      	ldr	r3, [r3, #4]
 800f26e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f270:	e01f      	b.n	800f2b2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f272:	69bb      	ldr	r3, [r7, #24]
 800f274:	685b      	ldr	r3, [r3, #4]
 800f276:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f278:	69bb      	ldr	r3, [r7, #24]
 800f27a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f282:	68f8      	ldr	r0, [r7, #12]
 800f284:	f7f8 ff06 	bl	8008094 <pbuf_clen>
 800f288:	4603      	mov	r3, r0
 800f28a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f28c:	8bfa      	ldrh	r2, [r7, #30]
 800f28e:	8a7b      	ldrh	r3, [r7, #18]
 800f290:	4413      	add	r3, r2
 800f292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f296:	db05      	blt.n	800f2a4 <ip_reass_free_complete_datagram+0xe0>
 800f298:	4b15      	ldr	r3, [pc, #84]	; (800f2f0 <ip_reass_free_complete_datagram+0x12c>)
 800f29a:	22cc      	movs	r2, #204	; 0xcc
 800f29c:	4918      	ldr	r1, [pc, #96]	; (800f300 <ip_reass_free_complete_datagram+0x13c>)
 800f29e:	4816      	ldr	r0, [pc, #88]	; (800f2f8 <ip_reass_free_complete_datagram+0x134>)
 800f2a0:	f003 fbae 	bl	8012a00 <iprintf>
    pbufs_freed += clen;
 800f2a4:	8bfa      	ldrh	r2, [r7, #30]
 800f2a6:	8a7b      	ldrh	r3, [r7, #18]
 800f2a8:	4413      	add	r3, r2
 800f2aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f2ac:	68f8      	ldr	r0, [r7, #12]
 800f2ae:	f7f8 fe5d 	bl	8007f6c <pbuf_free>
  while (p != NULL) {
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d1dc      	bne.n	800f272 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f2b8:	6839      	ldr	r1, [r7, #0]
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f000 f8ca 	bl	800f454 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800f2c0:	4b10      	ldr	r3, [pc, #64]	; (800f304 <ip_reass_free_complete_datagram+0x140>)
 800f2c2:	881b      	ldrh	r3, [r3, #0]
 800f2c4:	8bfa      	ldrh	r2, [r7, #30]
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d905      	bls.n	800f2d6 <ip_reass_free_complete_datagram+0x112>
 800f2ca:	4b09      	ldr	r3, [pc, #36]	; (800f2f0 <ip_reass_free_complete_datagram+0x12c>)
 800f2cc:	22d2      	movs	r2, #210	; 0xd2
 800f2ce:	490e      	ldr	r1, [pc, #56]	; (800f308 <ip_reass_free_complete_datagram+0x144>)
 800f2d0:	4809      	ldr	r0, [pc, #36]	; (800f2f8 <ip_reass_free_complete_datagram+0x134>)
 800f2d2:	f003 fb95 	bl	8012a00 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800f2d6:	4b0b      	ldr	r3, [pc, #44]	; (800f304 <ip_reass_free_complete_datagram+0x140>)
 800f2d8:	881a      	ldrh	r2, [r3, #0]
 800f2da:	8bfb      	ldrh	r3, [r7, #30]
 800f2dc:	1ad3      	subs	r3, r2, r3
 800f2de:	b29a      	uxth	r2, r3
 800f2e0:	4b08      	ldr	r3, [pc, #32]	; (800f304 <ip_reass_free_complete_datagram+0x140>)
 800f2e2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f2e4:	8bfb      	ldrh	r3, [r7, #30]
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3720      	adds	r7, #32
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	080180e4 	.word	0x080180e4
 800f2f4:	08018120 	.word	0x08018120
 800f2f8:	0801812c 	.word	0x0801812c
 800f2fc:	08018154 	.word	0x08018154
 800f300:	08018168 	.word	0x08018168
 800f304:	20007fe4 	.word	0x20007fe4
 800f308:	08018188 	.word	0x08018188

0800f30c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b08a      	sub	sp, #40	; 0x28
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f316:	2300      	movs	r3, #0
 800f318:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f31a:	2300      	movs	r3, #0
 800f31c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f31e:	2300      	movs	r3, #0
 800f320:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f322:	2300      	movs	r3, #0
 800f324:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f326:	2300      	movs	r3, #0
 800f328:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f32a:	4b28      	ldr	r3, [pc, #160]	; (800f3cc <ip_reass_remove_oldest_datagram+0xc0>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f330:	e030      	b.n	800f394 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f334:	695a      	ldr	r2, [r3, #20]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	68db      	ldr	r3, [r3, #12]
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d10c      	bne.n	800f358 <ip_reass_remove_oldest_datagram+0x4c>
 800f33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f340:	699a      	ldr	r2, [r3, #24]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	691b      	ldr	r3, [r3, #16]
 800f346:	429a      	cmp	r2, r3
 800f348:	d106      	bne.n	800f358 <ip_reass_remove_oldest_datagram+0x4c>
 800f34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34c:	899a      	ldrh	r2, [r3, #12]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	889b      	ldrh	r3, [r3, #4]
 800f352:	b29b      	uxth	r3, r3
 800f354:	429a      	cmp	r2, r3
 800f356:	d014      	beq.n	800f382 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	3301      	adds	r3, #1
 800f35c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f35e:	6a3b      	ldr	r3, [r7, #32]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d104      	bne.n	800f36e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f366:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f368:	69fb      	ldr	r3, [r7, #28]
 800f36a:	61bb      	str	r3, [r7, #24]
 800f36c:	e009      	b.n	800f382 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f370:	7fda      	ldrb	r2, [r3, #31]
 800f372:	6a3b      	ldr	r3, [r7, #32]
 800f374:	7fdb      	ldrb	r3, [r3, #31]
 800f376:	429a      	cmp	r2, r3
 800f378:	d803      	bhi.n	800f382 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f37e:	69fb      	ldr	r3, [r7, #28]
 800f380:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d001      	beq.n	800f38e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f396:	2b00      	cmp	r3, #0
 800f398:	d1cb      	bne.n	800f332 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f39a:	6a3b      	ldr	r3, [r7, #32]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d008      	beq.n	800f3b2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f3a0:	69b9      	ldr	r1, [r7, #24]
 800f3a2:	6a38      	ldr	r0, [r7, #32]
 800f3a4:	f7ff ff0e 	bl	800f1c4 <ip_reass_free_complete_datagram>
 800f3a8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f3aa:	697a      	ldr	r2, [r7, #20]
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f3b2:	697a      	ldr	r2, [r7, #20]
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	da02      	bge.n	800f3c0 <ip_reass_remove_oldest_datagram+0xb4>
 800f3ba:	693b      	ldr	r3, [r7, #16]
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	dcac      	bgt.n	800f31a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f3c0:	697b      	ldr	r3, [r7, #20]
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3728      	adds	r7, #40	; 0x28
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
 800f3ca:	bf00      	nop
 800f3cc:	20007fe0 	.word	0x20007fe0

0800f3d0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f3da:	2004      	movs	r0, #4
 800f3dc:	f7f8 f836 	bl	800744c <memp_malloc>
 800f3e0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d116      	bne.n	800f416 <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f3e8:	6839      	ldr	r1, [r7, #0]
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f7ff ff8e 	bl	800f30c <ip_reass_remove_oldest_datagram>
 800f3f0:	4602      	mov	r2, r0
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	dc03      	bgt.n	800f400 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f3f8:	2004      	movs	r0, #4
 800f3fa:	f7f8 f827 	bl	800744c <memp_malloc>
 800f3fe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d107      	bne.n	800f416 <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 800f406:	4b11      	ldr	r3, [pc, #68]	; (800f44c <ip_reass_enqueue_new_datagram+0x7c>)
 800f408:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800f40a:	3301      	adds	r3, #1
 800f40c:	b29a      	uxth	r2, r3
 800f40e:	4b0f      	ldr	r3, [pc, #60]	; (800f44c <ip_reass_enqueue_new_datagram+0x7c>)
 800f410:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800f412:	2300      	movs	r3, #0
 800f414:	e016      	b.n	800f444 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f416:	2220      	movs	r2, #32
 800f418:	2100      	movs	r1, #0
 800f41a:	68f8      	ldr	r0, [r7, #12]
 800f41c:	f002 fc7a 	bl	8011d14 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2203      	movs	r2, #3
 800f424:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f426:	4b0a      	ldr	r3, [pc, #40]	; (800f450 <ip_reass_enqueue_new_datagram+0x80>)
 800f428:	681a      	ldr	r2, [r3, #0]
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f42e:	4a08      	ldr	r2, [pc, #32]	; (800f450 <ip_reass_enqueue_new_datagram+0x80>)
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	3308      	adds	r3, #8
 800f438:	2214      	movs	r2, #20
 800f43a:	6879      	ldr	r1, [r7, #4]
 800f43c:	4618      	mov	r0, r3
 800f43e:	f002 fc5b 	bl	8011cf8 <memcpy>
  return ipr;
 800f442:	68fb      	ldr	r3, [r7, #12]
}
 800f444:	4618      	mov	r0, r3
 800f446:	3710      	adds	r7, #16
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}
 800f44c:	20007db4 	.word	0x20007db4
 800f450:	20007fe0 	.word	0x20007fe0

0800f454 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f45e:	4b10      	ldr	r3, [pc, #64]	; (800f4a0 <ip_reass_dequeue_datagram+0x4c>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	429a      	cmp	r2, r3
 800f466:	d104      	bne.n	800f472 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	4a0c      	ldr	r2, [pc, #48]	; (800f4a0 <ip_reass_dequeue_datagram+0x4c>)
 800f46e:	6013      	str	r3, [r2, #0]
 800f470:	e00d      	b.n	800f48e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d106      	bne.n	800f486 <ip_reass_dequeue_datagram+0x32>
 800f478:	4b0a      	ldr	r3, [pc, #40]	; (800f4a4 <ip_reass_dequeue_datagram+0x50>)
 800f47a:	f240 1245 	movw	r2, #325	; 0x145
 800f47e:	490a      	ldr	r1, [pc, #40]	; (800f4a8 <ip_reass_dequeue_datagram+0x54>)
 800f480:	480a      	ldr	r0, [pc, #40]	; (800f4ac <ip_reass_dequeue_datagram+0x58>)
 800f482:	f003 fabd 	bl	8012a00 <iprintf>
    prev->next = ipr->next;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681a      	ldr	r2, [r3, #0]
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f48e:	6879      	ldr	r1, [r7, #4]
 800f490:	2004      	movs	r0, #4
 800f492:	f7f8 f82d 	bl	80074f0 <memp_free>
}
 800f496:	bf00      	nop
 800f498:	3708      	adds	r7, #8
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}
 800f49e:	bf00      	nop
 800f4a0:	20007fe0 	.word	0x20007fe0
 800f4a4:	080180e4 	.word	0x080180e4
 800f4a8:	080181a4 	.word	0x080181a4
 800f4ac:	0801812c 	.word	0x0801812c

0800f4b0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b08c      	sub	sp, #48	; 0x30
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	60f8      	str	r0, [r7, #12]
 800f4b8:	60b9      	str	r1, [r7, #8]
 800f4ba:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	685b      	ldr	r3, [r3, #4]
 800f4c8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800f4ca:	69fb      	ldr	r3, [r7, #28]
 800f4cc:	885b      	ldrh	r3, [r3, #2]
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7f7 fb7a 	bl	8006bca <lwip_htons>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	461a      	mov	r2, r3
 800f4da:	69fb      	ldr	r3, [r7, #28]
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	f003 030f 	and.w	r3, r3, #15
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	009b      	lsls	r3, r3, #2
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	1ad3      	subs	r3, r2, r3
 800f4ec:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800f4ee:	69fb      	ldr	r3, [r7, #28]
 800f4f0:	88db      	ldrh	r3, [r3, #6]
 800f4f2:	b29b      	uxth	r3, r3
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f7f7 fb68 	bl	8006bca <lwip_htons>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f500:	b29b      	uxth	r3, r3
 800f502:	00db      	lsls	r3, r3, #3
 800f504:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f50e:	2200      	movs	r2, #0
 800f510:	701a      	strb	r2, [r3, #0]
 800f512:	2200      	movs	r2, #0
 800f514:	705a      	strb	r2, [r3, #1]
 800f516:	2200      	movs	r2, #0
 800f518:	709a      	strb	r2, [r3, #2]
 800f51a:	2200      	movs	r2, #0
 800f51c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f520:	8b3a      	ldrh	r2, [r7, #24]
 800f522:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800f524:	8b3a      	ldrh	r2, [r7, #24]
 800f526:	8b7b      	ldrh	r3, [r7, #26]
 800f528:	4413      	add	r3, r2
 800f52a:	b29a      	uxth	r2, r3
 800f52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f52e:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	627b      	str	r3, [r7, #36]	; 0x24
 800f536:	e061      	b.n	800f5fc <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800f538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800f53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f540:	889b      	ldrh	r3, [r3, #4]
 800f542:	b29a      	uxth	r2, r3
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	889b      	ldrh	r3, [r3, #4]
 800f548:	b29b      	uxth	r3, r3
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d232      	bcs.n	800f5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f552:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f556:	2b00      	cmp	r3, #0
 800f558:	d01f      	beq.n	800f59a <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f55c:	889b      	ldrh	r3, [r3, #4]
 800f55e:	b29a      	uxth	r2, r3
 800f560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f562:	88db      	ldrh	r3, [r3, #6]
 800f564:	b29b      	uxth	r3, r3
 800f566:	429a      	cmp	r2, r3
 800f568:	f0c0 80e3 	bcc.w	800f732 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800f56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f56e:	88db      	ldrh	r3, [r3, #6]
 800f570:	b29a      	uxth	r2, r3
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	889b      	ldrh	r3, [r3, #4]
 800f576:	b29b      	uxth	r3, r3
 800f578:	429a      	cmp	r2, r3
 800f57a:	f200 80da 	bhi.w	800f732 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f580:	68ba      	ldr	r2, [r7, #8]
 800f582:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f586:	88db      	ldrh	r3, [r3, #6]
 800f588:	b29a      	uxth	r2, r3
 800f58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f58c:	889b      	ldrh	r3, [r3, #4]
 800f58e:	b29b      	uxth	r3, r3
 800f590:	429a      	cmp	r2, r3
 800f592:	d037      	beq.n	800f604 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f594:	2300      	movs	r3, #0
 800f596:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f598:	e034      	b.n	800f604 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800f59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f59c:	88db      	ldrh	r3, [r3, #6]
 800f59e:	b29a      	uxth	r2, r3
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	889b      	ldrh	r3, [r3, #4]
 800f5a4:	b29b      	uxth	r3, r3
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	f200 80c5 	bhi.w	800f736 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	68ba      	ldr	r2, [r7, #8]
 800f5b0:	605a      	str	r2, [r3, #4]
      break;
 800f5b2:	e027      	b.n	800f604 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800f5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b6:	889b      	ldrh	r3, [r3, #4]
 800f5b8:	b29a      	uxth	r2, r3
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	889b      	ldrh	r3, [r3, #4]
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	f000 80ba 	beq.w	800f73a <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c8:	889b      	ldrh	r3, [r3, #4]
 800f5ca:	b29a      	uxth	r2, r3
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	88db      	ldrh	r3, [r3, #6]
 800f5d0:	b29b      	uxth	r3, r3
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	f0c0 80b3 	bcc.w	800f73e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d009      	beq.n	800f5f2 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800f5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e0:	88db      	ldrh	r3, [r3, #6]
 800f5e2:	b29a      	uxth	r2, r3
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	889b      	ldrh	r3, [r3, #4]
 800f5e8:	b29b      	uxth	r3, r3
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d001      	beq.n	800f5f2 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d19a      	bne.n	800f538 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800f602:	e000      	b.n	800f606 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800f604:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d12d      	bne.n	800f668 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800f60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d01c      	beq.n	800f64c <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f614:	88db      	ldrh	r3, [r3, #6]
 800f616:	b29a      	uxth	r2, r3
 800f618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f61a:	889b      	ldrh	r3, [r3, #4]
 800f61c:	b29b      	uxth	r3, r3
 800f61e:	429a      	cmp	r2, r3
 800f620:	d906      	bls.n	800f630 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800f622:	4b51      	ldr	r3, [pc, #324]	; (800f768 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f624:	f240 12ab 	movw	r2, #427	; 0x1ab
 800f628:	4950      	ldr	r1, [pc, #320]	; (800f76c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f62a:	4851      	ldr	r0, [pc, #324]	; (800f770 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f62c:	f003 f9e8 	bl	8012a00 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f632:	68ba      	ldr	r2, [r7, #8]
 800f634:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f638:	88db      	ldrh	r3, [r3, #6]
 800f63a:	b29a      	uxth	r2, r3
 800f63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f63e:	889b      	ldrh	r3, [r3, #4]
 800f640:	b29b      	uxth	r3, r3
 800f642:	429a      	cmp	r2, r3
 800f644:	d010      	beq.n	800f668 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800f646:	2300      	movs	r3, #0
 800f648:	623b      	str	r3, [r7, #32]
 800f64a:	e00d      	b.n	800f668 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	685b      	ldr	r3, [r3, #4]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d006      	beq.n	800f662 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800f654:	4b44      	ldr	r3, [pc, #272]	; (800f768 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f656:	f240 12b3 	movw	r2, #435	; 0x1b3
 800f65a:	4946      	ldr	r1, [pc, #280]	; (800f774 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f65c:	4844      	ldr	r0, [pc, #272]	; (800f770 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f65e:	f003 f9cf 	bl	8012a00 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	68ba      	ldr	r2, [r7, #8]
 800f666:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d105      	bne.n	800f67a <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	7f9b      	ldrb	r3, [r3, #30]
 800f672:	f003 0301 	and.w	r3, r3, #1
 800f676:	2b00      	cmp	r3, #0
 800f678:	d059      	beq.n	800f72e <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800f67a:	6a3b      	ldr	r3, [r7, #32]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d04f      	beq.n	800f720 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d006      	beq.n	800f696 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	685b      	ldr	r3, [r3, #4]
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	889b      	ldrh	r3, [r3, #4]
 800f690:	b29b      	uxth	r3, r3
 800f692:	2b00      	cmp	r3, #0
 800f694:	d002      	beq.n	800f69c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f696:	2300      	movs	r3, #0
 800f698:	623b      	str	r3, [r7, #32]
 800f69a:	e041      	b.n	800f720 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f69e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f6a6:	e012      	b.n	800f6ce <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800f6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6aa:	685b      	ldr	r3, [r3, #4]
 800f6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b0:	88db      	ldrh	r3, [r3, #6]
 800f6b2:	b29a      	uxth	r2, r3
 800f6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b6:	889b      	ldrh	r3, [r3, #4]
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d002      	beq.n	800f6c4 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	623b      	str	r3, [r7, #32]
            break;
 800f6c2:	e007      	b.n	800f6d4 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800f6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d1e9      	bne.n	800f6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f6d4:	6a3b      	ldr	r3, [r7, #32]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d022      	beq.n	800f720 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d106      	bne.n	800f6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800f6e2:	4b21      	ldr	r3, [pc, #132]	; (800f768 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f6e4:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800f6e8:	4923      	ldr	r1, [pc, #140]	; (800f778 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f6ea:	4821      	ldr	r0, [pc, #132]	; (800f770 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f6ec:	f003 f988 	bl	8012a00 <iprintf>
          LWIP_ASSERT("sanity check",
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	685b      	ldr	r3, [r3, #4]
 800f6f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d106      	bne.n	800f70a <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800f6fc:	4b1a      	ldr	r3, [pc, #104]	; (800f768 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f6fe:	f240 12d5 	movw	r2, #469	; 0x1d5
 800f702:	491d      	ldr	r1, [pc, #116]	; (800f778 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f704:	481a      	ldr	r0, [pc, #104]	; (800f770 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f706:	f003 f97b 	bl	8012a00 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d006      	beq.n	800f720 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800f712:	4b15      	ldr	r3, [pc, #84]	; (800f768 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f714:	f240 12d7 	movw	r2, #471	; 0x1d7
 800f718:	4918      	ldr	r1, [pc, #96]	; (800f77c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f71a:	4815      	ldr	r0, [pc, #84]	; (800f770 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f71c:	f003 f970 	bl	8012a00 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f720:	6a3b      	ldr	r3, [r7, #32]
 800f722:	2b00      	cmp	r3, #0
 800f724:	bf14      	ite	ne
 800f726:	2301      	movne	r3, #1
 800f728:	2300      	moveq	r3, #0
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	e018      	b.n	800f760 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f72e:	2300      	movs	r3, #0
 800f730:	e016      	b.n	800f760 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 800f732:	bf00      	nop
 800f734:	e004      	b.n	800f740 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800f736:	bf00      	nop
 800f738:	e002      	b.n	800f740 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800f73a:	bf00      	nop
 800f73c:	e000      	b.n	800f740 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800f73e:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800f740:	68b8      	ldr	r0, [r7, #8]
 800f742:	f7f8 fca7 	bl	8008094 <pbuf_clen>
 800f746:	4603      	mov	r3, r0
 800f748:	461a      	mov	r2, r3
 800f74a:	4b0d      	ldr	r3, [pc, #52]	; (800f780 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f74c:	881b      	ldrh	r3, [r3, #0]
 800f74e:	1a9b      	subs	r3, r3, r2
 800f750:	b29a      	uxth	r2, r3
 800f752:	4b0b      	ldr	r3, [pc, #44]	; (800f780 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f754:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800f756:	68b8      	ldr	r0, [r7, #8]
 800f758:	f7f8 fc08 	bl	8007f6c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f75c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800f760:	4618      	mov	r0, r3
 800f762:	3730      	adds	r7, #48	; 0x30
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}
 800f768:	080180e4 	.word	0x080180e4
 800f76c:	080181c0 	.word	0x080181c0
 800f770:	0801812c 	.word	0x0801812c
 800f774:	080181e0 	.word	0x080181e0
 800f778:	08018218 	.word	0x08018218
 800f77c:	08018228 	.word	0x08018228
 800f780:	20007fe4 	.word	0x20007fe4

0800f784 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b08e      	sub	sp, #56	; 0x38
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  struct ip_reass_helper *iprh;
  u16_t offset, len, clen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 800f78c:	4b9a      	ldr	r3, [pc, #616]	; (800f9f8 <ip4_reass+0x274>)
 800f78e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f790:	3301      	adds	r3, #1
 800f792:	b29a      	uxth	r2, r3
 800f794:	4b98      	ldr	r3, [pc, #608]	; (800f9f8 <ip4_reass+0x274>)
 800f796:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	685b      	ldr	r3, [r3, #4]
 800f79c:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800f79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	f003 030f 	and.w	r3, r3, #15
 800f7a6:	009b      	lsls	r3, r3, #2
 800f7a8:	2b14      	cmp	r3, #20
 800f7aa:	d008      	beq.n	800f7be <ip4_reass+0x3a>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 800f7ac:	4b92      	ldr	r3, [pc, #584]	; (800f9f8 <ip4_reass+0x274>)
 800f7ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	b29a      	uxth	r2, r3
 800f7b6:	4b90      	ldr	r3, [pc, #576]	; (800f9f8 <ip4_reass+0x274>)
 800f7b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 800f7bc:	e145      	b.n	800fa4a <ip4_reass+0x2c6>
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800f7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c0:	88db      	ldrh	r3, [r3, #6]
 800f7c2:	b29b      	uxth	r3, r3
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f7f7 fa00 	bl	8006bca <lwip_htons>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f7d0:	b29b      	uxth	r3, r3
 800f7d2:	00db      	lsls	r3, r3, #3
 800f7d4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800f7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d8:	885b      	ldrh	r3, [r3, #2]
 800f7da:	b29b      	uxth	r3, r3
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7f7 f9f4 	bl	8006bca <lwip_htons>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e8:	781b      	ldrb	r3, [r3, #0]
 800f7ea:	b29b      	uxth	r3, r3
 800f7ec:	f003 030f 	and.w	r3, r3, #15
 800f7f0:	b29b      	uxth	r3, r3
 800f7f2:	009b      	lsls	r3, r3, #2
 800f7f4:	b29b      	uxth	r3, r3
 800f7f6:	1ad3      	subs	r3, r2, r3
 800f7f8:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f7f8 fc4a 	bl	8008094 <pbuf_clen>
 800f800:	4603      	mov	r3, r0
 800f802:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f804:	4b7d      	ldr	r3, [pc, #500]	; (800f9fc <ip4_reass+0x278>)
 800f806:	881b      	ldrh	r3, [r3, #0]
 800f808:	461a      	mov	r2, r3
 800f80a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f80c:	4413      	add	r3, r2
 800f80e:	2b0a      	cmp	r3, #10
 800f810:	dd15      	ble.n	800f83e <ip4_reass+0xba>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f812:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f814:	4619      	mov	r1, r3
 800f816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f818:	f7ff fd78 	bl	800f30c <ip_reass_remove_oldest_datagram>
 800f81c:	4603      	mov	r3, r0
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d006      	beq.n	800f830 <ip4_reass+0xac>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f822:	4b76      	ldr	r3, [pc, #472]	; (800f9fc <ip4_reass+0x278>)
 800f824:	881b      	ldrh	r3, [r3, #0]
 800f826:	461a      	mov	r2, r3
 800f828:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f82a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f82c:	2b0a      	cmp	r3, #10
 800f82e:	dd06      	ble.n	800f83e <ip4_reass+0xba>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 800f830:	4b71      	ldr	r3, [pc, #452]	; (800f9f8 <ip4_reass+0x274>)
 800f832:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800f834:	3301      	adds	r3, #1
 800f836:	b29a      	uxth	r2, r3
 800f838:	4b6f      	ldr	r3, [pc, #444]	; (800f9f8 <ip4_reass+0x274>)
 800f83a:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 800f83c:	e105      	b.n	800fa4a <ip4_reass+0x2c6>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f83e:	4b70      	ldr	r3, [pc, #448]	; (800fa00 <ip4_reass+0x27c>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	633b      	str	r3, [r7, #48]	; 0x30
 800f844:	e01e      	b.n	800f884 <ip4_reass+0x100>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f848:	695a      	ldr	r2, [r3, #20]
 800f84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f84c:	68db      	ldr	r3, [r3, #12]
 800f84e:	429a      	cmp	r2, r3
 800f850:	d115      	bne.n	800f87e <ip4_reass+0xfa>
 800f852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f854:	699a      	ldr	r2, [r3, #24]
 800f856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f858:	691b      	ldr	r3, [r3, #16]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d10f      	bne.n	800f87e <ip4_reass+0xfa>
 800f85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f860:	899a      	ldrh	r2, [r3, #12]
 800f862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f864:	889b      	ldrh	r3, [r3, #4]
 800f866:	b29b      	uxth	r3, r3
 800f868:	429a      	cmp	r2, r3
 800f86a:	d108      	bne.n	800f87e <ip4_reass+0xfa>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 800f86c:	4b62      	ldr	r3, [pc, #392]	; (800f9f8 <ip4_reass+0x274>)
 800f86e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f872:	3301      	adds	r3, #1
 800f874:	b29a      	uxth	r2, r3
 800f876:	4b60      	ldr	r3, [pc, #384]	; (800f9f8 <ip4_reass+0x274>)
 800f878:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 800f87c:	e005      	b.n	800f88a <ip4_reass+0x106>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	633b      	str	r3, [r7, #48]	; 0x30
 800f884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f886:	2b00      	cmp	r3, #0
 800f888:	d1dd      	bne.n	800f846 <ip4_reass+0xc2>
    }
  }

  if (ipr == NULL) {
 800f88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d109      	bne.n	800f8a4 <ip4_reass+0x120>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f890:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f892:	4619      	mov	r1, r3
 800f894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f896:	f7ff fd9b 	bl	800f3d0 <ip_reass_enqueue_new_datagram>
 800f89a:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d11c      	bne.n	800f8dc <ip4_reass+0x158>
      goto nullreturn;
 800f8a2:	e0d2      	b.n	800fa4a <ip4_reass+0x2c6>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a6:	88db      	ldrh	r3, [r3, #6]
 800f8a8:	b29b      	uxth	r3, r3
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7f7 f98d 	bl	8006bca <lwip_htons>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d110      	bne.n	800f8dc <ip4_reass+0x158>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8bc:	89db      	ldrh	r3, [r3, #14]
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7f7 f983 	bl	8006bca <lwip_htons>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d006      	beq.n	800f8dc <ip4_reass+0x158>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d0:	3308      	adds	r3, #8
 800f8d2:	2214      	movs	r2, #20
 800f8d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f002 fa0e 	bl	8011cf8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8de:	88db      	ldrh	r3, [r3, #6]
 800f8e0:	b29b      	uxth	r3, r3
 800f8e2:	f003 0320 	and.w	r3, r3, #32
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	bf0c      	ite	eq
 800f8ea:	2301      	moveq	r3, #1
 800f8ec:	2300      	movne	r3, #0
 800f8ee:	b2db      	uxtb	r3, r3
 800f8f0:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f8f2:	69fb      	ldr	r3, [r7, #28]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d00e      	beq.n	800f916 <ip4_reass+0x192>
    u16_t datagram_len = (u16_t)(offset + len);
 800f8f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f8fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8fc:	4413      	add	r3, r2
 800f8fe:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f900:	8b7a      	ldrh	r2, [r7, #26]
 800f902:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f904:	429a      	cmp	r2, r3
 800f906:	f0c0 809d 	bcc.w	800fa44 <ip4_reass+0x2c0>
 800f90a:	8b7b      	ldrh	r3, [r7, #26]
 800f90c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f910:	4293      	cmp	r3, r2
 800f912:	f200 8097 	bhi.w	800fa44 <ip4_reass+0x2c0>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f916:	69fa      	ldr	r2, [r7, #28]
 800f918:	6879      	ldr	r1, [r7, #4]
 800f91a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f91c:	f7ff fdc8 	bl	800f4b0 <ip_reass_chain_frag_into_datagram_and_validate>
 800f920:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f928:	f000 808e 	beq.w	800fa48 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f92c:	4b33      	ldr	r3, [pc, #204]	; (800f9fc <ip4_reass+0x278>)
 800f92e:	881a      	ldrh	r2, [r3, #0]
 800f930:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f932:	4413      	add	r3, r2
 800f934:	b29a      	uxth	r2, r3
 800f936:	4b31      	ldr	r3, [pc, #196]	; (800f9fc <ip4_reass+0x278>)
 800f938:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f93a:	69fb      	ldr	r3, [r7, #28]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d00d      	beq.n	800f95c <ip4_reass+0x1d8>
    u16_t datagram_len = (u16_t)(offset + len);
 800f940:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f944:	4413      	add	r3, r2
 800f946:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f94a:	8a7a      	ldrh	r2, [r7, #18]
 800f94c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f950:	7f9b      	ldrb	r3, [r3, #30]
 800f952:	f043 0301 	orr.w	r3, r3, #1
 800f956:	b2da      	uxtb	r2, r3
 800f958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	2b01      	cmp	r3, #1
 800f960:	d16e      	bne.n	800fa40 <ip4_reass+0x2bc>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800f962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f964:	8b9b      	ldrh	r3, [r3, #28]
 800f966:	3314      	adds	r3, #20
 800f968:	b29a      	uxth	r2, r3
 800f96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f96c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800f96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f970:	685b      	ldr	r3, [r3, #4]
 800f972:	685b      	ldr	r3, [r3, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800f978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	685b      	ldr	r3, [r3, #4]
 800f97e:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f982:	3308      	adds	r3, #8
 800f984:	2214      	movs	r2, #20
 800f986:	4619      	mov	r1, r3
 800f988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f98a:	f002 f9b5 	bl	8011cf8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800f98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f990:	8b9b      	ldrh	r3, [r3, #28]
 800f992:	4618      	mov	r0, r3
 800f994:	f7f7 f919 	bl	8006bca <lwip_htons>
 800f998:	4603      	mov	r3, r0
 800f99a:	461a      	mov	r2, r3
 800f99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f99e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	719a      	strb	r2, [r3, #6]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	729a      	strb	r2, [r3, #10]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b6:	685b      	ldr	r3, [r3, #4]
 800f9b8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f9ba:	e00e      	b.n	800f9da <ip4_reass+0x256>
      iprh = (struct ip_reass_helper*)r->payload;
 800f9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800f9c2:	f06f 0113 	mvn.w	r1, #19
 800f9c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f9c8:	f7f8 faac 	bl	8007f24 <pbuf_header>
      pbuf_cat(p, r);
 800f9cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f7f8 fb98 	bl	8008104 <pbuf_cat>
      r = iprh->next_pbuf;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d1ed      	bne.n	800f9bc <ip4_reass+0x238>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f9e0:	4b07      	ldr	r3, [pc, #28]	; (800fa00 <ip4_reass+0x27c>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d102      	bne.n	800f9f0 <ip4_reass+0x26c>
      ipr_prev = NULL;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9ee:	e016      	b.n	800fa1e <ip4_reass+0x29a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f9f0:	4b03      	ldr	r3, [pc, #12]	; (800fa00 <ip4_reass+0x27c>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9f6:	e00d      	b.n	800fa14 <ip4_reass+0x290>
 800f9f8:	20007db4 	.word	0x20007db4
 800f9fc:	20007fe4 	.word	0x20007fe4
 800fa00:	20007fe0 	.word	0x20007fe0
        if (ipr_prev->next == ipr) {
 800fa04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d006      	beq.n	800fa1c <ip4_reass+0x298>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fa0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d1f4      	bne.n	800fa04 <ip4_reass+0x280>
 800fa1a:	e000      	b.n	800fa1e <ip4_reass+0x29a>
          break;
 800fa1c:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fa1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa22:	f7ff fd17 	bl	800f454 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f7f8 fb34 	bl	8008094 <pbuf_clen>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	461a      	mov	r2, r3
 800fa30:	4b0d      	ldr	r3, [pc, #52]	; (800fa68 <ip4_reass+0x2e4>)
 800fa32:	881b      	ldrh	r3, [r3, #0]
 800fa34:	1a9b      	subs	r3, r3, r2
 800fa36:	b29a      	uxth	r2, r3
 800fa38:	4b0b      	ldr	r3, [pc, #44]	; (800fa68 <ip4_reass+0x2e4>)
 800fa3a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	e00e      	b.n	800fa5e <ip4_reass+0x2da>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800fa40:	2300      	movs	r3, #0
 800fa42:	e00c      	b.n	800fa5e <ip4_reass+0x2da>
      goto nullreturn;
 800fa44:	bf00      	nop
 800fa46:	e000      	b.n	800fa4a <ip4_reass+0x2c6>
    goto nullreturn;
 800fa48:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 800fa4a:	4b08      	ldr	r3, [pc, #32]	; (800fa6c <ip4_reass+0x2e8>)
 800fa4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fa4e:	3301      	adds	r3, #1
 800fa50:	b29a      	uxth	r2, r3
 800fa52:	4b06      	ldr	r3, [pc, #24]	; (800fa6c <ip4_reass+0x2e8>)
 800fa54:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f7f8 fa88 	bl	8007f6c <pbuf_free>
  return NULL;
 800fa5c:	2300      	movs	r3, #0
}
 800fa5e:	4618      	mov	r0, r3
 800fa60:	3738      	adds	r7, #56	; 0x38
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}
 800fa66:	bf00      	nop
 800fa68:	20007fe4 	.word	0x20007fe4
 800fa6c:	20007db4 	.word	0x20007db4

0800fa70 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800fa74:	2005      	movs	r0, #5
 800fa76:	f7f7 fce9 	bl	800744c <memp_malloc>
 800fa7a:	4603      	mov	r3, r0
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b082      	sub	sp, #8
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d106      	bne.n	800fa9c <ip_frag_free_pbuf_custom_ref+0x1c>
 800fa8e:	4b07      	ldr	r3, [pc, #28]	; (800faac <ip_frag_free_pbuf_custom_ref+0x2c>)
 800fa90:	f240 22ae 	movw	r2, #686	; 0x2ae
 800fa94:	4906      	ldr	r1, [pc, #24]	; (800fab0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800fa96:	4807      	ldr	r0, [pc, #28]	; (800fab4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800fa98:	f002 ffb2 	bl	8012a00 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800fa9c:	6879      	ldr	r1, [r7, #4]
 800fa9e:	2005      	movs	r0, #5
 800faa0:	f7f7 fd26 	bl	80074f0 <memp_free>
}
 800faa4:	bf00      	nop
 800faa6:	3708      	adds	r7, #8
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	080180e4 	.word	0x080180e4
 800fab0:	0801824c 	.word	0x0801824c
 800fab4:	0801812c 	.word	0x0801812c

0800fab8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b084      	sub	sp, #16
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d106      	bne.n	800fad8 <ipfrag_free_pbuf_custom+0x20>
 800faca:	4b11      	ldr	r3, [pc, #68]	; (800fb10 <ipfrag_free_pbuf_custom+0x58>)
 800facc:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800fad0:	4910      	ldr	r1, [pc, #64]	; (800fb14 <ipfrag_free_pbuf_custom+0x5c>)
 800fad2:	4811      	ldr	r0, [pc, #68]	; (800fb18 <ipfrag_free_pbuf_custom+0x60>)
 800fad4:	f002 ff94 	bl	8012a00 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800fad8:	68fa      	ldr	r2, [r7, #12]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	429a      	cmp	r2, r3
 800fade:	d006      	beq.n	800faee <ipfrag_free_pbuf_custom+0x36>
 800fae0:	4b0b      	ldr	r3, [pc, #44]	; (800fb10 <ipfrag_free_pbuf_custom+0x58>)
 800fae2:	f240 22b9 	movw	r2, #697	; 0x2b9
 800fae6:	490d      	ldr	r1, [pc, #52]	; (800fb1c <ipfrag_free_pbuf_custom+0x64>)
 800fae8:	480b      	ldr	r0, [pc, #44]	; (800fb18 <ipfrag_free_pbuf_custom+0x60>)
 800faea:	f002 ff89 	bl	8012a00 <iprintf>
  if (pcr->original != NULL) {
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	695b      	ldr	r3, [r3, #20]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d004      	beq.n	800fb00 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	695b      	ldr	r3, [r3, #20]
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7f8 fa36 	bl	8007f6c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	f7ff ffbd 	bl	800fa80 <ip_frag_free_pbuf_custom_ref>
}
 800fb06:	bf00      	nop
 800fb08:	3710      	adds	r7, #16
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
 800fb0e:	bf00      	nop
 800fb10:	080180e4 	.word	0x080180e4
 800fb14:	08018258 	.word	0x08018258
 800fb18:	0801812c 	.word	0x0801812c
 800fb1c:	08018264 	.word	0x08018264

0800fb20 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b092      	sub	sp, #72	; 0x48
 800fb24:	af02      	add	r7, sp, #8
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fb34:	3b14      	subs	r3, #20
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	da00      	bge.n	800fb3c <ip4_frag+0x1c>
 800fb3a:	3307      	adds	r3, #7
 800fb3c:	10db      	asrs	r3, r3, #3
 800fb3e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800fb40:	2314      	movs	r3, #20
 800fb42:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	685b      	ldr	r3, [r3, #4]
 800fb48:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800fb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb4c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800fb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	f003 030f 	and.w	r3, r3, #15
 800fb56:	009b      	lsls	r3, r3, #2
 800fb58:	2b14      	cmp	r3, #20
 800fb5a:	d009      	beq.n	800fb70 <ip4_frag+0x50>
 800fb5c:	4b7d      	ldr	r3, [pc, #500]	; (800fd54 <ip4_frag+0x234>)
 800fb5e:	f240 22e1 	movw	r2, #737	; 0x2e1
 800fb62:	497d      	ldr	r1, [pc, #500]	; (800fd58 <ip4_frag+0x238>)
 800fb64:	487d      	ldr	r0, [pc, #500]	; (800fd5c <ip4_frag+0x23c>)
 800fb66:	f002 ff4b 	bl	8012a00 <iprintf>
 800fb6a:	f06f 0305 	mvn.w	r3, #5
 800fb6e:	e0ec      	b.n	800fd4a <ip4_frag+0x22a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800fb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb72:	88db      	ldrh	r3, [r3, #6]
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7f7 f827 	bl	8006bca <lwip_htons>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800fb80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fb82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fb86:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800fb88:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fb8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d009      	beq.n	800fba6 <ip4_frag+0x86>
 800fb92:	4b70      	ldr	r3, [pc, #448]	; (800fd54 <ip4_frag+0x234>)
 800fb94:	f240 22e6 	movw	r2, #742	; 0x2e6
 800fb98:	4971      	ldr	r1, [pc, #452]	; (800fd60 <ip4_frag+0x240>)
 800fb9a:	4870      	ldr	r0, [pc, #448]	; (800fd5c <ip4_frag+0x23c>)
 800fb9c:	f002 ff30 	bl	8012a00 <iprintf>
 800fba0:	f06f 0305 	mvn.w	r3, #5
 800fba4:	e0d1      	b.n	800fd4a <ip4_frag+0x22a>

  left = p->tot_len - IP_HLEN;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	891b      	ldrh	r3, [r3, #8]
 800fbaa:	3b14      	subs	r3, #20
 800fbac:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800fbae:	e0c3      	b.n	800fd38 <ip4_frag+0x218>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800fbb0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fbb2:	00da      	lsls	r2, r3, #3
 800fbb4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fbb6:	4293      	cmp	r3, r2
 800fbb8:	bfa8      	it	ge
 800fbba:	4613      	movge	r3, r2
 800fbbc:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	2114      	movs	r1, #20
 800fbc2:	2002      	movs	r0, #2
 800fbc4:	f7f7 fe5a 	bl	800787c <pbuf_alloc>
 800fbc8:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800fbca:	6a3b      	ldr	r3, [r7, #32]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	f000 80b9 	beq.w	800fd44 <ip4_frag+0x224>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	895b      	ldrh	r3, [r3, #10]
 800fbd6:	2b13      	cmp	r3, #19
 800fbd8:	d806      	bhi.n	800fbe8 <ip4_frag+0xc8>
 800fbda:	4b5e      	ldr	r3, [pc, #376]	; (800fd54 <ip4_frag+0x234>)
 800fbdc:	f44f 7242 	mov.w	r2, #776	; 0x308
 800fbe0:	4960      	ldr	r1, [pc, #384]	; (800fd64 <ip4_frag+0x244>)
 800fbe2:	485e      	ldr	r0, [pc, #376]	; (800fd5c <ip4_frag+0x23c>)
 800fbe4:	f002 ff0c 	bl	8012a00 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fbe8:	6a3b      	ldr	r3, [r7, #32]
 800fbea:	685b      	ldr	r3, [r3, #4]
 800fbec:	2214      	movs	r2, #20
 800fbee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f002 f881 	bl	8011cf8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fbf6:	6a3b      	ldr	r3, [r7, #32]
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800fbfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbfe:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800fc00:	e04f      	b.n	800fca2 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	895a      	ldrh	r2, [r3, #10]
 800fc06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fc08:	1ad3      	subs	r3, r2, r3
 800fc0a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800fc0c:	8b7a      	ldrh	r2, [r7, #26]
 800fc0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fc10:	4293      	cmp	r3, r2
 800fc12:	bf28      	it	cs
 800fc14:	4613      	movcs	r3, r2
 800fc16:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800fc18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d105      	bne.n	800fc2a <ip4_frag+0x10a>
        poff = 0;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	60fb      	str	r3, [r7, #12]
        continue;
 800fc28:	e03b      	b.n	800fca2 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800fc2a:	f7ff ff21 	bl	800fa70 <ip_frag_alloc_pbuf_custom_ref>
 800fc2e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800fc30:	697b      	ldr	r3, [r7, #20]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d103      	bne.n	800fc3e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800fc36:	6a38      	ldr	r0, [r7, #32]
 800fc38:	f7f8 f998 	bl	8007f6c <pbuf_free>
        goto memerr;
 800fc3c:	e083      	b.n	800fd46 <ip4_frag+0x226>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fc3e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fc44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fc46:	4413      	add	r3, r2
 800fc48:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800fc4a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fc4c:	9201      	str	r2, [sp, #4]
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	4603      	mov	r3, r0
 800fc52:	2202      	movs	r2, #2
 800fc54:	2004      	movs	r0, #4
 800fc56:	f7f7 ffab 	bl	8007bb0 <pbuf_alloced_custom>
 800fc5a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d106      	bne.n	800fc70 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fc62:	6978      	ldr	r0, [r7, #20]
 800fc64:	f7ff ff0c 	bl	800fa80 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fc68:	6a38      	ldr	r0, [r7, #32]
 800fc6a:	f7f8 f97f 	bl	8007f6c <pbuf_free>
        goto memerr;
 800fc6e:	e06a      	b.n	800fd46 <ip4_frag+0x226>
      }
      pbuf_ref(p);
 800fc70:	68f8      	ldr	r0, [r7, #12]
 800fc72:	f7f8 fa25 	bl	80080c0 <pbuf_ref>
      pcr->original = p;
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	4a3a      	ldr	r2, [pc, #232]	; (800fd68 <ip4_frag+0x248>)
 800fc80:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fc82:	6939      	ldr	r1, [r7, #16]
 800fc84:	6a38      	ldr	r0, [r7, #32]
 800fc86:	f7f8 fa3d 	bl	8008104 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800fc8a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800fc8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fc8e:	1ad3      	subs	r3, r2, r3
 800fc90:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800fc92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d004      	beq.n	800fca2 <ip4_frag+0x182>
        poff = 0;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800fca2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d1ac      	bne.n	800fc02 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800fca8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fcaa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fcac:	4413      	add	r3, r2
 800fcae:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fcb4:	f1a3 0213 	sub.w	r2, r3, #19
 800fcb8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	bfcc      	ite	gt
 800fcbe:	2301      	movgt	r3, #1
 800fcc0:	2300      	movle	r3, #0
 800fcc2:	b2db      	uxtb	r3, r3
 800fcc4:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fcc6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fcc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fccc:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800fcce:	69fb      	ldr	r3, [r7, #28]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d103      	bne.n	800fcdc <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 800fcd4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fcd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fcda:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fcdc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7f6 ff73 	bl	8006bca <lwip_htons>
 800fce4:	4603      	mov	r3, r0
 800fce6:	461a      	mov	r2, r3
 800fce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcea:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800fcec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fcee:	3314      	adds	r3, #20
 800fcf0:	b29b      	uxth	r3, r3
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7f6 ff69 	bl	8006bca <lwip_htons>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcfe:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd02:	2200      	movs	r2, #0
 800fd04:	729a      	strb	r2, [r3, #10]
 800fd06:	2200      	movs	r2, #0
 800fd08:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fd0a:	68bb      	ldr	r3, [r7, #8]
 800fd0c:	695b      	ldr	r3, [r3, #20]
 800fd0e:	687a      	ldr	r2, [r7, #4]
 800fd10:	6a39      	ldr	r1, [r7, #32]
 800fd12:	68b8      	ldr	r0, [r7, #8]
 800fd14:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 800fd16:	4b15      	ldr	r3, [pc, #84]	; (800fd6c <ip4_frag+0x24c>)
 800fd18:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	b29a      	uxth	r2, r3
 800fd1e:	4b13      	ldr	r3, [pc, #76]	; (800fd6c <ip4_frag+0x24c>)
 800fd20:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fd22:	6a38      	ldr	r0, [r7, #32]
 800fd24:	f7f8 f922 	bl	8007f6c <pbuf_free>
    left -= fragsize;
 800fd28:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fd2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd2c:	1ad3      	subs	r3, r2, r3
 800fd2e:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800fd30:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800fd32:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fd34:	4413      	add	r3, r2
 800fd36:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800fd38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	f47f af38 	bne.w	800fbb0 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fd40:	2300      	movs	r3, #0
 800fd42:	e002      	b.n	800fd4a <ip4_frag+0x22a>
      goto memerr;
 800fd44:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fd46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3740      	adds	r7, #64	; 0x40
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}
 800fd52:	bf00      	nop
 800fd54:	080180e4 	.word	0x080180e4
 800fd58:	08018270 	.word	0x08018270
 800fd5c:	0801812c 	.word	0x0801812c
 800fd60:	08018298 	.word	0x08018298
 800fd64:	080182b4 	.word	0x080182b4
 800fd68:	0800fab9 	.word	0x0800fab9
 800fd6c:	20007db4 	.word	0x20007db4

0800fd70 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b086      	sub	sp, #24
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800fd7a:	230e      	movs	r3, #14
 800fd7c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	895b      	ldrh	r3, [r3, #10]
 800fd82:	2b0e      	cmp	r3, #14
 800fd84:	d80c      	bhi.n	800fda0 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 800fd86:	4b56      	ldr	r3, [pc, #344]	; (800fee0 <ethernet_input+0x170>)
 800fd88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd8a:	3301      	adds	r3, #1
 800fd8c:	b29a      	uxth	r2, r3
 800fd8e:	4b54      	ldr	r3, [pc, #336]	; (800fee0 <ethernet_input+0x170>)
 800fd90:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 800fd92:	4b53      	ldr	r3, [pc, #332]	; (800fee0 <ethernet_input+0x170>)
 800fd94:	8bdb      	ldrh	r3, [r3, #30]
 800fd96:	3301      	adds	r3, #1
 800fd98:	b29a      	uxth	r2, r3
 800fd9a:	4b51      	ldr	r3, [pc, #324]	; (800fee0 <ethernet_input+0x170>)
 800fd9c:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 800fd9e:	e096      	b.n	800fece <ethernet_input+0x15e>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	7b1a      	ldrb	r2, [r3, #12]
 800fdaa:	7b5b      	ldrb	r3, [r3, #13]
 800fdac:	021b      	lsls	r3, r3, #8
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	781b      	ldrb	r3, [r3, #0]
 800fdb6:	f003 0301 	and.w	r3, r3, #1
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d023      	beq.n	800fe06 <ethernet_input+0x96>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	2b01      	cmp	r3, #1
 800fdc4:	d10f      	bne.n	800fde6 <ethernet_input+0x76>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fdc6:	693b      	ldr	r3, [r7, #16]
 800fdc8:	785b      	ldrb	r3, [r3, #1]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d11b      	bne.n	800fe06 <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800fdce:	693b      	ldr	r3, [r7, #16]
 800fdd0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fdd2:	2b5e      	cmp	r3, #94	; 0x5e
 800fdd4:	d117      	bne.n	800fe06 <ethernet_input+0x96>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	7b5b      	ldrb	r3, [r3, #13]
 800fdda:	f043 0310 	orr.w	r3, r3, #16
 800fdde:	b2da      	uxtb	r2, r3
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	735a      	strb	r2, [r3, #13]
 800fde4:	e00f      	b.n	800fe06 <ethernet_input+0x96>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	2206      	movs	r2, #6
 800fdea:	493e      	ldr	r1, [pc, #248]	; (800fee4 <ethernet_input+0x174>)
 800fdec:	4618      	mov	r0, r3
 800fdee:	f001 ff73 	bl	8011cd8 <memcmp>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d106      	bne.n	800fe06 <ethernet_input+0x96>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	7b5b      	ldrb	r3, [r3, #13]
 800fdfc:	f043 0308 	orr.w	r3, r3, #8
 800fe00:	b2da      	uxtb	r2, r3
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800fe06:	89fb      	ldrh	r3, [r7, #14]
 800fe08:	2b08      	cmp	r3, #8
 800fe0a:	d003      	beq.n	800fe14 <ethernet_input+0xa4>
 800fe0c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800fe10:	d01e      	beq.n	800fe50 <ethernet_input+0xe0>
 800fe12:	e048      	b.n	800fea6 <ethernet_input+0x136>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fe1a:	f003 0308 	and.w	r3, r3, #8
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d050      	beq.n	800fec4 <ethernet_input+0x154>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	895b      	ldrh	r3, [r3, #10]
 800fe26:	461a      	mov	r2, r3
 800fe28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	db4b      	blt.n	800fec8 <ethernet_input+0x158>
 800fe30:	8afb      	ldrh	r3, [r7, #22]
 800fe32:	425b      	negs	r3, r3
 800fe34:	b29b      	uxth	r3, r3
 800fe36:	b21b      	sxth	r3, r3
 800fe38:	4619      	mov	r1, r3
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f7f8 f872 	bl	8007f24 <pbuf_header>
 800fe40:	4603      	mov	r3, r0
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d140      	bne.n	800fec8 <ethernet_input+0x158>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 800fe46:	6839      	ldr	r1, [r7, #0]
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f7fe fedd 	bl	800ec08 <ip4_input>
      }
      break;
 800fe4e:	e037      	b.n	800fec0 <ethernet_input+0x150>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fe56:	f003 0308 	and.w	r3, r3, #8
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d036      	beq.n	800fecc <ethernet_input+0x15c>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	895b      	ldrh	r3, [r3, #10]
 800fe62:	461a      	mov	r2, r3
 800fe64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	db0a      	blt.n	800fe82 <ethernet_input+0x112>
 800fe6c:	8afb      	ldrh	r3, [r7, #22]
 800fe6e:	425b      	negs	r3, r3
 800fe70:	b29b      	uxth	r3, r3
 800fe72:	b21b      	sxth	r3, r3
 800fe74:	4619      	mov	r1, r3
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f7f8 f854 	bl	8007f24 <pbuf_header>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d00c      	beq.n	800fe9c <ethernet_input+0x12c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
          ("ethernet_input: ARP response packet dropped, too short (%"S16_F"/%"S16_F")\n",
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 800fe82:	4b17      	ldr	r3, [pc, #92]	; (800fee0 <ethernet_input+0x170>)
 800fe84:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800fe86:	3301      	adds	r3, #1
 800fe88:	b29a      	uxth	r2, r3
 800fe8a:	4b15      	ldr	r3, [pc, #84]	; (800fee0 <ethernet_input+0x170>)
 800fe8c:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 800fe8e:	4b14      	ldr	r3, [pc, #80]	; (800fee0 <ethernet_input+0x170>)
 800fe90:	8bdb      	ldrh	r3, [r3, #30]
 800fe92:	3301      	adds	r3, #1
 800fe94:	b29a      	uxth	r2, r3
 800fe96:	4b12      	ldr	r3, [pc, #72]	; (800fee0 <ethernet_input+0x170>)
 800fe98:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 800fe9a:	e018      	b.n	800fece <ethernet_input+0x15e>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 800fe9c:	6839      	ldr	r1, [r7, #0]
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f7fe f816 	bl	800ded0 <etharp_input>
      }
      break;
 800fea4:	e00c      	b.n	800fec0 <ethernet_input+0x150>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 800fea6:	4b0e      	ldr	r3, [pc, #56]	; (800fee0 <ethernet_input+0x170>)
 800fea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800feaa:	3301      	adds	r3, #1
 800feac:	b29a      	uxth	r2, r3
 800feae:	4b0c      	ldr	r3, [pc, #48]	; (800fee0 <ethernet_input+0x170>)
 800feb0:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 800feb2:	4b0b      	ldr	r3, [pc, #44]	; (800fee0 <ethernet_input+0x170>)
 800feb4:	8bdb      	ldrh	r3, [r3, #30]
 800feb6:	3301      	adds	r3, #1
 800feb8:	b29a      	uxth	r2, r3
 800feba:	4b09      	ldr	r3, [pc, #36]	; (800fee0 <ethernet_input+0x170>)
 800febc:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800febe:	e006      	b.n	800fece <ethernet_input+0x15e>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fec0:	2300      	movs	r3, #0
 800fec2:	e008      	b.n	800fed6 <ethernet_input+0x166>
        goto free_and_return;
 800fec4:	bf00      	nop
 800fec6:	e002      	b.n	800fece <ethernet_input+0x15e>
        goto free_and_return;
 800fec8:	bf00      	nop
 800feca:	e000      	b.n	800fece <ethernet_input+0x15e>
        goto free_and_return;
 800fecc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f7f8 f84c 	bl	8007f6c <pbuf_free>
  return ERR_OK;
 800fed4:	2300      	movs	r3, #0
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	3718      	adds	r7, #24
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}
 800fede:	bf00      	nop
 800fee0:	20007db4 	.word	0x20007db4
 800fee4:	08018470 	.word	0x08018470

0800fee8 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b086      	sub	sp, #24
 800feec:	af00      	add	r7, sp, #0
 800feee:	60f8      	str	r0, [r7, #12]
 800fef0:	60b9      	str	r1, [r7, #8]
 800fef2:	607a      	str	r2, [r7, #4]
 800fef4:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fef6:	8c3b      	ldrh	r3, [r7, #32]
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7f6 fe66 	bl	8006bca <lwip_htons>
 800fefe:	4603      	mov	r3, r0
 800ff00:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800ff02:	210e      	movs	r1, #14
 800ff04:	68b8      	ldr	r0, [r7, #8]
 800ff06:	f7f8 f80d 	bl	8007f24 <pbuf_header>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d125      	bne.n	800ff5c <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	685b      	ldr	r3, [r3, #4]
 800ff14:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	8afa      	ldrh	r2, [r7, #22]
 800ff1a:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	2206      	movs	r2, #6
 800ff20:	6839      	ldr	r1, [r7, #0]
 800ff22:	4618      	mov	r0, r3
 800ff24:	f001 fee8 	bl	8011cf8 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800ff28:	693b      	ldr	r3, [r7, #16]
 800ff2a:	3306      	adds	r3, #6
 800ff2c:	2206      	movs	r2, #6
 800ff2e:	6879      	ldr	r1, [r7, #4]
 800ff30:	4618      	mov	r0, r3
 800ff32:	f001 fee1 	bl	8011cf8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff3c:	2b06      	cmp	r3, #6
 800ff3e:	d006      	beq.n	800ff4e <ethernet_output+0x66>
 800ff40:	4b0d      	ldr	r3, [pc, #52]	; (800ff78 <ethernet_output+0x90>)
 800ff42:	f240 122b 	movw	r2, #299	; 0x12b
 800ff46:	490d      	ldr	r1, [pc, #52]	; (800ff7c <ethernet_output+0x94>)
 800ff48:	480d      	ldr	r0, [pc, #52]	; (800ff80 <ethernet_output+0x98>)
 800ff4a:	f002 fd59 	bl	8012a00 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	699b      	ldr	r3, [r3, #24]
 800ff52:	68b9      	ldr	r1, [r7, #8]
 800ff54:	68f8      	ldr	r0, [r7, #12]
 800ff56:	4798      	blx	r3
 800ff58:	4603      	mov	r3, r0
 800ff5a:	e008      	b.n	800ff6e <ethernet_output+0x86>
      goto pbuf_header_failed;
 800ff5c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 800ff5e:	4b09      	ldr	r3, [pc, #36]	; (800ff84 <ethernet_output+0x9c>)
 800ff60:	895b      	ldrh	r3, [r3, #10]
 800ff62:	3301      	adds	r3, #1
 800ff64:	b29a      	uxth	r2, r3
 800ff66:	4b07      	ldr	r3, [pc, #28]	; (800ff84 <ethernet_output+0x9c>)
 800ff68:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 800ff6a:	f06f 0301 	mvn.w	r3, #1
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	3718      	adds	r7, #24
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}
 800ff76:	bf00      	nop
 800ff78:	080182d4 	.word	0x080182d4
 800ff7c:	0801830c 	.word	0x0801830c
 800ff80:	08018340 	.word	0x08018340
 800ff84:	20007db4 	.word	0x20007db4

0800ff88 <cos>:
 800ff88:	b530      	push	{r4, r5, lr}
 800ff8a:	4a20      	ldr	r2, [pc, #128]	; (801000c <cos+0x84>)
 800ff8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ff90:	4293      	cmp	r3, r2
 800ff92:	b087      	sub	sp, #28
 800ff94:	dc06      	bgt.n	800ffa4 <cos+0x1c>
 800ff96:	2200      	movs	r2, #0
 800ff98:	2300      	movs	r3, #0
 800ff9a:	b007      	add	sp, #28
 800ff9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffa0:	f001 b886 	b.w	80110b0 <__kernel_cos>
 800ffa4:	4a1a      	ldr	r2, [pc, #104]	; (8010010 <cos+0x88>)
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	dd05      	ble.n	800ffb6 <cos+0x2e>
 800ffaa:	4602      	mov	r2, r0
 800ffac:	460b      	mov	r3, r1
 800ffae:	f7f0 f921 	bl	80001f4 <__aeabi_dsub>
 800ffb2:	b007      	add	sp, #28
 800ffb4:	bd30      	pop	{r4, r5, pc}
 800ffb6:	aa02      	add	r2, sp, #8
 800ffb8:	f000 fdd2 	bl	8010b60 <__ieee754_rem_pio2>
 800ffbc:	f000 0003 	and.w	r0, r0, #3
 800ffc0:	2801      	cmp	r0, #1
 800ffc2:	d009      	beq.n	800ffd8 <cos+0x50>
 800ffc4:	2802      	cmp	r0, #2
 800ffc6:	d011      	beq.n	800ffec <cos+0x64>
 800ffc8:	b9b8      	cbnz	r0, 800fffa <cos+0x72>
 800ffca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffd2:	f001 f86d 	bl	80110b0 <__kernel_cos>
 800ffd6:	e7ec      	b.n	800ffb2 <cos+0x2a>
 800ffd8:	9000      	str	r0, [sp, #0]
 800ffda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffe2:	f001 fc65 	bl	80118b0 <__kernel_sin>
 800ffe6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ffea:	e7e2      	b.n	800ffb2 <cos+0x2a>
 800ffec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fff4:	f001 f85c 	bl	80110b0 <__kernel_cos>
 800fff8:	e7f5      	b.n	800ffe6 <cos+0x5e>
 800fffa:	2301      	movs	r3, #1
 800fffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010000:	9300      	str	r3, [sp, #0]
 8010002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010006:	f001 fc53 	bl	80118b0 <__kernel_sin>
 801000a:	e7d2      	b.n	800ffb2 <cos+0x2a>
 801000c:	3fe921fb 	.word	0x3fe921fb
 8010010:	7fefffff 	.word	0x7fefffff

08010014 <pow>:
 8010014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010018:	4614      	mov	r4, r2
 801001a:	461d      	mov	r5, r3
 801001c:	4680      	mov	r8, r0
 801001e:	4689      	mov	r9, r1
 8010020:	f000 f886 	bl	8010130 <__ieee754_pow>
 8010024:	4622      	mov	r2, r4
 8010026:	4606      	mov	r6, r0
 8010028:	460f      	mov	r7, r1
 801002a:	462b      	mov	r3, r5
 801002c:	4620      	mov	r0, r4
 801002e:	4629      	mov	r1, r5
 8010030:	f7f0 fd32 	bl	8000a98 <__aeabi_dcmpun>
 8010034:	bbc8      	cbnz	r0, 80100aa <pow+0x96>
 8010036:	2200      	movs	r2, #0
 8010038:	2300      	movs	r3, #0
 801003a:	4640      	mov	r0, r8
 801003c:	4649      	mov	r1, r9
 801003e:	f7f0 fcf9 	bl	8000a34 <__aeabi_dcmpeq>
 8010042:	b1b8      	cbz	r0, 8010074 <pow+0x60>
 8010044:	2200      	movs	r2, #0
 8010046:	2300      	movs	r3, #0
 8010048:	4620      	mov	r0, r4
 801004a:	4629      	mov	r1, r5
 801004c:	f7f0 fcf2 	bl	8000a34 <__aeabi_dcmpeq>
 8010050:	2800      	cmp	r0, #0
 8010052:	d141      	bne.n	80100d8 <pow+0xc4>
 8010054:	4620      	mov	r0, r4
 8010056:	4629      	mov	r1, r5
 8010058:	f001 fd0f 	bl	8011a7a <finite>
 801005c:	b328      	cbz	r0, 80100aa <pow+0x96>
 801005e:	2200      	movs	r2, #0
 8010060:	2300      	movs	r3, #0
 8010062:	4620      	mov	r0, r4
 8010064:	4629      	mov	r1, r5
 8010066:	f7f0 fcef 	bl	8000a48 <__aeabi_dcmplt>
 801006a:	b1f0      	cbz	r0, 80100aa <pow+0x96>
 801006c:	f001 fe0a 	bl	8011c84 <__errno>
 8010070:	2322      	movs	r3, #34	; 0x22
 8010072:	e019      	b.n	80100a8 <pow+0x94>
 8010074:	4630      	mov	r0, r6
 8010076:	4639      	mov	r1, r7
 8010078:	f001 fcff 	bl	8011a7a <finite>
 801007c:	b9c8      	cbnz	r0, 80100b2 <pow+0x9e>
 801007e:	4640      	mov	r0, r8
 8010080:	4649      	mov	r1, r9
 8010082:	f001 fcfa 	bl	8011a7a <finite>
 8010086:	b1a0      	cbz	r0, 80100b2 <pow+0x9e>
 8010088:	4620      	mov	r0, r4
 801008a:	4629      	mov	r1, r5
 801008c:	f001 fcf5 	bl	8011a7a <finite>
 8010090:	b178      	cbz	r0, 80100b2 <pow+0x9e>
 8010092:	4632      	mov	r2, r6
 8010094:	463b      	mov	r3, r7
 8010096:	4630      	mov	r0, r6
 8010098:	4639      	mov	r1, r7
 801009a:	f7f0 fcfd 	bl	8000a98 <__aeabi_dcmpun>
 801009e:	2800      	cmp	r0, #0
 80100a0:	d0e4      	beq.n	801006c <pow+0x58>
 80100a2:	f001 fdef 	bl	8011c84 <__errno>
 80100a6:	2321      	movs	r3, #33	; 0x21
 80100a8:	6003      	str	r3, [r0, #0]
 80100aa:	4630      	mov	r0, r6
 80100ac:	4639      	mov	r1, r7
 80100ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100b2:	2200      	movs	r2, #0
 80100b4:	2300      	movs	r3, #0
 80100b6:	4630      	mov	r0, r6
 80100b8:	4639      	mov	r1, r7
 80100ba:	f7f0 fcbb 	bl	8000a34 <__aeabi_dcmpeq>
 80100be:	2800      	cmp	r0, #0
 80100c0:	d0f3      	beq.n	80100aa <pow+0x96>
 80100c2:	4640      	mov	r0, r8
 80100c4:	4649      	mov	r1, r9
 80100c6:	f001 fcd8 	bl	8011a7a <finite>
 80100ca:	2800      	cmp	r0, #0
 80100cc:	d0ed      	beq.n	80100aa <pow+0x96>
 80100ce:	4620      	mov	r0, r4
 80100d0:	4629      	mov	r1, r5
 80100d2:	f001 fcd2 	bl	8011a7a <finite>
 80100d6:	e7c8      	b.n	801006a <pow+0x56>
 80100d8:	2600      	movs	r6, #0
 80100da:	4f01      	ldr	r7, [pc, #4]	; (80100e0 <pow+0xcc>)
 80100dc:	e7e5      	b.n	80100aa <pow+0x96>
 80100de:	bf00      	nop
 80100e0:	3ff00000 	.word	0x3ff00000

080100e4 <sqrt>:
 80100e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100e6:	4606      	mov	r6, r0
 80100e8:	460f      	mov	r7, r1
 80100ea:	f000 ff31 	bl	8010f50 <__ieee754_sqrt>
 80100ee:	4632      	mov	r2, r6
 80100f0:	4604      	mov	r4, r0
 80100f2:	460d      	mov	r5, r1
 80100f4:	463b      	mov	r3, r7
 80100f6:	4630      	mov	r0, r6
 80100f8:	4639      	mov	r1, r7
 80100fa:	f7f0 fccd 	bl	8000a98 <__aeabi_dcmpun>
 80100fe:	b990      	cbnz	r0, 8010126 <sqrt+0x42>
 8010100:	2200      	movs	r2, #0
 8010102:	2300      	movs	r3, #0
 8010104:	4630      	mov	r0, r6
 8010106:	4639      	mov	r1, r7
 8010108:	f7f0 fc9e 	bl	8000a48 <__aeabi_dcmplt>
 801010c:	b158      	cbz	r0, 8010126 <sqrt+0x42>
 801010e:	f001 fdb9 	bl	8011c84 <__errno>
 8010112:	2321      	movs	r3, #33	; 0x21
 8010114:	2200      	movs	r2, #0
 8010116:	6003      	str	r3, [r0, #0]
 8010118:	2300      	movs	r3, #0
 801011a:	4610      	mov	r0, r2
 801011c:	4619      	mov	r1, r3
 801011e:	f7f0 fb4b 	bl	80007b8 <__aeabi_ddiv>
 8010122:	4604      	mov	r4, r0
 8010124:	460d      	mov	r5, r1
 8010126:	4620      	mov	r0, r4
 8010128:	4629      	mov	r1, r5
 801012a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801012c:	0000      	movs	r0, r0
	...

08010130 <__ieee754_pow>:
 8010130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010134:	b093      	sub	sp, #76	; 0x4c
 8010136:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801013a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 801013e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8010142:	4689      	mov	r9, r1
 8010144:	ea56 0102 	orrs.w	r1, r6, r2
 8010148:	4680      	mov	r8, r0
 801014a:	d111      	bne.n	8010170 <__ieee754_pow+0x40>
 801014c:	1803      	adds	r3, r0, r0
 801014e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8010152:	4152      	adcs	r2, r2
 8010154:	4299      	cmp	r1, r3
 8010156:	4b82      	ldr	r3, [pc, #520]	; (8010360 <__ieee754_pow+0x230>)
 8010158:	4193      	sbcs	r3, r2
 801015a:	f080 84b9 	bcs.w	8010ad0 <__ieee754_pow+0x9a0>
 801015e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010162:	4640      	mov	r0, r8
 8010164:	4649      	mov	r1, r9
 8010166:	f7f0 f847 	bl	80001f8 <__adddf3>
 801016a:	4683      	mov	fp, r0
 801016c:	468c      	mov	ip, r1
 801016e:	e06f      	b.n	8010250 <__ieee754_pow+0x120>
 8010170:	4b7c      	ldr	r3, [pc, #496]	; (8010364 <__ieee754_pow+0x234>)
 8010172:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8010176:	429c      	cmp	r4, r3
 8010178:	464d      	mov	r5, r9
 801017a:	4682      	mov	sl, r0
 801017c:	dc06      	bgt.n	801018c <__ieee754_pow+0x5c>
 801017e:	d101      	bne.n	8010184 <__ieee754_pow+0x54>
 8010180:	2800      	cmp	r0, #0
 8010182:	d1ec      	bne.n	801015e <__ieee754_pow+0x2e>
 8010184:	429e      	cmp	r6, r3
 8010186:	dc01      	bgt.n	801018c <__ieee754_pow+0x5c>
 8010188:	d10f      	bne.n	80101aa <__ieee754_pow+0x7a>
 801018a:	b172      	cbz	r2, 80101aa <__ieee754_pow+0x7a>
 801018c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010190:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010194:	ea55 050a 	orrs.w	r5, r5, sl
 8010198:	d1e1      	bne.n	801015e <__ieee754_pow+0x2e>
 801019a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801019e:	18db      	adds	r3, r3, r3
 80101a0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80101a4:	4152      	adcs	r2, r2
 80101a6:	429d      	cmp	r5, r3
 80101a8:	e7d5      	b.n	8010156 <__ieee754_pow+0x26>
 80101aa:	2d00      	cmp	r5, #0
 80101ac:	da39      	bge.n	8010222 <__ieee754_pow+0xf2>
 80101ae:	4b6e      	ldr	r3, [pc, #440]	; (8010368 <__ieee754_pow+0x238>)
 80101b0:	429e      	cmp	r6, r3
 80101b2:	dc52      	bgt.n	801025a <__ieee754_pow+0x12a>
 80101b4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80101b8:	429e      	cmp	r6, r3
 80101ba:	f340 849c 	ble.w	8010af6 <__ieee754_pow+0x9c6>
 80101be:	1533      	asrs	r3, r6, #20
 80101c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80101c4:	2b14      	cmp	r3, #20
 80101c6:	dd0f      	ble.n	80101e8 <__ieee754_pow+0xb8>
 80101c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80101cc:	fa22 f103 	lsr.w	r1, r2, r3
 80101d0:	fa01 f303 	lsl.w	r3, r1, r3
 80101d4:	4293      	cmp	r3, r2
 80101d6:	f040 848e 	bne.w	8010af6 <__ieee754_pow+0x9c6>
 80101da:	f001 0101 	and.w	r1, r1, #1
 80101de:	f1c1 0302 	rsb	r3, r1, #2
 80101e2:	9300      	str	r3, [sp, #0]
 80101e4:	b182      	cbz	r2, 8010208 <__ieee754_pow+0xd8>
 80101e6:	e05d      	b.n	80102a4 <__ieee754_pow+0x174>
 80101e8:	2a00      	cmp	r2, #0
 80101ea:	d159      	bne.n	80102a0 <__ieee754_pow+0x170>
 80101ec:	f1c3 0314 	rsb	r3, r3, #20
 80101f0:	fa46 f103 	asr.w	r1, r6, r3
 80101f4:	fa01 f303 	lsl.w	r3, r1, r3
 80101f8:	42b3      	cmp	r3, r6
 80101fa:	f040 8479 	bne.w	8010af0 <__ieee754_pow+0x9c0>
 80101fe:	f001 0101 	and.w	r1, r1, #1
 8010202:	f1c1 0302 	rsb	r3, r1, #2
 8010206:	9300      	str	r3, [sp, #0]
 8010208:	4b58      	ldr	r3, [pc, #352]	; (801036c <__ieee754_pow+0x23c>)
 801020a:	429e      	cmp	r6, r3
 801020c:	d132      	bne.n	8010274 <__ieee754_pow+0x144>
 801020e:	2f00      	cmp	r7, #0
 8010210:	f280 846a 	bge.w	8010ae8 <__ieee754_pow+0x9b8>
 8010214:	4642      	mov	r2, r8
 8010216:	464b      	mov	r3, r9
 8010218:	2000      	movs	r0, #0
 801021a:	4954      	ldr	r1, [pc, #336]	; (801036c <__ieee754_pow+0x23c>)
 801021c:	f7f0 facc 	bl	80007b8 <__aeabi_ddiv>
 8010220:	e7a3      	b.n	801016a <__ieee754_pow+0x3a>
 8010222:	2300      	movs	r3, #0
 8010224:	9300      	str	r3, [sp, #0]
 8010226:	2a00      	cmp	r2, #0
 8010228:	d13c      	bne.n	80102a4 <__ieee754_pow+0x174>
 801022a:	4b4e      	ldr	r3, [pc, #312]	; (8010364 <__ieee754_pow+0x234>)
 801022c:	429e      	cmp	r6, r3
 801022e:	d1eb      	bne.n	8010208 <__ieee754_pow+0xd8>
 8010230:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010234:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010238:	ea53 030a 	orrs.w	r3, r3, sl
 801023c:	f000 8448 	beq.w	8010ad0 <__ieee754_pow+0x9a0>
 8010240:	4b4b      	ldr	r3, [pc, #300]	; (8010370 <__ieee754_pow+0x240>)
 8010242:	429c      	cmp	r4, r3
 8010244:	dd0b      	ble.n	801025e <__ieee754_pow+0x12e>
 8010246:	2f00      	cmp	r7, #0
 8010248:	f2c0 8448 	blt.w	8010adc <__ieee754_pow+0x9ac>
 801024c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8010250:	4658      	mov	r0, fp
 8010252:	4661      	mov	r1, ip
 8010254:	b013      	add	sp, #76	; 0x4c
 8010256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801025a:	2302      	movs	r3, #2
 801025c:	e7e2      	b.n	8010224 <__ieee754_pow+0xf4>
 801025e:	2f00      	cmp	r7, #0
 8010260:	f04f 0b00 	mov.w	fp, #0
 8010264:	f04f 0c00 	mov.w	ip, #0
 8010268:	daf2      	bge.n	8010250 <__ieee754_pow+0x120>
 801026a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 801026e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8010272:	e7ed      	b.n	8010250 <__ieee754_pow+0x120>
 8010274:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8010278:	d106      	bne.n	8010288 <__ieee754_pow+0x158>
 801027a:	4642      	mov	r2, r8
 801027c:	464b      	mov	r3, r9
 801027e:	4640      	mov	r0, r8
 8010280:	4649      	mov	r1, r9
 8010282:	f7f0 f96f 	bl	8000564 <__aeabi_dmul>
 8010286:	e770      	b.n	801016a <__ieee754_pow+0x3a>
 8010288:	4b3a      	ldr	r3, [pc, #232]	; (8010374 <__ieee754_pow+0x244>)
 801028a:	429f      	cmp	r7, r3
 801028c:	d10a      	bne.n	80102a4 <__ieee754_pow+0x174>
 801028e:	2d00      	cmp	r5, #0
 8010290:	db08      	blt.n	80102a4 <__ieee754_pow+0x174>
 8010292:	4640      	mov	r0, r8
 8010294:	4649      	mov	r1, r9
 8010296:	b013      	add	sp, #76	; 0x4c
 8010298:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801029c:	f000 be58 	b.w	8010f50 <__ieee754_sqrt>
 80102a0:	2300      	movs	r3, #0
 80102a2:	9300      	str	r3, [sp, #0]
 80102a4:	4640      	mov	r0, r8
 80102a6:	4649      	mov	r1, r9
 80102a8:	f001 fbe4 	bl	8011a74 <fabs>
 80102ac:	4683      	mov	fp, r0
 80102ae:	468c      	mov	ip, r1
 80102b0:	f1ba 0f00 	cmp.w	sl, #0
 80102b4:	d128      	bne.n	8010308 <__ieee754_pow+0x1d8>
 80102b6:	b124      	cbz	r4, 80102c2 <__ieee754_pow+0x192>
 80102b8:	4b2c      	ldr	r3, [pc, #176]	; (801036c <__ieee754_pow+0x23c>)
 80102ba:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80102be:	429a      	cmp	r2, r3
 80102c0:	d122      	bne.n	8010308 <__ieee754_pow+0x1d8>
 80102c2:	2f00      	cmp	r7, #0
 80102c4:	da07      	bge.n	80102d6 <__ieee754_pow+0x1a6>
 80102c6:	465a      	mov	r2, fp
 80102c8:	4663      	mov	r3, ip
 80102ca:	2000      	movs	r0, #0
 80102cc:	4927      	ldr	r1, [pc, #156]	; (801036c <__ieee754_pow+0x23c>)
 80102ce:	f7f0 fa73 	bl	80007b8 <__aeabi_ddiv>
 80102d2:	4683      	mov	fp, r0
 80102d4:	468c      	mov	ip, r1
 80102d6:	2d00      	cmp	r5, #0
 80102d8:	daba      	bge.n	8010250 <__ieee754_pow+0x120>
 80102da:	9b00      	ldr	r3, [sp, #0]
 80102dc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80102e0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80102e4:	4323      	orrs	r3, r4
 80102e6:	d108      	bne.n	80102fa <__ieee754_pow+0x1ca>
 80102e8:	465a      	mov	r2, fp
 80102ea:	4663      	mov	r3, ip
 80102ec:	4658      	mov	r0, fp
 80102ee:	4661      	mov	r1, ip
 80102f0:	f7ef ff80 	bl	80001f4 <__aeabi_dsub>
 80102f4:	4602      	mov	r2, r0
 80102f6:	460b      	mov	r3, r1
 80102f8:	e790      	b.n	801021c <__ieee754_pow+0xec>
 80102fa:	9b00      	ldr	r3, [sp, #0]
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	d1a7      	bne.n	8010250 <__ieee754_pow+0x120>
 8010300:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8010304:	469c      	mov	ip, r3
 8010306:	e7a3      	b.n	8010250 <__ieee754_pow+0x120>
 8010308:	0feb      	lsrs	r3, r5, #31
 801030a:	3b01      	subs	r3, #1
 801030c:	930c      	str	r3, [sp, #48]	; 0x30
 801030e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010310:	9b00      	ldr	r3, [sp, #0]
 8010312:	4313      	orrs	r3, r2
 8010314:	d104      	bne.n	8010320 <__ieee754_pow+0x1f0>
 8010316:	4642      	mov	r2, r8
 8010318:	464b      	mov	r3, r9
 801031a:	4640      	mov	r0, r8
 801031c:	4649      	mov	r1, r9
 801031e:	e7e7      	b.n	80102f0 <__ieee754_pow+0x1c0>
 8010320:	4b15      	ldr	r3, [pc, #84]	; (8010378 <__ieee754_pow+0x248>)
 8010322:	429e      	cmp	r6, r3
 8010324:	f340 80f6 	ble.w	8010514 <__ieee754_pow+0x3e4>
 8010328:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801032c:	429e      	cmp	r6, r3
 801032e:	4b10      	ldr	r3, [pc, #64]	; (8010370 <__ieee754_pow+0x240>)
 8010330:	dd09      	ble.n	8010346 <__ieee754_pow+0x216>
 8010332:	429c      	cmp	r4, r3
 8010334:	dc0c      	bgt.n	8010350 <__ieee754_pow+0x220>
 8010336:	2f00      	cmp	r7, #0
 8010338:	da0c      	bge.n	8010354 <__ieee754_pow+0x224>
 801033a:	2000      	movs	r0, #0
 801033c:	b013      	add	sp, #76	; 0x4c
 801033e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010342:	f001 bb92 	b.w	8011a6a <__math_oflow>
 8010346:	429c      	cmp	r4, r3
 8010348:	dbf5      	blt.n	8010336 <__ieee754_pow+0x206>
 801034a:	4b08      	ldr	r3, [pc, #32]	; (801036c <__ieee754_pow+0x23c>)
 801034c:	429c      	cmp	r4, r3
 801034e:	dd15      	ble.n	801037c <__ieee754_pow+0x24c>
 8010350:	2f00      	cmp	r7, #0
 8010352:	dcf2      	bgt.n	801033a <__ieee754_pow+0x20a>
 8010354:	2000      	movs	r0, #0
 8010356:	b013      	add	sp, #76	; 0x4c
 8010358:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801035c:	f001 bb80 	b.w	8011a60 <__math_uflow>
 8010360:	fff00000 	.word	0xfff00000
 8010364:	7ff00000 	.word	0x7ff00000
 8010368:	433fffff 	.word	0x433fffff
 801036c:	3ff00000 	.word	0x3ff00000
 8010370:	3fefffff 	.word	0x3fefffff
 8010374:	3fe00000 	.word	0x3fe00000
 8010378:	41e00000 	.word	0x41e00000
 801037c:	4661      	mov	r1, ip
 801037e:	2200      	movs	r2, #0
 8010380:	4658      	mov	r0, fp
 8010382:	4b5f      	ldr	r3, [pc, #380]	; (8010500 <__ieee754_pow+0x3d0>)
 8010384:	f7ef ff36 	bl	80001f4 <__aeabi_dsub>
 8010388:	a355      	add	r3, pc, #340	; (adr r3, 80104e0 <__ieee754_pow+0x3b0>)
 801038a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038e:	4604      	mov	r4, r0
 8010390:	460d      	mov	r5, r1
 8010392:	f7f0 f8e7 	bl	8000564 <__aeabi_dmul>
 8010396:	a354      	add	r3, pc, #336	; (adr r3, 80104e8 <__ieee754_pow+0x3b8>)
 8010398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039c:	4606      	mov	r6, r0
 801039e:	460f      	mov	r7, r1
 80103a0:	4620      	mov	r0, r4
 80103a2:	4629      	mov	r1, r5
 80103a4:	f7f0 f8de 	bl	8000564 <__aeabi_dmul>
 80103a8:	2200      	movs	r2, #0
 80103aa:	4682      	mov	sl, r0
 80103ac:	468b      	mov	fp, r1
 80103ae:	4620      	mov	r0, r4
 80103b0:	4629      	mov	r1, r5
 80103b2:	4b54      	ldr	r3, [pc, #336]	; (8010504 <__ieee754_pow+0x3d4>)
 80103b4:	f7f0 f8d6 	bl	8000564 <__aeabi_dmul>
 80103b8:	4602      	mov	r2, r0
 80103ba:	460b      	mov	r3, r1
 80103bc:	a14c      	add	r1, pc, #304	; (adr r1, 80104f0 <__ieee754_pow+0x3c0>)
 80103be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103c2:	f7ef ff17 	bl	80001f4 <__aeabi_dsub>
 80103c6:	4622      	mov	r2, r4
 80103c8:	462b      	mov	r3, r5
 80103ca:	f7f0 f8cb 	bl	8000564 <__aeabi_dmul>
 80103ce:	4602      	mov	r2, r0
 80103d0:	460b      	mov	r3, r1
 80103d2:	2000      	movs	r0, #0
 80103d4:	494c      	ldr	r1, [pc, #304]	; (8010508 <__ieee754_pow+0x3d8>)
 80103d6:	f7ef ff0d 	bl	80001f4 <__aeabi_dsub>
 80103da:	4622      	mov	r2, r4
 80103dc:	462b      	mov	r3, r5
 80103de:	4680      	mov	r8, r0
 80103e0:	4689      	mov	r9, r1
 80103e2:	4620      	mov	r0, r4
 80103e4:	4629      	mov	r1, r5
 80103e6:	f7f0 f8bd 	bl	8000564 <__aeabi_dmul>
 80103ea:	4602      	mov	r2, r0
 80103ec:	460b      	mov	r3, r1
 80103ee:	4640      	mov	r0, r8
 80103f0:	4649      	mov	r1, r9
 80103f2:	f7f0 f8b7 	bl	8000564 <__aeabi_dmul>
 80103f6:	a340      	add	r3, pc, #256	; (adr r3, 80104f8 <__ieee754_pow+0x3c8>)
 80103f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fc:	f7f0 f8b2 	bl	8000564 <__aeabi_dmul>
 8010400:	4602      	mov	r2, r0
 8010402:	460b      	mov	r3, r1
 8010404:	4650      	mov	r0, sl
 8010406:	4659      	mov	r1, fp
 8010408:	f7ef fef4 	bl	80001f4 <__aeabi_dsub>
 801040c:	f04f 0a00 	mov.w	sl, #0
 8010410:	4602      	mov	r2, r0
 8010412:	460b      	mov	r3, r1
 8010414:	4604      	mov	r4, r0
 8010416:	460d      	mov	r5, r1
 8010418:	4630      	mov	r0, r6
 801041a:	4639      	mov	r1, r7
 801041c:	f7ef feec 	bl	80001f8 <__adddf3>
 8010420:	4632      	mov	r2, r6
 8010422:	463b      	mov	r3, r7
 8010424:	4650      	mov	r0, sl
 8010426:	468b      	mov	fp, r1
 8010428:	f7ef fee4 	bl	80001f4 <__aeabi_dsub>
 801042c:	4602      	mov	r2, r0
 801042e:	460b      	mov	r3, r1
 8010430:	4620      	mov	r0, r4
 8010432:	4629      	mov	r1, r5
 8010434:	f7ef fede 	bl	80001f4 <__aeabi_dsub>
 8010438:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801043c:	9b00      	ldr	r3, [sp, #0]
 801043e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010440:	3b01      	subs	r3, #1
 8010442:	4313      	orrs	r3, r2
 8010444:	f04f 0600 	mov.w	r6, #0
 8010448:	f04f 0200 	mov.w	r2, #0
 801044c:	bf0c      	ite	eq
 801044e:	4b2f      	ldreq	r3, [pc, #188]	; (801050c <__ieee754_pow+0x3dc>)
 8010450:	4b2b      	ldrne	r3, [pc, #172]	; (8010500 <__ieee754_pow+0x3d0>)
 8010452:	4604      	mov	r4, r0
 8010454:	460d      	mov	r5, r1
 8010456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801045a:	e9cd 2300 	strd	r2, r3, [sp]
 801045e:	4632      	mov	r2, r6
 8010460:	463b      	mov	r3, r7
 8010462:	f7ef fec7 	bl	80001f4 <__aeabi_dsub>
 8010466:	4652      	mov	r2, sl
 8010468:	465b      	mov	r3, fp
 801046a:	f7f0 f87b 	bl	8000564 <__aeabi_dmul>
 801046e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010472:	4680      	mov	r8, r0
 8010474:	4689      	mov	r9, r1
 8010476:	4620      	mov	r0, r4
 8010478:	4629      	mov	r1, r5
 801047a:	f7f0 f873 	bl	8000564 <__aeabi_dmul>
 801047e:	4602      	mov	r2, r0
 8010480:	460b      	mov	r3, r1
 8010482:	4640      	mov	r0, r8
 8010484:	4649      	mov	r1, r9
 8010486:	f7ef feb7 	bl	80001f8 <__adddf3>
 801048a:	4632      	mov	r2, r6
 801048c:	463b      	mov	r3, r7
 801048e:	4680      	mov	r8, r0
 8010490:	4689      	mov	r9, r1
 8010492:	4650      	mov	r0, sl
 8010494:	4659      	mov	r1, fp
 8010496:	f7f0 f865 	bl	8000564 <__aeabi_dmul>
 801049a:	4604      	mov	r4, r0
 801049c:	460d      	mov	r5, r1
 801049e:	460b      	mov	r3, r1
 80104a0:	4602      	mov	r2, r0
 80104a2:	4649      	mov	r1, r9
 80104a4:	4640      	mov	r0, r8
 80104a6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80104aa:	f7ef fea5 	bl	80001f8 <__adddf3>
 80104ae:	4b18      	ldr	r3, [pc, #96]	; (8010510 <__ieee754_pow+0x3e0>)
 80104b0:	4682      	mov	sl, r0
 80104b2:	4299      	cmp	r1, r3
 80104b4:	460f      	mov	r7, r1
 80104b6:	460e      	mov	r6, r1
 80104b8:	f340 82e5 	ble.w	8010a86 <__ieee754_pow+0x956>
 80104bc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80104c0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80104c4:	4303      	orrs	r3, r0
 80104c6:	f000 81df 	beq.w	8010888 <__ieee754_pow+0x758>
 80104ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80104ce:	2200      	movs	r2, #0
 80104d0:	2300      	movs	r3, #0
 80104d2:	f7f0 fab9 	bl	8000a48 <__aeabi_dcmplt>
 80104d6:	3800      	subs	r0, #0
 80104d8:	bf18      	it	ne
 80104da:	2001      	movne	r0, #1
 80104dc:	e72e      	b.n	801033c <__ieee754_pow+0x20c>
 80104de:	bf00      	nop
 80104e0:	60000000 	.word	0x60000000
 80104e4:	3ff71547 	.word	0x3ff71547
 80104e8:	f85ddf44 	.word	0xf85ddf44
 80104ec:	3e54ae0b 	.word	0x3e54ae0b
 80104f0:	55555555 	.word	0x55555555
 80104f4:	3fd55555 	.word	0x3fd55555
 80104f8:	652b82fe 	.word	0x652b82fe
 80104fc:	3ff71547 	.word	0x3ff71547
 8010500:	3ff00000 	.word	0x3ff00000
 8010504:	3fd00000 	.word	0x3fd00000
 8010508:	3fe00000 	.word	0x3fe00000
 801050c:	bff00000 	.word	0xbff00000
 8010510:	408fffff 	.word	0x408fffff
 8010514:	4bd2      	ldr	r3, [pc, #840]	; (8010860 <__ieee754_pow+0x730>)
 8010516:	2200      	movs	r2, #0
 8010518:	402b      	ands	r3, r5
 801051a:	b943      	cbnz	r3, 801052e <__ieee754_pow+0x3fe>
 801051c:	4658      	mov	r0, fp
 801051e:	4661      	mov	r1, ip
 8010520:	4bd0      	ldr	r3, [pc, #832]	; (8010864 <__ieee754_pow+0x734>)
 8010522:	f7f0 f81f 	bl	8000564 <__aeabi_dmul>
 8010526:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801052a:	4683      	mov	fp, r0
 801052c:	460c      	mov	r4, r1
 801052e:	1523      	asrs	r3, r4, #20
 8010530:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010534:	4413      	add	r3, r2
 8010536:	930b      	str	r3, [sp, #44]	; 0x2c
 8010538:	4bcb      	ldr	r3, [pc, #812]	; (8010868 <__ieee754_pow+0x738>)
 801053a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801053e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010542:	429c      	cmp	r4, r3
 8010544:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010548:	dd08      	ble.n	801055c <__ieee754_pow+0x42c>
 801054a:	4bc8      	ldr	r3, [pc, #800]	; (801086c <__ieee754_pow+0x73c>)
 801054c:	429c      	cmp	r4, r3
 801054e:	f340 8199 	ble.w	8010884 <__ieee754_pow+0x754>
 8010552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010554:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010558:	3301      	adds	r3, #1
 801055a:	930b      	str	r3, [sp, #44]	; 0x2c
 801055c:	2600      	movs	r6, #0
 801055e:	00f3      	lsls	r3, r6, #3
 8010560:	930d      	str	r3, [sp, #52]	; 0x34
 8010562:	4bc3      	ldr	r3, [pc, #780]	; (8010870 <__ieee754_pow+0x740>)
 8010564:	4658      	mov	r0, fp
 8010566:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801056a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801056e:	4629      	mov	r1, r5
 8010570:	461a      	mov	r2, r3
 8010572:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8010576:	4623      	mov	r3, r4
 8010578:	f7ef fe3c 	bl	80001f4 <__aeabi_dsub>
 801057c:	46da      	mov	sl, fp
 801057e:	462b      	mov	r3, r5
 8010580:	4652      	mov	r2, sl
 8010582:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010586:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801058a:	f7ef fe35 	bl	80001f8 <__adddf3>
 801058e:	4602      	mov	r2, r0
 8010590:	460b      	mov	r3, r1
 8010592:	2000      	movs	r0, #0
 8010594:	49b7      	ldr	r1, [pc, #732]	; (8010874 <__ieee754_pow+0x744>)
 8010596:	f7f0 f90f 	bl	80007b8 <__aeabi_ddiv>
 801059a:	4602      	mov	r2, r0
 801059c:	460b      	mov	r3, r1
 801059e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80105a2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80105a6:	f7ef ffdd 	bl	8000564 <__aeabi_dmul>
 80105aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80105ae:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80105b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80105b6:	2300      	movs	r3, #0
 80105b8:	2200      	movs	r2, #0
 80105ba:	46ab      	mov	fp, r5
 80105bc:	106d      	asrs	r5, r5, #1
 80105be:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80105c2:	9304      	str	r3, [sp, #16]
 80105c4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80105c8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80105cc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80105d0:	4640      	mov	r0, r8
 80105d2:	4649      	mov	r1, r9
 80105d4:	4614      	mov	r4, r2
 80105d6:	461d      	mov	r5, r3
 80105d8:	f7ef ffc4 	bl	8000564 <__aeabi_dmul>
 80105dc:	4602      	mov	r2, r0
 80105de:	460b      	mov	r3, r1
 80105e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80105e4:	f7ef fe06 	bl	80001f4 <__aeabi_dsub>
 80105e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80105ec:	4606      	mov	r6, r0
 80105ee:	460f      	mov	r7, r1
 80105f0:	4620      	mov	r0, r4
 80105f2:	4629      	mov	r1, r5
 80105f4:	f7ef fdfe 	bl	80001f4 <__aeabi_dsub>
 80105f8:	4602      	mov	r2, r0
 80105fa:	460b      	mov	r3, r1
 80105fc:	4650      	mov	r0, sl
 80105fe:	4659      	mov	r1, fp
 8010600:	f7ef fdf8 	bl	80001f4 <__aeabi_dsub>
 8010604:	4642      	mov	r2, r8
 8010606:	464b      	mov	r3, r9
 8010608:	f7ef ffac 	bl	8000564 <__aeabi_dmul>
 801060c:	4602      	mov	r2, r0
 801060e:	460b      	mov	r3, r1
 8010610:	4630      	mov	r0, r6
 8010612:	4639      	mov	r1, r7
 8010614:	f7ef fdee 	bl	80001f4 <__aeabi_dsub>
 8010618:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801061c:	f7ef ffa2 	bl	8000564 <__aeabi_dmul>
 8010620:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010624:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010628:	4610      	mov	r0, r2
 801062a:	4619      	mov	r1, r3
 801062c:	f7ef ff9a 	bl	8000564 <__aeabi_dmul>
 8010630:	a379      	add	r3, pc, #484	; (adr r3, 8010818 <__ieee754_pow+0x6e8>)
 8010632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010636:	4604      	mov	r4, r0
 8010638:	460d      	mov	r5, r1
 801063a:	f7ef ff93 	bl	8000564 <__aeabi_dmul>
 801063e:	a378      	add	r3, pc, #480	; (adr r3, 8010820 <__ieee754_pow+0x6f0>)
 8010640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010644:	f7ef fdd8 	bl	80001f8 <__adddf3>
 8010648:	4622      	mov	r2, r4
 801064a:	462b      	mov	r3, r5
 801064c:	f7ef ff8a 	bl	8000564 <__aeabi_dmul>
 8010650:	a375      	add	r3, pc, #468	; (adr r3, 8010828 <__ieee754_pow+0x6f8>)
 8010652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010656:	f7ef fdcf 	bl	80001f8 <__adddf3>
 801065a:	4622      	mov	r2, r4
 801065c:	462b      	mov	r3, r5
 801065e:	f7ef ff81 	bl	8000564 <__aeabi_dmul>
 8010662:	a373      	add	r3, pc, #460	; (adr r3, 8010830 <__ieee754_pow+0x700>)
 8010664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010668:	f7ef fdc6 	bl	80001f8 <__adddf3>
 801066c:	4622      	mov	r2, r4
 801066e:	462b      	mov	r3, r5
 8010670:	f7ef ff78 	bl	8000564 <__aeabi_dmul>
 8010674:	a370      	add	r3, pc, #448	; (adr r3, 8010838 <__ieee754_pow+0x708>)
 8010676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801067a:	f7ef fdbd 	bl	80001f8 <__adddf3>
 801067e:	4622      	mov	r2, r4
 8010680:	462b      	mov	r3, r5
 8010682:	f7ef ff6f 	bl	8000564 <__aeabi_dmul>
 8010686:	a36e      	add	r3, pc, #440	; (adr r3, 8010840 <__ieee754_pow+0x710>)
 8010688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068c:	f7ef fdb4 	bl	80001f8 <__adddf3>
 8010690:	4622      	mov	r2, r4
 8010692:	4606      	mov	r6, r0
 8010694:	460f      	mov	r7, r1
 8010696:	462b      	mov	r3, r5
 8010698:	4620      	mov	r0, r4
 801069a:	4629      	mov	r1, r5
 801069c:	f7ef ff62 	bl	8000564 <__aeabi_dmul>
 80106a0:	4602      	mov	r2, r0
 80106a2:	460b      	mov	r3, r1
 80106a4:	4630      	mov	r0, r6
 80106a6:	4639      	mov	r1, r7
 80106a8:	f7ef ff5c 	bl	8000564 <__aeabi_dmul>
 80106ac:	4604      	mov	r4, r0
 80106ae:	460d      	mov	r5, r1
 80106b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80106b4:	4642      	mov	r2, r8
 80106b6:	464b      	mov	r3, r9
 80106b8:	f7ef fd9e 	bl	80001f8 <__adddf3>
 80106bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80106c0:	f7ef ff50 	bl	8000564 <__aeabi_dmul>
 80106c4:	4622      	mov	r2, r4
 80106c6:	462b      	mov	r3, r5
 80106c8:	f7ef fd96 	bl	80001f8 <__adddf3>
 80106cc:	4642      	mov	r2, r8
 80106ce:	4606      	mov	r6, r0
 80106d0:	460f      	mov	r7, r1
 80106d2:	464b      	mov	r3, r9
 80106d4:	4640      	mov	r0, r8
 80106d6:	4649      	mov	r1, r9
 80106d8:	f7ef ff44 	bl	8000564 <__aeabi_dmul>
 80106dc:	2200      	movs	r2, #0
 80106de:	4b66      	ldr	r3, [pc, #408]	; (8010878 <__ieee754_pow+0x748>)
 80106e0:	4682      	mov	sl, r0
 80106e2:	468b      	mov	fp, r1
 80106e4:	f7ef fd88 	bl	80001f8 <__adddf3>
 80106e8:	4632      	mov	r2, r6
 80106ea:	463b      	mov	r3, r7
 80106ec:	f7ef fd84 	bl	80001f8 <__adddf3>
 80106f0:	2400      	movs	r4, #0
 80106f2:	460d      	mov	r5, r1
 80106f4:	4622      	mov	r2, r4
 80106f6:	460b      	mov	r3, r1
 80106f8:	4640      	mov	r0, r8
 80106fa:	4649      	mov	r1, r9
 80106fc:	f7ef ff32 	bl	8000564 <__aeabi_dmul>
 8010700:	2200      	movs	r2, #0
 8010702:	4680      	mov	r8, r0
 8010704:	4689      	mov	r9, r1
 8010706:	4620      	mov	r0, r4
 8010708:	4629      	mov	r1, r5
 801070a:	4b5b      	ldr	r3, [pc, #364]	; (8010878 <__ieee754_pow+0x748>)
 801070c:	f7ef fd72 	bl	80001f4 <__aeabi_dsub>
 8010710:	4652      	mov	r2, sl
 8010712:	465b      	mov	r3, fp
 8010714:	f7ef fd6e 	bl	80001f4 <__aeabi_dsub>
 8010718:	4602      	mov	r2, r0
 801071a:	460b      	mov	r3, r1
 801071c:	4630      	mov	r0, r6
 801071e:	4639      	mov	r1, r7
 8010720:	f7ef fd68 	bl	80001f4 <__aeabi_dsub>
 8010724:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010728:	f7ef ff1c 	bl	8000564 <__aeabi_dmul>
 801072c:	4622      	mov	r2, r4
 801072e:	4606      	mov	r6, r0
 8010730:	460f      	mov	r7, r1
 8010732:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010736:	462b      	mov	r3, r5
 8010738:	f7ef ff14 	bl	8000564 <__aeabi_dmul>
 801073c:	4602      	mov	r2, r0
 801073e:	460b      	mov	r3, r1
 8010740:	4630      	mov	r0, r6
 8010742:	4639      	mov	r1, r7
 8010744:	f7ef fd58 	bl	80001f8 <__adddf3>
 8010748:	2400      	movs	r4, #0
 801074a:	4606      	mov	r6, r0
 801074c:	460f      	mov	r7, r1
 801074e:	4602      	mov	r2, r0
 8010750:	460b      	mov	r3, r1
 8010752:	4640      	mov	r0, r8
 8010754:	4649      	mov	r1, r9
 8010756:	f7ef fd4f 	bl	80001f8 <__adddf3>
 801075a:	a33b      	add	r3, pc, #236	; (adr r3, 8010848 <__ieee754_pow+0x718>)
 801075c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010760:	4620      	mov	r0, r4
 8010762:	460d      	mov	r5, r1
 8010764:	f7ef fefe 	bl	8000564 <__aeabi_dmul>
 8010768:	4642      	mov	r2, r8
 801076a:	464b      	mov	r3, r9
 801076c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010770:	4620      	mov	r0, r4
 8010772:	4629      	mov	r1, r5
 8010774:	f7ef fd3e 	bl	80001f4 <__aeabi_dsub>
 8010778:	4602      	mov	r2, r0
 801077a:	460b      	mov	r3, r1
 801077c:	4630      	mov	r0, r6
 801077e:	4639      	mov	r1, r7
 8010780:	f7ef fd38 	bl	80001f4 <__aeabi_dsub>
 8010784:	a332      	add	r3, pc, #200	; (adr r3, 8010850 <__ieee754_pow+0x720>)
 8010786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801078a:	f7ef feeb 	bl	8000564 <__aeabi_dmul>
 801078e:	a332      	add	r3, pc, #200	; (adr r3, 8010858 <__ieee754_pow+0x728>)
 8010790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010794:	4606      	mov	r6, r0
 8010796:	460f      	mov	r7, r1
 8010798:	4620      	mov	r0, r4
 801079a:	4629      	mov	r1, r5
 801079c:	f7ef fee2 	bl	8000564 <__aeabi_dmul>
 80107a0:	4602      	mov	r2, r0
 80107a2:	460b      	mov	r3, r1
 80107a4:	4630      	mov	r0, r6
 80107a6:	4639      	mov	r1, r7
 80107a8:	f7ef fd26 	bl	80001f8 <__adddf3>
 80107ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80107ae:	4b33      	ldr	r3, [pc, #204]	; (801087c <__ieee754_pow+0x74c>)
 80107b0:	f04f 0a00 	mov.w	sl, #0
 80107b4:	4413      	add	r3, r2
 80107b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ba:	f7ef fd1d 	bl	80001f8 <__adddf3>
 80107be:	4680      	mov	r8, r0
 80107c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80107c2:	4689      	mov	r9, r1
 80107c4:	f7ef fe64 	bl	8000490 <__aeabi_i2d>
 80107c8:	4604      	mov	r4, r0
 80107ca:	460d      	mov	r5, r1
 80107cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80107ce:	4b2c      	ldr	r3, [pc, #176]	; (8010880 <__ieee754_pow+0x750>)
 80107d0:	4413      	add	r3, r2
 80107d2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80107d6:	4642      	mov	r2, r8
 80107d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80107dc:	464b      	mov	r3, r9
 80107de:	f7ef fd0b 	bl	80001f8 <__adddf3>
 80107e2:	4632      	mov	r2, r6
 80107e4:	463b      	mov	r3, r7
 80107e6:	f7ef fd07 	bl	80001f8 <__adddf3>
 80107ea:	4622      	mov	r2, r4
 80107ec:	462b      	mov	r3, r5
 80107ee:	f7ef fd03 	bl	80001f8 <__adddf3>
 80107f2:	4622      	mov	r2, r4
 80107f4:	462b      	mov	r3, r5
 80107f6:	4650      	mov	r0, sl
 80107f8:	468b      	mov	fp, r1
 80107fa:	f7ef fcfb 	bl	80001f4 <__aeabi_dsub>
 80107fe:	4632      	mov	r2, r6
 8010800:	463b      	mov	r3, r7
 8010802:	f7ef fcf7 	bl	80001f4 <__aeabi_dsub>
 8010806:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801080a:	f7ef fcf3 	bl	80001f4 <__aeabi_dsub>
 801080e:	4602      	mov	r2, r0
 8010810:	460b      	mov	r3, r1
 8010812:	4640      	mov	r0, r8
 8010814:	4649      	mov	r1, r9
 8010816:	e60d      	b.n	8010434 <__ieee754_pow+0x304>
 8010818:	4a454eef 	.word	0x4a454eef
 801081c:	3fca7e28 	.word	0x3fca7e28
 8010820:	93c9db65 	.word	0x93c9db65
 8010824:	3fcd864a 	.word	0x3fcd864a
 8010828:	a91d4101 	.word	0xa91d4101
 801082c:	3fd17460 	.word	0x3fd17460
 8010830:	518f264d 	.word	0x518f264d
 8010834:	3fd55555 	.word	0x3fd55555
 8010838:	db6fabff 	.word	0xdb6fabff
 801083c:	3fdb6db6 	.word	0x3fdb6db6
 8010840:	33333303 	.word	0x33333303
 8010844:	3fe33333 	.word	0x3fe33333
 8010848:	e0000000 	.word	0xe0000000
 801084c:	3feec709 	.word	0x3feec709
 8010850:	dc3a03fd 	.word	0xdc3a03fd
 8010854:	3feec709 	.word	0x3feec709
 8010858:	145b01f5 	.word	0x145b01f5
 801085c:	be3e2fe0 	.word	0xbe3e2fe0
 8010860:	7ff00000 	.word	0x7ff00000
 8010864:	43400000 	.word	0x43400000
 8010868:	0003988e 	.word	0x0003988e
 801086c:	000bb679 	.word	0x000bb679
 8010870:	08018480 	.word	0x08018480
 8010874:	3ff00000 	.word	0x3ff00000
 8010878:	40080000 	.word	0x40080000
 801087c:	080184a0 	.word	0x080184a0
 8010880:	08018490 	.word	0x08018490
 8010884:	2601      	movs	r6, #1
 8010886:	e66a      	b.n	801055e <__ieee754_pow+0x42e>
 8010888:	a39d      	add	r3, pc, #628	; (adr r3, 8010b00 <__ieee754_pow+0x9d0>)
 801088a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801088e:	4640      	mov	r0, r8
 8010890:	4649      	mov	r1, r9
 8010892:	f7ef fcb1 	bl	80001f8 <__adddf3>
 8010896:	4622      	mov	r2, r4
 8010898:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801089c:	462b      	mov	r3, r5
 801089e:	4650      	mov	r0, sl
 80108a0:	4639      	mov	r1, r7
 80108a2:	f7ef fca7 	bl	80001f4 <__aeabi_dsub>
 80108a6:	4602      	mov	r2, r0
 80108a8:	460b      	mov	r3, r1
 80108aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80108ae:	f7f0 f8e9 	bl	8000a84 <__aeabi_dcmpgt>
 80108b2:	2800      	cmp	r0, #0
 80108b4:	f47f ae09 	bne.w	80104ca <__ieee754_pow+0x39a>
 80108b8:	4aa3      	ldr	r2, [pc, #652]	; (8010b48 <__ieee754_pow+0xa18>)
 80108ba:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80108be:	4293      	cmp	r3, r2
 80108c0:	f340 8101 	ble.w	8010ac6 <__ieee754_pow+0x996>
 80108c4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80108c8:	2000      	movs	r0, #0
 80108ca:	151b      	asrs	r3, r3, #20
 80108cc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80108d0:	fa4a f303 	asr.w	r3, sl, r3
 80108d4:	4433      	add	r3, r6
 80108d6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80108da:	4f9c      	ldr	r7, [pc, #624]	; (8010b4c <__ieee754_pow+0xa1c>)
 80108dc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80108e0:	4117      	asrs	r7, r2
 80108e2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80108e6:	ea23 0107 	bic.w	r1, r3, r7
 80108ea:	f1c2 0214 	rsb	r2, r2, #20
 80108ee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80108f2:	460b      	mov	r3, r1
 80108f4:	fa4a fa02 	asr.w	sl, sl, r2
 80108f8:	2e00      	cmp	r6, #0
 80108fa:	4602      	mov	r2, r0
 80108fc:	4629      	mov	r1, r5
 80108fe:	4620      	mov	r0, r4
 8010900:	bfb8      	it	lt
 8010902:	f1ca 0a00 	rsblt	sl, sl, #0
 8010906:	f7ef fc75 	bl	80001f4 <__aeabi_dsub>
 801090a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801090e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010912:	2400      	movs	r4, #0
 8010914:	4642      	mov	r2, r8
 8010916:	464b      	mov	r3, r9
 8010918:	f7ef fc6e 	bl	80001f8 <__adddf3>
 801091c:	a37a      	add	r3, pc, #488	; (adr r3, 8010b08 <__ieee754_pow+0x9d8>)
 801091e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010922:	4620      	mov	r0, r4
 8010924:	460d      	mov	r5, r1
 8010926:	f7ef fe1d 	bl	8000564 <__aeabi_dmul>
 801092a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801092e:	4606      	mov	r6, r0
 8010930:	460f      	mov	r7, r1
 8010932:	4620      	mov	r0, r4
 8010934:	4629      	mov	r1, r5
 8010936:	f7ef fc5d 	bl	80001f4 <__aeabi_dsub>
 801093a:	4602      	mov	r2, r0
 801093c:	460b      	mov	r3, r1
 801093e:	4640      	mov	r0, r8
 8010940:	4649      	mov	r1, r9
 8010942:	f7ef fc57 	bl	80001f4 <__aeabi_dsub>
 8010946:	a372      	add	r3, pc, #456	; (adr r3, 8010b10 <__ieee754_pow+0x9e0>)
 8010948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094c:	f7ef fe0a 	bl	8000564 <__aeabi_dmul>
 8010950:	a371      	add	r3, pc, #452	; (adr r3, 8010b18 <__ieee754_pow+0x9e8>)
 8010952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010956:	4680      	mov	r8, r0
 8010958:	4689      	mov	r9, r1
 801095a:	4620      	mov	r0, r4
 801095c:	4629      	mov	r1, r5
 801095e:	f7ef fe01 	bl	8000564 <__aeabi_dmul>
 8010962:	4602      	mov	r2, r0
 8010964:	460b      	mov	r3, r1
 8010966:	4640      	mov	r0, r8
 8010968:	4649      	mov	r1, r9
 801096a:	f7ef fc45 	bl	80001f8 <__adddf3>
 801096e:	4604      	mov	r4, r0
 8010970:	460d      	mov	r5, r1
 8010972:	4602      	mov	r2, r0
 8010974:	460b      	mov	r3, r1
 8010976:	4630      	mov	r0, r6
 8010978:	4639      	mov	r1, r7
 801097a:	f7ef fc3d 	bl	80001f8 <__adddf3>
 801097e:	4632      	mov	r2, r6
 8010980:	463b      	mov	r3, r7
 8010982:	4680      	mov	r8, r0
 8010984:	4689      	mov	r9, r1
 8010986:	f7ef fc35 	bl	80001f4 <__aeabi_dsub>
 801098a:	4602      	mov	r2, r0
 801098c:	460b      	mov	r3, r1
 801098e:	4620      	mov	r0, r4
 8010990:	4629      	mov	r1, r5
 8010992:	f7ef fc2f 	bl	80001f4 <__aeabi_dsub>
 8010996:	4642      	mov	r2, r8
 8010998:	4606      	mov	r6, r0
 801099a:	460f      	mov	r7, r1
 801099c:	464b      	mov	r3, r9
 801099e:	4640      	mov	r0, r8
 80109a0:	4649      	mov	r1, r9
 80109a2:	f7ef fddf 	bl	8000564 <__aeabi_dmul>
 80109a6:	a35e      	add	r3, pc, #376	; (adr r3, 8010b20 <__ieee754_pow+0x9f0>)
 80109a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ac:	4604      	mov	r4, r0
 80109ae:	460d      	mov	r5, r1
 80109b0:	f7ef fdd8 	bl	8000564 <__aeabi_dmul>
 80109b4:	a35c      	add	r3, pc, #368	; (adr r3, 8010b28 <__ieee754_pow+0x9f8>)
 80109b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ba:	f7ef fc1b 	bl	80001f4 <__aeabi_dsub>
 80109be:	4622      	mov	r2, r4
 80109c0:	462b      	mov	r3, r5
 80109c2:	f7ef fdcf 	bl	8000564 <__aeabi_dmul>
 80109c6:	a35a      	add	r3, pc, #360	; (adr r3, 8010b30 <__ieee754_pow+0xa00>)
 80109c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109cc:	f7ef fc14 	bl	80001f8 <__adddf3>
 80109d0:	4622      	mov	r2, r4
 80109d2:	462b      	mov	r3, r5
 80109d4:	f7ef fdc6 	bl	8000564 <__aeabi_dmul>
 80109d8:	a357      	add	r3, pc, #348	; (adr r3, 8010b38 <__ieee754_pow+0xa08>)
 80109da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109de:	f7ef fc09 	bl	80001f4 <__aeabi_dsub>
 80109e2:	4622      	mov	r2, r4
 80109e4:	462b      	mov	r3, r5
 80109e6:	f7ef fdbd 	bl	8000564 <__aeabi_dmul>
 80109ea:	a355      	add	r3, pc, #340	; (adr r3, 8010b40 <__ieee754_pow+0xa10>)
 80109ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f0:	f7ef fc02 	bl	80001f8 <__adddf3>
 80109f4:	4622      	mov	r2, r4
 80109f6:	462b      	mov	r3, r5
 80109f8:	f7ef fdb4 	bl	8000564 <__aeabi_dmul>
 80109fc:	4602      	mov	r2, r0
 80109fe:	460b      	mov	r3, r1
 8010a00:	4640      	mov	r0, r8
 8010a02:	4649      	mov	r1, r9
 8010a04:	f7ef fbf6 	bl	80001f4 <__aeabi_dsub>
 8010a08:	4604      	mov	r4, r0
 8010a0a:	460d      	mov	r5, r1
 8010a0c:	4602      	mov	r2, r0
 8010a0e:	460b      	mov	r3, r1
 8010a10:	4640      	mov	r0, r8
 8010a12:	4649      	mov	r1, r9
 8010a14:	f7ef fda6 	bl	8000564 <__aeabi_dmul>
 8010a18:	2200      	movs	r2, #0
 8010a1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010a22:	4620      	mov	r0, r4
 8010a24:	4629      	mov	r1, r5
 8010a26:	f7ef fbe5 	bl	80001f4 <__aeabi_dsub>
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	460b      	mov	r3, r1
 8010a2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a32:	f7ef fec1 	bl	80007b8 <__aeabi_ddiv>
 8010a36:	4632      	mov	r2, r6
 8010a38:	4604      	mov	r4, r0
 8010a3a:	460d      	mov	r5, r1
 8010a3c:	463b      	mov	r3, r7
 8010a3e:	4640      	mov	r0, r8
 8010a40:	4649      	mov	r1, r9
 8010a42:	f7ef fd8f 	bl	8000564 <__aeabi_dmul>
 8010a46:	4632      	mov	r2, r6
 8010a48:	463b      	mov	r3, r7
 8010a4a:	f7ef fbd5 	bl	80001f8 <__adddf3>
 8010a4e:	4602      	mov	r2, r0
 8010a50:	460b      	mov	r3, r1
 8010a52:	4620      	mov	r0, r4
 8010a54:	4629      	mov	r1, r5
 8010a56:	f7ef fbcd 	bl	80001f4 <__aeabi_dsub>
 8010a5a:	4642      	mov	r2, r8
 8010a5c:	464b      	mov	r3, r9
 8010a5e:	f7ef fbc9 	bl	80001f4 <__aeabi_dsub>
 8010a62:	4602      	mov	r2, r0
 8010a64:	460b      	mov	r3, r1
 8010a66:	2000      	movs	r0, #0
 8010a68:	4939      	ldr	r1, [pc, #228]	; (8010b50 <__ieee754_pow+0xa20>)
 8010a6a:	f7ef fbc3 	bl	80001f4 <__aeabi_dsub>
 8010a6e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8010a72:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010a76:	da29      	bge.n	8010acc <__ieee754_pow+0x99c>
 8010a78:	4652      	mov	r2, sl
 8010a7a:	f001 f885 	bl	8011b88 <scalbn>
 8010a7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a82:	f7ff bbfe 	b.w	8010282 <__ieee754_pow+0x152>
 8010a86:	4b33      	ldr	r3, [pc, #204]	; (8010b54 <__ieee754_pow+0xa24>)
 8010a88:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8010a8c:	429f      	cmp	r7, r3
 8010a8e:	f77f af13 	ble.w	80108b8 <__ieee754_pow+0x788>
 8010a92:	4b31      	ldr	r3, [pc, #196]	; (8010b58 <__ieee754_pow+0xa28>)
 8010a94:	440b      	add	r3, r1
 8010a96:	4303      	orrs	r3, r0
 8010a98:	d009      	beq.n	8010aae <__ieee754_pow+0x97e>
 8010a9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	f7ef ffd1 	bl	8000a48 <__aeabi_dcmplt>
 8010aa6:	3800      	subs	r0, #0
 8010aa8:	bf18      	it	ne
 8010aaa:	2001      	movne	r0, #1
 8010aac:	e453      	b.n	8010356 <__ieee754_pow+0x226>
 8010aae:	4622      	mov	r2, r4
 8010ab0:	462b      	mov	r3, r5
 8010ab2:	f7ef fb9f 	bl	80001f4 <__aeabi_dsub>
 8010ab6:	4642      	mov	r2, r8
 8010ab8:	464b      	mov	r3, r9
 8010aba:	f7ef ffd9 	bl	8000a70 <__aeabi_dcmpge>
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	f43f aefa 	beq.w	80108b8 <__ieee754_pow+0x788>
 8010ac4:	e7e9      	b.n	8010a9a <__ieee754_pow+0x96a>
 8010ac6:	f04f 0a00 	mov.w	sl, #0
 8010aca:	e720      	b.n	801090e <__ieee754_pow+0x7de>
 8010acc:	4621      	mov	r1, r4
 8010ace:	e7d6      	b.n	8010a7e <__ieee754_pow+0x94e>
 8010ad0:	f04f 0b00 	mov.w	fp, #0
 8010ad4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8010b50 <__ieee754_pow+0xa20>
 8010ad8:	f7ff bbba 	b.w	8010250 <__ieee754_pow+0x120>
 8010adc:	f04f 0b00 	mov.w	fp, #0
 8010ae0:	f04f 0c00 	mov.w	ip, #0
 8010ae4:	f7ff bbb4 	b.w	8010250 <__ieee754_pow+0x120>
 8010ae8:	4640      	mov	r0, r8
 8010aea:	4649      	mov	r1, r9
 8010aec:	f7ff bb3d 	b.w	801016a <__ieee754_pow+0x3a>
 8010af0:	9200      	str	r2, [sp, #0]
 8010af2:	f7ff bb89 	b.w	8010208 <__ieee754_pow+0xd8>
 8010af6:	2300      	movs	r3, #0
 8010af8:	f7ff bb73 	b.w	80101e2 <__ieee754_pow+0xb2>
 8010afc:	f3af 8000 	nop.w
 8010b00:	652b82fe 	.word	0x652b82fe
 8010b04:	3c971547 	.word	0x3c971547
 8010b08:	00000000 	.word	0x00000000
 8010b0c:	3fe62e43 	.word	0x3fe62e43
 8010b10:	fefa39ef 	.word	0xfefa39ef
 8010b14:	3fe62e42 	.word	0x3fe62e42
 8010b18:	0ca86c39 	.word	0x0ca86c39
 8010b1c:	be205c61 	.word	0xbe205c61
 8010b20:	72bea4d0 	.word	0x72bea4d0
 8010b24:	3e663769 	.word	0x3e663769
 8010b28:	c5d26bf1 	.word	0xc5d26bf1
 8010b2c:	3ebbbd41 	.word	0x3ebbbd41
 8010b30:	af25de2c 	.word	0xaf25de2c
 8010b34:	3f11566a 	.word	0x3f11566a
 8010b38:	16bebd93 	.word	0x16bebd93
 8010b3c:	3f66c16c 	.word	0x3f66c16c
 8010b40:	5555553e 	.word	0x5555553e
 8010b44:	3fc55555 	.word	0x3fc55555
 8010b48:	3fe00000 	.word	0x3fe00000
 8010b4c:	000fffff 	.word	0x000fffff
 8010b50:	3ff00000 	.word	0x3ff00000
 8010b54:	4090cbff 	.word	0x4090cbff
 8010b58:	3f6f3400 	.word	0x3f6f3400
 8010b5c:	00000000 	.word	0x00000000

08010b60 <__ieee754_rem_pio2>:
 8010b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b64:	4614      	mov	r4, r2
 8010b66:	4ac4      	ldr	r2, [pc, #784]	; (8010e78 <__ieee754_rem_pio2+0x318>)
 8010b68:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8010b6c:	b08d      	sub	sp, #52	; 0x34
 8010b6e:	4592      	cmp	sl, r2
 8010b70:	9104      	str	r1, [sp, #16]
 8010b72:	dc07      	bgt.n	8010b84 <__ieee754_rem_pio2+0x24>
 8010b74:	2200      	movs	r2, #0
 8010b76:	2300      	movs	r3, #0
 8010b78:	e9c4 0100 	strd	r0, r1, [r4]
 8010b7c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010b80:	2500      	movs	r5, #0
 8010b82:	e024      	b.n	8010bce <__ieee754_rem_pio2+0x6e>
 8010b84:	4abd      	ldr	r2, [pc, #756]	; (8010e7c <__ieee754_rem_pio2+0x31c>)
 8010b86:	4592      	cmp	sl, r2
 8010b88:	dc72      	bgt.n	8010c70 <__ieee754_rem_pio2+0x110>
 8010b8a:	9b04      	ldr	r3, [sp, #16]
 8010b8c:	4dbc      	ldr	r5, [pc, #752]	; (8010e80 <__ieee754_rem_pio2+0x320>)
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	a3ab      	add	r3, pc, #684	; (adr r3, 8010e40 <__ieee754_rem_pio2+0x2e0>)
 8010b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b96:	dd36      	ble.n	8010c06 <__ieee754_rem_pio2+0xa6>
 8010b98:	f7ef fb2c 	bl	80001f4 <__aeabi_dsub>
 8010b9c:	45aa      	cmp	sl, r5
 8010b9e:	4606      	mov	r6, r0
 8010ba0:	460f      	mov	r7, r1
 8010ba2:	d018      	beq.n	8010bd6 <__ieee754_rem_pio2+0x76>
 8010ba4:	a3a8      	add	r3, pc, #672	; (adr r3, 8010e48 <__ieee754_rem_pio2+0x2e8>)
 8010ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010baa:	f7ef fb23 	bl	80001f4 <__aeabi_dsub>
 8010bae:	4602      	mov	r2, r0
 8010bb0:	460b      	mov	r3, r1
 8010bb2:	4630      	mov	r0, r6
 8010bb4:	e9c4 2300 	strd	r2, r3, [r4]
 8010bb8:	4639      	mov	r1, r7
 8010bba:	f7ef fb1b 	bl	80001f4 <__aeabi_dsub>
 8010bbe:	a3a2      	add	r3, pc, #648	; (adr r3, 8010e48 <__ieee754_rem_pio2+0x2e8>)
 8010bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc4:	f7ef fb16 	bl	80001f4 <__aeabi_dsub>
 8010bc8:	2501      	movs	r5, #1
 8010bca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010bce:	4628      	mov	r0, r5
 8010bd0:	b00d      	add	sp, #52	; 0x34
 8010bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd6:	a39e      	add	r3, pc, #632	; (adr r3, 8010e50 <__ieee754_rem_pio2+0x2f0>)
 8010bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bdc:	f7ef fb0a 	bl	80001f4 <__aeabi_dsub>
 8010be0:	a39d      	add	r3, pc, #628	; (adr r3, 8010e58 <__ieee754_rem_pio2+0x2f8>)
 8010be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be6:	4606      	mov	r6, r0
 8010be8:	460f      	mov	r7, r1
 8010bea:	f7ef fb03 	bl	80001f4 <__aeabi_dsub>
 8010bee:	4602      	mov	r2, r0
 8010bf0:	460b      	mov	r3, r1
 8010bf2:	4630      	mov	r0, r6
 8010bf4:	e9c4 2300 	strd	r2, r3, [r4]
 8010bf8:	4639      	mov	r1, r7
 8010bfa:	f7ef fafb 	bl	80001f4 <__aeabi_dsub>
 8010bfe:	a396      	add	r3, pc, #600	; (adr r3, 8010e58 <__ieee754_rem_pio2+0x2f8>)
 8010c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c04:	e7de      	b.n	8010bc4 <__ieee754_rem_pio2+0x64>
 8010c06:	f7ef faf7 	bl	80001f8 <__adddf3>
 8010c0a:	45aa      	cmp	sl, r5
 8010c0c:	4606      	mov	r6, r0
 8010c0e:	460f      	mov	r7, r1
 8010c10:	d016      	beq.n	8010c40 <__ieee754_rem_pio2+0xe0>
 8010c12:	a38d      	add	r3, pc, #564	; (adr r3, 8010e48 <__ieee754_rem_pio2+0x2e8>)
 8010c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c18:	f7ef faee 	bl	80001f8 <__adddf3>
 8010c1c:	4602      	mov	r2, r0
 8010c1e:	460b      	mov	r3, r1
 8010c20:	4630      	mov	r0, r6
 8010c22:	e9c4 2300 	strd	r2, r3, [r4]
 8010c26:	4639      	mov	r1, r7
 8010c28:	f7ef fae4 	bl	80001f4 <__aeabi_dsub>
 8010c2c:	a386      	add	r3, pc, #536	; (adr r3, 8010e48 <__ieee754_rem_pio2+0x2e8>)
 8010c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c32:	f7ef fae1 	bl	80001f8 <__adddf3>
 8010c36:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010c3a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010c3e:	e7c6      	b.n	8010bce <__ieee754_rem_pio2+0x6e>
 8010c40:	a383      	add	r3, pc, #524	; (adr r3, 8010e50 <__ieee754_rem_pio2+0x2f0>)
 8010c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c46:	f7ef fad7 	bl	80001f8 <__adddf3>
 8010c4a:	a383      	add	r3, pc, #524	; (adr r3, 8010e58 <__ieee754_rem_pio2+0x2f8>)
 8010c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c50:	4606      	mov	r6, r0
 8010c52:	460f      	mov	r7, r1
 8010c54:	f7ef fad0 	bl	80001f8 <__adddf3>
 8010c58:	4602      	mov	r2, r0
 8010c5a:	460b      	mov	r3, r1
 8010c5c:	4630      	mov	r0, r6
 8010c5e:	e9c4 2300 	strd	r2, r3, [r4]
 8010c62:	4639      	mov	r1, r7
 8010c64:	f7ef fac6 	bl	80001f4 <__aeabi_dsub>
 8010c68:	a37b      	add	r3, pc, #492	; (adr r3, 8010e58 <__ieee754_rem_pio2+0x2f8>)
 8010c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6e:	e7e0      	b.n	8010c32 <__ieee754_rem_pio2+0xd2>
 8010c70:	4a84      	ldr	r2, [pc, #528]	; (8010e84 <__ieee754_rem_pio2+0x324>)
 8010c72:	4592      	cmp	sl, r2
 8010c74:	f300 80d5 	bgt.w	8010e22 <__ieee754_rem_pio2+0x2c2>
 8010c78:	f000 fefc 	bl	8011a74 <fabs>
 8010c7c:	a378      	add	r3, pc, #480	; (adr r3, 8010e60 <__ieee754_rem_pio2+0x300>)
 8010c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c82:	4606      	mov	r6, r0
 8010c84:	460f      	mov	r7, r1
 8010c86:	f7ef fc6d 	bl	8000564 <__aeabi_dmul>
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	4b7e      	ldr	r3, [pc, #504]	; (8010e88 <__ieee754_rem_pio2+0x328>)
 8010c8e:	f7ef fab3 	bl	80001f8 <__adddf3>
 8010c92:	f7ef ff17 	bl	8000ac4 <__aeabi_d2iz>
 8010c96:	4605      	mov	r5, r0
 8010c98:	f7ef fbfa 	bl	8000490 <__aeabi_i2d>
 8010c9c:	4602      	mov	r2, r0
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010ca4:	a366      	add	r3, pc, #408	; (adr r3, 8010e40 <__ieee754_rem_pio2+0x2e0>)
 8010ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010caa:	f7ef fc5b 	bl	8000564 <__aeabi_dmul>
 8010cae:	4602      	mov	r2, r0
 8010cb0:	460b      	mov	r3, r1
 8010cb2:	4630      	mov	r0, r6
 8010cb4:	4639      	mov	r1, r7
 8010cb6:	f7ef fa9d 	bl	80001f4 <__aeabi_dsub>
 8010cba:	a363      	add	r3, pc, #396	; (adr r3, 8010e48 <__ieee754_rem_pio2+0x2e8>)
 8010cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc0:	4680      	mov	r8, r0
 8010cc2:	4689      	mov	r9, r1
 8010cc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010cc8:	f7ef fc4c 	bl	8000564 <__aeabi_dmul>
 8010ccc:	2d1f      	cmp	r5, #31
 8010cce:	4606      	mov	r6, r0
 8010cd0:	460f      	mov	r7, r1
 8010cd2:	dc0e      	bgt.n	8010cf2 <__ieee754_rem_pio2+0x192>
 8010cd4:	4b6d      	ldr	r3, [pc, #436]	; (8010e8c <__ieee754_rem_pio2+0x32c>)
 8010cd6:	1e6a      	subs	r2, r5, #1
 8010cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cdc:	4553      	cmp	r3, sl
 8010cde:	d008      	beq.n	8010cf2 <__ieee754_rem_pio2+0x192>
 8010ce0:	4632      	mov	r2, r6
 8010ce2:	463b      	mov	r3, r7
 8010ce4:	4640      	mov	r0, r8
 8010ce6:	4649      	mov	r1, r9
 8010ce8:	f7ef fa84 	bl	80001f4 <__aeabi_dsub>
 8010cec:	e9c4 0100 	strd	r0, r1, [r4]
 8010cf0:	e013      	b.n	8010d1a <__ieee754_rem_pio2+0x1ba>
 8010cf2:	463b      	mov	r3, r7
 8010cf4:	4632      	mov	r2, r6
 8010cf6:	4640      	mov	r0, r8
 8010cf8:	4649      	mov	r1, r9
 8010cfa:	f7ef fa7b 	bl	80001f4 <__aeabi_dsub>
 8010cfe:	ea4f 532a 	mov.w	r3, sl, asr #20
 8010d02:	9305      	str	r3, [sp, #20]
 8010d04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010d08:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8010d0c:	f1ba 0f10 	cmp.w	sl, #16
 8010d10:	dc1f      	bgt.n	8010d52 <__ieee754_rem_pio2+0x1f2>
 8010d12:	4602      	mov	r2, r0
 8010d14:	460b      	mov	r3, r1
 8010d16:	e9c4 2300 	strd	r2, r3, [r4]
 8010d1a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8010d1e:	4640      	mov	r0, r8
 8010d20:	4653      	mov	r3, sl
 8010d22:	4649      	mov	r1, r9
 8010d24:	f7ef fa66 	bl	80001f4 <__aeabi_dsub>
 8010d28:	4632      	mov	r2, r6
 8010d2a:	463b      	mov	r3, r7
 8010d2c:	f7ef fa62 	bl	80001f4 <__aeabi_dsub>
 8010d30:	460b      	mov	r3, r1
 8010d32:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010d36:	9904      	ldr	r1, [sp, #16]
 8010d38:	4602      	mov	r2, r0
 8010d3a:	2900      	cmp	r1, #0
 8010d3c:	f6bf af47 	bge.w	8010bce <__ieee754_rem_pio2+0x6e>
 8010d40:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8010d44:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8010d48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010d4c:	60e3      	str	r3, [r4, #12]
 8010d4e:	426d      	negs	r5, r5
 8010d50:	e73d      	b.n	8010bce <__ieee754_rem_pio2+0x6e>
 8010d52:	a33f      	add	r3, pc, #252	; (adr r3, 8010e50 <__ieee754_rem_pio2+0x2f0>)
 8010d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d5c:	f7ef fc02 	bl	8000564 <__aeabi_dmul>
 8010d60:	4606      	mov	r6, r0
 8010d62:	460f      	mov	r7, r1
 8010d64:	4602      	mov	r2, r0
 8010d66:	460b      	mov	r3, r1
 8010d68:	4640      	mov	r0, r8
 8010d6a:	4649      	mov	r1, r9
 8010d6c:	f7ef fa42 	bl	80001f4 <__aeabi_dsub>
 8010d70:	4602      	mov	r2, r0
 8010d72:	460b      	mov	r3, r1
 8010d74:	4682      	mov	sl, r0
 8010d76:	468b      	mov	fp, r1
 8010d78:	4640      	mov	r0, r8
 8010d7a:	4649      	mov	r1, r9
 8010d7c:	f7ef fa3a 	bl	80001f4 <__aeabi_dsub>
 8010d80:	4632      	mov	r2, r6
 8010d82:	463b      	mov	r3, r7
 8010d84:	f7ef fa36 	bl	80001f4 <__aeabi_dsub>
 8010d88:	a333      	add	r3, pc, #204	; (adr r3, 8010e58 <__ieee754_rem_pio2+0x2f8>)
 8010d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d8e:	4606      	mov	r6, r0
 8010d90:	460f      	mov	r7, r1
 8010d92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d96:	f7ef fbe5 	bl	8000564 <__aeabi_dmul>
 8010d9a:	4632      	mov	r2, r6
 8010d9c:	463b      	mov	r3, r7
 8010d9e:	f7ef fa29 	bl	80001f4 <__aeabi_dsub>
 8010da2:	4602      	mov	r2, r0
 8010da4:	460b      	mov	r3, r1
 8010da6:	4606      	mov	r6, r0
 8010da8:	460f      	mov	r7, r1
 8010daa:	4650      	mov	r0, sl
 8010dac:	4659      	mov	r1, fp
 8010dae:	f7ef fa21 	bl	80001f4 <__aeabi_dsub>
 8010db2:	9a05      	ldr	r2, [sp, #20]
 8010db4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010db8:	1ad3      	subs	r3, r2, r3
 8010dba:	2b31      	cmp	r3, #49	; 0x31
 8010dbc:	dc06      	bgt.n	8010dcc <__ieee754_rem_pio2+0x26c>
 8010dbe:	4602      	mov	r2, r0
 8010dc0:	460b      	mov	r3, r1
 8010dc2:	46d0      	mov	r8, sl
 8010dc4:	46d9      	mov	r9, fp
 8010dc6:	e9c4 2300 	strd	r2, r3, [r4]
 8010dca:	e7a6      	b.n	8010d1a <__ieee754_rem_pio2+0x1ba>
 8010dcc:	a326      	add	r3, pc, #152	; (adr r3, 8010e68 <__ieee754_rem_pio2+0x308>)
 8010dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010dd6:	f7ef fbc5 	bl	8000564 <__aeabi_dmul>
 8010dda:	4606      	mov	r6, r0
 8010ddc:	460f      	mov	r7, r1
 8010dde:	4602      	mov	r2, r0
 8010de0:	460b      	mov	r3, r1
 8010de2:	4650      	mov	r0, sl
 8010de4:	4659      	mov	r1, fp
 8010de6:	f7ef fa05 	bl	80001f4 <__aeabi_dsub>
 8010dea:	4602      	mov	r2, r0
 8010dec:	460b      	mov	r3, r1
 8010dee:	4680      	mov	r8, r0
 8010df0:	4689      	mov	r9, r1
 8010df2:	4650      	mov	r0, sl
 8010df4:	4659      	mov	r1, fp
 8010df6:	f7ef f9fd 	bl	80001f4 <__aeabi_dsub>
 8010dfa:	4632      	mov	r2, r6
 8010dfc:	463b      	mov	r3, r7
 8010dfe:	f7ef f9f9 	bl	80001f4 <__aeabi_dsub>
 8010e02:	a31b      	add	r3, pc, #108	; (adr r3, 8010e70 <__ieee754_rem_pio2+0x310>)
 8010e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e08:	4606      	mov	r6, r0
 8010e0a:	460f      	mov	r7, r1
 8010e0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e10:	f7ef fba8 	bl	8000564 <__aeabi_dmul>
 8010e14:	4632      	mov	r2, r6
 8010e16:	463b      	mov	r3, r7
 8010e18:	f7ef f9ec 	bl	80001f4 <__aeabi_dsub>
 8010e1c:	4606      	mov	r6, r0
 8010e1e:	460f      	mov	r7, r1
 8010e20:	e75e      	b.n	8010ce0 <__ieee754_rem_pio2+0x180>
 8010e22:	4a1b      	ldr	r2, [pc, #108]	; (8010e90 <__ieee754_rem_pio2+0x330>)
 8010e24:	4592      	cmp	sl, r2
 8010e26:	dd35      	ble.n	8010e94 <__ieee754_rem_pio2+0x334>
 8010e28:	4602      	mov	r2, r0
 8010e2a:	460b      	mov	r3, r1
 8010e2c:	f7ef f9e2 	bl	80001f4 <__aeabi_dsub>
 8010e30:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010e34:	e9c4 0100 	strd	r0, r1, [r4]
 8010e38:	e6a2      	b.n	8010b80 <__ieee754_rem_pio2+0x20>
 8010e3a:	bf00      	nop
 8010e3c:	f3af 8000 	nop.w
 8010e40:	54400000 	.word	0x54400000
 8010e44:	3ff921fb 	.word	0x3ff921fb
 8010e48:	1a626331 	.word	0x1a626331
 8010e4c:	3dd0b461 	.word	0x3dd0b461
 8010e50:	1a600000 	.word	0x1a600000
 8010e54:	3dd0b461 	.word	0x3dd0b461
 8010e58:	2e037073 	.word	0x2e037073
 8010e5c:	3ba3198a 	.word	0x3ba3198a
 8010e60:	6dc9c883 	.word	0x6dc9c883
 8010e64:	3fe45f30 	.word	0x3fe45f30
 8010e68:	2e000000 	.word	0x2e000000
 8010e6c:	3ba3198a 	.word	0x3ba3198a
 8010e70:	252049c1 	.word	0x252049c1
 8010e74:	397b839a 	.word	0x397b839a
 8010e78:	3fe921fb 	.word	0x3fe921fb
 8010e7c:	4002d97b 	.word	0x4002d97b
 8010e80:	3ff921fb 	.word	0x3ff921fb
 8010e84:	413921fb 	.word	0x413921fb
 8010e88:	3fe00000 	.word	0x3fe00000
 8010e8c:	080184b0 	.word	0x080184b0
 8010e90:	7fefffff 	.word	0x7fefffff
 8010e94:	ea4f 552a 	mov.w	r5, sl, asr #20
 8010e98:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8010e9c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8010ea0:	460f      	mov	r7, r1
 8010ea2:	4606      	mov	r6, r0
 8010ea4:	f7ef fe0e 	bl	8000ac4 <__aeabi_d2iz>
 8010ea8:	f7ef faf2 	bl	8000490 <__aeabi_i2d>
 8010eac:	4602      	mov	r2, r0
 8010eae:	460b      	mov	r3, r1
 8010eb0:	4630      	mov	r0, r6
 8010eb2:	4639      	mov	r1, r7
 8010eb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010eb8:	f7ef f99c 	bl	80001f4 <__aeabi_dsub>
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	4b22      	ldr	r3, [pc, #136]	; (8010f48 <__ieee754_rem_pio2+0x3e8>)
 8010ec0:	f7ef fb50 	bl	8000564 <__aeabi_dmul>
 8010ec4:	460f      	mov	r7, r1
 8010ec6:	4606      	mov	r6, r0
 8010ec8:	f7ef fdfc 	bl	8000ac4 <__aeabi_d2iz>
 8010ecc:	f7ef fae0 	bl	8000490 <__aeabi_i2d>
 8010ed0:	4602      	mov	r2, r0
 8010ed2:	460b      	mov	r3, r1
 8010ed4:	4630      	mov	r0, r6
 8010ed6:	4639      	mov	r1, r7
 8010ed8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010edc:	f7ef f98a 	bl	80001f4 <__aeabi_dsub>
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	4b19      	ldr	r3, [pc, #100]	; (8010f48 <__ieee754_rem_pio2+0x3e8>)
 8010ee4:	f7ef fb3e 	bl	8000564 <__aeabi_dmul>
 8010ee8:	f04f 0803 	mov.w	r8, #3
 8010eec:	2600      	movs	r6, #0
 8010eee:	2700      	movs	r7, #0
 8010ef0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010ef4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8010ef8:	4632      	mov	r2, r6
 8010efa:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8010efe:	463b      	mov	r3, r7
 8010f00:	46c2      	mov	sl, r8
 8010f02:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010f06:	f7ef fd95 	bl	8000a34 <__aeabi_dcmpeq>
 8010f0a:	2800      	cmp	r0, #0
 8010f0c:	d1f4      	bne.n	8010ef8 <__ieee754_rem_pio2+0x398>
 8010f0e:	4b0f      	ldr	r3, [pc, #60]	; (8010f4c <__ieee754_rem_pio2+0x3ec>)
 8010f10:	462a      	mov	r2, r5
 8010f12:	9301      	str	r3, [sp, #4]
 8010f14:	2302      	movs	r3, #2
 8010f16:	4621      	mov	r1, r4
 8010f18:	9300      	str	r3, [sp, #0]
 8010f1a:	a806      	add	r0, sp, #24
 8010f1c:	4653      	mov	r3, sl
 8010f1e:	f000 f985 	bl	801122c <__kernel_rem_pio2>
 8010f22:	9b04      	ldr	r3, [sp, #16]
 8010f24:	4605      	mov	r5, r0
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	f6bf ae51 	bge.w	8010bce <__ieee754_rem_pio2+0x6e>
 8010f2c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010f30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f34:	e9c4 2300 	strd	r2, r3, [r4]
 8010f38:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8010f3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f40:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010f44:	e703      	b.n	8010d4e <__ieee754_rem_pio2+0x1ee>
 8010f46:	bf00      	nop
 8010f48:	41700000 	.word	0x41700000
 8010f4c:	08018530 	.word	0x08018530

08010f50 <__ieee754_sqrt>:
 8010f50:	f8df c158 	ldr.w	ip, [pc, #344]	; 80110ac <__ieee754_sqrt+0x15c>
 8010f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f58:	ea3c 0c01 	bics.w	ip, ip, r1
 8010f5c:	4606      	mov	r6, r0
 8010f5e:	460d      	mov	r5, r1
 8010f60:	460c      	mov	r4, r1
 8010f62:	460a      	mov	r2, r1
 8010f64:	4607      	mov	r7, r0
 8010f66:	4603      	mov	r3, r0
 8010f68:	d10f      	bne.n	8010f8a <__ieee754_sqrt+0x3a>
 8010f6a:	4602      	mov	r2, r0
 8010f6c:	460b      	mov	r3, r1
 8010f6e:	f7ef faf9 	bl	8000564 <__aeabi_dmul>
 8010f72:	4602      	mov	r2, r0
 8010f74:	460b      	mov	r3, r1
 8010f76:	4630      	mov	r0, r6
 8010f78:	4629      	mov	r1, r5
 8010f7a:	f7ef f93d 	bl	80001f8 <__adddf3>
 8010f7e:	4606      	mov	r6, r0
 8010f80:	460d      	mov	r5, r1
 8010f82:	4630      	mov	r0, r6
 8010f84:	4629      	mov	r1, r5
 8010f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f8a:	2900      	cmp	r1, #0
 8010f8c:	dc0e      	bgt.n	8010fac <__ieee754_sqrt+0x5c>
 8010f8e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8010f92:	ea5c 0707 	orrs.w	r7, ip, r7
 8010f96:	d0f4      	beq.n	8010f82 <__ieee754_sqrt+0x32>
 8010f98:	b141      	cbz	r1, 8010fac <__ieee754_sqrt+0x5c>
 8010f9a:	4602      	mov	r2, r0
 8010f9c:	460b      	mov	r3, r1
 8010f9e:	f7ef f929 	bl	80001f4 <__aeabi_dsub>
 8010fa2:	4602      	mov	r2, r0
 8010fa4:	460b      	mov	r3, r1
 8010fa6:	f7ef fc07 	bl	80007b8 <__aeabi_ddiv>
 8010faa:	e7e8      	b.n	8010f7e <__ieee754_sqrt+0x2e>
 8010fac:	1521      	asrs	r1, r4, #20
 8010fae:	d075      	beq.n	801109c <__ieee754_sqrt+0x14c>
 8010fb0:	07cc      	lsls	r4, r1, #31
 8010fb2:	f04f 0400 	mov.w	r4, #0
 8010fb6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8010fba:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8010fbe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8010fc2:	bf5e      	ittt	pl
 8010fc4:	0fd9      	lsrpl	r1, r3, #31
 8010fc6:	005b      	lslpl	r3, r3, #1
 8010fc8:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8010fcc:	0fd9      	lsrs	r1, r3, #31
 8010fce:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8010fd2:	2516      	movs	r5, #22
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010fda:	107f      	asrs	r7, r7, #1
 8010fdc:	005b      	lsls	r3, r3, #1
 8010fde:	1846      	adds	r6, r0, r1
 8010fe0:	4296      	cmp	r6, r2
 8010fe2:	bfde      	ittt	le
 8010fe4:	1b92      	suble	r2, r2, r6
 8010fe6:	1870      	addle	r0, r6, r1
 8010fe8:	1864      	addle	r4, r4, r1
 8010fea:	0052      	lsls	r2, r2, #1
 8010fec:	3d01      	subs	r5, #1
 8010fee:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8010ff2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010ff6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010ffa:	d1f0      	bne.n	8010fde <__ieee754_sqrt+0x8e>
 8010ffc:	4629      	mov	r1, r5
 8010ffe:	f04f 0e20 	mov.w	lr, #32
 8011002:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011006:	4282      	cmp	r2, r0
 8011008:	eb06 0c05 	add.w	ip, r6, r5
 801100c:	dc02      	bgt.n	8011014 <__ieee754_sqrt+0xc4>
 801100e:	d113      	bne.n	8011038 <__ieee754_sqrt+0xe8>
 8011010:	459c      	cmp	ip, r3
 8011012:	d811      	bhi.n	8011038 <__ieee754_sqrt+0xe8>
 8011014:	f1bc 0f00 	cmp.w	ip, #0
 8011018:	eb0c 0506 	add.w	r5, ip, r6
 801101c:	da43      	bge.n	80110a6 <__ieee754_sqrt+0x156>
 801101e:	2d00      	cmp	r5, #0
 8011020:	db41      	blt.n	80110a6 <__ieee754_sqrt+0x156>
 8011022:	f100 0801 	add.w	r8, r0, #1
 8011026:	1a12      	subs	r2, r2, r0
 8011028:	4640      	mov	r0, r8
 801102a:	459c      	cmp	ip, r3
 801102c:	bf88      	it	hi
 801102e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8011032:	eba3 030c 	sub.w	r3, r3, ip
 8011036:	4431      	add	r1, r6
 8011038:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801103c:	f1be 0e01 	subs.w	lr, lr, #1
 8011040:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8011044:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011048:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801104c:	d1db      	bne.n	8011006 <__ieee754_sqrt+0xb6>
 801104e:	4313      	orrs	r3, r2
 8011050:	d006      	beq.n	8011060 <__ieee754_sqrt+0x110>
 8011052:	1c48      	adds	r0, r1, #1
 8011054:	bf0b      	itete	eq
 8011056:	4671      	moveq	r1, lr
 8011058:	3101      	addne	r1, #1
 801105a:	3401      	addeq	r4, #1
 801105c:	f021 0101 	bicne.w	r1, r1, #1
 8011060:	1063      	asrs	r3, r4, #1
 8011062:	0849      	lsrs	r1, r1, #1
 8011064:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011068:	07e2      	lsls	r2, r4, #31
 801106a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801106e:	bf48      	it	mi
 8011070:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8011074:	460e      	mov	r6, r1
 8011076:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801107a:	e782      	b.n	8010f82 <__ieee754_sqrt+0x32>
 801107c:	0ada      	lsrs	r2, r3, #11
 801107e:	3815      	subs	r0, #21
 8011080:	055b      	lsls	r3, r3, #21
 8011082:	2a00      	cmp	r2, #0
 8011084:	d0fa      	beq.n	801107c <__ieee754_sqrt+0x12c>
 8011086:	02d5      	lsls	r5, r2, #11
 8011088:	d50a      	bpl.n	80110a0 <__ieee754_sqrt+0x150>
 801108a:	f1c1 0420 	rsb	r4, r1, #32
 801108e:	fa23 f404 	lsr.w	r4, r3, r4
 8011092:	1e4d      	subs	r5, r1, #1
 8011094:	408b      	lsls	r3, r1
 8011096:	4322      	orrs	r2, r4
 8011098:	1b41      	subs	r1, r0, r5
 801109a:	e789      	b.n	8010fb0 <__ieee754_sqrt+0x60>
 801109c:	4608      	mov	r0, r1
 801109e:	e7f0      	b.n	8011082 <__ieee754_sqrt+0x132>
 80110a0:	0052      	lsls	r2, r2, #1
 80110a2:	3101      	adds	r1, #1
 80110a4:	e7ef      	b.n	8011086 <__ieee754_sqrt+0x136>
 80110a6:	4680      	mov	r8, r0
 80110a8:	e7bd      	b.n	8011026 <__ieee754_sqrt+0xd6>
 80110aa:	bf00      	nop
 80110ac:	7ff00000 	.word	0x7ff00000

080110b0 <__kernel_cos>:
 80110b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110b4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80110b8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80110bc:	4680      	mov	r8, r0
 80110be:	460f      	mov	r7, r1
 80110c0:	e9cd 2300 	strd	r2, r3, [sp]
 80110c4:	da04      	bge.n	80110d0 <__kernel_cos+0x20>
 80110c6:	f7ef fcfd 	bl	8000ac4 <__aeabi_d2iz>
 80110ca:	2800      	cmp	r0, #0
 80110cc:	f000 8086 	beq.w	80111dc <__kernel_cos+0x12c>
 80110d0:	4642      	mov	r2, r8
 80110d2:	463b      	mov	r3, r7
 80110d4:	4640      	mov	r0, r8
 80110d6:	4639      	mov	r1, r7
 80110d8:	f7ef fa44 	bl	8000564 <__aeabi_dmul>
 80110dc:	2200      	movs	r2, #0
 80110de:	4b4e      	ldr	r3, [pc, #312]	; (8011218 <__kernel_cos+0x168>)
 80110e0:	4604      	mov	r4, r0
 80110e2:	460d      	mov	r5, r1
 80110e4:	f7ef fa3e 	bl	8000564 <__aeabi_dmul>
 80110e8:	a33f      	add	r3, pc, #252	; (adr r3, 80111e8 <__kernel_cos+0x138>)
 80110ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ee:	4682      	mov	sl, r0
 80110f0:	468b      	mov	fp, r1
 80110f2:	4620      	mov	r0, r4
 80110f4:	4629      	mov	r1, r5
 80110f6:	f7ef fa35 	bl	8000564 <__aeabi_dmul>
 80110fa:	a33d      	add	r3, pc, #244	; (adr r3, 80111f0 <__kernel_cos+0x140>)
 80110fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011100:	f7ef f87a 	bl	80001f8 <__adddf3>
 8011104:	4622      	mov	r2, r4
 8011106:	462b      	mov	r3, r5
 8011108:	f7ef fa2c 	bl	8000564 <__aeabi_dmul>
 801110c:	a33a      	add	r3, pc, #232	; (adr r3, 80111f8 <__kernel_cos+0x148>)
 801110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011112:	f7ef f86f 	bl	80001f4 <__aeabi_dsub>
 8011116:	4622      	mov	r2, r4
 8011118:	462b      	mov	r3, r5
 801111a:	f7ef fa23 	bl	8000564 <__aeabi_dmul>
 801111e:	a338      	add	r3, pc, #224	; (adr r3, 8011200 <__kernel_cos+0x150>)
 8011120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011124:	f7ef f868 	bl	80001f8 <__adddf3>
 8011128:	4622      	mov	r2, r4
 801112a:	462b      	mov	r3, r5
 801112c:	f7ef fa1a 	bl	8000564 <__aeabi_dmul>
 8011130:	a335      	add	r3, pc, #212	; (adr r3, 8011208 <__kernel_cos+0x158>)
 8011132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011136:	f7ef f85d 	bl	80001f4 <__aeabi_dsub>
 801113a:	4622      	mov	r2, r4
 801113c:	462b      	mov	r3, r5
 801113e:	f7ef fa11 	bl	8000564 <__aeabi_dmul>
 8011142:	a333      	add	r3, pc, #204	; (adr r3, 8011210 <__kernel_cos+0x160>)
 8011144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011148:	f7ef f856 	bl	80001f8 <__adddf3>
 801114c:	4622      	mov	r2, r4
 801114e:	462b      	mov	r3, r5
 8011150:	f7ef fa08 	bl	8000564 <__aeabi_dmul>
 8011154:	4622      	mov	r2, r4
 8011156:	462b      	mov	r3, r5
 8011158:	f7ef fa04 	bl	8000564 <__aeabi_dmul>
 801115c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011160:	4604      	mov	r4, r0
 8011162:	460d      	mov	r5, r1
 8011164:	4640      	mov	r0, r8
 8011166:	4639      	mov	r1, r7
 8011168:	f7ef f9fc 	bl	8000564 <__aeabi_dmul>
 801116c:	460b      	mov	r3, r1
 801116e:	4602      	mov	r2, r0
 8011170:	4629      	mov	r1, r5
 8011172:	4620      	mov	r0, r4
 8011174:	f7ef f83e 	bl	80001f4 <__aeabi_dsub>
 8011178:	4b28      	ldr	r3, [pc, #160]	; (801121c <__kernel_cos+0x16c>)
 801117a:	4680      	mov	r8, r0
 801117c:	429e      	cmp	r6, r3
 801117e:	4689      	mov	r9, r1
 8011180:	dc0e      	bgt.n	80111a0 <__kernel_cos+0xf0>
 8011182:	4602      	mov	r2, r0
 8011184:	460b      	mov	r3, r1
 8011186:	4650      	mov	r0, sl
 8011188:	4659      	mov	r1, fp
 801118a:	f7ef f833 	bl	80001f4 <__aeabi_dsub>
 801118e:	4602      	mov	r2, r0
 8011190:	2000      	movs	r0, #0
 8011192:	460b      	mov	r3, r1
 8011194:	4922      	ldr	r1, [pc, #136]	; (8011220 <__kernel_cos+0x170>)
 8011196:	f7ef f82d 	bl	80001f4 <__aeabi_dsub>
 801119a:	b003      	add	sp, #12
 801119c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111a0:	2400      	movs	r4, #0
 80111a2:	4b20      	ldr	r3, [pc, #128]	; (8011224 <__kernel_cos+0x174>)
 80111a4:	4622      	mov	r2, r4
 80111a6:	429e      	cmp	r6, r3
 80111a8:	bfcc      	ite	gt
 80111aa:	4d1f      	ldrgt	r5, [pc, #124]	; (8011228 <__kernel_cos+0x178>)
 80111ac:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80111b0:	462b      	mov	r3, r5
 80111b2:	2000      	movs	r0, #0
 80111b4:	491a      	ldr	r1, [pc, #104]	; (8011220 <__kernel_cos+0x170>)
 80111b6:	f7ef f81d 	bl	80001f4 <__aeabi_dsub>
 80111ba:	4622      	mov	r2, r4
 80111bc:	4606      	mov	r6, r0
 80111be:	460f      	mov	r7, r1
 80111c0:	462b      	mov	r3, r5
 80111c2:	4650      	mov	r0, sl
 80111c4:	4659      	mov	r1, fp
 80111c6:	f7ef f815 	bl	80001f4 <__aeabi_dsub>
 80111ca:	4642      	mov	r2, r8
 80111cc:	464b      	mov	r3, r9
 80111ce:	f7ef f811 	bl	80001f4 <__aeabi_dsub>
 80111d2:	4602      	mov	r2, r0
 80111d4:	460b      	mov	r3, r1
 80111d6:	4630      	mov	r0, r6
 80111d8:	4639      	mov	r1, r7
 80111da:	e7dc      	b.n	8011196 <__kernel_cos+0xe6>
 80111dc:	2000      	movs	r0, #0
 80111de:	4910      	ldr	r1, [pc, #64]	; (8011220 <__kernel_cos+0x170>)
 80111e0:	e7db      	b.n	801119a <__kernel_cos+0xea>
 80111e2:	bf00      	nop
 80111e4:	f3af 8000 	nop.w
 80111e8:	be8838d4 	.word	0xbe8838d4
 80111ec:	bda8fae9 	.word	0xbda8fae9
 80111f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80111f4:	3e21ee9e 	.word	0x3e21ee9e
 80111f8:	809c52ad 	.word	0x809c52ad
 80111fc:	3e927e4f 	.word	0x3e927e4f
 8011200:	19cb1590 	.word	0x19cb1590
 8011204:	3efa01a0 	.word	0x3efa01a0
 8011208:	16c15177 	.word	0x16c15177
 801120c:	3f56c16c 	.word	0x3f56c16c
 8011210:	5555554c 	.word	0x5555554c
 8011214:	3fa55555 	.word	0x3fa55555
 8011218:	3fe00000 	.word	0x3fe00000
 801121c:	3fd33332 	.word	0x3fd33332
 8011220:	3ff00000 	.word	0x3ff00000
 8011224:	3fe90000 	.word	0x3fe90000
 8011228:	3fd20000 	.word	0x3fd20000

0801122c <__kernel_rem_pio2>:
 801122c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011230:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8011234:	9308      	str	r3, [sp, #32]
 8011236:	9106      	str	r1, [sp, #24]
 8011238:	4bb6      	ldr	r3, [pc, #728]	; (8011514 <__kernel_rem_pio2+0x2e8>)
 801123a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801123c:	f112 0f14 	cmn.w	r2, #20
 8011240:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011244:	bfa8      	it	ge
 8011246:	1ed4      	subge	r4, r2, #3
 8011248:	9302      	str	r3, [sp, #8]
 801124a:	9b08      	ldr	r3, [sp, #32]
 801124c:	bfb8      	it	lt
 801124e:	2400      	movlt	r4, #0
 8011250:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8011254:	9307      	str	r3, [sp, #28]
 8011256:	bfa4      	itt	ge
 8011258:	2318      	movge	r3, #24
 801125a:	fb94 f4f3 	sdivge	r4, r4, r3
 801125e:	f06f 0317 	mvn.w	r3, #23
 8011262:	fb04 3303 	mla	r3, r4, r3, r3
 8011266:	eb03 0b02 	add.w	fp, r3, r2
 801126a:	9a07      	ldr	r2, [sp, #28]
 801126c:	9b02      	ldr	r3, [sp, #8]
 801126e:	1aa7      	subs	r7, r4, r2
 8011270:	eb03 0802 	add.w	r8, r3, r2
 8011274:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8011276:	2500      	movs	r5, #0
 8011278:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801127c:	2200      	movs	r2, #0
 801127e:	2300      	movs	r3, #0
 8011280:	9009      	str	r0, [sp, #36]	; 0x24
 8011282:	ae20      	add	r6, sp, #128	; 0x80
 8011284:	4545      	cmp	r5, r8
 8011286:	dd14      	ble.n	80112b2 <__kernel_rem_pio2+0x86>
 8011288:	f04f 0800 	mov.w	r8, #0
 801128c:	9a08      	ldr	r2, [sp, #32]
 801128e:	ab20      	add	r3, sp, #128	; 0x80
 8011290:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8011294:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8011298:	9b02      	ldr	r3, [sp, #8]
 801129a:	4598      	cmp	r8, r3
 801129c:	dc35      	bgt.n	801130a <__kernel_rem_pio2+0xde>
 801129e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112a0:	2200      	movs	r2, #0
 80112a2:	f1a3 0908 	sub.w	r9, r3, #8
 80112a6:	2300      	movs	r3, #0
 80112a8:	462f      	mov	r7, r5
 80112aa:	2600      	movs	r6, #0
 80112ac:	e9cd 2300 	strd	r2, r3, [sp]
 80112b0:	e01f      	b.n	80112f2 <__kernel_rem_pio2+0xc6>
 80112b2:	42ef      	cmn	r7, r5
 80112b4:	d40b      	bmi.n	80112ce <__kernel_rem_pio2+0xa2>
 80112b6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80112ba:	e9cd 2300 	strd	r2, r3, [sp]
 80112be:	f7ef f8e7 	bl	8000490 <__aeabi_i2d>
 80112c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112c6:	e8e6 0102 	strd	r0, r1, [r6], #8
 80112ca:	3501      	adds	r5, #1
 80112cc:	e7da      	b.n	8011284 <__kernel_rem_pio2+0x58>
 80112ce:	4610      	mov	r0, r2
 80112d0:	4619      	mov	r1, r3
 80112d2:	e7f8      	b.n	80112c6 <__kernel_rem_pio2+0x9a>
 80112d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80112d8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80112dc:	f7ef f942 	bl	8000564 <__aeabi_dmul>
 80112e0:	4602      	mov	r2, r0
 80112e2:	460b      	mov	r3, r1
 80112e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80112e8:	f7ee ff86 	bl	80001f8 <__adddf3>
 80112ec:	e9cd 0100 	strd	r0, r1, [sp]
 80112f0:	3601      	adds	r6, #1
 80112f2:	9b07      	ldr	r3, [sp, #28]
 80112f4:	3f08      	subs	r7, #8
 80112f6:	429e      	cmp	r6, r3
 80112f8:	ddec      	ble.n	80112d4 <__kernel_rem_pio2+0xa8>
 80112fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112fe:	f108 0801 	add.w	r8, r8, #1
 8011302:	e8ea 2302 	strd	r2, r3, [sl], #8
 8011306:	3508      	adds	r5, #8
 8011308:	e7c6      	b.n	8011298 <__kernel_rem_pio2+0x6c>
 801130a:	9b02      	ldr	r3, [sp, #8]
 801130c:	aa0c      	add	r2, sp, #48	; 0x30
 801130e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011312:	930b      	str	r3, [sp, #44]	; 0x2c
 8011314:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8011316:	9e02      	ldr	r6, [sp, #8]
 8011318:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801131c:	930a      	str	r3, [sp, #40]	; 0x28
 801131e:	ab98      	add	r3, sp, #608	; 0x260
 8011320:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011324:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8011328:	ab70      	add	r3, sp, #448	; 0x1c0
 801132a:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 801132e:	46d0      	mov	r8, sl
 8011330:	46b1      	mov	r9, r6
 8011332:	af0c      	add	r7, sp, #48	; 0x30
 8011334:	9700      	str	r7, [sp, #0]
 8011336:	f1b9 0f00 	cmp.w	r9, #0
 801133a:	f1a8 0808 	sub.w	r8, r8, #8
 801133e:	dc71      	bgt.n	8011424 <__kernel_rem_pio2+0x1f8>
 8011340:	465a      	mov	r2, fp
 8011342:	4620      	mov	r0, r4
 8011344:	4629      	mov	r1, r5
 8011346:	f000 fc1f 	bl	8011b88 <scalbn>
 801134a:	2200      	movs	r2, #0
 801134c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011350:	4604      	mov	r4, r0
 8011352:	460d      	mov	r5, r1
 8011354:	f7ef f906 	bl	8000564 <__aeabi_dmul>
 8011358:	f000 fb96 	bl	8011a88 <floor>
 801135c:	2200      	movs	r2, #0
 801135e:	4b6e      	ldr	r3, [pc, #440]	; (8011518 <__kernel_rem_pio2+0x2ec>)
 8011360:	f7ef f900 	bl	8000564 <__aeabi_dmul>
 8011364:	4602      	mov	r2, r0
 8011366:	460b      	mov	r3, r1
 8011368:	4620      	mov	r0, r4
 801136a:	4629      	mov	r1, r5
 801136c:	f7ee ff42 	bl	80001f4 <__aeabi_dsub>
 8011370:	460d      	mov	r5, r1
 8011372:	4604      	mov	r4, r0
 8011374:	f7ef fba6 	bl	8000ac4 <__aeabi_d2iz>
 8011378:	9004      	str	r0, [sp, #16]
 801137a:	f7ef f889 	bl	8000490 <__aeabi_i2d>
 801137e:	4602      	mov	r2, r0
 8011380:	460b      	mov	r3, r1
 8011382:	4620      	mov	r0, r4
 8011384:	4629      	mov	r1, r5
 8011386:	f7ee ff35 	bl	80001f4 <__aeabi_dsub>
 801138a:	f1bb 0f00 	cmp.w	fp, #0
 801138e:	4680      	mov	r8, r0
 8011390:	4689      	mov	r9, r1
 8011392:	dd70      	ble.n	8011476 <__kernel_rem_pio2+0x24a>
 8011394:	1e72      	subs	r2, r6, #1
 8011396:	ab0c      	add	r3, sp, #48	; 0x30
 8011398:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801139c:	9c04      	ldr	r4, [sp, #16]
 801139e:	f1cb 0118 	rsb	r1, fp, #24
 80113a2:	fa40 f301 	asr.w	r3, r0, r1
 80113a6:	441c      	add	r4, r3
 80113a8:	408b      	lsls	r3, r1
 80113aa:	1ac0      	subs	r0, r0, r3
 80113ac:	ab0c      	add	r3, sp, #48	; 0x30
 80113ae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80113b2:	f1cb 0317 	rsb	r3, fp, #23
 80113b6:	9404      	str	r4, [sp, #16]
 80113b8:	fa40 f303 	asr.w	r3, r0, r3
 80113bc:	9300      	str	r3, [sp, #0]
 80113be:	9b00      	ldr	r3, [sp, #0]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	dd66      	ble.n	8011492 <__kernel_rem_pio2+0x266>
 80113c4:	2200      	movs	r2, #0
 80113c6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80113ca:	4614      	mov	r4, r2
 80113cc:	9b04      	ldr	r3, [sp, #16]
 80113ce:	3301      	adds	r3, #1
 80113d0:	9304      	str	r3, [sp, #16]
 80113d2:	4296      	cmp	r6, r2
 80113d4:	f300 80ac 	bgt.w	8011530 <__kernel_rem_pio2+0x304>
 80113d8:	f1bb 0f00 	cmp.w	fp, #0
 80113dc:	dd07      	ble.n	80113ee <__kernel_rem_pio2+0x1c2>
 80113de:	f1bb 0f01 	cmp.w	fp, #1
 80113e2:	f000 80b4 	beq.w	801154e <__kernel_rem_pio2+0x322>
 80113e6:	f1bb 0f02 	cmp.w	fp, #2
 80113ea:	f000 80ba 	beq.w	8011562 <__kernel_rem_pio2+0x336>
 80113ee:	9b00      	ldr	r3, [sp, #0]
 80113f0:	2b02      	cmp	r3, #2
 80113f2:	d14e      	bne.n	8011492 <__kernel_rem_pio2+0x266>
 80113f4:	4642      	mov	r2, r8
 80113f6:	464b      	mov	r3, r9
 80113f8:	2000      	movs	r0, #0
 80113fa:	4948      	ldr	r1, [pc, #288]	; (801151c <__kernel_rem_pio2+0x2f0>)
 80113fc:	f7ee fefa 	bl	80001f4 <__aeabi_dsub>
 8011400:	4680      	mov	r8, r0
 8011402:	4689      	mov	r9, r1
 8011404:	2c00      	cmp	r4, #0
 8011406:	d044      	beq.n	8011492 <__kernel_rem_pio2+0x266>
 8011408:	465a      	mov	r2, fp
 801140a:	2000      	movs	r0, #0
 801140c:	4943      	ldr	r1, [pc, #268]	; (801151c <__kernel_rem_pio2+0x2f0>)
 801140e:	f000 fbbb 	bl	8011b88 <scalbn>
 8011412:	4602      	mov	r2, r0
 8011414:	460b      	mov	r3, r1
 8011416:	4640      	mov	r0, r8
 8011418:	4649      	mov	r1, r9
 801141a:	f7ee feeb 	bl	80001f4 <__aeabi_dsub>
 801141e:	4680      	mov	r8, r0
 8011420:	4689      	mov	r9, r1
 8011422:	e036      	b.n	8011492 <__kernel_rem_pio2+0x266>
 8011424:	2200      	movs	r2, #0
 8011426:	4b3e      	ldr	r3, [pc, #248]	; (8011520 <__kernel_rem_pio2+0x2f4>)
 8011428:	4620      	mov	r0, r4
 801142a:	4629      	mov	r1, r5
 801142c:	f7ef f89a 	bl	8000564 <__aeabi_dmul>
 8011430:	f7ef fb48 	bl	8000ac4 <__aeabi_d2iz>
 8011434:	f7ef f82c 	bl	8000490 <__aeabi_i2d>
 8011438:	4602      	mov	r2, r0
 801143a:	460b      	mov	r3, r1
 801143c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011440:	2200      	movs	r2, #0
 8011442:	4b38      	ldr	r3, [pc, #224]	; (8011524 <__kernel_rem_pio2+0x2f8>)
 8011444:	f7ef f88e 	bl	8000564 <__aeabi_dmul>
 8011448:	4602      	mov	r2, r0
 801144a:	460b      	mov	r3, r1
 801144c:	4620      	mov	r0, r4
 801144e:	4629      	mov	r1, r5
 8011450:	f7ee fed0 	bl	80001f4 <__aeabi_dsub>
 8011454:	f7ef fb36 	bl	8000ac4 <__aeabi_d2iz>
 8011458:	9b00      	ldr	r3, [sp, #0]
 801145a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801145e:	f843 0b04 	str.w	r0, [r3], #4
 8011462:	9300      	str	r3, [sp, #0]
 8011464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011468:	e9d8 2300 	ldrd	r2, r3, [r8]
 801146c:	f7ee fec4 	bl	80001f8 <__adddf3>
 8011470:	4604      	mov	r4, r0
 8011472:	460d      	mov	r5, r1
 8011474:	e75f      	b.n	8011336 <__kernel_rem_pio2+0x10a>
 8011476:	d105      	bne.n	8011484 <__kernel_rem_pio2+0x258>
 8011478:	1e73      	subs	r3, r6, #1
 801147a:	aa0c      	add	r2, sp, #48	; 0x30
 801147c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011480:	15c3      	asrs	r3, r0, #23
 8011482:	e79b      	b.n	80113bc <__kernel_rem_pio2+0x190>
 8011484:	2200      	movs	r2, #0
 8011486:	4b28      	ldr	r3, [pc, #160]	; (8011528 <__kernel_rem_pio2+0x2fc>)
 8011488:	f7ef faf2 	bl	8000a70 <__aeabi_dcmpge>
 801148c:	2800      	cmp	r0, #0
 801148e:	d13e      	bne.n	801150e <__kernel_rem_pio2+0x2e2>
 8011490:	9000      	str	r0, [sp, #0]
 8011492:	2200      	movs	r2, #0
 8011494:	2300      	movs	r3, #0
 8011496:	4640      	mov	r0, r8
 8011498:	4649      	mov	r1, r9
 801149a:	f7ef facb 	bl	8000a34 <__aeabi_dcmpeq>
 801149e:	2800      	cmp	r0, #0
 80114a0:	f000 80b1 	beq.w	8011606 <__kernel_rem_pio2+0x3da>
 80114a4:	1e74      	subs	r4, r6, #1
 80114a6:	4623      	mov	r3, r4
 80114a8:	2200      	movs	r2, #0
 80114aa:	9902      	ldr	r1, [sp, #8]
 80114ac:	428b      	cmp	r3, r1
 80114ae:	da5f      	bge.n	8011570 <__kernel_rem_pio2+0x344>
 80114b0:	2a00      	cmp	r2, #0
 80114b2:	d074      	beq.n	801159e <__kernel_rem_pio2+0x372>
 80114b4:	ab0c      	add	r3, sp, #48	; 0x30
 80114b6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80114ba:	f1ab 0b18 	sub.w	fp, fp, #24
 80114be:	2b00      	cmp	r3, #0
 80114c0:	f000 809f 	beq.w	8011602 <__kernel_rem_pio2+0x3d6>
 80114c4:	465a      	mov	r2, fp
 80114c6:	2000      	movs	r0, #0
 80114c8:	4914      	ldr	r1, [pc, #80]	; (801151c <__kernel_rem_pio2+0x2f0>)
 80114ca:	f000 fb5d 	bl	8011b88 <scalbn>
 80114ce:	46a2      	mov	sl, r4
 80114d0:	4606      	mov	r6, r0
 80114d2:	460f      	mov	r7, r1
 80114d4:	f04f 0800 	mov.w	r8, #0
 80114d8:	ab70      	add	r3, sp, #448	; 0x1c0
 80114da:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8011520 <__kernel_rem_pio2+0x2f4>
 80114de:	00e5      	lsls	r5, r4, #3
 80114e0:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80114e4:	f1ba 0f00 	cmp.w	sl, #0
 80114e8:	f280 80c3 	bge.w	8011672 <__kernel_rem_pio2+0x446>
 80114ec:	4626      	mov	r6, r4
 80114ee:	2e00      	cmp	r6, #0
 80114f0:	f2c0 80f5 	blt.w	80116de <__kernel_rem_pio2+0x4b2>
 80114f4:	4b0d      	ldr	r3, [pc, #52]	; (801152c <__kernel_rem_pio2+0x300>)
 80114f6:	f04f 0a00 	mov.w	sl, #0
 80114fa:	9307      	str	r3, [sp, #28]
 80114fc:	ab70      	add	r3, sp, #448	; 0x1c0
 80114fe:	f04f 0b00 	mov.w	fp, #0
 8011502:	f04f 0800 	mov.w	r8, #0
 8011506:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 801150a:	1ba7      	subs	r7, r4, r6
 801150c:	e0db      	b.n	80116c6 <__kernel_rem_pio2+0x49a>
 801150e:	2302      	movs	r3, #2
 8011510:	9300      	str	r3, [sp, #0]
 8011512:	e757      	b.n	80113c4 <__kernel_rem_pio2+0x198>
 8011514:	08018678 	.word	0x08018678
 8011518:	40200000 	.word	0x40200000
 801151c:	3ff00000 	.word	0x3ff00000
 8011520:	3e700000 	.word	0x3e700000
 8011524:	41700000 	.word	0x41700000
 8011528:	3fe00000 	.word	0x3fe00000
 801152c:	08018638 	.word	0x08018638
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	b944      	cbnz	r4, 8011546 <__kernel_rem_pio2+0x31a>
 8011534:	b11b      	cbz	r3, 801153e <__kernel_rem_pio2+0x312>
 8011536:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801153a:	603b      	str	r3, [r7, #0]
 801153c:	2301      	movs	r3, #1
 801153e:	461c      	mov	r4, r3
 8011540:	3201      	adds	r2, #1
 8011542:	3704      	adds	r7, #4
 8011544:	e745      	b.n	80113d2 <__kernel_rem_pio2+0x1a6>
 8011546:	1acb      	subs	r3, r1, r3
 8011548:	603b      	str	r3, [r7, #0]
 801154a:	4623      	mov	r3, r4
 801154c:	e7f7      	b.n	801153e <__kernel_rem_pio2+0x312>
 801154e:	1e72      	subs	r2, r6, #1
 8011550:	ab0c      	add	r3, sp, #48	; 0x30
 8011552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011556:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801155a:	a90c      	add	r1, sp, #48	; 0x30
 801155c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011560:	e745      	b.n	80113ee <__kernel_rem_pio2+0x1c2>
 8011562:	1e72      	subs	r2, r6, #1
 8011564:	ab0c      	add	r3, sp, #48	; 0x30
 8011566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801156a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801156e:	e7f4      	b.n	801155a <__kernel_rem_pio2+0x32e>
 8011570:	a90c      	add	r1, sp, #48	; 0x30
 8011572:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011576:	3b01      	subs	r3, #1
 8011578:	430a      	orrs	r2, r1
 801157a:	e796      	b.n	80114aa <__kernel_rem_pio2+0x27e>
 801157c:	3401      	adds	r4, #1
 801157e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011582:	2a00      	cmp	r2, #0
 8011584:	d0fa      	beq.n	801157c <__kernel_rem_pio2+0x350>
 8011586:	9b08      	ldr	r3, [sp, #32]
 8011588:	f106 0801 	add.w	r8, r6, #1
 801158c:	18f5      	adds	r5, r6, r3
 801158e:	ab20      	add	r3, sp, #128	; 0x80
 8011590:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011594:	4434      	add	r4, r6
 8011596:	4544      	cmp	r4, r8
 8011598:	da04      	bge.n	80115a4 <__kernel_rem_pio2+0x378>
 801159a:	4626      	mov	r6, r4
 801159c:	e6bf      	b.n	801131e <__kernel_rem_pio2+0xf2>
 801159e:	2401      	movs	r4, #1
 80115a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115a2:	e7ec      	b.n	801157e <__kernel_rem_pio2+0x352>
 80115a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115a6:	f04f 0900 	mov.w	r9, #0
 80115aa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80115ae:	f7ee ff6f 	bl	8000490 <__aeabi_i2d>
 80115b2:	2600      	movs	r6, #0
 80115b4:	2700      	movs	r7, #0
 80115b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115b8:	e9c5 0100 	strd	r0, r1, [r5]
 80115bc:	3b08      	subs	r3, #8
 80115be:	9300      	str	r3, [sp, #0]
 80115c0:	9504      	str	r5, [sp, #16]
 80115c2:	9b07      	ldr	r3, [sp, #28]
 80115c4:	4599      	cmp	r9, r3
 80115c6:	dd05      	ble.n	80115d4 <__kernel_rem_pio2+0x3a8>
 80115c8:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80115cc:	f108 0801 	add.w	r8, r8, #1
 80115d0:	3508      	adds	r5, #8
 80115d2:	e7e0      	b.n	8011596 <__kernel_rem_pio2+0x36a>
 80115d4:	f8dd c010 	ldr.w	ip, [sp, #16]
 80115d8:	9900      	ldr	r1, [sp, #0]
 80115da:	f109 0901 	add.w	r9, r9, #1
 80115de:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80115e2:	9100      	str	r1, [sp, #0]
 80115e4:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80115e8:	f8cd c010 	str.w	ip, [sp, #16]
 80115ec:	f7ee ffba 	bl	8000564 <__aeabi_dmul>
 80115f0:	4602      	mov	r2, r0
 80115f2:	460b      	mov	r3, r1
 80115f4:	4630      	mov	r0, r6
 80115f6:	4639      	mov	r1, r7
 80115f8:	f7ee fdfe 	bl	80001f8 <__adddf3>
 80115fc:	4606      	mov	r6, r0
 80115fe:	460f      	mov	r7, r1
 8011600:	e7df      	b.n	80115c2 <__kernel_rem_pio2+0x396>
 8011602:	3c01      	subs	r4, #1
 8011604:	e756      	b.n	80114b4 <__kernel_rem_pio2+0x288>
 8011606:	f1cb 0200 	rsb	r2, fp, #0
 801160a:	4640      	mov	r0, r8
 801160c:	4649      	mov	r1, r9
 801160e:	f000 fabb 	bl	8011b88 <scalbn>
 8011612:	2200      	movs	r2, #0
 8011614:	4ba4      	ldr	r3, [pc, #656]	; (80118a8 <__kernel_rem_pio2+0x67c>)
 8011616:	4604      	mov	r4, r0
 8011618:	460d      	mov	r5, r1
 801161a:	f7ef fa29 	bl	8000a70 <__aeabi_dcmpge>
 801161e:	b1f8      	cbz	r0, 8011660 <__kernel_rem_pio2+0x434>
 8011620:	2200      	movs	r2, #0
 8011622:	4ba2      	ldr	r3, [pc, #648]	; (80118ac <__kernel_rem_pio2+0x680>)
 8011624:	4620      	mov	r0, r4
 8011626:	4629      	mov	r1, r5
 8011628:	f7ee ff9c 	bl	8000564 <__aeabi_dmul>
 801162c:	f7ef fa4a 	bl	8000ac4 <__aeabi_d2iz>
 8011630:	4607      	mov	r7, r0
 8011632:	f7ee ff2d 	bl	8000490 <__aeabi_i2d>
 8011636:	2200      	movs	r2, #0
 8011638:	4b9b      	ldr	r3, [pc, #620]	; (80118a8 <__kernel_rem_pio2+0x67c>)
 801163a:	f7ee ff93 	bl	8000564 <__aeabi_dmul>
 801163e:	460b      	mov	r3, r1
 8011640:	4602      	mov	r2, r0
 8011642:	4629      	mov	r1, r5
 8011644:	4620      	mov	r0, r4
 8011646:	f7ee fdd5 	bl	80001f4 <__aeabi_dsub>
 801164a:	f7ef fa3b 	bl	8000ac4 <__aeabi_d2iz>
 801164e:	1c74      	adds	r4, r6, #1
 8011650:	ab0c      	add	r3, sp, #48	; 0x30
 8011652:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8011656:	f10b 0b18 	add.w	fp, fp, #24
 801165a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 801165e:	e731      	b.n	80114c4 <__kernel_rem_pio2+0x298>
 8011660:	4620      	mov	r0, r4
 8011662:	4629      	mov	r1, r5
 8011664:	f7ef fa2e 	bl	8000ac4 <__aeabi_d2iz>
 8011668:	ab0c      	add	r3, sp, #48	; 0x30
 801166a:	4634      	mov	r4, r6
 801166c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8011670:	e728      	b.n	80114c4 <__kernel_rem_pio2+0x298>
 8011672:	ab0c      	add	r3, sp, #48	; 0x30
 8011674:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8011678:	f7ee ff0a 	bl	8000490 <__aeabi_i2d>
 801167c:	4632      	mov	r2, r6
 801167e:	463b      	mov	r3, r7
 8011680:	f7ee ff70 	bl	8000564 <__aeabi_dmul>
 8011684:	4642      	mov	r2, r8
 8011686:	e86b 0102 	strd	r0, r1, [fp], #-8
 801168a:	464b      	mov	r3, r9
 801168c:	4630      	mov	r0, r6
 801168e:	4639      	mov	r1, r7
 8011690:	f7ee ff68 	bl	8000564 <__aeabi_dmul>
 8011694:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011698:	4606      	mov	r6, r0
 801169a:	460f      	mov	r7, r1
 801169c:	e722      	b.n	80114e4 <__kernel_rem_pio2+0x2b8>
 801169e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80116a2:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80116a6:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80116aa:	f8cd c01c 	str.w	ip, [sp, #28]
 80116ae:	f7ee ff59 	bl	8000564 <__aeabi_dmul>
 80116b2:	4602      	mov	r2, r0
 80116b4:	460b      	mov	r3, r1
 80116b6:	4650      	mov	r0, sl
 80116b8:	4659      	mov	r1, fp
 80116ba:	f7ee fd9d 	bl	80001f8 <__adddf3>
 80116be:	4682      	mov	sl, r0
 80116c0:	468b      	mov	fp, r1
 80116c2:	f108 0801 	add.w	r8, r8, #1
 80116c6:	9b02      	ldr	r3, [sp, #8]
 80116c8:	4598      	cmp	r8, r3
 80116ca:	dc01      	bgt.n	80116d0 <__kernel_rem_pio2+0x4a4>
 80116cc:	45b8      	cmp	r8, r7
 80116ce:	dde6      	ble.n	801169e <__kernel_rem_pio2+0x472>
 80116d0:	ab48      	add	r3, sp, #288	; 0x120
 80116d2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80116d6:	e9c7 ab00 	strd	sl, fp, [r7]
 80116da:	3e01      	subs	r6, #1
 80116dc:	e707      	b.n	80114ee <__kernel_rem_pio2+0x2c2>
 80116de:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80116e0:	2b02      	cmp	r3, #2
 80116e2:	dc09      	bgt.n	80116f8 <__kernel_rem_pio2+0x4cc>
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	dc32      	bgt.n	801174e <__kernel_rem_pio2+0x522>
 80116e8:	d05a      	beq.n	80117a0 <__kernel_rem_pio2+0x574>
 80116ea:	9b04      	ldr	r3, [sp, #16]
 80116ec:	f003 0007 	and.w	r0, r3, #7
 80116f0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80116f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116f8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80116fa:	2b03      	cmp	r3, #3
 80116fc:	d1f5      	bne.n	80116ea <__kernel_rem_pio2+0x4be>
 80116fe:	ab48      	add	r3, sp, #288	; 0x120
 8011700:	441d      	add	r5, r3
 8011702:	46aa      	mov	sl, r5
 8011704:	46a3      	mov	fp, r4
 8011706:	f1bb 0f00 	cmp.w	fp, #0
 801170a:	dc76      	bgt.n	80117fa <__kernel_rem_pio2+0x5ce>
 801170c:	46aa      	mov	sl, r5
 801170e:	46a3      	mov	fp, r4
 8011710:	f1bb 0f01 	cmp.w	fp, #1
 8011714:	f300 8090 	bgt.w	8011838 <__kernel_rem_pio2+0x60c>
 8011718:	2700      	movs	r7, #0
 801171a:	463e      	mov	r6, r7
 801171c:	2c01      	cmp	r4, #1
 801171e:	f300 80aa 	bgt.w	8011876 <__kernel_rem_pio2+0x64a>
 8011722:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8011726:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 801172a:	9b00      	ldr	r3, [sp, #0]
 801172c:	2b00      	cmp	r3, #0
 801172e:	f040 80ac 	bne.w	801188a <__kernel_rem_pio2+0x65e>
 8011732:	4603      	mov	r3, r0
 8011734:	462a      	mov	r2, r5
 8011736:	9806      	ldr	r0, [sp, #24]
 8011738:	e9c0 2300 	strd	r2, r3, [r0]
 801173c:	4622      	mov	r2, r4
 801173e:	460b      	mov	r3, r1
 8011740:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011744:	463a      	mov	r2, r7
 8011746:	4633      	mov	r3, r6
 8011748:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801174c:	e7cd      	b.n	80116ea <__kernel_rem_pio2+0x4be>
 801174e:	2000      	movs	r0, #0
 8011750:	46a0      	mov	r8, r4
 8011752:	4601      	mov	r1, r0
 8011754:	ab48      	add	r3, sp, #288	; 0x120
 8011756:	441d      	add	r5, r3
 8011758:	f1b8 0f00 	cmp.w	r8, #0
 801175c:	da3a      	bge.n	80117d4 <__kernel_rem_pio2+0x5a8>
 801175e:	9b00      	ldr	r3, [sp, #0]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d03e      	beq.n	80117e2 <__kernel_rem_pio2+0x5b6>
 8011764:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8011768:	4602      	mov	r2, r0
 801176a:	462b      	mov	r3, r5
 801176c:	9d06      	ldr	r5, [sp, #24]
 801176e:	2601      	movs	r6, #1
 8011770:	e9c5 2300 	strd	r2, r3, [r5]
 8011774:	460b      	mov	r3, r1
 8011776:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801177a:	f7ee fd3b 	bl	80001f4 <__aeabi_dsub>
 801177e:	4684      	mov	ip, r0
 8011780:	460f      	mov	r7, r1
 8011782:	ad48      	add	r5, sp, #288	; 0x120
 8011784:	42b4      	cmp	r4, r6
 8011786:	f105 0508 	add.w	r5, r5, #8
 801178a:	da2c      	bge.n	80117e6 <__kernel_rem_pio2+0x5ba>
 801178c:	9b00      	ldr	r3, [sp, #0]
 801178e:	b10b      	cbz	r3, 8011794 <__kernel_rem_pio2+0x568>
 8011790:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8011794:	4662      	mov	r2, ip
 8011796:	463b      	mov	r3, r7
 8011798:	9906      	ldr	r1, [sp, #24]
 801179a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 801179e:	e7a4      	b.n	80116ea <__kernel_rem_pio2+0x4be>
 80117a0:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80117a2:	ab48      	add	r3, sp, #288	; 0x120
 80117a4:	4637      	mov	r7, r6
 80117a6:	441d      	add	r5, r3
 80117a8:	2c00      	cmp	r4, #0
 80117aa:	da09      	bge.n	80117c0 <__kernel_rem_pio2+0x594>
 80117ac:	9b00      	ldr	r3, [sp, #0]
 80117ae:	b10b      	cbz	r3, 80117b4 <__kernel_rem_pio2+0x588>
 80117b0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80117b4:	4632      	mov	r2, r6
 80117b6:	463b      	mov	r3, r7
 80117b8:	9906      	ldr	r1, [sp, #24]
 80117ba:	e9c1 2300 	strd	r2, r3, [r1]
 80117be:	e794      	b.n	80116ea <__kernel_rem_pio2+0x4be>
 80117c0:	4630      	mov	r0, r6
 80117c2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80117c6:	4639      	mov	r1, r7
 80117c8:	f7ee fd16 	bl	80001f8 <__adddf3>
 80117cc:	3c01      	subs	r4, #1
 80117ce:	4606      	mov	r6, r0
 80117d0:	460f      	mov	r7, r1
 80117d2:	e7e9      	b.n	80117a8 <__kernel_rem_pio2+0x57c>
 80117d4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80117d8:	f7ee fd0e 	bl	80001f8 <__adddf3>
 80117dc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80117e0:	e7ba      	b.n	8011758 <__kernel_rem_pio2+0x52c>
 80117e2:	460d      	mov	r5, r1
 80117e4:	e7c0      	b.n	8011768 <__kernel_rem_pio2+0x53c>
 80117e6:	4660      	mov	r0, ip
 80117e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80117ec:	4639      	mov	r1, r7
 80117ee:	f7ee fd03 	bl	80001f8 <__adddf3>
 80117f2:	3601      	adds	r6, #1
 80117f4:	4684      	mov	ip, r0
 80117f6:	460f      	mov	r7, r1
 80117f8:	e7c4      	b.n	8011784 <__kernel_rem_pio2+0x558>
 80117fa:	e9da 6700 	ldrd	r6, r7, [sl]
 80117fe:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8011802:	4632      	mov	r2, r6
 8011804:	463b      	mov	r3, r7
 8011806:	4640      	mov	r0, r8
 8011808:	4649      	mov	r1, r9
 801180a:	f7ee fcf5 	bl	80001f8 <__adddf3>
 801180e:	4602      	mov	r2, r0
 8011810:	460b      	mov	r3, r1
 8011812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011816:	4640      	mov	r0, r8
 8011818:	4649      	mov	r1, r9
 801181a:	f7ee fceb 	bl	80001f4 <__aeabi_dsub>
 801181e:	4632      	mov	r2, r6
 8011820:	463b      	mov	r3, r7
 8011822:	f7ee fce9 	bl	80001f8 <__adddf3>
 8011826:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801182a:	e86a 0102 	strd	r0, r1, [sl], #-8
 801182e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011832:	e9ca 2300 	strd	r2, r3, [sl]
 8011836:	e766      	b.n	8011706 <__kernel_rem_pio2+0x4da>
 8011838:	e9da 8900 	ldrd	r8, r9, [sl]
 801183c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8011840:	4642      	mov	r2, r8
 8011842:	464b      	mov	r3, r9
 8011844:	4630      	mov	r0, r6
 8011846:	4639      	mov	r1, r7
 8011848:	f7ee fcd6 	bl	80001f8 <__adddf3>
 801184c:	4602      	mov	r2, r0
 801184e:	460b      	mov	r3, r1
 8011850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011854:	4630      	mov	r0, r6
 8011856:	4639      	mov	r1, r7
 8011858:	f7ee fccc 	bl	80001f4 <__aeabi_dsub>
 801185c:	4642      	mov	r2, r8
 801185e:	464b      	mov	r3, r9
 8011860:	f7ee fcca 	bl	80001f8 <__adddf3>
 8011864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011868:	e86a 0102 	strd	r0, r1, [sl], #-8
 801186c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011870:	e9ca 2300 	strd	r2, r3, [sl]
 8011874:	e74c      	b.n	8011710 <__kernel_rem_pio2+0x4e4>
 8011876:	4638      	mov	r0, r7
 8011878:	e875 2302 	ldrd	r2, r3, [r5], #-8
 801187c:	4631      	mov	r1, r6
 801187e:	f7ee fcbb 	bl	80001f8 <__adddf3>
 8011882:	3c01      	subs	r4, #1
 8011884:	4607      	mov	r7, r0
 8011886:	460e      	mov	r6, r1
 8011888:	e748      	b.n	801171c <__kernel_rem_pio2+0x4f0>
 801188a:	9b06      	ldr	r3, [sp, #24]
 801188c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8011890:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8011894:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8011898:	e9c3 0401 	strd	r0, r4, [r3, #4]
 801189c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80118a0:	601d      	str	r5, [r3, #0]
 80118a2:	615e      	str	r6, [r3, #20]
 80118a4:	e721      	b.n	80116ea <__kernel_rem_pio2+0x4be>
 80118a6:	bf00      	nop
 80118a8:	41700000 	.word	0x41700000
 80118ac:	3e700000 	.word	0x3e700000

080118b0 <__kernel_sin>:
 80118b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118b4:	b086      	sub	sp, #24
 80118b6:	e9cd 2300 	strd	r2, r3, [sp]
 80118ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80118be:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80118c2:	4682      	mov	sl, r0
 80118c4:	460c      	mov	r4, r1
 80118c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80118c8:	da03      	bge.n	80118d2 <__kernel_sin+0x22>
 80118ca:	f7ef f8fb 	bl	8000ac4 <__aeabi_d2iz>
 80118ce:	2800      	cmp	r0, #0
 80118d0:	d050      	beq.n	8011974 <__kernel_sin+0xc4>
 80118d2:	4652      	mov	r2, sl
 80118d4:	4623      	mov	r3, r4
 80118d6:	4650      	mov	r0, sl
 80118d8:	4621      	mov	r1, r4
 80118da:	f7ee fe43 	bl	8000564 <__aeabi_dmul>
 80118de:	4606      	mov	r6, r0
 80118e0:	460f      	mov	r7, r1
 80118e2:	4602      	mov	r2, r0
 80118e4:	460b      	mov	r3, r1
 80118e6:	4650      	mov	r0, sl
 80118e8:	4621      	mov	r1, r4
 80118ea:	f7ee fe3b 	bl	8000564 <__aeabi_dmul>
 80118ee:	a33e      	add	r3, pc, #248	; (adr r3, 80119e8 <__kernel_sin+0x138>)
 80118f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f4:	4680      	mov	r8, r0
 80118f6:	4689      	mov	r9, r1
 80118f8:	4630      	mov	r0, r6
 80118fa:	4639      	mov	r1, r7
 80118fc:	f7ee fe32 	bl	8000564 <__aeabi_dmul>
 8011900:	a33b      	add	r3, pc, #236	; (adr r3, 80119f0 <__kernel_sin+0x140>)
 8011902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011906:	f7ee fc75 	bl	80001f4 <__aeabi_dsub>
 801190a:	4632      	mov	r2, r6
 801190c:	463b      	mov	r3, r7
 801190e:	f7ee fe29 	bl	8000564 <__aeabi_dmul>
 8011912:	a339      	add	r3, pc, #228	; (adr r3, 80119f8 <__kernel_sin+0x148>)
 8011914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011918:	f7ee fc6e 	bl	80001f8 <__adddf3>
 801191c:	4632      	mov	r2, r6
 801191e:	463b      	mov	r3, r7
 8011920:	f7ee fe20 	bl	8000564 <__aeabi_dmul>
 8011924:	a336      	add	r3, pc, #216	; (adr r3, 8011a00 <__kernel_sin+0x150>)
 8011926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801192a:	f7ee fc63 	bl	80001f4 <__aeabi_dsub>
 801192e:	4632      	mov	r2, r6
 8011930:	463b      	mov	r3, r7
 8011932:	f7ee fe17 	bl	8000564 <__aeabi_dmul>
 8011936:	a334      	add	r3, pc, #208	; (adr r3, 8011a08 <__kernel_sin+0x158>)
 8011938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801193c:	f7ee fc5c 	bl	80001f8 <__adddf3>
 8011940:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011944:	b9dd      	cbnz	r5, 801197e <__kernel_sin+0xce>
 8011946:	4602      	mov	r2, r0
 8011948:	460b      	mov	r3, r1
 801194a:	4630      	mov	r0, r6
 801194c:	4639      	mov	r1, r7
 801194e:	f7ee fe09 	bl	8000564 <__aeabi_dmul>
 8011952:	a32f      	add	r3, pc, #188	; (adr r3, 8011a10 <__kernel_sin+0x160>)
 8011954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011958:	f7ee fc4c 	bl	80001f4 <__aeabi_dsub>
 801195c:	4642      	mov	r2, r8
 801195e:	464b      	mov	r3, r9
 8011960:	f7ee fe00 	bl	8000564 <__aeabi_dmul>
 8011964:	4602      	mov	r2, r0
 8011966:	460b      	mov	r3, r1
 8011968:	4650      	mov	r0, sl
 801196a:	4621      	mov	r1, r4
 801196c:	f7ee fc44 	bl	80001f8 <__adddf3>
 8011970:	4682      	mov	sl, r0
 8011972:	460c      	mov	r4, r1
 8011974:	4650      	mov	r0, sl
 8011976:	4621      	mov	r1, r4
 8011978:	b006      	add	sp, #24
 801197a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801197e:	2200      	movs	r2, #0
 8011980:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011984:	4b24      	ldr	r3, [pc, #144]	; (8011a18 <__kernel_sin+0x168>)
 8011986:	f7ee fded 	bl	8000564 <__aeabi_dmul>
 801198a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801198e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011992:	4640      	mov	r0, r8
 8011994:	4649      	mov	r1, r9
 8011996:	f7ee fde5 	bl	8000564 <__aeabi_dmul>
 801199a:	4602      	mov	r2, r0
 801199c:	460b      	mov	r3, r1
 801199e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80119a2:	f7ee fc27 	bl	80001f4 <__aeabi_dsub>
 80119a6:	4632      	mov	r2, r6
 80119a8:	463b      	mov	r3, r7
 80119aa:	f7ee fddb 	bl	8000564 <__aeabi_dmul>
 80119ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80119b2:	f7ee fc1f 	bl	80001f4 <__aeabi_dsub>
 80119b6:	a316      	add	r3, pc, #88	; (adr r3, 8011a10 <__kernel_sin+0x160>)
 80119b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119bc:	4606      	mov	r6, r0
 80119be:	460f      	mov	r7, r1
 80119c0:	4640      	mov	r0, r8
 80119c2:	4649      	mov	r1, r9
 80119c4:	f7ee fdce 	bl	8000564 <__aeabi_dmul>
 80119c8:	4602      	mov	r2, r0
 80119ca:	460b      	mov	r3, r1
 80119cc:	4630      	mov	r0, r6
 80119ce:	4639      	mov	r1, r7
 80119d0:	f7ee fc12 	bl	80001f8 <__adddf3>
 80119d4:	4602      	mov	r2, r0
 80119d6:	460b      	mov	r3, r1
 80119d8:	4650      	mov	r0, sl
 80119da:	4621      	mov	r1, r4
 80119dc:	f7ee fc0a 	bl	80001f4 <__aeabi_dsub>
 80119e0:	e7c6      	b.n	8011970 <__kernel_sin+0xc0>
 80119e2:	bf00      	nop
 80119e4:	f3af 8000 	nop.w
 80119e8:	5acfd57c 	.word	0x5acfd57c
 80119ec:	3de5d93a 	.word	0x3de5d93a
 80119f0:	8a2b9ceb 	.word	0x8a2b9ceb
 80119f4:	3e5ae5e6 	.word	0x3e5ae5e6
 80119f8:	57b1fe7d 	.word	0x57b1fe7d
 80119fc:	3ec71de3 	.word	0x3ec71de3
 8011a00:	19c161d5 	.word	0x19c161d5
 8011a04:	3f2a01a0 	.word	0x3f2a01a0
 8011a08:	1110f8a6 	.word	0x1110f8a6
 8011a0c:	3f811111 	.word	0x3f811111
 8011a10:	55555549 	.word	0x55555549
 8011a14:	3fc55555 	.word	0x3fc55555
 8011a18:	3fe00000 	.word	0x3fe00000

08011a1c <with_errno>:
 8011a1c:	b570      	push	{r4, r5, r6, lr}
 8011a1e:	4604      	mov	r4, r0
 8011a20:	460d      	mov	r5, r1
 8011a22:	4616      	mov	r6, r2
 8011a24:	f000 f92e 	bl	8011c84 <__errno>
 8011a28:	4629      	mov	r1, r5
 8011a2a:	6006      	str	r6, [r0, #0]
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	bd70      	pop	{r4, r5, r6, pc}

08011a30 <xflow>:
 8011a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a32:	4615      	mov	r5, r2
 8011a34:	461c      	mov	r4, r3
 8011a36:	b180      	cbz	r0, 8011a5a <xflow+0x2a>
 8011a38:	4610      	mov	r0, r2
 8011a3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011a3e:	e9cd 0100 	strd	r0, r1, [sp]
 8011a42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a46:	4628      	mov	r0, r5
 8011a48:	4621      	mov	r1, r4
 8011a4a:	f7ee fd8b 	bl	8000564 <__aeabi_dmul>
 8011a4e:	2222      	movs	r2, #34	; 0x22
 8011a50:	b003      	add	sp, #12
 8011a52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a56:	f7ff bfe1 	b.w	8011a1c <with_errno>
 8011a5a:	4610      	mov	r0, r2
 8011a5c:	4619      	mov	r1, r3
 8011a5e:	e7ee      	b.n	8011a3e <xflow+0xe>

08011a60 <__math_uflow>:
 8011a60:	2200      	movs	r2, #0
 8011a62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011a66:	f7ff bfe3 	b.w	8011a30 <xflow>

08011a6a <__math_oflow>:
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011a70:	f7ff bfde 	b.w	8011a30 <xflow>

08011a74 <fabs>:
 8011a74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011a78:	4770      	bx	lr

08011a7a <finite>:
 8011a7a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8011a7e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011a82:	0fc0      	lsrs	r0, r0, #31
 8011a84:	4770      	bx	lr
	...

08011a88 <floor>:
 8011a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a8c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8011a90:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8011a94:	2e13      	cmp	r6, #19
 8011a96:	4602      	mov	r2, r0
 8011a98:	460b      	mov	r3, r1
 8011a9a:	4607      	mov	r7, r0
 8011a9c:	460c      	mov	r4, r1
 8011a9e:	4605      	mov	r5, r0
 8011aa0:	dc33      	bgt.n	8011b0a <floor+0x82>
 8011aa2:	2e00      	cmp	r6, #0
 8011aa4:	da14      	bge.n	8011ad0 <floor+0x48>
 8011aa6:	a334      	add	r3, pc, #208	; (adr r3, 8011b78 <floor+0xf0>)
 8011aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aac:	f7ee fba4 	bl	80001f8 <__adddf3>
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	f7ee ffe6 	bl	8000a84 <__aeabi_dcmpgt>
 8011ab8:	b138      	cbz	r0, 8011aca <floor+0x42>
 8011aba:	2c00      	cmp	r4, #0
 8011abc:	da58      	bge.n	8011b70 <floor+0xe8>
 8011abe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011ac2:	431d      	orrs	r5, r3
 8011ac4:	d001      	beq.n	8011aca <floor+0x42>
 8011ac6:	2500      	movs	r5, #0
 8011ac8:	4c2d      	ldr	r4, [pc, #180]	; (8011b80 <floor+0xf8>)
 8011aca:	4623      	mov	r3, r4
 8011acc:	462f      	mov	r7, r5
 8011ace:	e025      	b.n	8011b1c <floor+0x94>
 8011ad0:	4a2c      	ldr	r2, [pc, #176]	; (8011b84 <floor+0xfc>)
 8011ad2:	fa42 f806 	asr.w	r8, r2, r6
 8011ad6:	ea01 0208 	and.w	r2, r1, r8
 8011ada:	4302      	orrs	r2, r0
 8011adc:	d01e      	beq.n	8011b1c <floor+0x94>
 8011ade:	a326      	add	r3, pc, #152	; (adr r3, 8011b78 <floor+0xf0>)
 8011ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae4:	f7ee fb88 	bl	80001f8 <__adddf3>
 8011ae8:	2200      	movs	r2, #0
 8011aea:	2300      	movs	r3, #0
 8011aec:	f7ee ffca 	bl	8000a84 <__aeabi_dcmpgt>
 8011af0:	2800      	cmp	r0, #0
 8011af2:	d0ea      	beq.n	8011aca <floor+0x42>
 8011af4:	2c00      	cmp	r4, #0
 8011af6:	bfbe      	ittt	lt
 8011af8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011afc:	fa43 f606 	asrlt.w	r6, r3, r6
 8011b00:	19a4      	addlt	r4, r4, r6
 8011b02:	2500      	movs	r5, #0
 8011b04:	ea24 0408 	bic.w	r4, r4, r8
 8011b08:	e7df      	b.n	8011aca <floor+0x42>
 8011b0a:	2e33      	cmp	r6, #51	; 0x33
 8011b0c:	dd0a      	ble.n	8011b24 <floor+0x9c>
 8011b0e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011b12:	d103      	bne.n	8011b1c <floor+0x94>
 8011b14:	f7ee fb70 	bl	80001f8 <__adddf3>
 8011b18:	4607      	mov	r7, r0
 8011b1a:	460b      	mov	r3, r1
 8011b1c:	4638      	mov	r0, r7
 8011b1e:	4619      	mov	r1, r3
 8011b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b28:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8011b2c:	fa22 f808 	lsr.w	r8, r2, r8
 8011b30:	ea18 0f00 	tst.w	r8, r0
 8011b34:	d0f2      	beq.n	8011b1c <floor+0x94>
 8011b36:	a310      	add	r3, pc, #64	; (adr r3, 8011b78 <floor+0xf0>)
 8011b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b3c:	f7ee fb5c 	bl	80001f8 <__adddf3>
 8011b40:	2200      	movs	r2, #0
 8011b42:	2300      	movs	r3, #0
 8011b44:	f7ee ff9e 	bl	8000a84 <__aeabi_dcmpgt>
 8011b48:	2800      	cmp	r0, #0
 8011b4a:	d0be      	beq.n	8011aca <floor+0x42>
 8011b4c:	2c00      	cmp	r4, #0
 8011b4e:	da02      	bge.n	8011b56 <floor+0xce>
 8011b50:	2e14      	cmp	r6, #20
 8011b52:	d103      	bne.n	8011b5c <floor+0xd4>
 8011b54:	3401      	adds	r4, #1
 8011b56:	ea25 0508 	bic.w	r5, r5, r8
 8011b5a:	e7b6      	b.n	8011aca <floor+0x42>
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011b62:	fa03 f606 	lsl.w	r6, r3, r6
 8011b66:	4435      	add	r5, r6
 8011b68:	42bd      	cmp	r5, r7
 8011b6a:	bf38      	it	cc
 8011b6c:	18e4      	addcc	r4, r4, r3
 8011b6e:	e7f2      	b.n	8011b56 <floor+0xce>
 8011b70:	2500      	movs	r5, #0
 8011b72:	462c      	mov	r4, r5
 8011b74:	e7a9      	b.n	8011aca <floor+0x42>
 8011b76:	bf00      	nop
 8011b78:	8800759c 	.word	0x8800759c
 8011b7c:	7e37e43c 	.word	0x7e37e43c
 8011b80:	bff00000 	.word	0xbff00000
 8011b84:	000fffff 	.word	0x000fffff

08011b88 <scalbn>:
 8011b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b8a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8011b8e:	4604      	mov	r4, r0
 8011b90:	460d      	mov	r5, r1
 8011b92:	4617      	mov	r7, r2
 8011b94:	460b      	mov	r3, r1
 8011b96:	b996      	cbnz	r6, 8011bbe <scalbn+0x36>
 8011b98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011b9c:	4303      	orrs	r3, r0
 8011b9e:	d039      	beq.n	8011c14 <scalbn+0x8c>
 8011ba0:	4b33      	ldr	r3, [pc, #204]	; (8011c70 <scalbn+0xe8>)
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	f7ee fcde 	bl	8000564 <__aeabi_dmul>
 8011ba8:	4b32      	ldr	r3, [pc, #200]	; (8011c74 <scalbn+0xec>)
 8011baa:	4604      	mov	r4, r0
 8011bac:	429f      	cmp	r7, r3
 8011bae:	460d      	mov	r5, r1
 8011bb0:	da0f      	bge.n	8011bd2 <scalbn+0x4a>
 8011bb2:	a32b      	add	r3, pc, #172	; (adr r3, 8011c60 <scalbn+0xd8>)
 8011bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb8:	f7ee fcd4 	bl	8000564 <__aeabi_dmul>
 8011bbc:	e006      	b.n	8011bcc <scalbn+0x44>
 8011bbe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011bc2:	4296      	cmp	r6, r2
 8011bc4:	d10a      	bne.n	8011bdc <scalbn+0x54>
 8011bc6:	4602      	mov	r2, r0
 8011bc8:	f7ee fb16 	bl	80001f8 <__adddf3>
 8011bcc:	4604      	mov	r4, r0
 8011bce:	460d      	mov	r5, r1
 8011bd0:	e020      	b.n	8011c14 <scalbn+0x8c>
 8011bd2:	460b      	mov	r3, r1
 8011bd4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011bd8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8011bdc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8011be0:	19b9      	adds	r1, r7, r6
 8011be2:	4291      	cmp	r1, r2
 8011be4:	dd0e      	ble.n	8011c04 <scalbn+0x7c>
 8011be6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8011bea:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8011bee:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8011bf2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8011bf6:	4820      	ldr	r0, [pc, #128]	; (8011c78 <scalbn+0xf0>)
 8011bf8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8011bfc:	a31a      	add	r3, pc, #104	; (adr r3, 8011c68 <scalbn+0xe0>)
 8011bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c02:	e7d9      	b.n	8011bb8 <scalbn+0x30>
 8011c04:	2900      	cmp	r1, #0
 8011c06:	dd08      	ble.n	8011c1a <scalbn+0x92>
 8011c08:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011c0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011c10:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8011c14:	4620      	mov	r0, r4
 8011c16:	4629      	mov	r1, r5
 8011c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c1a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8011c1e:	da12      	bge.n	8011c46 <scalbn+0xbe>
 8011c20:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011c24:	429f      	cmp	r7, r3
 8011c26:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8011c2a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8011c2e:	dcdc      	bgt.n	8011bea <scalbn+0x62>
 8011c30:	a30b      	add	r3, pc, #44	; (adr r3, 8011c60 <scalbn+0xd8>)
 8011c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c36:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8011c3a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8011c3e:	480f      	ldr	r0, [pc, #60]	; (8011c7c <scalbn+0xf4>)
 8011c40:	f041 011f 	orr.w	r1, r1, #31
 8011c44:	e7b8      	b.n	8011bb8 <scalbn+0x30>
 8011c46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011c4a:	3136      	adds	r1, #54	; 0x36
 8011c4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011c50:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8011c54:	4620      	mov	r0, r4
 8011c56:	4629      	mov	r1, r5
 8011c58:	2200      	movs	r2, #0
 8011c5a:	4b09      	ldr	r3, [pc, #36]	; (8011c80 <scalbn+0xf8>)
 8011c5c:	e7ac      	b.n	8011bb8 <scalbn+0x30>
 8011c5e:	bf00      	nop
 8011c60:	c2f8f359 	.word	0xc2f8f359
 8011c64:	01a56e1f 	.word	0x01a56e1f
 8011c68:	8800759c 	.word	0x8800759c
 8011c6c:	7e37e43c 	.word	0x7e37e43c
 8011c70:	43500000 	.word	0x43500000
 8011c74:	ffff3cb0 	.word	0xffff3cb0
 8011c78:	8800759c 	.word	0x8800759c
 8011c7c:	c2f8f359 	.word	0xc2f8f359
 8011c80:	3c900000 	.word	0x3c900000

08011c84 <__errno>:
 8011c84:	4b01      	ldr	r3, [pc, #4]	; (8011c8c <__errno+0x8>)
 8011c86:	6818      	ldr	r0, [r3, #0]
 8011c88:	4770      	bx	lr
 8011c8a:	bf00      	nop
 8011c8c:	20000038 	.word	0x20000038

08011c90 <__libc_init_array>:
 8011c90:	b570      	push	{r4, r5, r6, lr}
 8011c92:	2600      	movs	r6, #0
 8011c94:	4d0c      	ldr	r5, [pc, #48]	; (8011cc8 <__libc_init_array+0x38>)
 8011c96:	4c0d      	ldr	r4, [pc, #52]	; (8011ccc <__libc_init_array+0x3c>)
 8011c98:	1b64      	subs	r4, r4, r5
 8011c9a:	10a4      	asrs	r4, r4, #2
 8011c9c:	42a6      	cmp	r6, r4
 8011c9e:	d109      	bne.n	8011cb4 <__libc_init_array+0x24>
 8011ca0:	f004 fc7e 	bl	80165a0 <_init>
 8011ca4:	2600      	movs	r6, #0
 8011ca6:	4d0a      	ldr	r5, [pc, #40]	; (8011cd0 <__libc_init_array+0x40>)
 8011ca8:	4c0a      	ldr	r4, [pc, #40]	; (8011cd4 <__libc_init_array+0x44>)
 8011caa:	1b64      	subs	r4, r4, r5
 8011cac:	10a4      	asrs	r4, r4, #2
 8011cae:	42a6      	cmp	r6, r4
 8011cb0:	d105      	bne.n	8011cbe <__libc_init_array+0x2e>
 8011cb2:	bd70      	pop	{r4, r5, r6, pc}
 8011cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cb8:	4798      	blx	r3
 8011cba:	3601      	adds	r6, #1
 8011cbc:	e7ee      	b.n	8011c9c <__libc_init_array+0xc>
 8011cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cc2:	4798      	blx	r3
 8011cc4:	3601      	adds	r6, #1
 8011cc6:	e7f2      	b.n	8011cae <__libc_init_array+0x1e>
 8011cc8:	08018b3c 	.word	0x08018b3c
 8011ccc:	08018b3c 	.word	0x08018b3c
 8011cd0:	08018b3c 	.word	0x08018b3c
 8011cd4:	08018b40 	.word	0x08018b40

08011cd8 <memcmp>:
 8011cd8:	b510      	push	{r4, lr}
 8011cda:	3901      	subs	r1, #1
 8011cdc:	4402      	add	r2, r0
 8011cde:	4290      	cmp	r0, r2
 8011ce0:	d101      	bne.n	8011ce6 <memcmp+0xe>
 8011ce2:	2000      	movs	r0, #0
 8011ce4:	e005      	b.n	8011cf2 <memcmp+0x1a>
 8011ce6:	7803      	ldrb	r3, [r0, #0]
 8011ce8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011cec:	42a3      	cmp	r3, r4
 8011cee:	d001      	beq.n	8011cf4 <memcmp+0x1c>
 8011cf0:	1b18      	subs	r0, r3, r4
 8011cf2:	bd10      	pop	{r4, pc}
 8011cf4:	3001      	adds	r0, #1
 8011cf6:	e7f2      	b.n	8011cde <memcmp+0x6>

08011cf8 <memcpy>:
 8011cf8:	440a      	add	r2, r1
 8011cfa:	4291      	cmp	r1, r2
 8011cfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011d00:	d100      	bne.n	8011d04 <memcpy+0xc>
 8011d02:	4770      	bx	lr
 8011d04:	b510      	push	{r4, lr}
 8011d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d0a:	4291      	cmp	r1, r2
 8011d0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d10:	d1f9      	bne.n	8011d06 <memcpy+0xe>
 8011d12:	bd10      	pop	{r4, pc}

08011d14 <memset>:
 8011d14:	4603      	mov	r3, r0
 8011d16:	4402      	add	r2, r0
 8011d18:	4293      	cmp	r3, r2
 8011d1a:	d100      	bne.n	8011d1e <memset+0xa>
 8011d1c:	4770      	bx	lr
 8011d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8011d22:	e7f9      	b.n	8011d18 <memset+0x4>

08011d24 <__cvt>:
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d2a:	461f      	mov	r7, r3
 8011d2c:	bfbb      	ittet	lt
 8011d2e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8011d32:	461f      	movlt	r7, r3
 8011d34:	2300      	movge	r3, #0
 8011d36:	232d      	movlt	r3, #45	; 0x2d
 8011d38:	b088      	sub	sp, #32
 8011d3a:	4614      	mov	r4, r2
 8011d3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011d3e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011d40:	7013      	strb	r3, [r2, #0]
 8011d42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011d44:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8011d48:	f023 0820 	bic.w	r8, r3, #32
 8011d4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011d50:	d005      	beq.n	8011d5e <__cvt+0x3a>
 8011d52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011d56:	d100      	bne.n	8011d5a <__cvt+0x36>
 8011d58:	3501      	adds	r5, #1
 8011d5a:	2302      	movs	r3, #2
 8011d5c:	e000      	b.n	8011d60 <__cvt+0x3c>
 8011d5e:	2303      	movs	r3, #3
 8011d60:	aa07      	add	r2, sp, #28
 8011d62:	9204      	str	r2, [sp, #16]
 8011d64:	aa06      	add	r2, sp, #24
 8011d66:	e9cd a202 	strd	sl, r2, [sp, #8]
 8011d6a:	e9cd 3500 	strd	r3, r5, [sp]
 8011d6e:	4622      	mov	r2, r4
 8011d70:	463b      	mov	r3, r7
 8011d72:	f001 fdb1 	bl	80138d8 <_dtoa_r>
 8011d76:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011d7a:	4606      	mov	r6, r0
 8011d7c:	d102      	bne.n	8011d84 <__cvt+0x60>
 8011d7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011d80:	07db      	lsls	r3, r3, #31
 8011d82:	d522      	bpl.n	8011dca <__cvt+0xa6>
 8011d84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011d88:	eb06 0905 	add.w	r9, r6, r5
 8011d8c:	d110      	bne.n	8011db0 <__cvt+0x8c>
 8011d8e:	7833      	ldrb	r3, [r6, #0]
 8011d90:	2b30      	cmp	r3, #48	; 0x30
 8011d92:	d10a      	bne.n	8011daa <__cvt+0x86>
 8011d94:	2200      	movs	r2, #0
 8011d96:	2300      	movs	r3, #0
 8011d98:	4620      	mov	r0, r4
 8011d9a:	4639      	mov	r1, r7
 8011d9c:	f7ee fe4a 	bl	8000a34 <__aeabi_dcmpeq>
 8011da0:	b918      	cbnz	r0, 8011daa <__cvt+0x86>
 8011da2:	f1c5 0501 	rsb	r5, r5, #1
 8011da6:	f8ca 5000 	str.w	r5, [sl]
 8011daa:	f8da 3000 	ldr.w	r3, [sl]
 8011dae:	4499      	add	r9, r3
 8011db0:	2200      	movs	r2, #0
 8011db2:	2300      	movs	r3, #0
 8011db4:	4620      	mov	r0, r4
 8011db6:	4639      	mov	r1, r7
 8011db8:	f7ee fe3c 	bl	8000a34 <__aeabi_dcmpeq>
 8011dbc:	b108      	cbz	r0, 8011dc2 <__cvt+0x9e>
 8011dbe:	f8cd 901c 	str.w	r9, [sp, #28]
 8011dc2:	2230      	movs	r2, #48	; 0x30
 8011dc4:	9b07      	ldr	r3, [sp, #28]
 8011dc6:	454b      	cmp	r3, r9
 8011dc8:	d307      	bcc.n	8011dda <__cvt+0xb6>
 8011dca:	4630      	mov	r0, r6
 8011dcc:	9b07      	ldr	r3, [sp, #28]
 8011dce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011dd0:	1b9b      	subs	r3, r3, r6
 8011dd2:	6013      	str	r3, [r2, #0]
 8011dd4:	b008      	add	sp, #32
 8011dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dda:	1c59      	adds	r1, r3, #1
 8011ddc:	9107      	str	r1, [sp, #28]
 8011dde:	701a      	strb	r2, [r3, #0]
 8011de0:	e7f0      	b.n	8011dc4 <__cvt+0xa0>

08011de2 <__exponent>:
 8011de2:	4603      	mov	r3, r0
 8011de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011de6:	2900      	cmp	r1, #0
 8011de8:	f803 2b02 	strb.w	r2, [r3], #2
 8011dec:	bfb6      	itet	lt
 8011dee:	222d      	movlt	r2, #45	; 0x2d
 8011df0:	222b      	movge	r2, #43	; 0x2b
 8011df2:	4249      	neglt	r1, r1
 8011df4:	2909      	cmp	r1, #9
 8011df6:	7042      	strb	r2, [r0, #1]
 8011df8:	dd2b      	ble.n	8011e52 <__exponent+0x70>
 8011dfa:	f10d 0407 	add.w	r4, sp, #7
 8011dfe:	46a4      	mov	ip, r4
 8011e00:	270a      	movs	r7, #10
 8011e02:	fb91 f6f7 	sdiv	r6, r1, r7
 8011e06:	460a      	mov	r2, r1
 8011e08:	46a6      	mov	lr, r4
 8011e0a:	fb07 1516 	mls	r5, r7, r6, r1
 8011e0e:	2a63      	cmp	r2, #99	; 0x63
 8011e10:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8011e14:	4631      	mov	r1, r6
 8011e16:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011e1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011e1e:	dcf0      	bgt.n	8011e02 <__exponent+0x20>
 8011e20:	3130      	adds	r1, #48	; 0x30
 8011e22:	f1ae 0502 	sub.w	r5, lr, #2
 8011e26:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011e2a:	4629      	mov	r1, r5
 8011e2c:	1c44      	adds	r4, r0, #1
 8011e2e:	4561      	cmp	r1, ip
 8011e30:	d30a      	bcc.n	8011e48 <__exponent+0x66>
 8011e32:	f10d 0209 	add.w	r2, sp, #9
 8011e36:	eba2 020e 	sub.w	r2, r2, lr
 8011e3a:	4565      	cmp	r5, ip
 8011e3c:	bf88      	it	hi
 8011e3e:	2200      	movhi	r2, #0
 8011e40:	4413      	add	r3, r2
 8011e42:	1a18      	subs	r0, r3, r0
 8011e44:	b003      	add	sp, #12
 8011e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e4c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011e50:	e7ed      	b.n	8011e2e <__exponent+0x4c>
 8011e52:	2330      	movs	r3, #48	; 0x30
 8011e54:	3130      	adds	r1, #48	; 0x30
 8011e56:	7083      	strb	r3, [r0, #2]
 8011e58:	70c1      	strb	r1, [r0, #3]
 8011e5a:	1d03      	adds	r3, r0, #4
 8011e5c:	e7f1      	b.n	8011e42 <__exponent+0x60>
	...

08011e60 <_printf_float>:
 8011e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e64:	b091      	sub	sp, #68	; 0x44
 8011e66:	460c      	mov	r4, r1
 8011e68:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8011e6c:	4616      	mov	r6, r2
 8011e6e:	461f      	mov	r7, r3
 8011e70:	4605      	mov	r5, r0
 8011e72:	f002 ff7b 	bl	8014d6c <_localeconv_r>
 8011e76:	6803      	ldr	r3, [r0, #0]
 8011e78:	4618      	mov	r0, r3
 8011e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8011e7c:	f7ee f9ae 	bl	80001dc <strlen>
 8011e80:	2300      	movs	r3, #0
 8011e82:	930e      	str	r3, [sp, #56]	; 0x38
 8011e84:	f8d8 3000 	ldr.w	r3, [r8]
 8011e88:	900a      	str	r0, [sp, #40]	; 0x28
 8011e8a:	3307      	adds	r3, #7
 8011e8c:	f023 0307 	bic.w	r3, r3, #7
 8011e90:	f103 0208 	add.w	r2, r3, #8
 8011e94:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011e98:	f8d4 b000 	ldr.w	fp, [r4]
 8011e9c:	f8c8 2000 	str.w	r2, [r8]
 8011ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011ea8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8011eac:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8011eb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8011eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011eb6:	4640      	mov	r0, r8
 8011eb8:	4b9c      	ldr	r3, [pc, #624]	; (801212c <_printf_float+0x2cc>)
 8011eba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011ebc:	f7ee fdec 	bl	8000a98 <__aeabi_dcmpun>
 8011ec0:	bb70      	cbnz	r0, 8011f20 <_printf_float+0xc0>
 8011ec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011ec6:	4640      	mov	r0, r8
 8011ec8:	4b98      	ldr	r3, [pc, #608]	; (801212c <_printf_float+0x2cc>)
 8011eca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011ecc:	f7ee fdc6 	bl	8000a5c <__aeabi_dcmple>
 8011ed0:	bb30      	cbnz	r0, 8011f20 <_printf_float+0xc0>
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	4640      	mov	r0, r8
 8011ed8:	4651      	mov	r1, sl
 8011eda:	f7ee fdb5 	bl	8000a48 <__aeabi_dcmplt>
 8011ede:	b110      	cbz	r0, 8011ee6 <_printf_float+0x86>
 8011ee0:	232d      	movs	r3, #45	; 0x2d
 8011ee2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ee6:	4b92      	ldr	r3, [pc, #584]	; (8012130 <_printf_float+0x2d0>)
 8011ee8:	4892      	ldr	r0, [pc, #584]	; (8012134 <_printf_float+0x2d4>)
 8011eea:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011eee:	bf94      	ite	ls
 8011ef0:	4698      	movls	r8, r3
 8011ef2:	4680      	movhi	r8, r0
 8011ef4:	2303      	movs	r3, #3
 8011ef6:	f04f 0a00 	mov.w	sl, #0
 8011efa:	6123      	str	r3, [r4, #16]
 8011efc:	f02b 0304 	bic.w	r3, fp, #4
 8011f00:	6023      	str	r3, [r4, #0]
 8011f02:	4633      	mov	r3, r6
 8011f04:	4621      	mov	r1, r4
 8011f06:	4628      	mov	r0, r5
 8011f08:	9700      	str	r7, [sp, #0]
 8011f0a:	aa0f      	add	r2, sp, #60	; 0x3c
 8011f0c:	f000 f9d4 	bl	80122b8 <_printf_common>
 8011f10:	3001      	adds	r0, #1
 8011f12:	f040 8090 	bne.w	8012036 <_printf_float+0x1d6>
 8011f16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f1a:	b011      	add	sp, #68	; 0x44
 8011f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f20:	4642      	mov	r2, r8
 8011f22:	4653      	mov	r3, sl
 8011f24:	4640      	mov	r0, r8
 8011f26:	4651      	mov	r1, sl
 8011f28:	f7ee fdb6 	bl	8000a98 <__aeabi_dcmpun>
 8011f2c:	b148      	cbz	r0, 8011f42 <_printf_float+0xe2>
 8011f2e:	f1ba 0f00 	cmp.w	sl, #0
 8011f32:	bfb8      	it	lt
 8011f34:	232d      	movlt	r3, #45	; 0x2d
 8011f36:	4880      	ldr	r0, [pc, #512]	; (8012138 <_printf_float+0x2d8>)
 8011f38:	bfb8      	it	lt
 8011f3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011f3e:	4b7f      	ldr	r3, [pc, #508]	; (801213c <_printf_float+0x2dc>)
 8011f40:	e7d3      	b.n	8011eea <_printf_float+0x8a>
 8011f42:	6863      	ldr	r3, [r4, #4]
 8011f44:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011f48:	1c5a      	adds	r2, r3, #1
 8011f4a:	d142      	bne.n	8011fd2 <_printf_float+0x172>
 8011f4c:	2306      	movs	r3, #6
 8011f4e:	6063      	str	r3, [r4, #4]
 8011f50:	2200      	movs	r2, #0
 8011f52:	9206      	str	r2, [sp, #24]
 8011f54:	aa0e      	add	r2, sp, #56	; 0x38
 8011f56:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8011f5a:	aa0d      	add	r2, sp, #52	; 0x34
 8011f5c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8011f60:	9203      	str	r2, [sp, #12]
 8011f62:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8011f66:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011f6a:	6023      	str	r3, [r4, #0]
 8011f6c:	6863      	ldr	r3, [r4, #4]
 8011f6e:	4642      	mov	r2, r8
 8011f70:	9300      	str	r3, [sp, #0]
 8011f72:	4628      	mov	r0, r5
 8011f74:	4653      	mov	r3, sl
 8011f76:	910b      	str	r1, [sp, #44]	; 0x2c
 8011f78:	f7ff fed4 	bl	8011d24 <__cvt>
 8011f7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011f7e:	4680      	mov	r8, r0
 8011f80:	2947      	cmp	r1, #71	; 0x47
 8011f82:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011f84:	d108      	bne.n	8011f98 <_printf_float+0x138>
 8011f86:	1cc8      	adds	r0, r1, #3
 8011f88:	db02      	blt.n	8011f90 <_printf_float+0x130>
 8011f8a:	6863      	ldr	r3, [r4, #4]
 8011f8c:	4299      	cmp	r1, r3
 8011f8e:	dd40      	ble.n	8012012 <_printf_float+0x1b2>
 8011f90:	f1a9 0902 	sub.w	r9, r9, #2
 8011f94:	fa5f f989 	uxtb.w	r9, r9
 8011f98:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011f9c:	d81f      	bhi.n	8011fde <_printf_float+0x17e>
 8011f9e:	464a      	mov	r2, r9
 8011fa0:	3901      	subs	r1, #1
 8011fa2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011fa6:	910d      	str	r1, [sp, #52]	; 0x34
 8011fa8:	f7ff ff1b 	bl	8011de2 <__exponent>
 8011fac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011fae:	4682      	mov	sl, r0
 8011fb0:	1813      	adds	r3, r2, r0
 8011fb2:	2a01      	cmp	r2, #1
 8011fb4:	6123      	str	r3, [r4, #16]
 8011fb6:	dc02      	bgt.n	8011fbe <_printf_float+0x15e>
 8011fb8:	6822      	ldr	r2, [r4, #0]
 8011fba:	07d2      	lsls	r2, r2, #31
 8011fbc:	d501      	bpl.n	8011fc2 <_printf_float+0x162>
 8011fbe:	3301      	adds	r3, #1
 8011fc0:	6123      	str	r3, [r4, #16]
 8011fc2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d09b      	beq.n	8011f02 <_printf_float+0xa2>
 8011fca:	232d      	movs	r3, #45	; 0x2d
 8011fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fd0:	e797      	b.n	8011f02 <_printf_float+0xa2>
 8011fd2:	2947      	cmp	r1, #71	; 0x47
 8011fd4:	d1bc      	bne.n	8011f50 <_printf_float+0xf0>
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d1ba      	bne.n	8011f50 <_printf_float+0xf0>
 8011fda:	2301      	movs	r3, #1
 8011fdc:	e7b7      	b.n	8011f4e <_printf_float+0xee>
 8011fde:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011fe2:	d118      	bne.n	8012016 <_printf_float+0x1b6>
 8011fe4:	2900      	cmp	r1, #0
 8011fe6:	6863      	ldr	r3, [r4, #4]
 8011fe8:	dd0b      	ble.n	8012002 <_printf_float+0x1a2>
 8011fea:	6121      	str	r1, [r4, #16]
 8011fec:	b913      	cbnz	r3, 8011ff4 <_printf_float+0x194>
 8011fee:	6822      	ldr	r2, [r4, #0]
 8011ff0:	07d0      	lsls	r0, r2, #31
 8011ff2:	d502      	bpl.n	8011ffa <_printf_float+0x19a>
 8011ff4:	3301      	adds	r3, #1
 8011ff6:	440b      	add	r3, r1
 8011ff8:	6123      	str	r3, [r4, #16]
 8011ffa:	f04f 0a00 	mov.w	sl, #0
 8011ffe:	65a1      	str	r1, [r4, #88]	; 0x58
 8012000:	e7df      	b.n	8011fc2 <_printf_float+0x162>
 8012002:	b913      	cbnz	r3, 801200a <_printf_float+0x1aa>
 8012004:	6822      	ldr	r2, [r4, #0]
 8012006:	07d2      	lsls	r2, r2, #31
 8012008:	d501      	bpl.n	801200e <_printf_float+0x1ae>
 801200a:	3302      	adds	r3, #2
 801200c:	e7f4      	b.n	8011ff8 <_printf_float+0x198>
 801200e:	2301      	movs	r3, #1
 8012010:	e7f2      	b.n	8011ff8 <_printf_float+0x198>
 8012012:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012018:	4299      	cmp	r1, r3
 801201a:	db05      	blt.n	8012028 <_printf_float+0x1c8>
 801201c:	6823      	ldr	r3, [r4, #0]
 801201e:	6121      	str	r1, [r4, #16]
 8012020:	07d8      	lsls	r0, r3, #31
 8012022:	d5ea      	bpl.n	8011ffa <_printf_float+0x19a>
 8012024:	1c4b      	adds	r3, r1, #1
 8012026:	e7e7      	b.n	8011ff8 <_printf_float+0x198>
 8012028:	2900      	cmp	r1, #0
 801202a:	bfcc      	ite	gt
 801202c:	2201      	movgt	r2, #1
 801202e:	f1c1 0202 	rsble	r2, r1, #2
 8012032:	4413      	add	r3, r2
 8012034:	e7e0      	b.n	8011ff8 <_printf_float+0x198>
 8012036:	6823      	ldr	r3, [r4, #0]
 8012038:	055a      	lsls	r2, r3, #21
 801203a:	d407      	bmi.n	801204c <_printf_float+0x1ec>
 801203c:	6923      	ldr	r3, [r4, #16]
 801203e:	4642      	mov	r2, r8
 8012040:	4631      	mov	r1, r6
 8012042:	4628      	mov	r0, r5
 8012044:	47b8      	blx	r7
 8012046:	3001      	adds	r0, #1
 8012048:	d12b      	bne.n	80120a2 <_printf_float+0x242>
 801204a:	e764      	b.n	8011f16 <_printf_float+0xb6>
 801204c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012050:	f240 80dd 	bls.w	801220e <_printf_float+0x3ae>
 8012054:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012058:	2200      	movs	r2, #0
 801205a:	2300      	movs	r3, #0
 801205c:	f7ee fcea 	bl	8000a34 <__aeabi_dcmpeq>
 8012060:	2800      	cmp	r0, #0
 8012062:	d033      	beq.n	80120cc <_printf_float+0x26c>
 8012064:	2301      	movs	r3, #1
 8012066:	4631      	mov	r1, r6
 8012068:	4628      	mov	r0, r5
 801206a:	4a35      	ldr	r2, [pc, #212]	; (8012140 <_printf_float+0x2e0>)
 801206c:	47b8      	blx	r7
 801206e:	3001      	adds	r0, #1
 8012070:	f43f af51 	beq.w	8011f16 <_printf_float+0xb6>
 8012074:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012078:	429a      	cmp	r2, r3
 801207a:	db02      	blt.n	8012082 <_printf_float+0x222>
 801207c:	6823      	ldr	r3, [r4, #0]
 801207e:	07d8      	lsls	r0, r3, #31
 8012080:	d50f      	bpl.n	80120a2 <_printf_float+0x242>
 8012082:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012086:	4631      	mov	r1, r6
 8012088:	4628      	mov	r0, r5
 801208a:	47b8      	blx	r7
 801208c:	3001      	adds	r0, #1
 801208e:	f43f af42 	beq.w	8011f16 <_printf_float+0xb6>
 8012092:	f04f 0800 	mov.w	r8, #0
 8012096:	f104 091a 	add.w	r9, r4, #26
 801209a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801209c:	3b01      	subs	r3, #1
 801209e:	4543      	cmp	r3, r8
 80120a0:	dc09      	bgt.n	80120b6 <_printf_float+0x256>
 80120a2:	6823      	ldr	r3, [r4, #0]
 80120a4:	079b      	lsls	r3, r3, #30
 80120a6:	f100 8102 	bmi.w	80122ae <_printf_float+0x44e>
 80120aa:	68e0      	ldr	r0, [r4, #12]
 80120ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80120ae:	4298      	cmp	r0, r3
 80120b0:	bfb8      	it	lt
 80120b2:	4618      	movlt	r0, r3
 80120b4:	e731      	b.n	8011f1a <_printf_float+0xba>
 80120b6:	2301      	movs	r3, #1
 80120b8:	464a      	mov	r2, r9
 80120ba:	4631      	mov	r1, r6
 80120bc:	4628      	mov	r0, r5
 80120be:	47b8      	blx	r7
 80120c0:	3001      	adds	r0, #1
 80120c2:	f43f af28 	beq.w	8011f16 <_printf_float+0xb6>
 80120c6:	f108 0801 	add.w	r8, r8, #1
 80120ca:	e7e6      	b.n	801209a <_printf_float+0x23a>
 80120cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	dc38      	bgt.n	8012144 <_printf_float+0x2e4>
 80120d2:	2301      	movs	r3, #1
 80120d4:	4631      	mov	r1, r6
 80120d6:	4628      	mov	r0, r5
 80120d8:	4a19      	ldr	r2, [pc, #100]	; (8012140 <_printf_float+0x2e0>)
 80120da:	47b8      	blx	r7
 80120dc:	3001      	adds	r0, #1
 80120de:	f43f af1a 	beq.w	8011f16 <_printf_float+0xb6>
 80120e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80120e6:	4313      	orrs	r3, r2
 80120e8:	d102      	bne.n	80120f0 <_printf_float+0x290>
 80120ea:	6823      	ldr	r3, [r4, #0]
 80120ec:	07d9      	lsls	r1, r3, #31
 80120ee:	d5d8      	bpl.n	80120a2 <_printf_float+0x242>
 80120f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80120f4:	4631      	mov	r1, r6
 80120f6:	4628      	mov	r0, r5
 80120f8:	47b8      	blx	r7
 80120fa:	3001      	adds	r0, #1
 80120fc:	f43f af0b 	beq.w	8011f16 <_printf_float+0xb6>
 8012100:	f04f 0900 	mov.w	r9, #0
 8012104:	f104 0a1a 	add.w	sl, r4, #26
 8012108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801210a:	425b      	negs	r3, r3
 801210c:	454b      	cmp	r3, r9
 801210e:	dc01      	bgt.n	8012114 <_printf_float+0x2b4>
 8012110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012112:	e794      	b.n	801203e <_printf_float+0x1de>
 8012114:	2301      	movs	r3, #1
 8012116:	4652      	mov	r2, sl
 8012118:	4631      	mov	r1, r6
 801211a:	4628      	mov	r0, r5
 801211c:	47b8      	blx	r7
 801211e:	3001      	adds	r0, #1
 8012120:	f43f aef9 	beq.w	8011f16 <_printf_float+0xb6>
 8012124:	f109 0901 	add.w	r9, r9, #1
 8012128:	e7ee      	b.n	8012108 <_printf_float+0x2a8>
 801212a:	bf00      	nop
 801212c:	7fefffff 	.word	0x7fefffff
 8012130:	0801868c 	.word	0x0801868c
 8012134:	08018690 	.word	0x08018690
 8012138:	08018698 	.word	0x08018698
 801213c:	08018694 	.word	0x08018694
 8012140:	0801869c 	.word	0x0801869c
 8012144:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012146:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012148:	429a      	cmp	r2, r3
 801214a:	bfa8      	it	ge
 801214c:	461a      	movge	r2, r3
 801214e:	2a00      	cmp	r2, #0
 8012150:	4691      	mov	r9, r2
 8012152:	dc37      	bgt.n	80121c4 <_printf_float+0x364>
 8012154:	f04f 0b00 	mov.w	fp, #0
 8012158:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801215c:	f104 021a 	add.w	r2, r4, #26
 8012160:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012164:	ebaa 0309 	sub.w	r3, sl, r9
 8012168:	455b      	cmp	r3, fp
 801216a:	dc33      	bgt.n	80121d4 <_printf_float+0x374>
 801216c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012170:	429a      	cmp	r2, r3
 8012172:	db3b      	blt.n	80121ec <_printf_float+0x38c>
 8012174:	6823      	ldr	r3, [r4, #0]
 8012176:	07da      	lsls	r2, r3, #31
 8012178:	d438      	bmi.n	80121ec <_printf_float+0x38c>
 801217a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801217c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801217e:	eba3 020a 	sub.w	r2, r3, sl
 8012182:	eba3 0901 	sub.w	r9, r3, r1
 8012186:	4591      	cmp	r9, r2
 8012188:	bfa8      	it	ge
 801218a:	4691      	movge	r9, r2
 801218c:	f1b9 0f00 	cmp.w	r9, #0
 8012190:	dc34      	bgt.n	80121fc <_printf_float+0x39c>
 8012192:	f04f 0800 	mov.w	r8, #0
 8012196:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801219a:	f104 0a1a 	add.w	sl, r4, #26
 801219e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80121a2:	1a9b      	subs	r3, r3, r2
 80121a4:	eba3 0309 	sub.w	r3, r3, r9
 80121a8:	4543      	cmp	r3, r8
 80121aa:	f77f af7a 	ble.w	80120a2 <_printf_float+0x242>
 80121ae:	2301      	movs	r3, #1
 80121b0:	4652      	mov	r2, sl
 80121b2:	4631      	mov	r1, r6
 80121b4:	4628      	mov	r0, r5
 80121b6:	47b8      	blx	r7
 80121b8:	3001      	adds	r0, #1
 80121ba:	f43f aeac 	beq.w	8011f16 <_printf_float+0xb6>
 80121be:	f108 0801 	add.w	r8, r8, #1
 80121c2:	e7ec      	b.n	801219e <_printf_float+0x33e>
 80121c4:	4613      	mov	r3, r2
 80121c6:	4631      	mov	r1, r6
 80121c8:	4642      	mov	r2, r8
 80121ca:	4628      	mov	r0, r5
 80121cc:	47b8      	blx	r7
 80121ce:	3001      	adds	r0, #1
 80121d0:	d1c0      	bne.n	8012154 <_printf_float+0x2f4>
 80121d2:	e6a0      	b.n	8011f16 <_printf_float+0xb6>
 80121d4:	2301      	movs	r3, #1
 80121d6:	4631      	mov	r1, r6
 80121d8:	4628      	mov	r0, r5
 80121da:	920b      	str	r2, [sp, #44]	; 0x2c
 80121dc:	47b8      	blx	r7
 80121de:	3001      	adds	r0, #1
 80121e0:	f43f ae99 	beq.w	8011f16 <_printf_float+0xb6>
 80121e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80121e6:	f10b 0b01 	add.w	fp, fp, #1
 80121ea:	e7b9      	b.n	8012160 <_printf_float+0x300>
 80121ec:	4631      	mov	r1, r6
 80121ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80121f2:	4628      	mov	r0, r5
 80121f4:	47b8      	blx	r7
 80121f6:	3001      	adds	r0, #1
 80121f8:	d1bf      	bne.n	801217a <_printf_float+0x31a>
 80121fa:	e68c      	b.n	8011f16 <_printf_float+0xb6>
 80121fc:	464b      	mov	r3, r9
 80121fe:	4631      	mov	r1, r6
 8012200:	4628      	mov	r0, r5
 8012202:	eb08 020a 	add.w	r2, r8, sl
 8012206:	47b8      	blx	r7
 8012208:	3001      	adds	r0, #1
 801220a:	d1c2      	bne.n	8012192 <_printf_float+0x332>
 801220c:	e683      	b.n	8011f16 <_printf_float+0xb6>
 801220e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012210:	2a01      	cmp	r2, #1
 8012212:	dc01      	bgt.n	8012218 <_printf_float+0x3b8>
 8012214:	07db      	lsls	r3, r3, #31
 8012216:	d537      	bpl.n	8012288 <_printf_float+0x428>
 8012218:	2301      	movs	r3, #1
 801221a:	4642      	mov	r2, r8
 801221c:	4631      	mov	r1, r6
 801221e:	4628      	mov	r0, r5
 8012220:	47b8      	blx	r7
 8012222:	3001      	adds	r0, #1
 8012224:	f43f ae77 	beq.w	8011f16 <_printf_float+0xb6>
 8012228:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801222c:	4631      	mov	r1, r6
 801222e:	4628      	mov	r0, r5
 8012230:	47b8      	blx	r7
 8012232:	3001      	adds	r0, #1
 8012234:	f43f ae6f 	beq.w	8011f16 <_printf_float+0xb6>
 8012238:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801223c:	2200      	movs	r2, #0
 801223e:	2300      	movs	r3, #0
 8012240:	f7ee fbf8 	bl	8000a34 <__aeabi_dcmpeq>
 8012244:	b9d8      	cbnz	r0, 801227e <_printf_float+0x41e>
 8012246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012248:	f108 0201 	add.w	r2, r8, #1
 801224c:	3b01      	subs	r3, #1
 801224e:	4631      	mov	r1, r6
 8012250:	4628      	mov	r0, r5
 8012252:	47b8      	blx	r7
 8012254:	3001      	adds	r0, #1
 8012256:	d10e      	bne.n	8012276 <_printf_float+0x416>
 8012258:	e65d      	b.n	8011f16 <_printf_float+0xb6>
 801225a:	2301      	movs	r3, #1
 801225c:	464a      	mov	r2, r9
 801225e:	4631      	mov	r1, r6
 8012260:	4628      	mov	r0, r5
 8012262:	47b8      	blx	r7
 8012264:	3001      	adds	r0, #1
 8012266:	f43f ae56 	beq.w	8011f16 <_printf_float+0xb6>
 801226a:	f108 0801 	add.w	r8, r8, #1
 801226e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012270:	3b01      	subs	r3, #1
 8012272:	4543      	cmp	r3, r8
 8012274:	dcf1      	bgt.n	801225a <_printf_float+0x3fa>
 8012276:	4653      	mov	r3, sl
 8012278:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801227c:	e6e0      	b.n	8012040 <_printf_float+0x1e0>
 801227e:	f04f 0800 	mov.w	r8, #0
 8012282:	f104 091a 	add.w	r9, r4, #26
 8012286:	e7f2      	b.n	801226e <_printf_float+0x40e>
 8012288:	2301      	movs	r3, #1
 801228a:	4642      	mov	r2, r8
 801228c:	e7df      	b.n	801224e <_printf_float+0x3ee>
 801228e:	2301      	movs	r3, #1
 8012290:	464a      	mov	r2, r9
 8012292:	4631      	mov	r1, r6
 8012294:	4628      	mov	r0, r5
 8012296:	47b8      	blx	r7
 8012298:	3001      	adds	r0, #1
 801229a:	f43f ae3c 	beq.w	8011f16 <_printf_float+0xb6>
 801229e:	f108 0801 	add.w	r8, r8, #1
 80122a2:	68e3      	ldr	r3, [r4, #12]
 80122a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80122a6:	1a5b      	subs	r3, r3, r1
 80122a8:	4543      	cmp	r3, r8
 80122aa:	dcf0      	bgt.n	801228e <_printf_float+0x42e>
 80122ac:	e6fd      	b.n	80120aa <_printf_float+0x24a>
 80122ae:	f04f 0800 	mov.w	r8, #0
 80122b2:	f104 0919 	add.w	r9, r4, #25
 80122b6:	e7f4      	b.n	80122a2 <_printf_float+0x442>

080122b8 <_printf_common>:
 80122b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122bc:	4616      	mov	r6, r2
 80122be:	4699      	mov	r9, r3
 80122c0:	688a      	ldr	r2, [r1, #8]
 80122c2:	690b      	ldr	r3, [r1, #16]
 80122c4:	4607      	mov	r7, r0
 80122c6:	4293      	cmp	r3, r2
 80122c8:	bfb8      	it	lt
 80122ca:	4613      	movlt	r3, r2
 80122cc:	6033      	str	r3, [r6, #0]
 80122ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80122d2:	460c      	mov	r4, r1
 80122d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80122d8:	b10a      	cbz	r2, 80122de <_printf_common+0x26>
 80122da:	3301      	adds	r3, #1
 80122dc:	6033      	str	r3, [r6, #0]
 80122de:	6823      	ldr	r3, [r4, #0]
 80122e0:	0699      	lsls	r1, r3, #26
 80122e2:	bf42      	ittt	mi
 80122e4:	6833      	ldrmi	r3, [r6, #0]
 80122e6:	3302      	addmi	r3, #2
 80122e8:	6033      	strmi	r3, [r6, #0]
 80122ea:	6825      	ldr	r5, [r4, #0]
 80122ec:	f015 0506 	ands.w	r5, r5, #6
 80122f0:	d106      	bne.n	8012300 <_printf_common+0x48>
 80122f2:	f104 0a19 	add.w	sl, r4, #25
 80122f6:	68e3      	ldr	r3, [r4, #12]
 80122f8:	6832      	ldr	r2, [r6, #0]
 80122fa:	1a9b      	subs	r3, r3, r2
 80122fc:	42ab      	cmp	r3, r5
 80122fe:	dc28      	bgt.n	8012352 <_printf_common+0x9a>
 8012300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012304:	1e13      	subs	r3, r2, #0
 8012306:	6822      	ldr	r2, [r4, #0]
 8012308:	bf18      	it	ne
 801230a:	2301      	movne	r3, #1
 801230c:	0692      	lsls	r2, r2, #26
 801230e:	d42d      	bmi.n	801236c <_printf_common+0xb4>
 8012310:	4649      	mov	r1, r9
 8012312:	4638      	mov	r0, r7
 8012314:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012318:	47c0      	blx	r8
 801231a:	3001      	adds	r0, #1
 801231c:	d020      	beq.n	8012360 <_printf_common+0xa8>
 801231e:	6823      	ldr	r3, [r4, #0]
 8012320:	68e5      	ldr	r5, [r4, #12]
 8012322:	f003 0306 	and.w	r3, r3, #6
 8012326:	2b04      	cmp	r3, #4
 8012328:	bf18      	it	ne
 801232a:	2500      	movne	r5, #0
 801232c:	6832      	ldr	r2, [r6, #0]
 801232e:	f04f 0600 	mov.w	r6, #0
 8012332:	68a3      	ldr	r3, [r4, #8]
 8012334:	bf08      	it	eq
 8012336:	1aad      	subeq	r5, r5, r2
 8012338:	6922      	ldr	r2, [r4, #16]
 801233a:	bf08      	it	eq
 801233c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012340:	4293      	cmp	r3, r2
 8012342:	bfc4      	itt	gt
 8012344:	1a9b      	subgt	r3, r3, r2
 8012346:	18ed      	addgt	r5, r5, r3
 8012348:	341a      	adds	r4, #26
 801234a:	42b5      	cmp	r5, r6
 801234c:	d11a      	bne.n	8012384 <_printf_common+0xcc>
 801234e:	2000      	movs	r0, #0
 8012350:	e008      	b.n	8012364 <_printf_common+0xac>
 8012352:	2301      	movs	r3, #1
 8012354:	4652      	mov	r2, sl
 8012356:	4649      	mov	r1, r9
 8012358:	4638      	mov	r0, r7
 801235a:	47c0      	blx	r8
 801235c:	3001      	adds	r0, #1
 801235e:	d103      	bne.n	8012368 <_printf_common+0xb0>
 8012360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012368:	3501      	adds	r5, #1
 801236a:	e7c4      	b.n	80122f6 <_printf_common+0x3e>
 801236c:	2030      	movs	r0, #48	; 0x30
 801236e:	18e1      	adds	r1, r4, r3
 8012370:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012374:	1c5a      	adds	r2, r3, #1
 8012376:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801237a:	4422      	add	r2, r4
 801237c:	3302      	adds	r3, #2
 801237e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012382:	e7c5      	b.n	8012310 <_printf_common+0x58>
 8012384:	2301      	movs	r3, #1
 8012386:	4622      	mov	r2, r4
 8012388:	4649      	mov	r1, r9
 801238a:	4638      	mov	r0, r7
 801238c:	47c0      	blx	r8
 801238e:	3001      	adds	r0, #1
 8012390:	d0e6      	beq.n	8012360 <_printf_common+0xa8>
 8012392:	3601      	adds	r6, #1
 8012394:	e7d9      	b.n	801234a <_printf_common+0x92>
	...

08012398 <_printf_i>:
 8012398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801239c:	7e0f      	ldrb	r7, [r1, #24]
 801239e:	4691      	mov	r9, r2
 80123a0:	2f78      	cmp	r7, #120	; 0x78
 80123a2:	4680      	mov	r8, r0
 80123a4:	460c      	mov	r4, r1
 80123a6:	469a      	mov	sl, r3
 80123a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80123aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80123ae:	d807      	bhi.n	80123c0 <_printf_i+0x28>
 80123b0:	2f62      	cmp	r7, #98	; 0x62
 80123b2:	d80a      	bhi.n	80123ca <_printf_i+0x32>
 80123b4:	2f00      	cmp	r7, #0
 80123b6:	f000 80d9 	beq.w	801256c <_printf_i+0x1d4>
 80123ba:	2f58      	cmp	r7, #88	; 0x58
 80123bc:	f000 80a4 	beq.w	8012508 <_printf_i+0x170>
 80123c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80123c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80123c8:	e03a      	b.n	8012440 <_printf_i+0xa8>
 80123ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80123ce:	2b15      	cmp	r3, #21
 80123d0:	d8f6      	bhi.n	80123c0 <_printf_i+0x28>
 80123d2:	a101      	add	r1, pc, #4	; (adr r1, 80123d8 <_printf_i+0x40>)
 80123d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80123d8:	08012431 	.word	0x08012431
 80123dc:	08012445 	.word	0x08012445
 80123e0:	080123c1 	.word	0x080123c1
 80123e4:	080123c1 	.word	0x080123c1
 80123e8:	080123c1 	.word	0x080123c1
 80123ec:	080123c1 	.word	0x080123c1
 80123f0:	08012445 	.word	0x08012445
 80123f4:	080123c1 	.word	0x080123c1
 80123f8:	080123c1 	.word	0x080123c1
 80123fc:	080123c1 	.word	0x080123c1
 8012400:	080123c1 	.word	0x080123c1
 8012404:	08012553 	.word	0x08012553
 8012408:	08012475 	.word	0x08012475
 801240c:	08012535 	.word	0x08012535
 8012410:	080123c1 	.word	0x080123c1
 8012414:	080123c1 	.word	0x080123c1
 8012418:	08012575 	.word	0x08012575
 801241c:	080123c1 	.word	0x080123c1
 8012420:	08012475 	.word	0x08012475
 8012424:	080123c1 	.word	0x080123c1
 8012428:	080123c1 	.word	0x080123c1
 801242c:	0801253d 	.word	0x0801253d
 8012430:	682b      	ldr	r3, [r5, #0]
 8012432:	1d1a      	adds	r2, r3, #4
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	602a      	str	r2, [r5, #0]
 8012438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801243c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012440:	2301      	movs	r3, #1
 8012442:	e0a4      	b.n	801258e <_printf_i+0x1f6>
 8012444:	6820      	ldr	r0, [r4, #0]
 8012446:	6829      	ldr	r1, [r5, #0]
 8012448:	0606      	lsls	r6, r0, #24
 801244a:	f101 0304 	add.w	r3, r1, #4
 801244e:	d50a      	bpl.n	8012466 <_printf_i+0xce>
 8012450:	680e      	ldr	r6, [r1, #0]
 8012452:	602b      	str	r3, [r5, #0]
 8012454:	2e00      	cmp	r6, #0
 8012456:	da03      	bge.n	8012460 <_printf_i+0xc8>
 8012458:	232d      	movs	r3, #45	; 0x2d
 801245a:	4276      	negs	r6, r6
 801245c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012460:	230a      	movs	r3, #10
 8012462:	485e      	ldr	r0, [pc, #376]	; (80125dc <_printf_i+0x244>)
 8012464:	e019      	b.n	801249a <_printf_i+0x102>
 8012466:	680e      	ldr	r6, [r1, #0]
 8012468:	f010 0f40 	tst.w	r0, #64	; 0x40
 801246c:	602b      	str	r3, [r5, #0]
 801246e:	bf18      	it	ne
 8012470:	b236      	sxthne	r6, r6
 8012472:	e7ef      	b.n	8012454 <_printf_i+0xbc>
 8012474:	682b      	ldr	r3, [r5, #0]
 8012476:	6820      	ldr	r0, [r4, #0]
 8012478:	1d19      	adds	r1, r3, #4
 801247a:	6029      	str	r1, [r5, #0]
 801247c:	0601      	lsls	r1, r0, #24
 801247e:	d501      	bpl.n	8012484 <_printf_i+0xec>
 8012480:	681e      	ldr	r6, [r3, #0]
 8012482:	e002      	b.n	801248a <_printf_i+0xf2>
 8012484:	0646      	lsls	r6, r0, #25
 8012486:	d5fb      	bpl.n	8012480 <_printf_i+0xe8>
 8012488:	881e      	ldrh	r6, [r3, #0]
 801248a:	2f6f      	cmp	r7, #111	; 0x6f
 801248c:	bf0c      	ite	eq
 801248e:	2308      	moveq	r3, #8
 8012490:	230a      	movne	r3, #10
 8012492:	4852      	ldr	r0, [pc, #328]	; (80125dc <_printf_i+0x244>)
 8012494:	2100      	movs	r1, #0
 8012496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801249a:	6865      	ldr	r5, [r4, #4]
 801249c:	2d00      	cmp	r5, #0
 801249e:	bfa8      	it	ge
 80124a0:	6821      	ldrge	r1, [r4, #0]
 80124a2:	60a5      	str	r5, [r4, #8]
 80124a4:	bfa4      	itt	ge
 80124a6:	f021 0104 	bicge.w	r1, r1, #4
 80124aa:	6021      	strge	r1, [r4, #0]
 80124ac:	b90e      	cbnz	r6, 80124b2 <_printf_i+0x11a>
 80124ae:	2d00      	cmp	r5, #0
 80124b0:	d04d      	beq.n	801254e <_printf_i+0x1b6>
 80124b2:	4615      	mov	r5, r2
 80124b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80124b8:	fb03 6711 	mls	r7, r3, r1, r6
 80124bc:	5dc7      	ldrb	r7, [r0, r7]
 80124be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80124c2:	4637      	mov	r7, r6
 80124c4:	42bb      	cmp	r3, r7
 80124c6:	460e      	mov	r6, r1
 80124c8:	d9f4      	bls.n	80124b4 <_printf_i+0x11c>
 80124ca:	2b08      	cmp	r3, #8
 80124cc:	d10b      	bne.n	80124e6 <_printf_i+0x14e>
 80124ce:	6823      	ldr	r3, [r4, #0]
 80124d0:	07de      	lsls	r6, r3, #31
 80124d2:	d508      	bpl.n	80124e6 <_printf_i+0x14e>
 80124d4:	6923      	ldr	r3, [r4, #16]
 80124d6:	6861      	ldr	r1, [r4, #4]
 80124d8:	4299      	cmp	r1, r3
 80124da:	bfde      	ittt	le
 80124dc:	2330      	movle	r3, #48	; 0x30
 80124de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80124e2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80124e6:	1b52      	subs	r2, r2, r5
 80124e8:	6122      	str	r2, [r4, #16]
 80124ea:	464b      	mov	r3, r9
 80124ec:	4621      	mov	r1, r4
 80124ee:	4640      	mov	r0, r8
 80124f0:	f8cd a000 	str.w	sl, [sp]
 80124f4:	aa03      	add	r2, sp, #12
 80124f6:	f7ff fedf 	bl	80122b8 <_printf_common>
 80124fa:	3001      	adds	r0, #1
 80124fc:	d14c      	bne.n	8012598 <_printf_i+0x200>
 80124fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012502:	b004      	add	sp, #16
 8012504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012508:	4834      	ldr	r0, [pc, #208]	; (80125dc <_printf_i+0x244>)
 801250a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801250e:	6829      	ldr	r1, [r5, #0]
 8012510:	6823      	ldr	r3, [r4, #0]
 8012512:	f851 6b04 	ldr.w	r6, [r1], #4
 8012516:	6029      	str	r1, [r5, #0]
 8012518:	061d      	lsls	r5, r3, #24
 801251a:	d514      	bpl.n	8012546 <_printf_i+0x1ae>
 801251c:	07df      	lsls	r7, r3, #31
 801251e:	bf44      	itt	mi
 8012520:	f043 0320 	orrmi.w	r3, r3, #32
 8012524:	6023      	strmi	r3, [r4, #0]
 8012526:	b91e      	cbnz	r6, 8012530 <_printf_i+0x198>
 8012528:	6823      	ldr	r3, [r4, #0]
 801252a:	f023 0320 	bic.w	r3, r3, #32
 801252e:	6023      	str	r3, [r4, #0]
 8012530:	2310      	movs	r3, #16
 8012532:	e7af      	b.n	8012494 <_printf_i+0xfc>
 8012534:	6823      	ldr	r3, [r4, #0]
 8012536:	f043 0320 	orr.w	r3, r3, #32
 801253a:	6023      	str	r3, [r4, #0]
 801253c:	2378      	movs	r3, #120	; 0x78
 801253e:	4828      	ldr	r0, [pc, #160]	; (80125e0 <_printf_i+0x248>)
 8012540:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012544:	e7e3      	b.n	801250e <_printf_i+0x176>
 8012546:	0659      	lsls	r1, r3, #25
 8012548:	bf48      	it	mi
 801254a:	b2b6      	uxthmi	r6, r6
 801254c:	e7e6      	b.n	801251c <_printf_i+0x184>
 801254e:	4615      	mov	r5, r2
 8012550:	e7bb      	b.n	80124ca <_printf_i+0x132>
 8012552:	682b      	ldr	r3, [r5, #0]
 8012554:	6826      	ldr	r6, [r4, #0]
 8012556:	1d18      	adds	r0, r3, #4
 8012558:	6961      	ldr	r1, [r4, #20]
 801255a:	6028      	str	r0, [r5, #0]
 801255c:	0635      	lsls	r5, r6, #24
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	d501      	bpl.n	8012566 <_printf_i+0x1ce>
 8012562:	6019      	str	r1, [r3, #0]
 8012564:	e002      	b.n	801256c <_printf_i+0x1d4>
 8012566:	0670      	lsls	r0, r6, #25
 8012568:	d5fb      	bpl.n	8012562 <_printf_i+0x1ca>
 801256a:	8019      	strh	r1, [r3, #0]
 801256c:	2300      	movs	r3, #0
 801256e:	4615      	mov	r5, r2
 8012570:	6123      	str	r3, [r4, #16]
 8012572:	e7ba      	b.n	80124ea <_printf_i+0x152>
 8012574:	682b      	ldr	r3, [r5, #0]
 8012576:	2100      	movs	r1, #0
 8012578:	1d1a      	adds	r2, r3, #4
 801257a:	602a      	str	r2, [r5, #0]
 801257c:	681d      	ldr	r5, [r3, #0]
 801257e:	6862      	ldr	r2, [r4, #4]
 8012580:	4628      	mov	r0, r5
 8012582:	f002 fc15 	bl	8014db0 <memchr>
 8012586:	b108      	cbz	r0, 801258c <_printf_i+0x1f4>
 8012588:	1b40      	subs	r0, r0, r5
 801258a:	6060      	str	r0, [r4, #4]
 801258c:	6863      	ldr	r3, [r4, #4]
 801258e:	6123      	str	r3, [r4, #16]
 8012590:	2300      	movs	r3, #0
 8012592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012596:	e7a8      	b.n	80124ea <_printf_i+0x152>
 8012598:	462a      	mov	r2, r5
 801259a:	4649      	mov	r1, r9
 801259c:	4640      	mov	r0, r8
 801259e:	6923      	ldr	r3, [r4, #16]
 80125a0:	47d0      	blx	sl
 80125a2:	3001      	adds	r0, #1
 80125a4:	d0ab      	beq.n	80124fe <_printf_i+0x166>
 80125a6:	6823      	ldr	r3, [r4, #0]
 80125a8:	079b      	lsls	r3, r3, #30
 80125aa:	d413      	bmi.n	80125d4 <_printf_i+0x23c>
 80125ac:	68e0      	ldr	r0, [r4, #12]
 80125ae:	9b03      	ldr	r3, [sp, #12]
 80125b0:	4298      	cmp	r0, r3
 80125b2:	bfb8      	it	lt
 80125b4:	4618      	movlt	r0, r3
 80125b6:	e7a4      	b.n	8012502 <_printf_i+0x16a>
 80125b8:	2301      	movs	r3, #1
 80125ba:	4632      	mov	r2, r6
 80125bc:	4649      	mov	r1, r9
 80125be:	4640      	mov	r0, r8
 80125c0:	47d0      	blx	sl
 80125c2:	3001      	adds	r0, #1
 80125c4:	d09b      	beq.n	80124fe <_printf_i+0x166>
 80125c6:	3501      	adds	r5, #1
 80125c8:	68e3      	ldr	r3, [r4, #12]
 80125ca:	9903      	ldr	r1, [sp, #12]
 80125cc:	1a5b      	subs	r3, r3, r1
 80125ce:	42ab      	cmp	r3, r5
 80125d0:	dcf2      	bgt.n	80125b8 <_printf_i+0x220>
 80125d2:	e7eb      	b.n	80125ac <_printf_i+0x214>
 80125d4:	2500      	movs	r5, #0
 80125d6:	f104 0619 	add.w	r6, r4, #25
 80125da:	e7f5      	b.n	80125c8 <_printf_i+0x230>
 80125dc:	0801869e 	.word	0x0801869e
 80125e0:	080186af 	.word	0x080186af

080125e4 <_scanf_float>:
 80125e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125e8:	b087      	sub	sp, #28
 80125ea:	9303      	str	r3, [sp, #12]
 80125ec:	688b      	ldr	r3, [r1, #8]
 80125ee:	4617      	mov	r7, r2
 80125f0:	1e5a      	subs	r2, r3, #1
 80125f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80125f6:	bf85      	ittet	hi
 80125f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80125fc:	195b      	addhi	r3, r3, r5
 80125fe:	2300      	movls	r3, #0
 8012600:	9302      	strhi	r3, [sp, #8]
 8012602:	bf88      	it	hi
 8012604:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012608:	468b      	mov	fp, r1
 801260a:	f04f 0500 	mov.w	r5, #0
 801260e:	bf8c      	ite	hi
 8012610:	608b      	strhi	r3, [r1, #8]
 8012612:	9302      	strls	r3, [sp, #8]
 8012614:	680b      	ldr	r3, [r1, #0]
 8012616:	4680      	mov	r8, r0
 8012618:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801261c:	f84b 3b1c 	str.w	r3, [fp], #28
 8012620:	460c      	mov	r4, r1
 8012622:	465e      	mov	r6, fp
 8012624:	46aa      	mov	sl, r5
 8012626:	46a9      	mov	r9, r5
 8012628:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801262c:	9501      	str	r5, [sp, #4]
 801262e:	68a2      	ldr	r2, [r4, #8]
 8012630:	b152      	cbz	r2, 8012648 <_scanf_float+0x64>
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	781b      	ldrb	r3, [r3, #0]
 8012636:	2b4e      	cmp	r3, #78	; 0x4e
 8012638:	d864      	bhi.n	8012704 <_scanf_float+0x120>
 801263a:	2b40      	cmp	r3, #64	; 0x40
 801263c:	d83c      	bhi.n	80126b8 <_scanf_float+0xd4>
 801263e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012642:	b2c8      	uxtb	r0, r1
 8012644:	280e      	cmp	r0, #14
 8012646:	d93a      	bls.n	80126be <_scanf_float+0xda>
 8012648:	f1b9 0f00 	cmp.w	r9, #0
 801264c:	d003      	beq.n	8012656 <_scanf_float+0x72>
 801264e:	6823      	ldr	r3, [r4, #0]
 8012650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012654:	6023      	str	r3, [r4, #0]
 8012656:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801265a:	f1ba 0f01 	cmp.w	sl, #1
 801265e:	f200 8113 	bhi.w	8012888 <_scanf_float+0x2a4>
 8012662:	455e      	cmp	r6, fp
 8012664:	f200 8105 	bhi.w	8012872 <_scanf_float+0x28e>
 8012668:	2501      	movs	r5, #1
 801266a:	4628      	mov	r0, r5
 801266c:	b007      	add	sp, #28
 801266e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012672:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012676:	2a0d      	cmp	r2, #13
 8012678:	d8e6      	bhi.n	8012648 <_scanf_float+0x64>
 801267a:	a101      	add	r1, pc, #4	; (adr r1, 8012680 <_scanf_float+0x9c>)
 801267c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012680:	080127bf 	.word	0x080127bf
 8012684:	08012649 	.word	0x08012649
 8012688:	08012649 	.word	0x08012649
 801268c:	08012649 	.word	0x08012649
 8012690:	0801281f 	.word	0x0801281f
 8012694:	080127f7 	.word	0x080127f7
 8012698:	08012649 	.word	0x08012649
 801269c:	08012649 	.word	0x08012649
 80126a0:	080127cd 	.word	0x080127cd
 80126a4:	08012649 	.word	0x08012649
 80126a8:	08012649 	.word	0x08012649
 80126ac:	08012649 	.word	0x08012649
 80126b0:	08012649 	.word	0x08012649
 80126b4:	08012785 	.word	0x08012785
 80126b8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80126bc:	e7db      	b.n	8012676 <_scanf_float+0x92>
 80126be:	290e      	cmp	r1, #14
 80126c0:	d8c2      	bhi.n	8012648 <_scanf_float+0x64>
 80126c2:	a001      	add	r0, pc, #4	; (adr r0, 80126c8 <_scanf_float+0xe4>)
 80126c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80126c8:	08012777 	.word	0x08012777
 80126cc:	08012649 	.word	0x08012649
 80126d0:	08012777 	.word	0x08012777
 80126d4:	0801280b 	.word	0x0801280b
 80126d8:	08012649 	.word	0x08012649
 80126dc:	08012725 	.word	0x08012725
 80126e0:	08012761 	.word	0x08012761
 80126e4:	08012761 	.word	0x08012761
 80126e8:	08012761 	.word	0x08012761
 80126ec:	08012761 	.word	0x08012761
 80126f0:	08012761 	.word	0x08012761
 80126f4:	08012761 	.word	0x08012761
 80126f8:	08012761 	.word	0x08012761
 80126fc:	08012761 	.word	0x08012761
 8012700:	08012761 	.word	0x08012761
 8012704:	2b6e      	cmp	r3, #110	; 0x6e
 8012706:	d809      	bhi.n	801271c <_scanf_float+0x138>
 8012708:	2b60      	cmp	r3, #96	; 0x60
 801270a:	d8b2      	bhi.n	8012672 <_scanf_float+0x8e>
 801270c:	2b54      	cmp	r3, #84	; 0x54
 801270e:	d077      	beq.n	8012800 <_scanf_float+0x21c>
 8012710:	2b59      	cmp	r3, #89	; 0x59
 8012712:	d199      	bne.n	8012648 <_scanf_float+0x64>
 8012714:	2d07      	cmp	r5, #7
 8012716:	d197      	bne.n	8012648 <_scanf_float+0x64>
 8012718:	2508      	movs	r5, #8
 801271a:	e029      	b.n	8012770 <_scanf_float+0x18c>
 801271c:	2b74      	cmp	r3, #116	; 0x74
 801271e:	d06f      	beq.n	8012800 <_scanf_float+0x21c>
 8012720:	2b79      	cmp	r3, #121	; 0x79
 8012722:	e7f6      	b.n	8012712 <_scanf_float+0x12e>
 8012724:	6821      	ldr	r1, [r4, #0]
 8012726:	05c8      	lsls	r0, r1, #23
 8012728:	d51a      	bpl.n	8012760 <_scanf_float+0x17c>
 801272a:	9b02      	ldr	r3, [sp, #8]
 801272c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012730:	6021      	str	r1, [r4, #0]
 8012732:	f109 0901 	add.w	r9, r9, #1
 8012736:	b11b      	cbz	r3, 8012740 <_scanf_float+0x15c>
 8012738:	3b01      	subs	r3, #1
 801273a:	3201      	adds	r2, #1
 801273c:	9302      	str	r3, [sp, #8]
 801273e:	60a2      	str	r2, [r4, #8]
 8012740:	68a3      	ldr	r3, [r4, #8]
 8012742:	3b01      	subs	r3, #1
 8012744:	60a3      	str	r3, [r4, #8]
 8012746:	6923      	ldr	r3, [r4, #16]
 8012748:	3301      	adds	r3, #1
 801274a:	6123      	str	r3, [r4, #16]
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	3b01      	subs	r3, #1
 8012750:	2b00      	cmp	r3, #0
 8012752:	607b      	str	r3, [r7, #4]
 8012754:	f340 8084 	ble.w	8012860 <_scanf_float+0x27c>
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	3301      	adds	r3, #1
 801275c:	603b      	str	r3, [r7, #0]
 801275e:	e766      	b.n	801262e <_scanf_float+0x4a>
 8012760:	eb1a 0f05 	cmn.w	sl, r5
 8012764:	f47f af70 	bne.w	8012648 <_scanf_float+0x64>
 8012768:	6822      	ldr	r2, [r4, #0]
 801276a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801276e:	6022      	str	r2, [r4, #0]
 8012770:	f806 3b01 	strb.w	r3, [r6], #1
 8012774:	e7e4      	b.n	8012740 <_scanf_float+0x15c>
 8012776:	6822      	ldr	r2, [r4, #0]
 8012778:	0610      	lsls	r0, r2, #24
 801277a:	f57f af65 	bpl.w	8012648 <_scanf_float+0x64>
 801277e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012782:	e7f4      	b.n	801276e <_scanf_float+0x18a>
 8012784:	f1ba 0f00 	cmp.w	sl, #0
 8012788:	d10e      	bne.n	80127a8 <_scanf_float+0x1c4>
 801278a:	f1b9 0f00 	cmp.w	r9, #0
 801278e:	d10e      	bne.n	80127ae <_scanf_float+0x1ca>
 8012790:	6822      	ldr	r2, [r4, #0]
 8012792:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012796:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801279a:	d108      	bne.n	80127ae <_scanf_float+0x1ca>
 801279c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80127a0:	f04f 0a01 	mov.w	sl, #1
 80127a4:	6022      	str	r2, [r4, #0]
 80127a6:	e7e3      	b.n	8012770 <_scanf_float+0x18c>
 80127a8:	f1ba 0f02 	cmp.w	sl, #2
 80127ac:	d055      	beq.n	801285a <_scanf_float+0x276>
 80127ae:	2d01      	cmp	r5, #1
 80127b0:	d002      	beq.n	80127b8 <_scanf_float+0x1d4>
 80127b2:	2d04      	cmp	r5, #4
 80127b4:	f47f af48 	bne.w	8012648 <_scanf_float+0x64>
 80127b8:	3501      	adds	r5, #1
 80127ba:	b2ed      	uxtb	r5, r5
 80127bc:	e7d8      	b.n	8012770 <_scanf_float+0x18c>
 80127be:	f1ba 0f01 	cmp.w	sl, #1
 80127c2:	f47f af41 	bne.w	8012648 <_scanf_float+0x64>
 80127c6:	f04f 0a02 	mov.w	sl, #2
 80127ca:	e7d1      	b.n	8012770 <_scanf_float+0x18c>
 80127cc:	b97d      	cbnz	r5, 80127ee <_scanf_float+0x20a>
 80127ce:	f1b9 0f00 	cmp.w	r9, #0
 80127d2:	f47f af3c 	bne.w	801264e <_scanf_float+0x6a>
 80127d6:	6822      	ldr	r2, [r4, #0]
 80127d8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80127dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80127e0:	f47f af39 	bne.w	8012656 <_scanf_float+0x72>
 80127e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80127e8:	2501      	movs	r5, #1
 80127ea:	6022      	str	r2, [r4, #0]
 80127ec:	e7c0      	b.n	8012770 <_scanf_float+0x18c>
 80127ee:	2d03      	cmp	r5, #3
 80127f0:	d0e2      	beq.n	80127b8 <_scanf_float+0x1d4>
 80127f2:	2d05      	cmp	r5, #5
 80127f4:	e7de      	b.n	80127b4 <_scanf_float+0x1d0>
 80127f6:	2d02      	cmp	r5, #2
 80127f8:	f47f af26 	bne.w	8012648 <_scanf_float+0x64>
 80127fc:	2503      	movs	r5, #3
 80127fe:	e7b7      	b.n	8012770 <_scanf_float+0x18c>
 8012800:	2d06      	cmp	r5, #6
 8012802:	f47f af21 	bne.w	8012648 <_scanf_float+0x64>
 8012806:	2507      	movs	r5, #7
 8012808:	e7b2      	b.n	8012770 <_scanf_float+0x18c>
 801280a:	6822      	ldr	r2, [r4, #0]
 801280c:	0591      	lsls	r1, r2, #22
 801280e:	f57f af1b 	bpl.w	8012648 <_scanf_float+0x64>
 8012812:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012816:	6022      	str	r2, [r4, #0]
 8012818:	f8cd 9004 	str.w	r9, [sp, #4]
 801281c:	e7a8      	b.n	8012770 <_scanf_float+0x18c>
 801281e:	6822      	ldr	r2, [r4, #0]
 8012820:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012824:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012828:	d006      	beq.n	8012838 <_scanf_float+0x254>
 801282a:	0550      	lsls	r0, r2, #21
 801282c:	f57f af0c 	bpl.w	8012648 <_scanf_float+0x64>
 8012830:	f1b9 0f00 	cmp.w	r9, #0
 8012834:	f43f af0f 	beq.w	8012656 <_scanf_float+0x72>
 8012838:	0591      	lsls	r1, r2, #22
 801283a:	bf58      	it	pl
 801283c:	9901      	ldrpl	r1, [sp, #4]
 801283e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012842:	bf58      	it	pl
 8012844:	eba9 0101 	subpl.w	r1, r9, r1
 8012848:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801284c:	f04f 0900 	mov.w	r9, #0
 8012850:	bf58      	it	pl
 8012852:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012856:	6022      	str	r2, [r4, #0]
 8012858:	e78a      	b.n	8012770 <_scanf_float+0x18c>
 801285a:	f04f 0a03 	mov.w	sl, #3
 801285e:	e787      	b.n	8012770 <_scanf_float+0x18c>
 8012860:	4639      	mov	r1, r7
 8012862:	4640      	mov	r0, r8
 8012864:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012868:	4798      	blx	r3
 801286a:	2800      	cmp	r0, #0
 801286c:	f43f aedf 	beq.w	801262e <_scanf_float+0x4a>
 8012870:	e6ea      	b.n	8012648 <_scanf_float+0x64>
 8012872:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012876:	463a      	mov	r2, r7
 8012878:	4640      	mov	r0, r8
 801287a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801287e:	4798      	blx	r3
 8012880:	6923      	ldr	r3, [r4, #16]
 8012882:	3b01      	subs	r3, #1
 8012884:	6123      	str	r3, [r4, #16]
 8012886:	e6ec      	b.n	8012662 <_scanf_float+0x7e>
 8012888:	1e6b      	subs	r3, r5, #1
 801288a:	2b06      	cmp	r3, #6
 801288c:	d825      	bhi.n	80128da <_scanf_float+0x2f6>
 801288e:	2d02      	cmp	r5, #2
 8012890:	d836      	bhi.n	8012900 <_scanf_float+0x31c>
 8012892:	455e      	cmp	r6, fp
 8012894:	f67f aee8 	bls.w	8012668 <_scanf_float+0x84>
 8012898:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801289c:	463a      	mov	r2, r7
 801289e:	4640      	mov	r0, r8
 80128a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80128a4:	4798      	blx	r3
 80128a6:	6923      	ldr	r3, [r4, #16]
 80128a8:	3b01      	subs	r3, #1
 80128aa:	6123      	str	r3, [r4, #16]
 80128ac:	e7f1      	b.n	8012892 <_scanf_float+0x2ae>
 80128ae:	9802      	ldr	r0, [sp, #8]
 80128b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80128b4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80128b8:	463a      	mov	r2, r7
 80128ba:	9002      	str	r0, [sp, #8]
 80128bc:	4640      	mov	r0, r8
 80128be:	4798      	blx	r3
 80128c0:	6923      	ldr	r3, [r4, #16]
 80128c2:	3b01      	subs	r3, #1
 80128c4:	6123      	str	r3, [r4, #16]
 80128c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80128ca:	fa5f fa8a 	uxtb.w	sl, sl
 80128ce:	f1ba 0f02 	cmp.w	sl, #2
 80128d2:	d1ec      	bne.n	80128ae <_scanf_float+0x2ca>
 80128d4:	3d03      	subs	r5, #3
 80128d6:	b2ed      	uxtb	r5, r5
 80128d8:	1b76      	subs	r6, r6, r5
 80128da:	6823      	ldr	r3, [r4, #0]
 80128dc:	05da      	lsls	r2, r3, #23
 80128de:	d52f      	bpl.n	8012940 <_scanf_float+0x35c>
 80128e0:	055b      	lsls	r3, r3, #21
 80128e2:	d510      	bpl.n	8012906 <_scanf_float+0x322>
 80128e4:	455e      	cmp	r6, fp
 80128e6:	f67f aebf 	bls.w	8012668 <_scanf_float+0x84>
 80128ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80128ee:	463a      	mov	r2, r7
 80128f0:	4640      	mov	r0, r8
 80128f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80128f6:	4798      	blx	r3
 80128f8:	6923      	ldr	r3, [r4, #16]
 80128fa:	3b01      	subs	r3, #1
 80128fc:	6123      	str	r3, [r4, #16]
 80128fe:	e7f1      	b.n	80128e4 <_scanf_float+0x300>
 8012900:	46aa      	mov	sl, r5
 8012902:	9602      	str	r6, [sp, #8]
 8012904:	e7df      	b.n	80128c6 <_scanf_float+0x2e2>
 8012906:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801290a:	6923      	ldr	r3, [r4, #16]
 801290c:	2965      	cmp	r1, #101	; 0x65
 801290e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012912:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8012916:	6123      	str	r3, [r4, #16]
 8012918:	d00c      	beq.n	8012934 <_scanf_float+0x350>
 801291a:	2945      	cmp	r1, #69	; 0x45
 801291c:	d00a      	beq.n	8012934 <_scanf_float+0x350>
 801291e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012922:	463a      	mov	r2, r7
 8012924:	4640      	mov	r0, r8
 8012926:	4798      	blx	r3
 8012928:	6923      	ldr	r3, [r4, #16]
 801292a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801292e:	3b01      	subs	r3, #1
 8012930:	1eb5      	subs	r5, r6, #2
 8012932:	6123      	str	r3, [r4, #16]
 8012934:	463a      	mov	r2, r7
 8012936:	4640      	mov	r0, r8
 8012938:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801293c:	4798      	blx	r3
 801293e:	462e      	mov	r6, r5
 8012940:	6825      	ldr	r5, [r4, #0]
 8012942:	f015 0510 	ands.w	r5, r5, #16
 8012946:	d155      	bne.n	80129f4 <_scanf_float+0x410>
 8012948:	7035      	strb	r5, [r6, #0]
 801294a:	6823      	ldr	r3, [r4, #0]
 801294c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012954:	d11b      	bne.n	801298e <_scanf_float+0x3aa>
 8012956:	9b01      	ldr	r3, [sp, #4]
 8012958:	454b      	cmp	r3, r9
 801295a:	eba3 0209 	sub.w	r2, r3, r9
 801295e:	d123      	bne.n	80129a8 <_scanf_float+0x3c4>
 8012960:	2200      	movs	r2, #0
 8012962:	4659      	mov	r1, fp
 8012964:	4640      	mov	r0, r8
 8012966:	f000 fea7 	bl	80136b8 <_strtod_r>
 801296a:	6822      	ldr	r2, [r4, #0]
 801296c:	9b03      	ldr	r3, [sp, #12]
 801296e:	f012 0f02 	tst.w	r2, #2
 8012972:	4606      	mov	r6, r0
 8012974:	460f      	mov	r7, r1
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	d021      	beq.n	80129be <_scanf_float+0x3da>
 801297a:	1d1a      	adds	r2, r3, #4
 801297c:	9903      	ldr	r1, [sp, #12]
 801297e:	600a      	str	r2, [r1, #0]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	e9c3 6700 	strd	r6, r7, [r3]
 8012986:	68e3      	ldr	r3, [r4, #12]
 8012988:	3301      	adds	r3, #1
 801298a:	60e3      	str	r3, [r4, #12]
 801298c:	e66d      	b.n	801266a <_scanf_float+0x86>
 801298e:	9b04      	ldr	r3, [sp, #16]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d0e5      	beq.n	8012960 <_scanf_float+0x37c>
 8012994:	9905      	ldr	r1, [sp, #20]
 8012996:	230a      	movs	r3, #10
 8012998:	462a      	mov	r2, r5
 801299a:	4640      	mov	r0, r8
 801299c:	3101      	adds	r1, #1
 801299e:	f000 ff0d 	bl	80137bc <_strtol_r>
 80129a2:	9b04      	ldr	r3, [sp, #16]
 80129a4:	9e05      	ldr	r6, [sp, #20]
 80129a6:	1ac2      	subs	r2, r0, r3
 80129a8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80129ac:	429e      	cmp	r6, r3
 80129ae:	bf28      	it	cs
 80129b0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80129b4:	4630      	mov	r0, r6
 80129b6:	4910      	ldr	r1, [pc, #64]	; (80129f8 <_scanf_float+0x414>)
 80129b8:	f000 f83e 	bl	8012a38 <siprintf>
 80129bc:	e7d0      	b.n	8012960 <_scanf_float+0x37c>
 80129be:	f012 0f04 	tst.w	r2, #4
 80129c2:	f103 0204 	add.w	r2, r3, #4
 80129c6:	d1d9      	bne.n	801297c <_scanf_float+0x398>
 80129c8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80129cc:	f8cc 2000 	str.w	r2, [ip]
 80129d0:	f8d3 8000 	ldr.w	r8, [r3]
 80129d4:	4602      	mov	r2, r0
 80129d6:	460b      	mov	r3, r1
 80129d8:	f7ee f85e 	bl	8000a98 <__aeabi_dcmpun>
 80129dc:	b128      	cbz	r0, 80129ea <_scanf_float+0x406>
 80129de:	4807      	ldr	r0, [pc, #28]	; (80129fc <_scanf_float+0x418>)
 80129e0:	f000 f826 	bl	8012a30 <nanf>
 80129e4:	f8c8 0000 	str.w	r0, [r8]
 80129e8:	e7cd      	b.n	8012986 <_scanf_float+0x3a2>
 80129ea:	4630      	mov	r0, r6
 80129ec:	4639      	mov	r1, r7
 80129ee:	f7ee f8b1 	bl	8000b54 <__aeabi_d2f>
 80129f2:	e7f7      	b.n	80129e4 <_scanf_float+0x400>
 80129f4:	2500      	movs	r5, #0
 80129f6:	e638      	b.n	801266a <_scanf_float+0x86>
 80129f8:	080186c0 	.word	0x080186c0
 80129fc:	08018b30 	.word	0x08018b30

08012a00 <iprintf>:
 8012a00:	b40f      	push	{r0, r1, r2, r3}
 8012a02:	4b0a      	ldr	r3, [pc, #40]	; (8012a2c <iprintf+0x2c>)
 8012a04:	b513      	push	{r0, r1, r4, lr}
 8012a06:	681c      	ldr	r4, [r3, #0]
 8012a08:	b124      	cbz	r4, 8012a14 <iprintf+0x14>
 8012a0a:	69a3      	ldr	r3, [r4, #24]
 8012a0c:	b913      	cbnz	r3, 8012a14 <iprintf+0x14>
 8012a0e:	4620      	mov	r0, r4
 8012a10:	f001 fda8 	bl	8014564 <__sinit>
 8012a14:	ab05      	add	r3, sp, #20
 8012a16:	4620      	mov	r0, r4
 8012a18:	9a04      	ldr	r2, [sp, #16]
 8012a1a:	68a1      	ldr	r1, [r4, #8]
 8012a1c:	9301      	str	r3, [sp, #4]
 8012a1e:	f003 f901 	bl	8015c24 <_vfiprintf_r>
 8012a22:	b002      	add	sp, #8
 8012a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a28:	b004      	add	sp, #16
 8012a2a:	4770      	bx	lr
 8012a2c:	20000038 	.word	0x20000038

08012a30 <nanf>:
 8012a30:	4800      	ldr	r0, [pc, #0]	; (8012a34 <nanf+0x4>)
 8012a32:	4770      	bx	lr
 8012a34:	7fc00000 	.word	0x7fc00000

08012a38 <siprintf>:
 8012a38:	b40e      	push	{r1, r2, r3}
 8012a3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012a3e:	b500      	push	{lr}
 8012a40:	b09c      	sub	sp, #112	; 0x70
 8012a42:	ab1d      	add	r3, sp, #116	; 0x74
 8012a44:	9002      	str	r0, [sp, #8]
 8012a46:	9006      	str	r0, [sp, #24]
 8012a48:	9107      	str	r1, [sp, #28]
 8012a4a:	9104      	str	r1, [sp, #16]
 8012a4c:	4808      	ldr	r0, [pc, #32]	; (8012a70 <siprintf+0x38>)
 8012a4e:	4909      	ldr	r1, [pc, #36]	; (8012a74 <siprintf+0x3c>)
 8012a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a54:	9105      	str	r1, [sp, #20]
 8012a56:	6800      	ldr	r0, [r0, #0]
 8012a58:	a902      	add	r1, sp, #8
 8012a5a:	9301      	str	r3, [sp, #4]
 8012a5c:	f002 ffba 	bl	80159d4 <_svfiprintf_r>
 8012a60:	2200      	movs	r2, #0
 8012a62:	9b02      	ldr	r3, [sp, #8]
 8012a64:	701a      	strb	r2, [r3, #0]
 8012a66:	b01c      	add	sp, #112	; 0x70
 8012a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a6c:	b003      	add	sp, #12
 8012a6e:	4770      	bx	lr
 8012a70:	20000038 	.word	0x20000038
 8012a74:	ffff0208 	.word	0xffff0208

08012a78 <strncmp>:
 8012a78:	4603      	mov	r3, r0
 8012a7a:	b510      	push	{r4, lr}
 8012a7c:	b172      	cbz	r2, 8012a9c <strncmp+0x24>
 8012a7e:	3901      	subs	r1, #1
 8012a80:	1884      	adds	r4, r0, r2
 8012a82:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012a86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012a8a:	4290      	cmp	r0, r2
 8012a8c:	d101      	bne.n	8012a92 <strncmp+0x1a>
 8012a8e:	42a3      	cmp	r3, r4
 8012a90:	d101      	bne.n	8012a96 <strncmp+0x1e>
 8012a92:	1a80      	subs	r0, r0, r2
 8012a94:	bd10      	pop	{r4, pc}
 8012a96:	2800      	cmp	r0, #0
 8012a98:	d1f3      	bne.n	8012a82 <strncmp+0xa>
 8012a9a:	e7fa      	b.n	8012a92 <strncmp+0x1a>
 8012a9c:	4610      	mov	r0, r2
 8012a9e:	e7f9      	b.n	8012a94 <strncmp+0x1c>

08012aa0 <sulp>:
 8012aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aa4:	460f      	mov	r7, r1
 8012aa6:	4690      	mov	r8, r2
 8012aa8:	f002 fd00 	bl	80154ac <__ulp>
 8012aac:	4604      	mov	r4, r0
 8012aae:	460d      	mov	r5, r1
 8012ab0:	f1b8 0f00 	cmp.w	r8, #0
 8012ab4:	d011      	beq.n	8012ada <sulp+0x3a>
 8012ab6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8012aba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	dd0b      	ble.n	8012ada <sulp+0x3a>
 8012ac2:	2400      	movs	r4, #0
 8012ac4:	051b      	lsls	r3, r3, #20
 8012ac6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012aca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012ace:	4622      	mov	r2, r4
 8012ad0:	462b      	mov	r3, r5
 8012ad2:	f7ed fd47 	bl	8000564 <__aeabi_dmul>
 8012ad6:	4604      	mov	r4, r0
 8012ad8:	460d      	mov	r5, r1
 8012ada:	4620      	mov	r0, r4
 8012adc:	4629      	mov	r1, r5
 8012ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ae2:	0000      	movs	r0, r0
 8012ae4:	0000      	movs	r0, r0
	...

08012ae8 <_strtod_l>:
 8012ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aec:	469b      	mov	fp, r3
 8012aee:	2300      	movs	r3, #0
 8012af0:	b09f      	sub	sp, #124	; 0x7c
 8012af2:	931a      	str	r3, [sp, #104]	; 0x68
 8012af4:	4b9e      	ldr	r3, [pc, #632]	; (8012d70 <_strtod_l+0x288>)
 8012af6:	4682      	mov	sl, r0
 8012af8:	681f      	ldr	r7, [r3, #0]
 8012afa:	460e      	mov	r6, r1
 8012afc:	4638      	mov	r0, r7
 8012afe:	9215      	str	r2, [sp, #84]	; 0x54
 8012b00:	f7ed fb6c 	bl	80001dc <strlen>
 8012b04:	f04f 0800 	mov.w	r8, #0
 8012b08:	4604      	mov	r4, r0
 8012b0a:	f04f 0900 	mov.w	r9, #0
 8012b0e:	9619      	str	r6, [sp, #100]	; 0x64
 8012b10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012b12:	781a      	ldrb	r2, [r3, #0]
 8012b14:	2a2b      	cmp	r2, #43	; 0x2b
 8012b16:	d04c      	beq.n	8012bb2 <_strtod_l+0xca>
 8012b18:	d83a      	bhi.n	8012b90 <_strtod_l+0xa8>
 8012b1a:	2a0d      	cmp	r2, #13
 8012b1c:	d833      	bhi.n	8012b86 <_strtod_l+0x9e>
 8012b1e:	2a08      	cmp	r2, #8
 8012b20:	d833      	bhi.n	8012b8a <_strtod_l+0xa2>
 8012b22:	2a00      	cmp	r2, #0
 8012b24:	d03d      	beq.n	8012ba2 <_strtod_l+0xba>
 8012b26:	2300      	movs	r3, #0
 8012b28:	930a      	str	r3, [sp, #40]	; 0x28
 8012b2a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8012b2c:	782b      	ldrb	r3, [r5, #0]
 8012b2e:	2b30      	cmp	r3, #48	; 0x30
 8012b30:	f040 80aa 	bne.w	8012c88 <_strtod_l+0x1a0>
 8012b34:	786b      	ldrb	r3, [r5, #1]
 8012b36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012b3a:	2b58      	cmp	r3, #88	; 0x58
 8012b3c:	d166      	bne.n	8012c0c <_strtod_l+0x124>
 8012b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b40:	4650      	mov	r0, sl
 8012b42:	9301      	str	r3, [sp, #4]
 8012b44:	ab1a      	add	r3, sp, #104	; 0x68
 8012b46:	9300      	str	r3, [sp, #0]
 8012b48:	4a8a      	ldr	r2, [pc, #552]	; (8012d74 <_strtod_l+0x28c>)
 8012b4a:	f8cd b008 	str.w	fp, [sp, #8]
 8012b4e:	ab1b      	add	r3, sp, #108	; 0x6c
 8012b50:	a919      	add	r1, sp, #100	; 0x64
 8012b52:	f001 fe0d 	bl	8014770 <__gethex>
 8012b56:	f010 0607 	ands.w	r6, r0, #7
 8012b5a:	4604      	mov	r4, r0
 8012b5c:	d005      	beq.n	8012b6a <_strtod_l+0x82>
 8012b5e:	2e06      	cmp	r6, #6
 8012b60:	d129      	bne.n	8012bb6 <_strtod_l+0xce>
 8012b62:	2300      	movs	r3, #0
 8012b64:	3501      	adds	r5, #1
 8012b66:	9519      	str	r5, [sp, #100]	; 0x64
 8012b68:	930a      	str	r3, [sp, #40]	; 0x28
 8012b6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	f040 858a 	bne.w	8013686 <_strtod_l+0xb9e>
 8012b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b74:	b1d3      	cbz	r3, 8012bac <_strtod_l+0xc4>
 8012b76:	4642      	mov	r2, r8
 8012b78:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012b7c:	4610      	mov	r0, r2
 8012b7e:	4619      	mov	r1, r3
 8012b80:	b01f      	add	sp, #124	; 0x7c
 8012b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b86:	2a20      	cmp	r2, #32
 8012b88:	d1cd      	bne.n	8012b26 <_strtod_l+0x3e>
 8012b8a:	3301      	adds	r3, #1
 8012b8c:	9319      	str	r3, [sp, #100]	; 0x64
 8012b8e:	e7bf      	b.n	8012b10 <_strtod_l+0x28>
 8012b90:	2a2d      	cmp	r2, #45	; 0x2d
 8012b92:	d1c8      	bne.n	8012b26 <_strtod_l+0x3e>
 8012b94:	2201      	movs	r2, #1
 8012b96:	920a      	str	r2, [sp, #40]	; 0x28
 8012b98:	1c5a      	adds	r2, r3, #1
 8012b9a:	9219      	str	r2, [sp, #100]	; 0x64
 8012b9c:	785b      	ldrb	r3, [r3, #1]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d1c3      	bne.n	8012b2a <_strtod_l+0x42>
 8012ba2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ba4:	9619      	str	r6, [sp, #100]	; 0x64
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	f040 856b 	bne.w	8013682 <_strtod_l+0xb9a>
 8012bac:	4642      	mov	r2, r8
 8012bae:	464b      	mov	r3, r9
 8012bb0:	e7e4      	b.n	8012b7c <_strtod_l+0x94>
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	e7ef      	b.n	8012b96 <_strtod_l+0xae>
 8012bb6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012bb8:	b13a      	cbz	r2, 8012bca <_strtod_l+0xe2>
 8012bba:	2135      	movs	r1, #53	; 0x35
 8012bbc:	a81c      	add	r0, sp, #112	; 0x70
 8012bbe:	f002 fd79 	bl	80156b4 <__copybits>
 8012bc2:	4650      	mov	r0, sl
 8012bc4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012bc6:	f002 f941 	bl	8014e4c <_Bfree>
 8012bca:	3e01      	subs	r6, #1
 8012bcc:	2e04      	cmp	r6, #4
 8012bce:	d806      	bhi.n	8012bde <_strtod_l+0xf6>
 8012bd0:	e8df f006 	tbb	[pc, r6]
 8012bd4:	1714030a 	.word	0x1714030a
 8012bd8:	0a          	.byte	0x0a
 8012bd9:	00          	.byte	0x00
 8012bda:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8012bde:	0721      	lsls	r1, r4, #28
 8012be0:	d5c3      	bpl.n	8012b6a <_strtod_l+0x82>
 8012be2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8012be6:	e7c0      	b.n	8012b6a <_strtod_l+0x82>
 8012be8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012bea:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8012bee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012bf2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012bf6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8012bfa:	e7f0      	b.n	8012bde <_strtod_l+0xf6>
 8012bfc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012d78 <_strtod_l+0x290>
 8012c00:	e7ed      	b.n	8012bde <_strtod_l+0xf6>
 8012c02:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8012c06:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8012c0a:	e7e8      	b.n	8012bde <_strtod_l+0xf6>
 8012c0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012c0e:	1c5a      	adds	r2, r3, #1
 8012c10:	9219      	str	r2, [sp, #100]	; 0x64
 8012c12:	785b      	ldrb	r3, [r3, #1]
 8012c14:	2b30      	cmp	r3, #48	; 0x30
 8012c16:	d0f9      	beq.n	8012c0c <_strtod_l+0x124>
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d0a6      	beq.n	8012b6a <_strtod_l+0x82>
 8012c1c:	2301      	movs	r3, #1
 8012c1e:	9307      	str	r3, [sp, #28]
 8012c20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012c22:	220a      	movs	r2, #10
 8012c24:	9308      	str	r3, [sp, #32]
 8012c26:	2300      	movs	r3, #0
 8012c28:	469b      	mov	fp, r3
 8012c2a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8012c2e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8012c30:	7805      	ldrb	r5, [r0, #0]
 8012c32:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8012c36:	b2d9      	uxtb	r1, r3
 8012c38:	2909      	cmp	r1, #9
 8012c3a:	d927      	bls.n	8012c8c <_strtod_l+0x1a4>
 8012c3c:	4622      	mov	r2, r4
 8012c3e:	4639      	mov	r1, r7
 8012c40:	f7ff ff1a 	bl	8012a78 <strncmp>
 8012c44:	2800      	cmp	r0, #0
 8012c46:	d033      	beq.n	8012cb0 <_strtod_l+0x1c8>
 8012c48:	2000      	movs	r0, #0
 8012c4a:	462a      	mov	r2, r5
 8012c4c:	465c      	mov	r4, fp
 8012c4e:	4603      	mov	r3, r0
 8012c50:	9004      	str	r0, [sp, #16]
 8012c52:	2a65      	cmp	r2, #101	; 0x65
 8012c54:	d001      	beq.n	8012c5a <_strtod_l+0x172>
 8012c56:	2a45      	cmp	r2, #69	; 0x45
 8012c58:	d114      	bne.n	8012c84 <_strtod_l+0x19c>
 8012c5a:	b91c      	cbnz	r4, 8012c64 <_strtod_l+0x17c>
 8012c5c:	9a07      	ldr	r2, [sp, #28]
 8012c5e:	4302      	orrs	r2, r0
 8012c60:	d09f      	beq.n	8012ba2 <_strtod_l+0xba>
 8012c62:	2400      	movs	r4, #0
 8012c64:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8012c66:	1c72      	adds	r2, r6, #1
 8012c68:	9219      	str	r2, [sp, #100]	; 0x64
 8012c6a:	7872      	ldrb	r2, [r6, #1]
 8012c6c:	2a2b      	cmp	r2, #43	; 0x2b
 8012c6e:	d079      	beq.n	8012d64 <_strtod_l+0x27c>
 8012c70:	2a2d      	cmp	r2, #45	; 0x2d
 8012c72:	f000 8083 	beq.w	8012d7c <_strtod_l+0x294>
 8012c76:	2700      	movs	r7, #0
 8012c78:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8012c7c:	2909      	cmp	r1, #9
 8012c7e:	f240 8083 	bls.w	8012d88 <_strtod_l+0x2a0>
 8012c82:	9619      	str	r6, [sp, #100]	; 0x64
 8012c84:	2500      	movs	r5, #0
 8012c86:	e09f      	b.n	8012dc8 <_strtod_l+0x2e0>
 8012c88:	2300      	movs	r3, #0
 8012c8a:	e7c8      	b.n	8012c1e <_strtod_l+0x136>
 8012c8c:	f1bb 0f08 	cmp.w	fp, #8
 8012c90:	bfd5      	itete	le
 8012c92:	9906      	ldrle	r1, [sp, #24]
 8012c94:	9905      	ldrgt	r1, [sp, #20]
 8012c96:	fb02 3301 	mlale	r3, r2, r1, r3
 8012c9a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8012c9e:	f100 0001 	add.w	r0, r0, #1
 8012ca2:	bfd4      	ite	le
 8012ca4:	9306      	strle	r3, [sp, #24]
 8012ca6:	9305      	strgt	r3, [sp, #20]
 8012ca8:	f10b 0b01 	add.w	fp, fp, #1
 8012cac:	9019      	str	r0, [sp, #100]	; 0x64
 8012cae:	e7be      	b.n	8012c2e <_strtod_l+0x146>
 8012cb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012cb2:	191a      	adds	r2, r3, r4
 8012cb4:	9219      	str	r2, [sp, #100]	; 0x64
 8012cb6:	5d1a      	ldrb	r2, [r3, r4]
 8012cb8:	f1bb 0f00 	cmp.w	fp, #0
 8012cbc:	d036      	beq.n	8012d2c <_strtod_l+0x244>
 8012cbe:	465c      	mov	r4, fp
 8012cc0:	9004      	str	r0, [sp, #16]
 8012cc2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8012cc6:	2b09      	cmp	r3, #9
 8012cc8:	d912      	bls.n	8012cf0 <_strtod_l+0x208>
 8012cca:	2301      	movs	r3, #1
 8012ccc:	e7c1      	b.n	8012c52 <_strtod_l+0x16a>
 8012cce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012cd0:	3001      	adds	r0, #1
 8012cd2:	1c5a      	adds	r2, r3, #1
 8012cd4:	9219      	str	r2, [sp, #100]	; 0x64
 8012cd6:	785a      	ldrb	r2, [r3, #1]
 8012cd8:	2a30      	cmp	r2, #48	; 0x30
 8012cda:	d0f8      	beq.n	8012cce <_strtod_l+0x1e6>
 8012cdc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8012ce0:	2b08      	cmp	r3, #8
 8012ce2:	f200 84d5 	bhi.w	8013690 <_strtod_l+0xba8>
 8012ce6:	9004      	str	r0, [sp, #16]
 8012ce8:	2000      	movs	r0, #0
 8012cea:	4604      	mov	r4, r0
 8012cec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012cee:	9308      	str	r3, [sp, #32]
 8012cf0:	3a30      	subs	r2, #48	; 0x30
 8012cf2:	f100 0301 	add.w	r3, r0, #1
 8012cf6:	d013      	beq.n	8012d20 <_strtod_l+0x238>
 8012cf8:	9904      	ldr	r1, [sp, #16]
 8012cfa:	1905      	adds	r5, r0, r4
 8012cfc:	4419      	add	r1, r3
 8012cfe:	9104      	str	r1, [sp, #16]
 8012d00:	4623      	mov	r3, r4
 8012d02:	210a      	movs	r1, #10
 8012d04:	42ab      	cmp	r3, r5
 8012d06:	d113      	bne.n	8012d30 <_strtod_l+0x248>
 8012d08:	1823      	adds	r3, r4, r0
 8012d0a:	2b08      	cmp	r3, #8
 8012d0c:	f104 0401 	add.w	r4, r4, #1
 8012d10:	4404      	add	r4, r0
 8012d12:	dc1b      	bgt.n	8012d4c <_strtod_l+0x264>
 8012d14:	230a      	movs	r3, #10
 8012d16:	9906      	ldr	r1, [sp, #24]
 8012d18:	fb03 2301 	mla	r3, r3, r1, r2
 8012d1c:	9306      	str	r3, [sp, #24]
 8012d1e:	2300      	movs	r3, #0
 8012d20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012d22:	4618      	mov	r0, r3
 8012d24:	1c51      	adds	r1, r2, #1
 8012d26:	9119      	str	r1, [sp, #100]	; 0x64
 8012d28:	7852      	ldrb	r2, [r2, #1]
 8012d2a:	e7ca      	b.n	8012cc2 <_strtod_l+0x1da>
 8012d2c:	4658      	mov	r0, fp
 8012d2e:	e7d3      	b.n	8012cd8 <_strtod_l+0x1f0>
 8012d30:	2b08      	cmp	r3, #8
 8012d32:	dc04      	bgt.n	8012d3e <_strtod_l+0x256>
 8012d34:	9f06      	ldr	r7, [sp, #24]
 8012d36:	434f      	muls	r7, r1
 8012d38:	9706      	str	r7, [sp, #24]
 8012d3a:	3301      	adds	r3, #1
 8012d3c:	e7e2      	b.n	8012d04 <_strtod_l+0x21c>
 8012d3e:	1c5f      	adds	r7, r3, #1
 8012d40:	2f10      	cmp	r7, #16
 8012d42:	bfde      	ittt	le
 8012d44:	9f05      	ldrle	r7, [sp, #20]
 8012d46:	434f      	mulle	r7, r1
 8012d48:	9705      	strle	r7, [sp, #20]
 8012d4a:	e7f6      	b.n	8012d3a <_strtod_l+0x252>
 8012d4c:	2c10      	cmp	r4, #16
 8012d4e:	bfdf      	itttt	le
 8012d50:	230a      	movle	r3, #10
 8012d52:	9905      	ldrle	r1, [sp, #20]
 8012d54:	fb03 2301 	mlale	r3, r3, r1, r2
 8012d58:	9305      	strle	r3, [sp, #20]
 8012d5a:	e7e0      	b.n	8012d1e <_strtod_l+0x236>
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	9304      	str	r3, [sp, #16]
 8012d60:	2301      	movs	r3, #1
 8012d62:	e77b      	b.n	8012c5c <_strtod_l+0x174>
 8012d64:	2700      	movs	r7, #0
 8012d66:	1cb2      	adds	r2, r6, #2
 8012d68:	9219      	str	r2, [sp, #100]	; 0x64
 8012d6a:	78b2      	ldrb	r2, [r6, #2]
 8012d6c:	e784      	b.n	8012c78 <_strtod_l+0x190>
 8012d6e:	bf00      	nop
 8012d70:	08018974 	.word	0x08018974
 8012d74:	080186c8 	.word	0x080186c8
 8012d78:	7ff00000 	.word	0x7ff00000
 8012d7c:	2701      	movs	r7, #1
 8012d7e:	e7f2      	b.n	8012d66 <_strtod_l+0x27e>
 8012d80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012d82:	1c51      	adds	r1, r2, #1
 8012d84:	9119      	str	r1, [sp, #100]	; 0x64
 8012d86:	7852      	ldrb	r2, [r2, #1]
 8012d88:	2a30      	cmp	r2, #48	; 0x30
 8012d8a:	d0f9      	beq.n	8012d80 <_strtod_l+0x298>
 8012d8c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8012d90:	2908      	cmp	r1, #8
 8012d92:	f63f af77 	bhi.w	8012c84 <_strtod_l+0x19c>
 8012d96:	f04f 0e0a 	mov.w	lr, #10
 8012d9a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8012d9e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012da0:	9209      	str	r2, [sp, #36]	; 0x24
 8012da2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012da4:	1c51      	adds	r1, r2, #1
 8012da6:	9119      	str	r1, [sp, #100]	; 0x64
 8012da8:	7852      	ldrb	r2, [r2, #1]
 8012daa:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8012dae:	2d09      	cmp	r5, #9
 8012db0:	d935      	bls.n	8012e1e <_strtod_l+0x336>
 8012db2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012db4:	1b49      	subs	r1, r1, r5
 8012db6:	2908      	cmp	r1, #8
 8012db8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8012dbc:	dc02      	bgt.n	8012dc4 <_strtod_l+0x2dc>
 8012dbe:	4565      	cmp	r5, ip
 8012dc0:	bfa8      	it	ge
 8012dc2:	4665      	movge	r5, ip
 8012dc4:	b107      	cbz	r7, 8012dc8 <_strtod_l+0x2e0>
 8012dc6:	426d      	negs	r5, r5
 8012dc8:	2c00      	cmp	r4, #0
 8012dca:	d14c      	bne.n	8012e66 <_strtod_l+0x37e>
 8012dcc:	9907      	ldr	r1, [sp, #28]
 8012dce:	4301      	orrs	r1, r0
 8012dd0:	f47f aecb 	bne.w	8012b6a <_strtod_l+0x82>
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	f47f aee4 	bne.w	8012ba2 <_strtod_l+0xba>
 8012dda:	2a69      	cmp	r2, #105	; 0x69
 8012ddc:	d026      	beq.n	8012e2c <_strtod_l+0x344>
 8012dde:	dc23      	bgt.n	8012e28 <_strtod_l+0x340>
 8012de0:	2a49      	cmp	r2, #73	; 0x49
 8012de2:	d023      	beq.n	8012e2c <_strtod_l+0x344>
 8012de4:	2a4e      	cmp	r2, #78	; 0x4e
 8012de6:	f47f aedc 	bne.w	8012ba2 <_strtod_l+0xba>
 8012dea:	499d      	ldr	r1, [pc, #628]	; (8013060 <_strtod_l+0x578>)
 8012dec:	a819      	add	r0, sp, #100	; 0x64
 8012dee:	f001 ff0d 	bl	8014c0c <__match>
 8012df2:	2800      	cmp	r0, #0
 8012df4:	f43f aed5 	beq.w	8012ba2 <_strtod_l+0xba>
 8012df8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012dfa:	781b      	ldrb	r3, [r3, #0]
 8012dfc:	2b28      	cmp	r3, #40	; 0x28
 8012dfe:	d12c      	bne.n	8012e5a <_strtod_l+0x372>
 8012e00:	4998      	ldr	r1, [pc, #608]	; (8013064 <_strtod_l+0x57c>)
 8012e02:	aa1c      	add	r2, sp, #112	; 0x70
 8012e04:	a819      	add	r0, sp, #100	; 0x64
 8012e06:	f001 ff15 	bl	8014c34 <__hexnan>
 8012e0a:	2805      	cmp	r0, #5
 8012e0c:	d125      	bne.n	8012e5a <_strtod_l+0x372>
 8012e0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e10:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8012e14:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8012e18:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8012e1c:	e6a5      	b.n	8012b6a <_strtod_l+0x82>
 8012e1e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8012e22:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8012e26:	e7bc      	b.n	8012da2 <_strtod_l+0x2ba>
 8012e28:	2a6e      	cmp	r2, #110	; 0x6e
 8012e2a:	e7dc      	b.n	8012de6 <_strtod_l+0x2fe>
 8012e2c:	498e      	ldr	r1, [pc, #568]	; (8013068 <_strtod_l+0x580>)
 8012e2e:	a819      	add	r0, sp, #100	; 0x64
 8012e30:	f001 feec 	bl	8014c0c <__match>
 8012e34:	2800      	cmp	r0, #0
 8012e36:	f43f aeb4 	beq.w	8012ba2 <_strtod_l+0xba>
 8012e3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e3c:	498b      	ldr	r1, [pc, #556]	; (801306c <_strtod_l+0x584>)
 8012e3e:	3b01      	subs	r3, #1
 8012e40:	a819      	add	r0, sp, #100	; 0x64
 8012e42:	9319      	str	r3, [sp, #100]	; 0x64
 8012e44:	f001 fee2 	bl	8014c0c <__match>
 8012e48:	b910      	cbnz	r0, 8012e50 <_strtod_l+0x368>
 8012e4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e4c:	3301      	adds	r3, #1
 8012e4e:	9319      	str	r3, [sp, #100]	; 0x64
 8012e50:	f04f 0800 	mov.w	r8, #0
 8012e54:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8013070 <_strtod_l+0x588>
 8012e58:	e687      	b.n	8012b6a <_strtod_l+0x82>
 8012e5a:	4886      	ldr	r0, [pc, #536]	; (8013074 <_strtod_l+0x58c>)
 8012e5c:	f003 f812 	bl	8015e84 <nan>
 8012e60:	4680      	mov	r8, r0
 8012e62:	4689      	mov	r9, r1
 8012e64:	e681      	b.n	8012b6a <_strtod_l+0x82>
 8012e66:	9b04      	ldr	r3, [sp, #16]
 8012e68:	f1bb 0f00 	cmp.w	fp, #0
 8012e6c:	bf08      	it	eq
 8012e6e:	46a3      	moveq	fp, r4
 8012e70:	1aeb      	subs	r3, r5, r3
 8012e72:	2c10      	cmp	r4, #16
 8012e74:	9806      	ldr	r0, [sp, #24]
 8012e76:	4626      	mov	r6, r4
 8012e78:	9307      	str	r3, [sp, #28]
 8012e7a:	bfa8      	it	ge
 8012e7c:	2610      	movge	r6, #16
 8012e7e:	f7ed faf7 	bl	8000470 <__aeabi_ui2d>
 8012e82:	2c09      	cmp	r4, #9
 8012e84:	4680      	mov	r8, r0
 8012e86:	4689      	mov	r9, r1
 8012e88:	dd13      	ble.n	8012eb2 <_strtod_l+0x3ca>
 8012e8a:	4b7b      	ldr	r3, [pc, #492]	; (8013078 <_strtod_l+0x590>)
 8012e8c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012e90:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012e94:	f7ed fb66 	bl	8000564 <__aeabi_dmul>
 8012e98:	4680      	mov	r8, r0
 8012e9a:	9805      	ldr	r0, [sp, #20]
 8012e9c:	4689      	mov	r9, r1
 8012e9e:	f7ed fae7 	bl	8000470 <__aeabi_ui2d>
 8012ea2:	4602      	mov	r2, r0
 8012ea4:	460b      	mov	r3, r1
 8012ea6:	4640      	mov	r0, r8
 8012ea8:	4649      	mov	r1, r9
 8012eaa:	f7ed f9a5 	bl	80001f8 <__adddf3>
 8012eae:	4680      	mov	r8, r0
 8012eb0:	4689      	mov	r9, r1
 8012eb2:	2c0f      	cmp	r4, #15
 8012eb4:	dc36      	bgt.n	8012f24 <_strtod_l+0x43c>
 8012eb6:	9b07      	ldr	r3, [sp, #28]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	f43f ae56 	beq.w	8012b6a <_strtod_l+0x82>
 8012ebe:	dd22      	ble.n	8012f06 <_strtod_l+0x41e>
 8012ec0:	2b16      	cmp	r3, #22
 8012ec2:	dc09      	bgt.n	8012ed8 <_strtod_l+0x3f0>
 8012ec4:	496c      	ldr	r1, [pc, #432]	; (8013078 <_strtod_l+0x590>)
 8012ec6:	4642      	mov	r2, r8
 8012ec8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012ecc:	464b      	mov	r3, r9
 8012ece:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ed2:	f7ed fb47 	bl	8000564 <__aeabi_dmul>
 8012ed6:	e7c3      	b.n	8012e60 <_strtod_l+0x378>
 8012ed8:	9a07      	ldr	r2, [sp, #28]
 8012eda:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8012ede:	4293      	cmp	r3, r2
 8012ee0:	db20      	blt.n	8012f24 <_strtod_l+0x43c>
 8012ee2:	4d65      	ldr	r5, [pc, #404]	; (8013078 <_strtod_l+0x590>)
 8012ee4:	f1c4 040f 	rsb	r4, r4, #15
 8012ee8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8012eec:	4642      	mov	r2, r8
 8012eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ef2:	464b      	mov	r3, r9
 8012ef4:	f7ed fb36 	bl	8000564 <__aeabi_dmul>
 8012ef8:	9b07      	ldr	r3, [sp, #28]
 8012efa:	1b1c      	subs	r4, r3, r4
 8012efc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8012f00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012f04:	e7e5      	b.n	8012ed2 <_strtod_l+0x3ea>
 8012f06:	9b07      	ldr	r3, [sp, #28]
 8012f08:	3316      	adds	r3, #22
 8012f0a:	db0b      	blt.n	8012f24 <_strtod_l+0x43c>
 8012f0c:	9b04      	ldr	r3, [sp, #16]
 8012f0e:	4640      	mov	r0, r8
 8012f10:	1b5d      	subs	r5, r3, r5
 8012f12:	4b59      	ldr	r3, [pc, #356]	; (8013078 <_strtod_l+0x590>)
 8012f14:	4649      	mov	r1, r9
 8012f16:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012f1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012f1e:	f7ed fc4b 	bl	80007b8 <__aeabi_ddiv>
 8012f22:	e79d      	b.n	8012e60 <_strtod_l+0x378>
 8012f24:	9b07      	ldr	r3, [sp, #28]
 8012f26:	1ba6      	subs	r6, r4, r6
 8012f28:	441e      	add	r6, r3
 8012f2a:	2e00      	cmp	r6, #0
 8012f2c:	dd74      	ble.n	8013018 <_strtod_l+0x530>
 8012f2e:	f016 030f 	ands.w	r3, r6, #15
 8012f32:	d00a      	beq.n	8012f4a <_strtod_l+0x462>
 8012f34:	4950      	ldr	r1, [pc, #320]	; (8013078 <_strtod_l+0x590>)
 8012f36:	4642      	mov	r2, r8
 8012f38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012f3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f40:	464b      	mov	r3, r9
 8012f42:	f7ed fb0f 	bl	8000564 <__aeabi_dmul>
 8012f46:	4680      	mov	r8, r0
 8012f48:	4689      	mov	r9, r1
 8012f4a:	f036 060f 	bics.w	r6, r6, #15
 8012f4e:	d052      	beq.n	8012ff6 <_strtod_l+0x50e>
 8012f50:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8012f54:	dd27      	ble.n	8012fa6 <_strtod_l+0x4be>
 8012f56:	f04f 0b00 	mov.w	fp, #0
 8012f5a:	f8cd b010 	str.w	fp, [sp, #16]
 8012f5e:	f8cd b020 	str.w	fp, [sp, #32]
 8012f62:	f8cd b018 	str.w	fp, [sp, #24]
 8012f66:	2322      	movs	r3, #34	; 0x22
 8012f68:	f04f 0800 	mov.w	r8, #0
 8012f6c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8013070 <_strtod_l+0x588>
 8012f70:	f8ca 3000 	str.w	r3, [sl]
 8012f74:	9b08      	ldr	r3, [sp, #32]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	f43f adf7 	beq.w	8012b6a <_strtod_l+0x82>
 8012f7c:	4650      	mov	r0, sl
 8012f7e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012f80:	f001 ff64 	bl	8014e4c <_Bfree>
 8012f84:	4650      	mov	r0, sl
 8012f86:	9906      	ldr	r1, [sp, #24]
 8012f88:	f001 ff60 	bl	8014e4c <_Bfree>
 8012f8c:	4650      	mov	r0, sl
 8012f8e:	9904      	ldr	r1, [sp, #16]
 8012f90:	f001 ff5c 	bl	8014e4c <_Bfree>
 8012f94:	4650      	mov	r0, sl
 8012f96:	9908      	ldr	r1, [sp, #32]
 8012f98:	f001 ff58 	bl	8014e4c <_Bfree>
 8012f9c:	4659      	mov	r1, fp
 8012f9e:	4650      	mov	r0, sl
 8012fa0:	f001 ff54 	bl	8014e4c <_Bfree>
 8012fa4:	e5e1      	b.n	8012b6a <_strtod_l+0x82>
 8012fa6:	4b35      	ldr	r3, [pc, #212]	; (801307c <_strtod_l+0x594>)
 8012fa8:	4640      	mov	r0, r8
 8012faa:	9305      	str	r3, [sp, #20]
 8012fac:	2300      	movs	r3, #0
 8012fae:	4649      	mov	r1, r9
 8012fb0:	461f      	mov	r7, r3
 8012fb2:	1136      	asrs	r6, r6, #4
 8012fb4:	2e01      	cmp	r6, #1
 8012fb6:	dc21      	bgt.n	8012ffc <_strtod_l+0x514>
 8012fb8:	b10b      	cbz	r3, 8012fbe <_strtod_l+0x4d6>
 8012fba:	4680      	mov	r8, r0
 8012fbc:	4689      	mov	r9, r1
 8012fbe:	4b2f      	ldr	r3, [pc, #188]	; (801307c <_strtod_l+0x594>)
 8012fc0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8012fc4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012fc8:	4642      	mov	r2, r8
 8012fca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012fce:	464b      	mov	r3, r9
 8012fd0:	f7ed fac8 	bl	8000564 <__aeabi_dmul>
 8012fd4:	4b26      	ldr	r3, [pc, #152]	; (8013070 <_strtod_l+0x588>)
 8012fd6:	460a      	mov	r2, r1
 8012fd8:	400b      	ands	r3, r1
 8012fda:	4929      	ldr	r1, [pc, #164]	; (8013080 <_strtod_l+0x598>)
 8012fdc:	4680      	mov	r8, r0
 8012fde:	428b      	cmp	r3, r1
 8012fe0:	d8b9      	bhi.n	8012f56 <_strtod_l+0x46e>
 8012fe2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012fe6:	428b      	cmp	r3, r1
 8012fe8:	bf86      	itte	hi
 8012fea:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8012fee:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8013084 <_strtod_l+0x59c>
 8012ff2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	9305      	str	r3, [sp, #20]
 8012ffa:	e07f      	b.n	80130fc <_strtod_l+0x614>
 8012ffc:	07f2      	lsls	r2, r6, #31
 8012ffe:	d505      	bpl.n	801300c <_strtod_l+0x524>
 8013000:	9b05      	ldr	r3, [sp, #20]
 8013002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013006:	f7ed faad 	bl	8000564 <__aeabi_dmul>
 801300a:	2301      	movs	r3, #1
 801300c:	9a05      	ldr	r2, [sp, #20]
 801300e:	3701      	adds	r7, #1
 8013010:	3208      	adds	r2, #8
 8013012:	1076      	asrs	r6, r6, #1
 8013014:	9205      	str	r2, [sp, #20]
 8013016:	e7cd      	b.n	8012fb4 <_strtod_l+0x4cc>
 8013018:	d0ed      	beq.n	8012ff6 <_strtod_l+0x50e>
 801301a:	4276      	negs	r6, r6
 801301c:	f016 020f 	ands.w	r2, r6, #15
 8013020:	d00a      	beq.n	8013038 <_strtod_l+0x550>
 8013022:	4b15      	ldr	r3, [pc, #84]	; (8013078 <_strtod_l+0x590>)
 8013024:	4640      	mov	r0, r8
 8013026:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801302a:	4649      	mov	r1, r9
 801302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013030:	f7ed fbc2 	bl	80007b8 <__aeabi_ddiv>
 8013034:	4680      	mov	r8, r0
 8013036:	4689      	mov	r9, r1
 8013038:	1136      	asrs	r6, r6, #4
 801303a:	d0dc      	beq.n	8012ff6 <_strtod_l+0x50e>
 801303c:	2e1f      	cmp	r6, #31
 801303e:	dd23      	ble.n	8013088 <_strtod_l+0x5a0>
 8013040:	f04f 0b00 	mov.w	fp, #0
 8013044:	f8cd b010 	str.w	fp, [sp, #16]
 8013048:	f8cd b020 	str.w	fp, [sp, #32]
 801304c:	f8cd b018 	str.w	fp, [sp, #24]
 8013050:	2322      	movs	r3, #34	; 0x22
 8013052:	f04f 0800 	mov.w	r8, #0
 8013056:	f04f 0900 	mov.w	r9, #0
 801305a:	f8ca 3000 	str.w	r3, [sl]
 801305e:	e789      	b.n	8012f74 <_strtod_l+0x48c>
 8013060:	08018699 	.word	0x08018699
 8013064:	080186dc 	.word	0x080186dc
 8013068:	08018691 	.word	0x08018691
 801306c:	0801881c 	.word	0x0801881c
 8013070:	7ff00000 	.word	0x7ff00000
 8013074:	08018b30 	.word	0x08018b30
 8013078:	08018a10 	.word	0x08018a10
 801307c:	080189e8 	.word	0x080189e8
 8013080:	7ca00000 	.word	0x7ca00000
 8013084:	7fefffff 	.word	0x7fefffff
 8013088:	f016 0310 	ands.w	r3, r6, #16
 801308c:	bf18      	it	ne
 801308e:	236a      	movne	r3, #106	; 0x6a
 8013090:	4640      	mov	r0, r8
 8013092:	9305      	str	r3, [sp, #20]
 8013094:	4649      	mov	r1, r9
 8013096:	2300      	movs	r3, #0
 8013098:	4fb0      	ldr	r7, [pc, #704]	; (801335c <_strtod_l+0x874>)
 801309a:	07f2      	lsls	r2, r6, #31
 801309c:	d504      	bpl.n	80130a8 <_strtod_l+0x5c0>
 801309e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80130a2:	f7ed fa5f 	bl	8000564 <__aeabi_dmul>
 80130a6:	2301      	movs	r3, #1
 80130a8:	1076      	asrs	r6, r6, #1
 80130aa:	f107 0708 	add.w	r7, r7, #8
 80130ae:	d1f4      	bne.n	801309a <_strtod_l+0x5b2>
 80130b0:	b10b      	cbz	r3, 80130b6 <_strtod_l+0x5ce>
 80130b2:	4680      	mov	r8, r0
 80130b4:	4689      	mov	r9, r1
 80130b6:	9b05      	ldr	r3, [sp, #20]
 80130b8:	b1c3      	cbz	r3, 80130ec <_strtod_l+0x604>
 80130ba:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80130be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	4649      	mov	r1, r9
 80130c6:	dd11      	ble.n	80130ec <_strtod_l+0x604>
 80130c8:	2b1f      	cmp	r3, #31
 80130ca:	f340 8127 	ble.w	801331c <_strtod_l+0x834>
 80130ce:	2b34      	cmp	r3, #52	; 0x34
 80130d0:	bfd8      	it	le
 80130d2:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80130d6:	f04f 0800 	mov.w	r8, #0
 80130da:	bfcf      	iteee	gt
 80130dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80130e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80130e4:	fa03 f202 	lslle.w	r2, r3, r2
 80130e8:	ea02 0901 	andle.w	r9, r2, r1
 80130ec:	2200      	movs	r2, #0
 80130ee:	2300      	movs	r3, #0
 80130f0:	4640      	mov	r0, r8
 80130f2:	4649      	mov	r1, r9
 80130f4:	f7ed fc9e 	bl	8000a34 <__aeabi_dcmpeq>
 80130f8:	2800      	cmp	r0, #0
 80130fa:	d1a1      	bne.n	8013040 <_strtod_l+0x558>
 80130fc:	9b06      	ldr	r3, [sp, #24]
 80130fe:	465a      	mov	r2, fp
 8013100:	9300      	str	r3, [sp, #0]
 8013102:	4650      	mov	r0, sl
 8013104:	4623      	mov	r3, r4
 8013106:	9908      	ldr	r1, [sp, #32]
 8013108:	f001 ff08 	bl	8014f1c <__s2b>
 801310c:	9008      	str	r0, [sp, #32]
 801310e:	2800      	cmp	r0, #0
 8013110:	f43f af21 	beq.w	8012f56 <_strtod_l+0x46e>
 8013114:	9b04      	ldr	r3, [sp, #16]
 8013116:	f04f 0b00 	mov.w	fp, #0
 801311a:	1b5d      	subs	r5, r3, r5
 801311c:	9b07      	ldr	r3, [sp, #28]
 801311e:	f8cd b010 	str.w	fp, [sp, #16]
 8013122:	2b00      	cmp	r3, #0
 8013124:	bfb4      	ite	lt
 8013126:	462b      	movlt	r3, r5
 8013128:	2300      	movge	r3, #0
 801312a:	930e      	str	r3, [sp, #56]	; 0x38
 801312c:	9b07      	ldr	r3, [sp, #28]
 801312e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013132:	9314      	str	r3, [sp, #80]	; 0x50
 8013134:	9b08      	ldr	r3, [sp, #32]
 8013136:	4650      	mov	r0, sl
 8013138:	6859      	ldr	r1, [r3, #4]
 801313a:	f001 fe47 	bl	8014dcc <_Balloc>
 801313e:	9006      	str	r0, [sp, #24]
 8013140:	2800      	cmp	r0, #0
 8013142:	f43f af10 	beq.w	8012f66 <_strtod_l+0x47e>
 8013146:	9b08      	ldr	r3, [sp, #32]
 8013148:	300c      	adds	r0, #12
 801314a:	691a      	ldr	r2, [r3, #16]
 801314c:	f103 010c 	add.w	r1, r3, #12
 8013150:	3202      	adds	r2, #2
 8013152:	0092      	lsls	r2, r2, #2
 8013154:	f7fe fdd0 	bl	8011cf8 <memcpy>
 8013158:	ab1c      	add	r3, sp, #112	; 0x70
 801315a:	9301      	str	r3, [sp, #4]
 801315c:	ab1b      	add	r3, sp, #108	; 0x6c
 801315e:	9300      	str	r3, [sp, #0]
 8013160:	4642      	mov	r2, r8
 8013162:	464b      	mov	r3, r9
 8013164:	4650      	mov	r0, sl
 8013166:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 801316a:	f002 fa19 	bl	80155a0 <__d2b>
 801316e:	901a      	str	r0, [sp, #104]	; 0x68
 8013170:	2800      	cmp	r0, #0
 8013172:	f43f aef8 	beq.w	8012f66 <_strtod_l+0x47e>
 8013176:	2101      	movs	r1, #1
 8013178:	4650      	mov	r0, sl
 801317a:	f001 ff67 	bl	801504c <__i2b>
 801317e:	4603      	mov	r3, r0
 8013180:	9004      	str	r0, [sp, #16]
 8013182:	2800      	cmp	r0, #0
 8013184:	f43f aeef 	beq.w	8012f66 <_strtod_l+0x47e>
 8013188:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801318a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801318c:	2d00      	cmp	r5, #0
 801318e:	bfab      	itete	ge
 8013190:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013192:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8013194:	18ee      	addge	r6, r5, r3
 8013196:	1b5c      	sublt	r4, r3, r5
 8013198:	9b05      	ldr	r3, [sp, #20]
 801319a:	bfa8      	it	ge
 801319c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 801319e:	eba5 0503 	sub.w	r5, r5, r3
 80131a2:	4415      	add	r5, r2
 80131a4:	4b6e      	ldr	r3, [pc, #440]	; (8013360 <_strtod_l+0x878>)
 80131a6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80131aa:	bfb8      	it	lt
 80131ac:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80131ae:	429d      	cmp	r5, r3
 80131b0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80131b4:	f280 80c4 	bge.w	8013340 <_strtod_l+0x858>
 80131b8:	1b5b      	subs	r3, r3, r5
 80131ba:	2b1f      	cmp	r3, #31
 80131bc:	f04f 0701 	mov.w	r7, #1
 80131c0:	eba2 0203 	sub.w	r2, r2, r3
 80131c4:	f300 80b1 	bgt.w	801332a <_strtod_l+0x842>
 80131c8:	2500      	movs	r5, #0
 80131ca:	fa07 f303 	lsl.w	r3, r7, r3
 80131ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80131d0:	18b7      	adds	r7, r6, r2
 80131d2:	9b05      	ldr	r3, [sp, #20]
 80131d4:	42be      	cmp	r6, r7
 80131d6:	4414      	add	r4, r2
 80131d8:	441c      	add	r4, r3
 80131da:	4633      	mov	r3, r6
 80131dc:	bfa8      	it	ge
 80131de:	463b      	movge	r3, r7
 80131e0:	42a3      	cmp	r3, r4
 80131e2:	bfa8      	it	ge
 80131e4:	4623      	movge	r3, r4
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	bfc2      	ittt	gt
 80131ea:	1aff      	subgt	r7, r7, r3
 80131ec:	1ae4      	subgt	r4, r4, r3
 80131ee:	1af6      	subgt	r6, r6, r3
 80131f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	dd17      	ble.n	8013226 <_strtod_l+0x73e>
 80131f6:	461a      	mov	r2, r3
 80131f8:	4650      	mov	r0, sl
 80131fa:	9904      	ldr	r1, [sp, #16]
 80131fc:	f001 ffe4 	bl	80151c8 <__pow5mult>
 8013200:	9004      	str	r0, [sp, #16]
 8013202:	2800      	cmp	r0, #0
 8013204:	f43f aeaf 	beq.w	8012f66 <_strtod_l+0x47e>
 8013208:	4601      	mov	r1, r0
 801320a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801320c:	4650      	mov	r0, sl
 801320e:	f001 ff33 	bl	8015078 <__multiply>
 8013212:	9009      	str	r0, [sp, #36]	; 0x24
 8013214:	2800      	cmp	r0, #0
 8013216:	f43f aea6 	beq.w	8012f66 <_strtod_l+0x47e>
 801321a:	4650      	mov	r0, sl
 801321c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801321e:	f001 fe15 	bl	8014e4c <_Bfree>
 8013222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013224:	931a      	str	r3, [sp, #104]	; 0x68
 8013226:	2f00      	cmp	r7, #0
 8013228:	f300 808e 	bgt.w	8013348 <_strtod_l+0x860>
 801322c:	9b07      	ldr	r3, [sp, #28]
 801322e:	2b00      	cmp	r3, #0
 8013230:	dd08      	ble.n	8013244 <_strtod_l+0x75c>
 8013232:	4650      	mov	r0, sl
 8013234:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013236:	9906      	ldr	r1, [sp, #24]
 8013238:	f001 ffc6 	bl	80151c8 <__pow5mult>
 801323c:	9006      	str	r0, [sp, #24]
 801323e:	2800      	cmp	r0, #0
 8013240:	f43f ae91 	beq.w	8012f66 <_strtod_l+0x47e>
 8013244:	2c00      	cmp	r4, #0
 8013246:	dd08      	ble.n	801325a <_strtod_l+0x772>
 8013248:	4622      	mov	r2, r4
 801324a:	4650      	mov	r0, sl
 801324c:	9906      	ldr	r1, [sp, #24]
 801324e:	f002 f815 	bl	801527c <__lshift>
 8013252:	9006      	str	r0, [sp, #24]
 8013254:	2800      	cmp	r0, #0
 8013256:	f43f ae86 	beq.w	8012f66 <_strtod_l+0x47e>
 801325a:	2e00      	cmp	r6, #0
 801325c:	dd08      	ble.n	8013270 <_strtod_l+0x788>
 801325e:	4632      	mov	r2, r6
 8013260:	4650      	mov	r0, sl
 8013262:	9904      	ldr	r1, [sp, #16]
 8013264:	f002 f80a 	bl	801527c <__lshift>
 8013268:	9004      	str	r0, [sp, #16]
 801326a:	2800      	cmp	r0, #0
 801326c:	f43f ae7b 	beq.w	8012f66 <_strtod_l+0x47e>
 8013270:	4650      	mov	r0, sl
 8013272:	9a06      	ldr	r2, [sp, #24]
 8013274:	991a      	ldr	r1, [sp, #104]	; 0x68
 8013276:	f002 f88d 	bl	8015394 <__mdiff>
 801327a:	4683      	mov	fp, r0
 801327c:	2800      	cmp	r0, #0
 801327e:	f43f ae72 	beq.w	8012f66 <_strtod_l+0x47e>
 8013282:	2400      	movs	r4, #0
 8013284:	68c3      	ldr	r3, [r0, #12]
 8013286:	9904      	ldr	r1, [sp, #16]
 8013288:	60c4      	str	r4, [r0, #12]
 801328a:	930b      	str	r3, [sp, #44]	; 0x2c
 801328c:	f002 f866 	bl	801535c <__mcmp>
 8013290:	42a0      	cmp	r0, r4
 8013292:	da6b      	bge.n	801336c <_strtod_l+0x884>
 8013294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013296:	ea53 0308 	orrs.w	r3, r3, r8
 801329a:	f040 8091 	bne.w	80133c0 <_strtod_l+0x8d8>
 801329e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	f040 808c 	bne.w	80133c0 <_strtod_l+0x8d8>
 80132a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80132ac:	0d1b      	lsrs	r3, r3, #20
 80132ae:	051b      	lsls	r3, r3, #20
 80132b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80132b4:	f240 8084 	bls.w	80133c0 <_strtod_l+0x8d8>
 80132b8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80132bc:	b91b      	cbnz	r3, 80132c6 <_strtod_l+0x7de>
 80132be:	f8db 3010 	ldr.w	r3, [fp, #16]
 80132c2:	2b01      	cmp	r3, #1
 80132c4:	dd7c      	ble.n	80133c0 <_strtod_l+0x8d8>
 80132c6:	4659      	mov	r1, fp
 80132c8:	2201      	movs	r2, #1
 80132ca:	4650      	mov	r0, sl
 80132cc:	f001 ffd6 	bl	801527c <__lshift>
 80132d0:	9904      	ldr	r1, [sp, #16]
 80132d2:	4683      	mov	fp, r0
 80132d4:	f002 f842 	bl	801535c <__mcmp>
 80132d8:	2800      	cmp	r0, #0
 80132da:	dd71      	ble.n	80133c0 <_strtod_l+0x8d8>
 80132dc:	9905      	ldr	r1, [sp, #20]
 80132de:	464b      	mov	r3, r9
 80132e0:	4a20      	ldr	r2, [pc, #128]	; (8013364 <_strtod_l+0x87c>)
 80132e2:	2900      	cmp	r1, #0
 80132e4:	f000 808c 	beq.w	8013400 <_strtod_l+0x918>
 80132e8:	ea02 0109 	and.w	r1, r2, r9
 80132ec:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80132f0:	f300 8086 	bgt.w	8013400 <_strtod_l+0x918>
 80132f4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80132f8:	f77f aeaa 	ble.w	8013050 <_strtod_l+0x568>
 80132fc:	4640      	mov	r0, r8
 80132fe:	4649      	mov	r1, r9
 8013300:	4b19      	ldr	r3, [pc, #100]	; (8013368 <_strtod_l+0x880>)
 8013302:	2200      	movs	r2, #0
 8013304:	f7ed f92e 	bl	8000564 <__aeabi_dmul>
 8013308:	460b      	mov	r3, r1
 801330a:	4303      	orrs	r3, r0
 801330c:	bf08      	it	eq
 801330e:	2322      	moveq	r3, #34	; 0x22
 8013310:	4680      	mov	r8, r0
 8013312:	4689      	mov	r9, r1
 8013314:	bf08      	it	eq
 8013316:	f8ca 3000 	streq.w	r3, [sl]
 801331a:	e62f      	b.n	8012f7c <_strtod_l+0x494>
 801331c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013320:	fa02 f303 	lsl.w	r3, r2, r3
 8013324:	ea03 0808 	and.w	r8, r3, r8
 8013328:	e6e0      	b.n	80130ec <_strtod_l+0x604>
 801332a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 801332e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8013332:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8013336:	35e2      	adds	r5, #226	; 0xe2
 8013338:	fa07 f505 	lsl.w	r5, r7, r5
 801333c:	970f      	str	r7, [sp, #60]	; 0x3c
 801333e:	e747      	b.n	80131d0 <_strtod_l+0x6e8>
 8013340:	2301      	movs	r3, #1
 8013342:	2500      	movs	r5, #0
 8013344:	930f      	str	r3, [sp, #60]	; 0x3c
 8013346:	e743      	b.n	80131d0 <_strtod_l+0x6e8>
 8013348:	463a      	mov	r2, r7
 801334a:	4650      	mov	r0, sl
 801334c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801334e:	f001 ff95 	bl	801527c <__lshift>
 8013352:	901a      	str	r0, [sp, #104]	; 0x68
 8013354:	2800      	cmp	r0, #0
 8013356:	f47f af69 	bne.w	801322c <_strtod_l+0x744>
 801335a:	e604      	b.n	8012f66 <_strtod_l+0x47e>
 801335c:	080186f0 	.word	0x080186f0
 8013360:	fffffc02 	.word	0xfffffc02
 8013364:	7ff00000 	.word	0x7ff00000
 8013368:	39500000 	.word	0x39500000
 801336c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013370:	d165      	bne.n	801343e <_strtod_l+0x956>
 8013372:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013374:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013378:	b35a      	cbz	r2, 80133d2 <_strtod_l+0x8ea>
 801337a:	4a99      	ldr	r2, [pc, #612]	; (80135e0 <_strtod_l+0xaf8>)
 801337c:	4293      	cmp	r3, r2
 801337e:	d12b      	bne.n	80133d8 <_strtod_l+0x8f0>
 8013380:	9b05      	ldr	r3, [sp, #20]
 8013382:	4641      	mov	r1, r8
 8013384:	b303      	cbz	r3, 80133c8 <_strtod_l+0x8e0>
 8013386:	464a      	mov	r2, r9
 8013388:	4b96      	ldr	r3, [pc, #600]	; (80135e4 <_strtod_l+0xafc>)
 801338a:	4013      	ands	r3, r2
 801338c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013394:	d81b      	bhi.n	80133ce <_strtod_l+0x8e6>
 8013396:	0d1b      	lsrs	r3, r3, #20
 8013398:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801339c:	fa02 f303 	lsl.w	r3, r2, r3
 80133a0:	4299      	cmp	r1, r3
 80133a2:	d119      	bne.n	80133d8 <_strtod_l+0x8f0>
 80133a4:	4b90      	ldr	r3, [pc, #576]	; (80135e8 <_strtod_l+0xb00>)
 80133a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80133a8:	429a      	cmp	r2, r3
 80133aa:	d102      	bne.n	80133b2 <_strtod_l+0x8ca>
 80133ac:	3101      	adds	r1, #1
 80133ae:	f43f adda 	beq.w	8012f66 <_strtod_l+0x47e>
 80133b2:	f04f 0800 	mov.w	r8, #0
 80133b6:	4b8b      	ldr	r3, [pc, #556]	; (80135e4 <_strtod_l+0xafc>)
 80133b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80133ba:	401a      	ands	r2, r3
 80133bc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80133c0:	9b05      	ldr	r3, [sp, #20]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d19a      	bne.n	80132fc <_strtod_l+0x814>
 80133c6:	e5d9      	b.n	8012f7c <_strtod_l+0x494>
 80133c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133cc:	e7e8      	b.n	80133a0 <_strtod_l+0x8b8>
 80133ce:	4613      	mov	r3, r2
 80133d0:	e7e6      	b.n	80133a0 <_strtod_l+0x8b8>
 80133d2:	ea53 0308 	orrs.w	r3, r3, r8
 80133d6:	d081      	beq.n	80132dc <_strtod_l+0x7f4>
 80133d8:	b1e5      	cbz	r5, 8013414 <_strtod_l+0x92c>
 80133da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133dc:	421d      	tst	r5, r3
 80133de:	d0ef      	beq.n	80133c0 <_strtod_l+0x8d8>
 80133e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133e2:	4640      	mov	r0, r8
 80133e4:	4649      	mov	r1, r9
 80133e6:	9a05      	ldr	r2, [sp, #20]
 80133e8:	b1c3      	cbz	r3, 801341c <_strtod_l+0x934>
 80133ea:	f7ff fb59 	bl	8012aa0 <sulp>
 80133ee:	4602      	mov	r2, r0
 80133f0:	460b      	mov	r3, r1
 80133f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80133f6:	f7ec feff 	bl	80001f8 <__adddf3>
 80133fa:	4680      	mov	r8, r0
 80133fc:	4689      	mov	r9, r1
 80133fe:	e7df      	b.n	80133c0 <_strtod_l+0x8d8>
 8013400:	4013      	ands	r3, r2
 8013402:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013406:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801340a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801340e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013412:	e7d5      	b.n	80133c0 <_strtod_l+0x8d8>
 8013414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013416:	ea13 0f08 	tst.w	r3, r8
 801341a:	e7e0      	b.n	80133de <_strtod_l+0x8f6>
 801341c:	f7ff fb40 	bl	8012aa0 <sulp>
 8013420:	4602      	mov	r2, r0
 8013422:	460b      	mov	r3, r1
 8013424:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013428:	f7ec fee4 	bl	80001f4 <__aeabi_dsub>
 801342c:	2200      	movs	r2, #0
 801342e:	2300      	movs	r3, #0
 8013430:	4680      	mov	r8, r0
 8013432:	4689      	mov	r9, r1
 8013434:	f7ed fafe 	bl	8000a34 <__aeabi_dcmpeq>
 8013438:	2800      	cmp	r0, #0
 801343a:	d0c1      	beq.n	80133c0 <_strtod_l+0x8d8>
 801343c:	e608      	b.n	8013050 <_strtod_l+0x568>
 801343e:	4658      	mov	r0, fp
 8013440:	9904      	ldr	r1, [sp, #16]
 8013442:	f002 f909 	bl	8015658 <__ratio>
 8013446:	2200      	movs	r2, #0
 8013448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801344c:	4606      	mov	r6, r0
 801344e:	460f      	mov	r7, r1
 8013450:	f7ed fb04 	bl	8000a5c <__aeabi_dcmple>
 8013454:	2800      	cmp	r0, #0
 8013456:	d070      	beq.n	801353a <_strtod_l+0xa52>
 8013458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801345a:	2b00      	cmp	r3, #0
 801345c:	d042      	beq.n	80134e4 <_strtod_l+0x9fc>
 801345e:	2600      	movs	r6, #0
 8013460:	4f62      	ldr	r7, [pc, #392]	; (80135ec <_strtod_l+0xb04>)
 8013462:	4d62      	ldr	r5, [pc, #392]	; (80135ec <_strtod_l+0xb04>)
 8013464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013466:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801346a:	0d1b      	lsrs	r3, r3, #20
 801346c:	051b      	lsls	r3, r3, #20
 801346e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013470:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013472:	4b5f      	ldr	r3, [pc, #380]	; (80135f0 <_strtod_l+0xb08>)
 8013474:	429a      	cmp	r2, r3
 8013476:	f040 80c3 	bne.w	8013600 <_strtod_l+0xb18>
 801347a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801347c:	4640      	mov	r0, r8
 801347e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8013482:	4649      	mov	r1, r9
 8013484:	f002 f812 	bl	80154ac <__ulp>
 8013488:	4602      	mov	r2, r0
 801348a:	460b      	mov	r3, r1
 801348c:	4630      	mov	r0, r6
 801348e:	4639      	mov	r1, r7
 8013490:	f7ed f868 	bl	8000564 <__aeabi_dmul>
 8013494:	4642      	mov	r2, r8
 8013496:	464b      	mov	r3, r9
 8013498:	f7ec feae 	bl	80001f8 <__adddf3>
 801349c:	460b      	mov	r3, r1
 801349e:	4951      	ldr	r1, [pc, #324]	; (80135e4 <_strtod_l+0xafc>)
 80134a0:	4a54      	ldr	r2, [pc, #336]	; (80135f4 <_strtod_l+0xb0c>)
 80134a2:	4019      	ands	r1, r3
 80134a4:	4291      	cmp	r1, r2
 80134a6:	4680      	mov	r8, r0
 80134a8:	d95d      	bls.n	8013566 <_strtod_l+0xa7e>
 80134aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80134ac:	4b4e      	ldr	r3, [pc, #312]	; (80135e8 <_strtod_l+0xb00>)
 80134ae:	429a      	cmp	r2, r3
 80134b0:	d103      	bne.n	80134ba <_strtod_l+0x9d2>
 80134b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134b4:	3301      	adds	r3, #1
 80134b6:	f43f ad56 	beq.w	8012f66 <_strtod_l+0x47e>
 80134ba:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80134be:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80135e8 <_strtod_l+0xb00>
 80134c2:	4650      	mov	r0, sl
 80134c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80134c6:	f001 fcc1 	bl	8014e4c <_Bfree>
 80134ca:	4650      	mov	r0, sl
 80134cc:	9906      	ldr	r1, [sp, #24]
 80134ce:	f001 fcbd 	bl	8014e4c <_Bfree>
 80134d2:	4650      	mov	r0, sl
 80134d4:	9904      	ldr	r1, [sp, #16]
 80134d6:	f001 fcb9 	bl	8014e4c <_Bfree>
 80134da:	4659      	mov	r1, fp
 80134dc:	4650      	mov	r0, sl
 80134de:	f001 fcb5 	bl	8014e4c <_Bfree>
 80134e2:	e627      	b.n	8013134 <_strtod_l+0x64c>
 80134e4:	f1b8 0f00 	cmp.w	r8, #0
 80134e8:	d119      	bne.n	801351e <_strtod_l+0xa36>
 80134ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80134f0:	b9e3      	cbnz	r3, 801352c <_strtod_l+0xa44>
 80134f2:	2200      	movs	r2, #0
 80134f4:	4630      	mov	r0, r6
 80134f6:	4639      	mov	r1, r7
 80134f8:	4b3c      	ldr	r3, [pc, #240]	; (80135ec <_strtod_l+0xb04>)
 80134fa:	f7ed faa5 	bl	8000a48 <__aeabi_dcmplt>
 80134fe:	b9c8      	cbnz	r0, 8013534 <_strtod_l+0xa4c>
 8013500:	2200      	movs	r2, #0
 8013502:	4630      	mov	r0, r6
 8013504:	4639      	mov	r1, r7
 8013506:	4b3c      	ldr	r3, [pc, #240]	; (80135f8 <_strtod_l+0xb10>)
 8013508:	f7ed f82c 	bl	8000564 <__aeabi_dmul>
 801350c:	4604      	mov	r4, r0
 801350e:	460d      	mov	r5, r1
 8013510:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8013514:	9416      	str	r4, [sp, #88]	; 0x58
 8013516:	9317      	str	r3, [sp, #92]	; 0x5c
 8013518:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 801351c:	e7a2      	b.n	8013464 <_strtod_l+0x97c>
 801351e:	f1b8 0f01 	cmp.w	r8, #1
 8013522:	d103      	bne.n	801352c <_strtod_l+0xa44>
 8013524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013526:	2b00      	cmp	r3, #0
 8013528:	f43f ad92 	beq.w	8013050 <_strtod_l+0x568>
 801352c:	2600      	movs	r6, #0
 801352e:	2400      	movs	r4, #0
 8013530:	4f32      	ldr	r7, [pc, #200]	; (80135fc <_strtod_l+0xb14>)
 8013532:	e796      	b.n	8013462 <_strtod_l+0x97a>
 8013534:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8013536:	4d30      	ldr	r5, [pc, #192]	; (80135f8 <_strtod_l+0xb10>)
 8013538:	e7ea      	b.n	8013510 <_strtod_l+0xa28>
 801353a:	4b2f      	ldr	r3, [pc, #188]	; (80135f8 <_strtod_l+0xb10>)
 801353c:	2200      	movs	r2, #0
 801353e:	4630      	mov	r0, r6
 8013540:	4639      	mov	r1, r7
 8013542:	f7ed f80f 	bl	8000564 <__aeabi_dmul>
 8013546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013548:	4604      	mov	r4, r0
 801354a:	460d      	mov	r5, r1
 801354c:	b933      	cbnz	r3, 801355c <_strtod_l+0xa74>
 801354e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013552:	9010      	str	r0, [sp, #64]	; 0x40
 8013554:	9311      	str	r3, [sp, #68]	; 0x44
 8013556:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801355a:	e783      	b.n	8013464 <_strtod_l+0x97c>
 801355c:	4602      	mov	r2, r0
 801355e:	460b      	mov	r3, r1
 8013560:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8013564:	e7f7      	b.n	8013556 <_strtod_l+0xa6e>
 8013566:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801356a:	9b05      	ldr	r3, [sp, #20]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d1a8      	bne.n	80134c2 <_strtod_l+0x9da>
 8013570:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013574:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013576:	0d1b      	lsrs	r3, r3, #20
 8013578:	051b      	lsls	r3, r3, #20
 801357a:	429a      	cmp	r2, r3
 801357c:	d1a1      	bne.n	80134c2 <_strtod_l+0x9da>
 801357e:	4620      	mov	r0, r4
 8013580:	4629      	mov	r1, r5
 8013582:	f7ed fe23 	bl	80011cc <__aeabi_d2lz>
 8013586:	f7ec ffbf 	bl	8000508 <__aeabi_l2d>
 801358a:	4602      	mov	r2, r0
 801358c:	460b      	mov	r3, r1
 801358e:	4620      	mov	r0, r4
 8013590:	4629      	mov	r1, r5
 8013592:	f7ec fe2f 	bl	80001f4 <__aeabi_dsub>
 8013596:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013598:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801359c:	ea43 0308 	orr.w	r3, r3, r8
 80135a0:	4313      	orrs	r3, r2
 80135a2:	4604      	mov	r4, r0
 80135a4:	460d      	mov	r5, r1
 80135a6:	d066      	beq.n	8013676 <_strtod_l+0xb8e>
 80135a8:	a309      	add	r3, pc, #36	; (adr r3, 80135d0 <_strtod_l+0xae8>)
 80135aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ae:	f7ed fa4b 	bl	8000a48 <__aeabi_dcmplt>
 80135b2:	2800      	cmp	r0, #0
 80135b4:	f47f ace2 	bne.w	8012f7c <_strtod_l+0x494>
 80135b8:	a307      	add	r3, pc, #28	; (adr r3, 80135d8 <_strtod_l+0xaf0>)
 80135ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135be:	4620      	mov	r0, r4
 80135c0:	4629      	mov	r1, r5
 80135c2:	f7ed fa5f 	bl	8000a84 <__aeabi_dcmpgt>
 80135c6:	2800      	cmp	r0, #0
 80135c8:	f43f af7b 	beq.w	80134c2 <_strtod_l+0x9da>
 80135cc:	e4d6      	b.n	8012f7c <_strtod_l+0x494>
 80135ce:	bf00      	nop
 80135d0:	94a03595 	.word	0x94a03595
 80135d4:	3fdfffff 	.word	0x3fdfffff
 80135d8:	35afe535 	.word	0x35afe535
 80135dc:	3fe00000 	.word	0x3fe00000
 80135e0:	000fffff 	.word	0x000fffff
 80135e4:	7ff00000 	.word	0x7ff00000
 80135e8:	7fefffff 	.word	0x7fefffff
 80135ec:	3ff00000 	.word	0x3ff00000
 80135f0:	7fe00000 	.word	0x7fe00000
 80135f4:	7c9fffff 	.word	0x7c9fffff
 80135f8:	3fe00000 	.word	0x3fe00000
 80135fc:	bff00000 	.word	0xbff00000
 8013600:	9b05      	ldr	r3, [sp, #20]
 8013602:	b313      	cbz	r3, 801364a <_strtod_l+0xb62>
 8013604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013606:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801360a:	d81e      	bhi.n	801364a <_strtod_l+0xb62>
 801360c:	a326      	add	r3, pc, #152	; (adr r3, 80136a8 <_strtod_l+0xbc0>)
 801360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013612:	4620      	mov	r0, r4
 8013614:	4629      	mov	r1, r5
 8013616:	f7ed fa21 	bl	8000a5c <__aeabi_dcmple>
 801361a:	b190      	cbz	r0, 8013642 <_strtod_l+0xb5a>
 801361c:	4629      	mov	r1, r5
 801361e:	4620      	mov	r0, r4
 8013620:	f7ed fa78 	bl	8000b14 <__aeabi_d2uiz>
 8013624:	2801      	cmp	r0, #1
 8013626:	bf38      	it	cc
 8013628:	2001      	movcc	r0, #1
 801362a:	f7ec ff21 	bl	8000470 <__aeabi_ui2d>
 801362e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013630:	4604      	mov	r4, r0
 8013632:	460d      	mov	r5, r1
 8013634:	b9d3      	cbnz	r3, 801366c <_strtod_l+0xb84>
 8013636:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801363a:	9012      	str	r0, [sp, #72]	; 0x48
 801363c:	9313      	str	r3, [sp, #76]	; 0x4c
 801363e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8013642:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013644:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8013648:	1a9f      	subs	r7, r3, r2
 801364a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801364e:	f001 ff2d 	bl	80154ac <__ulp>
 8013652:	4602      	mov	r2, r0
 8013654:	460b      	mov	r3, r1
 8013656:	4630      	mov	r0, r6
 8013658:	4639      	mov	r1, r7
 801365a:	f7ec ff83 	bl	8000564 <__aeabi_dmul>
 801365e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013662:	f7ec fdc9 	bl	80001f8 <__adddf3>
 8013666:	4680      	mov	r8, r0
 8013668:	4689      	mov	r9, r1
 801366a:	e77e      	b.n	801356a <_strtod_l+0xa82>
 801366c:	4602      	mov	r2, r0
 801366e:	460b      	mov	r3, r1
 8013670:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8013674:	e7e3      	b.n	801363e <_strtod_l+0xb56>
 8013676:	a30e      	add	r3, pc, #56	; (adr r3, 80136b0 <_strtod_l+0xbc8>)
 8013678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801367c:	f7ed f9e4 	bl	8000a48 <__aeabi_dcmplt>
 8013680:	e7a1      	b.n	80135c6 <_strtod_l+0xade>
 8013682:	2300      	movs	r3, #0
 8013684:	930a      	str	r3, [sp, #40]	; 0x28
 8013686:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013688:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801368a:	6013      	str	r3, [r2, #0]
 801368c:	f7ff ba71 	b.w	8012b72 <_strtod_l+0x8a>
 8013690:	2a65      	cmp	r2, #101	; 0x65
 8013692:	f43f ab63 	beq.w	8012d5c <_strtod_l+0x274>
 8013696:	2a45      	cmp	r2, #69	; 0x45
 8013698:	f43f ab60 	beq.w	8012d5c <_strtod_l+0x274>
 801369c:	2301      	movs	r3, #1
 801369e:	f7ff bb95 	b.w	8012dcc <_strtod_l+0x2e4>
 80136a2:	bf00      	nop
 80136a4:	f3af 8000 	nop.w
 80136a8:	ffc00000 	.word	0xffc00000
 80136ac:	41dfffff 	.word	0x41dfffff
 80136b0:	94a03595 	.word	0x94a03595
 80136b4:	3fcfffff 	.word	0x3fcfffff

080136b8 <_strtod_r>:
 80136b8:	4b01      	ldr	r3, [pc, #4]	; (80136c0 <_strtod_r+0x8>)
 80136ba:	f7ff ba15 	b.w	8012ae8 <_strtod_l>
 80136be:	bf00      	nop
 80136c0:	200000a0 	.word	0x200000a0

080136c4 <_strtol_l.constprop.0>:
 80136c4:	2b01      	cmp	r3, #1
 80136c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136ca:	4680      	mov	r8, r0
 80136cc:	d001      	beq.n	80136d2 <_strtol_l.constprop.0+0xe>
 80136ce:	2b24      	cmp	r3, #36	; 0x24
 80136d0:	d906      	bls.n	80136e0 <_strtol_l.constprop.0+0x1c>
 80136d2:	f7fe fad7 	bl	8011c84 <__errno>
 80136d6:	2316      	movs	r3, #22
 80136d8:	6003      	str	r3, [r0, #0]
 80136da:	2000      	movs	r0, #0
 80136dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136e0:	460d      	mov	r5, r1
 80136e2:	4f35      	ldr	r7, [pc, #212]	; (80137b8 <_strtol_l.constprop.0+0xf4>)
 80136e4:	4628      	mov	r0, r5
 80136e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80136ea:	5de6      	ldrb	r6, [r4, r7]
 80136ec:	f016 0608 	ands.w	r6, r6, #8
 80136f0:	d1f8      	bne.n	80136e4 <_strtol_l.constprop.0+0x20>
 80136f2:	2c2d      	cmp	r4, #45	; 0x2d
 80136f4:	d12f      	bne.n	8013756 <_strtol_l.constprop.0+0x92>
 80136f6:	2601      	movs	r6, #1
 80136f8:	782c      	ldrb	r4, [r5, #0]
 80136fa:	1c85      	adds	r5, r0, #2
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d057      	beq.n	80137b0 <_strtol_l.constprop.0+0xec>
 8013700:	2b10      	cmp	r3, #16
 8013702:	d109      	bne.n	8013718 <_strtol_l.constprop.0+0x54>
 8013704:	2c30      	cmp	r4, #48	; 0x30
 8013706:	d107      	bne.n	8013718 <_strtol_l.constprop.0+0x54>
 8013708:	7828      	ldrb	r0, [r5, #0]
 801370a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801370e:	2858      	cmp	r0, #88	; 0x58
 8013710:	d149      	bne.n	80137a6 <_strtol_l.constprop.0+0xe2>
 8013712:	2310      	movs	r3, #16
 8013714:	786c      	ldrb	r4, [r5, #1]
 8013716:	3502      	adds	r5, #2
 8013718:	2700      	movs	r7, #0
 801371a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 801371e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8013722:	fbbe f9f3 	udiv	r9, lr, r3
 8013726:	4638      	mov	r0, r7
 8013728:	fb03 ea19 	mls	sl, r3, r9, lr
 801372c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013730:	f1bc 0f09 	cmp.w	ip, #9
 8013734:	d814      	bhi.n	8013760 <_strtol_l.constprop.0+0x9c>
 8013736:	4664      	mov	r4, ip
 8013738:	42a3      	cmp	r3, r4
 801373a:	dd22      	ble.n	8013782 <_strtol_l.constprop.0+0xbe>
 801373c:	2f00      	cmp	r7, #0
 801373e:	db1d      	blt.n	801377c <_strtol_l.constprop.0+0xb8>
 8013740:	4581      	cmp	r9, r0
 8013742:	d31b      	bcc.n	801377c <_strtol_l.constprop.0+0xb8>
 8013744:	d101      	bne.n	801374a <_strtol_l.constprop.0+0x86>
 8013746:	45a2      	cmp	sl, r4
 8013748:	db18      	blt.n	801377c <_strtol_l.constprop.0+0xb8>
 801374a:	2701      	movs	r7, #1
 801374c:	fb00 4003 	mla	r0, r0, r3, r4
 8013750:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013754:	e7ea      	b.n	801372c <_strtol_l.constprop.0+0x68>
 8013756:	2c2b      	cmp	r4, #43	; 0x2b
 8013758:	bf04      	itt	eq
 801375a:	782c      	ldrbeq	r4, [r5, #0]
 801375c:	1c85      	addeq	r5, r0, #2
 801375e:	e7cd      	b.n	80136fc <_strtol_l.constprop.0+0x38>
 8013760:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013764:	f1bc 0f19 	cmp.w	ip, #25
 8013768:	d801      	bhi.n	801376e <_strtol_l.constprop.0+0xaa>
 801376a:	3c37      	subs	r4, #55	; 0x37
 801376c:	e7e4      	b.n	8013738 <_strtol_l.constprop.0+0x74>
 801376e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013772:	f1bc 0f19 	cmp.w	ip, #25
 8013776:	d804      	bhi.n	8013782 <_strtol_l.constprop.0+0xbe>
 8013778:	3c57      	subs	r4, #87	; 0x57
 801377a:	e7dd      	b.n	8013738 <_strtol_l.constprop.0+0x74>
 801377c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013780:	e7e6      	b.n	8013750 <_strtol_l.constprop.0+0x8c>
 8013782:	2f00      	cmp	r7, #0
 8013784:	da07      	bge.n	8013796 <_strtol_l.constprop.0+0xd2>
 8013786:	2322      	movs	r3, #34	; 0x22
 8013788:	4670      	mov	r0, lr
 801378a:	f8c8 3000 	str.w	r3, [r8]
 801378e:	2a00      	cmp	r2, #0
 8013790:	d0a4      	beq.n	80136dc <_strtol_l.constprop.0+0x18>
 8013792:	1e69      	subs	r1, r5, #1
 8013794:	e005      	b.n	80137a2 <_strtol_l.constprop.0+0xde>
 8013796:	b106      	cbz	r6, 801379a <_strtol_l.constprop.0+0xd6>
 8013798:	4240      	negs	r0, r0
 801379a:	2a00      	cmp	r2, #0
 801379c:	d09e      	beq.n	80136dc <_strtol_l.constprop.0+0x18>
 801379e:	2f00      	cmp	r7, #0
 80137a0:	d1f7      	bne.n	8013792 <_strtol_l.constprop.0+0xce>
 80137a2:	6011      	str	r1, [r2, #0]
 80137a4:	e79a      	b.n	80136dc <_strtol_l.constprop.0+0x18>
 80137a6:	2430      	movs	r4, #48	; 0x30
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d1b5      	bne.n	8013718 <_strtol_l.constprop.0+0x54>
 80137ac:	2308      	movs	r3, #8
 80137ae:	e7b3      	b.n	8013718 <_strtol_l.constprop.0+0x54>
 80137b0:	2c30      	cmp	r4, #48	; 0x30
 80137b2:	d0a9      	beq.n	8013708 <_strtol_l.constprop.0+0x44>
 80137b4:	230a      	movs	r3, #10
 80137b6:	e7af      	b.n	8013718 <_strtol_l.constprop.0+0x54>
 80137b8:	08018719 	.word	0x08018719

080137bc <_strtol_r>:
 80137bc:	f7ff bf82 	b.w	80136c4 <_strtol_l.constprop.0>

080137c0 <quorem>:
 80137c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137c4:	6903      	ldr	r3, [r0, #16]
 80137c6:	690c      	ldr	r4, [r1, #16]
 80137c8:	4607      	mov	r7, r0
 80137ca:	42a3      	cmp	r3, r4
 80137cc:	f2c0 8082 	blt.w	80138d4 <quorem+0x114>
 80137d0:	3c01      	subs	r4, #1
 80137d2:	f100 0514 	add.w	r5, r0, #20
 80137d6:	f101 0814 	add.w	r8, r1, #20
 80137da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80137de:	9301      	str	r3, [sp, #4]
 80137e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80137e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80137e8:	3301      	adds	r3, #1
 80137ea:	429a      	cmp	r2, r3
 80137ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80137f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80137f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80137f8:	d331      	bcc.n	801385e <quorem+0x9e>
 80137fa:	f04f 0e00 	mov.w	lr, #0
 80137fe:	4640      	mov	r0, r8
 8013800:	46ac      	mov	ip, r5
 8013802:	46f2      	mov	sl, lr
 8013804:	f850 2b04 	ldr.w	r2, [r0], #4
 8013808:	b293      	uxth	r3, r2
 801380a:	fb06 e303 	mla	r3, r6, r3, lr
 801380e:	0c12      	lsrs	r2, r2, #16
 8013810:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013814:	b29b      	uxth	r3, r3
 8013816:	fb06 e202 	mla	r2, r6, r2, lr
 801381a:	ebaa 0303 	sub.w	r3, sl, r3
 801381e:	f8dc a000 	ldr.w	sl, [ip]
 8013822:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013826:	fa1f fa8a 	uxth.w	sl, sl
 801382a:	4453      	add	r3, sl
 801382c:	f8dc a000 	ldr.w	sl, [ip]
 8013830:	b292      	uxth	r2, r2
 8013832:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013836:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801383a:	b29b      	uxth	r3, r3
 801383c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013840:	4581      	cmp	r9, r0
 8013842:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013846:	f84c 3b04 	str.w	r3, [ip], #4
 801384a:	d2db      	bcs.n	8013804 <quorem+0x44>
 801384c:	f855 300b 	ldr.w	r3, [r5, fp]
 8013850:	b92b      	cbnz	r3, 801385e <quorem+0x9e>
 8013852:	9b01      	ldr	r3, [sp, #4]
 8013854:	3b04      	subs	r3, #4
 8013856:	429d      	cmp	r5, r3
 8013858:	461a      	mov	r2, r3
 801385a:	d32f      	bcc.n	80138bc <quorem+0xfc>
 801385c:	613c      	str	r4, [r7, #16]
 801385e:	4638      	mov	r0, r7
 8013860:	f001 fd7c 	bl	801535c <__mcmp>
 8013864:	2800      	cmp	r0, #0
 8013866:	db25      	blt.n	80138b4 <quorem+0xf4>
 8013868:	4628      	mov	r0, r5
 801386a:	f04f 0c00 	mov.w	ip, #0
 801386e:	3601      	adds	r6, #1
 8013870:	f858 1b04 	ldr.w	r1, [r8], #4
 8013874:	f8d0 e000 	ldr.w	lr, [r0]
 8013878:	b28b      	uxth	r3, r1
 801387a:	ebac 0303 	sub.w	r3, ip, r3
 801387e:	fa1f f28e 	uxth.w	r2, lr
 8013882:	4413      	add	r3, r2
 8013884:	0c0a      	lsrs	r2, r1, #16
 8013886:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801388a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801388e:	b29b      	uxth	r3, r3
 8013890:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013894:	45c1      	cmp	r9, r8
 8013896:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801389a:	f840 3b04 	str.w	r3, [r0], #4
 801389e:	d2e7      	bcs.n	8013870 <quorem+0xb0>
 80138a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80138a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80138a8:	b922      	cbnz	r2, 80138b4 <quorem+0xf4>
 80138aa:	3b04      	subs	r3, #4
 80138ac:	429d      	cmp	r5, r3
 80138ae:	461a      	mov	r2, r3
 80138b0:	d30a      	bcc.n	80138c8 <quorem+0x108>
 80138b2:	613c      	str	r4, [r7, #16]
 80138b4:	4630      	mov	r0, r6
 80138b6:	b003      	add	sp, #12
 80138b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138bc:	6812      	ldr	r2, [r2, #0]
 80138be:	3b04      	subs	r3, #4
 80138c0:	2a00      	cmp	r2, #0
 80138c2:	d1cb      	bne.n	801385c <quorem+0x9c>
 80138c4:	3c01      	subs	r4, #1
 80138c6:	e7c6      	b.n	8013856 <quorem+0x96>
 80138c8:	6812      	ldr	r2, [r2, #0]
 80138ca:	3b04      	subs	r3, #4
 80138cc:	2a00      	cmp	r2, #0
 80138ce:	d1f0      	bne.n	80138b2 <quorem+0xf2>
 80138d0:	3c01      	subs	r4, #1
 80138d2:	e7eb      	b.n	80138ac <quorem+0xec>
 80138d4:	2000      	movs	r0, #0
 80138d6:	e7ee      	b.n	80138b6 <quorem+0xf6>

080138d8 <_dtoa_r>:
 80138d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138dc:	4616      	mov	r6, r2
 80138de:	461f      	mov	r7, r3
 80138e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80138e2:	b099      	sub	sp, #100	; 0x64
 80138e4:	4605      	mov	r5, r0
 80138e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80138ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80138ee:	b974      	cbnz	r4, 801390e <_dtoa_r+0x36>
 80138f0:	2010      	movs	r0, #16
 80138f2:	f001 fa43 	bl	8014d7c <malloc>
 80138f6:	4602      	mov	r2, r0
 80138f8:	6268      	str	r0, [r5, #36]	; 0x24
 80138fa:	b920      	cbnz	r0, 8013906 <_dtoa_r+0x2e>
 80138fc:	21ea      	movs	r1, #234	; 0xea
 80138fe:	4ba8      	ldr	r3, [pc, #672]	; (8013ba0 <_dtoa_r+0x2c8>)
 8013900:	48a8      	ldr	r0, [pc, #672]	; (8013ba4 <_dtoa_r+0x2cc>)
 8013902:	f002 fbf9 	bl	80160f8 <__assert_func>
 8013906:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801390a:	6004      	str	r4, [r0, #0]
 801390c:	60c4      	str	r4, [r0, #12]
 801390e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013910:	6819      	ldr	r1, [r3, #0]
 8013912:	b151      	cbz	r1, 801392a <_dtoa_r+0x52>
 8013914:	685a      	ldr	r2, [r3, #4]
 8013916:	2301      	movs	r3, #1
 8013918:	4093      	lsls	r3, r2
 801391a:	604a      	str	r2, [r1, #4]
 801391c:	608b      	str	r3, [r1, #8]
 801391e:	4628      	mov	r0, r5
 8013920:	f001 fa94 	bl	8014e4c <_Bfree>
 8013924:	2200      	movs	r2, #0
 8013926:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013928:	601a      	str	r2, [r3, #0]
 801392a:	1e3b      	subs	r3, r7, #0
 801392c:	bfaf      	iteee	ge
 801392e:	2300      	movge	r3, #0
 8013930:	2201      	movlt	r2, #1
 8013932:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013936:	9305      	strlt	r3, [sp, #20]
 8013938:	bfa8      	it	ge
 801393a:	f8c8 3000 	strge.w	r3, [r8]
 801393e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8013942:	4b99      	ldr	r3, [pc, #612]	; (8013ba8 <_dtoa_r+0x2d0>)
 8013944:	bfb8      	it	lt
 8013946:	f8c8 2000 	strlt.w	r2, [r8]
 801394a:	ea33 0309 	bics.w	r3, r3, r9
 801394e:	d119      	bne.n	8013984 <_dtoa_r+0xac>
 8013950:	f242 730f 	movw	r3, #9999	; 0x270f
 8013954:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013956:	6013      	str	r3, [r2, #0]
 8013958:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801395c:	4333      	orrs	r3, r6
 801395e:	f000 857f 	beq.w	8014460 <_dtoa_r+0xb88>
 8013962:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013964:	b953      	cbnz	r3, 801397c <_dtoa_r+0xa4>
 8013966:	4b91      	ldr	r3, [pc, #580]	; (8013bac <_dtoa_r+0x2d4>)
 8013968:	e022      	b.n	80139b0 <_dtoa_r+0xd8>
 801396a:	4b91      	ldr	r3, [pc, #580]	; (8013bb0 <_dtoa_r+0x2d8>)
 801396c:	9303      	str	r3, [sp, #12]
 801396e:	3308      	adds	r3, #8
 8013970:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013972:	6013      	str	r3, [r2, #0]
 8013974:	9803      	ldr	r0, [sp, #12]
 8013976:	b019      	add	sp, #100	; 0x64
 8013978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801397c:	4b8b      	ldr	r3, [pc, #556]	; (8013bac <_dtoa_r+0x2d4>)
 801397e:	9303      	str	r3, [sp, #12]
 8013980:	3303      	adds	r3, #3
 8013982:	e7f5      	b.n	8013970 <_dtoa_r+0x98>
 8013984:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013988:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801398c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013990:	2200      	movs	r2, #0
 8013992:	2300      	movs	r3, #0
 8013994:	f7ed f84e 	bl	8000a34 <__aeabi_dcmpeq>
 8013998:	4680      	mov	r8, r0
 801399a:	b158      	cbz	r0, 80139b4 <_dtoa_r+0xdc>
 801399c:	2301      	movs	r3, #1
 801399e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80139a0:	6013      	str	r3, [r2, #0]
 80139a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	f000 8558 	beq.w	801445a <_dtoa_r+0xb82>
 80139aa:	4882      	ldr	r0, [pc, #520]	; (8013bb4 <_dtoa_r+0x2dc>)
 80139ac:	6018      	str	r0, [r3, #0]
 80139ae:	1e43      	subs	r3, r0, #1
 80139b0:	9303      	str	r3, [sp, #12]
 80139b2:	e7df      	b.n	8013974 <_dtoa_r+0x9c>
 80139b4:	ab16      	add	r3, sp, #88	; 0x58
 80139b6:	9301      	str	r3, [sp, #4]
 80139b8:	ab17      	add	r3, sp, #92	; 0x5c
 80139ba:	9300      	str	r3, [sp, #0]
 80139bc:	4628      	mov	r0, r5
 80139be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80139c2:	f001 fded 	bl	80155a0 <__d2b>
 80139c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80139ca:	4683      	mov	fp, r0
 80139cc:	2c00      	cmp	r4, #0
 80139ce:	d07f      	beq.n	8013ad0 <_dtoa_r+0x1f8>
 80139d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80139d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80139d6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80139da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80139de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80139e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80139e6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80139ea:	2200      	movs	r2, #0
 80139ec:	4b72      	ldr	r3, [pc, #456]	; (8013bb8 <_dtoa_r+0x2e0>)
 80139ee:	f7ec fc01 	bl	80001f4 <__aeabi_dsub>
 80139f2:	a365      	add	r3, pc, #404	; (adr r3, 8013b88 <_dtoa_r+0x2b0>)
 80139f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f8:	f7ec fdb4 	bl	8000564 <__aeabi_dmul>
 80139fc:	a364      	add	r3, pc, #400	; (adr r3, 8013b90 <_dtoa_r+0x2b8>)
 80139fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a02:	f7ec fbf9 	bl	80001f8 <__adddf3>
 8013a06:	4606      	mov	r6, r0
 8013a08:	4620      	mov	r0, r4
 8013a0a:	460f      	mov	r7, r1
 8013a0c:	f7ec fd40 	bl	8000490 <__aeabi_i2d>
 8013a10:	a361      	add	r3, pc, #388	; (adr r3, 8013b98 <_dtoa_r+0x2c0>)
 8013a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a16:	f7ec fda5 	bl	8000564 <__aeabi_dmul>
 8013a1a:	4602      	mov	r2, r0
 8013a1c:	460b      	mov	r3, r1
 8013a1e:	4630      	mov	r0, r6
 8013a20:	4639      	mov	r1, r7
 8013a22:	f7ec fbe9 	bl	80001f8 <__adddf3>
 8013a26:	4606      	mov	r6, r0
 8013a28:	460f      	mov	r7, r1
 8013a2a:	f7ed f84b 	bl	8000ac4 <__aeabi_d2iz>
 8013a2e:	2200      	movs	r2, #0
 8013a30:	4682      	mov	sl, r0
 8013a32:	2300      	movs	r3, #0
 8013a34:	4630      	mov	r0, r6
 8013a36:	4639      	mov	r1, r7
 8013a38:	f7ed f806 	bl	8000a48 <__aeabi_dcmplt>
 8013a3c:	b148      	cbz	r0, 8013a52 <_dtoa_r+0x17a>
 8013a3e:	4650      	mov	r0, sl
 8013a40:	f7ec fd26 	bl	8000490 <__aeabi_i2d>
 8013a44:	4632      	mov	r2, r6
 8013a46:	463b      	mov	r3, r7
 8013a48:	f7ec fff4 	bl	8000a34 <__aeabi_dcmpeq>
 8013a4c:	b908      	cbnz	r0, 8013a52 <_dtoa_r+0x17a>
 8013a4e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013a52:	f1ba 0f16 	cmp.w	sl, #22
 8013a56:	d858      	bhi.n	8013b0a <_dtoa_r+0x232>
 8013a58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013a5c:	4b57      	ldr	r3, [pc, #348]	; (8013bbc <_dtoa_r+0x2e4>)
 8013a5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a66:	f7ec ffef 	bl	8000a48 <__aeabi_dcmplt>
 8013a6a:	2800      	cmp	r0, #0
 8013a6c:	d04f      	beq.n	8013b0e <_dtoa_r+0x236>
 8013a6e:	2300      	movs	r3, #0
 8013a70:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013a74:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a76:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013a78:	1b1c      	subs	r4, r3, r4
 8013a7a:	1e63      	subs	r3, r4, #1
 8013a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8013a7e:	bf49      	itett	mi
 8013a80:	f1c4 0301 	rsbmi	r3, r4, #1
 8013a84:	2300      	movpl	r3, #0
 8013a86:	9306      	strmi	r3, [sp, #24]
 8013a88:	2300      	movmi	r3, #0
 8013a8a:	bf54      	ite	pl
 8013a8c:	9306      	strpl	r3, [sp, #24]
 8013a8e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8013a90:	f1ba 0f00 	cmp.w	sl, #0
 8013a94:	db3d      	blt.n	8013b12 <_dtoa_r+0x23a>
 8013a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a98:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8013a9c:	4453      	add	r3, sl
 8013a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	930a      	str	r3, [sp, #40]	; 0x28
 8013aa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013aa6:	2b09      	cmp	r3, #9
 8013aa8:	f200 808c 	bhi.w	8013bc4 <_dtoa_r+0x2ec>
 8013aac:	2b05      	cmp	r3, #5
 8013aae:	bfc4      	itt	gt
 8013ab0:	3b04      	subgt	r3, #4
 8013ab2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8013ab4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013ab6:	bfc8      	it	gt
 8013ab8:	2400      	movgt	r4, #0
 8013aba:	f1a3 0302 	sub.w	r3, r3, #2
 8013abe:	bfd8      	it	le
 8013ac0:	2401      	movle	r4, #1
 8013ac2:	2b03      	cmp	r3, #3
 8013ac4:	f200 808a 	bhi.w	8013bdc <_dtoa_r+0x304>
 8013ac8:	e8df f003 	tbb	[pc, r3]
 8013acc:	5b4d4f2d 	.word	0x5b4d4f2d
 8013ad0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8013ad4:	441c      	add	r4, r3
 8013ad6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8013ada:	2b20      	cmp	r3, #32
 8013adc:	bfc3      	ittte	gt
 8013ade:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013ae2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8013ae6:	fa09 f303 	lslgt.w	r3, r9, r3
 8013aea:	f1c3 0320 	rsble	r3, r3, #32
 8013aee:	bfc6      	itte	gt
 8013af0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013af4:	4318      	orrgt	r0, r3
 8013af6:	fa06 f003 	lslle.w	r0, r6, r3
 8013afa:	f7ec fcb9 	bl	8000470 <__aeabi_ui2d>
 8013afe:	2301      	movs	r3, #1
 8013b00:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8013b04:	3c01      	subs	r4, #1
 8013b06:	9313      	str	r3, [sp, #76]	; 0x4c
 8013b08:	e76f      	b.n	80139ea <_dtoa_r+0x112>
 8013b0a:	2301      	movs	r3, #1
 8013b0c:	e7b2      	b.n	8013a74 <_dtoa_r+0x19c>
 8013b0e:	900f      	str	r0, [sp, #60]	; 0x3c
 8013b10:	e7b1      	b.n	8013a76 <_dtoa_r+0x19e>
 8013b12:	9b06      	ldr	r3, [sp, #24]
 8013b14:	eba3 030a 	sub.w	r3, r3, sl
 8013b18:	9306      	str	r3, [sp, #24]
 8013b1a:	f1ca 0300 	rsb	r3, sl, #0
 8013b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8013b20:	2300      	movs	r3, #0
 8013b22:	930e      	str	r3, [sp, #56]	; 0x38
 8013b24:	e7be      	b.n	8013aa4 <_dtoa_r+0x1cc>
 8013b26:	2300      	movs	r3, #0
 8013b28:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	dc58      	bgt.n	8013be2 <_dtoa_r+0x30a>
 8013b30:	f04f 0901 	mov.w	r9, #1
 8013b34:	464b      	mov	r3, r9
 8013b36:	f8cd 9020 	str.w	r9, [sp, #32]
 8013b3a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8013b3e:	2200      	movs	r2, #0
 8013b40:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8013b42:	6042      	str	r2, [r0, #4]
 8013b44:	2204      	movs	r2, #4
 8013b46:	f102 0614 	add.w	r6, r2, #20
 8013b4a:	429e      	cmp	r6, r3
 8013b4c:	6841      	ldr	r1, [r0, #4]
 8013b4e:	d94e      	bls.n	8013bee <_dtoa_r+0x316>
 8013b50:	4628      	mov	r0, r5
 8013b52:	f001 f93b 	bl	8014dcc <_Balloc>
 8013b56:	9003      	str	r0, [sp, #12]
 8013b58:	2800      	cmp	r0, #0
 8013b5a:	d14c      	bne.n	8013bf6 <_dtoa_r+0x31e>
 8013b5c:	4602      	mov	r2, r0
 8013b5e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013b62:	4b17      	ldr	r3, [pc, #92]	; (8013bc0 <_dtoa_r+0x2e8>)
 8013b64:	e6cc      	b.n	8013900 <_dtoa_r+0x28>
 8013b66:	2301      	movs	r3, #1
 8013b68:	e7de      	b.n	8013b28 <_dtoa_r+0x250>
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013b70:	eb0a 0903 	add.w	r9, sl, r3
 8013b74:	f109 0301 	add.w	r3, r9, #1
 8013b78:	2b01      	cmp	r3, #1
 8013b7a:	9308      	str	r3, [sp, #32]
 8013b7c:	bfb8      	it	lt
 8013b7e:	2301      	movlt	r3, #1
 8013b80:	e7dd      	b.n	8013b3e <_dtoa_r+0x266>
 8013b82:	2301      	movs	r3, #1
 8013b84:	e7f2      	b.n	8013b6c <_dtoa_r+0x294>
 8013b86:	bf00      	nop
 8013b88:	636f4361 	.word	0x636f4361
 8013b8c:	3fd287a7 	.word	0x3fd287a7
 8013b90:	8b60c8b3 	.word	0x8b60c8b3
 8013b94:	3fc68a28 	.word	0x3fc68a28
 8013b98:	509f79fb 	.word	0x509f79fb
 8013b9c:	3fd34413 	.word	0x3fd34413
 8013ba0:	08018826 	.word	0x08018826
 8013ba4:	0801883d 	.word	0x0801883d
 8013ba8:	7ff00000 	.word	0x7ff00000
 8013bac:	08018822 	.word	0x08018822
 8013bb0:	08018819 	.word	0x08018819
 8013bb4:	0801869d 	.word	0x0801869d
 8013bb8:	3ff80000 	.word	0x3ff80000
 8013bbc:	08018a10 	.word	0x08018a10
 8013bc0:	08018898 	.word	0x08018898
 8013bc4:	2401      	movs	r4, #1
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	940b      	str	r4, [sp, #44]	; 0x2c
 8013bca:	9322      	str	r3, [sp, #136]	; 0x88
 8013bcc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	2312      	movs	r3, #18
 8013bd4:	f8cd 9020 	str.w	r9, [sp, #32]
 8013bd8:	9223      	str	r2, [sp, #140]	; 0x8c
 8013bda:	e7b0      	b.n	8013b3e <_dtoa_r+0x266>
 8013bdc:	2301      	movs	r3, #1
 8013bde:	930b      	str	r3, [sp, #44]	; 0x2c
 8013be0:	e7f4      	b.n	8013bcc <_dtoa_r+0x2f4>
 8013be2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8013be6:	464b      	mov	r3, r9
 8013be8:	f8cd 9020 	str.w	r9, [sp, #32]
 8013bec:	e7a7      	b.n	8013b3e <_dtoa_r+0x266>
 8013bee:	3101      	adds	r1, #1
 8013bf0:	6041      	str	r1, [r0, #4]
 8013bf2:	0052      	lsls	r2, r2, #1
 8013bf4:	e7a7      	b.n	8013b46 <_dtoa_r+0x26e>
 8013bf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013bf8:	9a03      	ldr	r2, [sp, #12]
 8013bfa:	601a      	str	r2, [r3, #0]
 8013bfc:	9b08      	ldr	r3, [sp, #32]
 8013bfe:	2b0e      	cmp	r3, #14
 8013c00:	f200 80a8 	bhi.w	8013d54 <_dtoa_r+0x47c>
 8013c04:	2c00      	cmp	r4, #0
 8013c06:	f000 80a5 	beq.w	8013d54 <_dtoa_r+0x47c>
 8013c0a:	f1ba 0f00 	cmp.w	sl, #0
 8013c0e:	dd34      	ble.n	8013c7a <_dtoa_r+0x3a2>
 8013c10:	4a9a      	ldr	r2, [pc, #616]	; (8013e7c <_dtoa_r+0x5a4>)
 8013c12:	f00a 030f 	and.w	r3, sl, #15
 8013c16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013c1a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013c1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013c22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8013c26:	ea4f 142a 	mov.w	r4, sl, asr #4
 8013c2a:	d016      	beq.n	8013c5a <_dtoa_r+0x382>
 8013c2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013c30:	4b93      	ldr	r3, [pc, #588]	; (8013e80 <_dtoa_r+0x5a8>)
 8013c32:	2703      	movs	r7, #3
 8013c34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013c38:	f7ec fdbe 	bl	80007b8 <__aeabi_ddiv>
 8013c3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013c40:	f004 040f 	and.w	r4, r4, #15
 8013c44:	4e8e      	ldr	r6, [pc, #568]	; (8013e80 <_dtoa_r+0x5a8>)
 8013c46:	b954      	cbnz	r4, 8013c5e <_dtoa_r+0x386>
 8013c48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013c4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013c50:	f7ec fdb2 	bl	80007b8 <__aeabi_ddiv>
 8013c54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013c58:	e029      	b.n	8013cae <_dtoa_r+0x3d6>
 8013c5a:	2702      	movs	r7, #2
 8013c5c:	e7f2      	b.n	8013c44 <_dtoa_r+0x36c>
 8013c5e:	07e1      	lsls	r1, r4, #31
 8013c60:	d508      	bpl.n	8013c74 <_dtoa_r+0x39c>
 8013c62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013c66:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013c6a:	f7ec fc7b 	bl	8000564 <__aeabi_dmul>
 8013c6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013c72:	3701      	adds	r7, #1
 8013c74:	1064      	asrs	r4, r4, #1
 8013c76:	3608      	adds	r6, #8
 8013c78:	e7e5      	b.n	8013c46 <_dtoa_r+0x36e>
 8013c7a:	f000 80a5 	beq.w	8013dc8 <_dtoa_r+0x4f0>
 8013c7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013c82:	f1ca 0400 	rsb	r4, sl, #0
 8013c86:	4b7d      	ldr	r3, [pc, #500]	; (8013e7c <_dtoa_r+0x5a4>)
 8013c88:	f004 020f 	and.w	r2, r4, #15
 8013c8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c94:	f7ec fc66 	bl	8000564 <__aeabi_dmul>
 8013c98:	2702      	movs	r7, #2
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ca0:	4e77      	ldr	r6, [pc, #476]	; (8013e80 <_dtoa_r+0x5a8>)
 8013ca2:	1124      	asrs	r4, r4, #4
 8013ca4:	2c00      	cmp	r4, #0
 8013ca6:	f040 8084 	bne.w	8013db2 <_dtoa_r+0x4da>
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d1d2      	bne.n	8013c54 <_dtoa_r+0x37c>
 8013cae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	f000 808b 	beq.w	8013dcc <_dtoa_r+0x4f4>
 8013cb6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013cba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8013cbe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	4b6f      	ldr	r3, [pc, #444]	; (8013e84 <_dtoa_r+0x5ac>)
 8013cc6:	f7ec febf 	bl	8000a48 <__aeabi_dcmplt>
 8013cca:	2800      	cmp	r0, #0
 8013ccc:	d07e      	beq.n	8013dcc <_dtoa_r+0x4f4>
 8013cce:	9b08      	ldr	r3, [sp, #32]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d07b      	beq.n	8013dcc <_dtoa_r+0x4f4>
 8013cd4:	f1b9 0f00 	cmp.w	r9, #0
 8013cd8:	dd38      	ble.n	8013d4c <_dtoa_r+0x474>
 8013cda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013cde:	2200      	movs	r2, #0
 8013ce0:	4b69      	ldr	r3, [pc, #420]	; (8013e88 <_dtoa_r+0x5b0>)
 8013ce2:	f7ec fc3f 	bl	8000564 <__aeabi_dmul>
 8013ce6:	464c      	mov	r4, r9
 8013ce8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013cec:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8013cf0:	3701      	adds	r7, #1
 8013cf2:	4638      	mov	r0, r7
 8013cf4:	f7ec fbcc 	bl	8000490 <__aeabi_i2d>
 8013cf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013cfc:	f7ec fc32 	bl	8000564 <__aeabi_dmul>
 8013d00:	2200      	movs	r2, #0
 8013d02:	4b62      	ldr	r3, [pc, #392]	; (8013e8c <_dtoa_r+0x5b4>)
 8013d04:	f7ec fa78 	bl	80001f8 <__adddf3>
 8013d08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8013d0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013d10:	9611      	str	r6, [sp, #68]	; 0x44
 8013d12:	2c00      	cmp	r4, #0
 8013d14:	d15d      	bne.n	8013dd2 <_dtoa_r+0x4fa>
 8013d16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	4b5c      	ldr	r3, [pc, #368]	; (8013e90 <_dtoa_r+0x5b8>)
 8013d1e:	f7ec fa69 	bl	80001f4 <__aeabi_dsub>
 8013d22:	4602      	mov	r2, r0
 8013d24:	460b      	mov	r3, r1
 8013d26:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013d2a:	4633      	mov	r3, r6
 8013d2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013d2e:	f7ec fea9 	bl	8000a84 <__aeabi_dcmpgt>
 8013d32:	2800      	cmp	r0, #0
 8013d34:	f040 829c 	bne.w	8014270 <_dtoa_r+0x998>
 8013d38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013d3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013d3e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013d42:	f7ec fe81 	bl	8000a48 <__aeabi_dcmplt>
 8013d46:	2800      	cmp	r0, #0
 8013d48:	f040 8290 	bne.w	801426c <_dtoa_r+0x994>
 8013d4c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8013d50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8013d54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	f2c0 8152 	blt.w	8014000 <_dtoa_r+0x728>
 8013d5c:	f1ba 0f0e 	cmp.w	sl, #14
 8013d60:	f300 814e 	bgt.w	8014000 <_dtoa_r+0x728>
 8013d64:	4b45      	ldr	r3, [pc, #276]	; (8013e7c <_dtoa_r+0x5a4>)
 8013d66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013d6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013d6e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8013d72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	f280 80db 	bge.w	8013f30 <_dtoa_r+0x658>
 8013d7a:	9b08      	ldr	r3, [sp, #32]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	f300 80d7 	bgt.w	8013f30 <_dtoa_r+0x658>
 8013d82:	f040 8272 	bne.w	801426a <_dtoa_r+0x992>
 8013d86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	4b40      	ldr	r3, [pc, #256]	; (8013e90 <_dtoa_r+0x5b8>)
 8013d8e:	f7ec fbe9 	bl	8000564 <__aeabi_dmul>
 8013d92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d96:	f7ec fe6b 	bl	8000a70 <__aeabi_dcmpge>
 8013d9a:	9c08      	ldr	r4, [sp, #32]
 8013d9c:	4626      	mov	r6, r4
 8013d9e:	2800      	cmp	r0, #0
 8013da0:	f040 8248 	bne.w	8014234 <_dtoa_r+0x95c>
 8013da4:	2331      	movs	r3, #49	; 0x31
 8013da6:	9f03      	ldr	r7, [sp, #12]
 8013da8:	f10a 0a01 	add.w	sl, sl, #1
 8013dac:	f807 3b01 	strb.w	r3, [r7], #1
 8013db0:	e244      	b.n	801423c <_dtoa_r+0x964>
 8013db2:	07e2      	lsls	r2, r4, #31
 8013db4:	d505      	bpl.n	8013dc2 <_dtoa_r+0x4ea>
 8013db6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013dba:	f7ec fbd3 	bl	8000564 <__aeabi_dmul>
 8013dbe:	2301      	movs	r3, #1
 8013dc0:	3701      	adds	r7, #1
 8013dc2:	1064      	asrs	r4, r4, #1
 8013dc4:	3608      	adds	r6, #8
 8013dc6:	e76d      	b.n	8013ca4 <_dtoa_r+0x3cc>
 8013dc8:	2702      	movs	r7, #2
 8013dca:	e770      	b.n	8013cae <_dtoa_r+0x3d6>
 8013dcc:	46d0      	mov	r8, sl
 8013dce:	9c08      	ldr	r4, [sp, #32]
 8013dd0:	e78f      	b.n	8013cf2 <_dtoa_r+0x41a>
 8013dd2:	9903      	ldr	r1, [sp, #12]
 8013dd4:	4b29      	ldr	r3, [pc, #164]	; (8013e7c <_dtoa_r+0x5a4>)
 8013dd6:	4421      	add	r1, r4
 8013dd8:	9112      	str	r1, [sp, #72]	; 0x48
 8013dda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013ddc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013de0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8013de4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013de8:	2900      	cmp	r1, #0
 8013dea:	d055      	beq.n	8013e98 <_dtoa_r+0x5c0>
 8013dec:	2000      	movs	r0, #0
 8013dee:	4929      	ldr	r1, [pc, #164]	; (8013e94 <_dtoa_r+0x5bc>)
 8013df0:	f7ec fce2 	bl	80007b8 <__aeabi_ddiv>
 8013df4:	463b      	mov	r3, r7
 8013df6:	4632      	mov	r2, r6
 8013df8:	f7ec f9fc 	bl	80001f4 <__aeabi_dsub>
 8013dfc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013e00:	9f03      	ldr	r7, [sp, #12]
 8013e02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013e06:	f7ec fe5d 	bl	8000ac4 <__aeabi_d2iz>
 8013e0a:	4604      	mov	r4, r0
 8013e0c:	f7ec fb40 	bl	8000490 <__aeabi_i2d>
 8013e10:	4602      	mov	r2, r0
 8013e12:	460b      	mov	r3, r1
 8013e14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013e18:	f7ec f9ec 	bl	80001f4 <__aeabi_dsub>
 8013e1c:	4602      	mov	r2, r0
 8013e1e:	460b      	mov	r3, r1
 8013e20:	3430      	adds	r4, #48	; 0x30
 8013e22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013e26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013e2a:	f807 4b01 	strb.w	r4, [r7], #1
 8013e2e:	f7ec fe0b 	bl	8000a48 <__aeabi_dcmplt>
 8013e32:	2800      	cmp	r0, #0
 8013e34:	d174      	bne.n	8013f20 <_dtoa_r+0x648>
 8013e36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e3a:	2000      	movs	r0, #0
 8013e3c:	4911      	ldr	r1, [pc, #68]	; (8013e84 <_dtoa_r+0x5ac>)
 8013e3e:	f7ec f9d9 	bl	80001f4 <__aeabi_dsub>
 8013e42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013e46:	f7ec fdff 	bl	8000a48 <__aeabi_dcmplt>
 8013e4a:	2800      	cmp	r0, #0
 8013e4c:	f040 80b7 	bne.w	8013fbe <_dtoa_r+0x6e6>
 8013e50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e52:	429f      	cmp	r7, r3
 8013e54:	f43f af7a 	beq.w	8013d4c <_dtoa_r+0x474>
 8013e58:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	4b0a      	ldr	r3, [pc, #40]	; (8013e88 <_dtoa_r+0x5b0>)
 8013e60:	f7ec fb80 	bl	8000564 <__aeabi_dmul>
 8013e64:	2200      	movs	r2, #0
 8013e66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013e6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013e6e:	4b06      	ldr	r3, [pc, #24]	; (8013e88 <_dtoa_r+0x5b0>)
 8013e70:	f7ec fb78 	bl	8000564 <__aeabi_dmul>
 8013e74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013e78:	e7c3      	b.n	8013e02 <_dtoa_r+0x52a>
 8013e7a:	bf00      	nop
 8013e7c:	08018a10 	.word	0x08018a10
 8013e80:	080189e8 	.word	0x080189e8
 8013e84:	3ff00000 	.word	0x3ff00000
 8013e88:	40240000 	.word	0x40240000
 8013e8c:	401c0000 	.word	0x401c0000
 8013e90:	40140000 	.word	0x40140000
 8013e94:	3fe00000 	.word	0x3fe00000
 8013e98:	4630      	mov	r0, r6
 8013e9a:	4639      	mov	r1, r7
 8013e9c:	f7ec fb62 	bl	8000564 <__aeabi_dmul>
 8013ea0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013ea2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013ea6:	9c03      	ldr	r4, [sp, #12]
 8013ea8:	9314      	str	r3, [sp, #80]	; 0x50
 8013eaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013eae:	f7ec fe09 	bl	8000ac4 <__aeabi_d2iz>
 8013eb2:	9015      	str	r0, [sp, #84]	; 0x54
 8013eb4:	f7ec faec 	bl	8000490 <__aeabi_i2d>
 8013eb8:	4602      	mov	r2, r0
 8013eba:	460b      	mov	r3, r1
 8013ebc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ec0:	f7ec f998 	bl	80001f4 <__aeabi_dsub>
 8013ec4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013ec6:	4606      	mov	r6, r0
 8013ec8:	3330      	adds	r3, #48	; 0x30
 8013eca:	f804 3b01 	strb.w	r3, [r4], #1
 8013ece:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013ed0:	460f      	mov	r7, r1
 8013ed2:	429c      	cmp	r4, r3
 8013ed4:	f04f 0200 	mov.w	r2, #0
 8013ed8:	d124      	bne.n	8013f24 <_dtoa_r+0x64c>
 8013eda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013ede:	4bb0      	ldr	r3, [pc, #704]	; (80141a0 <_dtoa_r+0x8c8>)
 8013ee0:	f7ec f98a 	bl	80001f8 <__adddf3>
 8013ee4:	4602      	mov	r2, r0
 8013ee6:	460b      	mov	r3, r1
 8013ee8:	4630      	mov	r0, r6
 8013eea:	4639      	mov	r1, r7
 8013eec:	f7ec fdca 	bl	8000a84 <__aeabi_dcmpgt>
 8013ef0:	2800      	cmp	r0, #0
 8013ef2:	d163      	bne.n	8013fbc <_dtoa_r+0x6e4>
 8013ef4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013ef8:	2000      	movs	r0, #0
 8013efa:	49a9      	ldr	r1, [pc, #676]	; (80141a0 <_dtoa_r+0x8c8>)
 8013efc:	f7ec f97a 	bl	80001f4 <__aeabi_dsub>
 8013f00:	4602      	mov	r2, r0
 8013f02:	460b      	mov	r3, r1
 8013f04:	4630      	mov	r0, r6
 8013f06:	4639      	mov	r1, r7
 8013f08:	f7ec fd9e 	bl	8000a48 <__aeabi_dcmplt>
 8013f0c:	2800      	cmp	r0, #0
 8013f0e:	f43f af1d 	beq.w	8013d4c <_dtoa_r+0x474>
 8013f12:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8013f14:	1e7b      	subs	r3, r7, #1
 8013f16:	9314      	str	r3, [sp, #80]	; 0x50
 8013f18:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8013f1c:	2b30      	cmp	r3, #48	; 0x30
 8013f1e:	d0f8      	beq.n	8013f12 <_dtoa_r+0x63a>
 8013f20:	46c2      	mov	sl, r8
 8013f22:	e03b      	b.n	8013f9c <_dtoa_r+0x6c4>
 8013f24:	4b9f      	ldr	r3, [pc, #636]	; (80141a4 <_dtoa_r+0x8cc>)
 8013f26:	f7ec fb1d 	bl	8000564 <__aeabi_dmul>
 8013f2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013f2e:	e7bc      	b.n	8013eaa <_dtoa_r+0x5d2>
 8013f30:	9f03      	ldr	r7, [sp, #12]
 8013f32:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8013f36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f3a:	4640      	mov	r0, r8
 8013f3c:	4649      	mov	r1, r9
 8013f3e:	f7ec fc3b 	bl	80007b8 <__aeabi_ddiv>
 8013f42:	f7ec fdbf 	bl	8000ac4 <__aeabi_d2iz>
 8013f46:	4604      	mov	r4, r0
 8013f48:	f7ec faa2 	bl	8000490 <__aeabi_i2d>
 8013f4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f50:	f7ec fb08 	bl	8000564 <__aeabi_dmul>
 8013f54:	4602      	mov	r2, r0
 8013f56:	460b      	mov	r3, r1
 8013f58:	4640      	mov	r0, r8
 8013f5a:	4649      	mov	r1, r9
 8013f5c:	f7ec f94a 	bl	80001f4 <__aeabi_dsub>
 8013f60:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8013f64:	f807 6b01 	strb.w	r6, [r7], #1
 8013f68:	9e03      	ldr	r6, [sp, #12]
 8013f6a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8013f6e:	1bbe      	subs	r6, r7, r6
 8013f70:	45b4      	cmp	ip, r6
 8013f72:	4602      	mov	r2, r0
 8013f74:	460b      	mov	r3, r1
 8013f76:	d136      	bne.n	8013fe6 <_dtoa_r+0x70e>
 8013f78:	f7ec f93e 	bl	80001f8 <__adddf3>
 8013f7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f80:	4680      	mov	r8, r0
 8013f82:	4689      	mov	r9, r1
 8013f84:	f7ec fd7e 	bl	8000a84 <__aeabi_dcmpgt>
 8013f88:	bb58      	cbnz	r0, 8013fe2 <_dtoa_r+0x70a>
 8013f8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f8e:	4640      	mov	r0, r8
 8013f90:	4649      	mov	r1, r9
 8013f92:	f7ec fd4f 	bl	8000a34 <__aeabi_dcmpeq>
 8013f96:	b108      	cbz	r0, 8013f9c <_dtoa_r+0x6c4>
 8013f98:	07e1      	lsls	r1, r4, #31
 8013f9a:	d422      	bmi.n	8013fe2 <_dtoa_r+0x70a>
 8013f9c:	4628      	mov	r0, r5
 8013f9e:	4659      	mov	r1, fp
 8013fa0:	f000 ff54 	bl	8014e4c <_Bfree>
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	703b      	strb	r3, [r7, #0]
 8013fa8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013faa:	f10a 0001 	add.w	r0, sl, #1
 8013fae:	6018      	str	r0, [r3, #0]
 8013fb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	f43f acde 	beq.w	8013974 <_dtoa_r+0x9c>
 8013fb8:	601f      	str	r7, [r3, #0]
 8013fba:	e4db      	b.n	8013974 <_dtoa_r+0x9c>
 8013fbc:	4627      	mov	r7, r4
 8013fbe:	463b      	mov	r3, r7
 8013fc0:	461f      	mov	r7, r3
 8013fc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013fc6:	2a39      	cmp	r2, #57	; 0x39
 8013fc8:	d107      	bne.n	8013fda <_dtoa_r+0x702>
 8013fca:	9a03      	ldr	r2, [sp, #12]
 8013fcc:	429a      	cmp	r2, r3
 8013fce:	d1f7      	bne.n	8013fc0 <_dtoa_r+0x6e8>
 8013fd0:	2230      	movs	r2, #48	; 0x30
 8013fd2:	9903      	ldr	r1, [sp, #12]
 8013fd4:	f108 0801 	add.w	r8, r8, #1
 8013fd8:	700a      	strb	r2, [r1, #0]
 8013fda:	781a      	ldrb	r2, [r3, #0]
 8013fdc:	3201      	adds	r2, #1
 8013fde:	701a      	strb	r2, [r3, #0]
 8013fe0:	e79e      	b.n	8013f20 <_dtoa_r+0x648>
 8013fe2:	46d0      	mov	r8, sl
 8013fe4:	e7eb      	b.n	8013fbe <_dtoa_r+0x6e6>
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	4b6e      	ldr	r3, [pc, #440]	; (80141a4 <_dtoa_r+0x8cc>)
 8013fea:	f7ec fabb 	bl	8000564 <__aeabi_dmul>
 8013fee:	2200      	movs	r2, #0
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	4680      	mov	r8, r0
 8013ff4:	4689      	mov	r9, r1
 8013ff6:	f7ec fd1d 	bl	8000a34 <__aeabi_dcmpeq>
 8013ffa:	2800      	cmp	r0, #0
 8013ffc:	d09b      	beq.n	8013f36 <_dtoa_r+0x65e>
 8013ffe:	e7cd      	b.n	8013f9c <_dtoa_r+0x6c4>
 8014000:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014002:	2a00      	cmp	r2, #0
 8014004:	f000 80d0 	beq.w	80141a8 <_dtoa_r+0x8d0>
 8014008:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801400a:	2a01      	cmp	r2, #1
 801400c:	f300 80ae 	bgt.w	801416c <_dtoa_r+0x894>
 8014010:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014012:	2a00      	cmp	r2, #0
 8014014:	f000 80a6 	beq.w	8014164 <_dtoa_r+0x88c>
 8014018:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801401c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801401e:	9f06      	ldr	r7, [sp, #24]
 8014020:	9a06      	ldr	r2, [sp, #24]
 8014022:	2101      	movs	r1, #1
 8014024:	441a      	add	r2, r3
 8014026:	9206      	str	r2, [sp, #24]
 8014028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801402a:	4628      	mov	r0, r5
 801402c:	441a      	add	r2, r3
 801402e:	9209      	str	r2, [sp, #36]	; 0x24
 8014030:	f001 f80c 	bl	801504c <__i2b>
 8014034:	4606      	mov	r6, r0
 8014036:	2f00      	cmp	r7, #0
 8014038:	dd0c      	ble.n	8014054 <_dtoa_r+0x77c>
 801403a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801403c:	2b00      	cmp	r3, #0
 801403e:	dd09      	ble.n	8014054 <_dtoa_r+0x77c>
 8014040:	42bb      	cmp	r3, r7
 8014042:	bfa8      	it	ge
 8014044:	463b      	movge	r3, r7
 8014046:	9a06      	ldr	r2, [sp, #24]
 8014048:	1aff      	subs	r7, r7, r3
 801404a:	1ad2      	subs	r2, r2, r3
 801404c:	9206      	str	r2, [sp, #24]
 801404e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014050:	1ad3      	subs	r3, r2, r3
 8014052:	9309      	str	r3, [sp, #36]	; 0x24
 8014054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014056:	b1f3      	cbz	r3, 8014096 <_dtoa_r+0x7be>
 8014058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801405a:	2b00      	cmp	r3, #0
 801405c:	f000 80a8 	beq.w	80141b0 <_dtoa_r+0x8d8>
 8014060:	2c00      	cmp	r4, #0
 8014062:	dd10      	ble.n	8014086 <_dtoa_r+0x7ae>
 8014064:	4631      	mov	r1, r6
 8014066:	4622      	mov	r2, r4
 8014068:	4628      	mov	r0, r5
 801406a:	f001 f8ad 	bl	80151c8 <__pow5mult>
 801406e:	465a      	mov	r2, fp
 8014070:	4601      	mov	r1, r0
 8014072:	4606      	mov	r6, r0
 8014074:	4628      	mov	r0, r5
 8014076:	f000 ffff 	bl	8015078 <__multiply>
 801407a:	4680      	mov	r8, r0
 801407c:	4659      	mov	r1, fp
 801407e:	4628      	mov	r0, r5
 8014080:	f000 fee4 	bl	8014e4c <_Bfree>
 8014084:	46c3      	mov	fp, r8
 8014086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014088:	1b1a      	subs	r2, r3, r4
 801408a:	d004      	beq.n	8014096 <_dtoa_r+0x7be>
 801408c:	4659      	mov	r1, fp
 801408e:	4628      	mov	r0, r5
 8014090:	f001 f89a 	bl	80151c8 <__pow5mult>
 8014094:	4683      	mov	fp, r0
 8014096:	2101      	movs	r1, #1
 8014098:	4628      	mov	r0, r5
 801409a:	f000 ffd7 	bl	801504c <__i2b>
 801409e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140a0:	4604      	mov	r4, r0
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	f340 8086 	ble.w	80141b4 <_dtoa_r+0x8dc>
 80140a8:	461a      	mov	r2, r3
 80140aa:	4601      	mov	r1, r0
 80140ac:	4628      	mov	r0, r5
 80140ae:	f001 f88b 	bl	80151c8 <__pow5mult>
 80140b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80140b4:	4604      	mov	r4, r0
 80140b6:	2b01      	cmp	r3, #1
 80140b8:	dd7f      	ble.n	80141ba <_dtoa_r+0x8e2>
 80140ba:	f04f 0800 	mov.w	r8, #0
 80140be:	6923      	ldr	r3, [r4, #16]
 80140c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80140c4:	6918      	ldr	r0, [r3, #16]
 80140c6:	f000 ff73 	bl	8014fb0 <__hi0bits>
 80140ca:	f1c0 0020 	rsb	r0, r0, #32
 80140ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140d0:	4418      	add	r0, r3
 80140d2:	f010 001f 	ands.w	r0, r0, #31
 80140d6:	f000 8092 	beq.w	80141fe <_dtoa_r+0x926>
 80140da:	f1c0 0320 	rsb	r3, r0, #32
 80140de:	2b04      	cmp	r3, #4
 80140e0:	f340 808a 	ble.w	80141f8 <_dtoa_r+0x920>
 80140e4:	f1c0 001c 	rsb	r0, r0, #28
 80140e8:	9b06      	ldr	r3, [sp, #24]
 80140ea:	4407      	add	r7, r0
 80140ec:	4403      	add	r3, r0
 80140ee:	9306      	str	r3, [sp, #24]
 80140f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140f2:	4403      	add	r3, r0
 80140f4:	9309      	str	r3, [sp, #36]	; 0x24
 80140f6:	9b06      	ldr	r3, [sp, #24]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	dd05      	ble.n	8014108 <_dtoa_r+0x830>
 80140fc:	4659      	mov	r1, fp
 80140fe:	461a      	mov	r2, r3
 8014100:	4628      	mov	r0, r5
 8014102:	f001 f8bb 	bl	801527c <__lshift>
 8014106:	4683      	mov	fp, r0
 8014108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801410a:	2b00      	cmp	r3, #0
 801410c:	dd05      	ble.n	801411a <_dtoa_r+0x842>
 801410e:	4621      	mov	r1, r4
 8014110:	461a      	mov	r2, r3
 8014112:	4628      	mov	r0, r5
 8014114:	f001 f8b2 	bl	801527c <__lshift>
 8014118:	4604      	mov	r4, r0
 801411a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801411c:	2b00      	cmp	r3, #0
 801411e:	d070      	beq.n	8014202 <_dtoa_r+0x92a>
 8014120:	4621      	mov	r1, r4
 8014122:	4658      	mov	r0, fp
 8014124:	f001 f91a 	bl	801535c <__mcmp>
 8014128:	2800      	cmp	r0, #0
 801412a:	da6a      	bge.n	8014202 <_dtoa_r+0x92a>
 801412c:	2300      	movs	r3, #0
 801412e:	4659      	mov	r1, fp
 8014130:	220a      	movs	r2, #10
 8014132:	4628      	mov	r0, r5
 8014134:	f000 feac 	bl	8014e90 <__multadd>
 8014138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801413a:	4683      	mov	fp, r0
 801413c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8014140:	2b00      	cmp	r3, #0
 8014142:	f000 8194 	beq.w	801446e <_dtoa_r+0xb96>
 8014146:	4631      	mov	r1, r6
 8014148:	2300      	movs	r3, #0
 801414a:	220a      	movs	r2, #10
 801414c:	4628      	mov	r0, r5
 801414e:	f000 fe9f 	bl	8014e90 <__multadd>
 8014152:	f1b9 0f00 	cmp.w	r9, #0
 8014156:	4606      	mov	r6, r0
 8014158:	f300 8093 	bgt.w	8014282 <_dtoa_r+0x9aa>
 801415c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801415e:	2b02      	cmp	r3, #2
 8014160:	dc57      	bgt.n	8014212 <_dtoa_r+0x93a>
 8014162:	e08e      	b.n	8014282 <_dtoa_r+0x9aa>
 8014164:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014166:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801416a:	e757      	b.n	801401c <_dtoa_r+0x744>
 801416c:	9b08      	ldr	r3, [sp, #32]
 801416e:	1e5c      	subs	r4, r3, #1
 8014170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014172:	42a3      	cmp	r3, r4
 8014174:	bfb7      	itett	lt
 8014176:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014178:	1b1c      	subge	r4, r3, r4
 801417a:	1ae2      	sublt	r2, r4, r3
 801417c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801417e:	bfbe      	ittt	lt
 8014180:	940a      	strlt	r4, [sp, #40]	; 0x28
 8014182:	189b      	addlt	r3, r3, r2
 8014184:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014186:	9b08      	ldr	r3, [sp, #32]
 8014188:	bfb8      	it	lt
 801418a:	2400      	movlt	r4, #0
 801418c:	2b00      	cmp	r3, #0
 801418e:	bfbb      	ittet	lt
 8014190:	9b06      	ldrlt	r3, [sp, #24]
 8014192:	9a08      	ldrlt	r2, [sp, #32]
 8014194:	9f06      	ldrge	r7, [sp, #24]
 8014196:	1a9f      	sublt	r7, r3, r2
 8014198:	bfac      	ite	ge
 801419a:	9b08      	ldrge	r3, [sp, #32]
 801419c:	2300      	movlt	r3, #0
 801419e:	e73f      	b.n	8014020 <_dtoa_r+0x748>
 80141a0:	3fe00000 	.word	0x3fe00000
 80141a4:	40240000 	.word	0x40240000
 80141a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80141aa:	9f06      	ldr	r7, [sp, #24]
 80141ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80141ae:	e742      	b.n	8014036 <_dtoa_r+0x75e>
 80141b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80141b2:	e76b      	b.n	801408c <_dtoa_r+0x7b4>
 80141b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80141b6:	2b01      	cmp	r3, #1
 80141b8:	dc19      	bgt.n	80141ee <_dtoa_r+0x916>
 80141ba:	9b04      	ldr	r3, [sp, #16]
 80141bc:	b9bb      	cbnz	r3, 80141ee <_dtoa_r+0x916>
 80141be:	9b05      	ldr	r3, [sp, #20]
 80141c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80141c4:	b99b      	cbnz	r3, 80141ee <_dtoa_r+0x916>
 80141c6:	9b05      	ldr	r3, [sp, #20]
 80141c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80141cc:	0d1b      	lsrs	r3, r3, #20
 80141ce:	051b      	lsls	r3, r3, #20
 80141d0:	b183      	cbz	r3, 80141f4 <_dtoa_r+0x91c>
 80141d2:	f04f 0801 	mov.w	r8, #1
 80141d6:	9b06      	ldr	r3, [sp, #24]
 80141d8:	3301      	adds	r3, #1
 80141da:	9306      	str	r3, [sp, #24]
 80141dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141de:	3301      	adds	r3, #1
 80141e0:	9309      	str	r3, [sp, #36]	; 0x24
 80141e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	f47f af6a 	bne.w	80140be <_dtoa_r+0x7e6>
 80141ea:	2001      	movs	r0, #1
 80141ec:	e76f      	b.n	80140ce <_dtoa_r+0x7f6>
 80141ee:	f04f 0800 	mov.w	r8, #0
 80141f2:	e7f6      	b.n	80141e2 <_dtoa_r+0x90a>
 80141f4:	4698      	mov	r8, r3
 80141f6:	e7f4      	b.n	80141e2 <_dtoa_r+0x90a>
 80141f8:	f43f af7d 	beq.w	80140f6 <_dtoa_r+0x81e>
 80141fc:	4618      	mov	r0, r3
 80141fe:	301c      	adds	r0, #28
 8014200:	e772      	b.n	80140e8 <_dtoa_r+0x810>
 8014202:	9b08      	ldr	r3, [sp, #32]
 8014204:	2b00      	cmp	r3, #0
 8014206:	dc36      	bgt.n	8014276 <_dtoa_r+0x99e>
 8014208:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801420a:	2b02      	cmp	r3, #2
 801420c:	dd33      	ble.n	8014276 <_dtoa_r+0x99e>
 801420e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014212:	f1b9 0f00 	cmp.w	r9, #0
 8014216:	d10d      	bne.n	8014234 <_dtoa_r+0x95c>
 8014218:	4621      	mov	r1, r4
 801421a:	464b      	mov	r3, r9
 801421c:	2205      	movs	r2, #5
 801421e:	4628      	mov	r0, r5
 8014220:	f000 fe36 	bl	8014e90 <__multadd>
 8014224:	4601      	mov	r1, r0
 8014226:	4604      	mov	r4, r0
 8014228:	4658      	mov	r0, fp
 801422a:	f001 f897 	bl	801535c <__mcmp>
 801422e:	2800      	cmp	r0, #0
 8014230:	f73f adb8 	bgt.w	8013da4 <_dtoa_r+0x4cc>
 8014234:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014236:	9f03      	ldr	r7, [sp, #12]
 8014238:	ea6f 0a03 	mvn.w	sl, r3
 801423c:	f04f 0800 	mov.w	r8, #0
 8014240:	4621      	mov	r1, r4
 8014242:	4628      	mov	r0, r5
 8014244:	f000 fe02 	bl	8014e4c <_Bfree>
 8014248:	2e00      	cmp	r6, #0
 801424a:	f43f aea7 	beq.w	8013f9c <_dtoa_r+0x6c4>
 801424e:	f1b8 0f00 	cmp.w	r8, #0
 8014252:	d005      	beq.n	8014260 <_dtoa_r+0x988>
 8014254:	45b0      	cmp	r8, r6
 8014256:	d003      	beq.n	8014260 <_dtoa_r+0x988>
 8014258:	4641      	mov	r1, r8
 801425a:	4628      	mov	r0, r5
 801425c:	f000 fdf6 	bl	8014e4c <_Bfree>
 8014260:	4631      	mov	r1, r6
 8014262:	4628      	mov	r0, r5
 8014264:	f000 fdf2 	bl	8014e4c <_Bfree>
 8014268:	e698      	b.n	8013f9c <_dtoa_r+0x6c4>
 801426a:	2400      	movs	r4, #0
 801426c:	4626      	mov	r6, r4
 801426e:	e7e1      	b.n	8014234 <_dtoa_r+0x95c>
 8014270:	46c2      	mov	sl, r8
 8014272:	4626      	mov	r6, r4
 8014274:	e596      	b.n	8013da4 <_dtoa_r+0x4cc>
 8014276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014278:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801427c:	2b00      	cmp	r3, #0
 801427e:	f000 80fd 	beq.w	801447c <_dtoa_r+0xba4>
 8014282:	2f00      	cmp	r7, #0
 8014284:	dd05      	ble.n	8014292 <_dtoa_r+0x9ba>
 8014286:	4631      	mov	r1, r6
 8014288:	463a      	mov	r2, r7
 801428a:	4628      	mov	r0, r5
 801428c:	f000 fff6 	bl	801527c <__lshift>
 8014290:	4606      	mov	r6, r0
 8014292:	f1b8 0f00 	cmp.w	r8, #0
 8014296:	d05c      	beq.n	8014352 <_dtoa_r+0xa7a>
 8014298:	4628      	mov	r0, r5
 801429a:	6871      	ldr	r1, [r6, #4]
 801429c:	f000 fd96 	bl	8014dcc <_Balloc>
 80142a0:	4607      	mov	r7, r0
 80142a2:	b928      	cbnz	r0, 80142b0 <_dtoa_r+0x9d8>
 80142a4:	4602      	mov	r2, r0
 80142a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80142aa:	4b7f      	ldr	r3, [pc, #508]	; (80144a8 <_dtoa_r+0xbd0>)
 80142ac:	f7ff bb28 	b.w	8013900 <_dtoa_r+0x28>
 80142b0:	6932      	ldr	r2, [r6, #16]
 80142b2:	f106 010c 	add.w	r1, r6, #12
 80142b6:	3202      	adds	r2, #2
 80142b8:	0092      	lsls	r2, r2, #2
 80142ba:	300c      	adds	r0, #12
 80142bc:	f7fd fd1c 	bl	8011cf8 <memcpy>
 80142c0:	2201      	movs	r2, #1
 80142c2:	4639      	mov	r1, r7
 80142c4:	4628      	mov	r0, r5
 80142c6:	f000 ffd9 	bl	801527c <__lshift>
 80142ca:	46b0      	mov	r8, r6
 80142cc:	4606      	mov	r6, r0
 80142ce:	9b03      	ldr	r3, [sp, #12]
 80142d0:	3301      	adds	r3, #1
 80142d2:	9308      	str	r3, [sp, #32]
 80142d4:	9b03      	ldr	r3, [sp, #12]
 80142d6:	444b      	add	r3, r9
 80142d8:	930a      	str	r3, [sp, #40]	; 0x28
 80142da:	9b04      	ldr	r3, [sp, #16]
 80142dc:	f003 0301 	and.w	r3, r3, #1
 80142e0:	9309      	str	r3, [sp, #36]	; 0x24
 80142e2:	9b08      	ldr	r3, [sp, #32]
 80142e4:	4621      	mov	r1, r4
 80142e6:	3b01      	subs	r3, #1
 80142e8:	4658      	mov	r0, fp
 80142ea:	9304      	str	r3, [sp, #16]
 80142ec:	f7ff fa68 	bl	80137c0 <quorem>
 80142f0:	4603      	mov	r3, r0
 80142f2:	4641      	mov	r1, r8
 80142f4:	3330      	adds	r3, #48	; 0x30
 80142f6:	9006      	str	r0, [sp, #24]
 80142f8:	4658      	mov	r0, fp
 80142fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80142fc:	f001 f82e 	bl	801535c <__mcmp>
 8014300:	4632      	mov	r2, r6
 8014302:	4681      	mov	r9, r0
 8014304:	4621      	mov	r1, r4
 8014306:	4628      	mov	r0, r5
 8014308:	f001 f844 	bl	8015394 <__mdiff>
 801430c:	68c2      	ldr	r2, [r0, #12]
 801430e:	4607      	mov	r7, r0
 8014310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014312:	bb02      	cbnz	r2, 8014356 <_dtoa_r+0xa7e>
 8014314:	4601      	mov	r1, r0
 8014316:	4658      	mov	r0, fp
 8014318:	f001 f820 	bl	801535c <__mcmp>
 801431c:	4602      	mov	r2, r0
 801431e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014320:	4639      	mov	r1, r7
 8014322:	4628      	mov	r0, r5
 8014324:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8014328:	f000 fd90 	bl	8014e4c <_Bfree>
 801432c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801432e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014330:	9f08      	ldr	r7, [sp, #32]
 8014332:	ea43 0102 	orr.w	r1, r3, r2
 8014336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014338:	430b      	orrs	r3, r1
 801433a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801433c:	d10d      	bne.n	801435a <_dtoa_r+0xa82>
 801433e:	2b39      	cmp	r3, #57	; 0x39
 8014340:	d029      	beq.n	8014396 <_dtoa_r+0xabe>
 8014342:	f1b9 0f00 	cmp.w	r9, #0
 8014346:	dd01      	ble.n	801434c <_dtoa_r+0xa74>
 8014348:	9b06      	ldr	r3, [sp, #24]
 801434a:	3331      	adds	r3, #49	; 0x31
 801434c:	9a04      	ldr	r2, [sp, #16]
 801434e:	7013      	strb	r3, [r2, #0]
 8014350:	e776      	b.n	8014240 <_dtoa_r+0x968>
 8014352:	4630      	mov	r0, r6
 8014354:	e7b9      	b.n	80142ca <_dtoa_r+0x9f2>
 8014356:	2201      	movs	r2, #1
 8014358:	e7e2      	b.n	8014320 <_dtoa_r+0xa48>
 801435a:	f1b9 0f00 	cmp.w	r9, #0
 801435e:	db06      	blt.n	801436e <_dtoa_r+0xa96>
 8014360:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014362:	ea41 0909 	orr.w	r9, r1, r9
 8014366:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014368:	ea59 0101 	orrs.w	r1, r9, r1
 801436c:	d120      	bne.n	80143b0 <_dtoa_r+0xad8>
 801436e:	2a00      	cmp	r2, #0
 8014370:	ddec      	ble.n	801434c <_dtoa_r+0xa74>
 8014372:	4659      	mov	r1, fp
 8014374:	2201      	movs	r2, #1
 8014376:	4628      	mov	r0, r5
 8014378:	9308      	str	r3, [sp, #32]
 801437a:	f000 ff7f 	bl	801527c <__lshift>
 801437e:	4621      	mov	r1, r4
 8014380:	4683      	mov	fp, r0
 8014382:	f000 ffeb 	bl	801535c <__mcmp>
 8014386:	2800      	cmp	r0, #0
 8014388:	9b08      	ldr	r3, [sp, #32]
 801438a:	dc02      	bgt.n	8014392 <_dtoa_r+0xaba>
 801438c:	d1de      	bne.n	801434c <_dtoa_r+0xa74>
 801438e:	07da      	lsls	r2, r3, #31
 8014390:	d5dc      	bpl.n	801434c <_dtoa_r+0xa74>
 8014392:	2b39      	cmp	r3, #57	; 0x39
 8014394:	d1d8      	bne.n	8014348 <_dtoa_r+0xa70>
 8014396:	2339      	movs	r3, #57	; 0x39
 8014398:	9a04      	ldr	r2, [sp, #16]
 801439a:	7013      	strb	r3, [r2, #0]
 801439c:	463b      	mov	r3, r7
 801439e:	461f      	mov	r7, r3
 80143a0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80143a4:	3b01      	subs	r3, #1
 80143a6:	2a39      	cmp	r2, #57	; 0x39
 80143a8:	d050      	beq.n	801444c <_dtoa_r+0xb74>
 80143aa:	3201      	adds	r2, #1
 80143ac:	701a      	strb	r2, [r3, #0]
 80143ae:	e747      	b.n	8014240 <_dtoa_r+0x968>
 80143b0:	2a00      	cmp	r2, #0
 80143b2:	dd03      	ble.n	80143bc <_dtoa_r+0xae4>
 80143b4:	2b39      	cmp	r3, #57	; 0x39
 80143b6:	d0ee      	beq.n	8014396 <_dtoa_r+0xabe>
 80143b8:	3301      	adds	r3, #1
 80143ba:	e7c7      	b.n	801434c <_dtoa_r+0xa74>
 80143bc:	9a08      	ldr	r2, [sp, #32]
 80143be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80143c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80143c4:	428a      	cmp	r2, r1
 80143c6:	d02a      	beq.n	801441e <_dtoa_r+0xb46>
 80143c8:	4659      	mov	r1, fp
 80143ca:	2300      	movs	r3, #0
 80143cc:	220a      	movs	r2, #10
 80143ce:	4628      	mov	r0, r5
 80143d0:	f000 fd5e 	bl	8014e90 <__multadd>
 80143d4:	45b0      	cmp	r8, r6
 80143d6:	4683      	mov	fp, r0
 80143d8:	f04f 0300 	mov.w	r3, #0
 80143dc:	f04f 020a 	mov.w	r2, #10
 80143e0:	4641      	mov	r1, r8
 80143e2:	4628      	mov	r0, r5
 80143e4:	d107      	bne.n	80143f6 <_dtoa_r+0xb1e>
 80143e6:	f000 fd53 	bl	8014e90 <__multadd>
 80143ea:	4680      	mov	r8, r0
 80143ec:	4606      	mov	r6, r0
 80143ee:	9b08      	ldr	r3, [sp, #32]
 80143f0:	3301      	adds	r3, #1
 80143f2:	9308      	str	r3, [sp, #32]
 80143f4:	e775      	b.n	80142e2 <_dtoa_r+0xa0a>
 80143f6:	f000 fd4b 	bl	8014e90 <__multadd>
 80143fa:	4631      	mov	r1, r6
 80143fc:	4680      	mov	r8, r0
 80143fe:	2300      	movs	r3, #0
 8014400:	220a      	movs	r2, #10
 8014402:	4628      	mov	r0, r5
 8014404:	f000 fd44 	bl	8014e90 <__multadd>
 8014408:	4606      	mov	r6, r0
 801440a:	e7f0      	b.n	80143ee <_dtoa_r+0xb16>
 801440c:	f1b9 0f00 	cmp.w	r9, #0
 8014410:	bfcc      	ite	gt
 8014412:	464f      	movgt	r7, r9
 8014414:	2701      	movle	r7, #1
 8014416:	f04f 0800 	mov.w	r8, #0
 801441a:	9a03      	ldr	r2, [sp, #12]
 801441c:	4417      	add	r7, r2
 801441e:	4659      	mov	r1, fp
 8014420:	2201      	movs	r2, #1
 8014422:	4628      	mov	r0, r5
 8014424:	9308      	str	r3, [sp, #32]
 8014426:	f000 ff29 	bl	801527c <__lshift>
 801442a:	4621      	mov	r1, r4
 801442c:	4683      	mov	fp, r0
 801442e:	f000 ff95 	bl	801535c <__mcmp>
 8014432:	2800      	cmp	r0, #0
 8014434:	dcb2      	bgt.n	801439c <_dtoa_r+0xac4>
 8014436:	d102      	bne.n	801443e <_dtoa_r+0xb66>
 8014438:	9b08      	ldr	r3, [sp, #32]
 801443a:	07db      	lsls	r3, r3, #31
 801443c:	d4ae      	bmi.n	801439c <_dtoa_r+0xac4>
 801443e:	463b      	mov	r3, r7
 8014440:	461f      	mov	r7, r3
 8014442:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014446:	2a30      	cmp	r2, #48	; 0x30
 8014448:	d0fa      	beq.n	8014440 <_dtoa_r+0xb68>
 801444a:	e6f9      	b.n	8014240 <_dtoa_r+0x968>
 801444c:	9a03      	ldr	r2, [sp, #12]
 801444e:	429a      	cmp	r2, r3
 8014450:	d1a5      	bne.n	801439e <_dtoa_r+0xac6>
 8014452:	2331      	movs	r3, #49	; 0x31
 8014454:	f10a 0a01 	add.w	sl, sl, #1
 8014458:	e779      	b.n	801434e <_dtoa_r+0xa76>
 801445a:	4b14      	ldr	r3, [pc, #80]	; (80144ac <_dtoa_r+0xbd4>)
 801445c:	f7ff baa8 	b.w	80139b0 <_dtoa_r+0xd8>
 8014460:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014462:	2b00      	cmp	r3, #0
 8014464:	f47f aa81 	bne.w	801396a <_dtoa_r+0x92>
 8014468:	4b11      	ldr	r3, [pc, #68]	; (80144b0 <_dtoa_r+0xbd8>)
 801446a:	f7ff baa1 	b.w	80139b0 <_dtoa_r+0xd8>
 801446e:	f1b9 0f00 	cmp.w	r9, #0
 8014472:	dc03      	bgt.n	801447c <_dtoa_r+0xba4>
 8014474:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014476:	2b02      	cmp	r3, #2
 8014478:	f73f aecb 	bgt.w	8014212 <_dtoa_r+0x93a>
 801447c:	9f03      	ldr	r7, [sp, #12]
 801447e:	4621      	mov	r1, r4
 8014480:	4658      	mov	r0, fp
 8014482:	f7ff f99d 	bl	80137c0 <quorem>
 8014486:	9a03      	ldr	r2, [sp, #12]
 8014488:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801448c:	f807 3b01 	strb.w	r3, [r7], #1
 8014490:	1aba      	subs	r2, r7, r2
 8014492:	4591      	cmp	r9, r2
 8014494:	ddba      	ble.n	801440c <_dtoa_r+0xb34>
 8014496:	4659      	mov	r1, fp
 8014498:	2300      	movs	r3, #0
 801449a:	220a      	movs	r2, #10
 801449c:	4628      	mov	r0, r5
 801449e:	f000 fcf7 	bl	8014e90 <__multadd>
 80144a2:	4683      	mov	fp, r0
 80144a4:	e7eb      	b.n	801447e <_dtoa_r+0xba6>
 80144a6:	bf00      	nop
 80144a8:	08018898 	.word	0x08018898
 80144ac:	0801869c 	.word	0x0801869c
 80144b0:	08018819 	.word	0x08018819

080144b4 <std>:
 80144b4:	2300      	movs	r3, #0
 80144b6:	b510      	push	{r4, lr}
 80144b8:	4604      	mov	r4, r0
 80144ba:	e9c0 3300 	strd	r3, r3, [r0]
 80144be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80144c2:	6083      	str	r3, [r0, #8]
 80144c4:	8181      	strh	r1, [r0, #12]
 80144c6:	6643      	str	r3, [r0, #100]	; 0x64
 80144c8:	81c2      	strh	r2, [r0, #14]
 80144ca:	6183      	str	r3, [r0, #24]
 80144cc:	4619      	mov	r1, r3
 80144ce:	2208      	movs	r2, #8
 80144d0:	305c      	adds	r0, #92	; 0x5c
 80144d2:	f7fd fc1f 	bl	8011d14 <memset>
 80144d6:	4b05      	ldr	r3, [pc, #20]	; (80144ec <std+0x38>)
 80144d8:	6224      	str	r4, [r4, #32]
 80144da:	6263      	str	r3, [r4, #36]	; 0x24
 80144dc:	4b04      	ldr	r3, [pc, #16]	; (80144f0 <std+0x3c>)
 80144de:	62a3      	str	r3, [r4, #40]	; 0x28
 80144e0:	4b04      	ldr	r3, [pc, #16]	; (80144f4 <std+0x40>)
 80144e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80144e4:	4b04      	ldr	r3, [pc, #16]	; (80144f8 <std+0x44>)
 80144e6:	6323      	str	r3, [r4, #48]	; 0x30
 80144e8:	bd10      	pop	{r4, pc}
 80144ea:	bf00      	nop
 80144ec:	08015eb1 	.word	0x08015eb1
 80144f0:	08015ed3 	.word	0x08015ed3
 80144f4:	08015f0b 	.word	0x08015f0b
 80144f8:	08015f2f 	.word	0x08015f2f

080144fc <_cleanup_r>:
 80144fc:	4901      	ldr	r1, [pc, #4]	; (8014504 <_cleanup_r+0x8>)
 80144fe:	f000 b8af 	b.w	8014660 <_fwalk_reent>
 8014502:	bf00      	nop
 8014504:	08016259 	.word	0x08016259

08014508 <__sfmoreglue>:
 8014508:	2268      	movs	r2, #104	; 0x68
 801450a:	b570      	push	{r4, r5, r6, lr}
 801450c:	1e4d      	subs	r5, r1, #1
 801450e:	4355      	muls	r5, r2
 8014510:	460e      	mov	r6, r1
 8014512:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014516:	f001 f98d 	bl	8015834 <_malloc_r>
 801451a:	4604      	mov	r4, r0
 801451c:	b140      	cbz	r0, 8014530 <__sfmoreglue+0x28>
 801451e:	2100      	movs	r1, #0
 8014520:	e9c0 1600 	strd	r1, r6, [r0]
 8014524:	300c      	adds	r0, #12
 8014526:	60a0      	str	r0, [r4, #8]
 8014528:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801452c:	f7fd fbf2 	bl	8011d14 <memset>
 8014530:	4620      	mov	r0, r4
 8014532:	bd70      	pop	{r4, r5, r6, pc}

08014534 <__sfp_lock_acquire>:
 8014534:	4801      	ldr	r0, [pc, #4]	; (801453c <__sfp_lock_acquire+0x8>)
 8014536:	f000 bc1e 	b.w	8014d76 <__retarget_lock_acquire_recursive>
 801453a:	bf00      	nop
 801453c:	20007fed 	.word	0x20007fed

08014540 <__sfp_lock_release>:
 8014540:	4801      	ldr	r0, [pc, #4]	; (8014548 <__sfp_lock_release+0x8>)
 8014542:	f000 bc19 	b.w	8014d78 <__retarget_lock_release_recursive>
 8014546:	bf00      	nop
 8014548:	20007fed 	.word	0x20007fed

0801454c <__sinit_lock_acquire>:
 801454c:	4801      	ldr	r0, [pc, #4]	; (8014554 <__sinit_lock_acquire+0x8>)
 801454e:	f000 bc12 	b.w	8014d76 <__retarget_lock_acquire_recursive>
 8014552:	bf00      	nop
 8014554:	20007fee 	.word	0x20007fee

08014558 <__sinit_lock_release>:
 8014558:	4801      	ldr	r0, [pc, #4]	; (8014560 <__sinit_lock_release+0x8>)
 801455a:	f000 bc0d 	b.w	8014d78 <__retarget_lock_release_recursive>
 801455e:	bf00      	nop
 8014560:	20007fee 	.word	0x20007fee

08014564 <__sinit>:
 8014564:	b510      	push	{r4, lr}
 8014566:	4604      	mov	r4, r0
 8014568:	f7ff fff0 	bl	801454c <__sinit_lock_acquire>
 801456c:	69a3      	ldr	r3, [r4, #24]
 801456e:	b11b      	cbz	r3, 8014578 <__sinit+0x14>
 8014570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014574:	f7ff bff0 	b.w	8014558 <__sinit_lock_release>
 8014578:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801457c:	6523      	str	r3, [r4, #80]	; 0x50
 801457e:	4b13      	ldr	r3, [pc, #76]	; (80145cc <__sinit+0x68>)
 8014580:	4a13      	ldr	r2, [pc, #76]	; (80145d0 <__sinit+0x6c>)
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	62a2      	str	r2, [r4, #40]	; 0x28
 8014586:	42a3      	cmp	r3, r4
 8014588:	bf08      	it	eq
 801458a:	2301      	moveq	r3, #1
 801458c:	4620      	mov	r0, r4
 801458e:	bf08      	it	eq
 8014590:	61a3      	streq	r3, [r4, #24]
 8014592:	f000 f81f 	bl	80145d4 <__sfp>
 8014596:	6060      	str	r0, [r4, #4]
 8014598:	4620      	mov	r0, r4
 801459a:	f000 f81b 	bl	80145d4 <__sfp>
 801459e:	60a0      	str	r0, [r4, #8]
 80145a0:	4620      	mov	r0, r4
 80145a2:	f000 f817 	bl	80145d4 <__sfp>
 80145a6:	2200      	movs	r2, #0
 80145a8:	2104      	movs	r1, #4
 80145aa:	60e0      	str	r0, [r4, #12]
 80145ac:	6860      	ldr	r0, [r4, #4]
 80145ae:	f7ff ff81 	bl	80144b4 <std>
 80145b2:	2201      	movs	r2, #1
 80145b4:	2109      	movs	r1, #9
 80145b6:	68a0      	ldr	r0, [r4, #8]
 80145b8:	f7ff ff7c 	bl	80144b4 <std>
 80145bc:	2202      	movs	r2, #2
 80145be:	2112      	movs	r1, #18
 80145c0:	68e0      	ldr	r0, [r4, #12]
 80145c2:	f7ff ff77 	bl	80144b4 <std>
 80145c6:	2301      	movs	r3, #1
 80145c8:	61a3      	str	r3, [r4, #24]
 80145ca:	e7d1      	b.n	8014570 <__sinit+0xc>
 80145cc:	08018688 	.word	0x08018688
 80145d0:	080144fd 	.word	0x080144fd

080145d4 <__sfp>:
 80145d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145d6:	4607      	mov	r7, r0
 80145d8:	f7ff ffac 	bl	8014534 <__sfp_lock_acquire>
 80145dc:	4b1e      	ldr	r3, [pc, #120]	; (8014658 <__sfp+0x84>)
 80145de:	681e      	ldr	r6, [r3, #0]
 80145e0:	69b3      	ldr	r3, [r6, #24]
 80145e2:	b913      	cbnz	r3, 80145ea <__sfp+0x16>
 80145e4:	4630      	mov	r0, r6
 80145e6:	f7ff ffbd 	bl	8014564 <__sinit>
 80145ea:	3648      	adds	r6, #72	; 0x48
 80145ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80145f0:	3b01      	subs	r3, #1
 80145f2:	d503      	bpl.n	80145fc <__sfp+0x28>
 80145f4:	6833      	ldr	r3, [r6, #0]
 80145f6:	b30b      	cbz	r3, 801463c <__sfp+0x68>
 80145f8:	6836      	ldr	r6, [r6, #0]
 80145fa:	e7f7      	b.n	80145ec <__sfp+0x18>
 80145fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014600:	b9d5      	cbnz	r5, 8014638 <__sfp+0x64>
 8014602:	4b16      	ldr	r3, [pc, #88]	; (801465c <__sfp+0x88>)
 8014604:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014608:	60e3      	str	r3, [r4, #12]
 801460a:	6665      	str	r5, [r4, #100]	; 0x64
 801460c:	f000 fbb2 	bl	8014d74 <__retarget_lock_init_recursive>
 8014610:	f7ff ff96 	bl	8014540 <__sfp_lock_release>
 8014614:	2208      	movs	r2, #8
 8014616:	4629      	mov	r1, r5
 8014618:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801461c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014620:	6025      	str	r5, [r4, #0]
 8014622:	61a5      	str	r5, [r4, #24]
 8014624:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014628:	f7fd fb74 	bl	8011d14 <memset>
 801462c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014630:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014634:	4620      	mov	r0, r4
 8014636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014638:	3468      	adds	r4, #104	; 0x68
 801463a:	e7d9      	b.n	80145f0 <__sfp+0x1c>
 801463c:	2104      	movs	r1, #4
 801463e:	4638      	mov	r0, r7
 8014640:	f7ff ff62 	bl	8014508 <__sfmoreglue>
 8014644:	4604      	mov	r4, r0
 8014646:	6030      	str	r0, [r6, #0]
 8014648:	2800      	cmp	r0, #0
 801464a:	d1d5      	bne.n	80145f8 <__sfp+0x24>
 801464c:	f7ff ff78 	bl	8014540 <__sfp_lock_release>
 8014650:	230c      	movs	r3, #12
 8014652:	603b      	str	r3, [r7, #0]
 8014654:	e7ee      	b.n	8014634 <__sfp+0x60>
 8014656:	bf00      	nop
 8014658:	08018688 	.word	0x08018688
 801465c:	ffff0001 	.word	0xffff0001

08014660 <_fwalk_reent>:
 8014660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014664:	4606      	mov	r6, r0
 8014666:	4688      	mov	r8, r1
 8014668:	2700      	movs	r7, #0
 801466a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801466e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014672:	f1b9 0901 	subs.w	r9, r9, #1
 8014676:	d505      	bpl.n	8014684 <_fwalk_reent+0x24>
 8014678:	6824      	ldr	r4, [r4, #0]
 801467a:	2c00      	cmp	r4, #0
 801467c:	d1f7      	bne.n	801466e <_fwalk_reent+0xe>
 801467e:	4638      	mov	r0, r7
 8014680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014684:	89ab      	ldrh	r3, [r5, #12]
 8014686:	2b01      	cmp	r3, #1
 8014688:	d907      	bls.n	801469a <_fwalk_reent+0x3a>
 801468a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801468e:	3301      	adds	r3, #1
 8014690:	d003      	beq.n	801469a <_fwalk_reent+0x3a>
 8014692:	4629      	mov	r1, r5
 8014694:	4630      	mov	r0, r6
 8014696:	47c0      	blx	r8
 8014698:	4307      	orrs	r7, r0
 801469a:	3568      	adds	r5, #104	; 0x68
 801469c:	e7e9      	b.n	8014672 <_fwalk_reent+0x12>

0801469e <rshift>:
 801469e:	6903      	ldr	r3, [r0, #16]
 80146a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80146a4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80146a8:	f100 0414 	add.w	r4, r0, #20
 80146ac:	ea4f 1261 	mov.w	r2, r1, asr #5
 80146b0:	dd46      	ble.n	8014740 <rshift+0xa2>
 80146b2:	f011 011f 	ands.w	r1, r1, #31
 80146b6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80146ba:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80146be:	d10c      	bne.n	80146da <rshift+0x3c>
 80146c0:	4629      	mov	r1, r5
 80146c2:	f100 0710 	add.w	r7, r0, #16
 80146c6:	42b1      	cmp	r1, r6
 80146c8:	d335      	bcc.n	8014736 <rshift+0x98>
 80146ca:	1a9b      	subs	r3, r3, r2
 80146cc:	009b      	lsls	r3, r3, #2
 80146ce:	1eea      	subs	r2, r5, #3
 80146d0:	4296      	cmp	r6, r2
 80146d2:	bf38      	it	cc
 80146d4:	2300      	movcc	r3, #0
 80146d6:	4423      	add	r3, r4
 80146d8:	e015      	b.n	8014706 <rshift+0x68>
 80146da:	46a1      	mov	r9, r4
 80146dc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80146e0:	f1c1 0820 	rsb	r8, r1, #32
 80146e4:	40cf      	lsrs	r7, r1
 80146e6:	f105 0e04 	add.w	lr, r5, #4
 80146ea:	4576      	cmp	r6, lr
 80146ec:	46f4      	mov	ip, lr
 80146ee:	d816      	bhi.n	801471e <rshift+0x80>
 80146f0:	1a9a      	subs	r2, r3, r2
 80146f2:	0092      	lsls	r2, r2, #2
 80146f4:	3a04      	subs	r2, #4
 80146f6:	3501      	adds	r5, #1
 80146f8:	42ae      	cmp	r6, r5
 80146fa:	bf38      	it	cc
 80146fc:	2200      	movcc	r2, #0
 80146fe:	18a3      	adds	r3, r4, r2
 8014700:	50a7      	str	r7, [r4, r2]
 8014702:	b107      	cbz	r7, 8014706 <rshift+0x68>
 8014704:	3304      	adds	r3, #4
 8014706:	42a3      	cmp	r3, r4
 8014708:	eba3 0204 	sub.w	r2, r3, r4
 801470c:	bf08      	it	eq
 801470e:	2300      	moveq	r3, #0
 8014710:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014714:	6102      	str	r2, [r0, #16]
 8014716:	bf08      	it	eq
 8014718:	6143      	streq	r3, [r0, #20]
 801471a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801471e:	f8dc c000 	ldr.w	ip, [ip]
 8014722:	fa0c fc08 	lsl.w	ip, ip, r8
 8014726:	ea4c 0707 	orr.w	r7, ip, r7
 801472a:	f849 7b04 	str.w	r7, [r9], #4
 801472e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014732:	40cf      	lsrs	r7, r1
 8014734:	e7d9      	b.n	80146ea <rshift+0x4c>
 8014736:	f851 cb04 	ldr.w	ip, [r1], #4
 801473a:	f847 cf04 	str.w	ip, [r7, #4]!
 801473e:	e7c2      	b.n	80146c6 <rshift+0x28>
 8014740:	4623      	mov	r3, r4
 8014742:	e7e0      	b.n	8014706 <rshift+0x68>

08014744 <__hexdig_fun>:
 8014744:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014748:	2b09      	cmp	r3, #9
 801474a:	d802      	bhi.n	8014752 <__hexdig_fun+0xe>
 801474c:	3820      	subs	r0, #32
 801474e:	b2c0      	uxtb	r0, r0
 8014750:	4770      	bx	lr
 8014752:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014756:	2b05      	cmp	r3, #5
 8014758:	d801      	bhi.n	801475e <__hexdig_fun+0x1a>
 801475a:	3847      	subs	r0, #71	; 0x47
 801475c:	e7f7      	b.n	801474e <__hexdig_fun+0xa>
 801475e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014762:	2b05      	cmp	r3, #5
 8014764:	d801      	bhi.n	801476a <__hexdig_fun+0x26>
 8014766:	3827      	subs	r0, #39	; 0x27
 8014768:	e7f1      	b.n	801474e <__hexdig_fun+0xa>
 801476a:	2000      	movs	r0, #0
 801476c:	4770      	bx	lr
	...

08014770 <__gethex>:
 8014770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014774:	b08b      	sub	sp, #44	; 0x2c
 8014776:	9305      	str	r3, [sp, #20]
 8014778:	4bb2      	ldr	r3, [pc, #712]	; (8014a44 <__gethex+0x2d4>)
 801477a:	9002      	str	r0, [sp, #8]
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	468b      	mov	fp, r1
 8014780:	4618      	mov	r0, r3
 8014782:	4690      	mov	r8, r2
 8014784:	9303      	str	r3, [sp, #12]
 8014786:	f7eb fd29 	bl	80001dc <strlen>
 801478a:	4682      	mov	sl, r0
 801478c:	9b03      	ldr	r3, [sp, #12]
 801478e:	f8db 2000 	ldr.w	r2, [fp]
 8014792:	4403      	add	r3, r0
 8014794:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014798:	9306      	str	r3, [sp, #24]
 801479a:	1c93      	adds	r3, r2, #2
 801479c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80147a0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80147a4:	32fe      	adds	r2, #254	; 0xfe
 80147a6:	18d1      	adds	r1, r2, r3
 80147a8:	461f      	mov	r7, r3
 80147aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 80147ae:	9101      	str	r1, [sp, #4]
 80147b0:	2830      	cmp	r0, #48	; 0x30
 80147b2:	d0f8      	beq.n	80147a6 <__gethex+0x36>
 80147b4:	f7ff ffc6 	bl	8014744 <__hexdig_fun>
 80147b8:	4604      	mov	r4, r0
 80147ba:	2800      	cmp	r0, #0
 80147bc:	d13a      	bne.n	8014834 <__gethex+0xc4>
 80147be:	4652      	mov	r2, sl
 80147c0:	4638      	mov	r0, r7
 80147c2:	9903      	ldr	r1, [sp, #12]
 80147c4:	f7fe f958 	bl	8012a78 <strncmp>
 80147c8:	4605      	mov	r5, r0
 80147ca:	2800      	cmp	r0, #0
 80147cc:	d166      	bne.n	801489c <__gethex+0x12c>
 80147ce:	f817 000a 	ldrb.w	r0, [r7, sl]
 80147d2:	eb07 060a 	add.w	r6, r7, sl
 80147d6:	f7ff ffb5 	bl	8014744 <__hexdig_fun>
 80147da:	2800      	cmp	r0, #0
 80147dc:	d060      	beq.n	80148a0 <__gethex+0x130>
 80147de:	4633      	mov	r3, r6
 80147e0:	7818      	ldrb	r0, [r3, #0]
 80147e2:	461f      	mov	r7, r3
 80147e4:	2830      	cmp	r0, #48	; 0x30
 80147e6:	f103 0301 	add.w	r3, r3, #1
 80147ea:	d0f9      	beq.n	80147e0 <__gethex+0x70>
 80147ec:	f7ff ffaa 	bl	8014744 <__hexdig_fun>
 80147f0:	2301      	movs	r3, #1
 80147f2:	fab0 f480 	clz	r4, r0
 80147f6:	4635      	mov	r5, r6
 80147f8:	0964      	lsrs	r4, r4, #5
 80147fa:	9301      	str	r3, [sp, #4]
 80147fc:	463a      	mov	r2, r7
 80147fe:	4616      	mov	r6, r2
 8014800:	7830      	ldrb	r0, [r6, #0]
 8014802:	3201      	adds	r2, #1
 8014804:	f7ff ff9e 	bl	8014744 <__hexdig_fun>
 8014808:	2800      	cmp	r0, #0
 801480a:	d1f8      	bne.n	80147fe <__gethex+0x8e>
 801480c:	4652      	mov	r2, sl
 801480e:	4630      	mov	r0, r6
 8014810:	9903      	ldr	r1, [sp, #12]
 8014812:	f7fe f931 	bl	8012a78 <strncmp>
 8014816:	b980      	cbnz	r0, 801483a <__gethex+0xca>
 8014818:	b94d      	cbnz	r5, 801482e <__gethex+0xbe>
 801481a:	eb06 050a 	add.w	r5, r6, sl
 801481e:	462a      	mov	r2, r5
 8014820:	4616      	mov	r6, r2
 8014822:	7830      	ldrb	r0, [r6, #0]
 8014824:	3201      	adds	r2, #1
 8014826:	f7ff ff8d 	bl	8014744 <__hexdig_fun>
 801482a:	2800      	cmp	r0, #0
 801482c:	d1f8      	bne.n	8014820 <__gethex+0xb0>
 801482e:	1bad      	subs	r5, r5, r6
 8014830:	00ad      	lsls	r5, r5, #2
 8014832:	e004      	b.n	801483e <__gethex+0xce>
 8014834:	2400      	movs	r4, #0
 8014836:	4625      	mov	r5, r4
 8014838:	e7e0      	b.n	80147fc <__gethex+0x8c>
 801483a:	2d00      	cmp	r5, #0
 801483c:	d1f7      	bne.n	801482e <__gethex+0xbe>
 801483e:	7833      	ldrb	r3, [r6, #0]
 8014840:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014844:	2b50      	cmp	r3, #80	; 0x50
 8014846:	d139      	bne.n	80148bc <__gethex+0x14c>
 8014848:	7873      	ldrb	r3, [r6, #1]
 801484a:	2b2b      	cmp	r3, #43	; 0x2b
 801484c:	d02a      	beq.n	80148a4 <__gethex+0x134>
 801484e:	2b2d      	cmp	r3, #45	; 0x2d
 8014850:	d02c      	beq.n	80148ac <__gethex+0x13c>
 8014852:	f04f 0900 	mov.w	r9, #0
 8014856:	1c71      	adds	r1, r6, #1
 8014858:	7808      	ldrb	r0, [r1, #0]
 801485a:	f7ff ff73 	bl	8014744 <__hexdig_fun>
 801485e:	1e43      	subs	r3, r0, #1
 8014860:	b2db      	uxtb	r3, r3
 8014862:	2b18      	cmp	r3, #24
 8014864:	d82a      	bhi.n	80148bc <__gethex+0x14c>
 8014866:	f1a0 0210 	sub.w	r2, r0, #16
 801486a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801486e:	f7ff ff69 	bl	8014744 <__hexdig_fun>
 8014872:	1e43      	subs	r3, r0, #1
 8014874:	b2db      	uxtb	r3, r3
 8014876:	2b18      	cmp	r3, #24
 8014878:	d91b      	bls.n	80148b2 <__gethex+0x142>
 801487a:	f1b9 0f00 	cmp.w	r9, #0
 801487e:	d000      	beq.n	8014882 <__gethex+0x112>
 8014880:	4252      	negs	r2, r2
 8014882:	4415      	add	r5, r2
 8014884:	f8cb 1000 	str.w	r1, [fp]
 8014888:	b1d4      	cbz	r4, 80148c0 <__gethex+0x150>
 801488a:	9b01      	ldr	r3, [sp, #4]
 801488c:	2b00      	cmp	r3, #0
 801488e:	bf14      	ite	ne
 8014890:	2700      	movne	r7, #0
 8014892:	2706      	moveq	r7, #6
 8014894:	4638      	mov	r0, r7
 8014896:	b00b      	add	sp, #44	; 0x2c
 8014898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801489c:	463e      	mov	r6, r7
 801489e:	4625      	mov	r5, r4
 80148a0:	2401      	movs	r4, #1
 80148a2:	e7cc      	b.n	801483e <__gethex+0xce>
 80148a4:	f04f 0900 	mov.w	r9, #0
 80148a8:	1cb1      	adds	r1, r6, #2
 80148aa:	e7d5      	b.n	8014858 <__gethex+0xe8>
 80148ac:	f04f 0901 	mov.w	r9, #1
 80148b0:	e7fa      	b.n	80148a8 <__gethex+0x138>
 80148b2:	230a      	movs	r3, #10
 80148b4:	fb03 0202 	mla	r2, r3, r2, r0
 80148b8:	3a10      	subs	r2, #16
 80148ba:	e7d6      	b.n	801486a <__gethex+0xfa>
 80148bc:	4631      	mov	r1, r6
 80148be:	e7e1      	b.n	8014884 <__gethex+0x114>
 80148c0:	4621      	mov	r1, r4
 80148c2:	1bf3      	subs	r3, r6, r7
 80148c4:	3b01      	subs	r3, #1
 80148c6:	2b07      	cmp	r3, #7
 80148c8:	dc0a      	bgt.n	80148e0 <__gethex+0x170>
 80148ca:	9802      	ldr	r0, [sp, #8]
 80148cc:	f000 fa7e 	bl	8014dcc <_Balloc>
 80148d0:	4604      	mov	r4, r0
 80148d2:	b940      	cbnz	r0, 80148e6 <__gethex+0x176>
 80148d4:	4602      	mov	r2, r0
 80148d6:	21de      	movs	r1, #222	; 0xde
 80148d8:	4b5b      	ldr	r3, [pc, #364]	; (8014a48 <__gethex+0x2d8>)
 80148da:	485c      	ldr	r0, [pc, #368]	; (8014a4c <__gethex+0x2dc>)
 80148dc:	f001 fc0c 	bl	80160f8 <__assert_func>
 80148e0:	3101      	adds	r1, #1
 80148e2:	105b      	asrs	r3, r3, #1
 80148e4:	e7ef      	b.n	80148c6 <__gethex+0x156>
 80148e6:	f04f 0b00 	mov.w	fp, #0
 80148ea:	f100 0914 	add.w	r9, r0, #20
 80148ee:	f1ca 0301 	rsb	r3, sl, #1
 80148f2:	f8cd 9010 	str.w	r9, [sp, #16]
 80148f6:	f8cd b004 	str.w	fp, [sp, #4]
 80148fa:	9308      	str	r3, [sp, #32]
 80148fc:	42b7      	cmp	r7, r6
 80148fe:	d33f      	bcc.n	8014980 <__gethex+0x210>
 8014900:	9f04      	ldr	r7, [sp, #16]
 8014902:	9b01      	ldr	r3, [sp, #4]
 8014904:	f847 3b04 	str.w	r3, [r7], #4
 8014908:	eba7 0709 	sub.w	r7, r7, r9
 801490c:	10bf      	asrs	r7, r7, #2
 801490e:	6127      	str	r7, [r4, #16]
 8014910:	4618      	mov	r0, r3
 8014912:	f000 fb4d 	bl	8014fb0 <__hi0bits>
 8014916:	017f      	lsls	r7, r7, #5
 8014918:	f8d8 6000 	ldr.w	r6, [r8]
 801491c:	1a3f      	subs	r7, r7, r0
 801491e:	42b7      	cmp	r7, r6
 8014920:	dd62      	ble.n	80149e8 <__gethex+0x278>
 8014922:	1bbf      	subs	r7, r7, r6
 8014924:	4639      	mov	r1, r7
 8014926:	4620      	mov	r0, r4
 8014928:	f000 fee7 	bl	80156fa <__any_on>
 801492c:	4682      	mov	sl, r0
 801492e:	b1a8      	cbz	r0, 801495c <__gethex+0x1ec>
 8014930:	f04f 0a01 	mov.w	sl, #1
 8014934:	1e7b      	subs	r3, r7, #1
 8014936:	1159      	asrs	r1, r3, #5
 8014938:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801493c:	f003 021f 	and.w	r2, r3, #31
 8014940:	fa0a f202 	lsl.w	r2, sl, r2
 8014944:	420a      	tst	r2, r1
 8014946:	d009      	beq.n	801495c <__gethex+0x1ec>
 8014948:	4553      	cmp	r3, sl
 801494a:	dd05      	ble.n	8014958 <__gethex+0x1e8>
 801494c:	4620      	mov	r0, r4
 801494e:	1eb9      	subs	r1, r7, #2
 8014950:	f000 fed3 	bl	80156fa <__any_on>
 8014954:	2800      	cmp	r0, #0
 8014956:	d144      	bne.n	80149e2 <__gethex+0x272>
 8014958:	f04f 0a02 	mov.w	sl, #2
 801495c:	4639      	mov	r1, r7
 801495e:	4620      	mov	r0, r4
 8014960:	f7ff fe9d 	bl	801469e <rshift>
 8014964:	443d      	add	r5, r7
 8014966:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801496a:	42ab      	cmp	r3, r5
 801496c:	da4a      	bge.n	8014a04 <__gethex+0x294>
 801496e:	4621      	mov	r1, r4
 8014970:	9802      	ldr	r0, [sp, #8]
 8014972:	f000 fa6b 	bl	8014e4c <_Bfree>
 8014976:	2300      	movs	r3, #0
 8014978:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801497a:	27a3      	movs	r7, #163	; 0xa3
 801497c:	6013      	str	r3, [r2, #0]
 801497e:	e789      	b.n	8014894 <__gethex+0x124>
 8014980:	1e73      	subs	r3, r6, #1
 8014982:	9a06      	ldr	r2, [sp, #24]
 8014984:	9307      	str	r3, [sp, #28]
 8014986:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801498a:	4293      	cmp	r3, r2
 801498c:	d019      	beq.n	80149c2 <__gethex+0x252>
 801498e:	f1bb 0f20 	cmp.w	fp, #32
 8014992:	d107      	bne.n	80149a4 <__gethex+0x234>
 8014994:	9b04      	ldr	r3, [sp, #16]
 8014996:	9a01      	ldr	r2, [sp, #4]
 8014998:	f843 2b04 	str.w	r2, [r3], #4
 801499c:	9304      	str	r3, [sp, #16]
 801499e:	2300      	movs	r3, #0
 80149a0:	469b      	mov	fp, r3
 80149a2:	9301      	str	r3, [sp, #4]
 80149a4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80149a8:	f7ff fecc 	bl	8014744 <__hexdig_fun>
 80149ac:	9b01      	ldr	r3, [sp, #4]
 80149ae:	f000 000f 	and.w	r0, r0, #15
 80149b2:	fa00 f00b 	lsl.w	r0, r0, fp
 80149b6:	4303      	orrs	r3, r0
 80149b8:	9301      	str	r3, [sp, #4]
 80149ba:	f10b 0b04 	add.w	fp, fp, #4
 80149be:	9b07      	ldr	r3, [sp, #28]
 80149c0:	e00d      	b.n	80149de <__gethex+0x26e>
 80149c2:	9a08      	ldr	r2, [sp, #32]
 80149c4:	1e73      	subs	r3, r6, #1
 80149c6:	4413      	add	r3, r2
 80149c8:	42bb      	cmp	r3, r7
 80149ca:	d3e0      	bcc.n	801498e <__gethex+0x21e>
 80149cc:	4618      	mov	r0, r3
 80149ce:	4652      	mov	r2, sl
 80149d0:	9903      	ldr	r1, [sp, #12]
 80149d2:	9309      	str	r3, [sp, #36]	; 0x24
 80149d4:	f7fe f850 	bl	8012a78 <strncmp>
 80149d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149da:	2800      	cmp	r0, #0
 80149dc:	d1d7      	bne.n	801498e <__gethex+0x21e>
 80149de:	461e      	mov	r6, r3
 80149e0:	e78c      	b.n	80148fc <__gethex+0x18c>
 80149e2:	f04f 0a03 	mov.w	sl, #3
 80149e6:	e7b9      	b.n	801495c <__gethex+0x1ec>
 80149e8:	da09      	bge.n	80149fe <__gethex+0x28e>
 80149ea:	1bf7      	subs	r7, r6, r7
 80149ec:	4621      	mov	r1, r4
 80149ee:	463a      	mov	r2, r7
 80149f0:	9802      	ldr	r0, [sp, #8]
 80149f2:	f000 fc43 	bl	801527c <__lshift>
 80149f6:	4604      	mov	r4, r0
 80149f8:	1bed      	subs	r5, r5, r7
 80149fa:	f100 0914 	add.w	r9, r0, #20
 80149fe:	f04f 0a00 	mov.w	sl, #0
 8014a02:	e7b0      	b.n	8014966 <__gethex+0x1f6>
 8014a04:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014a08:	42a8      	cmp	r0, r5
 8014a0a:	dd72      	ble.n	8014af2 <__gethex+0x382>
 8014a0c:	1b45      	subs	r5, r0, r5
 8014a0e:	42ae      	cmp	r6, r5
 8014a10:	dc35      	bgt.n	8014a7e <__gethex+0x30e>
 8014a12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014a16:	2b02      	cmp	r3, #2
 8014a18:	d029      	beq.n	8014a6e <__gethex+0x2fe>
 8014a1a:	2b03      	cmp	r3, #3
 8014a1c:	d02b      	beq.n	8014a76 <__gethex+0x306>
 8014a1e:	2b01      	cmp	r3, #1
 8014a20:	d11c      	bne.n	8014a5c <__gethex+0x2ec>
 8014a22:	42ae      	cmp	r6, r5
 8014a24:	d11a      	bne.n	8014a5c <__gethex+0x2ec>
 8014a26:	2e01      	cmp	r6, #1
 8014a28:	d112      	bne.n	8014a50 <__gethex+0x2e0>
 8014a2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014a2e:	9a05      	ldr	r2, [sp, #20]
 8014a30:	2762      	movs	r7, #98	; 0x62
 8014a32:	6013      	str	r3, [r2, #0]
 8014a34:	2301      	movs	r3, #1
 8014a36:	6123      	str	r3, [r4, #16]
 8014a38:	f8c9 3000 	str.w	r3, [r9]
 8014a3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014a3e:	601c      	str	r4, [r3, #0]
 8014a40:	e728      	b.n	8014894 <__gethex+0x124>
 8014a42:	bf00      	nop
 8014a44:	08018974 	.word	0x08018974
 8014a48:	08018898 	.word	0x08018898
 8014a4c:	0801890c 	.word	0x0801890c
 8014a50:	4620      	mov	r0, r4
 8014a52:	1e71      	subs	r1, r6, #1
 8014a54:	f000 fe51 	bl	80156fa <__any_on>
 8014a58:	2800      	cmp	r0, #0
 8014a5a:	d1e6      	bne.n	8014a2a <__gethex+0x2ba>
 8014a5c:	4621      	mov	r1, r4
 8014a5e:	9802      	ldr	r0, [sp, #8]
 8014a60:	f000 f9f4 	bl	8014e4c <_Bfree>
 8014a64:	2300      	movs	r3, #0
 8014a66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014a68:	2750      	movs	r7, #80	; 0x50
 8014a6a:	6013      	str	r3, [r2, #0]
 8014a6c:	e712      	b.n	8014894 <__gethex+0x124>
 8014a6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d1f3      	bne.n	8014a5c <__gethex+0x2ec>
 8014a74:	e7d9      	b.n	8014a2a <__gethex+0x2ba>
 8014a76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d1d6      	bne.n	8014a2a <__gethex+0x2ba>
 8014a7c:	e7ee      	b.n	8014a5c <__gethex+0x2ec>
 8014a7e:	1e6f      	subs	r7, r5, #1
 8014a80:	f1ba 0f00 	cmp.w	sl, #0
 8014a84:	d132      	bne.n	8014aec <__gethex+0x37c>
 8014a86:	b127      	cbz	r7, 8014a92 <__gethex+0x322>
 8014a88:	4639      	mov	r1, r7
 8014a8a:	4620      	mov	r0, r4
 8014a8c:	f000 fe35 	bl	80156fa <__any_on>
 8014a90:	4682      	mov	sl, r0
 8014a92:	2101      	movs	r1, #1
 8014a94:	117b      	asrs	r3, r7, #5
 8014a96:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014a9a:	f007 071f 	and.w	r7, r7, #31
 8014a9e:	fa01 f707 	lsl.w	r7, r1, r7
 8014aa2:	421f      	tst	r7, r3
 8014aa4:	f04f 0702 	mov.w	r7, #2
 8014aa8:	4629      	mov	r1, r5
 8014aaa:	4620      	mov	r0, r4
 8014aac:	bf18      	it	ne
 8014aae:	f04a 0a02 	orrne.w	sl, sl, #2
 8014ab2:	1b76      	subs	r6, r6, r5
 8014ab4:	f7ff fdf3 	bl	801469e <rshift>
 8014ab8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014abc:	f1ba 0f00 	cmp.w	sl, #0
 8014ac0:	d048      	beq.n	8014b54 <__gethex+0x3e4>
 8014ac2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014ac6:	2b02      	cmp	r3, #2
 8014ac8:	d015      	beq.n	8014af6 <__gethex+0x386>
 8014aca:	2b03      	cmp	r3, #3
 8014acc:	d017      	beq.n	8014afe <__gethex+0x38e>
 8014ace:	2b01      	cmp	r3, #1
 8014ad0:	d109      	bne.n	8014ae6 <__gethex+0x376>
 8014ad2:	f01a 0f02 	tst.w	sl, #2
 8014ad6:	d006      	beq.n	8014ae6 <__gethex+0x376>
 8014ad8:	f8d9 0000 	ldr.w	r0, [r9]
 8014adc:	ea4a 0a00 	orr.w	sl, sl, r0
 8014ae0:	f01a 0f01 	tst.w	sl, #1
 8014ae4:	d10e      	bne.n	8014b04 <__gethex+0x394>
 8014ae6:	f047 0710 	orr.w	r7, r7, #16
 8014aea:	e033      	b.n	8014b54 <__gethex+0x3e4>
 8014aec:	f04f 0a01 	mov.w	sl, #1
 8014af0:	e7cf      	b.n	8014a92 <__gethex+0x322>
 8014af2:	2701      	movs	r7, #1
 8014af4:	e7e2      	b.n	8014abc <__gethex+0x34c>
 8014af6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014af8:	f1c3 0301 	rsb	r3, r3, #1
 8014afc:	9315      	str	r3, [sp, #84]	; 0x54
 8014afe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d0f0      	beq.n	8014ae6 <__gethex+0x376>
 8014b04:	f04f 0c00 	mov.w	ip, #0
 8014b08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014b0c:	f104 0314 	add.w	r3, r4, #20
 8014b10:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014b14:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b1e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8014b22:	d01c      	beq.n	8014b5e <__gethex+0x3ee>
 8014b24:	3201      	adds	r2, #1
 8014b26:	6002      	str	r2, [r0, #0]
 8014b28:	2f02      	cmp	r7, #2
 8014b2a:	f104 0314 	add.w	r3, r4, #20
 8014b2e:	d13d      	bne.n	8014bac <__gethex+0x43c>
 8014b30:	f8d8 2000 	ldr.w	r2, [r8]
 8014b34:	3a01      	subs	r2, #1
 8014b36:	42b2      	cmp	r2, r6
 8014b38:	d10a      	bne.n	8014b50 <__gethex+0x3e0>
 8014b3a:	2201      	movs	r2, #1
 8014b3c:	1171      	asrs	r1, r6, #5
 8014b3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014b42:	f006 061f 	and.w	r6, r6, #31
 8014b46:	fa02 f606 	lsl.w	r6, r2, r6
 8014b4a:	421e      	tst	r6, r3
 8014b4c:	bf18      	it	ne
 8014b4e:	4617      	movne	r7, r2
 8014b50:	f047 0720 	orr.w	r7, r7, #32
 8014b54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014b56:	601c      	str	r4, [r3, #0]
 8014b58:	9b05      	ldr	r3, [sp, #20]
 8014b5a:	601d      	str	r5, [r3, #0]
 8014b5c:	e69a      	b.n	8014894 <__gethex+0x124>
 8014b5e:	4299      	cmp	r1, r3
 8014b60:	f843 cc04 	str.w	ip, [r3, #-4]
 8014b64:	d8d8      	bhi.n	8014b18 <__gethex+0x3a8>
 8014b66:	68a3      	ldr	r3, [r4, #8]
 8014b68:	459b      	cmp	fp, r3
 8014b6a:	db17      	blt.n	8014b9c <__gethex+0x42c>
 8014b6c:	6861      	ldr	r1, [r4, #4]
 8014b6e:	9802      	ldr	r0, [sp, #8]
 8014b70:	3101      	adds	r1, #1
 8014b72:	f000 f92b 	bl	8014dcc <_Balloc>
 8014b76:	4681      	mov	r9, r0
 8014b78:	b918      	cbnz	r0, 8014b82 <__gethex+0x412>
 8014b7a:	4602      	mov	r2, r0
 8014b7c:	2184      	movs	r1, #132	; 0x84
 8014b7e:	4b19      	ldr	r3, [pc, #100]	; (8014be4 <__gethex+0x474>)
 8014b80:	e6ab      	b.n	80148da <__gethex+0x16a>
 8014b82:	6922      	ldr	r2, [r4, #16]
 8014b84:	f104 010c 	add.w	r1, r4, #12
 8014b88:	3202      	adds	r2, #2
 8014b8a:	0092      	lsls	r2, r2, #2
 8014b8c:	300c      	adds	r0, #12
 8014b8e:	f7fd f8b3 	bl	8011cf8 <memcpy>
 8014b92:	4621      	mov	r1, r4
 8014b94:	9802      	ldr	r0, [sp, #8]
 8014b96:	f000 f959 	bl	8014e4c <_Bfree>
 8014b9a:	464c      	mov	r4, r9
 8014b9c:	6923      	ldr	r3, [r4, #16]
 8014b9e:	1c5a      	adds	r2, r3, #1
 8014ba0:	6122      	str	r2, [r4, #16]
 8014ba2:	2201      	movs	r2, #1
 8014ba4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014ba8:	615a      	str	r2, [r3, #20]
 8014baa:	e7bd      	b.n	8014b28 <__gethex+0x3b8>
 8014bac:	6922      	ldr	r2, [r4, #16]
 8014bae:	455a      	cmp	r2, fp
 8014bb0:	dd0b      	ble.n	8014bca <__gethex+0x45a>
 8014bb2:	2101      	movs	r1, #1
 8014bb4:	4620      	mov	r0, r4
 8014bb6:	f7ff fd72 	bl	801469e <rshift>
 8014bba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014bbe:	3501      	adds	r5, #1
 8014bc0:	42ab      	cmp	r3, r5
 8014bc2:	f6ff aed4 	blt.w	801496e <__gethex+0x1fe>
 8014bc6:	2701      	movs	r7, #1
 8014bc8:	e7c2      	b.n	8014b50 <__gethex+0x3e0>
 8014bca:	f016 061f 	ands.w	r6, r6, #31
 8014bce:	d0fa      	beq.n	8014bc6 <__gethex+0x456>
 8014bd0:	4453      	add	r3, sl
 8014bd2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014bd6:	f000 f9eb 	bl	8014fb0 <__hi0bits>
 8014bda:	f1c6 0620 	rsb	r6, r6, #32
 8014bde:	42b0      	cmp	r0, r6
 8014be0:	dbe7      	blt.n	8014bb2 <__gethex+0x442>
 8014be2:	e7f0      	b.n	8014bc6 <__gethex+0x456>
 8014be4:	08018898 	.word	0x08018898

08014be8 <L_shift>:
 8014be8:	f1c2 0208 	rsb	r2, r2, #8
 8014bec:	0092      	lsls	r2, r2, #2
 8014bee:	b570      	push	{r4, r5, r6, lr}
 8014bf0:	f1c2 0620 	rsb	r6, r2, #32
 8014bf4:	6843      	ldr	r3, [r0, #4]
 8014bf6:	6804      	ldr	r4, [r0, #0]
 8014bf8:	fa03 f506 	lsl.w	r5, r3, r6
 8014bfc:	432c      	orrs	r4, r5
 8014bfe:	40d3      	lsrs	r3, r2
 8014c00:	6004      	str	r4, [r0, #0]
 8014c02:	f840 3f04 	str.w	r3, [r0, #4]!
 8014c06:	4288      	cmp	r0, r1
 8014c08:	d3f4      	bcc.n	8014bf4 <L_shift+0xc>
 8014c0a:	bd70      	pop	{r4, r5, r6, pc}

08014c0c <__match>:
 8014c0c:	b530      	push	{r4, r5, lr}
 8014c0e:	6803      	ldr	r3, [r0, #0]
 8014c10:	3301      	adds	r3, #1
 8014c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c16:	b914      	cbnz	r4, 8014c1e <__match+0x12>
 8014c18:	6003      	str	r3, [r0, #0]
 8014c1a:	2001      	movs	r0, #1
 8014c1c:	bd30      	pop	{r4, r5, pc}
 8014c1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014c26:	2d19      	cmp	r5, #25
 8014c28:	bf98      	it	ls
 8014c2a:	3220      	addls	r2, #32
 8014c2c:	42a2      	cmp	r2, r4
 8014c2e:	d0f0      	beq.n	8014c12 <__match+0x6>
 8014c30:	2000      	movs	r0, #0
 8014c32:	e7f3      	b.n	8014c1c <__match+0x10>

08014c34 <__hexnan>:
 8014c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c38:	2500      	movs	r5, #0
 8014c3a:	680b      	ldr	r3, [r1, #0]
 8014c3c:	4682      	mov	sl, r0
 8014c3e:	115e      	asrs	r6, r3, #5
 8014c40:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014c44:	f013 031f 	ands.w	r3, r3, #31
 8014c48:	bf18      	it	ne
 8014c4a:	3604      	addne	r6, #4
 8014c4c:	1f37      	subs	r7, r6, #4
 8014c4e:	46b9      	mov	r9, r7
 8014c50:	463c      	mov	r4, r7
 8014c52:	46ab      	mov	fp, r5
 8014c54:	b087      	sub	sp, #28
 8014c56:	4690      	mov	r8, r2
 8014c58:	6802      	ldr	r2, [r0, #0]
 8014c5a:	9301      	str	r3, [sp, #4]
 8014c5c:	f846 5c04 	str.w	r5, [r6, #-4]
 8014c60:	9502      	str	r5, [sp, #8]
 8014c62:	7851      	ldrb	r1, [r2, #1]
 8014c64:	1c53      	adds	r3, r2, #1
 8014c66:	9303      	str	r3, [sp, #12]
 8014c68:	b341      	cbz	r1, 8014cbc <__hexnan+0x88>
 8014c6a:	4608      	mov	r0, r1
 8014c6c:	9205      	str	r2, [sp, #20]
 8014c6e:	9104      	str	r1, [sp, #16]
 8014c70:	f7ff fd68 	bl	8014744 <__hexdig_fun>
 8014c74:	2800      	cmp	r0, #0
 8014c76:	d14f      	bne.n	8014d18 <__hexnan+0xe4>
 8014c78:	9904      	ldr	r1, [sp, #16]
 8014c7a:	9a05      	ldr	r2, [sp, #20]
 8014c7c:	2920      	cmp	r1, #32
 8014c7e:	d818      	bhi.n	8014cb2 <__hexnan+0x7e>
 8014c80:	9b02      	ldr	r3, [sp, #8]
 8014c82:	459b      	cmp	fp, r3
 8014c84:	dd13      	ble.n	8014cae <__hexnan+0x7a>
 8014c86:	454c      	cmp	r4, r9
 8014c88:	d206      	bcs.n	8014c98 <__hexnan+0x64>
 8014c8a:	2d07      	cmp	r5, #7
 8014c8c:	dc04      	bgt.n	8014c98 <__hexnan+0x64>
 8014c8e:	462a      	mov	r2, r5
 8014c90:	4649      	mov	r1, r9
 8014c92:	4620      	mov	r0, r4
 8014c94:	f7ff ffa8 	bl	8014be8 <L_shift>
 8014c98:	4544      	cmp	r4, r8
 8014c9a:	d950      	bls.n	8014d3e <__hexnan+0x10a>
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	f1a4 0904 	sub.w	r9, r4, #4
 8014ca2:	f844 3c04 	str.w	r3, [r4, #-4]
 8014ca6:	461d      	mov	r5, r3
 8014ca8:	464c      	mov	r4, r9
 8014caa:	f8cd b008 	str.w	fp, [sp, #8]
 8014cae:	9a03      	ldr	r2, [sp, #12]
 8014cb0:	e7d7      	b.n	8014c62 <__hexnan+0x2e>
 8014cb2:	2929      	cmp	r1, #41	; 0x29
 8014cb4:	d156      	bne.n	8014d64 <__hexnan+0x130>
 8014cb6:	3202      	adds	r2, #2
 8014cb8:	f8ca 2000 	str.w	r2, [sl]
 8014cbc:	f1bb 0f00 	cmp.w	fp, #0
 8014cc0:	d050      	beq.n	8014d64 <__hexnan+0x130>
 8014cc2:	454c      	cmp	r4, r9
 8014cc4:	d206      	bcs.n	8014cd4 <__hexnan+0xa0>
 8014cc6:	2d07      	cmp	r5, #7
 8014cc8:	dc04      	bgt.n	8014cd4 <__hexnan+0xa0>
 8014cca:	462a      	mov	r2, r5
 8014ccc:	4649      	mov	r1, r9
 8014cce:	4620      	mov	r0, r4
 8014cd0:	f7ff ff8a 	bl	8014be8 <L_shift>
 8014cd4:	4544      	cmp	r4, r8
 8014cd6:	d934      	bls.n	8014d42 <__hexnan+0x10e>
 8014cd8:	4623      	mov	r3, r4
 8014cda:	f1a8 0204 	sub.w	r2, r8, #4
 8014cde:	f853 1b04 	ldr.w	r1, [r3], #4
 8014ce2:	429f      	cmp	r7, r3
 8014ce4:	f842 1f04 	str.w	r1, [r2, #4]!
 8014ce8:	d2f9      	bcs.n	8014cde <__hexnan+0xaa>
 8014cea:	1b3b      	subs	r3, r7, r4
 8014cec:	f023 0303 	bic.w	r3, r3, #3
 8014cf0:	3304      	adds	r3, #4
 8014cf2:	3401      	adds	r4, #1
 8014cf4:	3e03      	subs	r6, #3
 8014cf6:	42b4      	cmp	r4, r6
 8014cf8:	bf88      	it	hi
 8014cfa:	2304      	movhi	r3, #4
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	4443      	add	r3, r8
 8014d00:	f843 2b04 	str.w	r2, [r3], #4
 8014d04:	429f      	cmp	r7, r3
 8014d06:	d2fb      	bcs.n	8014d00 <__hexnan+0xcc>
 8014d08:	683b      	ldr	r3, [r7, #0]
 8014d0a:	b91b      	cbnz	r3, 8014d14 <__hexnan+0xe0>
 8014d0c:	4547      	cmp	r7, r8
 8014d0e:	d127      	bne.n	8014d60 <__hexnan+0x12c>
 8014d10:	2301      	movs	r3, #1
 8014d12:	603b      	str	r3, [r7, #0]
 8014d14:	2005      	movs	r0, #5
 8014d16:	e026      	b.n	8014d66 <__hexnan+0x132>
 8014d18:	3501      	adds	r5, #1
 8014d1a:	2d08      	cmp	r5, #8
 8014d1c:	f10b 0b01 	add.w	fp, fp, #1
 8014d20:	dd06      	ble.n	8014d30 <__hexnan+0xfc>
 8014d22:	4544      	cmp	r4, r8
 8014d24:	d9c3      	bls.n	8014cae <__hexnan+0x7a>
 8014d26:	2300      	movs	r3, #0
 8014d28:	2501      	movs	r5, #1
 8014d2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8014d2e:	3c04      	subs	r4, #4
 8014d30:	6822      	ldr	r2, [r4, #0]
 8014d32:	f000 000f 	and.w	r0, r0, #15
 8014d36:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014d3a:	6022      	str	r2, [r4, #0]
 8014d3c:	e7b7      	b.n	8014cae <__hexnan+0x7a>
 8014d3e:	2508      	movs	r5, #8
 8014d40:	e7b5      	b.n	8014cae <__hexnan+0x7a>
 8014d42:	9b01      	ldr	r3, [sp, #4]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d0df      	beq.n	8014d08 <__hexnan+0xd4>
 8014d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d4c:	f1c3 0320 	rsb	r3, r3, #32
 8014d50:	fa22 f303 	lsr.w	r3, r2, r3
 8014d54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014d58:	401a      	ands	r2, r3
 8014d5a:	f846 2c04 	str.w	r2, [r6, #-4]
 8014d5e:	e7d3      	b.n	8014d08 <__hexnan+0xd4>
 8014d60:	3f04      	subs	r7, #4
 8014d62:	e7d1      	b.n	8014d08 <__hexnan+0xd4>
 8014d64:	2004      	movs	r0, #4
 8014d66:	b007      	add	sp, #28
 8014d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014d6c <_localeconv_r>:
 8014d6c:	4800      	ldr	r0, [pc, #0]	; (8014d70 <_localeconv_r+0x4>)
 8014d6e:	4770      	bx	lr
 8014d70:	20000190 	.word	0x20000190

08014d74 <__retarget_lock_init_recursive>:
 8014d74:	4770      	bx	lr

08014d76 <__retarget_lock_acquire_recursive>:
 8014d76:	4770      	bx	lr

08014d78 <__retarget_lock_release_recursive>:
 8014d78:	4770      	bx	lr
	...

08014d7c <malloc>:
 8014d7c:	4b02      	ldr	r3, [pc, #8]	; (8014d88 <malloc+0xc>)
 8014d7e:	4601      	mov	r1, r0
 8014d80:	6818      	ldr	r0, [r3, #0]
 8014d82:	f000 bd57 	b.w	8015834 <_malloc_r>
 8014d86:	bf00      	nop
 8014d88:	20000038 	.word	0x20000038

08014d8c <__ascii_mbtowc>:
 8014d8c:	b082      	sub	sp, #8
 8014d8e:	b901      	cbnz	r1, 8014d92 <__ascii_mbtowc+0x6>
 8014d90:	a901      	add	r1, sp, #4
 8014d92:	b142      	cbz	r2, 8014da6 <__ascii_mbtowc+0x1a>
 8014d94:	b14b      	cbz	r3, 8014daa <__ascii_mbtowc+0x1e>
 8014d96:	7813      	ldrb	r3, [r2, #0]
 8014d98:	600b      	str	r3, [r1, #0]
 8014d9a:	7812      	ldrb	r2, [r2, #0]
 8014d9c:	1e10      	subs	r0, r2, #0
 8014d9e:	bf18      	it	ne
 8014da0:	2001      	movne	r0, #1
 8014da2:	b002      	add	sp, #8
 8014da4:	4770      	bx	lr
 8014da6:	4610      	mov	r0, r2
 8014da8:	e7fb      	b.n	8014da2 <__ascii_mbtowc+0x16>
 8014daa:	f06f 0001 	mvn.w	r0, #1
 8014dae:	e7f8      	b.n	8014da2 <__ascii_mbtowc+0x16>

08014db0 <memchr>:
 8014db0:	4603      	mov	r3, r0
 8014db2:	b510      	push	{r4, lr}
 8014db4:	b2c9      	uxtb	r1, r1
 8014db6:	4402      	add	r2, r0
 8014db8:	4293      	cmp	r3, r2
 8014dba:	4618      	mov	r0, r3
 8014dbc:	d101      	bne.n	8014dc2 <memchr+0x12>
 8014dbe:	2000      	movs	r0, #0
 8014dc0:	e003      	b.n	8014dca <memchr+0x1a>
 8014dc2:	7804      	ldrb	r4, [r0, #0]
 8014dc4:	3301      	adds	r3, #1
 8014dc6:	428c      	cmp	r4, r1
 8014dc8:	d1f6      	bne.n	8014db8 <memchr+0x8>
 8014dca:	bd10      	pop	{r4, pc}

08014dcc <_Balloc>:
 8014dcc:	b570      	push	{r4, r5, r6, lr}
 8014dce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014dd0:	4604      	mov	r4, r0
 8014dd2:	460d      	mov	r5, r1
 8014dd4:	b976      	cbnz	r6, 8014df4 <_Balloc+0x28>
 8014dd6:	2010      	movs	r0, #16
 8014dd8:	f7ff ffd0 	bl	8014d7c <malloc>
 8014ddc:	4602      	mov	r2, r0
 8014dde:	6260      	str	r0, [r4, #36]	; 0x24
 8014de0:	b920      	cbnz	r0, 8014dec <_Balloc+0x20>
 8014de2:	2166      	movs	r1, #102	; 0x66
 8014de4:	4b17      	ldr	r3, [pc, #92]	; (8014e44 <_Balloc+0x78>)
 8014de6:	4818      	ldr	r0, [pc, #96]	; (8014e48 <_Balloc+0x7c>)
 8014de8:	f001 f986 	bl	80160f8 <__assert_func>
 8014dec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014df0:	6006      	str	r6, [r0, #0]
 8014df2:	60c6      	str	r6, [r0, #12]
 8014df4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014df6:	68f3      	ldr	r3, [r6, #12]
 8014df8:	b183      	cbz	r3, 8014e1c <_Balloc+0x50>
 8014dfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014dfc:	68db      	ldr	r3, [r3, #12]
 8014dfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014e02:	b9b8      	cbnz	r0, 8014e34 <_Balloc+0x68>
 8014e04:	2101      	movs	r1, #1
 8014e06:	fa01 f605 	lsl.w	r6, r1, r5
 8014e0a:	1d72      	adds	r2, r6, #5
 8014e0c:	4620      	mov	r0, r4
 8014e0e:	0092      	lsls	r2, r2, #2
 8014e10:	f000 fc94 	bl	801573c <_calloc_r>
 8014e14:	b160      	cbz	r0, 8014e30 <_Balloc+0x64>
 8014e16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014e1a:	e00e      	b.n	8014e3a <_Balloc+0x6e>
 8014e1c:	2221      	movs	r2, #33	; 0x21
 8014e1e:	2104      	movs	r1, #4
 8014e20:	4620      	mov	r0, r4
 8014e22:	f000 fc8b 	bl	801573c <_calloc_r>
 8014e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e28:	60f0      	str	r0, [r6, #12]
 8014e2a:	68db      	ldr	r3, [r3, #12]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d1e4      	bne.n	8014dfa <_Balloc+0x2e>
 8014e30:	2000      	movs	r0, #0
 8014e32:	bd70      	pop	{r4, r5, r6, pc}
 8014e34:	6802      	ldr	r2, [r0, #0]
 8014e36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014e40:	e7f7      	b.n	8014e32 <_Balloc+0x66>
 8014e42:	bf00      	nop
 8014e44:	08018826 	.word	0x08018826
 8014e48:	08018988 	.word	0x08018988

08014e4c <_Bfree>:
 8014e4c:	b570      	push	{r4, r5, r6, lr}
 8014e4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014e50:	4605      	mov	r5, r0
 8014e52:	460c      	mov	r4, r1
 8014e54:	b976      	cbnz	r6, 8014e74 <_Bfree+0x28>
 8014e56:	2010      	movs	r0, #16
 8014e58:	f7ff ff90 	bl	8014d7c <malloc>
 8014e5c:	4602      	mov	r2, r0
 8014e5e:	6268      	str	r0, [r5, #36]	; 0x24
 8014e60:	b920      	cbnz	r0, 8014e6c <_Bfree+0x20>
 8014e62:	218a      	movs	r1, #138	; 0x8a
 8014e64:	4b08      	ldr	r3, [pc, #32]	; (8014e88 <_Bfree+0x3c>)
 8014e66:	4809      	ldr	r0, [pc, #36]	; (8014e8c <_Bfree+0x40>)
 8014e68:	f001 f946 	bl	80160f8 <__assert_func>
 8014e6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014e70:	6006      	str	r6, [r0, #0]
 8014e72:	60c6      	str	r6, [r0, #12]
 8014e74:	b13c      	cbz	r4, 8014e86 <_Bfree+0x3a>
 8014e76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014e78:	6862      	ldr	r2, [r4, #4]
 8014e7a:	68db      	ldr	r3, [r3, #12]
 8014e7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014e80:	6021      	str	r1, [r4, #0]
 8014e82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014e86:	bd70      	pop	{r4, r5, r6, pc}
 8014e88:	08018826 	.word	0x08018826
 8014e8c:	08018988 	.word	0x08018988

08014e90 <__multadd>:
 8014e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e94:	4607      	mov	r7, r0
 8014e96:	460c      	mov	r4, r1
 8014e98:	461e      	mov	r6, r3
 8014e9a:	2000      	movs	r0, #0
 8014e9c:	690d      	ldr	r5, [r1, #16]
 8014e9e:	f101 0c14 	add.w	ip, r1, #20
 8014ea2:	f8dc 3000 	ldr.w	r3, [ip]
 8014ea6:	3001      	adds	r0, #1
 8014ea8:	b299      	uxth	r1, r3
 8014eaa:	fb02 6101 	mla	r1, r2, r1, r6
 8014eae:	0c1e      	lsrs	r6, r3, #16
 8014eb0:	0c0b      	lsrs	r3, r1, #16
 8014eb2:	fb02 3306 	mla	r3, r2, r6, r3
 8014eb6:	b289      	uxth	r1, r1
 8014eb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014ebc:	4285      	cmp	r5, r0
 8014ebe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014ec2:	f84c 1b04 	str.w	r1, [ip], #4
 8014ec6:	dcec      	bgt.n	8014ea2 <__multadd+0x12>
 8014ec8:	b30e      	cbz	r6, 8014f0e <__multadd+0x7e>
 8014eca:	68a3      	ldr	r3, [r4, #8]
 8014ecc:	42ab      	cmp	r3, r5
 8014ece:	dc19      	bgt.n	8014f04 <__multadd+0x74>
 8014ed0:	6861      	ldr	r1, [r4, #4]
 8014ed2:	4638      	mov	r0, r7
 8014ed4:	3101      	adds	r1, #1
 8014ed6:	f7ff ff79 	bl	8014dcc <_Balloc>
 8014eda:	4680      	mov	r8, r0
 8014edc:	b928      	cbnz	r0, 8014eea <__multadd+0x5a>
 8014ede:	4602      	mov	r2, r0
 8014ee0:	21b5      	movs	r1, #181	; 0xb5
 8014ee2:	4b0c      	ldr	r3, [pc, #48]	; (8014f14 <__multadd+0x84>)
 8014ee4:	480c      	ldr	r0, [pc, #48]	; (8014f18 <__multadd+0x88>)
 8014ee6:	f001 f907 	bl	80160f8 <__assert_func>
 8014eea:	6922      	ldr	r2, [r4, #16]
 8014eec:	f104 010c 	add.w	r1, r4, #12
 8014ef0:	3202      	adds	r2, #2
 8014ef2:	0092      	lsls	r2, r2, #2
 8014ef4:	300c      	adds	r0, #12
 8014ef6:	f7fc feff 	bl	8011cf8 <memcpy>
 8014efa:	4621      	mov	r1, r4
 8014efc:	4638      	mov	r0, r7
 8014efe:	f7ff ffa5 	bl	8014e4c <_Bfree>
 8014f02:	4644      	mov	r4, r8
 8014f04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014f08:	3501      	adds	r5, #1
 8014f0a:	615e      	str	r6, [r3, #20]
 8014f0c:	6125      	str	r5, [r4, #16]
 8014f0e:	4620      	mov	r0, r4
 8014f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f14:	08018898 	.word	0x08018898
 8014f18:	08018988 	.word	0x08018988

08014f1c <__s2b>:
 8014f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f20:	4615      	mov	r5, r2
 8014f22:	2209      	movs	r2, #9
 8014f24:	461f      	mov	r7, r3
 8014f26:	3308      	adds	r3, #8
 8014f28:	460c      	mov	r4, r1
 8014f2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8014f2e:	4606      	mov	r6, r0
 8014f30:	2201      	movs	r2, #1
 8014f32:	2100      	movs	r1, #0
 8014f34:	429a      	cmp	r2, r3
 8014f36:	db09      	blt.n	8014f4c <__s2b+0x30>
 8014f38:	4630      	mov	r0, r6
 8014f3a:	f7ff ff47 	bl	8014dcc <_Balloc>
 8014f3e:	b940      	cbnz	r0, 8014f52 <__s2b+0x36>
 8014f40:	4602      	mov	r2, r0
 8014f42:	21ce      	movs	r1, #206	; 0xce
 8014f44:	4b18      	ldr	r3, [pc, #96]	; (8014fa8 <__s2b+0x8c>)
 8014f46:	4819      	ldr	r0, [pc, #100]	; (8014fac <__s2b+0x90>)
 8014f48:	f001 f8d6 	bl	80160f8 <__assert_func>
 8014f4c:	0052      	lsls	r2, r2, #1
 8014f4e:	3101      	adds	r1, #1
 8014f50:	e7f0      	b.n	8014f34 <__s2b+0x18>
 8014f52:	9b08      	ldr	r3, [sp, #32]
 8014f54:	2d09      	cmp	r5, #9
 8014f56:	6143      	str	r3, [r0, #20]
 8014f58:	f04f 0301 	mov.w	r3, #1
 8014f5c:	6103      	str	r3, [r0, #16]
 8014f5e:	dd16      	ble.n	8014f8e <__s2b+0x72>
 8014f60:	f104 0909 	add.w	r9, r4, #9
 8014f64:	46c8      	mov	r8, r9
 8014f66:	442c      	add	r4, r5
 8014f68:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014f6c:	4601      	mov	r1, r0
 8014f6e:	220a      	movs	r2, #10
 8014f70:	4630      	mov	r0, r6
 8014f72:	3b30      	subs	r3, #48	; 0x30
 8014f74:	f7ff ff8c 	bl	8014e90 <__multadd>
 8014f78:	45a0      	cmp	r8, r4
 8014f7a:	d1f5      	bne.n	8014f68 <__s2b+0x4c>
 8014f7c:	f1a5 0408 	sub.w	r4, r5, #8
 8014f80:	444c      	add	r4, r9
 8014f82:	1b2d      	subs	r5, r5, r4
 8014f84:	1963      	adds	r3, r4, r5
 8014f86:	42bb      	cmp	r3, r7
 8014f88:	db04      	blt.n	8014f94 <__s2b+0x78>
 8014f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f8e:	2509      	movs	r5, #9
 8014f90:	340a      	adds	r4, #10
 8014f92:	e7f6      	b.n	8014f82 <__s2b+0x66>
 8014f94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014f98:	4601      	mov	r1, r0
 8014f9a:	220a      	movs	r2, #10
 8014f9c:	4630      	mov	r0, r6
 8014f9e:	3b30      	subs	r3, #48	; 0x30
 8014fa0:	f7ff ff76 	bl	8014e90 <__multadd>
 8014fa4:	e7ee      	b.n	8014f84 <__s2b+0x68>
 8014fa6:	bf00      	nop
 8014fa8:	08018898 	.word	0x08018898
 8014fac:	08018988 	.word	0x08018988

08014fb0 <__hi0bits>:
 8014fb0:	0c02      	lsrs	r2, r0, #16
 8014fb2:	0412      	lsls	r2, r2, #16
 8014fb4:	4603      	mov	r3, r0
 8014fb6:	b9ca      	cbnz	r2, 8014fec <__hi0bits+0x3c>
 8014fb8:	0403      	lsls	r3, r0, #16
 8014fba:	2010      	movs	r0, #16
 8014fbc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014fc0:	bf04      	itt	eq
 8014fc2:	021b      	lsleq	r3, r3, #8
 8014fc4:	3008      	addeq	r0, #8
 8014fc6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014fca:	bf04      	itt	eq
 8014fcc:	011b      	lsleq	r3, r3, #4
 8014fce:	3004      	addeq	r0, #4
 8014fd0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014fd4:	bf04      	itt	eq
 8014fd6:	009b      	lsleq	r3, r3, #2
 8014fd8:	3002      	addeq	r0, #2
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	db05      	blt.n	8014fea <__hi0bits+0x3a>
 8014fde:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8014fe2:	f100 0001 	add.w	r0, r0, #1
 8014fe6:	bf08      	it	eq
 8014fe8:	2020      	moveq	r0, #32
 8014fea:	4770      	bx	lr
 8014fec:	2000      	movs	r0, #0
 8014fee:	e7e5      	b.n	8014fbc <__hi0bits+0xc>

08014ff0 <__lo0bits>:
 8014ff0:	6803      	ldr	r3, [r0, #0]
 8014ff2:	4602      	mov	r2, r0
 8014ff4:	f013 0007 	ands.w	r0, r3, #7
 8014ff8:	d00b      	beq.n	8015012 <__lo0bits+0x22>
 8014ffa:	07d9      	lsls	r1, r3, #31
 8014ffc:	d421      	bmi.n	8015042 <__lo0bits+0x52>
 8014ffe:	0798      	lsls	r0, r3, #30
 8015000:	bf49      	itett	mi
 8015002:	085b      	lsrmi	r3, r3, #1
 8015004:	089b      	lsrpl	r3, r3, #2
 8015006:	2001      	movmi	r0, #1
 8015008:	6013      	strmi	r3, [r2, #0]
 801500a:	bf5c      	itt	pl
 801500c:	2002      	movpl	r0, #2
 801500e:	6013      	strpl	r3, [r2, #0]
 8015010:	4770      	bx	lr
 8015012:	b299      	uxth	r1, r3
 8015014:	b909      	cbnz	r1, 801501a <__lo0bits+0x2a>
 8015016:	2010      	movs	r0, #16
 8015018:	0c1b      	lsrs	r3, r3, #16
 801501a:	b2d9      	uxtb	r1, r3
 801501c:	b909      	cbnz	r1, 8015022 <__lo0bits+0x32>
 801501e:	3008      	adds	r0, #8
 8015020:	0a1b      	lsrs	r3, r3, #8
 8015022:	0719      	lsls	r1, r3, #28
 8015024:	bf04      	itt	eq
 8015026:	091b      	lsreq	r3, r3, #4
 8015028:	3004      	addeq	r0, #4
 801502a:	0799      	lsls	r1, r3, #30
 801502c:	bf04      	itt	eq
 801502e:	089b      	lsreq	r3, r3, #2
 8015030:	3002      	addeq	r0, #2
 8015032:	07d9      	lsls	r1, r3, #31
 8015034:	d403      	bmi.n	801503e <__lo0bits+0x4e>
 8015036:	085b      	lsrs	r3, r3, #1
 8015038:	f100 0001 	add.w	r0, r0, #1
 801503c:	d003      	beq.n	8015046 <__lo0bits+0x56>
 801503e:	6013      	str	r3, [r2, #0]
 8015040:	4770      	bx	lr
 8015042:	2000      	movs	r0, #0
 8015044:	4770      	bx	lr
 8015046:	2020      	movs	r0, #32
 8015048:	4770      	bx	lr
	...

0801504c <__i2b>:
 801504c:	b510      	push	{r4, lr}
 801504e:	460c      	mov	r4, r1
 8015050:	2101      	movs	r1, #1
 8015052:	f7ff febb 	bl	8014dcc <_Balloc>
 8015056:	4602      	mov	r2, r0
 8015058:	b928      	cbnz	r0, 8015066 <__i2b+0x1a>
 801505a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801505e:	4b04      	ldr	r3, [pc, #16]	; (8015070 <__i2b+0x24>)
 8015060:	4804      	ldr	r0, [pc, #16]	; (8015074 <__i2b+0x28>)
 8015062:	f001 f849 	bl	80160f8 <__assert_func>
 8015066:	2301      	movs	r3, #1
 8015068:	6144      	str	r4, [r0, #20]
 801506a:	6103      	str	r3, [r0, #16]
 801506c:	bd10      	pop	{r4, pc}
 801506e:	bf00      	nop
 8015070:	08018898 	.word	0x08018898
 8015074:	08018988 	.word	0x08018988

08015078 <__multiply>:
 8015078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801507c:	4691      	mov	r9, r2
 801507e:	690a      	ldr	r2, [r1, #16]
 8015080:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015084:	460c      	mov	r4, r1
 8015086:	429a      	cmp	r2, r3
 8015088:	bfbe      	ittt	lt
 801508a:	460b      	movlt	r3, r1
 801508c:	464c      	movlt	r4, r9
 801508e:	4699      	movlt	r9, r3
 8015090:	6927      	ldr	r7, [r4, #16]
 8015092:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015096:	68a3      	ldr	r3, [r4, #8]
 8015098:	6861      	ldr	r1, [r4, #4]
 801509a:	eb07 060a 	add.w	r6, r7, sl
 801509e:	42b3      	cmp	r3, r6
 80150a0:	b085      	sub	sp, #20
 80150a2:	bfb8      	it	lt
 80150a4:	3101      	addlt	r1, #1
 80150a6:	f7ff fe91 	bl	8014dcc <_Balloc>
 80150aa:	b930      	cbnz	r0, 80150ba <__multiply+0x42>
 80150ac:	4602      	mov	r2, r0
 80150ae:	f240 115d 	movw	r1, #349	; 0x15d
 80150b2:	4b43      	ldr	r3, [pc, #268]	; (80151c0 <__multiply+0x148>)
 80150b4:	4843      	ldr	r0, [pc, #268]	; (80151c4 <__multiply+0x14c>)
 80150b6:	f001 f81f 	bl	80160f8 <__assert_func>
 80150ba:	f100 0514 	add.w	r5, r0, #20
 80150be:	462b      	mov	r3, r5
 80150c0:	2200      	movs	r2, #0
 80150c2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80150c6:	4543      	cmp	r3, r8
 80150c8:	d321      	bcc.n	801510e <__multiply+0x96>
 80150ca:	f104 0314 	add.w	r3, r4, #20
 80150ce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80150d2:	f109 0314 	add.w	r3, r9, #20
 80150d6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80150da:	9202      	str	r2, [sp, #8]
 80150dc:	1b3a      	subs	r2, r7, r4
 80150de:	3a15      	subs	r2, #21
 80150e0:	f022 0203 	bic.w	r2, r2, #3
 80150e4:	3204      	adds	r2, #4
 80150e6:	f104 0115 	add.w	r1, r4, #21
 80150ea:	428f      	cmp	r7, r1
 80150ec:	bf38      	it	cc
 80150ee:	2204      	movcc	r2, #4
 80150f0:	9201      	str	r2, [sp, #4]
 80150f2:	9a02      	ldr	r2, [sp, #8]
 80150f4:	9303      	str	r3, [sp, #12]
 80150f6:	429a      	cmp	r2, r3
 80150f8:	d80c      	bhi.n	8015114 <__multiply+0x9c>
 80150fa:	2e00      	cmp	r6, #0
 80150fc:	dd03      	ble.n	8015106 <__multiply+0x8e>
 80150fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015102:	2b00      	cmp	r3, #0
 8015104:	d059      	beq.n	80151ba <__multiply+0x142>
 8015106:	6106      	str	r6, [r0, #16]
 8015108:	b005      	add	sp, #20
 801510a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801510e:	f843 2b04 	str.w	r2, [r3], #4
 8015112:	e7d8      	b.n	80150c6 <__multiply+0x4e>
 8015114:	f8b3 a000 	ldrh.w	sl, [r3]
 8015118:	f1ba 0f00 	cmp.w	sl, #0
 801511c:	d023      	beq.n	8015166 <__multiply+0xee>
 801511e:	46a9      	mov	r9, r5
 8015120:	f04f 0c00 	mov.w	ip, #0
 8015124:	f104 0e14 	add.w	lr, r4, #20
 8015128:	f85e 2b04 	ldr.w	r2, [lr], #4
 801512c:	f8d9 1000 	ldr.w	r1, [r9]
 8015130:	fa1f fb82 	uxth.w	fp, r2
 8015134:	b289      	uxth	r1, r1
 8015136:	fb0a 110b 	mla	r1, sl, fp, r1
 801513a:	4461      	add	r1, ip
 801513c:	f8d9 c000 	ldr.w	ip, [r9]
 8015140:	0c12      	lsrs	r2, r2, #16
 8015142:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8015146:	fb0a c202 	mla	r2, sl, r2, ip
 801514a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801514e:	b289      	uxth	r1, r1
 8015150:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015154:	4577      	cmp	r7, lr
 8015156:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801515a:	f849 1b04 	str.w	r1, [r9], #4
 801515e:	d8e3      	bhi.n	8015128 <__multiply+0xb0>
 8015160:	9a01      	ldr	r2, [sp, #4]
 8015162:	f845 c002 	str.w	ip, [r5, r2]
 8015166:	9a03      	ldr	r2, [sp, #12]
 8015168:	3304      	adds	r3, #4
 801516a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801516e:	f1b9 0f00 	cmp.w	r9, #0
 8015172:	d020      	beq.n	80151b6 <__multiply+0x13e>
 8015174:	46ae      	mov	lr, r5
 8015176:	f04f 0a00 	mov.w	sl, #0
 801517a:	6829      	ldr	r1, [r5, #0]
 801517c:	f104 0c14 	add.w	ip, r4, #20
 8015180:	f8bc b000 	ldrh.w	fp, [ip]
 8015184:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015188:	b289      	uxth	r1, r1
 801518a:	fb09 220b 	mla	r2, r9, fp, r2
 801518e:	4492      	add	sl, r2
 8015190:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015194:	f84e 1b04 	str.w	r1, [lr], #4
 8015198:	f85c 2b04 	ldr.w	r2, [ip], #4
 801519c:	f8be 1000 	ldrh.w	r1, [lr]
 80151a0:	0c12      	lsrs	r2, r2, #16
 80151a2:	fb09 1102 	mla	r1, r9, r2, r1
 80151a6:	4567      	cmp	r7, ip
 80151a8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80151ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80151b0:	d8e6      	bhi.n	8015180 <__multiply+0x108>
 80151b2:	9a01      	ldr	r2, [sp, #4]
 80151b4:	50a9      	str	r1, [r5, r2]
 80151b6:	3504      	adds	r5, #4
 80151b8:	e79b      	b.n	80150f2 <__multiply+0x7a>
 80151ba:	3e01      	subs	r6, #1
 80151bc:	e79d      	b.n	80150fa <__multiply+0x82>
 80151be:	bf00      	nop
 80151c0:	08018898 	.word	0x08018898
 80151c4:	08018988 	.word	0x08018988

080151c8 <__pow5mult>:
 80151c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80151cc:	4615      	mov	r5, r2
 80151ce:	f012 0203 	ands.w	r2, r2, #3
 80151d2:	4606      	mov	r6, r0
 80151d4:	460f      	mov	r7, r1
 80151d6:	d007      	beq.n	80151e8 <__pow5mult+0x20>
 80151d8:	4c25      	ldr	r4, [pc, #148]	; (8015270 <__pow5mult+0xa8>)
 80151da:	3a01      	subs	r2, #1
 80151dc:	2300      	movs	r3, #0
 80151de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80151e2:	f7ff fe55 	bl	8014e90 <__multadd>
 80151e6:	4607      	mov	r7, r0
 80151e8:	10ad      	asrs	r5, r5, #2
 80151ea:	d03d      	beq.n	8015268 <__pow5mult+0xa0>
 80151ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80151ee:	b97c      	cbnz	r4, 8015210 <__pow5mult+0x48>
 80151f0:	2010      	movs	r0, #16
 80151f2:	f7ff fdc3 	bl	8014d7c <malloc>
 80151f6:	4602      	mov	r2, r0
 80151f8:	6270      	str	r0, [r6, #36]	; 0x24
 80151fa:	b928      	cbnz	r0, 8015208 <__pow5mult+0x40>
 80151fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015200:	4b1c      	ldr	r3, [pc, #112]	; (8015274 <__pow5mult+0xac>)
 8015202:	481d      	ldr	r0, [pc, #116]	; (8015278 <__pow5mult+0xb0>)
 8015204:	f000 ff78 	bl	80160f8 <__assert_func>
 8015208:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801520c:	6004      	str	r4, [r0, #0]
 801520e:	60c4      	str	r4, [r0, #12]
 8015210:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015214:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015218:	b94c      	cbnz	r4, 801522e <__pow5mult+0x66>
 801521a:	f240 2171 	movw	r1, #625	; 0x271
 801521e:	4630      	mov	r0, r6
 8015220:	f7ff ff14 	bl	801504c <__i2b>
 8015224:	2300      	movs	r3, #0
 8015226:	4604      	mov	r4, r0
 8015228:	f8c8 0008 	str.w	r0, [r8, #8]
 801522c:	6003      	str	r3, [r0, #0]
 801522e:	f04f 0900 	mov.w	r9, #0
 8015232:	07eb      	lsls	r3, r5, #31
 8015234:	d50a      	bpl.n	801524c <__pow5mult+0x84>
 8015236:	4639      	mov	r1, r7
 8015238:	4622      	mov	r2, r4
 801523a:	4630      	mov	r0, r6
 801523c:	f7ff ff1c 	bl	8015078 <__multiply>
 8015240:	4680      	mov	r8, r0
 8015242:	4639      	mov	r1, r7
 8015244:	4630      	mov	r0, r6
 8015246:	f7ff fe01 	bl	8014e4c <_Bfree>
 801524a:	4647      	mov	r7, r8
 801524c:	106d      	asrs	r5, r5, #1
 801524e:	d00b      	beq.n	8015268 <__pow5mult+0xa0>
 8015250:	6820      	ldr	r0, [r4, #0]
 8015252:	b938      	cbnz	r0, 8015264 <__pow5mult+0x9c>
 8015254:	4622      	mov	r2, r4
 8015256:	4621      	mov	r1, r4
 8015258:	4630      	mov	r0, r6
 801525a:	f7ff ff0d 	bl	8015078 <__multiply>
 801525e:	6020      	str	r0, [r4, #0]
 8015260:	f8c0 9000 	str.w	r9, [r0]
 8015264:	4604      	mov	r4, r0
 8015266:	e7e4      	b.n	8015232 <__pow5mult+0x6a>
 8015268:	4638      	mov	r0, r7
 801526a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801526e:	bf00      	nop
 8015270:	08018ad8 	.word	0x08018ad8
 8015274:	08018826 	.word	0x08018826
 8015278:	08018988 	.word	0x08018988

0801527c <__lshift>:
 801527c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015280:	460c      	mov	r4, r1
 8015282:	4607      	mov	r7, r0
 8015284:	4691      	mov	r9, r2
 8015286:	6923      	ldr	r3, [r4, #16]
 8015288:	6849      	ldr	r1, [r1, #4]
 801528a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801528e:	68a3      	ldr	r3, [r4, #8]
 8015290:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015294:	f108 0601 	add.w	r6, r8, #1
 8015298:	42b3      	cmp	r3, r6
 801529a:	db0b      	blt.n	80152b4 <__lshift+0x38>
 801529c:	4638      	mov	r0, r7
 801529e:	f7ff fd95 	bl	8014dcc <_Balloc>
 80152a2:	4605      	mov	r5, r0
 80152a4:	b948      	cbnz	r0, 80152ba <__lshift+0x3e>
 80152a6:	4602      	mov	r2, r0
 80152a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80152ac:	4b29      	ldr	r3, [pc, #164]	; (8015354 <__lshift+0xd8>)
 80152ae:	482a      	ldr	r0, [pc, #168]	; (8015358 <__lshift+0xdc>)
 80152b0:	f000 ff22 	bl	80160f8 <__assert_func>
 80152b4:	3101      	adds	r1, #1
 80152b6:	005b      	lsls	r3, r3, #1
 80152b8:	e7ee      	b.n	8015298 <__lshift+0x1c>
 80152ba:	2300      	movs	r3, #0
 80152bc:	f100 0114 	add.w	r1, r0, #20
 80152c0:	f100 0210 	add.w	r2, r0, #16
 80152c4:	4618      	mov	r0, r3
 80152c6:	4553      	cmp	r3, sl
 80152c8:	db37      	blt.n	801533a <__lshift+0xbe>
 80152ca:	6920      	ldr	r0, [r4, #16]
 80152cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80152d0:	f104 0314 	add.w	r3, r4, #20
 80152d4:	f019 091f 	ands.w	r9, r9, #31
 80152d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80152dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80152e0:	d02f      	beq.n	8015342 <__lshift+0xc6>
 80152e2:	468a      	mov	sl, r1
 80152e4:	f04f 0c00 	mov.w	ip, #0
 80152e8:	f1c9 0e20 	rsb	lr, r9, #32
 80152ec:	681a      	ldr	r2, [r3, #0]
 80152ee:	fa02 f209 	lsl.w	r2, r2, r9
 80152f2:	ea42 020c 	orr.w	r2, r2, ip
 80152f6:	f84a 2b04 	str.w	r2, [sl], #4
 80152fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80152fe:	4298      	cmp	r0, r3
 8015300:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015304:	d8f2      	bhi.n	80152ec <__lshift+0x70>
 8015306:	1b03      	subs	r3, r0, r4
 8015308:	3b15      	subs	r3, #21
 801530a:	f023 0303 	bic.w	r3, r3, #3
 801530e:	3304      	adds	r3, #4
 8015310:	f104 0215 	add.w	r2, r4, #21
 8015314:	4290      	cmp	r0, r2
 8015316:	bf38      	it	cc
 8015318:	2304      	movcc	r3, #4
 801531a:	f841 c003 	str.w	ip, [r1, r3]
 801531e:	f1bc 0f00 	cmp.w	ip, #0
 8015322:	d001      	beq.n	8015328 <__lshift+0xac>
 8015324:	f108 0602 	add.w	r6, r8, #2
 8015328:	3e01      	subs	r6, #1
 801532a:	4638      	mov	r0, r7
 801532c:	4621      	mov	r1, r4
 801532e:	612e      	str	r6, [r5, #16]
 8015330:	f7ff fd8c 	bl	8014e4c <_Bfree>
 8015334:	4628      	mov	r0, r5
 8015336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801533a:	f842 0f04 	str.w	r0, [r2, #4]!
 801533e:	3301      	adds	r3, #1
 8015340:	e7c1      	b.n	80152c6 <__lshift+0x4a>
 8015342:	3904      	subs	r1, #4
 8015344:	f853 2b04 	ldr.w	r2, [r3], #4
 8015348:	4298      	cmp	r0, r3
 801534a:	f841 2f04 	str.w	r2, [r1, #4]!
 801534e:	d8f9      	bhi.n	8015344 <__lshift+0xc8>
 8015350:	e7ea      	b.n	8015328 <__lshift+0xac>
 8015352:	bf00      	nop
 8015354:	08018898 	.word	0x08018898
 8015358:	08018988 	.word	0x08018988

0801535c <__mcmp>:
 801535c:	4603      	mov	r3, r0
 801535e:	690a      	ldr	r2, [r1, #16]
 8015360:	6900      	ldr	r0, [r0, #16]
 8015362:	b530      	push	{r4, r5, lr}
 8015364:	1a80      	subs	r0, r0, r2
 8015366:	d10d      	bne.n	8015384 <__mcmp+0x28>
 8015368:	3314      	adds	r3, #20
 801536a:	3114      	adds	r1, #20
 801536c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015370:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015374:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015378:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801537c:	4295      	cmp	r5, r2
 801537e:	d002      	beq.n	8015386 <__mcmp+0x2a>
 8015380:	d304      	bcc.n	801538c <__mcmp+0x30>
 8015382:	2001      	movs	r0, #1
 8015384:	bd30      	pop	{r4, r5, pc}
 8015386:	42a3      	cmp	r3, r4
 8015388:	d3f4      	bcc.n	8015374 <__mcmp+0x18>
 801538a:	e7fb      	b.n	8015384 <__mcmp+0x28>
 801538c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015390:	e7f8      	b.n	8015384 <__mcmp+0x28>
	...

08015394 <__mdiff>:
 8015394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015398:	460d      	mov	r5, r1
 801539a:	4607      	mov	r7, r0
 801539c:	4611      	mov	r1, r2
 801539e:	4628      	mov	r0, r5
 80153a0:	4614      	mov	r4, r2
 80153a2:	f7ff ffdb 	bl	801535c <__mcmp>
 80153a6:	1e06      	subs	r6, r0, #0
 80153a8:	d111      	bne.n	80153ce <__mdiff+0x3a>
 80153aa:	4631      	mov	r1, r6
 80153ac:	4638      	mov	r0, r7
 80153ae:	f7ff fd0d 	bl	8014dcc <_Balloc>
 80153b2:	4602      	mov	r2, r0
 80153b4:	b928      	cbnz	r0, 80153c2 <__mdiff+0x2e>
 80153b6:	f240 2132 	movw	r1, #562	; 0x232
 80153ba:	4b3a      	ldr	r3, [pc, #232]	; (80154a4 <__mdiff+0x110>)
 80153bc:	483a      	ldr	r0, [pc, #232]	; (80154a8 <__mdiff+0x114>)
 80153be:	f000 fe9b 	bl	80160f8 <__assert_func>
 80153c2:	2301      	movs	r3, #1
 80153c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80153c8:	4610      	mov	r0, r2
 80153ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153ce:	bfa4      	itt	ge
 80153d0:	4623      	movge	r3, r4
 80153d2:	462c      	movge	r4, r5
 80153d4:	4638      	mov	r0, r7
 80153d6:	6861      	ldr	r1, [r4, #4]
 80153d8:	bfa6      	itte	ge
 80153da:	461d      	movge	r5, r3
 80153dc:	2600      	movge	r6, #0
 80153de:	2601      	movlt	r6, #1
 80153e0:	f7ff fcf4 	bl	8014dcc <_Balloc>
 80153e4:	4602      	mov	r2, r0
 80153e6:	b918      	cbnz	r0, 80153f0 <__mdiff+0x5c>
 80153e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80153ec:	4b2d      	ldr	r3, [pc, #180]	; (80154a4 <__mdiff+0x110>)
 80153ee:	e7e5      	b.n	80153bc <__mdiff+0x28>
 80153f0:	f102 0814 	add.w	r8, r2, #20
 80153f4:	46c2      	mov	sl, r8
 80153f6:	f04f 0c00 	mov.w	ip, #0
 80153fa:	6927      	ldr	r7, [r4, #16]
 80153fc:	60c6      	str	r6, [r0, #12]
 80153fe:	692e      	ldr	r6, [r5, #16]
 8015400:	f104 0014 	add.w	r0, r4, #20
 8015404:	f105 0914 	add.w	r9, r5, #20
 8015408:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 801540c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015410:	3410      	adds	r4, #16
 8015412:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8015416:	f859 3b04 	ldr.w	r3, [r9], #4
 801541a:	fa1f f18b 	uxth.w	r1, fp
 801541e:	448c      	add	ip, r1
 8015420:	b299      	uxth	r1, r3
 8015422:	0c1b      	lsrs	r3, r3, #16
 8015424:	ebac 0101 	sub.w	r1, ip, r1
 8015428:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801542c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015430:	b289      	uxth	r1, r1
 8015432:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8015436:	454e      	cmp	r6, r9
 8015438:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801543c:	f84a 3b04 	str.w	r3, [sl], #4
 8015440:	d8e7      	bhi.n	8015412 <__mdiff+0x7e>
 8015442:	1b73      	subs	r3, r6, r5
 8015444:	3b15      	subs	r3, #21
 8015446:	f023 0303 	bic.w	r3, r3, #3
 801544a:	3515      	adds	r5, #21
 801544c:	3304      	adds	r3, #4
 801544e:	42ae      	cmp	r6, r5
 8015450:	bf38      	it	cc
 8015452:	2304      	movcc	r3, #4
 8015454:	4418      	add	r0, r3
 8015456:	4443      	add	r3, r8
 8015458:	461e      	mov	r6, r3
 801545a:	4605      	mov	r5, r0
 801545c:	4575      	cmp	r5, lr
 801545e:	d30e      	bcc.n	801547e <__mdiff+0xea>
 8015460:	f10e 0103 	add.w	r1, lr, #3
 8015464:	1a09      	subs	r1, r1, r0
 8015466:	f021 0103 	bic.w	r1, r1, #3
 801546a:	3803      	subs	r0, #3
 801546c:	4586      	cmp	lr, r0
 801546e:	bf38      	it	cc
 8015470:	2100      	movcc	r1, #0
 8015472:	4419      	add	r1, r3
 8015474:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8015478:	b18b      	cbz	r3, 801549e <__mdiff+0x10a>
 801547a:	6117      	str	r7, [r2, #16]
 801547c:	e7a4      	b.n	80153c8 <__mdiff+0x34>
 801547e:	f855 8b04 	ldr.w	r8, [r5], #4
 8015482:	fa1f f188 	uxth.w	r1, r8
 8015486:	4461      	add	r1, ip
 8015488:	140c      	asrs	r4, r1, #16
 801548a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801548e:	b289      	uxth	r1, r1
 8015490:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015494:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8015498:	f846 1b04 	str.w	r1, [r6], #4
 801549c:	e7de      	b.n	801545c <__mdiff+0xc8>
 801549e:	3f01      	subs	r7, #1
 80154a0:	e7e8      	b.n	8015474 <__mdiff+0xe0>
 80154a2:	bf00      	nop
 80154a4:	08018898 	.word	0x08018898
 80154a8:	08018988 	.word	0x08018988

080154ac <__ulp>:
 80154ac:	4b11      	ldr	r3, [pc, #68]	; (80154f4 <__ulp+0x48>)
 80154ae:	400b      	ands	r3, r1
 80154b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	dd02      	ble.n	80154be <__ulp+0x12>
 80154b8:	2000      	movs	r0, #0
 80154ba:	4619      	mov	r1, r3
 80154bc:	4770      	bx	lr
 80154be:	425b      	negs	r3, r3
 80154c0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80154c4:	f04f 0000 	mov.w	r0, #0
 80154c8:	f04f 0100 	mov.w	r1, #0
 80154cc:	ea4f 5223 	mov.w	r2, r3, asr #20
 80154d0:	da04      	bge.n	80154dc <__ulp+0x30>
 80154d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80154d6:	fa43 f102 	asr.w	r1, r3, r2
 80154da:	4770      	bx	lr
 80154dc:	f1a2 0314 	sub.w	r3, r2, #20
 80154e0:	2b1e      	cmp	r3, #30
 80154e2:	bfd6      	itet	le
 80154e4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80154e8:	2301      	movgt	r3, #1
 80154ea:	fa22 f303 	lsrle.w	r3, r2, r3
 80154ee:	4618      	mov	r0, r3
 80154f0:	4770      	bx	lr
 80154f2:	bf00      	nop
 80154f4:	7ff00000 	.word	0x7ff00000

080154f8 <__b2d>:
 80154f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154fc:	6907      	ldr	r7, [r0, #16]
 80154fe:	f100 0914 	add.w	r9, r0, #20
 8015502:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8015506:	f857 6c04 	ldr.w	r6, [r7, #-4]
 801550a:	f1a7 0804 	sub.w	r8, r7, #4
 801550e:	4630      	mov	r0, r6
 8015510:	f7ff fd4e 	bl	8014fb0 <__hi0bits>
 8015514:	f1c0 0320 	rsb	r3, r0, #32
 8015518:	280a      	cmp	r0, #10
 801551a:	600b      	str	r3, [r1, #0]
 801551c:	491f      	ldr	r1, [pc, #124]	; (801559c <__b2d+0xa4>)
 801551e:	dc17      	bgt.n	8015550 <__b2d+0x58>
 8015520:	45c1      	cmp	r9, r8
 8015522:	bf28      	it	cs
 8015524:	2200      	movcs	r2, #0
 8015526:	f1c0 0c0b 	rsb	ip, r0, #11
 801552a:	fa26 f30c 	lsr.w	r3, r6, ip
 801552e:	bf38      	it	cc
 8015530:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8015534:	ea43 0501 	orr.w	r5, r3, r1
 8015538:	f100 0315 	add.w	r3, r0, #21
 801553c:	fa06 f303 	lsl.w	r3, r6, r3
 8015540:	fa22 f20c 	lsr.w	r2, r2, ip
 8015544:	ea43 0402 	orr.w	r4, r3, r2
 8015548:	4620      	mov	r0, r4
 801554a:	4629      	mov	r1, r5
 801554c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015550:	45c1      	cmp	r9, r8
 8015552:	bf2e      	itee	cs
 8015554:	2200      	movcs	r2, #0
 8015556:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801555a:	f1a7 0808 	subcc.w	r8, r7, #8
 801555e:	f1b0 030b 	subs.w	r3, r0, #11
 8015562:	d016      	beq.n	8015592 <__b2d+0x9a>
 8015564:	f1c3 0720 	rsb	r7, r3, #32
 8015568:	fa22 f107 	lsr.w	r1, r2, r7
 801556c:	45c8      	cmp	r8, r9
 801556e:	fa06 f603 	lsl.w	r6, r6, r3
 8015572:	ea46 0601 	orr.w	r6, r6, r1
 8015576:	bf94      	ite	ls
 8015578:	2100      	movls	r1, #0
 801557a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 801557e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8015582:	fa02 f003 	lsl.w	r0, r2, r3
 8015586:	40f9      	lsrs	r1, r7
 8015588:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801558c:	ea40 0401 	orr.w	r4, r0, r1
 8015590:	e7da      	b.n	8015548 <__b2d+0x50>
 8015592:	4614      	mov	r4, r2
 8015594:	ea46 0501 	orr.w	r5, r6, r1
 8015598:	e7d6      	b.n	8015548 <__b2d+0x50>
 801559a:	bf00      	nop
 801559c:	3ff00000 	.word	0x3ff00000

080155a0 <__d2b>:
 80155a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80155a4:	2101      	movs	r1, #1
 80155a6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80155aa:	4690      	mov	r8, r2
 80155ac:	461d      	mov	r5, r3
 80155ae:	f7ff fc0d 	bl	8014dcc <_Balloc>
 80155b2:	4604      	mov	r4, r0
 80155b4:	b930      	cbnz	r0, 80155c4 <__d2b+0x24>
 80155b6:	4602      	mov	r2, r0
 80155b8:	f240 310a 	movw	r1, #778	; 0x30a
 80155bc:	4b24      	ldr	r3, [pc, #144]	; (8015650 <__d2b+0xb0>)
 80155be:	4825      	ldr	r0, [pc, #148]	; (8015654 <__d2b+0xb4>)
 80155c0:	f000 fd9a 	bl	80160f8 <__assert_func>
 80155c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80155c8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80155cc:	bb2d      	cbnz	r5, 801561a <__d2b+0x7a>
 80155ce:	9301      	str	r3, [sp, #4]
 80155d0:	f1b8 0300 	subs.w	r3, r8, #0
 80155d4:	d026      	beq.n	8015624 <__d2b+0x84>
 80155d6:	4668      	mov	r0, sp
 80155d8:	9300      	str	r3, [sp, #0]
 80155da:	f7ff fd09 	bl	8014ff0 <__lo0bits>
 80155de:	9900      	ldr	r1, [sp, #0]
 80155e0:	b1f0      	cbz	r0, 8015620 <__d2b+0x80>
 80155e2:	9a01      	ldr	r2, [sp, #4]
 80155e4:	f1c0 0320 	rsb	r3, r0, #32
 80155e8:	fa02 f303 	lsl.w	r3, r2, r3
 80155ec:	430b      	orrs	r3, r1
 80155ee:	40c2      	lsrs	r2, r0
 80155f0:	6163      	str	r3, [r4, #20]
 80155f2:	9201      	str	r2, [sp, #4]
 80155f4:	9b01      	ldr	r3, [sp, #4]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	bf14      	ite	ne
 80155fa:	2102      	movne	r1, #2
 80155fc:	2101      	moveq	r1, #1
 80155fe:	61a3      	str	r3, [r4, #24]
 8015600:	6121      	str	r1, [r4, #16]
 8015602:	b1c5      	cbz	r5, 8015636 <__d2b+0x96>
 8015604:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015608:	4405      	add	r5, r0
 801560a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801560e:	603d      	str	r5, [r7, #0]
 8015610:	6030      	str	r0, [r6, #0]
 8015612:	4620      	mov	r0, r4
 8015614:	b002      	add	sp, #8
 8015616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801561a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801561e:	e7d6      	b.n	80155ce <__d2b+0x2e>
 8015620:	6161      	str	r1, [r4, #20]
 8015622:	e7e7      	b.n	80155f4 <__d2b+0x54>
 8015624:	a801      	add	r0, sp, #4
 8015626:	f7ff fce3 	bl	8014ff0 <__lo0bits>
 801562a:	2101      	movs	r1, #1
 801562c:	9b01      	ldr	r3, [sp, #4]
 801562e:	6121      	str	r1, [r4, #16]
 8015630:	6163      	str	r3, [r4, #20]
 8015632:	3020      	adds	r0, #32
 8015634:	e7e5      	b.n	8015602 <__d2b+0x62>
 8015636:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801563a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801563e:	6038      	str	r0, [r7, #0]
 8015640:	6918      	ldr	r0, [r3, #16]
 8015642:	f7ff fcb5 	bl	8014fb0 <__hi0bits>
 8015646:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801564a:	6031      	str	r1, [r6, #0]
 801564c:	e7e1      	b.n	8015612 <__d2b+0x72>
 801564e:	bf00      	nop
 8015650:	08018898 	.word	0x08018898
 8015654:	08018988 	.word	0x08018988

08015658 <__ratio>:
 8015658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801565c:	4688      	mov	r8, r1
 801565e:	4669      	mov	r1, sp
 8015660:	4681      	mov	r9, r0
 8015662:	f7ff ff49 	bl	80154f8 <__b2d>
 8015666:	460f      	mov	r7, r1
 8015668:	4604      	mov	r4, r0
 801566a:	460d      	mov	r5, r1
 801566c:	4640      	mov	r0, r8
 801566e:	a901      	add	r1, sp, #4
 8015670:	f7ff ff42 	bl	80154f8 <__b2d>
 8015674:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015678:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801567c:	468b      	mov	fp, r1
 801567e:	eba3 0c02 	sub.w	ip, r3, r2
 8015682:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015686:	1a9b      	subs	r3, r3, r2
 8015688:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801568c:	2b00      	cmp	r3, #0
 801568e:	bfd5      	itete	le
 8015690:	460a      	movle	r2, r1
 8015692:	462a      	movgt	r2, r5
 8015694:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015698:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801569c:	bfd8      	it	le
 801569e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80156a2:	465b      	mov	r3, fp
 80156a4:	4602      	mov	r2, r0
 80156a6:	4639      	mov	r1, r7
 80156a8:	4620      	mov	r0, r4
 80156aa:	f7eb f885 	bl	80007b8 <__aeabi_ddiv>
 80156ae:	b003      	add	sp, #12
 80156b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080156b4 <__copybits>:
 80156b4:	3901      	subs	r1, #1
 80156b6:	b570      	push	{r4, r5, r6, lr}
 80156b8:	1149      	asrs	r1, r1, #5
 80156ba:	6914      	ldr	r4, [r2, #16]
 80156bc:	3101      	adds	r1, #1
 80156be:	f102 0314 	add.w	r3, r2, #20
 80156c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80156c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80156ca:	1f05      	subs	r5, r0, #4
 80156cc:	42a3      	cmp	r3, r4
 80156ce:	d30c      	bcc.n	80156ea <__copybits+0x36>
 80156d0:	1aa3      	subs	r3, r4, r2
 80156d2:	3b11      	subs	r3, #17
 80156d4:	f023 0303 	bic.w	r3, r3, #3
 80156d8:	3211      	adds	r2, #17
 80156da:	42a2      	cmp	r2, r4
 80156dc:	bf88      	it	hi
 80156de:	2300      	movhi	r3, #0
 80156e0:	4418      	add	r0, r3
 80156e2:	2300      	movs	r3, #0
 80156e4:	4288      	cmp	r0, r1
 80156e6:	d305      	bcc.n	80156f4 <__copybits+0x40>
 80156e8:	bd70      	pop	{r4, r5, r6, pc}
 80156ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80156ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80156f2:	e7eb      	b.n	80156cc <__copybits+0x18>
 80156f4:	f840 3b04 	str.w	r3, [r0], #4
 80156f8:	e7f4      	b.n	80156e4 <__copybits+0x30>

080156fa <__any_on>:
 80156fa:	f100 0214 	add.w	r2, r0, #20
 80156fe:	6900      	ldr	r0, [r0, #16]
 8015700:	114b      	asrs	r3, r1, #5
 8015702:	4298      	cmp	r0, r3
 8015704:	b510      	push	{r4, lr}
 8015706:	db11      	blt.n	801572c <__any_on+0x32>
 8015708:	dd0a      	ble.n	8015720 <__any_on+0x26>
 801570a:	f011 011f 	ands.w	r1, r1, #31
 801570e:	d007      	beq.n	8015720 <__any_on+0x26>
 8015710:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015714:	fa24 f001 	lsr.w	r0, r4, r1
 8015718:	fa00 f101 	lsl.w	r1, r0, r1
 801571c:	428c      	cmp	r4, r1
 801571e:	d10b      	bne.n	8015738 <__any_on+0x3e>
 8015720:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015724:	4293      	cmp	r3, r2
 8015726:	d803      	bhi.n	8015730 <__any_on+0x36>
 8015728:	2000      	movs	r0, #0
 801572a:	bd10      	pop	{r4, pc}
 801572c:	4603      	mov	r3, r0
 801572e:	e7f7      	b.n	8015720 <__any_on+0x26>
 8015730:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015734:	2900      	cmp	r1, #0
 8015736:	d0f5      	beq.n	8015724 <__any_on+0x2a>
 8015738:	2001      	movs	r0, #1
 801573a:	e7f6      	b.n	801572a <__any_on+0x30>

0801573c <_calloc_r>:
 801573c:	b570      	push	{r4, r5, r6, lr}
 801573e:	fba1 5402 	umull	r5, r4, r1, r2
 8015742:	b934      	cbnz	r4, 8015752 <_calloc_r+0x16>
 8015744:	4629      	mov	r1, r5
 8015746:	f000 f875 	bl	8015834 <_malloc_r>
 801574a:	4606      	mov	r6, r0
 801574c:	b928      	cbnz	r0, 801575a <_calloc_r+0x1e>
 801574e:	4630      	mov	r0, r6
 8015750:	bd70      	pop	{r4, r5, r6, pc}
 8015752:	220c      	movs	r2, #12
 8015754:	2600      	movs	r6, #0
 8015756:	6002      	str	r2, [r0, #0]
 8015758:	e7f9      	b.n	801574e <_calloc_r+0x12>
 801575a:	462a      	mov	r2, r5
 801575c:	4621      	mov	r1, r4
 801575e:	f7fc fad9 	bl	8011d14 <memset>
 8015762:	e7f4      	b.n	801574e <_calloc_r+0x12>

08015764 <_free_r>:
 8015764:	b538      	push	{r3, r4, r5, lr}
 8015766:	4605      	mov	r5, r0
 8015768:	2900      	cmp	r1, #0
 801576a:	d040      	beq.n	80157ee <_free_r+0x8a>
 801576c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015770:	1f0c      	subs	r4, r1, #4
 8015772:	2b00      	cmp	r3, #0
 8015774:	bfb8      	it	lt
 8015776:	18e4      	addlt	r4, r4, r3
 8015778:	f000 fe4e 	bl	8016418 <__malloc_lock>
 801577c:	4a1c      	ldr	r2, [pc, #112]	; (80157f0 <_free_r+0x8c>)
 801577e:	6813      	ldr	r3, [r2, #0]
 8015780:	b933      	cbnz	r3, 8015790 <_free_r+0x2c>
 8015782:	6063      	str	r3, [r4, #4]
 8015784:	6014      	str	r4, [r2, #0]
 8015786:	4628      	mov	r0, r5
 8015788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801578c:	f000 be4a 	b.w	8016424 <__malloc_unlock>
 8015790:	42a3      	cmp	r3, r4
 8015792:	d908      	bls.n	80157a6 <_free_r+0x42>
 8015794:	6820      	ldr	r0, [r4, #0]
 8015796:	1821      	adds	r1, r4, r0
 8015798:	428b      	cmp	r3, r1
 801579a:	bf01      	itttt	eq
 801579c:	6819      	ldreq	r1, [r3, #0]
 801579e:	685b      	ldreq	r3, [r3, #4]
 80157a0:	1809      	addeq	r1, r1, r0
 80157a2:	6021      	streq	r1, [r4, #0]
 80157a4:	e7ed      	b.n	8015782 <_free_r+0x1e>
 80157a6:	461a      	mov	r2, r3
 80157a8:	685b      	ldr	r3, [r3, #4]
 80157aa:	b10b      	cbz	r3, 80157b0 <_free_r+0x4c>
 80157ac:	42a3      	cmp	r3, r4
 80157ae:	d9fa      	bls.n	80157a6 <_free_r+0x42>
 80157b0:	6811      	ldr	r1, [r2, #0]
 80157b2:	1850      	adds	r0, r2, r1
 80157b4:	42a0      	cmp	r0, r4
 80157b6:	d10b      	bne.n	80157d0 <_free_r+0x6c>
 80157b8:	6820      	ldr	r0, [r4, #0]
 80157ba:	4401      	add	r1, r0
 80157bc:	1850      	adds	r0, r2, r1
 80157be:	4283      	cmp	r3, r0
 80157c0:	6011      	str	r1, [r2, #0]
 80157c2:	d1e0      	bne.n	8015786 <_free_r+0x22>
 80157c4:	6818      	ldr	r0, [r3, #0]
 80157c6:	685b      	ldr	r3, [r3, #4]
 80157c8:	4401      	add	r1, r0
 80157ca:	6011      	str	r1, [r2, #0]
 80157cc:	6053      	str	r3, [r2, #4]
 80157ce:	e7da      	b.n	8015786 <_free_r+0x22>
 80157d0:	d902      	bls.n	80157d8 <_free_r+0x74>
 80157d2:	230c      	movs	r3, #12
 80157d4:	602b      	str	r3, [r5, #0]
 80157d6:	e7d6      	b.n	8015786 <_free_r+0x22>
 80157d8:	6820      	ldr	r0, [r4, #0]
 80157da:	1821      	adds	r1, r4, r0
 80157dc:	428b      	cmp	r3, r1
 80157de:	bf01      	itttt	eq
 80157e0:	6819      	ldreq	r1, [r3, #0]
 80157e2:	685b      	ldreq	r3, [r3, #4]
 80157e4:	1809      	addeq	r1, r1, r0
 80157e6:	6021      	streq	r1, [r4, #0]
 80157e8:	6063      	str	r3, [r4, #4]
 80157ea:	6054      	str	r4, [r2, #4]
 80157ec:	e7cb      	b.n	8015786 <_free_r+0x22>
 80157ee:	bd38      	pop	{r3, r4, r5, pc}
 80157f0:	20007ff0 	.word	0x20007ff0

080157f4 <sbrk_aligned>:
 80157f4:	b570      	push	{r4, r5, r6, lr}
 80157f6:	4e0e      	ldr	r6, [pc, #56]	; (8015830 <sbrk_aligned+0x3c>)
 80157f8:	460c      	mov	r4, r1
 80157fa:	6831      	ldr	r1, [r6, #0]
 80157fc:	4605      	mov	r5, r0
 80157fe:	b911      	cbnz	r1, 8015806 <sbrk_aligned+0x12>
 8015800:	f000 fb46 	bl	8015e90 <_sbrk_r>
 8015804:	6030      	str	r0, [r6, #0]
 8015806:	4621      	mov	r1, r4
 8015808:	4628      	mov	r0, r5
 801580a:	f000 fb41 	bl	8015e90 <_sbrk_r>
 801580e:	1c43      	adds	r3, r0, #1
 8015810:	d00a      	beq.n	8015828 <sbrk_aligned+0x34>
 8015812:	1cc4      	adds	r4, r0, #3
 8015814:	f024 0403 	bic.w	r4, r4, #3
 8015818:	42a0      	cmp	r0, r4
 801581a:	d007      	beq.n	801582c <sbrk_aligned+0x38>
 801581c:	1a21      	subs	r1, r4, r0
 801581e:	4628      	mov	r0, r5
 8015820:	f000 fb36 	bl	8015e90 <_sbrk_r>
 8015824:	3001      	adds	r0, #1
 8015826:	d101      	bne.n	801582c <sbrk_aligned+0x38>
 8015828:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801582c:	4620      	mov	r0, r4
 801582e:	bd70      	pop	{r4, r5, r6, pc}
 8015830:	20007ff4 	.word	0x20007ff4

08015834 <_malloc_r>:
 8015834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015838:	1ccd      	adds	r5, r1, #3
 801583a:	f025 0503 	bic.w	r5, r5, #3
 801583e:	3508      	adds	r5, #8
 8015840:	2d0c      	cmp	r5, #12
 8015842:	bf38      	it	cc
 8015844:	250c      	movcc	r5, #12
 8015846:	2d00      	cmp	r5, #0
 8015848:	4607      	mov	r7, r0
 801584a:	db01      	blt.n	8015850 <_malloc_r+0x1c>
 801584c:	42a9      	cmp	r1, r5
 801584e:	d905      	bls.n	801585c <_malloc_r+0x28>
 8015850:	230c      	movs	r3, #12
 8015852:	2600      	movs	r6, #0
 8015854:	603b      	str	r3, [r7, #0]
 8015856:	4630      	mov	r0, r6
 8015858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801585c:	4e2e      	ldr	r6, [pc, #184]	; (8015918 <_malloc_r+0xe4>)
 801585e:	f000 fddb 	bl	8016418 <__malloc_lock>
 8015862:	6833      	ldr	r3, [r6, #0]
 8015864:	461c      	mov	r4, r3
 8015866:	bb34      	cbnz	r4, 80158b6 <_malloc_r+0x82>
 8015868:	4629      	mov	r1, r5
 801586a:	4638      	mov	r0, r7
 801586c:	f7ff ffc2 	bl	80157f4 <sbrk_aligned>
 8015870:	1c43      	adds	r3, r0, #1
 8015872:	4604      	mov	r4, r0
 8015874:	d14d      	bne.n	8015912 <_malloc_r+0xde>
 8015876:	6834      	ldr	r4, [r6, #0]
 8015878:	4626      	mov	r6, r4
 801587a:	2e00      	cmp	r6, #0
 801587c:	d140      	bne.n	8015900 <_malloc_r+0xcc>
 801587e:	6823      	ldr	r3, [r4, #0]
 8015880:	4631      	mov	r1, r6
 8015882:	4638      	mov	r0, r7
 8015884:	eb04 0803 	add.w	r8, r4, r3
 8015888:	f000 fb02 	bl	8015e90 <_sbrk_r>
 801588c:	4580      	cmp	r8, r0
 801588e:	d13a      	bne.n	8015906 <_malloc_r+0xd2>
 8015890:	6821      	ldr	r1, [r4, #0]
 8015892:	3503      	adds	r5, #3
 8015894:	1a6d      	subs	r5, r5, r1
 8015896:	f025 0503 	bic.w	r5, r5, #3
 801589a:	3508      	adds	r5, #8
 801589c:	2d0c      	cmp	r5, #12
 801589e:	bf38      	it	cc
 80158a0:	250c      	movcc	r5, #12
 80158a2:	4638      	mov	r0, r7
 80158a4:	4629      	mov	r1, r5
 80158a6:	f7ff ffa5 	bl	80157f4 <sbrk_aligned>
 80158aa:	3001      	adds	r0, #1
 80158ac:	d02b      	beq.n	8015906 <_malloc_r+0xd2>
 80158ae:	6823      	ldr	r3, [r4, #0]
 80158b0:	442b      	add	r3, r5
 80158b2:	6023      	str	r3, [r4, #0]
 80158b4:	e00e      	b.n	80158d4 <_malloc_r+0xa0>
 80158b6:	6822      	ldr	r2, [r4, #0]
 80158b8:	1b52      	subs	r2, r2, r5
 80158ba:	d41e      	bmi.n	80158fa <_malloc_r+0xc6>
 80158bc:	2a0b      	cmp	r2, #11
 80158be:	d916      	bls.n	80158ee <_malloc_r+0xba>
 80158c0:	1961      	adds	r1, r4, r5
 80158c2:	42a3      	cmp	r3, r4
 80158c4:	6025      	str	r5, [r4, #0]
 80158c6:	bf18      	it	ne
 80158c8:	6059      	strne	r1, [r3, #4]
 80158ca:	6863      	ldr	r3, [r4, #4]
 80158cc:	bf08      	it	eq
 80158ce:	6031      	streq	r1, [r6, #0]
 80158d0:	5162      	str	r2, [r4, r5]
 80158d2:	604b      	str	r3, [r1, #4]
 80158d4:	4638      	mov	r0, r7
 80158d6:	f104 060b 	add.w	r6, r4, #11
 80158da:	f000 fda3 	bl	8016424 <__malloc_unlock>
 80158de:	f026 0607 	bic.w	r6, r6, #7
 80158e2:	1d23      	adds	r3, r4, #4
 80158e4:	1af2      	subs	r2, r6, r3
 80158e6:	d0b6      	beq.n	8015856 <_malloc_r+0x22>
 80158e8:	1b9b      	subs	r3, r3, r6
 80158ea:	50a3      	str	r3, [r4, r2]
 80158ec:	e7b3      	b.n	8015856 <_malloc_r+0x22>
 80158ee:	6862      	ldr	r2, [r4, #4]
 80158f0:	42a3      	cmp	r3, r4
 80158f2:	bf0c      	ite	eq
 80158f4:	6032      	streq	r2, [r6, #0]
 80158f6:	605a      	strne	r2, [r3, #4]
 80158f8:	e7ec      	b.n	80158d4 <_malloc_r+0xa0>
 80158fa:	4623      	mov	r3, r4
 80158fc:	6864      	ldr	r4, [r4, #4]
 80158fe:	e7b2      	b.n	8015866 <_malloc_r+0x32>
 8015900:	4634      	mov	r4, r6
 8015902:	6876      	ldr	r6, [r6, #4]
 8015904:	e7b9      	b.n	801587a <_malloc_r+0x46>
 8015906:	230c      	movs	r3, #12
 8015908:	4638      	mov	r0, r7
 801590a:	603b      	str	r3, [r7, #0]
 801590c:	f000 fd8a 	bl	8016424 <__malloc_unlock>
 8015910:	e7a1      	b.n	8015856 <_malloc_r+0x22>
 8015912:	6025      	str	r5, [r4, #0]
 8015914:	e7de      	b.n	80158d4 <_malloc_r+0xa0>
 8015916:	bf00      	nop
 8015918:	20007ff0 	.word	0x20007ff0

0801591c <__ssputs_r>:
 801591c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015920:	688e      	ldr	r6, [r1, #8]
 8015922:	4682      	mov	sl, r0
 8015924:	429e      	cmp	r6, r3
 8015926:	460c      	mov	r4, r1
 8015928:	4690      	mov	r8, r2
 801592a:	461f      	mov	r7, r3
 801592c:	d838      	bhi.n	80159a0 <__ssputs_r+0x84>
 801592e:	898a      	ldrh	r2, [r1, #12]
 8015930:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015934:	d032      	beq.n	801599c <__ssputs_r+0x80>
 8015936:	6825      	ldr	r5, [r4, #0]
 8015938:	6909      	ldr	r1, [r1, #16]
 801593a:	3301      	adds	r3, #1
 801593c:	eba5 0901 	sub.w	r9, r5, r1
 8015940:	6965      	ldr	r5, [r4, #20]
 8015942:	444b      	add	r3, r9
 8015944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015948:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801594c:	106d      	asrs	r5, r5, #1
 801594e:	429d      	cmp	r5, r3
 8015950:	bf38      	it	cc
 8015952:	461d      	movcc	r5, r3
 8015954:	0553      	lsls	r3, r2, #21
 8015956:	d531      	bpl.n	80159bc <__ssputs_r+0xa0>
 8015958:	4629      	mov	r1, r5
 801595a:	f7ff ff6b 	bl	8015834 <_malloc_r>
 801595e:	4606      	mov	r6, r0
 8015960:	b950      	cbnz	r0, 8015978 <__ssputs_r+0x5c>
 8015962:	230c      	movs	r3, #12
 8015964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015968:	f8ca 3000 	str.w	r3, [sl]
 801596c:	89a3      	ldrh	r3, [r4, #12]
 801596e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015972:	81a3      	strh	r3, [r4, #12]
 8015974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015978:	464a      	mov	r2, r9
 801597a:	6921      	ldr	r1, [r4, #16]
 801597c:	f7fc f9bc 	bl	8011cf8 <memcpy>
 8015980:	89a3      	ldrh	r3, [r4, #12]
 8015982:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801598a:	81a3      	strh	r3, [r4, #12]
 801598c:	6126      	str	r6, [r4, #16]
 801598e:	444e      	add	r6, r9
 8015990:	6026      	str	r6, [r4, #0]
 8015992:	463e      	mov	r6, r7
 8015994:	6165      	str	r5, [r4, #20]
 8015996:	eba5 0509 	sub.w	r5, r5, r9
 801599a:	60a5      	str	r5, [r4, #8]
 801599c:	42be      	cmp	r6, r7
 801599e:	d900      	bls.n	80159a2 <__ssputs_r+0x86>
 80159a0:	463e      	mov	r6, r7
 80159a2:	4632      	mov	r2, r6
 80159a4:	4641      	mov	r1, r8
 80159a6:	6820      	ldr	r0, [r4, #0]
 80159a8:	f000 fd1c 	bl	80163e4 <memmove>
 80159ac:	68a3      	ldr	r3, [r4, #8]
 80159ae:	2000      	movs	r0, #0
 80159b0:	1b9b      	subs	r3, r3, r6
 80159b2:	60a3      	str	r3, [r4, #8]
 80159b4:	6823      	ldr	r3, [r4, #0]
 80159b6:	4433      	add	r3, r6
 80159b8:	6023      	str	r3, [r4, #0]
 80159ba:	e7db      	b.n	8015974 <__ssputs_r+0x58>
 80159bc:	462a      	mov	r2, r5
 80159be:	f000 fd37 	bl	8016430 <_realloc_r>
 80159c2:	4606      	mov	r6, r0
 80159c4:	2800      	cmp	r0, #0
 80159c6:	d1e1      	bne.n	801598c <__ssputs_r+0x70>
 80159c8:	4650      	mov	r0, sl
 80159ca:	6921      	ldr	r1, [r4, #16]
 80159cc:	f7ff feca 	bl	8015764 <_free_r>
 80159d0:	e7c7      	b.n	8015962 <__ssputs_r+0x46>
	...

080159d4 <_svfiprintf_r>:
 80159d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159d8:	4698      	mov	r8, r3
 80159da:	898b      	ldrh	r3, [r1, #12]
 80159dc:	4607      	mov	r7, r0
 80159de:	061b      	lsls	r3, r3, #24
 80159e0:	460d      	mov	r5, r1
 80159e2:	4614      	mov	r4, r2
 80159e4:	b09d      	sub	sp, #116	; 0x74
 80159e6:	d50e      	bpl.n	8015a06 <_svfiprintf_r+0x32>
 80159e8:	690b      	ldr	r3, [r1, #16]
 80159ea:	b963      	cbnz	r3, 8015a06 <_svfiprintf_r+0x32>
 80159ec:	2140      	movs	r1, #64	; 0x40
 80159ee:	f7ff ff21 	bl	8015834 <_malloc_r>
 80159f2:	6028      	str	r0, [r5, #0]
 80159f4:	6128      	str	r0, [r5, #16]
 80159f6:	b920      	cbnz	r0, 8015a02 <_svfiprintf_r+0x2e>
 80159f8:	230c      	movs	r3, #12
 80159fa:	603b      	str	r3, [r7, #0]
 80159fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a00:	e0d1      	b.n	8015ba6 <_svfiprintf_r+0x1d2>
 8015a02:	2340      	movs	r3, #64	; 0x40
 8015a04:	616b      	str	r3, [r5, #20]
 8015a06:	2300      	movs	r3, #0
 8015a08:	9309      	str	r3, [sp, #36]	; 0x24
 8015a0a:	2320      	movs	r3, #32
 8015a0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015a10:	2330      	movs	r3, #48	; 0x30
 8015a12:	f04f 0901 	mov.w	r9, #1
 8015a16:	f8cd 800c 	str.w	r8, [sp, #12]
 8015a1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015bc0 <_svfiprintf_r+0x1ec>
 8015a1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015a22:	4623      	mov	r3, r4
 8015a24:	469a      	mov	sl, r3
 8015a26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015a2a:	b10a      	cbz	r2, 8015a30 <_svfiprintf_r+0x5c>
 8015a2c:	2a25      	cmp	r2, #37	; 0x25
 8015a2e:	d1f9      	bne.n	8015a24 <_svfiprintf_r+0x50>
 8015a30:	ebba 0b04 	subs.w	fp, sl, r4
 8015a34:	d00b      	beq.n	8015a4e <_svfiprintf_r+0x7a>
 8015a36:	465b      	mov	r3, fp
 8015a38:	4622      	mov	r2, r4
 8015a3a:	4629      	mov	r1, r5
 8015a3c:	4638      	mov	r0, r7
 8015a3e:	f7ff ff6d 	bl	801591c <__ssputs_r>
 8015a42:	3001      	adds	r0, #1
 8015a44:	f000 80aa 	beq.w	8015b9c <_svfiprintf_r+0x1c8>
 8015a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a4a:	445a      	add	r2, fp
 8015a4c:	9209      	str	r2, [sp, #36]	; 0x24
 8015a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	f000 80a2 	beq.w	8015b9c <_svfiprintf_r+0x1c8>
 8015a58:	2300      	movs	r3, #0
 8015a5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015a5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015a62:	f10a 0a01 	add.w	sl, sl, #1
 8015a66:	9304      	str	r3, [sp, #16]
 8015a68:	9307      	str	r3, [sp, #28]
 8015a6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015a6e:	931a      	str	r3, [sp, #104]	; 0x68
 8015a70:	4654      	mov	r4, sl
 8015a72:	2205      	movs	r2, #5
 8015a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a78:	4851      	ldr	r0, [pc, #324]	; (8015bc0 <_svfiprintf_r+0x1ec>)
 8015a7a:	f7ff f999 	bl	8014db0 <memchr>
 8015a7e:	9a04      	ldr	r2, [sp, #16]
 8015a80:	b9d8      	cbnz	r0, 8015aba <_svfiprintf_r+0xe6>
 8015a82:	06d0      	lsls	r0, r2, #27
 8015a84:	bf44      	itt	mi
 8015a86:	2320      	movmi	r3, #32
 8015a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015a8c:	0711      	lsls	r1, r2, #28
 8015a8e:	bf44      	itt	mi
 8015a90:	232b      	movmi	r3, #43	; 0x2b
 8015a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015a96:	f89a 3000 	ldrb.w	r3, [sl]
 8015a9a:	2b2a      	cmp	r3, #42	; 0x2a
 8015a9c:	d015      	beq.n	8015aca <_svfiprintf_r+0xf6>
 8015a9e:	4654      	mov	r4, sl
 8015aa0:	2000      	movs	r0, #0
 8015aa2:	f04f 0c0a 	mov.w	ip, #10
 8015aa6:	9a07      	ldr	r2, [sp, #28]
 8015aa8:	4621      	mov	r1, r4
 8015aaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015aae:	3b30      	subs	r3, #48	; 0x30
 8015ab0:	2b09      	cmp	r3, #9
 8015ab2:	d94e      	bls.n	8015b52 <_svfiprintf_r+0x17e>
 8015ab4:	b1b0      	cbz	r0, 8015ae4 <_svfiprintf_r+0x110>
 8015ab6:	9207      	str	r2, [sp, #28]
 8015ab8:	e014      	b.n	8015ae4 <_svfiprintf_r+0x110>
 8015aba:	eba0 0308 	sub.w	r3, r0, r8
 8015abe:	fa09 f303 	lsl.w	r3, r9, r3
 8015ac2:	4313      	orrs	r3, r2
 8015ac4:	46a2      	mov	sl, r4
 8015ac6:	9304      	str	r3, [sp, #16]
 8015ac8:	e7d2      	b.n	8015a70 <_svfiprintf_r+0x9c>
 8015aca:	9b03      	ldr	r3, [sp, #12]
 8015acc:	1d19      	adds	r1, r3, #4
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	9103      	str	r1, [sp, #12]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	bfbb      	ittet	lt
 8015ad6:	425b      	neglt	r3, r3
 8015ad8:	f042 0202 	orrlt.w	r2, r2, #2
 8015adc:	9307      	strge	r3, [sp, #28]
 8015ade:	9307      	strlt	r3, [sp, #28]
 8015ae0:	bfb8      	it	lt
 8015ae2:	9204      	strlt	r2, [sp, #16]
 8015ae4:	7823      	ldrb	r3, [r4, #0]
 8015ae6:	2b2e      	cmp	r3, #46	; 0x2e
 8015ae8:	d10c      	bne.n	8015b04 <_svfiprintf_r+0x130>
 8015aea:	7863      	ldrb	r3, [r4, #1]
 8015aec:	2b2a      	cmp	r3, #42	; 0x2a
 8015aee:	d135      	bne.n	8015b5c <_svfiprintf_r+0x188>
 8015af0:	9b03      	ldr	r3, [sp, #12]
 8015af2:	3402      	adds	r4, #2
 8015af4:	1d1a      	adds	r2, r3, #4
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	9203      	str	r2, [sp, #12]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	bfb8      	it	lt
 8015afe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015b02:	9305      	str	r3, [sp, #20]
 8015b04:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8015bc4 <_svfiprintf_r+0x1f0>
 8015b08:	2203      	movs	r2, #3
 8015b0a:	4650      	mov	r0, sl
 8015b0c:	7821      	ldrb	r1, [r4, #0]
 8015b0e:	f7ff f94f 	bl	8014db0 <memchr>
 8015b12:	b140      	cbz	r0, 8015b26 <_svfiprintf_r+0x152>
 8015b14:	2340      	movs	r3, #64	; 0x40
 8015b16:	eba0 000a 	sub.w	r0, r0, sl
 8015b1a:	fa03 f000 	lsl.w	r0, r3, r0
 8015b1e:	9b04      	ldr	r3, [sp, #16]
 8015b20:	3401      	adds	r4, #1
 8015b22:	4303      	orrs	r3, r0
 8015b24:	9304      	str	r3, [sp, #16]
 8015b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b2a:	2206      	movs	r2, #6
 8015b2c:	4826      	ldr	r0, [pc, #152]	; (8015bc8 <_svfiprintf_r+0x1f4>)
 8015b2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015b32:	f7ff f93d 	bl	8014db0 <memchr>
 8015b36:	2800      	cmp	r0, #0
 8015b38:	d038      	beq.n	8015bac <_svfiprintf_r+0x1d8>
 8015b3a:	4b24      	ldr	r3, [pc, #144]	; (8015bcc <_svfiprintf_r+0x1f8>)
 8015b3c:	bb1b      	cbnz	r3, 8015b86 <_svfiprintf_r+0x1b2>
 8015b3e:	9b03      	ldr	r3, [sp, #12]
 8015b40:	3307      	adds	r3, #7
 8015b42:	f023 0307 	bic.w	r3, r3, #7
 8015b46:	3308      	adds	r3, #8
 8015b48:	9303      	str	r3, [sp, #12]
 8015b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b4c:	4433      	add	r3, r6
 8015b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8015b50:	e767      	b.n	8015a22 <_svfiprintf_r+0x4e>
 8015b52:	460c      	mov	r4, r1
 8015b54:	2001      	movs	r0, #1
 8015b56:	fb0c 3202 	mla	r2, ip, r2, r3
 8015b5a:	e7a5      	b.n	8015aa8 <_svfiprintf_r+0xd4>
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	f04f 0c0a 	mov.w	ip, #10
 8015b62:	4619      	mov	r1, r3
 8015b64:	3401      	adds	r4, #1
 8015b66:	9305      	str	r3, [sp, #20]
 8015b68:	4620      	mov	r0, r4
 8015b6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015b6e:	3a30      	subs	r2, #48	; 0x30
 8015b70:	2a09      	cmp	r2, #9
 8015b72:	d903      	bls.n	8015b7c <_svfiprintf_r+0x1a8>
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d0c5      	beq.n	8015b04 <_svfiprintf_r+0x130>
 8015b78:	9105      	str	r1, [sp, #20]
 8015b7a:	e7c3      	b.n	8015b04 <_svfiprintf_r+0x130>
 8015b7c:	4604      	mov	r4, r0
 8015b7e:	2301      	movs	r3, #1
 8015b80:	fb0c 2101 	mla	r1, ip, r1, r2
 8015b84:	e7f0      	b.n	8015b68 <_svfiprintf_r+0x194>
 8015b86:	ab03      	add	r3, sp, #12
 8015b88:	9300      	str	r3, [sp, #0]
 8015b8a:	462a      	mov	r2, r5
 8015b8c:	4638      	mov	r0, r7
 8015b8e:	4b10      	ldr	r3, [pc, #64]	; (8015bd0 <_svfiprintf_r+0x1fc>)
 8015b90:	a904      	add	r1, sp, #16
 8015b92:	f7fc f965 	bl	8011e60 <_printf_float>
 8015b96:	1c42      	adds	r2, r0, #1
 8015b98:	4606      	mov	r6, r0
 8015b9a:	d1d6      	bne.n	8015b4a <_svfiprintf_r+0x176>
 8015b9c:	89ab      	ldrh	r3, [r5, #12]
 8015b9e:	065b      	lsls	r3, r3, #25
 8015ba0:	f53f af2c 	bmi.w	80159fc <_svfiprintf_r+0x28>
 8015ba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015ba6:	b01d      	add	sp, #116	; 0x74
 8015ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bac:	ab03      	add	r3, sp, #12
 8015bae:	9300      	str	r3, [sp, #0]
 8015bb0:	462a      	mov	r2, r5
 8015bb2:	4638      	mov	r0, r7
 8015bb4:	4b06      	ldr	r3, [pc, #24]	; (8015bd0 <_svfiprintf_r+0x1fc>)
 8015bb6:	a904      	add	r1, sp, #16
 8015bb8:	f7fc fbee 	bl	8012398 <_printf_i>
 8015bbc:	e7eb      	b.n	8015b96 <_svfiprintf_r+0x1c2>
 8015bbe:	bf00      	nop
 8015bc0:	08018ae4 	.word	0x08018ae4
 8015bc4:	08018aea 	.word	0x08018aea
 8015bc8:	08018aee 	.word	0x08018aee
 8015bcc:	08011e61 	.word	0x08011e61
 8015bd0:	0801591d 	.word	0x0801591d

08015bd4 <__sfputc_r>:
 8015bd4:	6893      	ldr	r3, [r2, #8]
 8015bd6:	b410      	push	{r4}
 8015bd8:	3b01      	subs	r3, #1
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	6093      	str	r3, [r2, #8]
 8015bde:	da07      	bge.n	8015bf0 <__sfputc_r+0x1c>
 8015be0:	6994      	ldr	r4, [r2, #24]
 8015be2:	42a3      	cmp	r3, r4
 8015be4:	db01      	blt.n	8015bea <__sfputc_r+0x16>
 8015be6:	290a      	cmp	r1, #10
 8015be8:	d102      	bne.n	8015bf0 <__sfputc_r+0x1c>
 8015bea:	bc10      	pop	{r4}
 8015bec:	f000 b9a4 	b.w	8015f38 <__swbuf_r>
 8015bf0:	6813      	ldr	r3, [r2, #0]
 8015bf2:	1c58      	adds	r0, r3, #1
 8015bf4:	6010      	str	r0, [r2, #0]
 8015bf6:	7019      	strb	r1, [r3, #0]
 8015bf8:	4608      	mov	r0, r1
 8015bfa:	bc10      	pop	{r4}
 8015bfc:	4770      	bx	lr

08015bfe <__sfputs_r>:
 8015bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c00:	4606      	mov	r6, r0
 8015c02:	460f      	mov	r7, r1
 8015c04:	4614      	mov	r4, r2
 8015c06:	18d5      	adds	r5, r2, r3
 8015c08:	42ac      	cmp	r4, r5
 8015c0a:	d101      	bne.n	8015c10 <__sfputs_r+0x12>
 8015c0c:	2000      	movs	r0, #0
 8015c0e:	e007      	b.n	8015c20 <__sfputs_r+0x22>
 8015c10:	463a      	mov	r2, r7
 8015c12:	4630      	mov	r0, r6
 8015c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c18:	f7ff ffdc 	bl	8015bd4 <__sfputc_r>
 8015c1c:	1c43      	adds	r3, r0, #1
 8015c1e:	d1f3      	bne.n	8015c08 <__sfputs_r+0xa>
 8015c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015c24 <_vfiprintf_r>:
 8015c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c28:	460d      	mov	r5, r1
 8015c2a:	4614      	mov	r4, r2
 8015c2c:	4698      	mov	r8, r3
 8015c2e:	4606      	mov	r6, r0
 8015c30:	b09d      	sub	sp, #116	; 0x74
 8015c32:	b118      	cbz	r0, 8015c3c <_vfiprintf_r+0x18>
 8015c34:	6983      	ldr	r3, [r0, #24]
 8015c36:	b90b      	cbnz	r3, 8015c3c <_vfiprintf_r+0x18>
 8015c38:	f7fe fc94 	bl	8014564 <__sinit>
 8015c3c:	4b89      	ldr	r3, [pc, #548]	; (8015e64 <_vfiprintf_r+0x240>)
 8015c3e:	429d      	cmp	r5, r3
 8015c40:	d11b      	bne.n	8015c7a <_vfiprintf_r+0x56>
 8015c42:	6875      	ldr	r5, [r6, #4]
 8015c44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015c46:	07d9      	lsls	r1, r3, #31
 8015c48:	d405      	bmi.n	8015c56 <_vfiprintf_r+0x32>
 8015c4a:	89ab      	ldrh	r3, [r5, #12]
 8015c4c:	059a      	lsls	r2, r3, #22
 8015c4e:	d402      	bmi.n	8015c56 <_vfiprintf_r+0x32>
 8015c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015c52:	f7ff f890 	bl	8014d76 <__retarget_lock_acquire_recursive>
 8015c56:	89ab      	ldrh	r3, [r5, #12]
 8015c58:	071b      	lsls	r3, r3, #28
 8015c5a:	d501      	bpl.n	8015c60 <_vfiprintf_r+0x3c>
 8015c5c:	692b      	ldr	r3, [r5, #16]
 8015c5e:	b9eb      	cbnz	r3, 8015c9c <_vfiprintf_r+0x78>
 8015c60:	4629      	mov	r1, r5
 8015c62:	4630      	mov	r0, r6
 8015c64:	f000 f9da 	bl	801601c <__swsetup_r>
 8015c68:	b1c0      	cbz	r0, 8015c9c <_vfiprintf_r+0x78>
 8015c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015c6c:	07dc      	lsls	r4, r3, #31
 8015c6e:	d50e      	bpl.n	8015c8e <_vfiprintf_r+0x6a>
 8015c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015c74:	b01d      	add	sp, #116	; 0x74
 8015c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c7a:	4b7b      	ldr	r3, [pc, #492]	; (8015e68 <_vfiprintf_r+0x244>)
 8015c7c:	429d      	cmp	r5, r3
 8015c7e:	d101      	bne.n	8015c84 <_vfiprintf_r+0x60>
 8015c80:	68b5      	ldr	r5, [r6, #8]
 8015c82:	e7df      	b.n	8015c44 <_vfiprintf_r+0x20>
 8015c84:	4b79      	ldr	r3, [pc, #484]	; (8015e6c <_vfiprintf_r+0x248>)
 8015c86:	429d      	cmp	r5, r3
 8015c88:	bf08      	it	eq
 8015c8a:	68f5      	ldreq	r5, [r6, #12]
 8015c8c:	e7da      	b.n	8015c44 <_vfiprintf_r+0x20>
 8015c8e:	89ab      	ldrh	r3, [r5, #12]
 8015c90:	0598      	lsls	r0, r3, #22
 8015c92:	d4ed      	bmi.n	8015c70 <_vfiprintf_r+0x4c>
 8015c94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015c96:	f7ff f86f 	bl	8014d78 <__retarget_lock_release_recursive>
 8015c9a:	e7e9      	b.n	8015c70 <_vfiprintf_r+0x4c>
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8015ca0:	2320      	movs	r3, #32
 8015ca2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015ca6:	2330      	movs	r3, #48	; 0x30
 8015ca8:	f04f 0901 	mov.w	r9, #1
 8015cac:	f8cd 800c 	str.w	r8, [sp, #12]
 8015cb0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8015e70 <_vfiprintf_r+0x24c>
 8015cb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015cb8:	4623      	mov	r3, r4
 8015cba:	469a      	mov	sl, r3
 8015cbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015cc0:	b10a      	cbz	r2, 8015cc6 <_vfiprintf_r+0xa2>
 8015cc2:	2a25      	cmp	r2, #37	; 0x25
 8015cc4:	d1f9      	bne.n	8015cba <_vfiprintf_r+0x96>
 8015cc6:	ebba 0b04 	subs.w	fp, sl, r4
 8015cca:	d00b      	beq.n	8015ce4 <_vfiprintf_r+0xc0>
 8015ccc:	465b      	mov	r3, fp
 8015cce:	4622      	mov	r2, r4
 8015cd0:	4629      	mov	r1, r5
 8015cd2:	4630      	mov	r0, r6
 8015cd4:	f7ff ff93 	bl	8015bfe <__sfputs_r>
 8015cd8:	3001      	adds	r0, #1
 8015cda:	f000 80aa 	beq.w	8015e32 <_vfiprintf_r+0x20e>
 8015cde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ce0:	445a      	add	r2, fp
 8015ce2:	9209      	str	r2, [sp, #36]	; 0x24
 8015ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	f000 80a2 	beq.w	8015e32 <_vfiprintf_r+0x20e>
 8015cee:	2300      	movs	r3, #0
 8015cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015cf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015cf8:	f10a 0a01 	add.w	sl, sl, #1
 8015cfc:	9304      	str	r3, [sp, #16]
 8015cfe:	9307      	str	r3, [sp, #28]
 8015d00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015d04:	931a      	str	r3, [sp, #104]	; 0x68
 8015d06:	4654      	mov	r4, sl
 8015d08:	2205      	movs	r2, #5
 8015d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d0e:	4858      	ldr	r0, [pc, #352]	; (8015e70 <_vfiprintf_r+0x24c>)
 8015d10:	f7ff f84e 	bl	8014db0 <memchr>
 8015d14:	9a04      	ldr	r2, [sp, #16]
 8015d16:	b9d8      	cbnz	r0, 8015d50 <_vfiprintf_r+0x12c>
 8015d18:	06d1      	lsls	r1, r2, #27
 8015d1a:	bf44      	itt	mi
 8015d1c:	2320      	movmi	r3, #32
 8015d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d22:	0713      	lsls	r3, r2, #28
 8015d24:	bf44      	itt	mi
 8015d26:	232b      	movmi	r3, #43	; 0x2b
 8015d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8015d30:	2b2a      	cmp	r3, #42	; 0x2a
 8015d32:	d015      	beq.n	8015d60 <_vfiprintf_r+0x13c>
 8015d34:	4654      	mov	r4, sl
 8015d36:	2000      	movs	r0, #0
 8015d38:	f04f 0c0a 	mov.w	ip, #10
 8015d3c:	9a07      	ldr	r2, [sp, #28]
 8015d3e:	4621      	mov	r1, r4
 8015d40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015d44:	3b30      	subs	r3, #48	; 0x30
 8015d46:	2b09      	cmp	r3, #9
 8015d48:	d94e      	bls.n	8015de8 <_vfiprintf_r+0x1c4>
 8015d4a:	b1b0      	cbz	r0, 8015d7a <_vfiprintf_r+0x156>
 8015d4c:	9207      	str	r2, [sp, #28]
 8015d4e:	e014      	b.n	8015d7a <_vfiprintf_r+0x156>
 8015d50:	eba0 0308 	sub.w	r3, r0, r8
 8015d54:	fa09 f303 	lsl.w	r3, r9, r3
 8015d58:	4313      	orrs	r3, r2
 8015d5a:	46a2      	mov	sl, r4
 8015d5c:	9304      	str	r3, [sp, #16]
 8015d5e:	e7d2      	b.n	8015d06 <_vfiprintf_r+0xe2>
 8015d60:	9b03      	ldr	r3, [sp, #12]
 8015d62:	1d19      	adds	r1, r3, #4
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	9103      	str	r1, [sp, #12]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	bfbb      	ittet	lt
 8015d6c:	425b      	neglt	r3, r3
 8015d6e:	f042 0202 	orrlt.w	r2, r2, #2
 8015d72:	9307      	strge	r3, [sp, #28]
 8015d74:	9307      	strlt	r3, [sp, #28]
 8015d76:	bfb8      	it	lt
 8015d78:	9204      	strlt	r2, [sp, #16]
 8015d7a:	7823      	ldrb	r3, [r4, #0]
 8015d7c:	2b2e      	cmp	r3, #46	; 0x2e
 8015d7e:	d10c      	bne.n	8015d9a <_vfiprintf_r+0x176>
 8015d80:	7863      	ldrb	r3, [r4, #1]
 8015d82:	2b2a      	cmp	r3, #42	; 0x2a
 8015d84:	d135      	bne.n	8015df2 <_vfiprintf_r+0x1ce>
 8015d86:	9b03      	ldr	r3, [sp, #12]
 8015d88:	3402      	adds	r4, #2
 8015d8a:	1d1a      	adds	r2, r3, #4
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	9203      	str	r2, [sp, #12]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	bfb8      	it	lt
 8015d94:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015d98:	9305      	str	r3, [sp, #20]
 8015d9a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8015e74 <_vfiprintf_r+0x250>
 8015d9e:	2203      	movs	r2, #3
 8015da0:	4650      	mov	r0, sl
 8015da2:	7821      	ldrb	r1, [r4, #0]
 8015da4:	f7ff f804 	bl	8014db0 <memchr>
 8015da8:	b140      	cbz	r0, 8015dbc <_vfiprintf_r+0x198>
 8015daa:	2340      	movs	r3, #64	; 0x40
 8015dac:	eba0 000a 	sub.w	r0, r0, sl
 8015db0:	fa03 f000 	lsl.w	r0, r3, r0
 8015db4:	9b04      	ldr	r3, [sp, #16]
 8015db6:	3401      	adds	r4, #1
 8015db8:	4303      	orrs	r3, r0
 8015dba:	9304      	str	r3, [sp, #16]
 8015dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dc0:	2206      	movs	r2, #6
 8015dc2:	482d      	ldr	r0, [pc, #180]	; (8015e78 <_vfiprintf_r+0x254>)
 8015dc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015dc8:	f7fe fff2 	bl	8014db0 <memchr>
 8015dcc:	2800      	cmp	r0, #0
 8015dce:	d03f      	beq.n	8015e50 <_vfiprintf_r+0x22c>
 8015dd0:	4b2a      	ldr	r3, [pc, #168]	; (8015e7c <_vfiprintf_r+0x258>)
 8015dd2:	bb1b      	cbnz	r3, 8015e1c <_vfiprintf_r+0x1f8>
 8015dd4:	9b03      	ldr	r3, [sp, #12]
 8015dd6:	3307      	adds	r3, #7
 8015dd8:	f023 0307 	bic.w	r3, r3, #7
 8015ddc:	3308      	adds	r3, #8
 8015dde:	9303      	str	r3, [sp, #12]
 8015de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015de2:	443b      	add	r3, r7
 8015de4:	9309      	str	r3, [sp, #36]	; 0x24
 8015de6:	e767      	b.n	8015cb8 <_vfiprintf_r+0x94>
 8015de8:	460c      	mov	r4, r1
 8015dea:	2001      	movs	r0, #1
 8015dec:	fb0c 3202 	mla	r2, ip, r2, r3
 8015df0:	e7a5      	b.n	8015d3e <_vfiprintf_r+0x11a>
 8015df2:	2300      	movs	r3, #0
 8015df4:	f04f 0c0a 	mov.w	ip, #10
 8015df8:	4619      	mov	r1, r3
 8015dfa:	3401      	adds	r4, #1
 8015dfc:	9305      	str	r3, [sp, #20]
 8015dfe:	4620      	mov	r0, r4
 8015e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015e04:	3a30      	subs	r2, #48	; 0x30
 8015e06:	2a09      	cmp	r2, #9
 8015e08:	d903      	bls.n	8015e12 <_vfiprintf_r+0x1ee>
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d0c5      	beq.n	8015d9a <_vfiprintf_r+0x176>
 8015e0e:	9105      	str	r1, [sp, #20]
 8015e10:	e7c3      	b.n	8015d9a <_vfiprintf_r+0x176>
 8015e12:	4604      	mov	r4, r0
 8015e14:	2301      	movs	r3, #1
 8015e16:	fb0c 2101 	mla	r1, ip, r1, r2
 8015e1a:	e7f0      	b.n	8015dfe <_vfiprintf_r+0x1da>
 8015e1c:	ab03      	add	r3, sp, #12
 8015e1e:	9300      	str	r3, [sp, #0]
 8015e20:	462a      	mov	r2, r5
 8015e22:	4630      	mov	r0, r6
 8015e24:	4b16      	ldr	r3, [pc, #88]	; (8015e80 <_vfiprintf_r+0x25c>)
 8015e26:	a904      	add	r1, sp, #16
 8015e28:	f7fc f81a 	bl	8011e60 <_printf_float>
 8015e2c:	4607      	mov	r7, r0
 8015e2e:	1c78      	adds	r0, r7, #1
 8015e30:	d1d6      	bne.n	8015de0 <_vfiprintf_r+0x1bc>
 8015e32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015e34:	07d9      	lsls	r1, r3, #31
 8015e36:	d405      	bmi.n	8015e44 <_vfiprintf_r+0x220>
 8015e38:	89ab      	ldrh	r3, [r5, #12]
 8015e3a:	059a      	lsls	r2, r3, #22
 8015e3c:	d402      	bmi.n	8015e44 <_vfiprintf_r+0x220>
 8015e3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015e40:	f7fe ff9a 	bl	8014d78 <__retarget_lock_release_recursive>
 8015e44:	89ab      	ldrh	r3, [r5, #12]
 8015e46:	065b      	lsls	r3, r3, #25
 8015e48:	f53f af12 	bmi.w	8015c70 <_vfiprintf_r+0x4c>
 8015e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015e4e:	e711      	b.n	8015c74 <_vfiprintf_r+0x50>
 8015e50:	ab03      	add	r3, sp, #12
 8015e52:	9300      	str	r3, [sp, #0]
 8015e54:	462a      	mov	r2, r5
 8015e56:	4630      	mov	r0, r6
 8015e58:	4b09      	ldr	r3, [pc, #36]	; (8015e80 <_vfiprintf_r+0x25c>)
 8015e5a:	a904      	add	r1, sp, #16
 8015e5c:	f7fc fa9c 	bl	8012398 <_printf_i>
 8015e60:	e7e4      	b.n	8015e2c <_vfiprintf_r+0x208>
 8015e62:	bf00      	nop
 8015e64:	080188cc 	.word	0x080188cc
 8015e68:	080188ec 	.word	0x080188ec
 8015e6c:	080188ac 	.word	0x080188ac
 8015e70:	08018ae4 	.word	0x08018ae4
 8015e74:	08018aea 	.word	0x08018aea
 8015e78:	08018aee 	.word	0x08018aee
 8015e7c:	08011e61 	.word	0x08011e61
 8015e80:	08015bff 	.word	0x08015bff

08015e84 <nan>:
 8015e84:	2000      	movs	r0, #0
 8015e86:	4901      	ldr	r1, [pc, #4]	; (8015e8c <nan+0x8>)
 8015e88:	4770      	bx	lr
 8015e8a:	bf00      	nop
 8015e8c:	7ff80000 	.word	0x7ff80000

08015e90 <_sbrk_r>:
 8015e90:	b538      	push	{r3, r4, r5, lr}
 8015e92:	2300      	movs	r3, #0
 8015e94:	4d05      	ldr	r5, [pc, #20]	; (8015eac <_sbrk_r+0x1c>)
 8015e96:	4604      	mov	r4, r0
 8015e98:	4608      	mov	r0, r1
 8015e9a:	602b      	str	r3, [r5, #0]
 8015e9c:	f7ec fd8a 	bl	80029b4 <_sbrk>
 8015ea0:	1c43      	adds	r3, r0, #1
 8015ea2:	d102      	bne.n	8015eaa <_sbrk_r+0x1a>
 8015ea4:	682b      	ldr	r3, [r5, #0]
 8015ea6:	b103      	cbz	r3, 8015eaa <_sbrk_r+0x1a>
 8015ea8:	6023      	str	r3, [r4, #0]
 8015eaa:	bd38      	pop	{r3, r4, r5, pc}
 8015eac:	20007fe8 	.word	0x20007fe8

08015eb0 <__sread>:
 8015eb0:	b510      	push	{r4, lr}
 8015eb2:	460c      	mov	r4, r1
 8015eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015eb8:	f000 faea 	bl	8016490 <_read_r>
 8015ebc:	2800      	cmp	r0, #0
 8015ebe:	bfab      	itete	ge
 8015ec0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015ec2:	89a3      	ldrhlt	r3, [r4, #12]
 8015ec4:	181b      	addge	r3, r3, r0
 8015ec6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015eca:	bfac      	ite	ge
 8015ecc:	6563      	strge	r3, [r4, #84]	; 0x54
 8015ece:	81a3      	strhlt	r3, [r4, #12]
 8015ed0:	bd10      	pop	{r4, pc}

08015ed2 <__swrite>:
 8015ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ed6:	461f      	mov	r7, r3
 8015ed8:	898b      	ldrh	r3, [r1, #12]
 8015eda:	4605      	mov	r5, r0
 8015edc:	05db      	lsls	r3, r3, #23
 8015ede:	460c      	mov	r4, r1
 8015ee0:	4616      	mov	r6, r2
 8015ee2:	d505      	bpl.n	8015ef0 <__swrite+0x1e>
 8015ee4:	2302      	movs	r3, #2
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015eec:	f000 fa02 	bl	80162f4 <_lseek_r>
 8015ef0:	89a3      	ldrh	r3, [r4, #12]
 8015ef2:	4632      	mov	r2, r6
 8015ef4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015ef8:	81a3      	strh	r3, [r4, #12]
 8015efa:	4628      	mov	r0, r5
 8015efc:	463b      	mov	r3, r7
 8015efe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f06:	f000 b877 	b.w	8015ff8 <_write_r>

08015f0a <__sseek>:
 8015f0a:	b510      	push	{r4, lr}
 8015f0c:	460c      	mov	r4, r1
 8015f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f12:	f000 f9ef 	bl	80162f4 <_lseek_r>
 8015f16:	1c43      	adds	r3, r0, #1
 8015f18:	89a3      	ldrh	r3, [r4, #12]
 8015f1a:	bf15      	itete	ne
 8015f1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8015f1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015f22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015f26:	81a3      	strheq	r3, [r4, #12]
 8015f28:	bf18      	it	ne
 8015f2a:	81a3      	strhne	r3, [r4, #12]
 8015f2c:	bd10      	pop	{r4, pc}

08015f2e <__sclose>:
 8015f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f32:	f000 b8ff 	b.w	8016134 <_close_r>
	...

08015f38 <__swbuf_r>:
 8015f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f3a:	460e      	mov	r6, r1
 8015f3c:	4614      	mov	r4, r2
 8015f3e:	4605      	mov	r5, r0
 8015f40:	b118      	cbz	r0, 8015f4a <__swbuf_r+0x12>
 8015f42:	6983      	ldr	r3, [r0, #24]
 8015f44:	b90b      	cbnz	r3, 8015f4a <__swbuf_r+0x12>
 8015f46:	f7fe fb0d 	bl	8014564 <__sinit>
 8015f4a:	4b21      	ldr	r3, [pc, #132]	; (8015fd0 <__swbuf_r+0x98>)
 8015f4c:	429c      	cmp	r4, r3
 8015f4e:	d12b      	bne.n	8015fa8 <__swbuf_r+0x70>
 8015f50:	686c      	ldr	r4, [r5, #4]
 8015f52:	69a3      	ldr	r3, [r4, #24]
 8015f54:	60a3      	str	r3, [r4, #8]
 8015f56:	89a3      	ldrh	r3, [r4, #12]
 8015f58:	071a      	lsls	r2, r3, #28
 8015f5a:	d52f      	bpl.n	8015fbc <__swbuf_r+0x84>
 8015f5c:	6923      	ldr	r3, [r4, #16]
 8015f5e:	b36b      	cbz	r3, 8015fbc <__swbuf_r+0x84>
 8015f60:	6923      	ldr	r3, [r4, #16]
 8015f62:	6820      	ldr	r0, [r4, #0]
 8015f64:	b2f6      	uxtb	r6, r6
 8015f66:	1ac0      	subs	r0, r0, r3
 8015f68:	6963      	ldr	r3, [r4, #20]
 8015f6a:	4637      	mov	r7, r6
 8015f6c:	4283      	cmp	r3, r0
 8015f6e:	dc04      	bgt.n	8015f7a <__swbuf_r+0x42>
 8015f70:	4621      	mov	r1, r4
 8015f72:	4628      	mov	r0, r5
 8015f74:	f000 f970 	bl	8016258 <_fflush_r>
 8015f78:	bb30      	cbnz	r0, 8015fc8 <__swbuf_r+0x90>
 8015f7a:	68a3      	ldr	r3, [r4, #8]
 8015f7c:	3001      	adds	r0, #1
 8015f7e:	3b01      	subs	r3, #1
 8015f80:	60a3      	str	r3, [r4, #8]
 8015f82:	6823      	ldr	r3, [r4, #0]
 8015f84:	1c5a      	adds	r2, r3, #1
 8015f86:	6022      	str	r2, [r4, #0]
 8015f88:	701e      	strb	r6, [r3, #0]
 8015f8a:	6963      	ldr	r3, [r4, #20]
 8015f8c:	4283      	cmp	r3, r0
 8015f8e:	d004      	beq.n	8015f9a <__swbuf_r+0x62>
 8015f90:	89a3      	ldrh	r3, [r4, #12]
 8015f92:	07db      	lsls	r3, r3, #31
 8015f94:	d506      	bpl.n	8015fa4 <__swbuf_r+0x6c>
 8015f96:	2e0a      	cmp	r6, #10
 8015f98:	d104      	bne.n	8015fa4 <__swbuf_r+0x6c>
 8015f9a:	4621      	mov	r1, r4
 8015f9c:	4628      	mov	r0, r5
 8015f9e:	f000 f95b 	bl	8016258 <_fflush_r>
 8015fa2:	b988      	cbnz	r0, 8015fc8 <__swbuf_r+0x90>
 8015fa4:	4638      	mov	r0, r7
 8015fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fa8:	4b0a      	ldr	r3, [pc, #40]	; (8015fd4 <__swbuf_r+0x9c>)
 8015faa:	429c      	cmp	r4, r3
 8015fac:	d101      	bne.n	8015fb2 <__swbuf_r+0x7a>
 8015fae:	68ac      	ldr	r4, [r5, #8]
 8015fb0:	e7cf      	b.n	8015f52 <__swbuf_r+0x1a>
 8015fb2:	4b09      	ldr	r3, [pc, #36]	; (8015fd8 <__swbuf_r+0xa0>)
 8015fb4:	429c      	cmp	r4, r3
 8015fb6:	bf08      	it	eq
 8015fb8:	68ec      	ldreq	r4, [r5, #12]
 8015fba:	e7ca      	b.n	8015f52 <__swbuf_r+0x1a>
 8015fbc:	4621      	mov	r1, r4
 8015fbe:	4628      	mov	r0, r5
 8015fc0:	f000 f82c 	bl	801601c <__swsetup_r>
 8015fc4:	2800      	cmp	r0, #0
 8015fc6:	d0cb      	beq.n	8015f60 <__swbuf_r+0x28>
 8015fc8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015fcc:	e7ea      	b.n	8015fa4 <__swbuf_r+0x6c>
 8015fce:	bf00      	nop
 8015fd0:	080188cc 	.word	0x080188cc
 8015fd4:	080188ec 	.word	0x080188ec
 8015fd8:	080188ac 	.word	0x080188ac

08015fdc <__ascii_wctomb>:
 8015fdc:	4603      	mov	r3, r0
 8015fde:	4608      	mov	r0, r1
 8015fe0:	b141      	cbz	r1, 8015ff4 <__ascii_wctomb+0x18>
 8015fe2:	2aff      	cmp	r2, #255	; 0xff
 8015fe4:	d904      	bls.n	8015ff0 <__ascii_wctomb+0x14>
 8015fe6:	228a      	movs	r2, #138	; 0x8a
 8015fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015fec:	601a      	str	r2, [r3, #0]
 8015fee:	4770      	bx	lr
 8015ff0:	2001      	movs	r0, #1
 8015ff2:	700a      	strb	r2, [r1, #0]
 8015ff4:	4770      	bx	lr
	...

08015ff8 <_write_r>:
 8015ff8:	b538      	push	{r3, r4, r5, lr}
 8015ffa:	4604      	mov	r4, r0
 8015ffc:	4608      	mov	r0, r1
 8015ffe:	4611      	mov	r1, r2
 8016000:	2200      	movs	r2, #0
 8016002:	4d05      	ldr	r5, [pc, #20]	; (8016018 <_write_r+0x20>)
 8016004:	602a      	str	r2, [r5, #0]
 8016006:	461a      	mov	r2, r3
 8016008:	f7ec fc87 	bl	800291a <_write>
 801600c:	1c43      	adds	r3, r0, #1
 801600e:	d102      	bne.n	8016016 <_write_r+0x1e>
 8016010:	682b      	ldr	r3, [r5, #0]
 8016012:	b103      	cbz	r3, 8016016 <_write_r+0x1e>
 8016014:	6023      	str	r3, [r4, #0]
 8016016:	bd38      	pop	{r3, r4, r5, pc}
 8016018:	20007fe8 	.word	0x20007fe8

0801601c <__swsetup_r>:
 801601c:	4b32      	ldr	r3, [pc, #200]	; (80160e8 <__swsetup_r+0xcc>)
 801601e:	b570      	push	{r4, r5, r6, lr}
 8016020:	681d      	ldr	r5, [r3, #0]
 8016022:	4606      	mov	r6, r0
 8016024:	460c      	mov	r4, r1
 8016026:	b125      	cbz	r5, 8016032 <__swsetup_r+0x16>
 8016028:	69ab      	ldr	r3, [r5, #24]
 801602a:	b913      	cbnz	r3, 8016032 <__swsetup_r+0x16>
 801602c:	4628      	mov	r0, r5
 801602e:	f7fe fa99 	bl	8014564 <__sinit>
 8016032:	4b2e      	ldr	r3, [pc, #184]	; (80160ec <__swsetup_r+0xd0>)
 8016034:	429c      	cmp	r4, r3
 8016036:	d10f      	bne.n	8016058 <__swsetup_r+0x3c>
 8016038:	686c      	ldr	r4, [r5, #4]
 801603a:	89a3      	ldrh	r3, [r4, #12]
 801603c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016040:	0719      	lsls	r1, r3, #28
 8016042:	d42c      	bmi.n	801609e <__swsetup_r+0x82>
 8016044:	06dd      	lsls	r5, r3, #27
 8016046:	d411      	bmi.n	801606c <__swsetup_r+0x50>
 8016048:	2309      	movs	r3, #9
 801604a:	6033      	str	r3, [r6, #0]
 801604c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016054:	81a3      	strh	r3, [r4, #12]
 8016056:	e03e      	b.n	80160d6 <__swsetup_r+0xba>
 8016058:	4b25      	ldr	r3, [pc, #148]	; (80160f0 <__swsetup_r+0xd4>)
 801605a:	429c      	cmp	r4, r3
 801605c:	d101      	bne.n	8016062 <__swsetup_r+0x46>
 801605e:	68ac      	ldr	r4, [r5, #8]
 8016060:	e7eb      	b.n	801603a <__swsetup_r+0x1e>
 8016062:	4b24      	ldr	r3, [pc, #144]	; (80160f4 <__swsetup_r+0xd8>)
 8016064:	429c      	cmp	r4, r3
 8016066:	bf08      	it	eq
 8016068:	68ec      	ldreq	r4, [r5, #12]
 801606a:	e7e6      	b.n	801603a <__swsetup_r+0x1e>
 801606c:	0758      	lsls	r0, r3, #29
 801606e:	d512      	bpl.n	8016096 <__swsetup_r+0x7a>
 8016070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016072:	b141      	cbz	r1, 8016086 <__swsetup_r+0x6a>
 8016074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016078:	4299      	cmp	r1, r3
 801607a:	d002      	beq.n	8016082 <__swsetup_r+0x66>
 801607c:	4630      	mov	r0, r6
 801607e:	f7ff fb71 	bl	8015764 <_free_r>
 8016082:	2300      	movs	r3, #0
 8016084:	6363      	str	r3, [r4, #52]	; 0x34
 8016086:	89a3      	ldrh	r3, [r4, #12]
 8016088:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801608c:	81a3      	strh	r3, [r4, #12]
 801608e:	2300      	movs	r3, #0
 8016090:	6063      	str	r3, [r4, #4]
 8016092:	6923      	ldr	r3, [r4, #16]
 8016094:	6023      	str	r3, [r4, #0]
 8016096:	89a3      	ldrh	r3, [r4, #12]
 8016098:	f043 0308 	orr.w	r3, r3, #8
 801609c:	81a3      	strh	r3, [r4, #12]
 801609e:	6923      	ldr	r3, [r4, #16]
 80160a0:	b94b      	cbnz	r3, 80160b6 <__swsetup_r+0x9a>
 80160a2:	89a3      	ldrh	r3, [r4, #12]
 80160a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80160a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80160ac:	d003      	beq.n	80160b6 <__swsetup_r+0x9a>
 80160ae:	4621      	mov	r1, r4
 80160b0:	4630      	mov	r0, r6
 80160b2:	f000 f957 	bl	8016364 <__smakebuf_r>
 80160b6:	89a0      	ldrh	r0, [r4, #12]
 80160b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80160bc:	f010 0301 	ands.w	r3, r0, #1
 80160c0:	d00a      	beq.n	80160d8 <__swsetup_r+0xbc>
 80160c2:	2300      	movs	r3, #0
 80160c4:	60a3      	str	r3, [r4, #8]
 80160c6:	6963      	ldr	r3, [r4, #20]
 80160c8:	425b      	negs	r3, r3
 80160ca:	61a3      	str	r3, [r4, #24]
 80160cc:	6923      	ldr	r3, [r4, #16]
 80160ce:	b943      	cbnz	r3, 80160e2 <__swsetup_r+0xc6>
 80160d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80160d4:	d1ba      	bne.n	801604c <__swsetup_r+0x30>
 80160d6:	bd70      	pop	{r4, r5, r6, pc}
 80160d8:	0781      	lsls	r1, r0, #30
 80160da:	bf58      	it	pl
 80160dc:	6963      	ldrpl	r3, [r4, #20]
 80160de:	60a3      	str	r3, [r4, #8]
 80160e0:	e7f4      	b.n	80160cc <__swsetup_r+0xb0>
 80160e2:	2000      	movs	r0, #0
 80160e4:	e7f7      	b.n	80160d6 <__swsetup_r+0xba>
 80160e6:	bf00      	nop
 80160e8:	20000038 	.word	0x20000038
 80160ec:	080188cc 	.word	0x080188cc
 80160f0:	080188ec 	.word	0x080188ec
 80160f4:	080188ac 	.word	0x080188ac

080160f8 <__assert_func>:
 80160f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80160fa:	4614      	mov	r4, r2
 80160fc:	461a      	mov	r2, r3
 80160fe:	4b09      	ldr	r3, [pc, #36]	; (8016124 <__assert_func+0x2c>)
 8016100:	4605      	mov	r5, r0
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	68d8      	ldr	r0, [r3, #12]
 8016106:	b14c      	cbz	r4, 801611c <__assert_func+0x24>
 8016108:	4b07      	ldr	r3, [pc, #28]	; (8016128 <__assert_func+0x30>)
 801610a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801610e:	9100      	str	r1, [sp, #0]
 8016110:	462b      	mov	r3, r5
 8016112:	4906      	ldr	r1, [pc, #24]	; (801612c <__assert_func+0x34>)
 8016114:	f000 f8dc 	bl	80162d0 <fiprintf>
 8016118:	f000 f9cc 	bl	80164b4 <abort>
 801611c:	4b04      	ldr	r3, [pc, #16]	; (8016130 <__assert_func+0x38>)
 801611e:	461c      	mov	r4, r3
 8016120:	e7f3      	b.n	801610a <__assert_func+0x12>
 8016122:	bf00      	nop
 8016124:	20000038 	.word	0x20000038
 8016128:	08018af5 	.word	0x08018af5
 801612c:	08018b02 	.word	0x08018b02
 8016130:	08018b30 	.word	0x08018b30

08016134 <_close_r>:
 8016134:	b538      	push	{r3, r4, r5, lr}
 8016136:	2300      	movs	r3, #0
 8016138:	4d05      	ldr	r5, [pc, #20]	; (8016150 <_close_r+0x1c>)
 801613a:	4604      	mov	r4, r0
 801613c:	4608      	mov	r0, r1
 801613e:	602b      	str	r3, [r5, #0]
 8016140:	f7ec fc07 	bl	8002952 <_close>
 8016144:	1c43      	adds	r3, r0, #1
 8016146:	d102      	bne.n	801614e <_close_r+0x1a>
 8016148:	682b      	ldr	r3, [r5, #0]
 801614a:	b103      	cbz	r3, 801614e <_close_r+0x1a>
 801614c:	6023      	str	r3, [r4, #0]
 801614e:	bd38      	pop	{r3, r4, r5, pc}
 8016150:	20007fe8 	.word	0x20007fe8

08016154 <__sflush_r>:
 8016154:	898a      	ldrh	r2, [r1, #12]
 8016156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016158:	4605      	mov	r5, r0
 801615a:	0710      	lsls	r0, r2, #28
 801615c:	460c      	mov	r4, r1
 801615e:	d457      	bmi.n	8016210 <__sflush_r+0xbc>
 8016160:	684b      	ldr	r3, [r1, #4]
 8016162:	2b00      	cmp	r3, #0
 8016164:	dc04      	bgt.n	8016170 <__sflush_r+0x1c>
 8016166:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016168:	2b00      	cmp	r3, #0
 801616a:	dc01      	bgt.n	8016170 <__sflush_r+0x1c>
 801616c:	2000      	movs	r0, #0
 801616e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016172:	2e00      	cmp	r6, #0
 8016174:	d0fa      	beq.n	801616c <__sflush_r+0x18>
 8016176:	2300      	movs	r3, #0
 8016178:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801617c:	682f      	ldr	r7, [r5, #0]
 801617e:	602b      	str	r3, [r5, #0]
 8016180:	d032      	beq.n	80161e8 <__sflush_r+0x94>
 8016182:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016184:	89a3      	ldrh	r3, [r4, #12]
 8016186:	075a      	lsls	r2, r3, #29
 8016188:	d505      	bpl.n	8016196 <__sflush_r+0x42>
 801618a:	6863      	ldr	r3, [r4, #4]
 801618c:	1ac0      	subs	r0, r0, r3
 801618e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016190:	b10b      	cbz	r3, 8016196 <__sflush_r+0x42>
 8016192:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016194:	1ac0      	subs	r0, r0, r3
 8016196:	2300      	movs	r3, #0
 8016198:	4602      	mov	r2, r0
 801619a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801619c:	4628      	mov	r0, r5
 801619e:	6a21      	ldr	r1, [r4, #32]
 80161a0:	47b0      	blx	r6
 80161a2:	1c43      	adds	r3, r0, #1
 80161a4:	89a3      	ldrh	r3, [r4, #12]
 80161a6:	d106      	bne.n	80161b6 <__sflush_r+0x62>
 80161a8:	6829      	ldr	r1, [r5, #0]
 80161aa:	291d      	cmp	r1, #29
 80161ac:	d82c      	bhi.n	8016208 <__sflush_r+0xb4>
 80161ae:	4a29      	ldr	r2, [pc, #164]	; (8016254 <__sflush_r+0x100>)
 80161b0:	40ca      	lsrs	r2, r1
 80161b2:	07d6      	lsls	r6, r2, #31
 80161b4:	d528      	bpl.n	8016208 <__sflush_r+0xb4>
 80161b6:	2200      	movs	r2, #0
 80161b8:	6062      	str	r2, [r4, #4]
 80161ba:	6922      	ldr	r2, [r4, #16]
 80161bc:	04d9      	lsls	r1, r3, #19
 80161be:	6022      	str	r2, [r4, #0]
 80161c0:	d504      	bpl.n	80161cc <__sflush_r+0x78>
 80161c2:	1c42      	adds	r2, r0, #1
 80161c4:	d101      	bne.n	80161ca <__sflush_r+0x76>
 80161c6:	682b      	ldr	r3, [r5, #0]
 80161c8:	b903      	cbnz	r3, 80161cc <__sflush_r+0x78>
 80161ca:	6560      	str	r0, [r4, #84]	; 0x54
 80161cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80161ce:	602f      	str	r7, [r5, #0]
 80161d0:	2900      	cmp	r1, #0
 80161d2:	d0cb      	beq.n	801616c <__sflush_r+0x18>
 80161d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80161d8:	4299      	cmp	r1, r3
 80161da:	d002      	beq.n	80161e2 <__sflush_r+0x8e>
 80161dc:	4628      	mov	r0, r5
 80161de:	f7ff fac1 	bl	8015764 <_free_r>
 80161e2:	2000      	movs	r0, #0
 80161e4:	6360      	str	r0, [r4, #52]	; 0x34
 80161e6:	e7c2      	b.n	801616e <__sflush_r+0x1a>
 80161e8:	6a21      	ldr	r1, [r4, #32]
 80161ea:	2301      	movs	r3, #1
 80161ec:	4628      	mov	r0, r5
 80161ee:	47b0      	blx	r6
 80161f0:	1c41      	adds	r1, r0, #1
 80161f2:	d1c7      	bne.n	8016184 <__sflush_r+0x30>
 80161f4:	682b      	ldr	r3, [r5, #0]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d0c4      	beq.n	8016184 <__sflush_r+0x30>
 80161fa:	2b1d      	cmp	r3, #29
 80161fc:	d001      	beq.n	8016202 <__sflush_r+0xae>
 80161fe:	2b16      	cmp	r3, #22
 8016200:	d101      	bne.n	8016206 <__sflush_r+0xb2>
 8016202:	602f      	str	r7, [r5, #0]
 8016204:	e7b2      	b.n	801616c <__sflush_r+0x18>
 8016206:	89a3      	ldrh	r3, [r4, #12]
 8016208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801620c:	81a3      	strh	r3, [r4, #12]
 801620e:	e7ae      	b.n	801616e <__sflush_r+0x1a>
 8016210:	690f      	ldr	r7, [r1, #16]
 8016212:	2f00      	cmp	r7, #0
 8016214:	d0aa      	beq.n	801616c <__sflush_r+0x18>
 8016216:	0793      	lsls	r3, r2, #30
 8016218:	bf18      	it	ne
 801621a:	2300      	movne	r3, #0
 801621c:	680e      	ldr	r6, [r1, #0]
 801621e:	bf08      	it	eq
 8016220:	694b      	ldreq	r3, [r1, #20]
 8016222:	1bf6      	subs	r6, r6, r7
 8016224:	600f      	str	r7, [r1, #0]
 8016226:	608b      	str	r3, [r1, #8]
 8016228:	2e00      	cmp	r6, #0
 801622a:	dd9f      	ble.n	801616c <__sflush_r+0x18>
 801622c:	4633      	mov	r3, r6
 801622e:	463a      	mov	r2, r7
 8016230:	4628      	mov	r0, r5
 8016232:	6a21      	ldr	r1, [r4, #32]
 8016234:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8016238:	47e0      	blx	ip
 801623a:	2800      	cmp	r0, #0
 801623c:	dc06      	bgt.n	801624c <__sflush_r+0xf8>
 801623e:	89a3      	ldrh	r3, [r4, #12]
 8016240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016248:	81a3      	strh	r3, [r4, #12]
 801624a:	e790      	b.n	801616e <__sflush_r+0x1a>
 801624c:	4407      	add	r7, r0
 801624e:	1a36      	subs	r6, r6, r0
 8016250:	e7ea      	b.n	8016228 <__sflush_r+0xd4>
 8016252:	bf00      	nop
 8016254:	20400001 	.word	0x20400001

08016258 <_fflush_r>:
 8016258:	b538      	push	{r3, r4, r5, lr}
 801625a:	690b      	ldr	r3, [r1, #16]
 801625c:	4605      	mov	r5, r0
 801625e:	460c      	mov	r4, r1
 8016260:	b913      	cbnz	r3, 8016268 <_fflush_r+0x10>
 8016262:	2500      	movs	r5, #0
 8016264:	4628      	mov	r0, r5
 8016266:	bd38      	pop	{r3, r4, r5, pc}
 8016268:	b118      	cbz	r0, 8016272 <_fflush_r+0x1a>
 801626a:	6983      	ldr	r3, [r0, #24]
 801626c:	b90b      	cbnz	r3, 8016272 <_fflush_r+0x1a>
 801626e:	f7fe f979 	bl	8014564 <__sinit>
 8016272:	4b14      	ldr	r3, [pc, #80]	; (80162c4 <_fflush_r+0x6c>)
 8016274:	429c      	cmp	r4, r3
 8016276:	d11b      	bne.n	80162b0 <_fflush_r+0x58>
 8016278:	686c      	ldr	r4, [r5, #4]
 801627a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d0ef      	beq.n	8016262 <_fflush_r+0xa>
 8016282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016284:	07d0      	lsls	r0, r2, #31
 8016286:	d404      	bmi.n	8016292 <_fflush_r+0x3a>
 8016288:	0599      	lsls	r1, r3, #22
 801628a:	d402      	bmi.n	8016292 <_fflush_r+0x3a>
 801628c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801628e:	f7fe fd72 	bl	8014d76 <__retarget_lock_acquire_recursive>
 8016292:	4628      	mov	r0, r5
 8016294:	4621      	mov	r1, r4
 8016296:	f7ff ff5d 	bl	8016154 <__sflush_r>
 801629a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801629c:	4605      	mov	r5, r0
 801629e:	07da      	lsls	r2, r3, #31
 80162a0:	d4e0      	bmi.n	8016264 <_fflush_r+0xc>
 80162a2:	89a3      	ldrh	r3, [r4, #12]
 80162a4:	059b      	lsls	r3, r3, #22
 80162a6:	d4dd      	bmi.n	8016264 <_fflush_r+0xc>
 80162a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80162aa:	f7fe fd65 	bl	8014d78 <__retarget_lock_release_recursive>
 80162ae:	e7d9      	b.n	8016264 <_fflush_r+0xc>
 80162b0:	4b05      	ldr	r3, [pc, #20]	; (80162c8 <_fflush_r+0x70>)
 80162b2:	429c      	cmp	r4, r3
 80162b4:	d101      	bne.n	80162ba <_fflush_r+0x62>
 80162b6:	68ac      	ldr	r4, [r5, #8]
 80162b8:	e7df      	b.n	801627a <_fflush_r+0x22>
 80162ba:	4b04      	ldr	r3, [pc, #16]	; (80162cc <_fflush_r+0x74>)
 80162bc:	429c      	cmp	r4, r3
 80162be:	bf08      	it	eq
 80162c0:	68ec      	ldreq	r4, [r5, #12]
 80162c2:	e7da      	b.n	801627a <_fflush_r+0x22>
 80162c4:	080188cc 	.word	0x080188cc
 80162c8:	080188ec 	.word	0x080188ec
 80162cc:	080188ac 	.word	0x080188ac

080162d0 <fiprintf>:
 80162d0:	b40e      	push	{r1, r2, r3}
 80162d2:	b503      	push	{r0, r1, lr}
 80162d4:	4601      	mov	r1, r0
 80162d6:	ab03      	add	r3, sp, #12
 80162d8:	4805      	ldr	r0, [pc, #20]	; (80162f0 <fiprintf+0x20>)
 80162da:	f853 2b04 	ldr.w	r2, [r3], #4
 80162de:	6800      	ldr	r0, [r0, #0]
 80162e0:	9301      	str	r3, [sp, #4]
 80162e2:	f7ff fc9f 	bl	8015c24 <_vfiprintf_r>
 80162e6:	b002      	add	sp, #8
 80162e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80162ec:	b003      	add	sp, #12
 80162ee:	4770      	bx	lr
 80162f0:	20000038 	.word	0x20000038

080162f4 <_lseek_r>:
 80162f4:	b538      	push	{r3, r4, r5, lr}
 80162f6:	4604      	mov	r4, r0
 80162f8:	4608      	mov	r0, r1
 80162fa:	4611      	mov	r1, r2
 80162fc:	2200      	movs	r2, #0
 80162fe:	4d05      	ldr	r5, [pc, #20]	; (8016314 <_lseek_r+0x20>)
 8016300:	602a      	str	r2, [r5, #0]
 8016302:	461a      	mov	r2, r3
 8016304:	f7ec fb49 	bl	800299a <_lseek>
 8016308:	1c43      	adds	r3, r0, #1
 801630a:	d102      	bne.n	8016312 <_lseek_r+0x1e>
 801630c:	682b      	ldr	r3, [r5, #0]
 801630e:	b103      	cbz	r3, 8016312 <_lseek_r+0x1e>
 8016310:	6023      	str	r3, [r4, #0]
 8016312:	bd38      	pop	{r3, r4, r5, pc}
 8016314:	20007fe8 	.word	0x20007fe8

08016318 <__swhatbuf_r>:
 8016318:	b570      	push	{r4, r5, r6, lr}
 801631a:	460e      	mov	r6, r1
 801631c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016320:	4614      	mov	r4, r2
 8016322:	2900      	cmp	r1, #0
 8016324:	461d      	mov	r5, r3
 8016326:	b096      	sub	sp, #88	; 0x58
 8016328:	da08      	bge.n	801633c <__swhatbuf_r+0x24>
 801632a:	2200      	movs	r2, #0
 801632c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016330:	602a      	str	r2, [r5, #0]
 8016332:	061a      	lsls	r2, r3, #24
 8016334:	d410      	bmi.n	8016358 <__swhatbuf_r+0x40>
 8016336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801633a:	e00e      	b.n	801635a <__swhatbuf_r+0x42>
 801633c:	466a      	mov	r2, sp
 801633e:	f000 f8c1 	bl	80164c4 <_fstat_r>
 8016342:	2800      	cmp	r0, #0
 8016344:	dbf1      	blt.n	801632a <__swhatbuf_r+0x12>
 8016346:	9a01      	ldr	r2, [sp, #4]
 8016348:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801634c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016350:	425a      	negs	r2, r3
 8016352:	415a      	adcs	r2, r3
 8016354:	602a      	str	r2, [r5, #0]
 8016356:	e7ee      	b.n	8016336 <__swhatbuf_r+0x1e>
 8016358:	2340      	movs	r3, #64	; 0x40
 801635a:	2000      	movs	r0, #0
 801635c:	6023      	str	r3, [r4, #0]
 801635e:	b016      	add	sp, #88	; 0x58
 8016360:	bd70      	pop	{r4, r5, r6, pc}
	...

08016364 <__smakebuf_r>:
 8016364:	898b      	ldrh	r3, [r1, #12]
 8016366:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016368:	079d      	lsls	r5, r3, #30
 801636a:	4606      	mov	r6, r0
 801636c:	460c      	mov	r4, r1
 801636e:	d507      	bpl.n	8016380 <__smakebuf_r+0x1c>
 8016370:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016374:	6023      	str	r3, [r4, #0]
 8016376:	6123      	str	r3, [r4, #16]
 8016378:	2301      	movs	r3, #1
 801637a:	6163      	str	r3, [r4, #20]
 801637c:	b002      	add	sp, #8
 801637e:	bd70      	pop	{r4, r5, r6, pc}
 8016380:	466a      	mov	r2, sp
 8016382:	ab01      	add	r3, sp, #4
 8016384:	f7ff ffc8 	bl	8016318 <__swhatbuf_r>
 8016388:	9900      	ldr	r1, [sp, #0]
 801638a:	4605      	mov	r5, r0
 801638c:	4630      	mov	r0, r6
 801638e:	f7ff fa51 	bl	8015834 <_malloc_r>
 8016392:	b948      	cbnz	r0, 80163a8 <__smakebuf_r+0x44>
 8016394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016398:	059a      	lsls	r2, r3, #22
 801639a:	d4ef      	bmi.n	801637c <__smakebuf_r+0x18>
 801639c:	f023 0303 	bic.w	r3, r3, #3
 80163a0:	f043 0302 	orr.w	r3, r3, #2
 80163a4:	81a3      	strh	r3, [r4, #12]
 80163a6:	e7e3      	b.n	8016370 <__smakebuf_r+0xc>
 80163a8:	4b0d      	ldr	r3, [pc, #52]	; (80163e0 <__smakebuf_r+0x7c>)
 80163aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80163ac:	89a3      	ldrh	r3, [r4, #12]
 80163ae:	6020      	str	r0, [r4, #0]
 80163b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80163b4:	81a3      	strh	r3, [r4, #12]
 80163b6:	9b00      	ldr	r3, [sp, #0]
 80163b8:	6120      	str	r0, [r4, #16]
 80163ba:	6163      	str	r3, [r4, #20]
 80163bc:	9b01      	ldr	r3, [sp, #4]
 80163be:	b15b      	cbz	r3, 80163d8 <__smakebuf_r+0x74>
 80163c0:	4630      	mov	r0, r6
 80163c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80163c6:	f000 f88f 	bl	80164e8 <_isatty_r>
 80163ca:	b128      	cbz	r0, 80163d8 <__smakebuf_r+0x74>
 80163cc:	89a3      	ldrh	r3, [r4, #12]
 80163ce:	f023 0303 	bic.w	r3, r3, #3
 80163d2:	f043 0301 	orr.w	r3, r3, #1
 80163d6:	81a3      	strh	r3, [r4, #12]
 80163d8:	89a0      	ldrh	r0, [r4, #12]
 80163da:	4305      	orrs	r5, r0
 80163dc:	81a5      	strh	r5, [r4, #12]
 80163de:	e7cd      	b.n	801637c <__smakebuf_r+0x18>
 80163e0:	080144fd 	.word	0x080144fd

080163e4 <memmove>:
 80163e4:	4288      	cmp	r0, r1
 80163e6:	b510      	push	{r4, lr}
 80163e8:	eb01 0402 	add.w	r4, r1, r2
 80163ec:	d902      	bls.n	80163f4 <memmove+0x10>
 80163ee:	4284      	cmp	r4, r0
 80163f0:	4623      	mov	r3, r4
 80163f2:	d807      	bhi.n	8016404 <memmove+0x20>
 80163f4:	1e43      	subs	r3, r0, #1
 80163f6:	42a1      	cmp	r1, r4
 80163f8:	d008      	beq.n	801640c <memmove+0x28>
 80163fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80163fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016402:	e7f8      	b.n	80163f6 <memmove+0x12>
 8016404:	4601      	mov	r1, r0
 8016406:	4402      	add	r2, r0
 8016408:	428a      	cmp	r2, r1
 801640a:	d100      	bne.n	801640e <memmove+0x2a>
 801640c:	bd10      	pop	{r4, pc}
 801640e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016412:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016416:	e7f7      	b.n	8016408 <memmove+0x24>

08016418 <__malloc_lock>:
 8016418:	4801      	ldr	r0, [pc, #4]	; (8016420 <__malloc_lock+0x8>)
 801641a:	f7fe bcac 	b.w	8014d76 <__retarget_lock_acquire_recursive>
 801641e:	bf00      	nop
 8016420:	20007fec 	.word	0x20007fec

08016424 <__malloc_unlock>:
 8016424:	4801      	ldr	r0, [pc, #4]	; (801642c <__malloc_unlock+0x8>)
 8016426:	f7fe bca7 	b.w	8014d78 <__retarget_lock_release_recursive>
 801642a:	bf00      	nop
 801642c:	20007fec 	.word	0x20007fec

08016430 <_realloc_r>:
 8016430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016434:	4680      	mov	r8, r0
 8016436:	4614      	mov	r4, r2
 8016438:	460e      	mov	r6, r1
 801643a:	b921      	cbnz	r1, 8016446 <_realloc_r+0x16>
 801643c:	4611      	mov	r1, r2
 801643e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016442:	f7ff b9f7 	b.w	8015834 <_malloc_r>
 8016446:	b92a      	cbnz	r2, 8016454 <_realloc_r+0x24>
 8016448:	f7ff f98c 	bl	8015764 <_free_r>
 801644c:	4625      	mov	r5, r4
 801644e:	4628      	mov	r0, r5
 8016450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016454:	f000 f858 	bl	8016508 <_malloc_usable_size_r>
 8016458:	4284      	cmp	r4, r0
 801645a:	4607      	mov	r7, r0
 801645c:	d802      	bhi.n	8016464 <_realloc_r+0x34>
 801645e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016462:	d812      	bhi.n	801648a <_realloc_r+0x5a>
 8016464:	4621      	mov	r1, r4
 8016466:	4640      	mov	r0, r8
 8016468:	f7ff f9e4 	bl	8015834 <_malloc_r>
 801646c:	4605      	mov	r5, r0
 801646e:	2800      	cmp	r0, #0
 8016470:	d0ed      	beq.n	801644e <_realloc_r+0x1e>
 8016472:	42bc      	cmp	r4, r7
 8016474:	4622      	mov	r2, r4
 8016476:	4631      	mov	r1, r6
 8016478:	bf28      	it	cs
 801647a:	463a      	movcs	r2, r7
 801647c:	f7fb fc3c 	bl	8011cf8 <memcpy>
 8016480:	4631      	mov	r1, r6
 8016482:	4640      	mov	r0, r8
 8016484:	f7ff f96e 	bl	8015764 <_free_r>
 8016488:	e7e1      	b.n	801644e <_realloc_r+0x1e>
 801648a:	4635      	mov	r5, r6
 801648c:	e7df      	b.n	801644e <_realloc_r+0x1e>
	...

08016490 <_read_r>:
 8016490:	b538      	push	{r3, r4, r5, lr}
 8016492:	4604      	mov	r4, r0
 8016494:	4608      	mov	r0, r1
 8016496:	4611      	mov	r1, r2
 8016498:	2200      	movs	r2, #0
 801649a:	4d05      	ldr	r5, [pc, #20]	; (80164b0 <_read_r+0x20>)
 801649c:	602a      	str	r2, [r5, #0]
 801649e:	461a      	mov	r2, r3
 80164a0:	f7ec fa1e 	bl	80028e0 <_read>
 80164a4:	1c43      	adds	r3, r0, #1
 80164a6:	d102      	bne.n	80164ae <_read_r+0x1e>
 80164a8:	682b      	ldr	r3, [r5, #0]
 80164aa:	b103      	cbz	r3, 80164ae <_read_r+0x1e>
 80164ac:	6023      	str	r3, [r4, #0]
 80164ae:	bd38      	pop	{r3, r4, r5, pc}
 80164b0:	20007fe8 	.word	0x20007fe8

080164b4 <abort>:
 80164b4:	2006      	movs	r0, #6
 80164b6:	b508      	push	{r3, lr}
 80164b8:	f000 f856 	bl	8016568 <raise>
 80164bc:	2001      	movs	r0, #1
 80164be:	f7ec fa05 	bl	80028cc <_exit>
	...

080164c4 <_fstat_r>:
 80164c4:	b538      	push	{r3, r4, r5, lr}
 80164c6:	2300      	movs	r3, #0
 80164c8:	4d06      	ldr	r5, [pc, #24]	; (80164e4 <_fstat_r+0x20>)
 80164ca:	4604      	mov	r4, r0
 80164cc:	4608      	mov	r0, r1
 80164ce:	4611      	mov	r1, r2
 80164d0:	602b      	str	r3, [r5, #0]
 80164d2:	f7ec fa49 	bl	8002968 <_fstat>
 80164d6:	1c43      	adds	r3, r0, #1
 80164d8:	d102      	bne.n	80164e0 <_fstat_r+0x1c>
 80164da:	682b      	ldr	r3, [r5, #0]
 80164dc:	b103      	cbz	r3, 80164e0 <_fstat_r+0x1c>
 80164de:	6023      	str	r3, [r4, #0]
 80164e0:	bd38      	pop	{r3, r4, r5, pc}
 80164e2:	bf00      	nop
 80164e4:	20007fe8 	.word	0x20007fe8

080164e8 <_isatty_r>:
 80164e8:	b538      	push	{r3, r4, r5, lr}
 80164ea:	2300      	movs	r3, #0
 80164ec:	4d05      	ldr	r5, [pc, #20]	; (8016504 <_isatty_r+0x1c>)
 80164ee:	4604      	mov	r4, r0
 80164f0:	4608      	mov	r0, r1
 80164f2:	602b      	str	r3, [r5, #0]
 80164f4:	f7ec fa47 	bl	8002986 <_isatty>
 80164f8:	1c43      	adds	r3, r0, #1
 80164fa:	d102      	bne.n	8016502 <_isatty_r+0x1a>
 80164fc:	682b      	ldr	r3, [r5, #0]
 80164fe:	b103      	cbz	r3, 8016502 <_isatty_r+0x1a>
 8016500:	6023      	str	r3, [r4, #0]
 8016502:	bd38      	pop	{r3, r4, r5, pc}
 8016504:	20007fe8 	.word	0x20007fe8

08016508 <_malloc_usable_size_r>:
 8016508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801650c:	1f18      	subs	r0, r3, #4
 801650e:	2b00      	cmp	r3, #0
 8016510:	bfbc      	itt	lt
 8016512:	580b      	ldrlt	r3, [r1, r0]
 8016514:	18c0      	addlt	r0, r0, r3
 8016516:	4770      	bx	lr

08016518 <_raise_r>:
 8016518:	291f      	cmp	r1, #31
 801651a:	b538      	push	{r3, r4, r5, lr}
 801651c:	4604      	mov	r4, r0
 801651e:	460d      	mov	r5, r1
 8016520:	d904      	bls.n	801652c <_raise_r+0x14>
 8016522:	2316      	movs	r3, #22
 8016524:	6003      	str	r3, [r0, #0]
 8016526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801652a:	bd38      	pop	{r3, r4, r5, pc}
 801652c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801652e:	b112      	cbz	r2, 8016536 <_raise_r+0x1e>
 8016530:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016534:	b94b      	cbnz	r3, 801654a <_raise_r+0x32>
 8016536:	4620      	mov	r0, r4
 8016538:	f000 f830 	bl	801659c <_getpid_r>
 801653c:	462a      	mov	r2, r5
 801653e:	4601      	mov	r1, r0
 8016540:	4620      	mov	r0, r4
 8016542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016546:	f000 b817 	b.w	8016578 <_kill_r>
 801654a:	2b01      	cmp	r3, #1
 801654c:	d00a      	beq.n	8016564 <_raise_r+0x4c>
 801654e:	1c59      	adds	r1, r3, #1
 8016550:	d103      	bne.n	801655a <_raise_r+0x42>
 8016552:	2316      	movs	r3, #22
 8016554:	6003      	str	r3, [r0, #0]
 8016556:	2001      	movs	r0, #1
 8016558:	e7e7      	b.n	801652a <_raise_r+0x12>
 801655a:	2400      	movs	r4, #0
 801655c:	4628      	mov	r0, r5
 801655e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016562:	4798      	blx	r3
 8016564:	2000      	movs	r0, #0
 8016566:	e7e0      	b.n	801652a <_raise_r+0x12>

08016568 <raise>:
 8016568:	4b02      	ldr	r3, [pc, #8]	; (8016574 <raise+0xc>)
 801656a:	4601      	mov	r1, r0
 801656c:	6818      	ldr	r0, [r3, #0]
 801656e:	f7ff bfd3 	b.w	8016518 <_raise_r>
 8016572:	bf00      	nop
 8016574:	20000038 	.word	0x20000038

08016578 <_kill_r>:
 8016578:	b538      	push	{r3, r4, r5, lr}
 801657a:	2300      	movs	r3, #0
 801657c:	4d06      	ldr	r5, [pc, #24]	; (8016598 <_kill_r+0x20>)
 801657e:	4604      	mov	r4, r0
 8016580:	4608      	mov	r0, r1
 8016582:	4611      	mov	r1, r2
 8016584:	602b      	str	r3, [r5, #0]
 8016586:	f7ec f98f 	bl	80028a8 <_kill>
 801658a:	1c43      	adds	r3, r0, #1
 801658c:	d102      	bne.n	8016594 <_kill_r+0x1c>
 801658e:	682b      	ldr	r3, [r5, #0]
 8016590:	b103      	cbz	r3, 8016594 <_kill_r+0x1c>
 8016592:	6023      	str	r3, [r4, #0]
 8016594:	bd38      	pop	{r3, r4, r5, pc}
 8016596:	bf00      	nop
 8016598:	20007fe8 	.word	0x20007fe8

0801659c <_getpid_r>:
 801659c:	f7ec b97c 	b.w	8002898 <_getpid>

080165a0 <_init>:
 80165a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165a2:	bf00      	nop
 80165a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165a6:	bc08      	pop	{r3}
 80165a8:	469e      	mov	lr, r3
 80165aa:	4770      	bx	lr

080165ac <_fini>:
 80165ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165ae:	bf00      	nop
 80165b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165b2:	bc08      	pop	{r3}
 80165b4:	469e      	mov	lr, r3
 80165b6:	4770      	bx	lr
