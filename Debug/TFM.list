
TFM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb60  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ea4  0800ece4  0800ece4  0001ece4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b88  08010b88  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08010b88  08010b88  00020b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b90  08010b90  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b90  08010b90  00020b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010b94  08010b94  00020b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08010b98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006a08  2000007c  08010c14  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006a84  08010c14  00036a84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e638  00000000  00000000  000300a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005301  00000000  00000000  0004e6dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  000539e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001488  00000000  00000000  00055000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c7e8  00000000  00000000  00056488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027919  00000000  00000000  00082c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddaac  00000000  00000000  000aa589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188035  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006208  00000000  00000000  00188088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000007c 	.word	0x2000007c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800eccc 	.word	0x0800eccc

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000080 	.word	0x20000080
 80001c0:	0800eccc 	.word	0x0800eccc

080001c4 <strcmp>:
 80001c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001cc:	2a01      	cmp	r2, #1
 80001ce:	bf28      	it	cs
 80001d0:	429a      	cmpcs	r2, r3
 80001d2:	d0f7      	beq.n	80001c4 <strcmp>
 80001d4:	1ad0      	subs	r0, r2, r3
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b976 	b.w	80004dc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14d      	bne.n	80002b4 <__udivmoddi4+0xac>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d968      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b152      	cbz	r2, 800023a <__udivmoddi4+0x32>
 8000224:	fa01 f302 	lsl.w	r3, r1, r2
 8000228:	f1c2 0120 	rsb	r1, r2, #32
 800022c:	fa20 f101 	lsr.w	r1, r0, r1
 8000230:	fa0c fc02 	lsl.w	ip, ip, r2
 8000234:	ea41 0803 	orr.w	r8, r1, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800023e:	fbb8 f7f1 	udiv	r7, r8, r1
 8000242:	fa1f fe8c 	uxth.w	lr, ip
 8000246:	fb01 8817 	mls	r8, r1, r7, r8
 800024a:	fb07 f00e 	mul.w	r0, r7, lr
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	4298      	cmp	r0, r3
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x66>
 8000258:	eb1c 0303 	adds.w	r3, ip, r3
 800025c:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000260:	f080 811e 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000264:	4298      	cmp	r0, r3
 8000266:	f240 811b 	bls.w	80004a0 <__udivmoddi4+0x298>
 800026a:	3f02      	subs	r7, #2
 800026c:	4463      	add	r3, ip
 800026e:	1a1b      	subs	r3, r3, r0
 8000270:	fbb3 f0f1 	udiv	r0, r3, r1
 8000274:	fb01 3310 	mls	r3, r1, r0, r3
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	b2a4      	uxth	r4, r4
 800027e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000282:	45a6      	cmp	lr, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8109 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8106 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	2100      	movs	r1, #0
 800029e:	eba4 040e 	sub.w	r4, r4, lr
 80002a2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa8>
 80002a8:	2300      	movs	r3, #0
 80002aa:	40d4      	lsrs	r4, r2
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d908      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	f000 80ee 	beq.w	800049a <__udivmoddi4+0x292>
 80002be:	2100      	movs	r1, #0
 80002c0:	e9c6 0500 	strd	r0, r5, [r6]
 80002c4:	4608      	mov	r0, r1
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fc 	bhi.w	80004d4 <__udivmoddi4+0x2cc>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0303 	sbc.w	r3, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e2      	beq.n	80002b0 <__udivmoddi4+0xa8>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7df      	b.n	80002b0 <__udivmoddi4+0xa8>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8091 	bne.w	8000420 <__udivmoddi4+0x218>
 80002fe:	eba1 000c 	sub.w	r0, r1, ip
 8000302:	2101      	movs	r1, #1
 8000304:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000308:	fa1f fe8c 	uxth.w	lr, ip
 800030c:	fbb0 f3f7 	udiv	r3, r0, r7
 8000310:	fb07 0013 	mls	r0, r7, r3, r0
 8000314:	0c25      	lsrs	r5, r4, #16
 8000316:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	42a8      	cmp	r0, r5
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0505 	adds.w	r5, ip, r5
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	42a8      	cmp	r0, r5
 800032e:	f200 80ce 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 8000332:	4643      	mov	r3, r8
 8000334:	1a2d      	subs	r5, r5, r0
 8000336:	fbb5 f0f7 	udiv	r0, r5, r7
 800033a:	fb07 5510 	mls	r5, r7, r0, r5
 800033e:	fb0e fe00 	mul.w	lr, lr, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80b6 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 800035c:	4628      	mov	r0, r5
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79e      	b.n	80002a6 <__udivmoddi4+0x9e>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa25 fa07 	lsr.w	sl, r5, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fbba f8f9 	udiv	r8, sl, r9
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	fb09 aa18 	mls	sl, r9, r8, sl
 800038a:	408d      	lsls	r5, r1
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	431d      	orrs	r5, r3
 8000392:	fa00 f301 	lsl.w	r3, r0, r1
 8000396:	fb08 f00e 	mul.w	r0, r8, lr
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003a0:	42a0      	cmp	r0, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	42a0      	cmp	r0, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1a24      	subs	r4, r4, r0
 80003c2:	fbb4 f0f9 	udiv	r0, r4, r9
 80003c6:	fb09 4410 	mls	r4, r9, r0, r4
 80003ca:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9502 	umull	r9, r5, r0, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2d0>
 8000404:	ebb3 0208 	subs.w	r2, r3, r8
 8000408:	eb64 040e 	sbc.w	r4, r4, lr
 800040c:	fa22 f301 	lsr.w	r3, r2, r1
 8000410:	fa04 f707 	lsl.w	r7, r4, r7
 8000414:	431f      	orrs	r7, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c6 7400 	strd	r7, r4, [r6]
 800041c:	2100      	movs	r1, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa8>
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	f1c2 0120 	rsb	r1, r2, #32
 8000428:	fa25 f301 	lsr.w	r3, r5, r1
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa20 f101 	lsr.w	r1, r0, r1
 8000434:	4095      	lsls	r5, r2
 8000436:	430d      	orrs	r5, r1
 8000438:	fbb3 f1f7 	udiv	r1, r3, r7
 800043c:	fb07 3311 	mls	r3, r7, r1, r3
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	0c28      	lsrs	r0, r5, #16
 8000446:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044a:	fb01 f30e 	mul.w	r3, r1, lr
 800044e:	4283      	cmp	r3, r0
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0000 	adds.w	r0, ip, r0
 800045a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	4283      	cmp	r3, r0
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3902      	subs	r1, #2
 8000466:	4460      	add	r0, ip
 8000468:	1ac0      	subs	r0, r0, r3
 800046a:	fbb0 f3f7 	udiv	r3, r0, r7
 800046e:	fb07 0013 	mls	r0, r7, r3, r0
 8000472:	b2ad      	uxth	r5, r5
 8000474:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000478:	fb03 f00e 	mul.w	r0, r3, lr
 800047c:	42a8      	cmp	r0, r5
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0505 	adds.w	r5, ip, r5
 8000484:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	42a8      	cmp	r0, r5
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3b02      	subs	r3, #2
 8000490:	4465      	add	r5, ip
 8000492:	1a28      	subs	r0, r5, r0
 8000494:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e707      	b.n	80002b0 <__udivmoddi4+0xa8>
 80004a0:	462f      	mov	r7, r5
 80004a2:	e6e4      	b.n	800026e <__udivmoddi4+0x66>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f9      	b.n	800029c <__udivmoddi4+0x94>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4643      	mov	r3, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4628      	mov	r0, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4641      	mov	r1, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	4464      	add	r4, ip
 80004ca:	3802      	subs	r0, #2
 80004cc:	e747      	b.n	800035e <__udivmoddi4+0x156>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	4465      	add	r5, ip
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x12c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e706      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d8:	4631      	mov	r1, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa8>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <WG_Initialize>:

static errorWaveGenerator WG_Initialize(char *bufOut, uint16_t *lenOut,
		void *cb_arg);

static errorWaveGenerator WG_Initialize(char *bufOut, uint16_t *lenOut,
		void *cb_arg) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08c      	sub	sp, #48	; 0x30
 80004e4:	af02      	add	r7, sp, #8
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]

	ptrHWparams ptrHWp;
	memcpy(&ptrHWp, cb_arg, sizeof(ptrHWp));
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	2208      	movs	r2, #8
 80004f2:	6879      	ldr	r1, [r7, #4]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f00d fa71 	bl	800d9dc <memcpy>

	HAL_DAC_SetValue(ptrHWp.ptrHdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000);
 80004fa:	69b8      	ldr	r0, [r7, #24]
 80004fc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000500:	2200      	movs	r2, #0
 8000502:	2100      	movs	r1, #0
 8000504:	f001 f86e 	bl	80015e4 <HAL_DAC_SetValue>
	HAL_DAC_Start(ptrHWp.ptrHdac, DAC_CHANNEL_1);
 8000508:	69bb      	ldr	r3, [r7, #24]
 800050a:	2100      	movs	r1, #0
 800050c:	4618      	mov	r0, r3
 800050e:	f001 f818 	bl	8001542 <HAL_DAC_Start>

	//Si tiene ID unica se la metes sino pues na
	//Igual con un get ip puedes saberla que tiene, lo dudo

	uint32_t (*uID_1) = (uint32_t*) 0x1FFF7A10;
 8000512:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <WG_Initialize+0x68>)
 8000514:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t (*uID_2) = (uint32_t*) 0x1FFF7A14;
 8000516:	4b0d      	ldr	r3, [pc, #52]	; (800054c <WG_Initialize+0x6c>)
 8000518:	623b      	str	r3, [r7, #32]
	uint32_t (*uID_3) = (uint32_t*) 0x1FFF7A18;
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <WG_Initialize+0x70>)
 800051c:	61fb      	str	r3, [r7, #28]

	*lenOut = sprintf(bufOut, "WG: ID=%X%X%X", *uID_3, *uID_2, *uID_1);
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	6a3b      	ldr	r3, [r7, #32]
 8000524:	6819      	ldr	r1, [r3, #0]
 8000526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	460b      	mov	r3, r1
 800052e:	4909      	ldr	r1, [pc, #36]	; (8000554 <WG_Initialize+0x74>)
 8000530:	68f8      	ldr	r0, [r7, #12]
 8000532:	f00d fa81 	bl	800da38 <siprintf>
 8000536:	4603      	mov	r3, r0
 8000538:	b29a      	uxth	r2, r3
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	801a      	strh	r2, [r3, #0]

	return NO_ERROR;
 800053e:	2300      	movs	r3, #0
}
 8000540:	4618      	mov	r0, r3
 8000542:	3728      	adds	r7, #40	; 0x28
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	1fff7a10 	.word	0x1fff7a10
 800054c:	1fff7a14 	.word	0x1fff7a14
 8000550:	1fff7a18 	.word	0x1fff7a18
 8000554:	0800ece4 	.word	0x0800ece4

08000558 <WG_Process_Data>:

void WG_Process_Data(char *bufIn, uint16_t lenIn, char *bufOut,
		uint16_t *lenOut, void *cb_arg) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	607a      	str	r2, [r7, #4]
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	460b      	mov	r3, r1
 8000566:	817b      	strh	r3, [r7, #10]

	/* Check connect and HW function*/
	if (strcmp(bufIn + 4, "*IDN?") == 0) {
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	3304      	adds	r3, #4
 800056c:	490c      	ldr	r1, [pc, #48]	; (80005a0 <WG_Process_Data+0x48>)
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff fe28 	bl	80001c4 <strcmp>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d105      	bne.n	8000586 <WG_Process_Data+0x2e>
		WG_Initialize(bufOut, lenOut, cb_arg);
 800057a:	69ba      	ldr	r2, [r7, #24]
 800057c:	6839      	ldr	r1, [r7, #0]
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f7ff ffae 	bl	80004e0 <WG_Initialize>
	/* Default case */
	else {
		*lenOut = sprintf(bufOut, "No valid command has sent");
	}

}
 8000584:	e007      	b.n	8000596 <WG_Process_Data+0x3e>
		*lenOut = sprintf(bufOut, "No valid command has sent");
 8000586:	4907      	ldr	r1, [pc, #28]	; (80005a4 <WG_Process_Data+0x4c>)
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f00d fa55 	bl	800da38 <siprintf>
 800058e:	4603      	mov	r3, r0
 8000590:	b29a      	uxth	r2, r3
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	801a      	strh	r2, [r3, #0]
}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	0800ecf4 	.word	0x0800ecf4
 80005a4:	0800ecfc 	.word	0x0800ecfc

080005a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ae:	f000 fbfb 	bl	8000da8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005b2:	f000 f817 	bl	80005e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005b6:	f000 f8d9 	bl	800076c <MX_GPIO_Init>
	MX_LWIP_Init();
 80005ba:	f003 fb1f 	bl	8003bfc <MX_LWIP_Init>
	MX_ADC1_Init();
 80005be:	f000 f859 	bl	8000674 <MX_ADC1_Init>
	MX_DAC_Init();
 80005c2:	f000 f8a9 	bl	8000718 <MX_DAC_Init>
	/* USER CODE BEGIN 2 */

	ptrHWparams ptrHWp;

	ptrHWp.ptrHadc1 = &hadc1;
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <main+0x34>)
 80005c8:	603b      	str	r3, [r7, #0]
	ptrHWp.ptrHdac = &hdac;
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <main+0x38>)
 80005cc:	607b      	str	r3, [r7, #4]

	udpServer_init((void*)&ptrHWp);
 80005ce:	463b      	mov	r3, r7
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 faa9 	bl	8003b28 <udpServer_init>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		MX_LWIP_Process();
 80005d6:	f003 fc43 	bl	8003e60 <MX_LWIP_Process>
 80005da:	e7fc      	b.n	80005d6 <main+0x2e>
 80005dc:	20000098 	.word	0x20000098
 80005e0:	200000e0 	.word	0x200000e0

080005e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b092      	sub	sp, #72	; 0x48
 80005e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f00d fa00 	bl	800d9f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000606:	2302      	movs	r3, #2
 8000608:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060a:	2301      	movs	r3, #1
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060e:	2310      	movs	r3, #16
 8000610:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000616:	2300      	movs	r3, #0
 8000618:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = 16;
 800061a:	2310      	movs	r3, #16
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 240;
 800061e:	23f0      	movs	r3, #240	; 0xf0
 8000620:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000626:	2304      	movs	r3, #4
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800062a:	f107 0318 	add.w	r3, r7, #24
 800062e:	4618      	mov	r0, r3
 8000630:	f002 faf8 	bl	8002c24 <HAL_RCC_OscConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x5a>
		Error_Handler();
 800063a:	f000 f989 	bl	8000950 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000642:	2302      	movs	r3, #2
 8000644:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000654:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2103      	movs	r1, #3
 800065a:	4618      	mov	r0, r3
 800065c:	f002 fd30 	bl	80030c0 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x86>
		Error_Handler();
 8000666:	f000 f973 	bl	8000950 <Error_Handler>
	}
}
 800066a:	bf00      	nop
 800066c:	3748      	adds	r7, #72	; 0x48
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000686:	4b21      	ldr	r3, [pc, #132]	; (800070c <MX_ADC1_Init+0x98>)
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <MX_ADC1_Init+0x9c>)
 800068a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000698:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_ADC1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800069e:	4b1b      	ldr	r3, [pc, #108]	; (800070c <MX_ADC1_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_ADC1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_ADC1_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_ADC1_Init+0x98>)
 80006b4:	4a17      	ldr	r2, [pc, #92]	; (8000714 <MX_ADC1_Init+0xa0>)
 80006b6:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_ADC1_Init+0x98>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_ADC1_Init+0x98>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_ADC1_Init+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_ADC1_Init+0x98>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80006d2:	480e      	ldr	r0, [pc, #56]	; (800070c <MX_ADC1_Init+0x98>)
 80006d4:	f000 fbca 	bl	8000e6c <HAL_ADC_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC1_Init+0x6e>
		Error_Handler();
 80006de:	f000 f937 	bl	8000950 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80006e2:	2305      	movs	r3, #5
 80006e4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80006ee:	463b      	mov	r3, r7
 80006f0:	4619      	mov	r1, r3
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <MX_ADC1_Init+0x98>)
 80006f4:	f000 fbfe 	bl	8000ef4 <HAL_ADC_ConfigChannel>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC1_Init+0x8e>
		Error_Handler();
 80006fe:	f000 f927 	bl	8000950 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000098 	.word	0x20000098
 8000710:	40012000 	.word	0x40012000
 8000714:	0f000001 	.word	0x0f000001

08000718 <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]

	/* USER CODE END DAC_Init 1 */

	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_DAC_Init+0x4c>)
 8000728:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <MX_DAC_Init+0x50>)
 800072a:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_DAC_Init+0x4c>)
 800072e:	f000 fee6 	bl	80014fe <HAL_DAC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_DAC_Init+0x24>
		Error_Handler();
 8000738:	f000 f90a 	bl	8000950 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800073c:	2300      	movs	r3, #0
 800073e:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	4619      	mov	r1, r3
 800074a:	4806      	ldr	r0, [pc, #24]	; (8000764 <MX_DAC_Init+0x4c>)
 800074c:	f000 ff6e 	bl	800162c <HAL_DAC_ConfigChannel>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_DAC_Init+0x42>
		Error_Handler();
 8000756:	f000 f8fb 	bl	8000950 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000e0 	.word	0x200000e0
 8000768:	40007400 	.word	0x40007400

0800076c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	; 0x30
 8000770:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	4b63      	ldr	r3, [pc, #396]	; (8000914 <MX_GPIO_Init+0x1a8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a62      	ldr	r2, [pc, #392]	; (8000914 <MX_GPIO_Init+0x1a8>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b60      	ldr	r3, [pc, #384]	; (8000914 <MX_GPIO_Init+0x1a8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	4b5c      	ldr	r3, [pc, #368]	; (8000914 <MX_GPIO_Init+0x1a8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a5b      	ldr	r2, [pc, #364]	; (8000914 <MX_GPIO_Init+0x1a8>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b59      	ldr	r3, [pc, #356]	; (8000914 <MX_GPIO_Init+0x1a8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b55      	ldr	r3, [pc, #340]	; (8000914 <MX_GPIO_Init+0x1a8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a54      	ldr	r2, [pc, #336]	; (8000914 <MX_GPIO_Init+0x1a8>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b52      	ldr	r3, [pc, #328]	; (8000914 <MX_GPIO_Init+0x1a8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b4e      	ldr	r3, [pc, #312]	; (8000914 <MX_GPIO_Init+0x1a8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a4d      	ldr	r2, [pc, #308]	; (8000914 <MX_GPIO_Init+0x1a8>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b4b      	ldr	r3, [pc, #300]	; (8000914 <MX_GPIO_Init+0x1a8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b47      	ldr	r3, [pc, #284]	; (8000914 <MX_GPIO_Init+0x1a8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a46      	ldr	r2, [pc, #280]	; (8000914 <MX_GPIO_Init+0x1a8>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b44      	ldr	r3, [pc, #272]	; (8000914 <MX_GPIO_Init+0x1a8>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b40      	ldr	r3, [pc, #256]	; (8000914 <MX_GPIO_Init+0x1a8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a3f      	ldr	r2, [pc, #252]	; (8000914 <MX_GPIO_Init+0x1a8>)
 8000818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b3d      	ldr	r3, [pc, #244]	; (8000914 <MX_GPIO_Init+0x1a8>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000830:	4839      	ldr	r0, [pc, #228]	; (8000918 <MX_GPIO_Init+0x1ac>)
 8000832:	f002 f9df 	bl	8002bf4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000836:	2200      	movs	r2, #0
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	4838      	ldr	r0, [pc, #224]	; (800091c <MX_GPIO_Init+0x1b0>)
 800083c:	f002 f9da 	bl	8002bf4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000844:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000846:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800084a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4832      	ldr	r0, [pc, #200]	; (8000920 <MX_GPIO_Init+0x1b4>)
 8000858:	f002 f82e 	bl	80028b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 800085c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000860:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	4828      	ldr	r0, [pc, #160]	; (8000918 <MX_GPIO_Init+0x1ac>)
 8000876:	f002 f81f 	bl	80028b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
	GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 800087a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800087e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800088c:	2307      	movs	r3, #7
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4823      	ldr	r0, [pc, #140]	; (8000924 <MX_GPIO_Init+0x1b8>)
 8000898:	f002 f80e 	bl	80028b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800089c:	2340      	movs	r3, #64	; 0x40
 800089e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	481a      	ldr	r0, [pc, #104]	; (800091c <MX_GPIO_Init+0x1b0>)
 80008b4:	f002 f800 	bl	80028b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4814      	ldr	r0, [pc, #80]	; (800091c <MX_GPIO_Init+0x1b0>)
 80008cc:	f001 fff4 	bl	80028b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 80008d0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008d4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008e2:	230a      	movs	r3, #10
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	480e      	ldr	r0, [pc, #56]	; (8000928 <MX_GPIO_Init+0x1bc>)
 80008ee:	f001 ffe3 	bl	80028b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4808      	ldr	r0, [pc, #32]	; (8000928 <MX_GPIO_Init+0x1bc>)
 8000908:	f001 ffd6 	bl	80028b8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800090c:	bf00      	nop
 800090e:	3730      	adds	r7, #48	; 0x30
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40020400 	.word	0x40020400
 800091c:	40021800 	.word	0x40021800
 8000920:	40020800 	.word	0x40020800
 8000924:	40020c00 	.word	0x40020c00
 8000928:	40020000 	.word	0x40020000

0800092c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d101      	bne.n	8000942 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800093e:	f000 fa55 	bl	8000dec <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40010000 	.word	0x40010000

08000950 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_MspInit+0x48>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_MspInit+0x48>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_MspInit+0x48>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_MspInit+0x48>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_MspInit+0x48>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_MspInit+0x48>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <HAL_ADC_MspInit+0x7c>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d127      	bne.n	8000a1a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <HAL_ADC_MspInit+0x80>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <HAL_ADC_MspInit+0x80>)
 80009d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <HAL_ADC_MspInit+0x80>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_ADC_MspInit+0x80>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_ADC_MspInit+0x80>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_ADC_MspInit+0x80>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a02:	2320      	movs	r3, #32
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a06:	2303      	movs	r3, #3
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_ADC_MspInit+0x84>)
 8000a16:	f001 ff4f 	bl	80028b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	; 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40012000 	.word	0x40012000
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000

08000a30 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a17      	ldr	r2, [pc, #92]	; (8000aac <HAL_DAC_MspInit+0x7c>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d127      	bne.n	8000aa2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <HAL_DAC_MspInit+0x80>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a15      	ldr	r2, [pc, #84]	; (8000ab0 <HAL_DAC_MspInit+0x80>)
 8000a5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <HAL_DAC_MspInit+0x80>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <HAL_DAC_MspInit+0x80>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_DAC_MspInit+0x80>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_DAC_MspInit+0x80>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <HAL_DAC_MspInit+0x84>)
 8000a9e:	f001 ff0b 	bl	80028b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	; 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40007400 	.word	0x40007400
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	; 0x30
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <HAL_InitTick+0xd4>)
 8000ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad0:	4a2e      	ldr	r2, [pc, #184]	; (8000b8c <HAL_InitTick+0xd4>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad8:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <HAL_InitTick+0xd4>)
 8000ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae4:	f107 020c 	add.w	r2, r7, #12
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f002 fd0a 	bl	8003508 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000af4:	f002 fce6 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 8000af8:	4603      	mov	r3, r0
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b00:	4a23      	ldr	r2, [pc, #140]	; (8000b90 <HAL_InitTick+0xd8>)
 8000b02:	fba2 2303 	umull	r2, r3, r2, r3
 8000b06:	0c9b      	lsrs	r3, r3, #18
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b0c:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <HAL_InitTick+0xdc>)
 8000b0e:	4a22      	ldr	r2, [pc, #136]	; (8000b98 <HAL_InitTick+0xe0>)
 8000b10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <HAL_InitTick+0xdc>)
 8000b14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b18:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b1a:	4a1e      	ldr	r2, [pc, #120]	; (8000b94 <HAL_InitTick+0xdc>)
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b20:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_InitTick+0xdc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <HAL_InitTick+0xdc>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_InitTick+0xdc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b32:	4818      	ldr	r0, [pc, #96]	; (8000b94 <HAL_InitTick+0xdc>)
 8000b34:	f002 fd18 	bl	8003568 <HAL_TIM_Base_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d11b      	bne.n	8000b7e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b46:	4813      	ldr	r0, [pc, #76]	; (8000b94 <HAL_InitTick+0xdc>)
 8000b48:	f002 fd66 	bl	8003618 <HAL_TIM_Base_Start_IT>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d111      	bne.n	8000b7e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b5a:	2019      	movs	r0, #25
 8000b5c:	f000 fcc1 	bl	80014e2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b0f      	cmp	r3, #15
 8000b64:	d808      	bhi.n	8000b78 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b66:	2200      	movs	r2, #0
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	2019      	movs	r0, #25
 8000b6c:	f000 fc9d 	bl	80014aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_InitTick+0xe4>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e002      	b.n	8000b7e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3730      	adds	r7, #48	; 0x30
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	431bde83 	.word	0x431bde83
 8000b94:	200000f4 	.word	0x200000f4
 8000b98:	40010000 	.word	0x40010000
 8000b9c:	20000008 	.word	0x20000008

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
	...

08000bf0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bf6:	f002 fd7d 	bl	80036f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000f4 	.word	0x200000f4

08000c04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	e00a      	b.n	8000c2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c16:	f3af 8000 	nop.w
 8000c1a:	4601      	mov	r1, r0
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	60ba      	str	r2, [r7, #8]
 8000c22:	b2ca      	uxtb	r2, r1
 8000c24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbf0      	blt.n	8000c16 <_read+0x12>
  }

  return len;
 8000c34:	687b      	ldr	r3, [r7, #4]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e009      	b.n	8000c64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf1      	blt.n	8000c50 <_write+0x12>
  }
  return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_close>:

int _close(int file)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c9c:	605a      	str	r2, [r3, #4]
  return 0;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr

08000caa <_isatty>:

int _isatty(int file)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr

08000cbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b085      	sub	sp, #20
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
	...

08000cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b087      	sub	sp, #28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <_sbrk+0x5c>)
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <_sbrk+0x60>)
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <_sbrk+0x64>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <_sbrk+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d205      	bcs.n	8000d14 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <_sbrk+0x6c>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a06      	ldr	r2, [pc, #24]	; (8000d3c <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	371c      	adds	r7, #28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20020000 	.word	0x20020000
 8000d38:	00000400 	.word	0x00000400
 8000d3c:	2000013c 	.word	0x2000013c
 8000d40:	20006a88 	.word	0x20006a88
 8000d44:	20006a74 	.word	0x20006a74

08000d48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d5a:	490e      	ldr	r1, [pc, #56]	; (8000d94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d70:	4c0b      	ldr	r4, [pc, #44]	; (8000da0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d7e:	f7ff ffe3 	bl	8000d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d82:	f00c fdf7 	bl	800d974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d86:	f7ff fc0f 	bl	80005a8 <main>
  bx  lr
 8000d8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d98:	08010b98 	.word	0x08010b98
  ldr r2, =_sbss
 8000d9c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000da0:	20006a84 	.word	0x20006a84

08000da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <HAL_Init+0x40>)
 8000db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_Init+0x40>)
 8000dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <HAL_Init+0x40>)
 8000dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 fb5f 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd6:	200f      	movs	r0, #15
 8000dd8:	f7ff fe6e 	bl	8000ab8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000ddc:	f7ff fdbe 	bl	800095c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023c00 	.word	0x40023c00

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_IncTick+0x1c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_IncTick+0x20>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <HAL_IncTick+0x20>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	2000000c 	.word	0x2000000c
 8000e0c:	20000140 	.word	0x20000140

08000e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b02      	ldr	r3, [pc, #8]	; (8000e20 <HAL_GetTick+0x10>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	20000140 	.word	0x20000140

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff fff0 	bl	8000e10 <HAL_GetTick>
 8000e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e3c:	d005      	beq.n	8000e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_Delay+0x44>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e4a:	bf00      	nop
 8000e4c:	f7ff ffe0 	bl	8000e10 <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d8f7      	bhi.n	8000e4c <HAL_Delay+0x28>
  {
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	2000000c 	.word	0x2000000c

08000e6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e033      	b.n	8000eea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d109      	bne.n	8000e9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff fd8c 	bl	80009a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f003 0310 	and.w	r3, r3, #16
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d118      	bne.n	8000edc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000eb2:	f023 0302 	bic.w	r3, r3, #2
 8000eb6:	f043 0202 	orr.w	r2, r3, #2
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 f938 	bl	8001134 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f023 0303 	bic.w	r3, r3, #3
 8000ed2:	f043 0201 	orr.w	r2, r3, #1
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	641a      	str	r2, [r3, #64]	; 0x40
 8000eda:	e001      	b.n	8000ee0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d101      	bne.n	8000f10 <HAL_ADC_ConfigChannel+0x1c>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	e103      	b.n	8001118 <HAL_ADC_ConfigChannel+0x224>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b09      	cmp	r3, #9
 8000f1e:	d925      	bls.n	8000f6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68d9      	ldr	r1, [r3, #12]
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	3b1e      	subs	r3, #30
 8000f36:	2207      	movs	r2, #7
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43da      	mvns	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	400a      	ands	r2, r1
 8000f44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68d9      	ldr	r1, [r3, #12]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	4603      	mov	r3, r0
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4403      	add	r3, r0
 8000f5e:	3b1e      	subs	r3, #30
 8000f60:	409a      	lsls	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	e022      	b.n	8000fb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6919      	ldr	r1, [r3, #16]
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	4413      	add	r3, r2
 8000f80:	2207      	movs	r2, #7
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	400a      	ands	r2, r1
 8000f8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6919      	ldr	r1, [r3, #16]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4403      	add	r3, r0
 8000fa8:	409a      	lsls	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d824      	bhi.n	8001004 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	3b05      	subs	r3, #5
 8000fcc:	221f      	movs	r2, #31
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	400a      	ands	r2, r1
 8000fda:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	3b05      	subs	r3, #5
 8000ff6:	fa00 f203 	lsl.w	r2, r0, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	430a      	orrs	r2, r1
 8001000:	635a      	str	r2, [r3, #52]	; 0x34
 8001002:	e04c      	b.n	800109e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b0c      	cmp	r3, #12
 800100a:	d824      	bhi.n	8001056 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	3b23      	subs	r3, #35	; 0x23
 800101e:	221f      	movs	r2, #31
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43da      	mvns	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	400a      	ands	r2, r1
 800102c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	b29b      	uxth	r3, r3
 800103a:	4618      	mov	r0, r3
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	3b23      	subs	r3, #35	; 0x23
 8001048:	fa00 f203 	lsl.w	r2, r0, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	430a      	orrs	r2, r1
 8001052:	631a      	str	r2, [r3, #48]	; 0x30
 8001054:	e023      	b.n	800109e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	3b41      	subs	r3, #65	; 0x41
 8001068:	221f      	movs	r2, #31
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	400a      	ands	r2, r1
 8001076:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	b29b      	uxth	r3, r3
 8001084:	4618      	mov	r0, r3
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	3b41      	subs	r3, #65	; 0x41
 8001092:	fa00 f203 	lsl.w	r2, r0, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	430a      	orrs	r2, r1
 800109c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a20      	ldr	r2, [pc, #128]	; (8001124 <HAL_ADC_ConfigChannel+0x230>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d109      	bne.n	80010bc <HAL_ADC_ConfigChannel+0x1c8>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b12      	cmp	r3, #18
 80010ae:	d105      	bne.n	80010bc <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <HAL_ADC_ConfigChannel+0x234>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <HAL_ADC_ConfigChannel+0x234>)
 80010b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ba:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a18      	ldr	r2, [pc, #96]	; (8001124 <HAL_ADC_ConfigChannel+0x230>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d123      	bne.n	800110e <HAL_ADC_ConfigChannel+0x21a>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b10      	cmp	r3, #16
 80010cc:	d003      	beq.n	80010d6 <HAL_ADC_ConfigChannel+0x1e2>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b11      	cmp	r3, #17
 80010d4:	d11b      	bne.n	800110e <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_ADC_ConfigChannel+0x234>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	4a13      	ldr	r2, [pc, #76]	; (8001128 <HAL_ADC_ConfigChannel+0x234>)
 80010dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010e0:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b10      	cmp	r3, #16
 80010e8:	d111      	bne.n	800110e <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <HAL_ADC_ConfigChannel+0x238>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_ADC_ConfigChannel+0x23c>)
 80010f0:	fba2 2303 	umull	r2, r3, r2, r3
 80010f4:	0c9a      	lsrs	r2, r3, #18
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8001100:	e002      	b.n	8001108 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	3b01      	subs	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f9      	bne.n	8001102 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40012000 	.word	0x40012000
 8001128:	40012300 	.word	0x40012300
 800112c:	20000004 	.word	0x20000004
 8001130:	431bde83 	.word	0x431bde83

08001134 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800113c:	4b7e      	ldr	r3, [pc, #504]	; (8001338 <ADC_Init+0x204>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a7d      	ldr	r2, [pc, #500]	; (8001338 <ADC_Init+0x204>)
 8001142:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001146:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001148:	4b7b      	ldr	r3, [pc, #492]	; (8001338 <ADC_Init+0x204>)
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	4979      	ldr	r1, [pc, #484]	; (8001338 <ADC_Init+0x204>)
 8001152:	4313      	orrs	r3, r2
 8001154:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001164:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6859      	ldr	r1, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	021a      	lsls	r2, r3, #8
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	430a      	orrs	r2, r1
 8001178:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001188:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6859      	ldr	r1, [r3, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	430a      	orrs	r2, r1
 800119a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6899      	ldr	r1, [r3, #8]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c2:	4a5e      	ldr	r2, [pc, #376]	; (800133c <ADC_Init+0x208>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d022      	beq.n	800120e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6899      	ldr	r1, [r3, #8]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6899      	ldr	r1, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	e00f      	b.n	800122e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800121c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800122c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 0202 	bic.w	r2, r2, #2
 800123c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6899      	ldr	r1, [r3, #8]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7e1b      	ldrb	r3, [r3, #24]
 8001248:	005a      	lsls	r2, r3, #1
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d027      	beq.n	80012ac <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800126a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800127a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	3b01      	subs	r3, #1
 8001282:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001286:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	fa92 f2a2 	rbit	r2, r2
 800128e:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	fab2 f282 	clz	r2, r2
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	fa03 f102 	lsl.w	r1, r3, r2
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	e007      	b.n	80012bc <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	051a      	lsls	r2, r3, #20
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6899      	ldr	r1, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012fe:	025a      	lsls	r2, r3, #9
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001316:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6899      	ldr	r1, [r3, #8]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	029a      	lsls	r2, r3, #10
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	609a      	str	r2, [r3, #8]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40012300 	.word	0x40012300
 800133c:	0f000001 	.word	0x0f000001

08001340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001372:	4a04      	ldr	r2, [pc, #16]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60d3      	str	r3, [r2, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db0b      	blt.n	80013ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	f003 021f 	and.w	r2, r3, #31
 80013bc:	4906      	ldr	r1, [pc, #24]	; (80013d8 <__NVIC_EnableIRQ+0x34>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	2001      	movs	r0, #1
 80013c6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100

080013dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0a      	blt.n	8001406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	490c      	ldr	r1, [pc, #48]	; (8001428 <__NVIC_SetPriority+0x4c>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	440b      	add	r3, r1
 8001400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001404:	e00a      	b.n	800141c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4908      	ldr	r1, [pc, #32]	; (800142c <__NVIC_SetPriority+0x50>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	3b04      	subs	r3, #4
 8001414:	0112      	lsls	r2, r2, #4
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	440b      	add	r3, r1
 800141a:	761a      	strb	r2, [r3, #24]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f1c3 0307 	rsb	r3, r3, #7
 800144a:	2b04      	cmp	r3, #4
 800144c:	bf28      	it	cs
 800144e:	2304      	movcs	r3, #4
 8001450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3304      	adds	r3, #4
 8001456:	2b06      	cmp	r3, #6
 8001458:	d902      	bls.n	8001460 <NVIC_EncodePriority+0x30>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3b03      	subs	r3, #3
 800145e:	e000      	b.n	8001462 <NVIC_EncodePriority+0x32>
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001478:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43d9      	mvns	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	4313      	orrs	r3, r2
         );
}
 800148a:	4618      	mov	r0, r3
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff4f 	bl	8001340 <__NVIC_SetPriorityGrouping>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff64 	bl	8001388 <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ffb2 	bl	8001430 <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff81 	bl	80013dc <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff57 	bl	80013a4 <__NVIC_EnableIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e014      	b.n	800153a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	791b      	ldrb	r3, [r3, #4]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d105      	bne.n	8001526 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff fa85 	bl	8000a30 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2202      	movs	r2, #2
 800152a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	795b      	ldrb	r3, [r3, #5]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_DAC_Start+0x16>
 8001554:	2302      	movs	r3, #2
 8001556:	e040      	b.n	80015da <HAL_DAC_Start+0x98>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2202      	movs	r2, #2
 8001562:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6819      	ldr	r1, [r3, #0]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	f003 0310 	and.w	r3, r3, #16
 8001570:	2201      	movs	r2, #1
 8001572:	409a      	lsls	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10f      	bne.n	80015a2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800158c:	2b3c      	cmp	r3, #60	; 0x3c
 800158e:	d11d      	bne.n	80015cc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0201 	orr.w	r2, r2, #1
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	e014      	b.n	80015cc <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	213c      	movs	r1, #60	; 0x3c
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d107      	bne.n	80015cc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0202 	orr.w	r2, r2, #2
 80015ca:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d105      	bne.n	800160e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4413      	add	r3, r2
 8001608:	3308      	adds	r3, #8
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e004      	b.n	8001618 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	3314      	adds	r3, #20
 8001616:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	461a      	mov	r2, r3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	795b      	ldrb	r3, [r3, #5]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_DAC_ConfigChannel+0x18>
 8001640:	2302      	movs	r3, #2
 8001642:	e03c      	b.n	80016be <HAL_DAC_ConfigChannel+0x92>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2201      	movs	r2, #1
 8001648:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2202      	movs	r2, #2
 800164e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	4013      	ands	r3, r2
 800166c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	4313      	orrs	r3, r2
 800168a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6819      	ldr	r1, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	22c0      	movs	r2, #192	; 0xc0
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	400a      	ands	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2200      	movs	r2, #0
 80016ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	371c      	adds	r7, #28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80016d8:	4ba3      	ldr	r3, [pc, #652]	; (8001968 <HAL_ETH_Init+0x2a0>)
 80016da:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e173      	b.n	80019d6 <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d106      	bne.n	8001708 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f002 fbb8 	bl	8003e78 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	4b97      	ldr	r3, [pc, #604]	; (800196c <HAL_ETH_Init+0x2a4>)
 800170e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001710:	4a96      	ldr	r2, [pc, #600]	; (800196c <HAL_ETH_Init+0x2a4>)
 8001712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001716:	6453      	str	r3, [r2, #68]	; 0x44
 8001718:	4b94      	ldr	r3, [pc, #592]	; (800196c <HAL_ETH_Init+0x2a4>)
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001724:	4b92      	ldr	r3, [pc, #584]	; (8001970 <HAL_ETH_Init+0x2a8>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	4a91      	ldr	r2, [pc, #580]	; (8001970 <HAL_ETH_Init+0x2a8>)
 800172a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800172e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001730:	4b8f      	ldr	r3, [pc, #572]	; (8001970 <HAL_ETH_Init+0x2a8>)
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	498d      	ldr	r1, [pc, #564]	; (8001970 <HAL_ETH_Init+0x2a8>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001754:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001756:	f7ff fb5b 	bl	8000e10 <HAL_GetTick>
 800175a:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800175c:	e011      	b.n	8001782 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 800175e:	f7ff fb57 	bl	8000e10 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800176c:	d909      	bls.n	8001782 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2203      	movs	r2, #3
 8001772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e129      	b.n	80019d6 <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1e4      	bne.n	800175e <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f023 031c 	bic.w	r3, r3, #28
 80017a2:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80017a4:	f001 fe84 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80017a8:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	4a71      	ldr	r2, [pc, #452]	; (8001974 <HAL_ETH_Init+0x2ac>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d908      	bls.n	80017c4 <HAL_ETH_Init+0xfc>
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	4a70      	ldr	r2, [pc, #448]	; (8001978 <HAL_ETH_Init+0x2b0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d804      	bhi.n	80017c4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	f043 0308 	orr.w	r3, r3, #8
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e01a      	b.n	80017fa <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	4a6c      	ldr	r2, [pc, #432]	; (8001978 <HAL_ETH_Init+0x2b0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d908      	bls.n	80017de <HAL_ETH_Init+0x116>
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	4a66      	ldr	r2, [pc, #408]	; (8001968 <HAL_ETH_Init+0x2a0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d204      	bcs.n	80017de <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f043 030c 	orr.w	r3, r3, #12
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	e00d      	b.n	80017fa <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	4a61      	ldr	r2, [pc, #388]	; (8001968 <HAL_ETH_Init+0x2a0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d303      	bcc.n	80017ee <HAL_ETH_Init+0x126>
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	4a64      	ldr	r2, [pc, #400]	; (800197c <HAL_ETH_Init+0x2b4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d904      	bls.n	80017f8 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	61fb      	str	r3, [r7, #28]
 80017f6:	e000      	b.n	80017fa <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80017f8:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001802:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001806:	2100      	movs	r1, #0
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 fb8e 	bl	8001f2a <HAL_ETH_WritePHYRegister>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00b      	beq.n	800182c <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001818:	6939      	ldr	r1, [r7, #16]
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 fd44 	bl	80022a8 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0d4      	b.n	80019d6 <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800182c:	20ff      	movs	r0, #255	; 0xff
 800182e:	f7ff faf9 	bl	8000e24 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 80a2 	beq.w	8001980 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800183c:	f7ff fae8 	bl	8000e10 <HAL_GetTick>
 8001840:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	461a      	mov	r2, r3
 8001848:	2101      	movs	r1, #1
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 fb05 	bl	8001e5a <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8001850:	f7ff fade 	bl	8000e10 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f241 3288 	movw	r2, #5000	; 0x1388
 800185e:	4293      	cmp	r3, r2
 8001860:	d90f      	bls.n	8001882 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001866:	6939      	ldr	r1, [r7, #16]
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 fd1d 	bl	80022a8 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e0a9      	b.n	80019d6 <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0da      	beq.n	8001842 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800188c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001890:	2100      	movs	r1, #0
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 fb49 	bl	8001f2a <HAL_ETH_WritePHYRegister>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00b      	beq.n	80018b6 <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80018a2:	6939      	ldr	r1, [r7, #16]
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 fcff 	bl	80022a8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e08f      	b.n	80019d6 <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80018b6:	f7ff faab 	bl	8000e10 <HAL_GetTick>
 80018ba:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	461a      	mov	r2, r3
 80018c2:	2101      	movs	r1, #1
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 fac8 	bl	8001e5a <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80018ca:	f7ff faa1 	bl	8000e10 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d8:	4293      	cmp	r3, r2
 80018da:	d90f      	bls.n	80018fc <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80018e0:	6939      	ldr	r1, [r7, #16]
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fce0 	bl	80022a8 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e06c      	b.n	80019d6 <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0320 	and.w	r3, r3, #32
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0da      	beq.n	80018bc <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	461a      	mov	r2, r3
 800190c:	2110      	movs	r1, #16
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 faa3 	bl	8001e5a <HAL_ETH_ReadPHYRegister>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800191e:	6939      	ldr	r1, [r7, #16]
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 fcc1 	bl	80022a8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e051      	b.n	80019d6 <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d004      	beq.n	8001946 <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	e002      	b.n	800194c <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	e032      	b.n	80019c4 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	e02d      	b.n	80019c4 <HAL_ETH_Init+0x2fc>
 8001968:	03938700 	.word	0x03938700
 800196c:	40023800 	.word	0x40023800
 8001970:	40013800 	.word	0x40013800
 8001974:	01312cff 	.word	0x01312cff
 8001978:	02160ebf 	.word	0x02160ebf
 800197c:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	08db      	lsrs	r3, r3, #3
 8001986:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001990:	4313      	orrs	r3, r2
 8001992:	b29b      	uxth	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	2100      	movs	r1, #0
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 fac6 	bl	8001f2a <HAL_ETH_WritePHYRegister>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00b      	beq.n	80019bc <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80019a8:	6939      	ldr	r1, [r7, #16]
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 fc7c 	bl	80022a8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e00c      	b.n	80019d6 <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80019bc:	f640 70ff 	movw	r0, #4095	; 0xfff
 80019c0:	f7ff fa30 	bl	8000e24 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80019c4:	6939      	ldr	r1, [r7, #16]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fc6e 	bl	80022a8 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3720      	adds	r7, #32
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop

080019e0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_ETH_DMATxDescListInit+0x20>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e051      	b.n	8001aa4 <HAL_ETH_DMATxDescListInit+0xc4>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	e030      	b.n	8001a7e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	015b      	lsls	r3, r3, #5
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	4413      	add	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a2c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a34:	fb02 f303 	mul.w	r3, r2, r3
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d105      	bne.n	8001a56 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d208      	bcs.n	8001a72 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	015b      	lsls	r3, r3, #5
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	4413      	add	r3, r2
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	e002      	b.n	8001a78 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d3ca      	bcc.n	8001a1c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a90:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b087      	sub	sp, #28
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_ETH_DMARxDescListInit+0x20>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e055      	b.n	8001b7a <HAL_ETH_DMARxDescListInit+0xcc>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2202      	movs	r2, #2
 8001ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	e034      	b.n	8001b54 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	015b      	lsls	r3, r3, #5
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	4413      	add	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001afa:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001b02:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	461a      	mov	r2, r3
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d105      	bne.n	8001b2c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d208      	bcs.n	8001b48 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	015b      	lsls	r3, r3, #5
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	4413      	add	r3, r2
 8001b40:	461a      	mov	r2, r3
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	e002      	b.n	8001b4e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3301      	adds	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d3c6      	bcc.n	8001aea <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b66:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	371c      	adds	r7, #28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ETH_TransmitFrame+0x24>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e0cc      	b.n	8001d42 <HAL_ETH_TransmitFrame+0x1be>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0b7      	b.n	8001d42 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	da09      	bge.n	8001bf0 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2212      	movs	r2, #18
 8001be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0a8      	b.n	8001d42 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d915      	bls.n	8001c26 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	4a53      	ldr	r2, [pc, #332]	; (8001d4c <HAL_ETH_TransmitFrame+0x1c8>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	0a9b      	lsrs	r3, r3, #10
 8001c04:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <HAL_ETH_TransmitFrame+0x1c8>)
 8001c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8001c0e:	0a9b      	lsrs	r3, r3, #10
 8001c10:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001c14:	fb01 f303 	mul.w	r3, r1, r3
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d005      	beq.n	8001c2a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	3301      	adds	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	e001      	b.n	8001c2a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 8001c26:	2301      	movs	r3, #1
 8001c28:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d11c      	bne.n	8001c6a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001c3e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001c4a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c5a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	461a      	mov	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c68:	e04b      	b.n	8001d02 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	e044      	b.n	8001cfa <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c7e:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d107      	bne.n	8001c96 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c94:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c9e:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d116      	bne.n	8001cd8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001cb8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <HAL_ETH_TransmitFrame+0x1cc>)
 8001cbe:	fb03 f202 	mul.w	r2, r3, r2
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001cca:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001cd6:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ce6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d3b6      	bcc.n	8001c70 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00d      	beq.n	8001d30 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	2304      	movs	r3, #4
 8001d20:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	371c      	adds	r7, #28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	ac02b00b 	.word	0xac02b00b
 8001d50:	fffffa0c 	.word	0xfffffa0c

08001d54 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_ETH_GetReceivedFrame+0x1a>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e070      	b.n	8001e50 <HAL_ETH_GetReceivedFrame+0xfc>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2202      	movs	r2, #2
 8001d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db5a      	blt.n	8001e3e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d030      	beq.n	8001df8 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d103      	bne.n	8001db0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	631a      	str	r2, [r3, #48]	; 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	0c1b      	lsrs	r3, r3, #16
 8001dc0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001dc4:	3b04      	subs	r3, #4
 8001dc6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	461a      	mov	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	e02b      	b.n	8001e50 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d010      	beq.n	8001e28 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	461a      	mov	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	629a      	str	r2, [r3, #40]	; 0x28
 8001e26:	e00a      	b.n	8001e3e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	460b      	mov	r3, r1
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b82      	cmp	r3, #130	; 0x82
 8001e7a:	d101      	bne.n	8001e80 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e050      	b.n	8001f22 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2282      	movs	r2, #130	; 0x82
 8001e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 031c 	and.w	r3, r3, #28
 8001e96:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8a1b      	ldrh	r3, [r3, #16]
 8001e9c:	02db      	lsls	r3, r3, #11
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001ea6:	897b      	ldrh	r3, [r7, #10]
 8001ea8:	019b      	lsls	r3, r3, #6
 8001eaa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f023 0302 	bic.w	r3, r3, #2
 8001eba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ecc:	f7fe ffa0 	bl	8000e10 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ed2:	e015      	b.n	8001f00 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001ed4:	f7fe ff9c 	bl	8000e10 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee2:	d309      	bcc.n	8001ef8 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e014      	b.n	8001f22 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1e4      	bne.n	8001ed4 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	460b      	mov	r3, r1
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b42      	cmp	r3, #66	; 0x42
 8001f4a:	d101      	bne.n	8001f50 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e04e      	b.n	8001fee <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2242      	movs	r2, #66	; 0x42
 8001f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f003 031c 	and.w	r3, r3, #28
 8001f66:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8a1b      	ldrh	r3, [r3, #16]
 8001f6c:	02db      	lsls	r3, r3, #11
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001f76:	897b      	ldrh	r3, [r7, #10]
 8001f78:	019b      	lsls	r3, r3, #6
 8001f7a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f043 0302 	orr.w	r3, r3, #2
 8001f8a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fa6:	f7fe ff33 	bl	8000e10 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fac:	e015      	b.n	8001fda <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001fae:	f7fe ff2f 	bl	8000e10 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fbc:	d309      	bcc.n	8001fd2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e00d      	b.n	8001fee <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1e4      	bne.n	8001fae <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_ETH_Start+0x16>
 8002008:	2302      	movs	r3, #2
 800200a:	e01f      	b.n	800204c <HAL_ETH_Start+0x56>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 fb3f 	bl	80026a0 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fb76 	bl	8002714 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fc01 	bl	8002830 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fbaa 	bl	8002788 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 fbd1 	bl	80027dc <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_ETH_Stop+0x16>
 8002066:	2302      	movs	r3, #2
 8002068:	e01f      	b.n	80020aa <HAL_ETH_Stop+0x56>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2202      	movs	r2, #2
 8002076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 fb99 	bl	80027b2 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 fbc0 	bl	8002806 <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fb61 	bl	800274e <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 fbcf 	bl	8002830 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 fb21 	bl	80026da <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_ETH_ConfigMAC+0x1c>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e0e4      	b.n	800229a <HAL_ETH_ConfigMAC+0x1e6>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 80b1 	beq.w	800224a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4b6c      	ldr	r3, [pc, #432]	; (80022a4 <HAL_ETH_ConfigMAC+0x1f0>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002100:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8002106:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 800210c:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8002112:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8002118:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 800211e:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8002124:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 800212a:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8002130:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8002136:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 800213c:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8002142:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800215a:	2001      	movs	r0, #1
 800215c:	f7fe fe62 	bl	8000e24 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002170:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002176:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800217c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8002182:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002188:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800218e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800219a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 800219c:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f7fe fe3c 	bl	8000e24 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80021bc:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021c6:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80021d6:	4013      	ands	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021de:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021e4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80021ea:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80021f0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 80021f6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80021fc:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002214:	2001      	movs	r0, #1
 8002216:	f7fe fe05 	bl	8000e24 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800223a:	2001      	movs	r0, #1
 800223c:	f7fe fdf2 	bl	8000e24 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	61da      	str	r2, [r3, #28]
 8002248:	e01e      	b.n	8002288 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002258:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800227a:	2001      	movs	r0, #1
 800227c:	f7fe fdd2 	bl	8000e24 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	ff20810f 	.word	0xff20810f

080022a8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b0b0      	sub	sp, #192	; 0xc0
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022c4:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022cc:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80022d6:	2300      	movs	r3, #0
 80022d8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d103      	bne.n	80022f6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80022ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022f2:	663b      	str	r3, [r7, #96]	; 0x60
 80022f4:	e001      	b.n	80022fa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80022fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022fe:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002304:	2300      	movs	r3, #0
 8002306:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002314:	2340      	movs	r3, #64	; 0x40
 8002316:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800231e:	2300      	movs	r3, #0
 8002320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800232a:	2300      	movs	r3, #0
 800232c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002336:	2300      	movs	r3, #0
 8002338:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800234e:	2300      	movs	r3, #0
 8002350:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800237c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002380:	4baa      	ldr	r3, [pc, #680]	; (800262c <ETH_MACDMAConfig+0x384>)
 8002382:	4013      	ands	r3, r2
 8002384:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002388:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 800238a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 800238c:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 800238e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8002390:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8002392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8002394:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 800239a:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 800239c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 800239e:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 80023a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 80023a2:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 80023a8:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 80023aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 80023ac:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 80023ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 80023b0:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 80023b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 80023b4:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 80023b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 80023b8:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 80023ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 80023bc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80023be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023d0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023dc:	2001      	movs	r0, #1
 80023de:	f7fe fd21 	bl	8000e24 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023ea:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80023ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80023ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80023f0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80023f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80023f4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 80023f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80023fa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80023fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8002400:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002402:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002406:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002408:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800240c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002410:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002418:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800241a:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002426:	2001      	movs	r0, #1
 8002428:	f7fe fcfc 	bl	8000e24 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002434:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800243e:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002448:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002454:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002458:	f64f 7341 	movw	r3, #65345	; 0xff41
 800245c:	4013      	ands	r3, r2
 800245e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002462:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002466:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002468:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800246c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800246e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002472:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8002474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002478:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800247a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 800247e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8002480:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002484:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002486:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002498:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024a4:	2001      	movs	r0, #1
 80024a6:	f7fe fcbd 	bl	8000e24 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024b2:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80024b4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 80024b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ce:	2001      	movs	r0, #1
 80024d0:	f7fe fca8 	bl	8000e24 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024dc:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80024e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e6:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 80024ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024f0:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80024fe:	2300      	movs	r3, #0
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002502:	2304      	movs	r3, #4
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800250c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002510:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002512:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002516:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800251c:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8002522:	2300      	movs	r3, #0
 8002524:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002526:	2300      	movs	r3, #0
 8002528:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002538:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800253c:	4b3c      	ldr	r3, [pc, #240]	; (8002630 <ETH_MACDMAConfig+0x388>)
 800253e:	4013      	ands	r3, r2
 8002540:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002544:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8002546:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002548:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 800254a:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 800254c:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 800254e:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8002550:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8002552:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8002554:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8002556:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 8002558:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 800255a:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 800255c:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8002560:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8002562:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 8002564:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002566:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002578:	461a      	mov	r2, r3
 800257a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800257e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800258e:	2001      	movs	r0, #1
 8002590:	f7fe fc48 	bl	8000e24 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800259c:	461a      	mov	r2, r3
 800259e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025a2:	6193      	str	r3, [r2, #24]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80025a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 80025a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80025a8:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80025aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 80025ac:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 80025ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80025b0:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 80025b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 80025b4:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 80025b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b8:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 80025ba:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 80025bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 80025be:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025cc:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025dc:	2001      	movs	r0, #1
 80025de:	f7fe fc21 	bl	8000e24 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ea:	461a      	mov	r2, r3
 80025ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025f0:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d10d      	bne.n	8002616 <ETH_MACDMAConfig+0x36e>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002610:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002614:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	461a      	mov	r2, r3
 800261c:	2100      	movs	r1, #0
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f808 	bl	8002634 <ETH_MACAddressConfig>
}
 8002624:	bf00      	nop
 8002626:	37c0      	adds	r7, #192	; 0xc0
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	ff20810f 	.word	0xff20810f
 8002630:	f8de3f23 	.word	0xf8de3f23

08002634 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3305      	adds	r3, #5
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	3204      	adds	r2, #4
 800264c:	7812      	ldrb	r2, [r2, #0]
 800264e:	4313      	orrs	r3, r2
 8002650:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <ETH_MACAddressConfig+0x64>)
 8002656:	4413      	add	r3, r2
 8002658:	461a      	mov	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3303      	adds	r3, #3
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	061a      	lsls	r2, r3, #24
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3302      	adds	r3, #2
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	041b      	lsls	r3, r3, #16
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3301      	adds	r3, #1
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	021b      	lsls	r3, r3, #8
 8002678:	4313      	orrs	r3, r2
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	7812      	ldrb	r2, [r2, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <ETH_MACAddressConfig+0x68>)
 8002686:	4413      	add	r3, r2
 8002688:	461a      	mov	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	6013      	str	r3, [r2, #0]
}
 800268e:	bf00      	nop
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr
 8002698:	40028040 	.word	0x40028040
 800269c:	40028044 	.word	0x40028044

080026a0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0208 	orr.w	r2, r2, #8
 80026ba:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80026c4:	2001      	movs	r0, #1
 80026c6:	f000 f8d9 	bl	800287c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	601a      	str	r2, [r3, #0]
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0208 	bic.w	r2, r2, #8
 80026f4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80026fe:	2001      	movs	r0, #1
 8002700:	f000 f8bc 	bl	800287c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	601a      	str	r2, [r3, #0]
}
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0204 	orr.w	r2, r2, #4
 800272e:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002738:	2001      	movs	r0, #1
 800273a:	f000 f89f 	bl	800287c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	601a      	str	r2, [r3, #0]
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0204 	bic.w	r2, r2, #4
 8002768:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002772:	2001      	movs	r0, #1
 8002774:	f000 f882 	bl	800287c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	601a      	str	r2, [r3, #0]
}
 8002780:	bf00      	nop
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027a6:	6193      	str	r3, [r2, #24]
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027d0:	6193      	str	r3, [r2, #24]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	f043 0302 	orr.w	r3, r3, #2
 80027f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027fa:	6193      	str	r3, [r2, #24]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	f023 0302 	bic.w	r3, r3, #2
 8002820:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002824:	6193      	str	r3, [r2, #24]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6812      	ldr	r2, [r2, #0]
 800284a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800284e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002852:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002860:	2001      	movs	r0, #1
 8002862:	f000 f80b 	bl	800287c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002870:	6193      	str	r3, [r2, #24]
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <ETH_Delay+0x34>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <ETH_Delay+0x38>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	0a5b      	lsrs	r3, r3, #9
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	fb02 f303 	mul.w	r3, r2, r3
 8002896:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002898:	bf00      	nop
  }
  while (Delay --);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1e5a      	subs	r2, r3, #1
 800289e:	60fa      	str	r2, [r7, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f9      	bne.n	8002898 <ETH_Delay+0x1c>
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	20000004 	.word	0x20000004
 80028b4:	10624dd3 	.word	0x10624dd3

080028b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028c6:	e16f      	b.n	8002ba8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	2101      	movs	r1, #1
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	4013      	ands	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 8161 	beq.w	8002ba2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d005      	beq.n	80028f8 <HAL_GPIO_Init+0x40>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d130      	bne.n	800295a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800292e:	2201      	movs	r2, #1
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4013      	ands	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	f003 0201 	and.w	r2, r3, #1
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b03      	cmp	r3, #3
 8002964:	d017      	beq.n	8002996 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	2203      	movs	r2, #3
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4013      	ands	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d123      	bne.n	80029ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	08da      	lsrs	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3208      	adds	r2, #8
 80029aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	220f      	movs	r2, #15
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4013      	ands	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	08da      	lsrs	r2, r3, #3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3208      	adds	r2, #8
 80029e4:	6939      	ldr	r1, [r7, #16]
 80029e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	2203      	movs	r2, #3
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 0203 	and.w	r2, r3, #3
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80bb 	beq.w	8002ba2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	4b64      	ldr	r3, [pc, #400]	; (8002bc4 <HAL_GPIO_Init+0x30c>)
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	4a63      	ldr	r2, [pc, #396]	; (8002bc4 <HAL_GPIO_Init+0x30c>)
 8002a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a3a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3c:	4b61      	ldr	r3, [pc, #388]	; (8002bc4 <HAL_GPIO_Init+0x30c>)
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a48:	4a5f      	ldr	r2, [pc, #380]	; (8002bc8 <HAL_GPIO_Init+0x310>)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	089b      	lsrs	r3, r3, #2
 8002a4e:	3302      	adds	r3, #2
 8002a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	220f      	movs	r2, #15
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a57      	ldr	r2, [pc, #348]	; (8002bcc <HAL_GPIO_Init+0x314>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d031      	beq.n	8002ad8 <HAL_GPIO_Init+0x220>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a56      	ldr	r2, [pc, #344]	; (8002bd0 <HAL_GPIO_Init+0x318>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d02b      	beq.n	8002ad4 <HAL_GPIO_Init+0x21c>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a55      	ldr	r2, [pc, #340]	; (8002bd4 <HAL_GPIO_Init+0x31c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d025      	beq.n	8002ad0 <HAL_GPIO_Init+0x218>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a54      	ldr	r2, [pc, #336]	; (8002bd8 <HAL_GPIO_Init+0x320>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d01f      	beq.n	8002acc <HAL_GPIO_Init+0x214>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a53      	ldr	r2, [pc, #332]	; (8002bdc <HAL_GPIO_Init+0x324>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d019      	beq.n	8002ac8 <HAL_GPIO_Init+0x210>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a52      	ldr	r2, [pc, #328]	; (8002be0 <HAL_GPIO_Init+0x328>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d013      	beq.n	8002ac4 <HAL_GPIO_Init+0x20c>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a51      	ldr	r2, [pc, #324]	; (8002be4 <HAL_GPIO_Init+0x32c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00d      	beq.n	8002ac0 <HAL_GPIO_Init+0x208>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a50      	ldr	r2, [pc, #320]	; (8002be8 <HAL_GPIO_Init+0x330>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d007      	beq.n	8002abc <HAL_GPIO_Init+0x204>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a4f      	ldr	r2, [pc, #316]	; (8002bec <HAL_GPIO_Init+0x334>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d101      	bne.n	8002ab8 <HAL_GPIO_Init+0x200>
 8002ab4:	2308      	movs	r3, #8
 8002ab6:	e010      	b.n	8002ada <HAL_GPIO_Init+0x222>
 8002ab8:	2309      	movs	r3, #9
 8002aba:	e00e      	b.n	8002ada <HAL_GPIO_Init+0x222>
 8002abc:	2307      	movs	r3, #7
 8002abe:	e00c      	b.n	8002ada <HAL_GPIO_Init+0x222>
 8002ac0:	2306      	movs	r3, #6
 8002ac2:	e00a      	b.n	8002ada <HAL_GPIO_Init+0x222>
 8002ac4:	2305      	movs	r3, #5
 8002ac6:	e008      	b.n	8002ada <HAL_GPIO_Init+0x222>
 8002ac8:	2304      	movs	r3, #4
 8002aca:	e006      	b.n	8002ada <HAL_GPIO_Init+0x222>
 8002acc:	2303      	movs	r3, #3
 8002ace:	e004      	b.n	8002ada <HAL_GPIO_Init+0x222>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e002      	b.n	8002ada <HAL_GPIO_Init+0x222>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <HAL_GPIO_Init+0x222>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	f002 0203 	and.w	r2, r2, #3
 8002ae0:	0092      	lsls	r2, r2, #2
 8002ae2:	4093      	lsls	r3, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002aec:	4936      	ldr	r1, [pc, #216]	; (8002bc8 <HAL_GPIO_Init+0x310>)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	089b      	lsrs	r3, r3, #2
 8002af2:	3302      	adds	r3, #2
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002afa:	4b3d      	ldr	r3, [pc, #244]	; (8002bf0 <HAL_GPIO_Init+0x338>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b1e:	4a34      	ldr	r2, [pc, #208]	; (8002bf0 <HAL_GPIO_Init+0x338>)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b24:	4b32      	ldr	r3, [pc, #200]	; (8002bf0 <HAL_GPIO_Init+0x338>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b48:	4a29      	ldr	r2, [pc, #164]	; (8002bf0 <HAL_GPIO_Init+0x338>)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b4e:	4b28      	ldr	r3, [pc, #160]	; (8002bf0 <HAL_GPIO_Init+0x338>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b72:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <HAL_GPIO_Init+0x338>)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b78:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <HAL_GPIO_Init+0x338>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b9c:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <HAL_GPIO_Init+0x338>)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f47f ae88 	bne.w	80028c8 <HAL_GPIO_Init+0x10>
  }
}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40013800 	.word	0x40013800
 8002bcc:	40020000 	.word	0x40020000
 8002bd0:	40020400 	.word	0x40020400
 8002bd4:	40020800 	.word	0x40020800
 8002bd8:	40020c00 	.word	0x40020c00
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40021400 	.word	0x40021400
 8002be4:	40021800 	.word	0x40021800
 8002be8:	40021c00 	.word	0x40021c00
 8002bec:	40022000 	.word	0x40022000
 8002bf0:	40013c00 	.word	0x40013c00

08002bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	807b      	strh	r3, [r7, #2]
 8002c00:	4613      	mov	r3, r2
 8002c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c04:	787b      	ldrb	r3, [r7, #1]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c0a:	887a      	ldrh	r2, [r7, #2]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c10:	e003      	b.n	8002c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c12:	887b      	ldrh	r3, [r7, #2]
 8002c14:	041a      	lsls	r2, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	619a      	str	r2, [r3, #24]
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	; 0x28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e236      	b.n	80030a4 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d050      	beq.n	8002ce4 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c42:	4b9e      	ldr	r3, [pc, #632]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d00c      	beq.n	8002c68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4e:	4b9b      	ldr	r3, [pc, #620]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d112      	bne.n	8002c80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c5a:	4b98      	ldr	r3, [pc, #608]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c66:	d10b      	bne.n	8002c80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	4b94      	ldr	r3, [pc, #592]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d036      	beq.n	8002ce2 <HAL_RCC_OscConfig+0xbe>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d132      	bne.n	8002ce2 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e211      	b.n	80030a4 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	4b8e      	ldr	r3, [pc, #568]	; (8002ec0 <HAL_RCC_OscConfig+0x29c>)
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d013      	beq.n	8002cba <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c92:	f7fe f8bd 	bl	8000e10 <HAL_GetTick>
 8002c96:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c9a:	f7fe f8b9 	bl	8000e10 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b64      	cmp	r3, #100	; 0x64
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e1fb      	b.n	80030a4 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cac:	4b83      	ldr	r3, [pc, #524]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0f0      	beq.n	8002c9a <HAL_RCC_OscConfig+0x76>
 8002cb8:	e014      	b.n	8002ce4 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cba:	f7fe f8a9 	bl	8000e10 <HAL_GetTick>
 8002cbe:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc2:	f7fe f8a5 	bl	8000e10 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b64      	cmp	r3, #100	; 0x64
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e1e7      	b.n	80030a4 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd4:	4b79      	ldr	r3, [pc, #484]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f0      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x9e>
 8002ce0:	e000      	b.n	8002ce4 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d077      	beq.n	8002de0 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cf0:	4b72      	ldr	r3, [pc, #456]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00b      	beq.n	8002d14 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfc:	4b6f      	ldr	r3, [pc, #444]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d126      	bne.n	8002d56 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d08:	4b6c      	ldr	r3, [pc, #432]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d120      	bne.n	8002d56 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d14:	4b69      	ldr	r3, [pc, #420]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_OscConfig+0x108>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e1bb      	b.n	80030a4 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2c:	4b63      	ldr	r3, [pc, #396]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	21f8      	movs	r1, #248	; 0xf8
 8002d3a:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	69b9      	ldr	r1, [r7, #24]
 8002d3e:	fa91 f1a1 	rbit	r1, r1
 8002d42:	6179      	str	r1, [r7, #20]
  return result;
 8002d44:	6979      	ldr	r1, [r7, #20]
 8002d46:	fab1 f181 	clz	r1, r1
 8002d4a:	b2c9      	uxtb	r1, r1
 8002d4c:	408b      	lsls	r3, r1
 8002d4e:	495b      	ldr	r1, [pc, #364]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d54:	e044      	b.n	8002de0 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d02a      	beq.n	8002db4 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d5e:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <HAL_RCC_OscConfig+0x2a0>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe f854 	bl	8000e10 <HAL_GetTick>
 8002d68:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6c:	f7fe f850 	bl	8000e10 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e192      	b.n	80030a4 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7e:	4b4f      	ldr	r3, [pc, #316]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8a:	4b4c      	ldr	r3, [pc, #304]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	21f8      	movs	r1, #248	; 0xf8
 8002d98:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	6939      	ldr	r1, [r7, #16]
 8002d9c:	fa91 f1a1 	rbit	r1, r1
 8002da0:	60f9      	str	r1, [r7, #12]
  return result;
 8002da2:	68f9      	ldr	r1, [r7, #12]
 8002da4:	fab1 f181 	clz	r1, r1
 8002da8:	b2c9      	uxtb	r1, r1
 8002daa:	408b      	lsls	r3, r1
 8002dac:	4943      	ldr	r1, [pc, #268]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]
 8002db2:	e015      	b.n	8002de0 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db4:	4b43      	ldr	r3, [pc, #268]	; (8002ec4 <HAL_RCC_OscConfig+0x2a0>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dba:	f7fe f829 	bl	8000e10 <HAL_GetTick>
 8002dbe:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc2:	f7fe f825 	bl	8000e10 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e167      	b.n	80030a4 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd4:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1f0      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d030      	beq.n	8002e4e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d016      	beq.n	8002e22 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df4:	4b34      	ldr	r3, [pc, #208]	; (8002ec8 <HAL_RCC_OscConfig+0x2a4>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfa:	f7fe f809 	bl	8000e10 <HAL_GetTick>
 8002dfe:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e02:	f7fe f805 	bl	8000e10 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e147      	b.n	80030a4 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e14:	4b29      	ldr	r3, [pc, #164]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x1de>
 8002e20:	e015      	b.n	8002e4e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e22:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <HAL_RCC_OscConfig+0x2a4>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e28:	f7fd fff2 	bl	8000e10 <HAL_GetTick>
 8002e2c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e30:	f7fd ffee 	bl	8000e10 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e130      	b.n	80030a4 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e42:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 8087 	beq.w	8002f6a <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e62:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d110      	bne.n	8002e90 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <HAL_RCC_OscConfig+0x298>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e90:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <HAL_RCC_OscConfig+0x2a8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a0d      	ldr	r2, [pc, #52]	; (8002ecc <HAL_RCC_OscConfig+0x2a8>)
 8002e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_OscConfig+0x2a8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d122      	bne.n	8002eee <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <HAL_RCC_OscConfig+0x2a8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a07      	ldr	r2, [pc, #28]	; (8002ecc <HAL_RCC_OscConfig+0x2a8>)
 8002eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb4:	f7fd ffac 	bl	8000e10 <HAL_GetTick>
 8002eb8:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eba:	e012      	b.n	8002ee2 <HAL_RCC_OscConfig+0x2be>
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40023802 	.word	0x40023802
 8002ec4:	42470000 	.word	0x42470000
 8002ec8:	42470e80 	.word	0x42470e80
 8002ecc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed0:	f7fd ff9e 	bl	8000e10 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e0e0      	b.n	80030a4 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee2:	4b72      	ldr	r3, [pc, #456]	; (80030ac <HAL_RCC_OscConfig+0x488>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	4b6f      	ldr	r3, [pc, #444]	; (80030b0 <HAL_RCC_OscConfig+0x48c>)
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d015      	beq.n	8002f2c <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f00:	f7fd ff86 	bl	8000e10 <HAL_GetTick>
 8002f04:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f06:	e00a      	b.n	8002f1e <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f08:	f7fd ff82 	bl	8000e10 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e0c2      	b.n	80030a4 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1e:	4b65      	ldr	r3, [pc, #404]	; (80030b4 <HAL_RCC_OscConfig+0x490>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0ee      	beq.n	8002f08 <HAL_RCC_OscConfig+0x2e4>
 8002f2a:	e014      	b.n	8002f56 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2c:	f7fd ff70 	bl	8000e10 <HAL_GetTick>
 8002f30:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f7fd ff6c 	bl	8000e10 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e0ac      	b.n	80030a4 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4a:	4b5a      	ldr	r3, [pc, #360]	; (80030b4 <HAL_RCC_OscConfig+0x490>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1ee      	bne.n	8002f34 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d105      	bne.n	8002f6a <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5e:	4b55      	ldr	r3, [pc, #340]	; (80030b4 <HAL_RCC_OscConfig+0x490>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	4a54      	ldr	r2, [pc, #336]	; (80030b4 <HAL_RCC_OscConfig+0x490>)
 8002f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8097 	beq.w	80030a2 <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f74:	4b4f      	ldr	r3, [pc, #316]	; (80030b4 <HAL_RCC_OscConfig+0x490>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d061      	beq.n	8003044 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d146      	bne.n	8003016 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f88:	4b4b      	ldr	r3, [pc, #300]	; (80030b8 <HAL_RCC_OscConfig+0x494>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fd ff3f 	bl	8000e10 <HAL_GetTick>
 8002f92:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fd ff3b 	bl	8000e10 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b64      	cmp	r3, #100	; 0x64
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e07d      	b.n	80030a4 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa8:	4b42      	ldr	r3, [pc, #264]	; (80030b4 <HAL_RCC_OscConfig+0x490>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb4:	4b3f      	ldr	r3, [pc, #252]	; (80030b4 <HAL_RCC_OscConfig+0x490>)
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	4b40      	ldr	r3, [pc, #256]	; (80030bc <HAL_RCC_OscConfig+0x498>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	69d1      	ldr	r1, [r2, #28]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6a12      	ldr	r2, [r2, #32]
 8002fc4:	4311      	orrs	r1, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fca:	0192      	lsls	r2, r2, #6
 8002fcc:	4311      	orrs	r1, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fd2:	0612      	lsls	r2, r2, #24
 8002fd4:	4311      	orrs	r1, r2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002fda:	0852      	lsrs	r2, r2, #1
 8002fdc:	3a01      	subs	r2, #1
 8002fde:	0412      	lsls	r2, r2, #16
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	4934      	ldr	r1, [pc, #208]	; (80030b4 <HAL_RCC_OscConfig+0x490>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe8:	4b33      	ldr	r3, [pc, #204]	; (80030b8 <HAL_RCC_OscConfig+0x494>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7fd ff0f 	bl	8000e10 <HAL_GetTick>
 8002ff2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fd ff0b 	bl	8000e10 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b64      	cmp	r3, #100	; 0x64
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e04d      	b.n	80030a4 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003008:	4b2a      	ldr	r3, [pc, #168]	; (80030b4 <HAL_RCC_OscConfig+0x490>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x3d2>
 8003014:	e045      	b.n	80030a2 <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003016:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <HAL_RCC_OscConfig+0x494>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fd fef8 	bl	8000e10 <HAL_GetTick>
 8003020:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003024:	f7fd fef4 	bl	8000e10 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	; 0x64
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e036      	b.n	80030a4 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	4b1f      	ldr	r3, [pc, #124]	; (80030b4 <HAL_RCC_OscConfig+0x490>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x400>
 8003042:	e02e      	b.n	80030a2 <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e029      	b.n	80030a4 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003050:	4b18      	ldr	r3, [pc, #96]	; (80030b4 <HAL_RCC_OscConfig+0x490>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	429a      	cmp	r2, r3
 8003062:	d11c      	bne.n	800309e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d115      	bne.n	800309e <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d10d      	bne.n	800309e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d106      	bne.n	800309e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800309a:	429a      	cmp	r2, r3
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3728      	adds	r7, #40	; 0x28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40007000 	.word	0x40007000
 80030b0:	40023870 	.word	0x40023870
 80030b4:	40023800 	.word	0x40023800
 80030b8:	42470060 	.word	0x42470060
 80030bc:	f0bc8000 	.word	0xf0bc8000

080030c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0d2      	b.n	800327a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030d4:	4b6b      	ldr	r3, [pc, #428]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d90c      	bls.n	80030fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b68      	ldr	r3, [pc, #416]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b66      	ldr	r3, [pc, #408]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0be      	b.n	800327a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d020      	beq.n	800314a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003114:	4b5c      	ldr	r3, [pc, #368]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4a5b      	ldr	r2, [pc, #364]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 800311a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800311e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800312c:	4b56      	ldr	r3, [pc, #344]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4a55      	ldr	r2, [pc, #340]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003136:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003138:	4b53      	ldr	r3, [pc, #332]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4950      	ldr	r1, [pc, #320]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d040      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	4b4a      	ldr	r3, [pc, #296]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d115      	bne.n	8003196 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e085      	b.n	800327a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	4b44      	ldr	r3, [pc, #272]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e079      	b.n	800327a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	4b40      	ldr	r3, [pc, #256]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e071      	b.n	800327a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003196:	4b3c      	ldr	r3, [pc, #240]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4939      	ldr	r1, [pc, #228]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a8:	f7fd fe32 	bl	8000e10 <HAL_GetTick>
 80031ac:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b0:	f7fd fe2e 	bl	8000e10 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e059      	b.n	800327a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	4b30      	ldr	r3, [pc, #192]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 020c 	and.w	r2, r3, #12
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d1eb      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031d8:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d20c      	bcs.n	8003200 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b27      	ldr	r3, [pc, #156]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b25      	ldr	r3, [pc, #148]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e03c      	b.n	800327a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800320c:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	491b      	ldr	r1, [pc, #108]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800322a:	4b17      	ldr	r3, [pc, #92]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4913      	ldr	r1, [pc, #76]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800323e:	f000 f82b 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8003242:	4601      	mov	r1, r0
 8003244:	4b10      	ldr	r3, [pc, #64]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800324c:	22f0      	movs	r2, #240	; 0xf0
 800324e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	fa92 f2a2 	rbit	r2, r2
 8003256:	60fa      	str	r2, [r7, #12]
  return result;
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	fab2 f282 	clz	r2, r2
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	40d3      	lsrs	r3, r2
 8003262:	4a0a      	ldr	r2, [pc, #40]	; (800328c <HAL_RCC_ClockConfig+0x1cc>)
 8003264:	5cd3      	ldrb	r3, [r2, r3]
 8003266:	fa21 f303 	lsr.w	r3, r1, r3
 800326a:	4a09      	ldr	r2, [pc, #36]	; (8003290 <HAL_RCC_ClockConfig+0x1d0>)
 800326c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_RCC_ClockConfig+0x1d4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd fc20 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40023c00 	.word	0x40023c00
 8003288:	40023800 	.word	0x40023800
 800328c:	080109d0 	.word	0x080109d0
 8003290:	20000004 	.word	0x20000004
 8003294:	20000008 	.word	0x20000008

08003298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800329c:	b094      	sub	sp, #80	; 0x50
 800329e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	647b      	str	r3, [r7, #68]	; 0x44
 80032a4:	2300      	movs	r3, #0
 80032a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a8:	2300      	movs	r3, #0
 80032aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b0:	4b7c      	ldr	r3, [pc, #496]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x20c>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d00d      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0x40>
 80032bc:	2b08      	cmp	r3, #8
 80032be:	f200 80e7 	bhi.w	8003490 <HAL_RCC_GetSysClockFreq+0x1f8>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x34>
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d003      	beq.n	80032d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ca:	e0e1      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032cc:	4b76      	ldr	r3, [pc, #472]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x210>)
 80032ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032d0:	e0e1      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032d2:	4b76      	ldr	r3, [pc, #472]	; (80034ac <HAL_RCC_GetSysClockFreq+0x214>)
 80032d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032d6:	e0de      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032d8:	4b72      	ldr	r3, [pc, #456]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x20c>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032e2:	4b70      	ldr	r3, [pc, #448]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x20c>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d065      	beq.n	80033ba <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ee:	4b6d      	ldr	r3, [pc, #436]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x20c>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	099b      	lsrs	r3, r3, #6
 80032f4:	2200      	movs	r2, #0
 80032f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80032f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003300:	633b      	str	r3, [r7, #48]	; 0x30
 8003302:	2300      	movs	r3, #0
 8003304:	637b      	str	r3, [r7, #52]	; 0x34
 8003306:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800330a:	4622      	mov	r2, r4
 800330c:	462b      	mov	r3, r5
 800330e:	f04f 0000 	mov.w	r0, #0
 8003312:	f04f 0100 	mov.w	r1, #0
 8003316:	0159      	lsls	r1, r3, #5
 8003318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800331c:	0150      	lsls	r0, r2, #5
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4621      	mov	r1, r4
 8003324:	1a51      	subs	r1, r2, r1
 8003326:	6139      	str	r1, [r7, #16]
 8003328:	4629      	mov	r1, r5
 800332a:	eb63 0301 	sbc.w	r3, r3, r1
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800333c:	4659      	mov	r1, fp
 800333e:	018b      	lsls	r3, r1, #6
 8003340:	4651      	mov	r1, sl
 8003342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003346:	4651      	mov	r1, sl
 8003348:	018a      	lsls	r2, r1, #6
 800334a:	46d4      	mov	ip, sl
 800334c:	ebb2 080c 	subs.w	r8, r2, ip
 8003350:	4659      	mov	r1, fp
 8003352:	eb63 0901 	sbc.w	r9, r3, r1
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800336a:	4690      	mov	r8, r2
 800336c:	4699      	mov	r9, r3
 800336e:	4623      	mov	r3, r4
 8003370:	eb18 0303 	adds.w	r3, r8, r3
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	462b      	mov	r3, r5
 8003378:	eb49 0303 	adc.w	r3, r9, r3
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800338a:	4629      	mov	r1, r5
 800338c:	024b      	lsls	r3, r1, #9
 800338e:	4620      	mov	r0, r4
 8003390:	4629      	mov	r1, r5
 8003392:	4604      	mov	r4, r0
 8003394:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003398:	4601      	mov	r1, r0
 800339a:	024a      	lsls	r2, r1, #9
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a2:	2200      	movs	r2, #0
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033ac:	f7fc ff14 	bl	80001d8 <__aeabi_uldivmod>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4613      	mov	r3, r2
 80033b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b8:	e05c      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ba:	4b3a      	ldr	r3, [pc, #232]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x20c>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	099b      	lsrs	r3, r3, #6
 80033c0:	2200      	movs	r2, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	4611      	mov	r1, r2
 80033c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033ca:	623b      	str	r3, [r7, #32]
 80033cc:	2300      	movs	r3, #0
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
 80033d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033d4:	4642      	mov	r2, r8
 80033d6:	464b      	mov	r3, r9
 80033d8:	f04f 0000 	mov.w	r0, #0
 80033dc:	f04f 0100 	mov.w	r1, #0
 80033e0:	0159      	lsls	r1, r3, #5
 80033e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e6:	0150      	lsls	r0, r2, #5
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	46c4      	mov	ip, r8
 80033ee:	ebb2 0a0c 	subs.w	sl, r2, ip
 80033f2:	4640      	mov	r0, r8
 80033f4:	4649      	mov	r1, r9
 80033f6:	468c      	mov	ip, r1
 80033f8:	eb63 0b0c 	sbc.w	fp, r3, ip
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003408:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800340c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003410:	ebb2 040a 	subs.w	r4, r2, sl
 8003414:	eb63 050b 	sbc.w	r5, r3, fp
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	00eb      	lsls	r3, r5, #3
 8003422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003426:	00e2      	lsls	r2, r4, #3
 8003428:	4614      	mov	r4, r2
 800342a:	461d      	mov	r5, r3
 800342c:	4603      	mov	r3, r0
 800342e:	18e3      	adds	r3, r4, r3
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	460b      	mov	r3, r1
 8003434:	eb45 0303 	adc.w	r3, r5, r3
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003446:	4629      	mov	r1, r5
 8003448:	028b      	lsls	r3, r1, #10
 800344a:	4620      	mov	r0, r4
 800344c:	4629      	mov	r1, r5
 800344e:	4604      	mov	r4, r0
 8003450:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003454:	4601      	mov	r1, r0
 8003456:	028a      	lsls	r2, r1, #10
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800345e:	2200      	movs	r2, #0
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	61fa      	str	r2, [r7, #28]
 8003464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003468:	f7fc feb6 	bl	80001d8 <__aeabi_uldivmod>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4613      	mov	r3, r2
 8003472:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	3301      	adds	r3, #1
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800348e:	e002      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003490:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x210>)
 8003492:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003498:	4618      	mov	r0, r3
 800349a:	3750      	adds	r7, #80	; 0x50
 800349c:	46bd      	mov	sp, r7
 800349e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800
 80034a8:	00f42400 	.word	0x00f42400
 80034ac:	007a1200 	.word	0x007a1200

080034b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b4:	4b02      	ldr	r3, [pc, #8]	; (80034c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80034b6:	681b      	ldr	r3, [r3, #0]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr
 80034c0:	20000004 	.word	0x20000004

080034c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80034ca:	f7ff fff1 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80034ce:	4601      	mov	r1, r0
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80034d8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80034dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	fa92 f2a2 	rbit	r2, r2
 80034e4:	603a      	str	r2, [r7, #0]
  return result;
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	fab2 f282 	clz	r2, r2
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	40d3      	lsrs	r3, r2
 80034f0:	4a04      	ldr	r2, [pc, #16]	; (8003504 <HAL_RCC_GetPCLK2Freq+0x40>)
 80034f2:	5cd3      	ldrb	r3, [r2, r3]
 80034f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40023800 	.word	0x40023800
 8003504:	080109e0 	.word	0x080109e0

08003508 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	220f      	movs	r2, #15
 8003516:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003518:	4b11      	ldr	r3, [pc, #68]	; (8003560 <HAL_RCC_GetClockConfig+0x58>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 0203 	and.w	r2, r3, #3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003524:	4b0e      	ldr	r3, [pc, #56]	; (8003560 <HAL_RCC_GetClockConfig+0x58>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_GetClockConfig+0x58>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800353c:	4b08      	ldr	r3, [pc, #32]	; (8003560 <HAL_RCC_GetClockConfig+0x58>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	08db      	lsrs	r3, r3, #3
 8003542:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_RCC_GetClockConfig+0x5c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 020f 	and.w	r2, r3, #15
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	601a      	str	r2, [r3, #0]
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	40023800 	.word	0x40023800
 8003564:	40023c00 	.word	0x40023c00

08003568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e041      	b.n	80035fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f839 	bl	8003606 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3304      	adds	r3, #4
 80035a4:	4619      	mov	r1, r3
 80035a6:	4610      	mov	r0, r2
 80035a8:	f000 f9d0 	bl	800394c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d001      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e04e      	b.n	80036ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a22      	ldr	r2, [pc, #136]	; (80036d8 <HAL_TIM_Base_Start_IT+0xc0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d022      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x80>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365a:	d01d      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x80>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1e      	ldr	r2, [pc, #120]	; (80036dc <HAL_TIM_Base_Start_IT+0xc4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d018      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x80>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a1d      	ldr	r2, [pc, #116]	; (80036e0 <HAL_TIM_Base_Start_IT+0xc8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d013      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x80>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00e      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x80>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1a      	ldr	r2, [pc, #104]	; (80036e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d009      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x80>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a18      	ldr	r2, [pc, #96]	; (80036ec <HAL_TIM_Base_Start_IT+0xd4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d004      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x80>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a17      	ldr	r2, [pc, #92]	; (80036f0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d111      	bne.n	80036bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b06      	cmp	r3, #6
 80036a8:	d010      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0201 	orr.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ba:	e007      	b.n	80036cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	40010000 	.word	0x40010000
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800
 80036e4:	40000c00 	.word	0x40000c00
 80036e8:	40010400 	.word	0x40010400
 80036ec:	40014000 	.word	0x40014000
 80036f0:	40001800 	.word	0x40001800

080036f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b02      	cmp	r3, #2
 8003708:	d122      	bne.n	8003750 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b02      	cmp	r3, #2
 8003716:	d11b      	bne.n	8003750 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0202 	mvn.w	r2, #2
 8003720:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f8ed 	bl	8003916 <HAL_TIM_IC_CaptureCallback>
 800373c:	e005      	b.n	800374a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f8e0 	bl	8003904 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f8ef 	bl	8003928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	2b04      	cmp	r3, #4
 800375c:	d122      	bne.n	80037a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b04      	cmp	r3, #4
 800376a:	d11b      	bne.n	80037a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0204 	mvn.w	r2, #4
 8003774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2202      	movs	r2, #2
 800377a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f8c3 	bl	8003916 <HAL_TIM_IC_CaptureCallback>
 8003790:	e005      	b.n	800379e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f8b6 	bl	8003904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f8c5 	bl	8003928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d122      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d11b      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f06f 0208 	mvn.w	r2, #8
 80037c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2204      	movs	r2, #4
 80037ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f899 	bl	8003916 <HAL_TIM_IC_CaptureCallback>
 80037e4:	e005      	b.n	80037f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f88c 	bl	8003904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f89b 	bl	8003928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b10      	cmp	r3, #16
 8003804:	d122      	bne.n	800384c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b10      	cmp	r3, #16
 8003812:	d11b      	bne.n	800384c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f06f 0210 	mvn.w	r2, #16
 800381c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2208      	movs	r2, #8
 8003822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f86f 	bl	8003916 <HAL_TIM_IC_CaptureCallback>
 8003838:	e005      	b.n	8003846 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f862 	bl	8003904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f871 	bl	8003928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b01      	cmp	r3, #1
 8003858:	d10e      	bne.n	8003878 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b01      	cmp	r3, #1
 8003866:	d107      	bne.n	8003878 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0201 	mvn.w	r2, #1
 8003870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fd f85a 	bl	800092c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003882:	2b80      	cmp	r3, #128	; 0x80
 8003884:	d10e      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003890:	2b80      	cmp	r3, #128	; 0x80
 8003892:	d107      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800389c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8fb 	bl	8003a9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ae:	2b40      	cmp	r3, #64	; 0x40
 80038b0:	d10e      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	d107      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f835 	bl	800393a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b20      	cmp	r3, #32
 80038dc:	d10e      	bne.n	80038fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d107      	bne.n	80038fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0220 	mvn.w	r2, #32
 80038f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f8c6 	bl	8003a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038fc:	bf00      	nop
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr

08003916 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr

0800393a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a3f      	ldr	r2, [pc, #252]	; (8003a5c <TIM_Base_SetConfig+0x110>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d013      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396a:	d00f      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a3c      	ldr	r2, [pc, #240]	; (8003a60 <TIM_Base_SetConfig+0x114>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00b      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a3b      	ldr	r2, [pc, #236]	; (8003a64 <TIM_Base_SetConfig+0x118>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d007      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a3a      	ldr	r2, [pc, #232]	; (8003a68 <TIM_Base_SetConfig+0x11c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a39      	ldr	r2, [pc, #228]	; (8003a6c <TIM_Base_SetConfig+0x120>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d108      	bne.n	800399e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a2e      	ldr	r2, [pc, #184]	; (8003a5c <TIM_Base_SetConfig+0x110>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d02b      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ac:	d027      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a2b      	ldr	r2, [pc, #172]	; (8003a60 <TIM_Base_SetConfig+0x114>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d023      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a2a      	ldr	r2, [pc, #168]	; (8003a64 <TIM_Base_SetConfig+0x118>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d01f      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a29      	ldr	r2, [pc, #164]	; (8003a68 <TIM_Base_SetConfig+0x11c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d01b      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a28      	ldr	r2, [pc, #160]	; (8003a6c <TIM_Base_SetConfig+0x120>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d017      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a27      	ldr	r2, [pc, #156]	; (8003a70 <TIM_Base_SetConfig+0x124>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d013      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a26      	ldr	r2, [pc, #152]	; (8003a74 <TIM_Base_SetConfig+0x128>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00f      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a25      	ldr	r2, [pc, #148]	; (8003a78 <TIM_Base_SetConfig+0x12c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00b      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a24      	ldr	r2, [pc, #144]	; (8003a7c <TIM_Base_SetConfig+0x130>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d007      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a23      	ldr	r2, [pc, #140]	; (8003a80 <TIM_Base_SetConfig+0x134>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d003      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a22      	ldr	r2, [pc, #136]	; (8003a84 <TIM_Base_SetConfig+0x138>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d108      	bne.n	8003a10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <TIM_Base_SetConfig+0x110>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d003      	beq.n	8003a44 <TIM_Base_SetConfig+0xf8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a0b      	ldr	r2, [pc, #44]	; (8003a6c <TIM_Base_SetConfig+0x120>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d103      	bne.n	8003a4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	615a      	str	r2, [r3, #20]
}
 8003a52:	bf00      	nop
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40000400 	.word	0x40000400
 8003a64:	40000800 	.word	0x40000800
 8003a68:	40000c00 	.word	0x40000c00
 8003a6c:	40010400 	.word	0x40010400
 8003a70:	40014000 	.word	0x40014000
 8003a74:	40014400 	.word	0x40014400
 8003a78:	40014800 	.word	0x40014800
 8003a7c:	40001800 	.word	0x40001800
 8003a80:	40001c00 	.word	0x40001c00
 8003a84:	40002000 	.word	0x40002000

08003a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr

08003a9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <udp_receive_callback>:
uint8_t GATEWAY_ADDRESS[4];

/* USER CODE BEGIN 2 */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port) {
 8003aac:	b5b0      	push	{r4, r5, r7, lr}
 8003aae:	b0a2      	sub	sp, #136	; 0x88
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
	//char *remoteIP = ipaddr_ntoa(addr);

	char bufOut[100];
	uint16_t lenOut;

	WG.ProcessData(p->payload, p->len, bufOut, &lenOut, arg);
 8003aba:	4b1a      	ldr	r3, [pc, #104]	; (8003b24 <udp_receive_callback+0x78>)
 8003abc:	681c      	ldr	r4, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6858      	ldr	r0, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	8959      	ldrh	r1, [r3, #10]
 8003ac6:	f107 0516 	add.w	r5, r7, #22
 8003aca:	f107 0218 	add.w	r2, r7, #24
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	462b      	mov	r3, r5
 8003ad4:	47a0      	blx	r4

	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT, lenOut, PBUF_RAM);
 8003ad6:	8afb      	ldrh	r3, [r7, #22]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	4619      	mov	r1, r3
 8003adc:	2000      	movs	r0, #0
 8003ade:	f001 fbc3 	bl	8005268 <pbuf_alloc>
 8003ae2:	67f8      	str	r0, [r7, #124]	; 0x7c

	/* copy the data into the buffer  */
	pbuf_take(txBuf, bufOut, lenOut);
 8003ae4:	8afa      	ldrh	r2, [r7, #22]
 8003ae6:	f107 0318 	add.w	r3, r7, #24
 8003aea:	4619      	mov	r1, r3
 8003aec:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003aee:	f002 f9ab 	bl	8005e48 <pbuf_take>

	/* Connect to the remote client */
	udp_connect(upcb, addr, port);
 8003af2:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8003af6:	461a      	mov	r2, r3
 8003af8:	6839      	ldr	r1, [r7, #0]
 8003afa:	68b8      	ldr	r0, [r7, #8]
 8003afc:	f007 faec 	bl	800b0d8 <udp_connect>

	/* Send a Reply to the Client */
	udp_send(upcb, txBuf);
 8003b00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b02:	68b8      	ldr	r0, [r7, #8]
 8003b04:	f007 f94a 	bl	800ad9c <udp_send>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb);
 8003b08:	68b8      	ldr	r0, [r7, #8]
 8003b0a:	f007 fb3b 	bl	800b184 <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 8003b0e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003b10:	f001 ff22 	bl	8005958 <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f001 ff1f 	bl	8005958 <pbuf_free>
}
 8003b1a:	bf00      	nop
 8003b1c:	3780      	adds	r7, #128	; 0x80
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bdb0      	pop	{r4, r5, r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20000000 	.word	0x20000000

08003b28 <udpServer_init>:

void udpServer_init(void *rec_arg) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
	// UDP Control Block structure
	struct udp_pcb *upcb;
	err_t err;

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8003b30:	f007 fb82 	bl	800b238 <udp_new>
 8003b34:	6178      	str	r0, [r7, #20]

	/* 2. Bind the upcb to the local port */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003b36:	4b2f      	ldr	r3, [pc, #188]	; (8003bf4 <udpServer_init+0xcc>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	061a      	lsls	r2, r3, #24
 8003b3c:	4b2d      	ldr	r3, [pc, #180]	; (8003bf4 <udpServer_init+0xcc>)
 8003b3e:	785b      	ldrb	r3, [r3, #1]
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	431a      	orrs	r2, r3
 8003b44:	4b2b      	ldr	r3, [pc, #172]	; (8003bf4 <udpServer_init+0xcc>)
 8003b46:	789b      	ldrb	r3, [r3, #2]
 8003b48:	021b      	lsls	r3, r3, #8
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	4a29      	ldr	r2, [pc, #164]	; (8003bf4 <udpServer_init+0xcc>)
 8003b4e:	78d2      	ldrb	r2, [r2, #3]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	061a      	lsls	r2, r3, #24
 8003b54:	4b27      	ldr	r3, [pc, #156]	; (8003bf4 <udpServer_init+0xcc>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	0619      	lsls	r1, r3, #24
 8003b5a:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <udpServer_init+0xcc>)
 8003b5c:	785b      	ldrb	r3, [r3, #1]
 8003b5e:	041b      	lsls	r3, r3, #16
 8003b60:	4319      	orrs	r1, r3
 8003b62:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <udpServer_init+0xcc>)
 8003b64:	789b      	ldrb	r3, [r3, #2]
 8003b66:	021b      	lsls	r3, r3, #8
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	4922      	ldr	r1, [pc, #136]	; (8003bf4 <udpServer_init+0xcc>)
 8003b6c:	78c9      	ldrb	r1, [r1, #3]
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b76:	431a      	orrs	r2, r3
 8003b78:	4b1e      	ldr	r3, [pc, #120]	; (8003bf4 <udpServer_init+0xcc>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	0619      	lsls	r1, r3, #24
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <udpServer_init+0xcc>)
 8003b80:	785b      	ldrb	r3, [r3, #1]
 8003b82:	041b      	lsls	r3, r3, #16
 8003b84:	4319      	orrs	r1, r3
 8003b86:	4b1b      	ldr	r3, [pc, #108]	; (8003bf4 <udpServer_init+0xcc>)
 8003b88:	789b      	ldrb	r3, [r3, #2]
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	4919      	ldr	r1, [pc, #100]	; (8003bf4 <udpServer_init+0xcc>)
 8003b90:	78c9      	ldrb	r1, [r1, #3]
 8003b92:	430b      	orrs	r3, r1
 8003b94:	0a1b      	lsrs	r3, r3, #8
 8003b96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	4b15      	ldr	r3, [pc, #84]	; (8003bf4 <udpServer_init+0xcc>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	0619      	lsls	r1, r3, #24
 8003ba2:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <udpServer_init+0xcc>)
 8003ba4:	785b      	ldrb	r3, [r3, #1]
 8003ba6:	041b      	lsls	r3, r3, #16
 8003ba8:	4319      	orrs	r1, r3
 8003baa:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <udpServer_init+0xcc>)
 8003bac:	789b      	ldrb	r3, [r3, #2]
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	4910      	ldr	r1, [pc, #64]	; (8003bf4 <udpServer_init+0xcc>)
 8003bb4:	78c9      	ldrb	r1, [r1, #3]
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	0e1b      	lsrs	r3, r3, #24
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

	err = udp_bind(upcb, &myIPADDR, 7);  // 7 is the server UDP port
 8003bbe:	f107 030c 	add.w	r3, r7, #12
 8003bc2:	2207      	movs	r2, #7
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6978      	ldr	r0, [r7, #20]
 8003bc8:	f007 fa16 	bl	800aff8 <udp_bind>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	74fb      	strb	r3, [r7, #19]

	/* 3. Set a receive callback for the upcb */
	if (err == ERR_OK) {
 8003bd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d105      	bne.n	8003be4 <udpServer_init+0xbc>
		udp_recv(upcb, udp_receive_callback, rec_arg);
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	4907      	ldr	r1, [pc, #28]	; (8003bf8 <udpServer_init+0xd0>)
 8003bdc:	6978      	ldr	r0, [r7, #20]
 8003bde:	f007 fae7 	bl	800b1b0 <udp_recv>
	} else {
		udp_remove(upcb);
	}
}
 8003be2:	e002      	b.n	8003bea <udpServer_init+0xc2>
		udp_remove(upcb);
 8003be4:	6978      	ldr	r0, [r7, #20]
 8003be6:	f007 faf5 	bl	800b1d4 <udp_remove>
}
 8003bea:	bf00      	nop
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000184 	.word	0x20000184
 8003bf8:	08003aad 	.word	0x08003aad

08003bfc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 16;
 8003c02:	4b8d      	ldr	r3, [pc, #564]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003c04:	2210      	movs	r2, #16
 8003c06:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8003c08:	4b8b      	ldr	r3, [pc, #556]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8003c0e:	4b8a      	ldr	r3, [pc, #552]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 16;
 8003c14:	4b88      	ldr	r3, [pc, #544]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003c16:	2210      	movs	r2, #16
 8003c18:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003c1a:	4b88      	ldr	r3, [pc, #544]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003c1c:	22ff      	movs	r2, #255	; 0xff
 8003c1e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003c20:	4b86      	ldr	r3, [pc, #536]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003c22:	22ff      	movs	r2, #255	; 0xff
 8003c24:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003c26:	4b85      	ldr	r3, [pc, #532]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003c28:	22ff      	movs	r2, #255	; 0xff
 8003c2a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003c2c:	4b83      	ldr	r3, [pc, #524]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 16;
 8003c32:	4b83      	ldr	r3, [pc, #524]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003c34:	2210      	movs	r2, #16
 8003c36:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8003c38:	4b81      	ldr	r3, [pc, #516]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003c3e:	4b80      	ldr	r3, [pc, #512]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003c44:	4b7e      	ldr	r3, [pc, #504]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003c4a:	f000 fcd9 	bl	8004600 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003c4e:	4b7a      	ldr	r3, [pc, #488]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	061a      	lsls	r2, r3, #24
 8003c54:	4b78      	ldr	r3, [pc, #480]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003c56:	785b      	ldrb	r3, [r3, #1]
 8003c58:	041b      	lsls	r3, r3, #16
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	4b76      	ldr	r3, [pc, #472]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003c5e:	789b      	ldrb	r3, [r3, #2]
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	4313      	orrs	r3, r2
 8003c64:	4a74      	ldr	r2, [pc, #464]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003c66:	78d2      	ldrb	r2, [r2, #3]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	061a      	lsls	r2, r3, #24
 8003c6c:	4b72      	ldr	r3, [pc, #456]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	0619      	lsls	r1, r3, #24
 8003c72:	4b71      	ldr	r3, [pc, #452]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003c74:	785b      	ldrb	r3, [r3, #1]
 8003c76:	041b      	lsls	r3, r3, #16
 8003c78:	4319      	orrs	r1, r3
 8003c7a:	4b6f      	ldr	r3, [pc, #444]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003c7c:	789b      	ldrb	r3, [r3, #2]
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	430b      	orrs	r3, r1
 8003c82:	496d      	ldr	r1, [pc, #436]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003c84:	78c9      	ldrb	r1, [r1, #3]
 8003c86:	430b      	orrs	r3, r1
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	4b69      	ldr	r3, [pc, #420]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	0619      	lsls	r1, r3, #24
 8003c96:	4b68      	ldr	r3, [pc, #416]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003c98:	785b      	ldrb	r3, [r3, #1]
 8003c9a:	041b      	lsls	r3, r3, #16
 8003c9c:	4319      	orrs	r1, r3
 8003c9e:	4b66      	ldr	r3, [pc, #408]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003ca0:	789b      	ldrb	r3, [r3, #2]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	4964      	ldr	r1, [pc, #400]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003ca8:	78c9      	ldrb	r1, [r1, #3]
 8003caa:	430b      	orrs	r3, r1
 8003cac:	0a1b      	lsrs	r3, r3, #8
 8003cae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	4b60      	ldr	r3, [pc, #384]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	0619      	lsls	r1, r3, #24
 8003cba:	4b5f      	ldr	r3, [pc, #380]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003cbc:	785b      	ldrb	r3, [r3, #1]
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	4319      	orrs	r1, r3
 8003cc2:	4b5d      	ldr	r3, [pc, #372]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003cc4:	789b      	ldrb	r3, [r3, #2]
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	495b      	ldr	r1, [pc, #364]	; (8003e38 <MX_LWIP_Init+0x23c>)
 8003ccc:	78c9      	ldrb	r1, [r1, #3]
 8003cce:	430b      	orrs	r3, r1
 8003cd0:	0e1b      	lsrs	r3, r3, #24
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	4a5b      	ldr	r2, [pc, #364]	; (8003e44 <MX_LWIP_Init+0x248>)
 8003cd6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003cd8:	4b58      	ldr	r3, [pc, #352]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	061a      	lsls	r2, r3, #24
 8003cde:	4b57      	ldr	r3, [pc, #348]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003ce0:	785b      	ldrb	r3, [r3, #1]
 8003ce2:	041b      	lsls	r3, r3, #16
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	4b55      	ldr	r3, [pc, #340]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003ce8:	789b      	ldrb	r3, [r3, #2]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	4313      	orrs	r3, r2
 8003cee:	4a53      	ldr	r2, [pc, #332]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003cf0:	78d2      	ldrb	r2, [r2, #3]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	061a      	lsls	r2, r3, #24
 8003cf6:	4b51      	ldr	r3, [pc, #324]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	0619      	lsls	r1, r3, #24
 8003cfc:	4b4f      	ldr	r3, [pc, #316]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003cfe:	785b      	ldrb	r3, [r3, #1]
 8003d00:	041b      	lsls	r3, r3, #16
 8003d02:	4319      	orrs	r1, r3
 8003d04:	4b4d      	ldr	r3, [pc, #308]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003d06:	789b      	ldrb	r3, [r3, #2]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	430b      	orrs	r3, r1
 8003d0c:	494b      	ldr	r1, [pc, #300]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003d0e:	78c9      	ldrb	r1, [r1, #3]
 8003d10:	430b      	orrs	r3, r1
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	4b48      	ldr	r3, [pc, #288]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	0619      	lsls	r1, r3, #24
 8003d20:	4b46      	ldr	r3, [pc, #280]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003d22:	785b      	ldrb	r3, [r3, #1]
 8003d24:	041b      	lsls	r3, r3, #16
 8003d26:	4319      	orrs	r1, r3
 8003d28:	4b44      	ldr	r3, [pc, #272]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003d2a:	789b      	ldrb	r3, [r3, #2]
 8003d2c:	021b      	lsls	r3, r3, #8
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	4942      	ldr	r1, [pc, #264]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003d32:	78c9      	ldrb	r1, [r1, #3]
 8003d34:	430b      	orrs	r3, r1
 8003d36:	0a1b      	lsrs	r3, r3, #8
 8003d38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	4b3f      	ldr	r3, [pc, #252]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	0619      	lsls	r1, r3, #24
 8003d44:	4b3d      	ldr	r3, [pc, #244]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003d46:	785b      	ldrb	r3, [r3, #1]
 8003d48:	041b      	lsls	r3, r3, #16
 8003d4a:	4319      	orrs	r1, r3
 8003d4c:	4b3b      	ldr	r3, [pc, #236]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003d4e:	789b      	ldrb	r3, [r3, #2]
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	430b      	orrs	r3, r1
 8003d54:	4939      	ldr	r1, [pc, #228]	; (8003e3c <MX_LWIP_Init+0x240>)
 8003d56:	78c9      	ldrb	r1, [r1, #3]
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	0e1b      	lsrs	r3, r3, #24
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	4a3a      	ldr	r2, [pc, #232]	; (8003e48 <MX_LWIP_Init+0x24c>)
 8003d60:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003d62:	4b37      	ldr	r3, [pc, #220]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	061a      	lsls	r2, r3, #24
 8003d68:	4b35      	ldr	r3, [pc, #212]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003d6a:	785b      	ldrb	r3, [r3, #1]
 8003d6c:	041b      	lsls	r3, r3, #16
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	4b33      	ldr	r3, [pc, #204]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003d72:	789b      	ldrb	r3, [r3, #2]
 8003d74:	021b      	lsls	r3, r3, #8
 8003d76:	4313      	orrs	r3, r2
 8003d78:	4a31      	ldr	r2, [pc, #196]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003d7a:	78d2      	ldrb	r2, [r2, #3]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	061a      	lsls	r2, r3, #24
 8003d80:	4b2f      	ldr	r3, [pc, #188]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	0619      	lsls	r1, r3, #24
 8003d86:	4b2e      	ldr	r3, [pc, #184]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003d88:	785b      	ldrb	r3, [r3, #1]
 8003d8a:	041b      	lsls	r3, r3, #16
 8003d8c:	4319      	orrs	r1, r3
 8003d8e:	4b2c      	ldr	r3, [pc, #176]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003d90:	789b      	ldrb	r3, [r3, #2]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	430b      	orrs	r3, r1
 8003d96:	492a      	ldr	r1, [pc, #168]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003d98:	78c9      	ldrb	r1, [r1, #3]
 8003d9a:	430b      	orrs	r3, r1
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003da2:	431a      	orrs	r2, r3
 8003da4:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	0619      	lsls	r1, r3, #24
 8003daa:	4b25      	ldr	r3, [pc, #148]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003dac:	785b      	ldrb	r3, [r3, #1]
 8003dae:	041b      	lsls	r3, r3, #16
 8003db0:	4319      	orrs	r1, r3
 8003db2:	4b23      	ldr	r3, [pc, #140]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003db4:	789b      	ldrb	r3, [r3, #2]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	430b      	orrs	r3, r1
 8003dba:	4921      	ldr	r1, [pc, #132]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003dbc:	78c9      	ldrb	r1, [r1, #3]
 8003dbe:	430b      	orrs	r3, r1
 8003dc0:	0a1b      	lsrs	r3, r3, #8
 8003dc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	0619      	lsls	r1, r3, #24
 8003dce:	4b1c      	ldr	r3, [pc, #112]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003dd0:	785b      	ldrb	r3, [r3, #1]
 8003dd2:	041b      	lsls	r3, r3, #16
 8003dd4:	4319      	orrs	r1, r3
 8003dd6:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003dd8:	789b      	ldrb	r3, [r3, #2]
 8003dda:	021b      	lsls	r3, r3, #8
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	4918      	ldr	r1, [pc, #96]	; (8003e40 <MX_LWIP_Init+0x244>)
 8003de0:	78c9      	ldrb	r1, [r1, #3]
 8003de2:	430b      	orrs	r3, r1
 8003de4:	0e1b      	lsrs	r3, r3, #24
 8003de6:	4313      	orrs	r3, r2
 8003de8:	4a18      	ldr	r2, [pc, #96]	; (8003e4c <MX_LWIP_Init+0x250>)
 8003dea:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003dec:	4b18      	ldr	r3, [pc, #96]	; (8003e50 <MX_LWIP_Init+0x254>)
 8003dee:	9302      	str	r3, [sp, #8]
 8003df0:	4b18      	ldr	r3, [pc, #96]	; (8003e54 <MX_LWIP_Init+0x258>)
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	2300      	movs	r3, #0
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <MX_LWIP_Init+0x250>)
 8003dfa:	4a13      	ldr	r2, [pc, #76]	; (8003e48 <MX_LWIP_Init+0x24c>)
 8003dfc:	4911      	ldr	r1, [pc, #68]	; (8003e44 <MX_LWIP_Init+0x248>)
 8003dfe:	4816      	ldr	r0, [pc, #88]	; (8003e58 <MX_LWIP_Init+0x25c>)
 8003e00:	f001 f89c 	bl	8004f3c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003e04:	4814      	ldr	r0, [pc, #80]	; (8003e58 <MX_LWIP_Init+0x25c>)
 8003e06:	f001 f97b 	bl	8005100 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003e0a:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <MX_LWIP_Init+0x25c>)
 8003e0c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003e10:	089b      	lsrs	r3, r3, #2
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003e1c:	480e      	ldr	r0, [pc, #56]	; (8003e58 <MX_LWIP_Init+0x25c>)
 8003e1e:	f001 f97d 	bl	800511c <netif_set_up>
 8003e22:	e002      	b.n	8003e2a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003e24:	480c      	ldr	r0, [pc, #48]	; (8003e58 <MX_LWIP_Init+0x25c>)
 8003e26:	f001 f9bd 	bl	80051a4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003e2a:	490c      	ldr	r1, [pc, #48]	; (8003e5c <MX_LWIP_Init+0x260>)
 8003e2c:	480a      	ldr	r0, [pc, #40]	; (8003e58 <MX_LWIP_Init+0x25c>)
 8003e2e:	f001 f9db 	bl	80051e8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003e32:	bf00      	nop
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20000184 	.word	0x20000184
 8003e3c:	20000188 	.word	0x20000188
 8003e40:	2000018c 	.word	0x2000018c
 8003e44:	20000178 	.word	0x20000178
 8003e48:	2000017c 	.word	0x2000017c
 8003e4c:	20000180 	.word	0x20000180
 8003e50:	0800d75d 	.word	0x0800d75d
 8003e54:	08004441 	.word	0x08004441
 8003e58:	20000144 	.word	0x20000144
 8003e5c:	080044ad 	.word	0x080044ad

08003e60 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003e64:	4803      	ldr	r0, [pc, #12]	; (8003e74 <MX_LWIP_Process+0x14>)
 8003e66:	f000 facb 	bl	8004400 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8003e6a:	f006 fdad 	bl	800a9c8 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000144 	.word	0x20000144

08003e78 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08e      	sub	sp, #56	; 0x38
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	60da      	str	r2, [r3, #12]
 8003e8e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a55      	ldr	r2, [pc, #340]	; (8003fec <HAL_ETH_MspInit+0x174>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	f040 80a4 	bne.w	8003fe4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	623b      	str	r3, [r7, #32]
 8003ea0:	4b53      	ldr	r3, [pc, #332]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	4a52      	ldr	r2, [pc, #328]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8003eac:	4b50      	ldr	r3, [pc, #320]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb4:	623b      	str	r3, [r7, #32]
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	4b4c      	ldr	r3, [pc, #304]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	4a4b      	ldr	r2, [pc, #300]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003ec2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec8:	4b49      	ldr	r3, [pc, #292]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61bb      	str	r3, [r7, #24]
 8003ed8:	4b45      	ldr	r3, [pc, #276]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	4a44      	ldr	r2, [pc, #272]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003ede:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee4:	4b42      	ldr	r3, [pc, #264]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	4b3e      	ldr	r3, [pc, #248]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	4a3d      	ldr	r2, [pc, #244]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003efa:	f043 0304 	orr.w	r3, r3, #4
 8003efe:	6313      	str	r3, [r2, #48]	; 0x30
 8003f00:	4b3b      	ldr	r3, [pc, #236]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	4b37      	ldr	r3, [pc, #220]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	4a36      	ldr	r2, [pc, #216]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1c:	4b34      	ldr	r3, [pc, #208]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	4b30      	ldr	r3, [pc, #192]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	4a2f      	ldr	r2, [pc, #188]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003f32:	f043 0302 	orr.w	r3, r3, #2
 8003f36:	6313      	str	r3, [r2, #48]	; 0x30
 8003f38:	4b2d      	ldr	r3, [pc, #180]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f44:	2300      	movs	r3, #0
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	4b29      	ldr	r3, [pc, #164]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	4a28      	ldr	r2, [pc, #160]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f52:	6313      	str	r3, [r2, #48]	; 0x30
 8003f54:	4b26      	ldr	r3, [pc, #152]	; (8003ff0 <HAL_ETH_MspInit+0x178>)
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003f60:	2332      	movs	r3, #50	; 0x32
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f64:	2302      	movs	r3, #2
 8003f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003f70:	230b      	movs	r3, #11
 8003f72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f78:	4619      	mov	r1, r3
 8003f7a:	481e      	ldr	r0, [pc, #120]	; (8003ff4 <HAL_ETH_MspInit+0x17c>)
 8003f7c:	f7fe fc9c 	bl	80028b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003f80:	2386      	movs	r3, #134	; 0x86
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f84:	2302      	movs	r3, #2
 8003f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003f90:	230b      	movs	r3, #11
 8003f92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4817      	ldr	r0, [pc, #92]	; (8003ff8 <HAL_ETH_MspInit+0x180>)
 8003f9c:	f7fe fc8c 	bl	80028b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003fb2:	230b      	movs	r3, #11
 8003fb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fba:	4619      	mov	r1, r3
 8003fbc:	480f      	ldr	r0, [pc, #60]	; (8003ffc <HAL_ETH_MspInit+0x184>)
 8003fbe:	f7fe fc7b 	bl	80028b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003fc2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003fd4:	230b      	movs	r3, #11
 8003fd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4808      	ldr	r0, [pc, #32]	; (8004000 <HAL_ETH_MspInit+0x188>)
 8003fe0:	f7fe fc6a 	bl	80028b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003fe4:	bf00      	nop
 8003fe6:	3738      	adds	r7, #56	; 0x38
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40028000 	.word	0x40028000
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	40020800 	.word	0x40020800
 8003ff8:	40020000 	.word	0x40020000
 8003ffc:	40020400 	.word	0x40020400
 8004000:	40021800 	.word	0x40021800

08004004 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004010:	4b4d      	ldr	r3, [pc, #308]	; (8004148 <low_level_init+0x144>)
 8004012:	4a4e      	ldr	r2, [pc, #312]	; (800414c <low_level_init+0x148>)
 8004014:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004016:	4b4c      	ldr	r3, [pc, #304]	; (8004148 <low_level_init+0x144>)
 8004018:	2201      	movs	r2, #1
 800401a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800401c:	4b4a      	ldr	r3, [pc, #296]	; (8004148 <low_level_init+0x144>)
 800401e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004022:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004024:	4b48      	ldr	r3, [pc, #288]	; (8004148 <low_level_init+0x144>)
 8004026:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800402a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800402c:	4b46      	ldr	r3, [pc, #280]	; (8004148 <low_level_init+0x144>)
 800402e:	2200      	movs	r2, #0
 8004030:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x56;
 8004032:	2356      	movs	r3, #86	; 0x56
 8004034:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0xCD;
 8004036:	23cd      	movs	r3, #205	; 0xcd
 8004038:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x43;
 800403a:	2343      	movs	r3, #67	; 0x43
 800403c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x54;
 800403e:	2354      	movs	r3, #84	; 0x54
 8004040:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x4F;
 8004042:	234f      	movs	r3, #79	; 0x4f
 8004044:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x52;
 8004046:	2352      	movs	r3, #82	; 0x52
 8004048:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800404a:	4a3f      	ldr	r2, [pc, #252]	; (8004148 <low_level_init+0x144>)
 800404c:	f107 0308 	add.w	r3, r7, #8
 8004050:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004052:	4b3d      	ldr	r3, [pc, #244]	; (8004148 <low_level_init+0x144>)
 8004054:	2200      	movs	r2, #0
 8004056:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004058:	4b3b      	ldr	r3, [pc, #236]	; (8004148 <low_level_init+0x144>)
 800405a:	2200      	movs	r2, #0
 800405c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800405e:	4b3a      	ldr	r3, [pc, #232]	; (8004148 <low_level_init+0x144>)
 8004060:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004064:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004066:	4838      	ldr	r0, [pc, #224]	; (8004148 <low_level_init+0x144>)
 8004068:	f7fd fb2e 	bl	80016c8 <HAL_ETH_Init>
 800406c:	4603      	mov	r3, r0
 800406e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004070:	7dfb      	ldrb	r3, [r7, #23]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d108      	bne.n	8004088 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800407c:	f043 0304 	orr.w	r3, r3, #4
 8004080:	b2da      	uxtb	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004088:	2304      	movs	r3, #4
 800408a:	4a31      	ldr	r2, [pc, #196]	; (8004150 <low_level_init+0x14c>)
 800408c:	4931      	ldr	r1, [pc, #196]	; (8004154 <low_level_init+0x150>)
 800408e:	482e      	ldr	r0, [pc, #184]	; (8004148 <low_level_init+0x144>)
 8004090:	f7fd fca6 	bl	80019e0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004094:	2304      	movs	r3, #4
 8004096:	4a30      	ldr	r2, [pc, #192]	; (8004158 <low_level_init+0x154>)
 8004098:	4930      	ldr	r1, [pc, #192]	; (800415c <low_level_init+0x158>)
 800409a:	482b      	ldr	r0, [pc, #172]	; (8004148 <low_level_init+0x144>)
 800409c:	f7fd fd07 	bl	8001aae <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2206      	movs	r2, #6
 80040a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80040a8:	4b27      	ldr	r3, [pc, #156]	; (8004148 <low_level_init+0x144>)
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	781a      	ldrb	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80040b4:	4b24      	ldr	r3, [pc, #144]	; (8004148 <low_level_init+0x144>)
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	785a      	ldrb	r2, [r3, #1]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80040c0:	4b21      	ldr	r3, [pc, #132]	; (8004148 <low_level_init+0x144>)
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	789a      	ldrb	r2, [r3, #2]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80040cc:	4b1e      	ldr	r3, [pc, #120]	; (8004148 <low_level_init+0x144>)
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	78da      	ldrb	r2, [r3, #3]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80040d8:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <low_level_init+0x144>)
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	791a      	ldrb	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80040e4:	4b18      	ldr	r3, [pc, #96]	; (8004148 <low_level_init+0x144>)
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	795a      	ldrb	r2, [r3, #5]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80040f6:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80040fe:	f043 030a 	orr.w	r3, r3, #10
 8004102:	b2da      	uxtb	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800410a:	480f      	ldr	r0, [pc, #60]	; (8004148 <low_level_init+0x144>)
 800410c:	f7fd ff73 	bl	8001ff6 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004110:	f107 0310 	add.w	r3, r7, #16
 8004114:	461a      	mov	r2, r3
 8004116:	211d      	movs	r1, #29
 8004118:	480b      	ldr	r0, [pc, #44]	; (8004148 <low_level_init+0x144>)
 800411a:	f7fd fe9e 	bl	8001e5a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f043 030b 	orr.w	r3, r3, #11
 8004124:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	461a      	mov	r2, r3
 800412a:	211d      	movs	r1, #29
 800412c:	4806      	ldr	r0, [pc, #24]	; (8004148 <low_level_init+0x144>)
 800412e:	f7fd fefc 	bl	8001f2a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004132:	f107 0310 	add.w	r3, r7, #16
 8004136:	461a      	mov	r2, r3
 8004138:	211d      	movs	r1, #29
 800413a:	4803      	ldr	r0, [pc, #12]	; (8004148 <low_level_init+0x144>)
 800413c:	f7fd fe8d 	bl	8001e5a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004140:	bf00      	nop
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20003230 	.word	0x20003230
 800414c:	40028000 	.word	0x40028000
 8004150:	20001a60 	.word	0x20001a60
 8004154:	20000210 	.word	0x20000210
 8004158:	20000290 	.word	0x20000290
 800415c:	20000190 	.word	0x20000190

08004160 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	; 0x28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800416a:	4b4b      	ldr	r3, [pc, #300]	; (8004298 <low_level_output+0x138>)
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004182:	4b45      	ldr	r3, [pc, #276]	; (8004298 <low_level_output+0x138>)
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	623b      	str	r3, [r7, #32]
 8004190:	e05a      	b.n	8004248 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	da03      	bge.n	80041a2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800419a:	23f8      	movs	r3, #248	; 0xf8
 800419c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80041a0:	e05c      	b.n	800425c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	895b      	ldrh	r3, [r3, #10]
 80041a6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80041ac:	e02f      	b.n	800420e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	18d0      	adds	r0, r2, r3
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	18d1      	adds	r1, r2, r3
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80041c2:	3304      	adds	r3, #4
 80041c4:	461a      	mov	r2, r3
 80041c6:	f009 fc09 	bl	800d9dc <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	da03      	bge.n	80041e0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80041d8:	23f8      	movs	r3, #248	; 0xf8
 80041da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80041de:	e03d      	b.n	800425c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4413      	add	r3, r2
 80041ec:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80041f0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80041fc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004208:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4413      	add	r3, r2
 8004214:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004218:	4293      	cmp	r3, r2
 800421a:	d8c8      	bhi.n	80041ae <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	18d0      	adds	r0, r2, r3
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	4413      	add	r3, r2
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4619      	mov	r1, r3
 800422e:	f009 fbd5 	bl	800d9dc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	623b      	str	r3, [r7, #32]
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1a1      	bne.n	8004192 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800424e:	6979      	ldr	r1, [r7, #20]
 8004250:	4811      	ldr	r0, [pc, #68]	; (8004298 <low_level_output+0x138>)
 8004252:	f7fd fc97 	bl	8001b84 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800425c:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <low_level_output+0x138>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00d      	beq.n	800428a <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800426e:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <low_level_output+0x138>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004276:	461a      	mov	r2, r3
 8004278:	2320      	movs	r3, #32
 800427a:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <low_level_output+0x138>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004284:	461a      	mov	r2, r3
 8004286:	2300      	movs	r3, #0
 8004288:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800428a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800428e:	4618      	mov	r0, r3
 8004290:	3728      	adds	r7, #40	; 0x28
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20003230 	.word	0x20003230

0800429c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08c      	sub	sp, #48	; 0x30
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80042ac:	2300      	movs	r3, #0
 80042ae:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80042c0:	484e      	ldr	r0, [pc, #312]	; (80043fc <low_level_input+0x160>)
 80042c2:	f7fd fd47 	bl	8001d54 <HAL_ETH_GetReceivedFrame>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <low_level_input+0x34>

    return NULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	e090      	b.n	80043f2 <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80042d0:	4b4a      	ldr	r3, [pc, #296]	; (80043fc <low_level_input+0x160>)
 80042d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80042d6:	4b49      	ldr	r3, [pc, #292]	; (80043fc <low_level_input+0x160>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80042dc:	89fb      	ldrh	r3, [r7, #14]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d006      	beq.n	80042f0 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80042e2:	89fb      	ldrh	r3, [r7, #14]
 80042e4:	2203      	movs	r2, #3
 80042e6:	4619      	mov	r1, r3
 80042e8:	2004      	movs	r0, #4
 80042ea:	f000 ffbd 	bl	8005268 <pbuf_alloc>
 80042ee:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80042f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d04b      	beq.n	800438e <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80042f6:	4b41      	ldr	r3, [pc, #260]	; (80043fc <low_level_input+0x160>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28
 8004304:	e040      	b.n	8004388 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	895b      	ldrh	r3, [r3, #10]
 800430a:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004310:	e021      	b.n	8004356 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	18d0      	adds	r0, r2, r3
 800431a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	18d1      	adds	r1, r2, r3
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004326:	3304      	adds	r3, #4
 8004328:	461a      	mov	r2, r3
 800432a:	f009 fb57 	bl	800d9dc <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	4413      	add	r3, r2
 8004340:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004344:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004350:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	4413      	add	r3, r2
 800435c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004360:	4293      	cmp	r3, r2
 8004362:	d8d6      	bhi.n	8004312 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	18d0      	adds	r0, r2, r3
 800436c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	4413      	add	r3, r2
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4619      	mov	r1, r3
 8004376:	f009 fb31 	bl	800d9dc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	4413      	add	r3, r2
 8004380:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	62bb      	str	r3, [r7, #40]	; 0x28
 8004388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1bb      	bne.n	8004306 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800438e:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <low_level_input+0x160>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004394:	2300      	movs	r3, #0
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	e00b      	b.n	80043b2 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	3301      	adds	r3, #1
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	4b12      	ldr	r3, [pc, #72]	; (80043fc <low_level_input+0x160>)
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d3ee      	bcc.n	800439a <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <low_level_input+0x160>)
 80043be:	2200      	movs	r2, #0
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80043c2:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <low_level_input+0x160>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00d      	beq.n	80043f0 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80043d4:	4b09      	ldr	r3, [pc, #36]	; (80043fc <low_level_input+0x160>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043dc:	461a      	mov	r2, r3
 80043de:	2380      	movs	r3, #128	; 0x80
 80043e0:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80043e2:	4b06      	ldr	r3, [pc, #24]	; (80043fc <low_level_input+0x160>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ea:	461a      	mov	r2, r3
 80043ec:	2300      	movs	r3, #0
 80043ee:	6093      	str	r3, [r2, #8]
  }
  return p;
 80043f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3730      	adds	r7, #48	; 0x30
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20003230 	.word	0x20003230

08004400 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff ff47 	bl	800429c <low_level_input>
 800440e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d010      	beq.n	8004438 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	4798      	blx	r3
 8004420:	4603      	mov	r3, r0
 8004422:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8004424:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d006      	beq.n	800443a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f001 fa93 	bl	8005958 <pbuf_free>
    p = NULL;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	e000      	b.n	800443a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8004438:	bf00      	nop
  }
}
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <ethernetif_init+0x1c>
 800444e:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <ethernetif_init+0x48>)
 8004450:	f44f 7205 	mov.w	r2, #532	; 0x214
 8004454:	490d      	ldr	r1, [pc, #52]	; (800448c <ethernetif_init+0x4c>)
 8004456:	480e      	ldr	r0, [pc, #56]	; (8004490 <ethernetif_init+0x50>)
 8004458:	f009 fad6 	bl	800da08 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2273      	movs	r2, #115	; 0x73
 8004460:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2274      	movs	r2, #116	; 0x74
 8004468:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a09      	ldr	r2, [pc, #36]	; (8004494 <ethernetif_init+0x54>)
 8004470:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a08      	ldr	r2, [pc, #32]	; (8004498 <ethernetif_init+0x58>)
 8004476:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff fdc3 	bl	8004004 <low_level_init>

  return ERR_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	0800ed18 	.word	0x0800ed18
 800448c:	0800ed34 	.word	0x0800ed34
 8004490:	0800ed44 	.word	0x0800ed44
 8004494:	0800bb39 	.word	0x0800bb39
 8004498:	08004161 	.word	0x08004161

0800449c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80044a0:	f7fc fcb6 	bl	8000e10 <HAL_GetTick>
 80044a4:	4603      	mov	r3, r0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80044c2:	089b      	lsrs	r3, r3, #2
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d05d      	beq.n	800458a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80044ce:	4b34      	ldr	r3, [pc, #208]	; (80045a0 <ethernetif_update_config+0xf4>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d03f      	beq.n	8004556 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80044d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044da:	2100      	movs	r1, #0
 80044dc:	4830      	ldr	r0, [pc, #192]	; (80045a0 <ethernetif_update_config+0xf4>)
 80044de:	f7fd fd24 	bl	8001f2a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80044e2:	f7fc fc95 	bl	8000e10 <HAL_GetTick>
 80044e6:	4603      	mov	r3, r0
 80044e8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80044ea:	f107 0308 	add.w	r3, r7, #8
 80044ee:	461a      	mov	r2, r3
 80044f0:	2101      	movs	r1, #1
 80044f2:	482b      	ldr	r0, [pc, #172]	; (80045a0 <ethernetif_update_config+0xf4>)
 80044f4:	f7fd fcb1 	bl	8001e5a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80044f8:	f7fc fc8a 	bl	8000e10 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004506:	d828      	bhi.n	800455a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0eb      	beq.n	80044ea <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004512:	f107 0308 	add.w	r3, r7, #8
 8004516:	461a      	mov	r2, r3
 8004518:	2110      	movs	r1, #16
 800451a:	4821      	ldr	r0, [pc, #132]	; (80045a0 <ethernetif_update_config+0xf4>)
 800451c:	f7fd fc9d 	bl	8001e5a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	d004      	beq.n	8004534 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800452a:	4b1d      	ldr	r3, [pc, #116]	; (80045a0 <ethernetif_update_config+0xf4>)
 800452c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	e002      	b.n	800453a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004534:	4b1a      	ldr	r3, [pc, #104]	; (80045a0 <ethernetif_update_config+0xf4>)
 8004536:	2200      	movs	r2, #0
 8004538:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004544:	4b16      	ldr	r3, [pc, #88]	; (80045a0 <ethernetif_update_config+0xf4>)
 8004546:	2200      	movs	r2, #0
 8004548:	609a      	str	r2, [r3, #8]
 800454a:	e016      	b.n	800457a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800454c:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <ethernetif_update_config+0xf4>)
 800454e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	e011      	b.n	800457a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <ethernetif_update_config+0xb0>
          goto error;
 800455a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800455c:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <ethernetif_update_config+0xf4>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	08db      	lsrs	r3, r3, #3
 8004562:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004564:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <ethernetif_update_config+0xf4>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	085b      	lsrs	r3, r3, #1
 800456a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800456c:	4313      	orrs	r3, r2
 800456e:	b29b      	uxth	r3, r3
 8004570:	461a      	mov	r2, r3
 8004572:	2100      	movs	r1, #0
 8004574:	480a      	ldr	r0, [pc, #40]	; (80045a0 <ethernetif_update_config+0xf4>)
 8004576:	f7fd fcd8 	bl	8001f2a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800457a:	2100      	movs	r1, #0
 800457c:	4808      	ldr	r0, [pc, #32]	; (80045a0 <ethernetif_update_config+0xf4>)
 800457e:	f7fd fd99 	bl	80020b4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004582:	4807      	ldr	r0, [pc, #28]	; (80045a0 <ethernetif_update_config+0xf4>)
 8004584:	f7fd fd37 	bl	8001ff6 <HAL_ETH_Start>
 8004588:	e002      	b.n	8004590 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800458a:	4805      	ldr	r0, [pc, #20]	; (80045a0 <ethernetif_update_config+0xf4>)
 800458c:	f7fd fd62 	bl	8002054 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f807 	bl	80045a4 <ethernetif_notify_conn_changed>
}
 8004596:	bf00      	nop
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20003230 	.word	0x20003230

080045a4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr

080045b6 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	4603      	mov	r3, r0
 80045be:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	ba5b      	rev16	r3, r3
 80045c4:	b29b      	uxth	r3, r3
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr

080045d0 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	061a      	lsls	r2, r3, #24
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	0a1b      	lsrs	r3, r3, #8
 80045ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	0e1b      	lsrs	r3, r3, #24
 80045f4:	4313      	orrs	r3, r2
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 800460a:	f001 fcaf 	bl	8005f6c <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800460e:	f000 f8a7 	bl	8004760 <mem_init>
  memp_init();
 8004612:	f000 fba5 	bl	8004d60 <memp_init>
  pbuf_init();
  netif_init();
 8004616:	f000 fc8b 	bl	8004f30 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800461a:	f006 fa27 	bl	800aa6c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800461e:	f001 fcab 	bl	8005f78 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8004622:	f006 f905 	bl	800a830 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004638:	4b40      	ldr	r3, [pc, #256]	; (800473c <plug_holes+0x10c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	429a      	cmp	r2, r3
 8004640:	d206      	bcs.n	8004650 <plug_holes+0x20>
 8004642:	4b3f      	ldr	r3, [pc, #252]	; (8004740 <plug_holes+0x110>)
 8004644:	f240 125d 	movw	r2, #349	; 0x15d
 8004648:	493e      	ldr	r1, [pc, #248]	; (8004744 <plug_holes+0x114>)
 800464a:	483f      	ldr	r0, [pc, #252]	; (8004748 <plug_holes+0x118>)
 800464c:	f009 f9dc 	bl	800da08 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004650:	4b3e      	ldr	r3, [pc, #248]	; (800474c <plug_holes+0x11c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	429a      	cmp	r2, r3
 8004658:	d306      	bcc.n	8004668 <plug_holes+0x38>
 800465a:	4b39      	ldr	r3, [pc, #228]	; (8004740 <plug_holes+0x110>)
 800465c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8004660:	493b      	ldr	r1, [pc, #236]	; (8004750 <plug_holes+0x120>)
 8004662:	4839      	ldr	r0, [pc, #228]	; (8004748 <plug_holes+0x118>)
 8004664:	f009 f9d0 	bl	800da08 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	791b      	ldrb	r3, [r3, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d006      	beq.n	800467e <plug_holes+0x4e>
 8004670:	4b33      	ldr	r3, [pc, #204]	; (8004740 <plug_holes+0x110>)
 8004672:	f240 125f 	movw	r2, #351	; 0x15f
 8004676:	4937      	ldr	r1, [pc, #220]	; (8004754 <plug_holes+0x124>)
 8004678:	4833      	ldr	r0, [pc, #204]	; (8004748 <plug_holes+0x118>)
 800467a:	f009 f9c5 	bl	800da08 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004686:	d906      	bls.n	8004696 <plug_holes+0x66>
 8004688:	4b2d      	ldr	r3, [pc, #180]	; (8004740 <plug_holes+0x110>)
 800468a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800468e:	4932      	ldr	r1, [pc, #200]	; (8004758 <plug_holes+0x128>)
 8004690:	482d      	ldr	r0, [pc, #180]	; (8004748 <plug_holes+0x118>)
 8004692:	f009 f9b9 	bl	800da08 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8004696:	4b29      	ldr	r3, [pc, #164]	; (800473c <plug_holes+0x10c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	8812      	ldrh	r2, [r2, #0]
 800469e:	4413      	add	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d01f      	beq.n	80046ea <plug_holes+0xba>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	791b      	ldrb	r3, [r3, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d11b      	bne.n	80046ea <plug_holes+0xba>
 80046b2:	4b26      	ldr	r3, [pc, #152]	; (800474c <plug_holes+0x11c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d016      	beq.n	80046ea <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80046bc:	4b27      	ldr	r3, [pc, #156]	; (800475c <plug_holes+0x12c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d102      	bne.n	80046cc <plug_holes+0x9c>
      lfree = mem;
 80046c6:	4a25      	ldr	r2, [pc, #148]	; (800475c <plug_holes+0x12c>)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	881a      	ldrh	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80046d4:	4b19      	ldr	r3, [pc, #100]	; (800473c <plug_holes+0x10c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	1ad1      	subs	r1, r2, r3
 80046dc:	4b17      	ldr	r3, [pc, #92]	; (800473c <plug_holes+0x10c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	8812      	ldrh	r2, [r2, #0]
 80046e4:	4413      	add	r3, r2
 80046e6:	b28a      	uxth	r2, r1
 80046e8:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80046ea:	4b14      	ldr	r3, [pc, #80]	; (800473c <plug_holes+0x10c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	8852      	ldrh	r2, [r2, #2]
 80046f2:	4413      	add	r3, r2
 80046f4:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d01a      	beq.n	8004734 <plug_holes+0x104>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	791b      	ldrb	r3, [r3, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d116      	bne.n	8004734 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004706:	4b15      	ldr	r3, [pc, #84]	; (800475c <plug_holes+0x12c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	429a      	cmp	r2, r3
 800470e:	d102      	bne.n	8004716 <plug_holes+0xe6>
      lfree = pmem;
 8004710:	4a12      	ldr	r2, [pc, #72]	; (800475c <plug_holes+0x12c>)
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	881a      	ldrh	r2, [r3, #0]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800471e:	4b07      	ldr	r3, [pc, #28]	; (800473c <plug_holes+0x10c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	1ad1      	subs	r1, r2, r3
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <plug_holes+0x10c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	8812      	ldrh	r2, [r2, #0]
 800472e:	4413      	add	r3, r2
 8004730:	b28a      	uxth	r2, r1
 8004732:	805a      	strh	r2, [r3, #2]
  }
}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	200038e4 	.word	0x200038e4
 8004740:	0800ed6c 	.word	0x0800ed6c
 8004744:	0800ed9c 	.word	0x0800ed9c
 8004748:	0800edb4 	.word	0x0800edb4
 800474c:	200038e8 	.word	0x200038e8
 8004750:	0800eddc 	.word	0x0800eddc
 8004754:	0800edf8 	.word	0x0800edf8
 8004758:	0800ee14 	.word	0x0800ee14
 800475c:	200038ec 	.word	0x200038ec

08004760 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004766:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <mem_init+0x74>)
 8004768:	3303      	adds	r3, #3
 800476a:	f023 0303 	bic.w	r3, r3, #3
 800476e:	461a      	mov	r2, r3
 8004770:	4b19      	ldr	r3, [pc, #100]	; (80047d8 <mem_init+0x78>)
 8004772:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004774:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <mem_init+0x78>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004780:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800478e:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <mem_init+0x78>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8004796:	4a11      	ldr	r2, [pc, #68]	; (80047dc <mem_init+0x7c>)
 8004798:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800479a:	4b10      	ldr	r3, [pc, #64]	; (80047dc <mem_init+0x7c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2201      	movs	r2, #1
 80047a0:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80047a2:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <mem_init+0x7c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80047aa:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80047ac:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <mem_init+0x7c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80047b4:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80047b6:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <mem_init+0x78>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a09      	ldr	r2, [pc, #36]	; (80047e0 <mem_init+0x80>)
 80047bc:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 80047be:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <mem_init+0x84>)
 80047c0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80047c4:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	20003290 	.word	0x20003290
 80047d8:	200038e4 	.word	0x200038e4
 80047dc:	200038e8 	.word	0x200038e8
 80047e0:	200038ec 	.word	0x200038ec
 80047e4:	20006840 	.word	0x20006840

080047e8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d05d      	beq.n	80048b2 <mem_free+0xca>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d006      	beq.n	800480e <mem_free+0x26>
 8004800:	4b2e      	ldr	r3, [pc, #184]	; (80048bc <mem_free+0xd4>)
 8004802:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8004806:	492e      	ldr	r1, [pc, #184]	; (80048c0 <mem_free+0xd8>)
 8004808:	482e      	ldr	r0, [pc, #184]	; (80048c4 <mem_free+0xdc>)
 800480a:	f009 f8fd 	bl	800da08 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800480e:	4b2e      	ldr	r3, [pc, #184]	; (80048c8 <mem_free+0xe0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	429a      	cmp	r2, r3
 8004816:	d304      	bcc.n	8004822 <mem_free+0x3a>
 8004818:	4b2c      	ldr	r3, [pc, #176]	; (80048cc <mem_free+0xe4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	429a      	cmp	r2, r3
 8004820:	d306      	bcc.n	8004830 <mem_free+0x48>
 8004822:	4b26      	ldr	r3, [pc, #152]	; (80048bc <mem_free+0xd4>)
 8004824:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8004828:	4929      	ldr	r1, [pc, #164]	; (80048d0 <mem_free+0xe8>)
 800482a:	4826      	ldr	r0, [pc, #152]	; (80048c4 <mem_free+0xdc>)
 800482c:	f009 f8ec 	bl	800da08 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004830:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <mem_free+0xe0>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	429a      	cmp	r2, r3
 8004838:	d304      	bcc.n	8004844 <mem_free+0x5c>
 800483a:	4b24      	ldr	r3, [pc, #144]	; (80048cc <mem_free+0xe4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	d308      	bcc.n	8004856 <mem_free+0x6e>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8004844:	4b23      	ldr	r3, [pc, #140]	; (80048d4 <mem_free+0xec>)
 8004846:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800484a:	3301      	adds	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	4b21      	ldr	r3, [pc, #132]	; (80048d4 <mem_free+0xec>)
 8004850:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return;
 8004854:	e02e      	b.n	80048b4 <mem_free+0xcc>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3b08      	subs	r3, #8
 800485a:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	791b      	ldrb	r3, [r3, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d106      	bne.n	8004872 <mem_free+0x8a>
 8004864:	4b15      	ldr	r3, [pc, #84]	; (80048bc <mem_free+0xd4>)
 8004866:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800486a:	491b      	ldr	r1, [pc, #108]	; (80048d8 <mem_free+0xf0>)
 800486c:	4815      	ldr	r0, [pc, #84]	; (80048c4 <mem_free+0xdc>)
 800486e:	f009 f8cb 	bl	800da08 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004878:	4b18      	ldr	r3, [pc, #96]	; (80048dc <mem_free+0xf4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	429a      	cmp	r2, r3
 8004880:	d202      	bcs.n	8004888 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004882:	4a16      	ldr	r2, [pc, #88]	; (80048dc <mem_free+0xf4>)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8004888:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <mem_free+0xec>)
 800488a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800488e:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <mem_free+0xe0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68f9      	ldr	r1, [r7, #12]
 8004894:	1acb      	subs	r3, r1, r3
 8004896:	b299      	uxth	r1, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	1acb      	subs	r3, r1, r3
 800489e:	b29b      	uxth	r3, r3
 80048a0:	4413      	add	r3, r2
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <mem_free+0xec>)
 80048a6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f7ff fec0 	bl	8004630 <plug_holes>
 80048b0:	e000      	b.n	80048b4 <mem_free+0xcc>
    return;
 80048b2:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	0800ed6c 	.word	0x0800ed6c
 80048c0:	0800ee40 	.word	0x0800ee40
 80048c4:	0800edb4 	.word	0x0800edb4
 80048c8:	200038e4 	.word	0x200038e4
 80048cc:	200038e8 	.word	0x200038e8
 80048d0:	0800ee64 	.word	0x0800ee64
 80048d4:	20006840 	.word	0x20006840
 80048d8:	0800ee7c 	.word	0x0800ee7c
 80048dc:	200038ec 	.word	0x200038ec

080048e0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80048ec:	887b      	ldrh	r3, [r7, #2]
 80048ee:	3303      	adds	r3, #3
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 80048f8:	887b      	ldrh	r3, [r7, #2]
 80048fa:	2b0b      	cmp	r3, #11
 80048fc:	d801      	bhi.n	8004902 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80048fe:	230c      	movs	r3, #12
 8004900:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8004902:	887b      	ldrh	r3, [r7, #2]
 8004904:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004908:	d901      	bls.n	800490e <mem_trim+0x2e>
    return NULL;
 800490a:	2300      	movs	r3, #0
 800490c:	e0d1      	b.n	8004ab2 <mem_trim+0x1d2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800490e:	4b6b      	ldr	r3, [pc, #428]	; (8004abc <mem_trim+0x1dc>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	429a      	cmp	r2, r3
 8004916:	d304      	bcc.n	8004922 <mem_trim+0x42>
 8004918:	4b69      	ldr	r3, [pc, #420]	; (8004ac0 <mem_trim+0x1e0>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	429a      	cmp	r2, r3
 8004920:	d306      	bcc.n	8004930 <mem_trim+0x50>
 8004922:	4b68      	ldr	r3, [pc, #416]	; (8004ac4 <mem_trim+0x1e4>)
 8004924:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004928:	4967      	ldr	r1, [pc, #412]	; (8004ac8 <mem_trim+0x1e8>)
 800492a:	4868      	ldr	r0, [pc, #416]	; (8004acc <mem_trim+0x1ec>)
 800492c:	f009 f86c 	bl	800da08 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004930:	4b62      	ldr	r3, [pc, #392]	; (8004abc <mem_trim+0x1dc>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	429a      	cmp	r2, r3
 8004938:	d304      	bcc.n	8004944 <mem_trim+0x64>
 800493a:	4b61      	ldr	r3, [pc, #388]	; (8004ac0 <mem_trim+0x1e0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	d309      	bcc.n	8004958 <mem_trim+0x78>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8004944:	4b62      	ldr	r3, [pc, #392]	; (8004ad0 <mem_trim+0x1f0>)
 8004946:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800494a:	3301      	adds	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	4b60      	ldr	r3, [pc, #384]	; (8004ad0 <mem_trim+0x1f0>)
 8004950:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	e0ac      	b.n	8004ab2 <mem_trim+0x1d2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3b08      	subs	r3, #8
 800495c:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800495e:	4b57      	ldr	r3, [pc, #348]	; (8004abc <mem_trim+0x1dc>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	881a      	ldrh	r2, [r3, #0]
 800496c:	8a7b      	ldrh	r3, [r7, #18]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b08      	subs	r3, #8
 8004974:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004976:	887a      	ldrh	r2, [r7, #2]
 8004978:	8a3b      	ldrh	r3, [r7, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	d906      	bls.n	800498c <mem_trim+0xac>
 800497e:	4b51      	ldr	r3, [pc, #324]	; (8004ac4 <mem_trim+0x1e4>)
 8004980:	f240 2206 	movw	r2, #518	; 0x206
 8004984:	4953      	ldr	r1, [pc, #332]	; (8004ad4 <mem_trim+0x1f4>)
 8004986:	4851      	ldr	r0, [pc, #324]	; (8004acc <mem_trim+0x1ec>)
 8004988:	f009 f83e 	bl	800da08 <iprintf>
  if (newsize > size) {
 800498c:	887a      	ldrh	r2, [r7, #2]
 800498e:	8a3b      	ldrh	r3, [r7, #16]
 8004990:	429a      	cmp	r2, r3
 8004992:	d901      	bls.n	8004998 <mem_trim+0xb8>
    /* not supported */
    return NULL;
 8004994:	2300      	movs	r3, #0
 8004996:	e08c      	b.n	8004ab2 <mem_trim+0x1d2>
  }
  if (newsize == size) {
 8004998:	887a      	ldrh	r2, [r7, #2]
 800499a:	8a3b      	ldrh	r3, [r7, #16]
 800499c:	429a      	cmp	r2, r3
 800499e:	d101      	bne.n	80049a4 <mem_trim+0xc4>
    /* No change in size, simply return */
    return rmem;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	e086      	b.n	8004ab2 <mem_trim+0x1d2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80049a4:	4b45      	ldr	r3, [pc, #276]	; (8004abc <mem_trim+0x1dc>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	8812      	ldrh	r2, [r2, #0]
 80049ac:	4413      	add	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	791b      	ldrb	r3, [r3, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d13d      	bne.n	8004a34 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80049be:	8a7a      	ldrh	r2, [r7, #18]
 80049c0:	887b      	ldrh	r3, [r7, #2]
 80049c2:	4413      	add	r3, r2
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3308      	adds	r3, #8
 80049c8:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 80049ca:	4b43      	ldr	r3, [pc, #268]	; (8004ad8 <mem_trim+0x1f8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d105      	bne.n	80049e0 <mem_trim+0x100>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80049d4:	4b39      	ldr	r3, [pc, #228]	; (8004abc <mem_trim+0x1dc>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	897b      	ldrh	r3, [r7, #10]
 80049da:	4413      	add	r3, r2
 80049dc:	4a3e      	ldr	r2, [pc, #248]	; (8004ad8 <mem_trim+0x1f8>)
 80049de:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80049e0:	4b36      	ldr	r3, [pc, #216]	; (8004abc <mem_trim+0x1dc>)
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	897b      	ldrh	r3, [r7, #10]
 80049e6:	4413      	add	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	893a      	ldrh	r2, [r7, #8]
 80049f4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8a7a      	ldrh	r2, [r7, #18]
 80049fa:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	897a      	ldrh	r2, [r7, #10]
 8004a00:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a0a:	d006      	beq.n	8004a1a <mem_trim+0x13a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004a0c:	4b2b      	ldr	r3, [pc, #172]	; (8004abc <mem_trim+0x1dc>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	8812      	ldrh	r2, [r2, #0]
 8004a14:	4413      	add	r3, r2
 8004a16:	897a      	ldrh	r2, [r7, #10]
 8004a18:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8004a1a:	4b2d      	ldr	r3, [pc, #180]	; (8004ad0 <mem_trim+0x1f0>)
 8004a1c:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8004a20:	8879      	ldrh	r1, [r7, #2]
 8004a22:	8a3b      	ldrh	r3, [r7, #16]
 8004a24:	1acb      	subs	r3, r1, r3
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	4413      	add	r3, r2
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	4b28      	ldr	r3, [pc, #160]	; (8004ad0 <mem_trim+0x1f0>)
 8004a2e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8004a32:	e03d      	b.n	8004ab0 <mem_trim+0x1d0>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004a34:	887b      	ldrh	r3, [r7, #2]
 8004a36:	f103 0214 	add.w	r2, r3, #20
 8004a3a:	8a3b      	ldrh	r3, [r7, #16]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d837      	bhi.n	8004ab0 <mem_trim+0x1d0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004a40:	8a7a      	ldrh	r2, [r7, #18]
 8004a42:	887b      	ldrh	r3, [r7, #2]
 8004a44:	4413      	add	r3, r2
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3308      	adds	r3, #8
 8004a4a:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <mem_trim+0x1dc>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	897b      	ldrh	r3, [r7, #10]
 8004a52:	4413      	add	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8004a56:	4b20      	ldr	r3, [pc, #128]	; (8004ad8 <mem_trim+0x1f8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d202      	bcs.n	8004a66 <mem_trim+0x186>
      lfree = mem2;
 8004a60:	4a1d      	ldr	r2, [pc, #116]	; (8004ad8 <mem_trim+0x1f8>)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	881a      	ldrh	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8a7a      	ldrh	r2, [r7, #18]
 8004a78:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	897a      	ldrh	r2, [r7, #10]
 8004a7e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a88:	d006      	beq.n	8004a98 <mem_trim+0x1b8>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004a8a:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <mem_trim+0x1dc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	8812      	ldrh	r2, [r2, #0]
 8004a92:	4413      	add	r3, r2
 8004a94:	897a      	ldrh	r2, [r7, #10]
 8004a96:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8004a98:	4b0d      	ldr	r3, [pc, #52]	; (8004ad0 <mem_trim+0x1f0>)
 8004a9a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8004a9e:	8879      	ldrh	r1, [r7, #2]
 8004aa0:	8a3b      	ldrh	r3, [r7, #16]
 8004aa2:	1acb      	subs	r3, r1, r3
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <mem_trim+0x1f0>)
 8004aac:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004ab0:	687b      	ldr	r3, [r7, #4]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	200038e4 	.word	0x200038e4
 8004ac0:	200038e8 	.word	0x200038e8
 8004ac4:	0800ed6c 	.word	0x0800ed6c
 8004ac8:	0800ee90 	.word	0x0800ee90
 8004acc:	0800edb4 	.word	0x0800edb4
 8004ad0:	20006840 	.word	0x20006840
 8004ad4:	0800eea8 	.word	0x0800eea8
 8004ad8:	200038ec 	.word	0x200038ec

08004adc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8004ae6:	88fb      	ldrh	r3, [r7, #6]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <mem_malloc+0x14>
    return NULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e0eb      	b.n	8004cc8 <mem_malloc+0x1ec>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8004af0:	88fb      	ldrh	r3, [r7, #6]
 8004af2:	3303      	adds	r3, #3
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f023 0303 	bic.w	r3, r3, #3
 8004afa:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8004afc:	88fb      	ldrh	r3, [r7, #6]
 8004afe:	2b0b      	cmp	r3, #11
 8004b00:	d801      	bhi.n	8004b06 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004b02:	230c      	movs	r3, #12
 8004b04:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b0c:	d901      	bls.n	8004b12 <mem_malloc+0x36>
    return NULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e0da      	b.n	8004cc8 <mem_malloc+0x1ec>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004b12:	4b6f      	ldr	r3, [pc, #444]	; (8004cd0 <mem_malloc+0x1f4>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	4b6f      	ldr	r3, [pc, #444]	; (8004cd4 <mem_malloc+0x1f8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	83fb      	strh	r3, [r7, #30]
 8004b1e:	e0c3      	b.n	8004ca8 <mem_malloc+0x1cc>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8004b20:	4b6c      	ldr	r3, [pc, #432]	; (8004cd4 <mem_malloc+0x1f8>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	8bfb      	ldrh	r3, [r7, #30]
 8004b26:	4413      	add	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	791b      	ldrb	r3, [r3, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f040 80b4 	bne.w	8004c9c <mem_malloc+0x1c0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	8bfb      	ldrh	r3, [r7, #30]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f1a3 0208 	sub.w	r2, r3, #8
 8004b42:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8004b44:	429a      	cmp	r2, r3
 8004b46:	f0c0 80a9 	bcc.w	8004c9c <mem_malloc+0x1c0>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	8bfb      	ldrh	r3, [r7, #30]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	f1a3 0208 	sub.w	r2, r3, #8
 8004b58:	88fb      	ldrh	r3, [r7, #6]
 8004b5a:	3314      	adds	r3, #20
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d332      	bcc.n	8004bc6 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8004b60:	8bfa      	ldrh	r2, [r7, #30]
 8004b62:	88fb      	ldrh	r3, [r7, #6]
 8004b64:	4413      	add	r3, r2
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3308      	adds	r3, #8
 8004b6a:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8004b6c:	4b59      	ldr	r3, [pc, #356]	; (8004cd4 <mem_malloc+0x1f8>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	8a7b      	ldrh	r3, [r7, #18]
 8004b72:	4413      	add	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	881a      	ldrh	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8bfa      	ldrh	r2, [r7, #30]
 8004b88:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	8a7a      	ldrh	r2, [r7, #18]
 8004b8e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2201      	movs	r2, #1
 8004b94:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b9e:	d006      	beq.n	8004bae <mem_malloc+0xd2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004ba0:	4b4c      	ldr	r3, [pc, #304]	; (8004cd4 <mem_malloc+0x1f8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	8812      	ldrh	r2, [r2, #0]
 8004ba8:	4413      	add	r3, r2
 8004baa:	8a7a      	ldrh	r2, [r7, #18]
 8004bac:	805a      	strh	r2, [r3, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8004bae:	4b4a      	ldr	r3, [pc, #296]	; (8004cd8 <mem_malloc+0x1fc>)
 8004bb0:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8004bb4:	88fb      	ldrh	r3, [r7, #6]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3308      	adds	r3, #8
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	4b46      	ldr	r3, [pc, #280]	; (8004cd8 <mem_malloc+0x1fc>)
 8004bc0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8004bc4:	e013      	b.n	8004bee <mem_malloc+0x112>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 8004bcc:	4b42      	ldr	r3, [pc, #264]	; (8004cd8 <mem_malloc+0x1fc>)
 8004bce:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	8819      	ldrh	r1, [r3, #0]
 8004bd6:	4b3f      	ldr	r3, [pc, #252]	; (8004cd4 <mem_malloc+0x1f8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6978      	ldr	r0, [r7, #20]
 8004bdc:	1ac3      	subs	r3, r0, r3
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	1acb      	subs	r3, r1, r3
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	4413      	add	r3, r2
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	4b3b      	ldr	r3, [pc, #236]	; (8004cd8 <mem_malloc+0x1fc>)
 8004bea:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004bee:	4b38      	ldr	r3, [pc, #224]	; (8004cd0 <mem_malloc+0x1f4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d127      	bne.n	8004c48 <mem_malloc+0x16c>
          struct mem *cur = lfree;
 8004bf8:	4b35      	ldr	r3, [pc, #212]	; (8004cd0 <mem_malloc+0x1f4>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004bfe:	e005      	b.n	8004c0c <mem_malloc+0x130>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8004c00:	4b34      	ldr	r3, [pc, #208]	; (8004cd4 <mem_malloc+0x1f8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	8812      	ldrh	r2, [r2, #0]
 8004c08:	4413      	add	r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	791b      	ldrb	r3, [r3, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d004      	beq.n	8004c1e <mem_malloc+0x142>
 8004c14:	4b31      	ldr	r3, [pc, #196]	; (8004cdc <mem_malloc+0x200>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d1f0      	bne.n	8004c00 <mem_malloc+0x124>
          }
          lfree = cur;
 8004c1e:	4a2c      	ldr	r2, [pc, #176]	; (8004cd0 <mem_malloc+0x1f4>)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004c24:	4b2a      	ldr	r3, [pc, #168]	; (8004cd0 <mem_malloc+0x1f4>)
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	4b2c      	ldr	r3, [pc, #176]	; (8004cdc <mem_malloc+0x200>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d00b      	beq.n	8004c48 <mem_malloc+0x16c>
 8004c30:	4b27      	ldr	r3, [pc, #156]	; (8004cd0 <mem_malloc+0x1f4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	791b      	ldrb	r3, [r3, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d006      	beq.n	8004c48 <mem_malloc+0x16c>
 8004c3a:	4b29      	ldr	r3, [pc, #164]	; (8004ce0 <mem_malloc+0x204>)
 8004c3c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8004c40:	4928      	ldr	r1, [pc, #160]	; (8004ce4 <mem_malloc+0x208>)
 8004c42:	4829      	ldr	r0, [pc, #164]	; (8004ce8 <mem_malloc+0x20c>)
 8004c44:	f008 fee0 	bl	800da08 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004c48:	88fa      	ldrh	r2, [r7, #6]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	3308      	adds	r3, #8
 8004c50:	4a22      	ldr	r2, [pc, #136]	; (8004cdc <mem_malloc+0x200>)
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d906      	bls.n	8004c66 <mem_malloc+0x18a>
 8004c58:	4b21      	ldr	r3, [pc, #132]	; (8004ce0 <mem_malloc+0x204>)
 8004c5a:	f240 22d3 	movw	r2, #723	; 0x2d3
 8004c5e:	4923      	ldr	r1, [pc, #140]	; (8004cec <mem_malloc+0x210>)
 8004c60:	4821      	ldr	r0, [pc, #132]	; (8004ce8 <mem_malloc+0x20c>)
 8004c62:	f008 fed1 	bl	800da08 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d006      	beq.n	8004c7e <mem_malloc+0x1a2>
 8004c70:	4b1b      	ldr	r3, [pc, #108]	; (8004ce0 <mem_malloc+0x204>)
 8004c72:	f240 22d5 	movw	r2, #725	; 0x2d5
 8004c76:	491e      	ldr	r1, [pc, #120]	; (8004cf0 <mem_malloc+0x214>)
 8004c78:	481b      	ldr	r0, [pc, #108]	; (8004ce8 <mem_malloc+0x20c>)
 8004c7a:	f008 fec5 	bl	800da08 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d006      	beq.n	8004c96 <mem_malloc+0x1ba>
 8004c88:	4b15      	ldr	r3, [pc, #84]	; (8004ce0 <mem_malloc+0x204>)
 8004c8a:	f240 22d7 	movw	r2, #727	; 0x2d7
 8004c8e:	4919      	ldr	r1, [pc, #100]	; (8004cf4 <mem_malloc+0x218>)
 8004c90:	4815      	ldr	r0, [pc, #84]	; (8004ce8 <mem_malloc+0x20c>)
 8004c92:	f008 feb9 	bl	800da08 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	3308      	adds	r3, #8
 8004c9a:	e015      	b.n	8004cc8 <mem_malloc+0x1ec>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8004c9c:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <mem_malloc+0x1f8>)
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	8bfb      	ldrh	r3, [r7, #30]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004ca8:	8bfa      	ldrh	r2, [r7, #30]
 8004caa:	88fb      	ldrh	r3, [r7, #6]
 8004cac:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	f4ff af35 	bcc.w	8004b20 <mem_malloc+0x44>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
 8004cb6:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <mem_malloc+0x1fc>)
 8004cb8:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <mem_malloc+0x1fc>)
 8004cc2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	200038ec 	.word	0x200038ec
 8004cd4:	200038e4 	.word	0x200038e4
 8004cd8:	20006840 	.word	0x20006840
 8004cdc:	200038e8 	.word	0x200038e8
 8004ce0:	0800ed6c 	.word	0x0800ed6c
 8004ce4:	0800eec8 	.word	0x0800eec8
 8004ce8:	0800edb4 	.word	0x0800edb4
 8004cec:	0800eee4 	.word	0x0800eee4
 8004cf0:	0800ef14 	.word	0x0800ef14
 8004cf4:	0800ef44 	.word	0x0800ef44

08004cf8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	3303      	adds	r3, #3
 8004d0e:	f023 0303 	bic.w	r3, r3, #3
 8004d12:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	e011      	b.n	8004d3e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	889b      	ldrh	r3, [r3, #4]
 8004d30:	461a      	mov	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4413      	add	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	88db      	ldrh	r3, [r3, #6]
 8004d42:	461a      	mov	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4293      	cmp	r3, r2
 8004d48:	dbe7      	blt.n	8004d1a <memp_init_pool+0x22>
      + MEMP_SANITY_REGION_AFTER_ALIGNED
#endif
    );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	88d2      	ldrh	r2, [r2, #6]
 8004d52:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bc80      	pop	{r7}
 8004d5c:	4770      	bx	lr
	...

08004d60 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004d66:	2300      	movs	r3, #0
 8004d68:	80fb      	strh	r3, [r7, #6]
 8004d6a:	e014      	b.n	8004d96 <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 8004d6c:	88fb      	ldrh	r3, [r7, #6]
 8004d6e:	4a0e      	ldr	r2, [pc, #56]	; (8004da8 <memp_init+0x48>)
 8004d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff ffbf 	bl	8004cf8 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	4a0a      	ldr	r2, [pc, #40]	; (8004da8 <memp_init+0x48>)
 8004d7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004d82:	88fb      	ldrh	r3, [r7, #6]
 8004d84:	6812      	ldr	r2, [r2, #0]
 8004d86:	4909      	ldr	r1, [pc, #36]	; (8004dac <memp_init+0x4c>)
 8004d88:	332c      	adds	r3, #44	; 0x2c
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	3301      	adds	r3, #1
 8004d94:	80fb      	strh	r3, [r7, #6]
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d9e7      	bls.n	8004d6c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004d9c:	bf00      	nop
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	08010a78 	.word	0x08010a78
 8004dac:	20006840 	.word	0x20006840

08004db0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d026      	beq.n	8004e14 <do_memp_malloc_pool+0x64>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	6812      	ldr	r2, [r2, #0]
 8004dce:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d006      	beq.n	8004de8 <do_memp_malloc_pool+0x38>
 8004dda:	4b14      	ldr	r3, [pc, #80]	; (8004e2c <do_memp_malloc_pool+0x7c>)
 8004ddc:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8004de0:	4913      	ldr	r1, [pc, #76]	; (8004e30 <do_memp_malloc_pool+0x80>)
 8004de2:	4814      	ldr	r0, [pc, #80]	; (8004e34 <do_memp_malloc_pool+0x84>)
 8004de4:	f008 fe10 	bl	800da08 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	889a      	ldrh	r2, [r3, #4]
 8004dee:	3201      	adds	r2, #1
 8004df0:	b292      	uxth	r2, r2
 8004df2:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	889a      	ldrh	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	88db      	ldrh	r3, [r3, #6]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d905      	bls.n	8004e10 <do_memp_malloc_pool+0x60>
      desc->stats->max = desc->stats->used;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	8892      	ldrh	r2, [r2, #4]
 8004e0e:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	e006      	b.n	8004e22 <do_memp_malloc_pool+0x72>
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
#if MEMP_STATS
    desc->stats->err++;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	881a      	ldrh	r2, [r3, #0]
 8004e1a:	3201      	adds	r2, #1
 8004e1c:	b292      	uxth	r2, r2
 8004e1e:	801a      	strh	r2, [r3, #0]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	0800ef68 	.word	0x0800ef68
 8004e30:	0800ef98 	.word	0x0800ef98
 8004e34:	0800efbc 	.word	0x0800efbc

08004e38 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d908      	bls.n	8004e5a <memp_malloc+0x22>
 8004e48:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <memp_malloc+0x3c>)
 8004e4a:	f240 1287 	movw	r2, #391	; 0x187
 8004e4e:	490a      	ldr	r1, [pc, #40]	; (8004e78 <memp_malloc+0x40>)
 8004e50:	480a      	ldr	r0, [pc, #40]	; (8004e7c <memp_malloc+0x44>)
 8004e52:	f008 fdd9 	bl	800da08 <iprintf>
 8004e56:	2300      	movs	r3, #0
 8004e58:	e008      	b.n	8004e6c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <memp_malloc+0x48>)
 8004e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff ffa4 	bl	8004db0 <do_memp_malloc_pool>
 8004e68:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	0800ef68 	.word	0x0800ef68
 8004e78:	0800eff8 	.word	0x0800eff8
 8004e7c:	0800efbc 	.word	0x0800efbc
 8004e80:	08010a78 	.word	0x08010a78

08004e84 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d006      	beq.n	8004ea6 <do_memp_free_pool+0x22>
 8004e98:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <do_memp_free_pool+0x4c>)
 8004e9a:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8004e9e:	490d      	ldr	r1, [pc, #52]	; (8004ed4 <do_memp_free_pool+0x50>)
 8004ea0:	480d      	ldr	r0, [pc, #52]	; (8004ed8 <do_memp_free_pool+0x54>)
 8004ea2:	f008 fdb1 	bl	800da08 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	60fb      	str	r3, [r7, #12]
  memp_overflow_check_element_overflow(memp, desc);
  memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	889a      	ldrh	r2, [r3, #4]
 8004eb0:	3a01      	subs	r2, #1
 8004eb2:	b292      	uxth	r2, r2
 8004eb4:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	0800ef68 	.word	0x0800ef68
 8004ed4:	0800f018 	.word	0x0800f018
 8004ed8:	0800efbc 	.word	0x0800efbc

08004edc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	6039      	str	r1, [r7, #0]
 8004ee6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004ee8:	79fb      	ldrb	r3, [r7, #7]
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d907      	bls.n	8004efe <memp_free+0x22>
 8004eee:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <memp_free+0x44>)
 8004ef0:	f240 12db 	movw	r2, #475	; 0x1db
 8004ef4:	490b      	ldr	r1, [pc, #44]	; (8004f24 <memp_free+0x48>)
 8004ef6:	480c      	ldr	r0, [pc, #48]	; (8004f28 <memp_free+0x4c>)
 8004ef8:	f008 fd86 	bl	800da08 <iprintf>
 8004efc:	e00c      	b.n	8004f18 <memp_free+0x3c>

  if (mem == NULL) {
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d008      	beq.n	8004f16 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004f04:	79fb      	ldrb	r3, [r7, #7]
 8004f06:	4a09      	ldr	r2, [pc, #36]	; (8004f2c <memp_free+0x50>)
 8004f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f0c:	6839      	ldr	r1, [r7, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff ffb8 	bl	8004e84 <do_memp_free_pool>
 8004f14:	e000      	b.n	8004f18 <memp_free+0x3c>
    return;
 8004f16:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	0800ef68 	.word	0x0800ef68
 8004f24:	0800f038 	.word	0x0800f038
 8004f28:	0800efbc 	.word	0x0800efbc
 8004f2c:	08010a78 	.word	0x08010a78

08004f30 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr

08004f3c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d105      	bne.n	8004f5c <netif_add+0x20>
 8004f50:	4b21      	ldr	r3, [pc, #132]	; (8004fd8 <netif_add+0x9c>)
 8004f52:	22fb      	movs	r2, #251	; 0xfb
 8004f54:	4921      	ldr	r1, [pc, #132]	; (8004fdc <netif_add+0xa0>)
 8004f56:	4822      	ldr	r0, [pc, #136]	; (8004fe0 <netif_add+0xa4>)
 8004f58:	f008 fd56 	bl	800da08 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2203      	movs	r2, #3
 8004f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8004f8a:	4b16      	ldr	r3, [pc, #88]	; (8004fe4 <netif_add+0xa8>)
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	b2d1      	uxtb	r1, r2
 8004f92:	4a14      	ldr	r2, [pc, #80]	; (8004fe4 <netif_add+0xa8>)
 8004f94:	7011      	strb	r1, [r2, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a3a      	ldr	r2, [r7, #32]
 8004fa0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 f81f 	bl	8004fec <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	4798      	blx	r3
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <netif_add+0x82>
    return NULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e007      	b.n	8004fce <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004fbe:	4b0a      	ldr	r3, [pc, #40]	; (8004fe8 <netif_add+0xac>)
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004fc6:	4a08      	ldr	r2, [pc, #32]	; (8004fe8 <netif_add+0xac>)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	0800f054 	.word	0x0800f054
 8004fdc:	0800f088 	.word	0x0800f088
 8004fe0:	0800f0a0 	.word	0x0800f0a0
 8004fe4:	2000683c 	.word	0x2000683c
 8004fe8:	20006834 	.word	0x20006834

08004fec <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <netif_set_addr+0x1c>
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10c      	bne.n	8005022 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f81a 	bl	8005044 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 f861 	bl	80050da <netif_set_netmask>
    netif_set_gw(netif, gw);
 8005018:	6839      	ldr	r1, [r7, #0]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 f84a 	bl	80050b4 <netif_set_gw>
 8005020:	e00c      	b.n	800503c <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 f858 	bl	80050da <netif_set_netmask>
    netif_set_gw(netif, gw);
 800502a:	6839      	ldr	r1, [r7, #0]
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f841 	bl	80050b4 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 f805 	bl	8005044 <netif_set_ipaddr>
  }
}
 800503a:	bf00      	nop
 800503c:	bf00      	nop
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <netif_set_ipaddr+0x18>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	e002      	b.n	8005062 <netif_set_ipaddr+0x1e>
 800505c:	4b14      	ldr	r3, [pc, #80]	; (80050b0 <netif_set_ipaddr+0x6c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3304      	adds	r3, #4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d01c      	beq.n	80050a8 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3304      	adds	r3, #4
 8005072:	f107 020c 	add.w	r2, r7, #12
 8005076:	4611      	mov	r1, r2
 8005078:	4618      	mov	r0, r3
 800507a:	f002 f93b 	bl	80072f4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3304      	adds	r3, #4
 8005082:	f107 020c 	add.w	r2, r7, #12
 8005086:	4611      	mov	r1, r2
 8005088:	4618      	mov	r0, r3
 800508a:	f006 f8ed 	bl	800b268 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <netif_set_ipaddr+0x56>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	e000      	b.n	800509c <netif_set_ipaddr+0x58>
 800509a:	2300      	movs	r3, #0
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80050a0:	2101      	movs	r1, #1
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f85d 	bl	8005162 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80050a8:	bf00      	nop
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	08010adc 	.word	0x08010adc

080050b4 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <netif_set_gw+0x16>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	e000      	b.n	80050cc <netif_set_gw+0x18>
 80050ca:	2300      	movs	r3, #0
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr

080050da <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <netif_set_netmask+0x16>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	e000      	b.n	80050f2 <netif_set_netmask+0x18>
 80050f0:	2300      	movs	r3, #0
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bc80      	pop	{r7}
 80050fe:	4770      	bx	lr

08005100 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005108:	4a03      	ldr	r2, [pc, #12]	; (8005118 <netif_set_default+0x18>)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr
 8005118:	20006838 	.word	0x20006838

0800511c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d113      	bne.n	800515a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	b2da      	uxtb	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8005152:	2103      	movs	r1, #3
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f804 	bl	8005162 <netif_issue_reports>
    }
  }
}
 800515a:	bf00      	nop
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800516e:	78fb      	ldrb	r3, [r7, #3]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d011      	beq.n	800519c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3304      	adds	r3, #4
 800517c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00c      	beq.n	800519c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005188:	f003 0308 	and.w	r3, r3, #8
 800518c:	2b00      	cmp	r3, #0
 800518e:	d005      	beq.n	800519c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3304      	adds	r3, #4
 8005194:	4619      	mov	r1, r3
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f006 ffda 	bl	800c150 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d012      	beq.n	80051e0 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f006 fb3c 	bl	800b858 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  if (netif) {
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	61da      	str	r2, [r3, #28]
  }
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr

08005208 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800520e:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <pbuf_free_ooseq+0x40>)
 8005210:	2200      	movs	r2, #0
 8005212:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005214:	4b0d      	ldr	r3, [pc, #52]	; (800524c <pbuf_free_ooseq+0x44>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	607b      	str	r3, [r7, #4]
 800521a:	e00f      	b.n	800523c <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005228:	4618      	mov	r0, r3
 800522a:	f001 fd76 	bl	8006d1a <tcp_segs_free>
      pcb->ooseq = NULL;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8005234:	e005      	b.n	8005242 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	607b      	str	r3, [r7, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1ec      	bne.n	800521c <pbuf_free_ooseq+0x14>
    }
  }
}
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	2000683d 	.word	0x2000683d
 800524c:	20006924 	.word	0x20006924

08005250 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005254:	4b03      	ldr	r3, [pc, #12]	; (8005264 <pbuf_pool_is_empty+0x14>)
 8005256:	2201      	movs	r2, #1
 8005258:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800525a:	bf00      	nop
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	2000683d 	.word	0x2000683d

08005268 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
 800526e:	4603      	mov	r3, r0
 8005270:	71fb      	strb	r3, [r7, #7]
 8005272:	460b      	mov	r3, r1
 8005274:	80bb      	strh	r3, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	2b04      	cmp	r3, #4
 800527e:	d81c      	bhi.n	80052ba <pbuf_alloc+0x52>
 8005280:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <pbuf_alloc+0x20>)
 8005282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005286:	bf00      	nop
 8005288:	0800529d 	.word	0x0800529d
 800528c:	080052a3 	.word	0x080052a3
 8005290:	080052a9 	.word	0x080052a9
 8005294:	080052af 	.word	0x080052af
 8005298:	080052b5 	.word	0x080052b5
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800529c:	2336      	movs	r3, #54	; 0x36
 800529e:	82fb      	strh	r3, [r7, #22]
    break;
 80052a0:	e014      	b.n	80052cc <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80052a2:	2322      	movs	r3, #34	; 0x22
 80052a4:	82fb      	strh	r3, [r7, #22]
    break;
 80052a6:	e011      	b.n	80052cc <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80052a8:	230e      	movs	r3, #14
 80052aa:	82fb      	strh	r3, [r7, #22]
    break;
 80052ac:	e00e      	b.n	80052cc <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80052ae:	2300      	movs	r3, #0
 80052b0:	82fb      	strh	r3, [r7, #22]
    break;
 80052b2:	e00b      	b.n	80052cc <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	82fb      	strh	r3, [r7, #22]
    break;
 80052b8:	e008      	b.n	80052cc <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80052ba:	4ba1      	ldr	r3, [pc, #644]	; (8005540 <pbuf_alloc+0x2d8>)
 80052bc:	f44f 728b 	mov.w	r2, #278	; 0x116
 80052c0:	49a0      	ldr	r1, [pc, #640]	; (8005544 <pbuf_alloc+0x2dc>)
 80052c2:	48a1      	ldr	r0, [pc, #644]	; (8005548 <pbuf_alloc+0x2e0>)
 80052c4:	f008 fba0 	bl	800da08 <iprintf>
    return NULL;
 80052c8:	2300      	movs	r3, #0
 80052ca:	e15c      	b.n	8005586 <pbuf_alloc+0x31e>
  }

  switch (type) {
 80052cc:	79bb      	ldrb	r3, [r7, #6]
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d00d      	beq.n	80052ee <pbuf_alloc+0x86>
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	f300 8146 	bgt.w	8005564 <pbuf_alloc+0x2fc>
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 80d0 	beq.w	800547e <pbuf_alloc+0x216>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f2c0 8140 	blt.w	8005564 <pbuf_alloc+0x2fc>
 80052e4:	3b01      	subs	r3, #1
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	f200 813c 	bhi.w	8005564 <pbuf_alloc+0x2fc>
 80052ec:	e10d      	b.n	800550a <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80052ee:	2008      	movs	r0, #8
 80052f0:	f7ff fda2 	bl	8004e38 <memp_malloc>
 80052f4:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d103      	bne.n	8005304 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 80052fc:	f7ff ffa8 	bl	8005250 <pbuf_pool_is_empty>
      return NULL;
 8005300:	2300      	movs	r3, #0
 8005302:	e140      	b.n	8005586 <pbuf_alloc+0x31e>
    }
    p->type = type;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	79ba      	ldrb	r2, [r7, #6]
 8005308:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8005310:	8afb      	ldrh	r3, [r7, #22]
 8005312:	3310      	adds	r3, #16
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	4413      	add	r3, r2
 8005318:	3303      	adds	r3, #3
 800531a:	f023 0303 	bic.w	r3, r3, #3
 800531e:	461a      	mov	r2, r3
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d006      	beq.n	800533e <pbuf_alloc+0xd6>
 8005330:	4b83      	ldr	r3, [pc, #524]	; (8005540 <pbuf_alloc+0x2d8>)
 8005332:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005336:	4985      	ldr	r1, [pc, #532]	; (800554c <pbuf_alloc+0x2e4>)
 8005338:	4883      	ldr	r0, [pc, #524]	; (8005548 <pbuf_alloc+0x2e0>)
 800533a:	f008 fb65 	bl	800da08 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	88ba      	ldrh	r2, [r7, #4]
 8005342:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005344:	8afb      	ldrh	r3, [r7, #22]
 8005346:	3303      	adds	r3, #3
 8005348:	f023 0303 	bic.w	r3, r3, #3
 800534c:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8005350:	88bb      	ldrh	r3, [r7, #4]
 8005352:	4293      	cmp	r3, r2
 8005354:	bf28      	it	cs
 8005356:	4613      	movcs	r3, r2
 8005358:	b29a      	uxth	r2, r3
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	69fa      	ldr	r2, [r7, #28]
 8005364:	8952      	ldrh	r2, [r2, #10]
 8005366:	441a      	add	r2, r3
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800536e:	429a      	cmp	r2, r3
 8005370:	d906      	bls.n	8005380 <pbuf_alloc+0x118>
 8005372:	4b73      	ldr	r3, [pc, #460]	; (8005540 <pbuf_alloc+0x2d8>)
 8005374:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8005378:	4975      	ldr	r1, [pc, #468]	; (8005550 <pbuf_alloc+0x2e8>)
 800537a:	4873      	ldr	r0, [pc, #460]	; (8005548 <pbuf_alloc+0x2e0>)
 800537c:	f008 fb44 	bl	800da08 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005380:	8afb      	ldrh	r3, [r7, #22]
 8005382:	3303      	adds	r3, #3
 8005384:	f023 0303 	bic.w	r3, r3, #3
 8005388:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800538c:	d106      	bne.n	800539c <pbuf_alloc+0x134>
 800538e:	4b6c      	ldr	r3, [pc, #432]	; (8005540 <pbuf_alloc+0x2d8>)
 8005390:	f240 1231 	movw	r2, #305	; 0x131
 8005394:	496f      	ldr	r1, [pc, #444]	; (8005554 <pbuf_alloc+0x2ec>)
 8005396:	486c      	ldr	r0, [pc, #432]	; (8005548 <pbuf_alloc+0x2e0>)
 8005398:	f008 fb36 	bl	800da08 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2201      	movs	r2, #1
 80053a0:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 80053a6:	88bb      	ldrh	r3, [r7, #4]
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	8952      	ldrh	r2, [r2, #10]
 80053ac:	1a9b      	subs	r3, r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 80053b0:	e061      	b.n	8005476 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80053b2:	2008      	movs	r0, #8
 80053b4:	f7ff fd40 	bl	8004e38 <memp_malloc>
 80053b8:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d106      	bne.n	80053ce <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 80053c0:	f7ff ff46 	bl	8005250 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 80053c4:	69f8      	ldr	r0, [r7, #28]
 80053c6:	f000 fac7 	bl	8005958 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	e0db      	b.n	8005586 <pbuf_alloc+0x31e>
      }
      q->type = type;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	79ba      	ldrb	r2, [r7, #6]
 80053d2:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80053ec:	4293      	cmp	r3, r2
 80053ee:	dd06      	ble.n	80053fe <pbuf_alloc+0x196>
 80053f0:	4b53      	ldr	r3, [pc, #332]	; (8005540 <pbuf_alloc+0x2d8>)
 80053f2:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80053f6:	4958      	ldr	r1, [pc, #352]	; (8005558 <pbuf_alloc+0x2f0>)
 80053f8:	4853      	ldr	r0, [pc, #332]	; (8005548 <pbuf_alloc+0x2e0>)
 80053fa:	f008 fb05 	bl	800da08 <iprintf>
      q->tot_len = (u16_t)rem_len;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	b29b      	uxth	r3, r3
 800540a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800540e:	bf28      	it	cs
 8005410:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f103 0210 	add.w	r2, r3, #16
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f003 0303 	and.w	r3, r3, #3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d006      	beq.n	800543e <pbuf_alloc+0x1d6>
 8005430:	4b43      	ldr	r3, [pc, #268]	; (8005540 <pbuf_alloc+0x2d8>)
 8005432:	f240 1251 	movw	r2, #337	; 0x151
 8005436:	4949      	ldr	r1, [pc, #292]	; (800555c <pbuf_alloc+0x2f4>)
 8005438:	4843      	ldr	r0, [pc, #268]	; (8005548 <pbuf_alloc+0x2e0>)
 800543a:	f008 fae5 	bl	800da08 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	8952      	ldrh	r2, [r2, #10]
 8005446:	441a      	add	r2, r3
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800544e:	429a      	cmp	r2, r3
 8005450:	d906      	bls.n	8005460 <pbuf_alloc+0x1f8>
 8005452:	4b3b      	ldr	r3, [pc, #236]	; (8005540 <pbuf_alloc+0x2d8>)
 8005454:	f240 1253 	movw	r2, #339	; 0x153
 8005458:	493d      	ldr	r1, [pc, #244]	; (8005550 <pbuf_alloc+0x2e8>)
 800545a:	483b      	ldr	r0, [pc, #236]	; (8005548 <pbuf_alloc+0x2e0>)
 800545c:	f008 fad4 	bl	800da08 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2201      	movs	r2, #1
 8005464:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	895b      	ldrh	r3, [r3, #10]
 800546a:	461a      	mov	r2, r3
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1a9b      	subs	r3, r3, r2
 8005470:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	dc9a      	bgt.n	80053b2 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800547c:	e07c      	b.n	8005578 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800547e:	8afb      	ldrh	r3, [r7, #22]
 8005480:	3313      	adds	r3, #19
 8005482:	b29b      	uxth	r3, r3
 8005484:	f023 0303 	bic.w	r3, r3, #3
 8005488:	b29a      	uxth	r2, r3
 800548a:	88bb      	ldrh	r3, [r7, #4]
 800548c:	3303      	adds	r3, #3
 800548e:	b29b      	uxth	r3, r3
 8005490:	f023 0303 	bic.w	r3, r3, #3
 8005494:	b29b      	uxth	r3, r3
 8005496:	4413      	add	r3, r2
 8005498:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800549a:	897a      	ldrh	r2, [r7, #10]
 800549c:	88bb      	ldrh	r3, [r7, #4]
 800549e:	3303      	adds	r3, #3
 80054a0:	f023 0303 	bic.w	r3, r3, #3
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d201      	bcs.n	80054ac <pbuf_alloc+0x244>
        return NULL;
 80054a8:	2300      	movs	r3, #0
 80054aa:	e06c      	b.n	8005586 <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 80054ac:	897b      	ldrh	r3, [r7, #10]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff fb14 	bl	8004adc <mem_malloc>
 80054b4:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <pbuf_alloc+0x258>
      return NULL;
 80054bc:	2300      	movs	r3, #0
 80054be:	e062      	b.n	8005586 <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80054c0:	8afb      	ldrh	r3, [r7, #22]
 80054c2:	3310      	adds	r3, #16
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	4413      	add	r3, r2
 80054c8:	3303      	adds	r3, #3
 80054ca:	f023 0303 	bic.w	r3, r3, #3
 80054ce:	461a      	mov	r2, r3
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	88ba      	ldrh	r2, [r7, #4]
 80054d8:	811a      	strh	r2, [r3, #8]
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	891a      	ldrh	r2, [r3, #8]
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
    p->type = type;
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	79ba      	ldrb	r2, [r7, #6]
 80054ec:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d03d      	beq.n	8005576 <pbuf_alloc+0x30e>
 80054fa:	4b11      	ldr	r3, [pc, #68]	; (8005540 <pbuf_alloc+0x2d8>)
 80054fc:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8005500:	4917      	ldr	r1, [pc, #92]	; (8005560 <pbuf_alloc+0x2f8>)
 8005502:	4811      	ldr	r0, [pc, #68]	; (8005548 <pbuf_alloc+0x2e0>)
 8005504:	f008 fa80 	bl	800da08 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8005508:	e035      	b.n	8005576 <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800550a:	2007      	movs	r0, #7
 800550c:	f7ff fc94 	bl	8004e38 <memp_malloc>
 8005510:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8005518:	2300      	movs	r3, #0
 800551a:	e034      	b.n	8005586 <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	2200      	movs	r2, #0
 8005520:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	88ba      	ldrh	r2, [r7, #4]
 8005526:	811a      	strh	r2, [r3, #8]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	891a      	ldrh	r2, [r3, #8]
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
    p->type = type;
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	79ba      	ldrb	r2, [r7, #6]
 800553a:	731a      	strb	r2, [r3, #12]
    break;
 800553c:	e01c      	b.n	8005578 <pbuf_alloc+0x310>
 800553e:	bf00      	nop
 8005540:	0800f0c8 	.word	0x0800f0c8
 8005544:	0800f0f8 	.word	0x0800f0f8
 8005548:	0800f114 	.word	0x0800f114
 800554c:	0800f13c 	.word	0x0800f13c
 8005550:	0800f16c 	.word	0x0800f16c
 8005554:	0800f1a0 	.word	0x0800f1a0
 8005558:	0800f1d4 	.word	0x0800f1d4
 800555c:	0800f1e8 	.word	0x0800f1e8
 8005560:	0800f218 	.word	0x0800f218
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005564:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <pbuf_alloc+0x328>)
 8005566:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800556a:	490a      	ldr	r1, [pc, #40]	; (8005594 <pbuf_alloc+0x32c>)
 800556c:	480a      	ldr	r0, [pc, #40]	; (8005598 <pbuf_alloc+0x330>)
 800556e:	f008 fa4b 	bl	800da08 <iprintf>
    return NULL;
 8005572:	2300      	movs	r3, #0
 8005574:	e007      	b.n	8005586 <pbuf_alloc+0x31e>
    break;
 8005576:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	2201      	movs	r2, #1
 800557c:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	2200      	movs	r2, #0
 8005582:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005584:	69fb      	ldr	r3, [r7, #28]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3720      	adds	r7, #32
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	0800f0c8 	.word	0x0800f0c8
 8005594:	0800f244 	.word	0x0800f244
 8005598:	0800f114 	.word	0x0800f114

0800559c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	4603      	mov	r3, r0
 80055a6:	71fb      	strb	r3, [r7, #7]
 80055a8:	460b      	mov	r3, r1
 80055aa:	80bb      	strh	r3, [r7, #4]
 80055ac:	4613      	mov	r3, r2
 80055ae:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d81b      	bhi.n	80055ee <pbuf_alloced_custom+0x52>
 80055b6:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <pbuf_alloced_custom+0x20>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	080055d1 	.word	0x080055d1
 80055c0:	080055d7 	.word	0x080055d7
 80055c4:	080055dd 	.word	0x080055dd
 80055c8:	080055e3 	.word	0x080055e3
 80055cc:	080055e9 	.word	0x080055e9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80055d0:	2336      	movs	r3, #54	; 0x36
 80055d2:	81fb      	strh	r3, [r7, #14]
    break;
 80055d4:	e014      	b.n	8005600 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80055d6:	2322      	movs	r3, #34	; 0x22
 80055d8:	81fb      	strh	r3, [r7, #14]
    break;
 80055da:	e011      	b.n	8005600 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80055dc:	230e      	movs	r3, #14
 80055de:	81fb      	strh	r3, [r7, #14]
    break;
 80055e0:	e00e      	b.n	8005600 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80055e2:	2300      	movs	r3, #0
 80055e4:	81fb      	strh	r3, [r7, #14]
    break;
 80055e6:	e00b      	b.n	8005600 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	81fb      	strh	r3, [r7, #14]
    break;
 80055ec:	e008      	b.n	8005600 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80055ee:	4b1d      	ldr	r3, [pc, #116]	; (8005664 <pbuf_alloced_custom+0xc8>)
 80055f0:	f240 12c5 	movw	r2, #453	; 0x1c5
 80055f4:	491c      	ldr	r1, [pc, #112]	; (8005668 <pbuf_alloced_custom+0xcc>)
 80055f6:	481d      	ldr	r0, [pc, #116]	; (800566c <pbuf_alloced_custom+0xd0>)
 80055f8:	f008 fa06 	bl	800da08 <iprintf>
    return NULL;
 80055fc:	2300      	movs	r3, #0
 80055fe:	e02d      	b.n	800565c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005600:	89fb      	ldrh	r3, [r7, #14]
 8005602:	3303      	adds	r3, #3
 8005604:	f023 0203 	bic.w	r2, r3, #3
 8005608:	88bb      	ldrh	r3, [r7, #4]
 800560a:	441a      	add	r2, r3
 800560c:	8bbb      	ldrh	r3, [r7, #28]
 800560e:	429a      	cmp	r2, r3
 8005610:	d901      	bls.n	8005616 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005612:	2300      	movs	r3, #0
 8005614:	e022      	b.n	800565c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d008      	beq.n	8005634 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005622:	89fb      	ldrh	r3, [r7, #14]
 8005624:	3303      	adds	r3, #3
 8005626:	f023 0303 	bic.w	r3, r3, #3
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	441a      	add	r2, r3
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	605a      	str	r2, [r3, #4]
 8005632:	e002      	b.n	800563a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	2200      	movs	r2, #0
 8005638:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2202      	movs	r2, #2
 800563e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	88ba      	ldrh	r2, [r7, #4]
 8005644:	811a      	strh	r2, [r3, #8]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	891a      	ldrh	r2, [r3, #8]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	79ba      	ldrb	r2, [r7, #6]
 8005652:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2201      	movs	r2, #1
 8005658:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800565a:	683b      	ldr	r3, [r7, #0]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	0800f0c8 	.word	0x0800f0c8
 8005668:	0800f260 	.word	0x0800f260
 800566c:	0800f114 	.word	0x0800f114

08005670 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <pbuf_realloc+0x20>
 8005682:	4b4b      	ldr	r3, [pc, #300]	; (80057b0 <pbuf_realloc+0x140>)
 8005684:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005688:	494a      	ldr	r1, [pc, #296]	; (80057b4 <pbuf_realloc+0x144>)
 800568a:	484b      	ldr	r0, [pc, #300]	; (80057b8 <pbuf_realloc+0x148>)
 800568c:	f008 f9bc 	bl	800da08 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	7b1b      	ldrb	r3, [r3, #12]
 8005694:	2b03      	cmp	r3, #3
 8005696:	d012      	beq.n	80056be <pbuf_realloc+0x4e>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	7b1b      	ldrb	r3, [r3, #12]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d00e      	beq.n	80056be <pbuf_realloc+0x4e>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	7b1b      	ldrb	r3, [r3, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <pbuf_realloc+0x4e>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	7b1b      	ldrb	r3, [r3, #12]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d006      	beq.n	80056be <pbuf_realloc+0x4e>
 80056b0:	4b3f      	ldr	r3, [pc, #252]	; (80057b0 <pbuf_realloc+0x140>)
 80056b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80056b6:	4941      	ldr	r1, [pc, #260]	; (80057bc <pbuf_realloc+0x14c>)
 80056b8:	483f      	ldr	r0, [pc, #252]	; (80057b8 <pbuf_realloc+0x148>)
 80056ba:	f008 f9a5 	bl	800da08 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	891b      	ldrh	r3, [r3, #8]
 80056c2:	887a      	ldrh	r2, [r7, #2]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d26e      	bcs.n	80057a6 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 80056c8:	887b      	ldrh	r3, [r7, #2]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	8912      	ldrh	r2, [r2, #8]
 80056ce:	1a9b      	subs	r3, r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80056d2:	887b      	ldrh	r3, [r7, #2]
 80056d4:	827b      	strh	r3, [r7, #18]
  q = p;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80056da:	e025      	b.n	8005728 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	895b      	ldrh	r3, [r3, #10]
 80056e0:	8a7a      	ldrh	r2, [r7, #18]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80056ec:	4293      	cmp	r3, r2
 80056ee:	dd06      	ble.n	80056fe <pbuf_realloc+0x8e>
 80056f0:	4b2f      	ldr	r3, [pc, #188]	; (80057b0 <pbuf_realloc+0x140>)
 80056f2:	f240 220b 	movw	r2, #523	; 0x20b
 80056f6:	4932      	ldr	r1, [pc, #200]	; (80057c0 <pbuf_realloc+0x150>)
 80056f8:	482f      	ldr	r0, [pc, #188]	; (80057b8 <pbuf_realloc+0x148>)
 80056fa:	f008 f985 	bl	800da08 <iprintf>
    q->tot_len += (u16_t)grow;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	891a      	ldrh	r2, [r3, #8]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	b29b      	uxth	r3, r3
 8005706:	4413      	add	r3, r2
 8005708:	b29a      	uxth	r2, r3
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <pbuf_realloc+0xb8>
 800571a:	4b25      	ldr	r3, [pc, #148]	; (80057b0 <pbuf_realloc+0x140>)
 800571c:	f240 220f 	movw	r2, #527	; 0x20f
 8005720:	4928      	ldr	r1, [pc, #160]	; (80057c4 <pbuf_realloc+0x154>)
 8005722:	4825      	ldr	r0, [pc, #148]	; (80057b8 <pbuf_realloc+0x148>)
 8005724:	f008 f970 	bl	800da08 <iprintf>
  while (rem_len > q->len) {
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	895b      	ldrh	r3, [r3, #10]
 800572c:	8a7a      	ldrh	r2, [r7, #18]
 800572e:	429a      	cmp	r2, r3
 8005730:	d8d4      	bhi.n	80056dc <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	7b1b      	ldrb	r3, [r3, #12]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d121      	bne.n	800577e <pbuf_realloc+0x10e>
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	895b      	ldrh	r3, [r3, #10]
 800573e:	8a7a      	ldrh	r2, [r7, #18]
 8005740:	429a      	cmp	r2, r3
 8005742:	d01c      	beq.n	800577e <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	7b5b      	ldrb	r3, [r3, #13]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d116      	bne.n	800577e <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	b29a      	uxth	r2, r3
 800575a:	8a7b      	ldrh	r3, [r7, #18]
 800575c:	4413      	add	r3, r2
 800575e:	b29b      	uxth	r3, r3
 8005760:	4619      	mov	r1, r3
 8005762:	6978      	ldr	r0, [r7, #20]
 8005764:	f7ff f8bc 	bl	80048e0 <mem_trim>
 8005768:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d106      	bne.n	800577e <pbuf_realloc+0x10e>
 8005770:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <pbuf_realloc+0x140>)
 8005772:	f240 221d 	movw	r2, #541	; 0x21d
 8005776:	4914      	ldr	r1, [pc, #80]	; (80057c8 <pbuf_realloc+0x158>)
 8005778:	480f      	ldr	r0, [pc, #60]	; (80057b8 <pbuf_realloc+0x148>)
 800577a:	f008 f945 	bl	800da08 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	8a7a      	ldrh	r2, [r7, #18]
 8005782:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	895a      	ldrh	r2, [r3, #10]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d004      	beq.n	800579e <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4618      	mov	r0, r3
 800579a:	f000 f8dd 	bl	8005958 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	e000      	b.n	80057a8 <pbuf_realloc+0x138>
    return;
 80057a6:	bf00      	nop

}
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	0800f0c8 	.word	0x0800f0c8
 80057b4:	0800f284 	.word	0x0800f284
 80057b8:	0800f114 	.word	0x0800f114
 80057bc:	0800f29c 	.word	0x0800f29c
 80057c0:	0800f2b8 	.word	0x0800f2b8
 80057c4:	0800f2cc 	.word	0x0800f2cc
 80057c8:	0800f2e4 	.word	0x0800f2e4

080057cc <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	807b      	strh	r3, [r7, #2]
 80057d8:	4613      	mov	r3, r2
 80057da:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <pbuf_header_impl+0x24>
 80057e2:	4b46      	ldr	r3, [pc, #280]	; (80058fc <pbuf_header_impl+0x130>)
 80057e4:	f240 223f 	movw	r2, #575	; 0x23f
 80057e8:	4945      	ldr	r1, [pc, #276]	; (8005900 <pbuf_header_impl+0x134>)
 80057ea:	4846      	ldr	r0, [pc, #280]	; (8005904 <pbuf_header_impl+0x138>)
 80057ec:	f008 f90c 	bl	800da08 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80057f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <pbuf_header_impl+0x32>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <pbuf_header_impl+0x36>
    return 0;
 80057fe:	2300      	movs	r3, #0
 8005800:	e078      	b.n	80058f4 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8005802:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005806:	2b00      	cmp	r3, #0
 8005808:	da10      	bge.n	800582c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800580a:	887b      	ldrh	r3, [r7, #2]
 800580c:	425b      	negs	r3, r3
 800580e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	895b      	ldrh	r3, [r3, #10]
 8005814:	89fa      	ldrh	r2, [r7, #14]
 8005816:	429a      	cmp	r2, r3
 8005818:	d90a      	bls.n	8005830 <pbuf_header_impl+0x64>
 800581a:	4b38      	ldr	r3, [pc, #224]	; (80058fc <pbuf_header_impl+0x130>)
 800581c:	f240 2247 	movw	r2, #583	; 0x247
 8005820:	4939      	ldr	r1, [pc, #228]	; (8005908 <pbuf_header_impl+0x13c>)
 8005822:	4838      	ldr	r0, [pc, #224]	; (8005904 <pbuf_header_impl+0x138>)
 8005824:	f008 f8f0 	bl	800da08 <iprintf>
 8005828:	2301      	movs	r3, #1
 800582a:	e063      	b.n	80058f4 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800582c:	887b      	ldrh	r3, [r7, #2]
 800582e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	7b1b      	ldrb	r3, [r3, #12]
 8005834:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800583c:	89bb      	ldrh	r3, [r7, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <pbuf_header_impl+0x7c>
 8005842:	89bb      	ldrh	r3, [r7, #12]
 8005844:	2b03      	cmp	r3, #3
 8005846:	d112      	bne.n	800586e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005850:	425b      	negs	r3, r3
 8005852:	441a      	add	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3310      	adds	r3, #16
 8005860:	429a      	cmp	r2, r3
 8005862:	d238      	bcs.n	80058d6 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800586a:	2301      	movs	r3, #1
 800586c:	e042      	b.n	80058f4 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800586e:	89bb      	ldrh	r3, [r7, #12]
 8005870:	2b02      	cmp	r3, #2
 8005872:	d002      	beq.n	800587a <pbuf_header_impl+0xae>
 8005874:	89bb      	ldrh	r3, [r7, #12]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d124      	bne.n	80058c4 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800587a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800587e:	2b00      	cmp	r3, #0
 8005880:	da0d      	bge.n	800589e <pbuf_header_impl+0xd2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	895b      	ldrh	r3, [r3, #10]
 8005886:	89fa      	ldrh	r2, [r7, #14]
 8005888:	429a      	cmp	r2, r3
 800588a:	d808      	bhi.n	800589e <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005894:	425b      	negs	r3, r3
 8005896:	441a      	add	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	605a      	str	r2, [r3, #4]
 800589c:	e011      	b.n	80058c2 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800589e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	dd0b      	ble.n	80058be <pbuf_header_impl+0xf2>
 80058a6:	787b      	ldrb	r3, [r7, #1]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058b4:	425b      	negs	r3, r3
 80058b6:	441a      	add	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	605a      	str	r2, [r3, #4]
 80058bc:	e001      	b.n	80058c2 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80058be:	2301      	movs	r3, #1
 80058c0:	e018      	b.n	80058f4 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80058c2:	e008      	b.n	80058d6 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 80058c4:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <pbuf_header_impl+0x130>)
 80058c6:	f240 2277 	movw	r2, #631	; 0x277
 80058ca:	4910      	ldr	r1, [pc, #64]	; (800590c <pbuf_header_impl+0x140>)
 80058cc:	480d      	ldr	r0, [pc, #52]	; (8005904 <pbuf_header_impl+0x138>)
 80058ce:	f008 f89b 	bl	800da08 <iprintf>
    return 1;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e00e      	b.n	80058f4 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	895a      	ldrh	r2, [r3, #10]
 80058da:	887b      	ldrh	r3, [r7, #2]
 80058dc:	4413      	add	r3, r2
 80058de:	b29a      	uxth	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	891a      	ldrh	r2, [r3, #8]
 80058e8:	887b      	ldrh	r3, [r7, #2]
 80058ea:	4413      	add	r3, r2
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	0800f0c8 	.word	0x0800f0c8
 8005900:	0800f300 	.word	0x0800f300
 8005904:	0800f114 	.word	0x0800f114
 8005908:	0800f30c 	.word	0x0800f30c
 800590c:	0800f32c 	.word	0x0800f32c

08005910 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800591c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005920:	2200      	movs	r2, #0
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff ff51 	bl	80057cc <pbuf_header_impl>
 800592a:	4603      	mov	r3, r0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8005940:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005944:	2201      	movs	r2, #1
 8005946:	4619      	mov	r1, r3
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7ff ff3f 	bl	80057cc <pbuf_header_impl>
 800594e:	4603      	mov	r3, r0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10b      	bne.n	800597e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d106      	bne.n	800597a <pbuf_free+0x22>
 800596c:	4b3e      	ldr	r3, [pc, #248]	; (8005a68 <pbuf_free+0x110>)
 800596e:	f240 22d2 	movw	r2, #722	; 0x2d2
 8005972:	493e      	ldr	r1, [pc, #248]	; (8005a6c <pbuf_free+0x114>)
 8005974:	483e      	ldr	r0, [pc, #248]	; (8005a70 <pbuf_free+0x118>)
 8005976:	f008 f847 	bl	800da08 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800597a:	2300      	movs	r3, #0
 800597c:	e070      	b.n	8005a60 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	7b1b      	ldrb	r3, [r3, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d012      	beq.n	80059ac <pbuf_free+0x54>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	7b1b      	ldrb	r3, [r3, #12]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d00e      	beq.n	80059ac <pbuf_free+0x54>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	7b1b      	ldrb	r3, [r3, #12]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d00a      	beq.n	80059ac <pbuf_free+0x54>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	7b1b      	ldrb	r3, [r3, #12]
 800599a:	2b03      	cmp	r3, #3
 800599c:	d006      	beq.n	80059ac <pbuf_free+0x54>
 800599e:	4b32      	ldr	r3, [pc, #200]	; (8005a68 <pbuf_free+0x110>)
 80059a0:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80059a4:	4933      	ldr	r1, [pc, #204]	; (8005a74 <pbuf_free+0x11c>)
 80059a6:	4832      	ldr	r0, [pc, #200]	; (8005a70 <pbuf_free+0x118>)
 80059a8:	f008 f82e 	bl	800da08 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80059b0:	e052      	b.n	8005a58 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	89db      	ldrh	r3, [r3, #14]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <pbuf_free+0x70>
 80059ba:	4b2b      	ldr	r3, [pc, #172]	; (8005a68 <pbuf_free+0x110>)
 80059bc:	f240 22eb 	movw	r2, #747	; 0x2eb
 80059c0:	492d      	ldr	r1, [pc, #180]	; (8005a78 <pbuf_free+0x120>)
 80059c2:	482b      	ldr	r0, [pc, #172]	; (8005a70 <pbuf_free+0x118>)
 80059c4:	f008 f820 	bl	800da08 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	89db      	ldrh	r3, [r3, #14]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	81da      	strh	r2, [r3, #14]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	89db      	ldrh	r3, [r3, #14]
 80059d8:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80059da:	8abb      	ldrh	r3, [r7, #20]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d139      	bne.n	8005a54 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	7b1b      	ldrb	r3, [r3, #12]
 80059ea:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	7b5b      	ldrb	r3, [r3, #13]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d011      	beq.n	8005a1c <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d106      	bne.n	8005a12 <pbuf_free+0xba>
 8005a04:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <pbuf_free+0x110>)
 8005a06:	f240 22f9 	movw	r2, #761	; 0x2f9
 8005a0a:	491c      	ldr	r1, [pc, #112]	; (8005a7c <pbuf_free+0x124>)
 8005a0c:	4818      	ldr	r0, [pc, #96]	; (8005a70 <pbuf_free+0x118>)
 8005a0e:	f007 fffb 	bl	800da08 <iprintf>
        pc->custom_free_function(p);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	4798      	blx	r3
 8005a1a:	e015      	b.n	8005a48 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8005a1c:	89fb      	ldrh	r3, [r7, #14]
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d104      	bne.n	8005a2c <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	2008      	movs	r0, #8
 8005a26:	f7ff fa59 	bl	8004edc <memp_free>
 8005a2a:	e00d      	b.n	8005a48 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8005a2c:	89fb      	ldrh	r3, [r7, #14]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d002      	beq.n	8005a38 <pbuf_free+0xe0>
 8005a32:	89fb      	ldrh	r3, [r7, #14]
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d104      	bne.n	8005a42 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	2007      	movs	r0, #7
 8005a3c:	f7ff fa4e 	bl	8004edc <memp_free>
 8005a40:	e002      	b.n	8005a48 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7fe fed0 	bl	80047e8 <mem_free>
        }
      }
      count++;
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	607b      	str	r3, [r7, #4]
 8005a52:	e001      	b.n	8005a58 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8005a54:	2300      	movs	r3, #0
 8005a56:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1a9      	bne.n	80059b2 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	0800f0c8 	.word	0x0800f0c8
 8005a6c:	0800f300 	.word	0x0800f300
 8005a70:	0800f114 	.word	0x0800f114
 8005a74:	0800f33c 	.word	0x0800f33c
 8005a78:	0800f354 	.word	0x0800f354
 8005a7c:	0800f36c 	.word	0x0800f36c

08005a80 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005a8c:	e005      	b.n	8005a9a <pbuf_clen+0x1a>
    ++len;
 8005a8e:	89fb      	ldrh	r3, [r7, #14]
 8005a90:	3301      	adds	r3, #1
 8005a92:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1f6      	bne.n	8005a8e <pbuf_clen+0xe>
  }
  return len;
 8005aa0:	89fb      	ldrh	r3, [r7, #14]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr

08005aac <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d010      	beq.n	8005adc <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	89db      	ldrh	r3, [r3, #14]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	89db      	ldrh	r3, [r3, #14]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <pbuf_ref+0x30>
 8005ace:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <pbuf_ref+0x38>)
 8005ad0:	f240 3239 	movw	r2, #825	; 0x339
 8005ad4:	4904      	ldr	r1, [pc, #16]	; (8005ae8 <pbuf_ref+0x3c>)
 8005ad6:	4805      	ldr	r0, [pc, #20]	; (8005aec <pbuf_ref+0x40>)
 8005ad8:	f007 ff96 	bl	800da08 <iprintf>
  }
}
 8005adc:	bf00      	nop
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	0800f0c8 	.word	0x0800f0c8
 8005ae8:	0800f390 	.word	0x0800f390
 8005aec:	0800f114 	.word	0x0800f114

08005af0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <pbuf_cat+0x16>
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d107      	bne.n	8005b16 <pbuf_cat+0x26>
 8005b06:	4b20      	ldr	r3, [pc, #128]	; (8005b88 <pbuf_cat+0x98>)
 8005b08:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8005b0c:	491f      	ldr	r1, [pc, #124]	; (8005b8c <pbuf_cat+0x9c>)
 8005b0e:	4820      	ldr	r0, [pc, #128]	; (8005b90 <pbuf_cat+0xa0>)
 8005b10:	f007 ff7a 	bl	800da08 <iprintf>
 8005b14:	e034      	b.n	8005b80 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	e00a      	b.n	8005b32 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	891a      	ldrh	r2, [r3, #8]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	891b      	ldrh	r3, [r3, #8]
 8005b24:	4413      	add	r3, r2
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1f0      	bne.n	8005b1c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	891a      	ldrh	r2, [r3, #8]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	895b      	ldrh	r3, [r3, #10]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d006      	beq.n	8005b54 <pbuf_cat+0x64>
 8005b46:	4b10      	ldr	r3, [pc, #64]	; (8005b88 <pbuf_cat+0x98>)
 8005b48:	f240 3255 	movw	r2, #853	; 0x355
 8005b4c:	4911      	ldr	r1, [pc, #68]	; (8005b94 <pbuf_cat+0xa4>)
 8005b4e:	4810      	ldr	r0, [pc, #64]	; (8005b90 <pbuf_cat+0xa0>)
 8005b50:	f007 ff5a 	bl	800da08 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d006      	beq.n	8005b6a <pbuf_cat+0x7a>
 8005b5c:	4b0a      	ldr	r3, [pc, #40]	; (8005b88 <pbuf_cat+0x98>)
 8005b5e:	f240 3256 	movw	r2, #854	; 0x356
 8005b62:	490d      	ldr	r1, [pc, #52]	; (8005b98 <pbuf_cat+0xa8>)
 8005b64:	480a      	ldr	r0, [pc, #40]	; (8005b90 <pbuf_cat+0xa0>)
 8005b66:	f007 ff4f 	bl	800da08 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	891a      	ldrh	r2, [r3, #8]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	891b      	ldrh	r3, [r3, #8]
 8005b72:	4413      	add	r3, r2
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	0800f0c8 	.word	0x0800f0c8
 8005b8c:	0800f3a4 	.word	0x0800f3a4
 8005b90:	0800f114 	.word	0x0800f114
 8005b94:	0800f3dc 	.word	0x0800f3dc
 8005b98:	0800f40c 	.word	0x0800f40c

08005b9c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005ba6:	6839      	ldr	r1, [r7, #0]
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff ffa1 	bl	8005af0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005bae:	6838      	ldr	r0, [r7, #0]
 8005bb0:	f7ff ff7c 	bl	8005aac <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005bb4:	bf00      	nop
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	81fb      	strh	r3, [r7, #14]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d008      	beq.n	8005be6 <pbuf_copy+0x2a>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d005      	beq.n	8005be6 <pbuf_copy+0x2a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	891a      	ldrh	r2, [r3, #8]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	891b      	ldrh	r3, [r3, #8]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d209      	bcs.n	8005bfa <pbuf_copy+0x3e>
 8005be6:	4b54      	ldr	r3, [pc, #336]	; (8005d38 <pbuf_copy+0x17c>)
 8005be8:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8005bec:	4953      	ldr	r1, [pc, #332]	; (8005d3c <pbuf_copy+0x180>)
 8005bee:	4854      	ldr	r0, [pc, #336]	; (8005d40 <pbuf_copy+0x184>)
 8005bf0:	f007 ff0a 	bl	800da08 <iprintf>
 8005bf4:	f06f 030f 	mvn.w	r3, #15
 8005bf8:	e099      	b.n	8005d2e <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	895b      	ldrh	r3, [r3, #10]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	89fb      	ldrh	r3, [r7, #14]
 8005c02:	1ad2      	subs	r2, r2, r3
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	895b      	ldrh	r3, [r3, #10]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	89bb      	ldrh	r3, [r7, #12]
 8005c0c:	1acb      	subs	r3, r1, r3
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	db05      	blt.n	8005c1e <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	895a      	ldrh	r2, [r3, #10]
 8005c16:	89bb      	ldrh	r3, [r7, #12]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	817b      	strh	r3, [r7, #10]
 8005c1c:	e004      	b.n	8005c28 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	895a      	ldrh	r2, [r3, #10]
 8005c22:	89fb      	ldrh	r3, [r7, #14]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	89fb      	ldrh	r3, [r7, #14]
 8005c2e:	18d0      	adds	r0, r2, r3
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	89bb      	ldrh	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	897a      	ldrh	r2, [r7, #10]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	f007 fece 	bl	800d9dc <memcpy>
    offset_to += len;
 8005c40:	89fa      	ldrh	r2, [r7, #14]
 8005c42:	897b      	ldrh	r3, [r7, #10]
 8005c44:	4413      	add	r3, r2
 8005c46:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8005c48:	89ba      	ldrh	r2, [r7, #12]
 8005c4a:	897b      	ldrh	r3, [r7, #10]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	895b      	ldrh	r3, [r3, #10]
 8005c54:	89fa      	ldrh	r2, [r7, #14]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d906      	bls.n	8005c68 <pbuf_copy+0xac>
 8005c5a:	4b37      	ldr	r3, [pc, #220]	; (8005d38 <pbuf_copy+0x17c>)
 8005c5c:	f240 32cd 	movw	r2, #973	; 0x3cd
 8005c60:	4938      	ldr	r1, [pc, #224]	; (8005d44 <pbuf_copy+0x188>)
 8005c62:	4837      	ldr	r0, [pc, #220]	; (8005d40 <pbuf_copy+0x184>)
 8005c64:	f007 fed0 	bl	800da08 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	895b      	ldrh	r3, [r3, #10]
 8005c6c:	89ba      	ldrh	r2, [r7, #12]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d906      	bls.n	8005c80 <pbuf_copy+0xc4>
 8005c72:	4b31      	ldr	r3, [pc, #196]	; (8005d38 <pbuf_copy+0x17c>)
 8005c74:	f240 32ce 	movw	r2, #974	; 0x3ce
 8005c78:	4933      	ldr	r1, [pc, #204]	; (8005d48 <pbuf_copy+0x18c>)
 8005c7a:	4831      	ldr	r0, [pc, #196]	; (8005d40 <pbuf_copy+0x184>)
 8005c7c:	f007 fec4 	bl	800da08 <iprintf>
    if (offset_from >= p_from->len) {
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	895b      	ldrh	r3, [r3, #10]
 8005c84:	89ba      	ldrh	r2, [r7, #12]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d304      	bcc.n	8005c94 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	895b      	ldrh	r3, [r3, #10]
 8005c98:	89fa      	ldrh	r2, [r7, #14]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d114      	bne.n	8005cc8 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10c      	bne.n	8005cc8 <pbuf_copy+0x10c>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d009      	beq.n	8005cc8 <pbuf_copy+0x10c>
 8005cb4:	4b20      	ldr	r3, [pc, #128]	; (8005d38 <pbuf_copy+0x17c>)
 8005cb6:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8005cba:	4924      	ldr	r1, [pc, #144]	; (8005d4c <pbuf_copy+0x190>)
 8005cbc:	4820      	ldr	r0, [pc, #128]	; (8005d40 <pbuf_copy+0x184>)
 8005cbe:	f007 fea3 	bl	800da08 <iprintf>
 8005cc2:	f06f 030f 	mvn.w	r3, #15
 8005cc6:	e032      	b.n	8005d2e <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d013      	beq.n	8005cf6 <pbuf_copy+0x13a>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	895a      	ldrh	r2, [r3, #10]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	891b      	ldrh	r3, [r3, #8]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d10d      	bne.n	8005cf6 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d009      	beq.n	8005cf6 <pbuf_copy+0x13a>
 8005ce2:	4b15      	ldr	r3, [pc, #84]	; (8005d38 <pbuf_copy+0x17c>)
 8005ce4:	f240 32dd 	movw	r2, #989	; 0x3dd
 8005ce8:	4919      	ldr	r1, [pc, #100]	; (8005d50 <pbuf_copy+0x194>)
 8005cea:	4815      	ldr	r0, [pc, #84]	; (8005d40 <pbuf_copy+0x184>)
 8005cec:	f007 fe8c 	bl	800da08 <iprintf>
 8005cf0:	f06f 0305 	mvn.w	r3, #5
 8005cf4:	e01b      	b.n	8005d2e <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d013      	beq.n	8005d24 <pbuf_copy+0x168>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	895a      	ldrh	r2, [r3, #10]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	891b      	ldrh	r3, [r3, #8]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d10d      	bne.n	8005d24 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d009      	beq.n	8005d24 <pbuf_copy+0x168>
 8005d10:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <pbuf_copy+0x17c>)
 8005d12:	f240 32e2 	movw	r2, #994	; 0x3e2
 8005d16:	490e      	ldr	r1, [pc, #56]	; (8005d50 <pbuf_copy+0x194>)
 8005d18:	4809      	ldr	r0, [pc, #36]	; (8005d40 <pbuf_copy+0x184>)
 8005d1a:	f007 fe75 	bl	800da08 <iprintf>
 8005d1e:	f06f 0305 	mvn.w	r3, #5
 8005d22:	e004      	b.n	8005d2e <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f47f af67 	bne.w	8005bfa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	0800f0c8 	.word	0x0800f0c8
 8005d3c:	0800f458 	.word	0x0800f458
 8005d40:	0800f114 	.word	0x0800f114
 8005d44:	0800f488 	.word	0x0800f488
 8005d48:	0800f4a0 	.word	0x0800f4a0
 8005d4c:	0800f4bc 	.word	0x0800f4bc
 8005d50:	0800f4cc 	.word	0x0800f4cc

08005d54 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	4611      	mov	r1, r2
 8005d60:	461a      	mov	r2, r3
 8005d62:	460b      	mov	r3, r1
 8005d64:	80fb      	strh	r3, [r7, #6]
 8005d66:	4613      	mov	r3, r2
 8005d68:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d108      	bne.n	8005d86 <pbuf_copy_partial+0x32>
 8005d74:	4b30      	ldr	r3, [pc, #192]	; (8005e38 <pbuf_copy_partial+0xe4>)
 8005d76:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005d7a:	4930      	ldr	r1, [pc, #192]	; (8005e3c <pbuf_copy_partial+0xe8>)
 8005d7c:	4830      	ldr	r0, [pc, #192]	; (8005e40 <pbuf_copy_partial+0xec>)
 8005d7e:	f007 fe43 	bl	800da08 <iprintf>
 8005d82:	2300      	movs	r3, #0
 8005d84:	e054      	b.n	8005e30 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d108      	bne.n	8005d9e <pbuf_copy_partial+0x4a>
 8005d8c:	4b2a      	ldr	r3, [pc, #168]	; (8005e38 <pbuf_copy_partial+0xe4>)
 8005d8e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005d92:	492c      	ldr	r1, [pc, #176]	; (8005e44 <pbuf_copy_partial+0xf0>)
 8005d94:	482a      	ldr	r0, [pc, #168]	; (8005e40 <pbuf_copy_partial+0xec>)
 8005d96:	f007 fe37 	bl	800da08 <iprintf>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e048      	b.n	8005e30 <pbuf_copy_partial+0xdc>

  left = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <pbuf_copy_partial+0x5a>
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <pbuf_copy_partial+0x5e>
    return 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	e03e      	b.n	8005e30 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	61fb      	str	r3, [r7, #28]
 8005db6:	e034      	b.n	8005e22 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8005db8:	88bb      	ldrh	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <pbuf_copy_partial+0x80>
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	895b      	ldrh	r3, [r3, #10]
 8005dc2:	88ba      	ldrh	r2, [r7, #4]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d305      	bcc.n	8005dd4 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	895b      	ldrh	r3, [r3, #10]
 8005dcc:	88ba      	ldrh	r2, [r7, #4]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	80bb      	strh	r3, [r7, #4]
 8005dd2:	e023      	b.n	8005e1c <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	895a      	ldrh	r2, [r3, #10]
 8005dd8:	88bb      	ldrh	r3, [r7, #4]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005dde:	8b3a      	ldrh	r2, [r7, #24]
 8005de0:	88fb      	ldrh	r3, [r7, #6]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d901      	bls.n	8005dea <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005dea:	8b7b      	ldrh	r3, [r7, #26]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	18d0      	adds	r0, r2, r3
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	88bb      	ldrh	r3, [r7, #4]
 8005df6:	4413      	add	r3, r2
 8005df8:	8b3a      	ldrh	r2, [r7, #24]
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	f007 fdee 	bl	800d9dc <memcpy>
      copied_total += buf_copy_len;
 8005e00:	8afa      	ldrh	r2, [r7, #22]
 8005e02:	8b3b      	ldrh	r3, [r7, #24]
 8005e04:	4413      	add	r3, r2
 8005e06:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8005e08:	8b7a      	ldrh	r2, [r7, #26]
 8005e0a:	8b3b      	ldrh	r3, [r7, #24]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8005e10:	88fa      	ldrh	r2, [r7, #6]
 8005e12:	8b3b      	ldrh	r3, [r7, #24]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	61fb      	str	r3, [r7, #28]
 8005e22:	88fb      	ldrh	r3, [r7, #6]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <pbuf_copy_partial+0xda>
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1c4      	bne.n	8005db8 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8005e2e:	8afb      	ldrh	r3, [r7, #22]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	0800f0c8 	.word	0x0800f0c8
 8005e3c:	0800f4f8 	.word	0x0800f4f8
 8005e40:	0800f114 	.word	0x0800f114
 8005e44:	0800f518 	.word	0x0800f518

08005e48 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	4613      	mov	r3, r2
 8005e54:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 8005e56:	88fb      	ldrh	r3, [r7, #6]
 8005e58:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d109      	bne.n	8005e78 <pbuf_take+0x30>
 8005e64:	4b3a      	ldr	r3, [pc, #232]	; (8005f50 <pbuf_take+0x108>)
 8005e66:	f240 4284 	movw	r2, #1156	; 0x484
 8005e6a:	493a      	ldr	r1, [pc, #232]	; (8005f54 <pbuf_take+0x10c>)
 8005e6c:	483a      	ldr	r0, [pc, #232]	; (8005f58 <pbuf_take+0x110>)
 8005e6e:	f007 fdcb 	bl	800da08 <iprintf>
 8005e72:	f06f 030f 	mvn.w	r3, #15
 8005e76:	e066      	b.n	8005f46 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <pbuf_take+0x4a>
 8005e7e:	4b34      	ldr	r3, [pc, #208]	; (8005f50 <pbuf_take+0x108>)
 8005e80:	f240 4285 	movw	r2, #1157	; 0x485
 8005e84:	4935      	ldr	r1, [pc, #212]	; (8005f5c <pbuf_take+0x114>)
 8005e86:	4834      	ldr	r0, [pc, #208]	; (8005f58 <pbuf_take+0x110>)
 8005e88:	f007 fdbe 	bl	800da08 <iprintf>
 8005e8c:	f06f 030f 	mvn.w	r3, #15
 8005e90:	e059      	b.n	8005f46 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	891b      	ldrh	r3, [r3, #8]
 8005e96:	88fa      	ldrh	r2, [r7, #6]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d909      	bls.n	8005eb0 <pbuf_take+0x68>
 8005e9c:	4b2c      	ldr	r3, [pc, #176]	; (8005f50 <pbuf_take+0x108>)
 8005e9e:	f240 4286 	movw	r2, #1158	; 0x486
 8005ea2:	492f      	ldr	r1, [pc, #188]	; (8005f60 <pbuf_take+0x118>)
 8005ea4:	482c      	ldr	r0, [pc, #176]	; (8005f58 <pbuf_take+0x110>)
 8005ea6:	f007 fdaf 	bl	800da08 <iprintf>
 8005eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eae:	e04a      	b.n	8005f46 <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d007      	beq.n	8005ec6 <pbuf_take+0x7e>
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d004      	beq.n	8005ec6 <pbuf_take+0x7e>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	891b      	ldrh	r3, [r3, #8]
 8005ec0:	88fa      	ldrh	r2, [r7, #6]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d902      	bls.n	8005ecc <pbuf_take+0x84>
    return ERR_ARG;
 8005ec6:	f06f 030f 	mvn.w	r3, #15
 8005eca:	e03c      	b.n	8005f46 <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	61fb      	str	r3, [r7, #28]
 8005ed0:	e027      	b.n	8005f22 <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <pbuf_take+0x9e>
 8005ed8:	4b1d      	ldr	r3, [pc, #116]	; (8005f50 <pbuf_take+0x108>)
 8005eda:	f240 428e 	movw	r2, #1166	; 0x48e
 8005ede:	4921      	ldr	r1, [pc, #132]	; (8005f64 <pbuf_take+0x11c>)
 8005ee0:	481d      	ldr	r0, [pc, #116]	; (8005f58 <pbuf_take+0x110>)
 8005ee2:	f007 fd91 	bl	800da08 <iprintf>
    buf_copy_len = total_copy_len;
 8005ee6:	8b3b      	ldrh	r3, [r7, #24]
 8005ee8:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	895b      	ldrh	r3, [r3, #10]
 8005eee:	8b7a      	ldrh	r2, [r7, #26]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d902      	bls.n	8005efa <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	895b      	ldrh	r3, [r3, #10]
 8005ef8:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	6858      	ldr	r0, [r3, #4]
 8005efe:	8afb      	ldrh	r3, [r7, #22]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	4413      	add	r3, r2
 8005f04:	8b7a      	ldrh	r2, [r7, #26]
 8005f06:	4619      	mov	r1, r3
 8005f08:	f007 fd68 	bl	800d9dc <memcpy>
    total_copy_len -= buf_copy_len;
 8005f0c:	8b3a      	ldrh	r2, [r7, #24]
 8005f0e:	8b7b      	ldrh	r3, [r7, #26]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 8005f14:	8afa      	ldrh	r2, [r7, #22]
 8005f16:	8b7b      	ldrh	r3, [r7, #26]
 8005f18:	4413      	add	r3, r2
 8005f1a:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	61fb      	str	r3, [r7, #28]
 8005f22:	8b3b      	ldrh	r3, [r7, #24]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1d4      	bne.n	8005ed2 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8005f28:	8b3b      	ldrh	r3, [r7, #24]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d103      	bne.n	8005f36 <pbuf_take+0xee>
 8005f2e:	8afa      	ldrh	r2, [r7, #22]
 8005f30:	88fb      	ldrh	r3, [r7, #6]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d006      	beq.n	8005f44 <pbuf_take+0xfc>
 8005f36:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <pbuf_take+0x108>)
 8005f38:	f240 4299 	movw	r2, #1177	; 0x499
 8005f3c:	490a      	ldr	r1, [pc, #40]	; (8005f68 <pbuf_take+0x120>)
 8005f3e:	4806      	ldr	r0, [pc, #24]	; (8005f58 <pbuf_take+0x110>)
 8005f40:	f007 fd62 	bl	800da08 <iprintf>
  return ERR_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3720      	adds	r7, #32
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	0800f0c8 	.word	0x0800f0c8
 8005f54:	0800f53c 	.word	0x0800f53c
 8005f58:	0800f114 	.word	0x0800f114
 8005f5c:	0800f554 	.word	0x0800f554
 8005f60:	0800f570 	.word	0x0800f570
 8005f64:	0800f590 	.word	0x0800f590
 8005f68:	0800f5a8 	.word	0x0800f5a8

08005f6c <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8005f70:	bf00      	nop
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bc80      	pop	{r7}
 8005f76:	4770      	bx	lr

08005f78 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8005f7c:	bf00      	nop
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bc80      	pop	{r7}
 8005f82:	4770      	bx	lr

08005f84 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005f88:	f000 fdfa 	bl	8006b80 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005f8c:	4b07      	ldr	r3, [pc, #28]	; (8005fac <tcp_tmr+0x28>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	3301      	adds	r3, #1
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	4b05      	ldr	r3, [pc, #20]	; (8005fac <tcp_tmr+0x28>)
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	4b04      	ldr	r3, [pc, #16]	; (8005fac <tcp_tmr+0x28>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005fa4:	f000 fb2a 	bl	80065fc <tcp_slowtmr>
  }
}
 8005fa8:	bf00      	nop
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	2000692d 	.word	0x2000692d

08005fb0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	e00a      	b.n	8005fd6 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d102      	bne.n	8005fd0 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1f1      	bne.n	8005fc0 <tcp_remove_listener+0x10>
      }
   }
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr

08005fe8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d105      	bne.n	8006002 <tcp_listen_closed+0x1a>
 8005ff6:	4b13      	ldr	r3, [pc, #76]	; (8006044 <tcp_listen_closed+0x5c>)
 8005ff8:	22c0      	movs	r2, #192	; 0xc0
 8005ffa:	4913      	ldr	r1, [pc, #76]	; (8006048 <tcp_listen_closed+0x60>)
 8005ffc:	4813      	ldr	r0, [pc, #76]	; (800604c <tcp_listen_closed+0x64>)
 8005ffe:	f007 fd03 	bl	800da08 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	7d1b      	ldrb	r3, [r3, #20]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d005      	beq.n	8006016 <tcp_listen_closed+0x2e>
 800600a:	4b0e      	ldr	r3, [pc, #56]	; (8006044 <tcp_listen_closed+0x5c>)
 800600c:	22c1      	movs	r2, #193	; 0xc1
 800600e:	4910      	ldr	r1, [pc, #64]	; (8006050 <tcp_listen_closed+0x68>)
 8006010:	480e      	ldr	r0, [pc, #56]	; (800604c <tcp_listen_closed+0x64>)
 8006012:	f007 fcf9 	bl	800da08 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006016:	2301      	movs	r3, #1
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	e00b      	b.n	8006034 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800601c:	4a0d      	ldr	r2, [pc, #52]	; (8006054 <tcp_listen_closed+0x6c>)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff ffc1 	bl	8005fb0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3301      	adds	r3, #1
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b03      	cmp	r3, #3
 8006038:	d9f0      	bls.n	800601c <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800603a:	bf00      	nop
 800603c:	bf00      	nop
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	0800f64c 	.word	0x0800f64c
 8006048:	0800f67c 	.word	0x0800f67c
 800604c:	0800f688 	.word	0x0800f688
 8006050:	0800f6b0 	.word	0x0800f6b0
 8006054:	08010ab4 	.word	0x08010ab4

08006058 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006058:	b5b0      	push	{r4, r5, r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af02      	add	r7, sp, #8
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d075      	beq.n	8006156 <tcp_close_shutdown+0xfe>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	7d1b      	ldrb	r3, [r3, #20]
 800606e:	2b04      	cmp	r3, #4
 8006070:	d003      	beq.n	800607a <tcp_close_shutdown+0x22>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	7d1b      	ldrb	r3, [r3, #20]
 8006076:	2b07      	cmp	r3, #7
 8006078:	d16d      	bne.n	8006156 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800607e:	2b00      	cmp	r3, #0
 8006080:	d104      	bne.n	800608c <tcp_close_shutdown+0x34>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006086:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800608a:	d064      	beq.n	8006156 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	7e9b      	ldrb	r3, [r3, #26]
 8006090:	f003 0310 	and.w	r3, r3, #16
 8006094:	2b00      	cmp	r3, #0
 8006096:	d106      	bne.n	80060a6 <tcp_close_shutdown+0x4e>
 8006098:	4b5b      	ldr	r3, [pc, #364]	; (8006208 <tcp_close_shutdown+0x1b0>)
 800609a:	f240 120f 	movw	r2, #271	; 0x10f
 800609e:	495b      	ldr	r1, [pc, #364]	; (800620c <tcp_close_shutdown+0x1b4>)
 80060a0:	485b      	ldr	r0, [pc, #364]	; (8006210 <tcp_close_shutdown+0x1b8>)
 80060a2:	f007 fcb1 	bl	800da08 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80060ae:	687c      	ldr	r4, [r7, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	1d1d      	adds	r5, r3, #4
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	8adb      	ldrh	r3, [r3, #22]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	8b12      	ldrh	r2, [r2, #24]
 80060bc:	9201      	str	r2, [sp, #4]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	462b      	mov	r3, r5
 80060c2:	4622      	mov	r2, r4
 80060c4:	f004 f918 	bl	800a2f8 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fff9 	bl	80070c0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80060ce:	4b51      	ldr	r3, [pc, #324]	; (8006214 <tcp_close_shutdown+0x1bc>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d105      	bne.n	80060e4 <tcp_close_shutdown+0x8c>
 80060d8:	4b4e      	ldr	r3, [pc, #312]	; (8006214 <tcp_close_shutdown+0x1bc>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	4a4d      	ldr	r2, [pc, #308]	; (8006214 <tcp_close_shutdown+0x1bc>)
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	e013      	b.n	800610c <tcp_close_shutdown+0xb4>
 80060e4:	4b4b      	ldr	r3, [pc, #300]	; (8006214 <tcp_close_shutdown+0x1bc>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	e00c      	b.n	8006106 <tcp_close_shutdown+0xae>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d104      	bne.n	8006100 <tcp_close_shutdown+0xa8>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	60da      	str	r2, [r3, #12]
 80060fe:	e005      	b.n	800610c <tcp_close_shutdown+0xb4>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1ef      	bne.n	80060ec <tcp_close_shutdown+0x94>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	60da      	str	r2, [r3, #12]
 8006112:	4b41      	ldr	r3, [pc, #260]	; (8006218 <tcp_close_shutdown+0x1c0>)
 8006114:	2201      	movs	r2, #1
 8006116:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	7d1b      	ldrb	r3, [r3, #20]
 800611c:	2b04      	cmp	r3, #4
 800611e:	d10c      	bne.n	800613a <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	220a      	movs	r2, #10
 8006124:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006126:	4b3d      	ldr	r3, [pc, #244]	; (800621c <tcp_close_shutdown+0x1c4>)
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	60da      	str	r2, [r3, #12]
 800612e:	4a3b      	ldr	r2, [pc, #236]	; (800621c <tcp_close_shutdown+0x1c4>)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	f004 fb46 	bl	800a7c4 <tcp_timer_needed>
 8006138:	e00b      	b.n	8006152 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800613a:	4b39      	ldr	r3, [pc, #228]	; (8006220 <tcp_close_shutdown+0x1c8>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	429a      	cmp	r2, r3
 8006142:	d102      	bne.n	800614a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8006144:	f003 fb7c 	bl	8009840 <tcp_trigger_input_pcb_close>
 8006148:	e003      	b.n	8006152 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	2001      	movs	r0, #1
 800614e:	f7fe fec5 	bl	8004edc <memp_free>
        }
      }
      return ERR_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	e053      	b.n	80061fe <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	7d1b      	ldrb	r3, [r3, #20]
 800615a:	2b02      	cmp	r3, #2
 800615c:	d03d      	beq.n	80061da <tcp_close_shutdown+0x182>
 800615e:	2b02      	cmp	r3, #2
 8006160:	dc47      	bgt.n	80061f2 <tcp_close_shutdown+0x19a>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <tcp_close_shutdown+0x114>
 8006166:	2b01      	cmp	r3, #1
 8006168:	d02b      	beq.n	80061c2 <tcp_close_shutdown+0x16a>
 800616a:	e042      	b.n	80061f2 <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	8adb      	ldrh	r3, [r3, #22]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d021      	beq.n	80061b8 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8006174:	4b2b      	ldr	r3, [pc, #172]	; (8006224 <tcp_close_shutdown+0x1cc>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	429a      	cmp	r2, r3
 800617c:	d105      	bne.n	800618a <tcp_close_shutdown+0x132>
 800617e:	4b29      	ldr	r3, [pc, #164]	; (8006224 <tcp_close_shutdown+0x1cc>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	4a27      	ldr	r2, [pc, #156]	; (8006224 <tcp_close_shutdown+0x1cc>)
 8006186:	6013      	str	r3, [r2, #0]
 8006188:	e013      	b.n	80061b2 <tcp_close_shutdown+0x15a>
 800618a:	4b26      	ldr	r3, [pc, #152]	; (8006224 <tcp_close_shutdown+0x1cc>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60bb      	str	r3, [r7, #8]
 8006190:	e00c      	b.n	80061ac <tcp_close_shutdown+0x154>
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	429a      	cmp	r2, r3
 800619a:	d104      	bne.n	80061a6 <tcp_close_shutdown+0x14e>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	60da      	str	r2, [r3, #12]
 80061a4:	e005      	b.n	80061b2 <tcp_close_shutdown+0x15a>
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	60bb      	str	r3, [r7, #8]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1ef      	bne.n	8006192 <tcp_close_shutdown+0x13a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	2001      	movs	r0, #1
 80061bc:	f7fe fe8e 	bl	8004edc <memp_free>
    break;
 80061c0:	e01c      	b.n	80061fc <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff ff10 	bl	8005fe8 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	4817      	ldr	r0, [pc, #92]	; (8006228 <tcp_close_shutdown+0x1d0>)
 80061cc:	f000 ffba 	bl	8007144 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	2002      	movs	r0, #2
 80061d4:	f7fe fe82 	bl	8004edc <memp_free>
    break;
 80061d8:	e010      	b.n	80061fc <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	480d      	ldr	r0, [pc, #52]	; (8006214 <tcp_close_shutdown+0x1bc>)
 80061de:	f000 ffb1 	bl	8007144 <tcp_pcb_remove>
 80061e2:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <tcp_close_shutdown+0x1c0>)
 80061e4:	2201      	movs	r2, #1
 80061e6:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	2001      	movs	r0, #1
 80061ec:	f7fe fe76 	bl	8004edc <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 80061f0:	e004      	b.n	80061fc <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f81a 	bl	800622c <tcp_close_shutdown_fin>
 80061f8:	4603      	mov	r3, r0
 80061fa:	e000      	b.n	80061fe <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bdb0      	pop	{r4, r5, r7, pc}
 8006206:	bf00      	nop
 8006208:	0800f64c 	.word	0x0800f64c
 800620c:	0800f6c8 	.word	0x0800f6c8
 8006210:	0800f688 	.word	0x0800f688
 8006214:	20006924 	.word	0x20006924
 8006218:	2000692c 	.word	0x2000692c
 800621c:	20006928 	.word	0x20006928
 8006220:	20006964 	.word	0x20006964
 8006224:	2000691c 	.word	0x2000691c
 8006228:	20006920 	.word	0x20006920

0800622c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <tcp_close_shutdown_fin+0x1c>
 800623a:	4b2e      	ldr	r3, [pc, #184]	; (80062f4 <tcp_close_shutdown_fin+0xc8>)
 800623c:	f240 124d 	movw	r2, #333	; 0x14d
 8006240:	492d      	ldr	r1, [pc, #180]	; (80062f8 <tcp_close_shutdown_fin+0xcc>)
 8006242:	482e      	ldr	r0, [pc, #184]	; (80062fc <tcp_close_shutdown_fin+0xd0>)
 8006244:	f007 fbe0 	bl	800da08 <iprintf>

  switch (pcb->state) {
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	7d1b      	ldrb	r3, [r3, #20]
 800624c:	2b07      	cmp	r3, #7
 800624e:	d020      	beq.n	8006292 <tcp_close_shutdown_fin+0x66>
 8006250:	2b07      	cmp	r3, #7
 8006252:	dc2b      	bgt.n	80062ac <tcp_close_shutdown_fin+0x80>
 8006254:	2b03      	cmp	r3, #3
 8006256:	d002      	beq.n	800625e <tcp_close_shutdown_fin+0x32>
 8006258:	2b04      	cmp	r3, #4
 800625a:	d00d      	beq.n	8006278 <tcp_close_shutdown_fin+0x4c>
 800625c:	e026      	b.n	80062ac <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f003 fb78 	bl	8009954 <tcp_send_fin>
 8006264:	4603      	mov	r3, r0
 8006266:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d11f      	bne.n	80062b0 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2205      	movs	r2, #5
 8006274:	751a      	strb	r2, [r3, #20]
    }
    break;
 8006276:	e01b      	b.n	80062b0 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f003 fb6b 	bl	8009954 <tcp_send_fin>
 800627e:	4603      	mov	r3, r0
 8006280:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d114      	bne.n	80062b4 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2205      	movs	r2, #5
 800628e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8006290:	e010      	b.n	80062b4 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f003 fb5e 	bl	8009954 <tcp_send_fin>
 8006298:	4603      	mov	r3, r0
 800629a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800629c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d109      	bne.n	80062b8 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2209      	movs	r2, #9
 80062a8:	751a      	strb	r2, [r3, #20]
    }
    break;
 80062aa:	e005      	b.n	80062b8 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 80062ac:	2300      	movs	r3, #0
 80062ae:	e01c      	b.n	80062ea <tcp_close_shutdown_fin+0xbe>
    break;
 80062b0:	bf00      	nop
 80062b2:	e002      	b.n	80062ba <tcp_close_shutdown_fin+0x8e>
    break;
 80062b4:	bf00      	nop
 80062b6:	e000      	b.n	80062ba <tcp_close_shutdown_fin+0x8e>
    break;
 80062b8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80062ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d103      	bne.n	80062ca <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f003 fd8a 	bl	8009ddc <tcp_output>
 80062c8:	e00d      	b.n	80062e6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80062ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062d2:	d108      	bne.n	80062e6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	7e9b      	ldrb	r3, [r3, #26]
 80062d8:	f043 0308 	orr.w	r3, r3, #8
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	e001      	b.n	80062ea <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80062e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	0800f64c 	.word	0x0800f64c
 80062f8:	0800f67c 	.word	0x0800f67c
 80062fc:	0800f688 	.word	0x0800f688

08006300 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	7d1b      	ldrb	r3, [r3, #20]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d006      	beq.n	800631e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	7e9b      	ldrb	r3, [r3, #26]
 8006314:	f043 0310 	orr.w	r3, r3, #16
 8006318:	b2da      	uxtb	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800631e:	2101      	movs	r1, #1
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7ff fe99 	bl	8006058 <tcp_close_shutdown>
 8006326:	4603      	mov	r3, r0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08c      	sub	sp, #48	; 0x30
 8006334:	af02      	add	r7, sp, #8
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	7d1b      	ldrb	r3, [r3, #20]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d106      	bne.n	8006350 <tcp_abandon+0x20>
 8006342:	4b4d      	ldr	r3, [pc, #308]	; (8006478 <tcp_abandon+0x148>)
 8006344:	f240 12df 	movw	r2, #479	; 0x1df
 8006348:	494c      	ldr	r1, [pc, #304]	; (800647c <tcp_abandon+0x14c>)
 800634a:	484d      	ldr	r0, [pc, #308]	; (8006480 <tcp_abandon+0x150>)
 800634c:	f007 fb5c 	bl	800da08 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	7d1b      	ldrb	r3, [r3, #20]
 8006354:	2b0a      	cmp	r3, #10
 8006356:	d108      	bne.n	800636a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006358:	6879      	ldr	r1, [r7, #4]
 800635a:	484a      	ldr	r0, [pc, #296]	; (8006484 <tcp_abandon+0x154>)
 800635c:	f000 fef2 	bl	8007144 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	2001      	movs	r0, #1
 8006364:	f7fe fdba 	bl	8004edc <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8006368:	e081      	b.n	800646e <tcp_abandon+0x13e>
    int send_rst = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006376:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006384:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	7d1b      	ldrb	r3, [r3, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d126      	bne.n	80063e2 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	8adb      	ldrh	r3, [r3, #22]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d02e      	beq.n	80063fa <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800639c:	4b3a      	ldr	r3, [pc, #232]	; (8006488 <tcp_abandon+0x158>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d105      	bne.n	80063b2 <tcp_abandon+0x82>
 80063a6:	4b38      	ldr	r3, [pc, #224]	; (8006488 <tcp_abandon+0x158>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	4a36      	ldr	r2, [pc, #216]	; (8006488 <tcp_abandon+0x158>)
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	e013      	b.n	80063da <tcp_abandon+0xaa>
 80063b2:	4b35      	ldr	r3, [pc, #212]	; (8006488 <tcp_abandon+0x158>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	61fb      	str	r3, [r7, #28]
 80063b8:	e00c      	b.n	80063d4 <tcp_abandon+0xa4>
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d104      	bne.n	80063ce <tcp_abandon+0x9e>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68da      	ldr	r2, [r3, #12]
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	60da      	str	r2, [r3, #12]
 80063cc:	e005      	b.n	80063da <tcp_abandon+0xaa>
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	61fb      	str	r3, [r7, #28]
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1ef      	bne.n	80063ba <tcp_abandon+0x8a>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	60da      	str	r2, [r3, #12]
 80063e0:	e00b      	b.n	80063fa <tcp_abandon+0xca>
      send_rst = reset;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	8adb      	ldrh	r3, [r3, #22]
 80063ea:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80063ec:	6879      	ldr	r1, [r7, #4]
 80063ee:	4827      	ldr	r0, [pc, #156]	; (800648c <tcp_abandon+0x15c>)
 80063f0:	f000 fea8 	bl	8007144 <tcp_pcb_remove>
 80063f4:	4b26      	ldr	r3, [pc, #152]	; (8006490 <tcp_abandon+0x160>)
 80063f6:	2201      	movs	r2, #1
 80063f8:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d004      	beq.n	800640c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006406:	4618      	mov	r0, r3
 8006408:	f000 fc87 	bl	8006d1a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006410:	2b00      	cmp	r3, #0
 8006412:	d004      	beq.n	800641e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006418:	4618      	mov	r0, r3
 800641a:	f000 fc7e 	bl	8006d1a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006422:	2b00      	cmp	r3, #0
 8006424:	d004      	beq.n	8006430 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fc75 	bl	8006d1a <tcp_segs_free>
    if (send_rst) {
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00c      	beq.n	8006450 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	1d19      	adds	r1, r3, #4
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	8b1b      	ldrh	r3, [r3, #24]
 8006440:	9301      	str	r3, [sp, #4]
 8006442:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	460b      	mov	r3, r1
 8006448:	6979      	ldr	r1, [r7, #20]
 800644a:	69b8      	ldr	r0, [r7, #24]
 800644c:	f003 ff54 	bl	800a2f8 <tcp_rst>
    last_state = pcb->state;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	7d1b      	ldrb	r3, [r3, #20]
 8006454:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8006456:	6879      	ldr	r1, [r7, #4]
 8006458:	2001      	movs	r0, #1
 800645a:	f7fe fd3f 	bl	8004edc <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d004      	beq.n	800646e <tcp_abandon+0x13e>
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f06f 010c 	mvn.w	r1, #12
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	4798      	blx	r3
}
 800646e:	bf00      	nop
 8006470:	3728      	adds	r7, #40	; 0x28
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	0800f64c 	.word	0x0800f64c
 800647c:	0800f6e4 	.word	0x0800f6e4
 8006480:	0800f688 	.word	0x0800f688
 8006484:	20006928 	.word	0x20006928
 8006488:	2000691c 	.word	0x2000691c
 800648c:	20006924 	.word	0x20006924
 8006490:	2000692c 	.word	0x2000692c

08006494 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800649c:	2101      	movs	r1, #1
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff ff46 	bl	8006330 <tcp_abandon>
}
 80064a4:	bf00      	nop
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80064bc:	4413      	add	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80064c8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80064cc:	bf28      	it	cs
 80064ce:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80064d2:	b292      	uxth	r2, r2
 80064d4:	4413      	add	r3, r2
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	db08      	blt.n	80064f0 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	e020      	b.n	8006532 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	dd03      	ble.n	8006506 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006504:	e014      	b.n	8006530 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006518:	d306      	bcc.n	8006528 <tcp_update_rcv_ann_wnd+0x7c>
 800651a:	4b08      	ldr	r3, [pc, #32]	; (800653c <tcp_update_rcv_ann_wnd+0x90>)
 800651c:	f44f 7242 	mov.w	r2, #776	; 0x308
 8006520:	4907      	ldr	r1, [pc, #28]	; (8006540 <tcp_update_rcv_ann_wnd+0x94>)
 8006522:	4808      	ldr	r0, [pc, #32]	; (8006544 <tcp_update_rcv_ann_wnd+0x98>)
 8006524:	f007 fa70 	bl	800da08 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	b29a      	uxth	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006530:	2300      	movs	r3, #0
  }
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	0800f64c 	.word	0x0800f64c
 8006540:	0800f764 	.word	0x0800f764
 8006544:	0800f688 	.word	0x0800f688

08006548 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	7d1b      	ldrb	r3, [r3, #20]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d106      	bne.n	800656a <tcp_recved+0x22>
 800655c:	4b23      	ldr	r3, [pc, #140]	; (80065ec <tcp_recved+0xa4>)
 800655e:	f240 321f 	movw	r2, #799	; 0x31f
 8006562:	4923      	ldr	r1, [pc, #140]	; (80065f0 <tcp_recved+0xa8>)
 8006564:	4823      	ldr	r0, [pc, #140]	; (80065f4 <tcp_recved+0xac>)
 8006566:	f007 fa4f 	bl	800da08 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800656e:	887b      	ldrh	r3, [r7, #2]
 8006570:	4413      	add	r3, r2
 8006572:	b29a      	uxth	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800657c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006580:	d904      	bls.n	800658c <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006588:	851a      	strh	r2, [r3, #40]	; 0x28
 800658a:	e017      	b.n	80065bc <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006590:	2b00      	cmp	r3, #0
 8006592:	d113      	bne.n	80065bc <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	7d1b      	ldrb	r3, [r3, #20]
 8006598:	2b07      	cmp	r3, #7
 800659a:	d003      	beq.n	80065a4 <tcp_recved+0x5c>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	7d1b      	ldrb	r3, [r3, #20]
 80065a0:	2b09      	cmp	r3, #9
 80065a2:	d104      	bne.n	80065ae <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80065aa:	851a      	strh	r2, [r3, #40]	; 0x28
 80065ac:	e006      	b.n	80065bc <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80065ae:	4b0f      	ldr	r3, [pc, #60]	; (80065ec <tcp_recved+0xa4>)
 80065b0:	f240 322d 	movw	r2, #813	; 0x32d
 80065b4:	4910      	ldr	r1, [pc, #64]	; (80065f8 <tcp_recved+0xb0>)
 80065b6:	480f      	ldr	r0, [pc, #60]	; (80065f4 <tcp_recved+0xac>)
 80065b8:	f007 fa26 	bl	800da08 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7ff ff75 	bl	80064ac <tcp_update_rcv_ann_wnd>
 80065c2:	4603      	mov	r3, r0
 80065c4:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80065cc:	db09      	blt.n	80065e2 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	7e9b      	ldrb	r3, [r3, #26]
 80065d2:	f043 0302 	orr.w	r3, r3, #2
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f003 fbfd 	bl	8009ddc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80065e2:	bf00      	nop
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	0800f64c 	.word	0x0800f64c
 80065f0:	0800f780 	.word	0x0800f780
 80065f4:	0800f688 	.word	0x0800f688
 80065f8:	0800f7a8 	.word	0x0800f7a8

080065fc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80065fc:	b5b0      	push	{r4, r5, r7, lr}
 80065fe:	b08c      	sub	sp, #48	; 0x30
 8006600:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8006606:	4b97      	ldr	r3, [pc, #604]	; (8006864 <tcp_slowtmr+0x268>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3301      	adds	r3, #1
 800660c:	4a95      	ldr	r2, [pc, #596]	; (8006864 <tcp_slowtmr+0x268>)
 800660e:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006610:	4b95      	ldr	r3, [pc, #596]	; (8006868 <tcp_slowtmr+0x26c>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	3301      	adds	r3, #1
 8006616:	b2da      	uxtb	r2, r3
 8006618:	4b93      	ldr	r3, [pc, #588]	; (8006868 <tcp_slowtmr+0x26c>)
 800661a:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800661c:	2300      	movs	r3, #0
 800661e:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8006620:	4b92      	ldr	r3, [pc, #584]	; (800686c <tcp_slowtmr+0x270>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006626:	e227      	b.n	8006a78 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	7d1b      	ldrb	r3, [r3, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d106      	bne.n	800663e <tcp_slowtmr+0x42>
 8006630:	4b8f      	ldr	r3, [pc, #572]	; (8006870 <tcp_slowtmr+0x274>)
 8006632:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8006636:	498f      	ldr	r1, [pc, #572]	; (8006874 <tcp_slowtmr+0x278>)
 8006638:	488f      	ldr	r0, [pc, #572]	; (8006878 <tcp_slowtmr+0x27c>)
 800663a:	f007 f9e5 	bl	800da08 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	7d1b      	ldrb	r3, [r3, #20]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d106      	bne.n	8006654 <tcp_slowtmr+0x58>
 8006646:	4b8a      	ldr	r3, [pc, #552]	; (8006870 <tcp_slowtmr+0x274>)
 8006648:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800664c:	498b      	ldr	r1, [pc, #556]	; (800687c <tcp_slowtmr+0x280>)
 800664e:	488a      	ldr	r0, [pc, #552]	; (8006878 <tcp_slowtmr+0x27c>)
 8006650:	f007 f9da 	bl	800da08 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	7d1b      	ldrb	r3, [r3, #20]
 8006658:	2b0a      	cmp	r3, #10
 800665a:	d106      	bne.n	800666a <tcp_slowtmr+0x6e>
 800665c:	4b84      	ldr	r3, [pc, #528]	; (8006870 <tcp_slowtmr+0x274>)
 800665e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8006662:	4987      	ldr	r1, [pc, #540]	; (8006880 <tcp_slowtmr+0x284>)
 8006664:	4884      	ldr	r0, [pc, #528]	; (8006878 <tcp_slowtmr+0x27c>)
 8006666:	f007 f9cf 	bl	800da08 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	7f5a      	ldrb	r2, [r3, #29]
 800666e:	4b7e      	ldr	r3, [pc, #504]	; (8006868 <tcp_slowtmr+0x26c>)
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d103      	bne.n	800667e <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800667c:	e1fc      	b.n	8006a78 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800667e:	4b7a      	ldr	r3, [pc, #488]	; (8006868 <tcp_slowtmr+0x26c>)
 8006680:	781a      	ldrb	r2, [r3, #0]
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8006686:	2300      	movs	r3, #0
 8006688:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	7d1b      	ldrb	r3, [r3, #20]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d108      	bne.n	80066a8 <tcp_slowtmr+0xac>
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800669c:	2b05      	cmp	r3, #5
 800669e:	d903      	bls.n	80066a8 <tcp_slowtmr+0xac>
      ++pcb_remove;
 80066a0:	7ffb      	ldrb	r3, [r7, #31]
 80066a2:	3301      	adds	r3, #1
 80066a4:	77fb      	strb	r3, [r7, #31]
 80066a6:	e0a2      	b.n	80067ee <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066ae:	2b0b      	cmp	r3, #11
 80066b0:	d903      	bls.n	80066ba <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80066b2:	7ffb      	ldrb	r3, [r7, #31]
 80066b4:	3301      	adds	r3, #1
 80066b6:	77fb      	strb	r3, [r7, #31]
 80066b8:	e099      	b.n	80067ee <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d032      	beq.n	800672a <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80066ca:	3b01      	subs	r3, #1
 80066cc:	4a6d      	ldr	r2, [pc, #436]	; (8006884 <tcp_slowtmr+0x288>)
 80066ce:	5cd3      	ldrb	r3, [r2, r3]
 80066d0:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80066d8:	7cfa      	ldrb	r2, [r7, #19]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d907      	bls.n	80066ee <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80066e4:	3301      	adds	r3, #1
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80066f4:	7cfa      	ldrb	r2, [r7, #19]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d879      	bhi.n	80067ee <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80066fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066fc:	f003 ff98 	bl	800a630 <tcp_zero_window_probe>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d173      	bne.n	80067ee <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006714:	2b06      	cmp	r3, #6
 8006716:	d86a      	bhi.n	80067ee <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800671e:	3301      	adds	r3, #1
 8006720:	b2da      	uxtb	r2, r3
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8006728:	e061      	b.n	80067ee <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006730:	2b00      	cmp	r3, #0
 8006732:	db08      	blt.n	8006746 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800673a:	b29b      	uxth	r3, r3
 800673c:	3301      	adds	r3, #1
 800673e:	b29b      	uxth	r3, r3
 8006740:	b21a      	sxth	r2, r3
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800674a:	2b00      	cmp	r3, #0
 800674c:	d04f      	beq.n	80067ee <tcp_slowtmr+0x1f2>
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800675a:	429a      	cmp	r2, r3
 800675c:	db47      	blt.n	80067ee <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	7d1b      	ldrb	r3, [r3, #20]
 8006762:	2b02      	cmp	r3, #2
 8006764:	d018      	beq.n	8006798 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800676c:	2b0c      	cmp	r3, #12
 800676e:	bf28      	it	cs
 8006770:	230c      	movcs	r3, #12
 8006772:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800677a:	10db      	asrs	r3, r3, #3
 800677c:	b21b      	sxth	r3, r3
 800677e:	461a      	mov	r2, r3
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006786:	4413      	add	r3, r2
 8006788:	7dfa      	ldrb	r2, [r7, #23]
 800678a:	493f      	ldr	r1, [pc, #252]	; (8006888 <tcp_slowtmr+0x28c>)
 800678c:	5c8a      	ldrb	r2, [r1, r2]
 800678e:	4093      	lsls	r3, r2
 8006790:	b21a      	sxth	r2, r3
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	2200      	movs	r2, #0
 800679c:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80067aa:	4293      	cmp	r3, r2
 80067ac:	bf28      	it	cs
 80067ae:	4613      	movcs	r3, r2
 80067b0:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 80067b2:	8abb      	ldrh	r3, [r7, #20]
 80067b4:	085b      	lsrs	r3, r3, #1
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d206      	bcs.n	80067de <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 80067e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067ea:	f003 fe05 	bl	800a3f8 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	7d1b      	ldrb	r3, [r3, #20]
 80067f2:	2b06      	cmp	r3, #6
 80067f4:	d10f      	bne.n	8006816 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	7e9b      	ldrb	r3, [r3, #26]
 80067fa:	f003 0310 	and.w	r3, r3, #16
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d009      	beq.n	8006816 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006802:	4b18      	ldr	r3, [pc, #96]	; (8006864 <tcp_slowtmr+0x268>)
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b28      	cmp	r3, #40	; 0x28
 800680e:	d902      	bls.n	8006816 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006810:	7ffb      	ldrb	r3, [r7, #31]
 8006812:	3301      	adds	r3, #1
 8006814:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	7a1b      	ldrb	r3, [r3, #8]
 800681a:	f003 0308 	and.w	r3, r3, #8
 800681e:	2b00      	cmp	r3, #0
 8006820:	d05d      	beq.n	80068de <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006826:	2b04      	cmp	r3, #4
 8006828:	d003      	beq.n	8006832 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800682e:	2b07      	cmp	r3, #7
 8006830:	d155      	bne.n	80068de <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006832:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <tcp_slowtmr+0x268>)
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006842:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006846:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800684a:	4910      	ldr	r1, [pc, #64]	; (800688c <tcp_slowtmr+0x290>)
 800684c:	fba1 1303 	umull	r1, r3, r1, r3
 8006850:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006852:	429a      	cmp	r2, r3
 8006854:	d91c      	bls.n	8006890 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006856:	7ffb      	ldrb	r3, [r7, #31]
 8006858:	3301      	adds	r3, #1
 800685a:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800685c:	7fbb      	ldrb	r3, [r7, #30]
 800685e:	3301      	adds	r3, #1
 8006860:	77bb      	strb	r3, [r7, #30]
 8006862:	e03c      	b.n	80068de <tcp_slowtmr+0x2e2>
 8006864:	20006918 	.word	0x20006918
 8006868:	2000692e 	.word	0x2000692e
 800686c:	20006924 	.word	0x20006924
 8006870:	0800f64c 	.word	0x0800f64c
 8006874:	0800f7fc 	.word	0x0800f7fc
 8006878:	0800f688 	.word	0x0800f688
 800687c:	0800f828 	.word	0x0800f828
 8006880:	0800f854 	.word	0x0800f854
 8006884:	08010aac 	.word	0x08010aac
 8006888:	08010a9c 	.word	0x08010a9c
 800688c:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006890:	4b97      	ldr	r3, [pc, #604]	; (8006af0 <tcp_slowtmr+0x4f4>)
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80068a6:	4618      	mov	r0, r3
 80068a8:	4b92      	ldr	r3, [pc, #584]	; (8006af4 <tcp_slowtmr+0x4f8>)
 80068aa:	fb00 f303 	mul.w	r3, r0, r3
 80068ae:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 80068b0:	4991      	ldr	r1, [pc, #580]	; (8006af8 <tcp_slowtmr+0x4fc>)
 80068b2:	fba1 1303 	umull	r1, r3, r1, r3
 80068b6:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d910      	bls.n	80068de <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 80068bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068be:	f003 fe6f 	bl	800a5a0 <tcp_keepalive>
 80068c2:	4603      	mov	r3, r0
 80068c4:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 80068c6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d107      	bne.n	80068de <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80068d4:	3301      	adds	r3, #1
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d016      	beq.n	8006914 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80068e6:	4b82      	ldr	r3, [pc, #520]	; (8006af0 <tcp_slowtmr+0x4f4>)
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	1ad2      	subs	r2, r2, r3
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80068f6:	4619      	mov	r1, r3
 80068f8:	460b      	mov	r3, r1
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	440b      	add	r3, r1
 80068fe:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006900:	429a      	cmp	r2, r3
 8006902:	d307      	bcc.n	8006914 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006908:	4618      	mov	r0, r3
 800690a:	f000 fa06 	bl	8006d1a <tcp_segs_free>
      pcb->ooseq = NULL;
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	2200      	movs	r2, #0
 8006912:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	7d1b      	ldrb	r3, [r3, #20]
 8006918:	2b03      	cmp	r3, #3
 800691a:	d109      	bne.n	8006930 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800691c:	4b74      	ldr	r3, [pc, #464]	; (8006af0 <tcp_slowtmr+0x4f4>)
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b28      	cmp	r3, #40	; 0x28
 8006928:	d902      	bls.n	8006930 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800692a:	7ffb      	ldrb	r3, [r7, #31]
 800692c:	3301      	adds	r3, #1
 800692e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	7d1b      	ldrb	r3, [r3, #20]
 8006934:	2b09      	cmp	r3, #9
 8006936:	d109      	bne.n	800694c <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006938:	4b6d      	ldr	r3, [pc, #436]	; (8006af0 <tcp_slowtmr+0x4f4>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2bf0      	cmp	r3, #240	; 0xf0
 8006944:	d902      	bls.n	800694c <tcp_slowtmr+0x350>
        ++pcb_remove;
 8006946:	7ffb      	ldrb	r3, [r7, #31]
 8006948:	3301      	adds	r3, #1
 800694a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800694c:	7ffb      	ldrb	r3, [r7, #31]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d05d      	beq.n	8006a0e <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006958:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800695a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800695c:	f000 fbb0 	bl	80070c0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d010      	beq.n	8006988 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006966:	4b65      	ldr	r3, [pc, #404]	; (8006afc <tcp_slowtmr+0x500>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696c:	429a      	cmp	r2, r3
 800696e:	d106      	bne.n	800697e <tcp_slowtmr+0x382>
 8006970:	4b63      	ldr	r3, [pc, #396]	; (8006b00 <tcp_slowtmr+0x504>)
 8006972:	f240 4289 	movw	r2, #1161	; 0x489
 8006976:	4963      	ldr	r1, [pc, #396]	; (8006b04 <tcp_slowtmr+0x508>)
 8006978:	4863      	ldr	r0, [pc, #396]	; (8006b08 <tcp_slowtmr+0x50c>)
 800697a:	f007 f845 	bl	800da08 <iprintf>
        prev->next = pcb->next;
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	60da      	str	r2, [r3, #12]
 8006986:	e00f      	b.n	80069a8 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006988:	4b5c      	ldr	r3, [pc, #368]	; (8006afc <tcp_slowtmr+0x500>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800698e:	429a      	cmp	r2, r3
 8006990:	d006      	beq.n	80069a0 <tcp_slowtmr+0x3a4>
 8006992:	4b5b      	ldr	r3, [pc, #364]	; (8006b00 <tcp_slowtmr+0x504>)
 8006994:	f240 428d 	movw	r2, #1165	; 0x48d
 8006998:	495c      	ldr	r1, [pc, #368]	; (8006b0c <tcp_slowtmr+0x510>)
 800699a:	485b      	ldr	r0, [pc, #364]	; (8006b08 <tcp_slowtmr+0x50c>)
 800699c:	f007 f834 	bl	800da08 <iprintf>
        tcp_active_pcbs = pcb->next;
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	4a55      	ldr	r2, [pc, #340]	; (8006afc <tcp_slowtmr+0x500>)
 80069a6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80069a8:	7fbb      	ldrb	r3, [r7, #30]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d010      	beq.n	80069d0 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80069b6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	1d1d      	adds	r5, r3, #4
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	8adb      	ldrh	r3, [r3, #22]
 80069c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c2:	8b12      	ldrh	r2, [r2, #24]
 80069c4:	9201      	str	r2, [sp, #4]
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	462b      	mov	r3, r5
 80069ca:	4622      	mov	r2, r4
 80069cc:	f003 fc94 	bl	800a2f8 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	7d1b      	ldrb	r3, [r3, #20]
 80069da:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	2001      	movs	r0, #1
 80069ea:	f7fe fa77 	bl	8004edc <memp_free>

      tcp_active_pcbs_changed = 0;
 80069ee:	4b48      	ldr	r3, [pc, #288]	; (8006b10 <tcp_slowtmr+0x514>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d004      	beq.n	8006a04 <tcp_slowtmr+0x408>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f06f 010c 	mvn.w	r1, #12
 8006a00:	68b8      	ldr	r0, [r7, #8]
 8006a02:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006a04:	4b42      	ldr	r3, [pc, #264]	; (8006b10 <tcp_slowtmr+0x514>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d035      	beq.n	8006a78 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8006a0c:	e606      	b.n	800661c <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	7edb      	ldrb	r3, [r3, #27]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	7eda      	ldrb	r2, [r3, #27]
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	7f1b      	ldrb	r3, [r3, #28]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d323      	bcc.n	8006a78 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	2200      	movs	r2, #0
 8006a34:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006a36:	4b36      	ldr	r3, [pc, #216]	; (8006b10 <tcp_slowtmr+0x514>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <tcp_slowtmr+0x460>
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4c:	6a3a      	ldr	r2, [r7, #32]
 8006a4e:	6912      	ldr	r2, [r2, #16]
 8006a50:	6a39      	ldr	r1, [r7, #32]
 8006a52:	4610      	mov	r0, r2
 8006a54:	4798      	blx	r3
 8006a56:	4603      	mov	r3, r0
 8006a58:	777b      	strb	r3, [r7, #29]
 8006a5a:	e001      	b.n	8006a60 <tcp_slowtmr+0x464>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8006a60:	4b2b      	ldr	r3, [pc, #172]	; (8006b10 <tcp_slowtmr+0x514>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d000      	beq.n	8006a6a <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8006a68:	e5d8      	b.n	800661c <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006a6a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d102      	bne.n	8006a78 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8006a72:	6a38      	ldr	r0, [r7, #32]
 8006a74:	f003 f9b2 	bl	8009ddc <tcp_output>
  while (pcb != NULL) {
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f47f add4 	bne.w	8006628 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006a80:	2300      	movs	r3, #0
 8006a82:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8006a84:	4b23      	ldr	r3, [pc, #140]	; (8006b14 <tcp_slowtmr+0x518>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8006a8a:	e068      	b.n	8006b5e <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8e:	7d1b      	ldrb	r3, [r3, #20]
 8006a90:	2b0a      	cmp	r3, #10
 8006a92:	d006      	beq.n	8006aa2 <tcp_slowtmr+0x4a6>
 8006a94:	4b1a      	ldr	r3, [pc, #104]	; (8006b00 <tcp_slowtmr+0x504>)
 8006a96:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8006a9a:	491f      	ldr	r1, [pc, #124]	; (8006b18 <tcp_slowtmr+0x51c>)
 8006a9c:	481a      	ldr	r0, [pc, #104]	; (8006b08 <tcp_slowtmr+0x50c>)
 8006a9e:	f006 ffb3 	bl	800da08 <iprintf>
    pcb_remove = 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006aa6:	4b12      	ldr	r3, [pc, #72]	; (8006af0 <tcp_slowtmr+0x4f4>)
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	2bf0      	cmp	r3, #240	; 0xf0
 8006ab2:	d902      	bls.n	8006aba <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8006ab4:	7ffb      	ldrb	r3, [r7, #31]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006aba:	7ffb      	ldrb	r3, [r7, #31]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d049      	beq.n	8006b54 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006ac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ac2:	f000 fafd 	bl	80070c0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d029      	beq.n	8006b20 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006acc:	4b11      	ldr	r3, [pc, #68]	; (8006b14 <tcp_slowtmr+0x518>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d106      	bne.n	8006ae4 <tcp_slowtmr+0x4e8>
 8006ad6:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <tcp_slowtmr+0x504>)
 8006ad8:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8006adc:	490f      	ldr	r1, [pc, #60]	; (8006b1c <tcp_slowtmr+0x520>)
 8006ade:	480a      	ldr	r0, [pc, #40]	; (8006b08 <tcp_slowtmr+0x50c>)
 8006ae0:	f006 ff92 	bl	800da08 <iprintf>
        prev->next = pcb->next;
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	68da      	ldr	r2, [r3, #12]
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	60da      	str	r2, [r3, #12]
 8006aec:	e028      	b.n	8006b40 <tcp_slowtmr+0x544>
 8006aee:	bf00      	nop
 8006af0:	20006918 	.word	0x20006918
 8006af4:	000124f8 	.word	0x000124f8
 8006af8:	10624dd3 	.word	0x10624dd3
 8006afc:	20006924 	.word	0x20006924
 8006b00:	0800f64c 	.word	0x0800f64c
 8006b04:	0800f884 	.word	0x0800f884
 8006b08:	0800f688 	.word	0x0800f688
 8006b0c:	0800f8b0 	.word	0x0800f8b0
 8006b10:	2000692c 	.word	0x2000692c
 8006b14:	20006928 	.word	0x20006928
 8006b18:	0800f8dc 	.word	0x0800f8dc
 8006b1c:	0800f90c 	.word	0x0800f90c
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006b20:	4b13      	ldr	r3, [pc, #76]	; (8006b70 <tcp_slowtmr+0x574>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d006      	beq.n	8006b38 <tcp_slowtmr+0x53c>
 8006b2a:	4b12      	ldr	r3, [pc, #72]	; (8006b74 <tcp_slowtmr+0x578>)
 8006b2c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8006b30:	4911      	ldr	r1, [pc, #68]	; (8006b78 <tcp_slowtmr+0x57c>)
 8006b32:	4812      	ldr	r0, [pc, #72]	; (8006b7c <tcp_slowtmr+0x580>)
 8006b34:	f006 ff68 	bl	800da08 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	4a0c      	ldr	r2, [pc, #48]	; (8006b70 <tcp_slowtmr+0x574>)
 8006b3e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8006b4a:	69b9      	ldr	r1, [r7, #24]
 8006b4c:	2001      	movs	r0, #1
 8006b4e:	f7fe f9c5 	bl	8004edc <memp_free>
 8006b52:	e004      	b.n	8006b5e <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d193      	bne.n	8006a8c <tcp_slowtmr+0x490>
    }
  }
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop
 8006b68:	3728      	adds	r7, #40	; 0x28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20006928 	.word	0x20006928
 8006b74:	0800f64c 	.word	0x0800f64c
 8006b78:	0800f934 	.word	0x0800f934
 8006b7c:	0800f688 	.word	0x0800f688

08006b80 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006b86:	4b2d      	ldr	r3, [pc, #180]	; (8006c3c <tcp_fasttmr+0xbc>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	4b2b      	ldr	r3, [pc, #172]	; (8006c3c <tcp_fasttmr+0xbc>)
 8006b90:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006b92:	4b2b      	ldr	r3, [pc, #172]	; (8006c40 <tcp_fasttmr+0xc0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006b98:	e048      	b.n	8006c2c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	7f5a      	ldrb	r2, [r3, #29]
 8006b9e:	4b27      	ldr	r3, [pc, #156]	; (8006c3c <tcp_fasttmr+0xbc>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d03f      	beq.n	8006c26 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006ba6:	4b25      	ldr	r3, [pc, #148]	; (8006c3c <tcp_fasttmr+0xbc>)
 8006ba8:	781a      	ldrb	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	7e9b      	ldrb	r3, [r3, #26]
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d010      	beq.n	8006bdc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	7e9b      	ldrb	r3, [r3, #26]
 8006bbe:	f043 0302 	orr.w	r3, r3, #2
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f003 f907 	bl	8009ddc <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	7e9b      	ldrb	r3, [r3, #26]
 8006bd2:	f023 0303 	bic.w	r3, r3, #3
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	7e9b      	ldrb	r3, [r3, #26]
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d009      	beq.n	8006bfc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	7e9b      	ldrb	r3, [r3, #26]
 8006bec:	f023 0308 	bic.w	r3, r3, #8
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7ff fb18 	bl	800622c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006c0a:	4b0e      	ldr	r3, [pc, #56]	; (8006c44 <tcp_fasttmr+0xc4>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f819 	bl	8006c48 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006c16:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <tcp_fasttmr+0xc4>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d000      	beq.n	8006c20 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006c1e:	e7b8      	b.n	8006b92 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	607b      	str	r3, [r7, #4]
 8006c24:	e002      	b.n	8006c2c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1b3      	bne.n	8006b9a <tcp_fasttmr+0x1a>
    }
  }
}
 8006c32:	bf00      	nop
 8006c34:	bf00      	nop
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	2000692e 	.word	0x2000692e
 8006c40:	20006924 	.word	0x20006924
 8006c44:	2000692c 	.word	0x2000692c

08006c48 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006c48:	b590      	push	{r4, r7, lr}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c54:	7b5b      	ldrb	r3, [r3, #13]
 8006c56:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c5c:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00b      	beq.n	8006c86 <tcp_process_refused_data+0x3e>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6918      	ldr	r0, [r3, #16]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	47a0      	blx	r4
 8006c80:	4603      	mov	r3, r0
 8006c82:	73fb      	strb	r3, [r7, #15]
 8006c84:	e007      	b.n	8006c96 <tcp_process_refused_data+0x4e>
 8006c86:	2300      	movs	r3, #0
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	f000 f88d 	bl	8006dac <tcp_recv_null>
 8006c92:	4603      	mov	r3, r0
 8006c94:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d12a      	bne.n	8006cf4 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8006c9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ca0:	f003 0320 	and.w	r3, r3, #32
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d033      	beq.n	8006d10 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cac:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006cb0:	d005      	beq.n	8006cbe <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00b      	beq.n	8006ce0 <tcp_process_refused_data+0x98>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6918      	ldr	r0, [r3, #16]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	47a0      	blx	r4
 8006cda:	4603      	mov	r3, r0
 8006cdc:	73fb      	strb	r3, [r7, #15]
 8006cde:	e001      	b.n	8006ce4 <tcp_process_refused_data+0x9c>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ce8:	f113 0f0d 	cmn.w	r3, #13
 8006cec:	d110      	bne.n	8006d10 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8006cee:	f06f 030c 	mvn.w	r3, #12
 8006cf2:	e00e      	b.n	8006d12 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8006cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cf8:	f113 0f0d 	cmn.w	r3, #13
 8006cfc:	d102      	bne.n	8006d04 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006cfe:	f06f 030c 	mvn.w	r3, #12
 8006d02:	e006      	b.n	8006d12 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8006d0a:	f06f 0304 	mvn.w	r3, #4
 8006d0e:	e000      	b.n	8006d12 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd90      	pop	{r4, r7, pc}

08006d1a <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006d22:	e007      	b.n	8006d34 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f80a 	bl	8006d44 <tcp_seg_free>
    seg = next;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1f4      	bne.n	8006d24 <tcp_segs_free+0xa>
  }
}
 8006d3a:	bf00      	nop
 8006d3c:	bf00      	nop
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00c      	beq.n	8006d6c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d004      	beq.n	8006d64 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe fdfa 	bl	8005958 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	2003      	movs	r0, #3
 8006d68:	f7fe f8b8 	bl	8004edc <memp_free>
  }
}
 8006d6c:	bf00      	nop
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006d7c:	2003      	movs	r0, #3
 8006d7e:	f7fe f85b 	bl	8004e38 <memp_malloc>
 8006d82:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <tcp_seg_copy+0x1a>
    return NULL;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	e00a      	b.n	8006da4 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006d8e:	2210      	movs	r2, #16
 8006d90:	6879      	ldr	r1, [r7, #4]
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f006 fe22 	bl	800d9dc <memcpy>
  pbuf_ref(cseg->p);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fe fe85 	bl	8005aac <pbuf_ref>
  return cseg;
 8006da2:	68fb      	ldr	r3, [r7, #12]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
 8006db8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d009      	beq.n	8006dd4 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	891b      	ldrh	r3, [r3, #8]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	68b8      	ldr	r0, [r7, #8]
 8006dc8:	f7ff fbbe 	bl	8006548 <tcp_recved>
    pbuf_free(p);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7fe fdc3 	bl	8005958 <pbuf_free>
 8006dd2:	e008      	b.n	8006de6 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8006dd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d104      	bne.n	8006de6 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8006ddc:	68b8      	ldr	r0, [r7, #8]
 8006dde:	f7ff fa8f 	bl	8006300 <tcp_close>
 8006de2:	4603      	mov	r3, r0
 8006de4:	e000      	b.n	8006de8 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	4603      	mov	r3, r0
 8006df8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	db01      	blt.n	8006e06 <tcp_kill_prio+0x16>
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	e000      	b.n	8006e08 <tcp_kill_prio+0x18>
 8006e06:	237f      	movs	r3, #127	; 0x7f
 8006e08:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e12:	4b16      	ldr	r3, [pc, #88]	; (8006e6c <tcp_kill_prio+0x7c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	617b      	str	r3, [r7, #20]
 8006e18:	e01a      	b.n	8006e50 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	7d5b      	ldrb	r3, [r3, #21]
 8006e1e:	7afa      	ldrb	r2, [r7, #11]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d312      	bcc.n	8006e4a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006e24:	4b12      	ldr	r3, [pc, #72]	; (8006e70 <tcp_kill_prio+0x80>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d80a      	bhi.n	8006e4a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8006e34:	4b0e      	ldr	r3, [pc, #56]	; (8006e70 <tcp_kill_prio+0x80>)
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	7d5b      	ldrb	r3, [r3, #21]
 8006e48:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e1      	bne.n	8006e1a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006e5c:	6938      	ldr	r0, [r7, #16]
 8006e5e:	f7ff fb19 	bl	8006494 <tcp_abort>
  }
}
 8006e62:	bf00      	nop
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20006924 	.word	0x20006924
 8006e70:	20006918 	.word	0x20006918

08006e74 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006e7e:	79fb      	ldrb	r3, [r7, #7]
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	d009      	beq.n	8006e98 <tcp_kill_state+0x24>
 8006e84:	79fb      	ldrb	r3, [r7, #7]
 8006e86:	2b09      	cmp	r3, #9
 8006e88:	d006      	beq.n	8006e98 <tcp_kill_state+0x24>
 8006e8a:	4b1a      	ldr	r3, [pc, #104]	; (8006ef4 <tcp_kill_state+0x80>)
 8006e8c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006e90:	4919      	ldr	r1, [pc, #100]	; (8006ef8 <tcp_kill_state+0x84>)
 8006e92:	481a      	ldr	r0, [pc, #104]	; (8006efc <tcp_kill_state+0x88>)
 8006e94:	f006 fdb8 	bl	800da08 <iprintf>

  inactivity = 0;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ea0:	4b17      	ldr	r3, [pc, #92]	; (8006f00 <tcp_kill_state+0x8c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	617b      	str	r3, [r7, #20]
 8006ea6:	e017      	b.n	8006ed8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	7d1b      	ldrb	r3, [r3, #20]
 8006eac:	79fa      	ldrb	r2, [r7, #7]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d10f      	bne.n	8006ed2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006eb2:	4b14      	ldr	r3, [pc, #80]	; (8006f04 <tcp_kill_state+0x90>)
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d807      	bhi.n	8006ed2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006ec2:	4b10      	ldr	r3, [pc, #64]	; (8006f04 <tcp_kill_state+0x90>)
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1e4      	bne.n	8006ea8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	6938      	ldr	r0, [r7, #16]
 8006ee8:	f7ff fa22 	bl	8006330 <tcp_abandon>
  }
}
 8006eec:	bf00      	nop
 8006eee:	3718      	adds	r7, #24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	0800f64c 	.word	0x0800f64c
 8006ef8:	0800f95c 	.word	0x0800f95c
 8006efc:	0800f688 	.word	0x0800f688
 8006f00:	20006924 	.word	0x20006924
 8006f04:	20006918 	.word	0x20006918

08006f08 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f16:	4b12      	ldr	r3, [pc, #72]	; (8006f60 <tcp_kill_timewait+0x58>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	e012      	b.n	8006f44 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006f1e:	4b11      	ldr	r3, [pc, #68]	; (8006f64 <tcp_kill_timewait+0x5c>)
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d807      	bhi.n	8006f3e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006f2e:	4b0d      	ldr	r3, [pc, #52]	; (8006f64 <tcp_kill_timewait+0x5c>)
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1e9      	bne.n	8006f1e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006f50:	68b8      	ldr	r0, [r7, #8]
 8006f52:	f7ff fa9f 	bl	8006494 <tcp_abort>
  }
}
 8006f56:	bf00      	nop
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	20006928 	.word	0x20006928
 8006f64:	20006918 	.word	0x20006918

08006f68 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006f72:	2001      	movs	r0, #1
 8006f74:	f7fd ff60 	bl	8004e38 <memp_malloc>
 8006f78:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d14c      	bne.n	800701a <tcp_alloc+0xb2>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006f80:	f7ff ffc2 	bl	8006f08 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006f84:	2001      	movs	r0, #1
 8006f86:	f7fd ff57 	bl	8004e38 <memp_malloc>
 8006f8a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d139      	bne.n	8007006 <tcp_alloc+0x9e>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006f92:	2009      	movs	r0, #9
 8006f94:	f7ff ff6e 	bl	8006e74 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006f98:	2001      	movs	r0, #1
 8006f9a:	f7fd ff4d 	bl	8004e38 <memp_malloc>
 8006f9e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d125      	bne.n	8006ff2 <tcp_alloc+0x8a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006fa6:	2008      	movs	r0, #8
 8006fa8:	f7ff ff64 	bl	8006e74 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006fac:	2001      	movs	r0, #1
 8006fae:	f7fd ff43 	bl	8004e38 <memp_malloc>
 8006fb2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d111      	bne.n	8006fde <tcp_alloc+0x76>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7ff ff17 	bl	8006df0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006fc2:	2001      	movs	r0, #1
 8006fc4:	f7fd ff38 	bl	8004e38 <memp_malloc>
 8006fc8:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d006      	beq.n	8006fde <tcp_alloc+0x76>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8006fd0:	4b36      	ldr	r3, [pc, #216]	; (80070ac <tcp_alloc+0x144>)
 8006fd2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006fd6:	881a      	ldrh	r2, [r3, #0]
 8006fd8:	3a01      	subs	r2, #1
 8006fda:	b292      	uxth	r2, r2
 8006fdc:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d006      	beq.n	8006ff2 <tcp_alloc+0x8a>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8006fe4:	4b31      	ldr	r3, [pc, #196]	; (80070ac <tcp_alloc+0x144>)
 8006fe6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006fea:	881a      	ldrh	r2, [r3, #0]
 8006fec:	3a01      	subs	r2, #1
 8006fee:	b292      	uxth	r2, r2
 8006ff0:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d006      	beq.n	8007006 <tcp_alloc+0x9e>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8006ff8:	4b2c      	ldr	r3, [pc, #176]	; (80070ac <tcp_alloc+0x144>)
 8006ffa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006ffe:	881a      	ldrh	r2, [r3, #0]
 8007000:	3a01      	subs	r2, #1
 8007002:	b292      	uxth	r2, r2
 8007004:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d006      	beq.n	800701a <tcp_alloc+0xb2>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800700c:	4b27      	ldr	r3, [pc, #156]	; (80070ac <tcp_alloc+0x144>)
 800700e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007012:	881a      	ldrh	r2, [r3, #0]
 8007014:	3a01      	subs	r2, #1
 8007016:	b292      	uxth	r2, r2
 8007018:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d03f      	beq.n	80070a0 <tcp_alloc+0x138>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007020:	2298      	movs	r2, #152	; 0x98
 8007022:	2100      	movs	r1, #0
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f006 fce7 	bl	800d9f8 <memset>
    pcb->prio = prio;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	79fa      	ldrb	r2, [r7, #7]
 800702e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007036:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007040:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	22ff      	movs	r2, #255	; 0xff
 800704e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007056:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2206      	movs	r2, #6
 800705c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2206      	movs	r2, #6
 8007064:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800706c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2201      	movs	r2, #1
 8007072:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007076:	4b0e      	ldr	r3, [pc, #56]	; (80070b0 <tcp_alloc+0x148>)
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800707e:	4b0d      	ldr	r3, [pc, #52]	; (80070b4 <tcp_alloc+0x14c>)
 8007080:	781a      	ldrb	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800708c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4a09      	ldr	r2, [pc, #36]	; (80070b8 <tcp_alloc+0x150>)
 8007094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4a08      	ldr	r2, [pc, #32]	; (80070bc <tcp_alloc+0x154>)
 800709c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80070a0:	68fb      	ldr	r3, [r7, #12]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20006840 	.word	0x20006840
 80070b0:	20006918 	.word	0x20006918
 80070b4:	2000692e 	.word	0x2000692e
 80070b8:	08006dad 	.word	0x08006dad
 80070bc:	006ddd00 	.word	0x006ddd00

080070c0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	7d1b      	ldrb	r3, [r3, #20]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d034      	beq.n	800713a <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80070d4:	2b0a      	cmp	r3, #10
 80070d6:	d030      	beq.n	800713a <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d02c      	beq.n	800713a <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d007      	beq.n	80070f8 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fe fc33 	bl	8005958 <pbuf_free>
      pcb->refused_data = NULL;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7ff fe0c 	bl	8006d1a <tcp_segs_free>
    pcb->ooseq = NULL;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800710e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007114:	4618      	mov	r0, r3
 8007116:	f7ff fe00 	bl	8006d1a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800711e:	4618      	mov	r0, r3
 8007120:	f7ff fdfb 	bl	8006d1a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	669a      	str	r2, [r3, #104]	; 0x68
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	429a      	cmp	r2, r3
 8007156:	d105      	bne.n	8007164 <tcp_pcb_remove+0x20>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	e013      	b.n	800718c <tcp_pcb_remove+0x48>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	60fb      	str	r3, [r7, #12]
 800716a:	e00c      	b.n	8007186 <tcp_pcb_remove+0x42>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	d104      	bne.n	8007180 <tcp_pcb_remove+0x3c>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	60da      	str	r2, [r3, #12]
 800717e:	e005      	b.n	800718c <tcp_pcb_remove+0x48>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	60fb      	str	r3, [r7, #12]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1ef      	bne.n	800716c <tcp_pcb_remove+0x28>
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2200      	movs	r2, #0
 8007190:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007192:	6838      	ldr	r0, [r7, #0]
 8007194:	f7ff ff94 	bl	80070c0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	7d1b      	ldrb	r3, [r3, #20]
 800719c:	2b0a      	cmp	r3, #10
 800719e:	d013      	beq.n	80071c8 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d00f      	beq.n	80071c8 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	7e9b      	ldrb	r3, [r3, #26]
 80071ac:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d009      	beq.n	80071c8 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	7e9b      	ldrb	r3, [r3, #26]
 80071b8:	f043 0302 	orr.w	r3, r3, #2
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80071c2:	6838      	ldr	r0, [r7, #0]
 80071c4:	f002 fe0a 	bl	8009ddc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	7d1b      	ldrb	r3, [r3, #20]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d020      	beq.n	8007212 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d006      	beq.n	80071e6 <tcp_pcb_remove+0xa2>
 80071d8:	4b13      	ldr	r3, [pc, #76]	; (8007228 <tcp_pcb_remove+0xe4>)
 80071da:	f240 7253 	movw	r2, #1875	; 0x753
 80071de:	4913      	ldr	r1, [pc, #76]	; (800722c <tcp_pcb_remove+0xe8>)
 80071e0:	4813      	ldr	r0, [pc, #76]	; (8007230 <tcp_pcb_remove+0xec>)
 80071e2:	f006 fc11 	bl	800da08 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d006      	beq.n	80071fc <tcp_pcb_remove+0xb8>
 80071ee:	4b0e      	ldr	r3, [pc, #56]	; (8007228 <tcp_pcb_remove+0xe4>)
 80071f0:	f240 7254 	movw	r2, #1876	; 0x754
 80071f4:	490f      	ldr	r1, [pc, #60]	; (8007234 <tcp_pcb_remove+0xf0>)
 80071f6:	480e      	ldr	r0, [pc, #56]	; (8007230 <tcp_pcb_remove+0xec>)
 80071f8:	f006 fc06 	bl	800da08 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007200:	2b00      	cmp	r3, #0
 8007202:	d006      	beq.n	8007212 <tcp_pcb_remove+0xce>
 8007204:	4b08      	ldr	r3, [pc, #32]	; (8007228 <tcp_pcb_remove+0xe4>)
 8007206:	f240 7256 	movw	r2, #1878	; 0x756
 800720a:	490b      	ldr	r1, [pc, #44]	; (8007238 <tcp_pcb_remove+0xf4>)
 800720c:	4808      	ldr	r0, [pc, #32]	; (8007230 <tcp_pcb_remove+0xec>)
 800720e:	f006 fbfb 	bl	800da08 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2200      	movs	r2, #0
 8007216:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2200      	movs	r2, #0
 800721c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800721e:	bf00      	nop
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	0800f64c 	.word	0x0800f64c
 800722c:	0800fa04 	.word	0x0800fa04
 8007230:	0800f688 	.word	0x0800f688
 8007234:	0800fa1c 	.word	0x0800fa1c
 8007238:	0800fa38 	.word	0x0800fa38

0800723c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007244:	4b06      	ldr	r3, [pc, #24]	; (8007260 <tcp_next_iss+0x24>)
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	4b06      	ldr	r3, [pc, #24]	; (8007264 <tcp_next_iss+0x28>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4413      	add	r3, r2
 800724e:	4a04      	ldr	r2, [pc, #16]	; (8007260 <tcp_next_iss+0x24>)
 8007250:	6013      	str	r3, [r2, #0]
  return iss;
 8007252:	4b03      	ldr	r3, [pc, #12]	; (8007260 <tcp_next_iss+0x24>)
 8007254:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007256:	4618      	mov	r0, r3
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	bc80      	pop	{r7}
 800725e:	4770      	bx	lr
 8007260:	20000010 	.word	0x20000010
 8007264:	20006918 	.word	0x20006918

08007268 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	4603      	mov	r3, r0
 8007270:	6039      	str	r1, [r7, #0]
 8007272:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8007274:	6838      	ldr	r0, [r7, #0]
 8007276:	f005 f949 	bl	800c50c <ip4_route>
 800727a:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8007282:	88fb      	ldrh	r3, [r7, #6]
 8007284:	e010      	b.n	80072a8 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800728a:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800728c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d008      	beq.n	80072a6 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8007294:	897b      	ldrh	r3, [r7, #10]
 8007296:	3b28      	subs	r3, #40	; 0x28
 8007298:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800729a:	893a      	ldrh	r2, [r7, #8]
 800729c:	88fb      	ldrh	r3, [r7, #6]
 800729e:	4293      	cmp	r3, r2
 80072a0:	bf28      	it	cs
 80072a2:	4613      	movcs	r3, r2
 80072a4:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 80072a6:	88fb      	ldrh	r3, [r7, #6]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80072be:	e011      	b.n	80072e4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d108      	bne.n	80072de <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f7ff f8de 	bl	8006494 <tcp_abort>
      pcb = next;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	e002      	b.n	80072e4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1ea      	bne.n	80072c0 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80072ea:	bf00      	nop
 80072ec:	bf00      	nop
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d02c      	beq.n	800735e <tcp_netif_ip_addr_changed+0x6a>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d028      	beq.n	800735e <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800730c:	4b16      	ldr	r3, [pc, #88]	; (8007368 <tcp_netif_ip_addr_changed+0x74>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7ff ffcc 	bl	80072b0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007318:	4b14      	ldr	r3, [pc, #80]	; (800736c <tcp_netif_ip_addr_changed+0x78>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7ff ffc6 	bl	80072b0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d019      	beq.n	800735e <tcp_netif_ip_addr_changed+0x6a>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d015      	beq.n	800735e <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8007332:	4b0f      	ldr	r3, [pc, #60]	; (8007370 <tcp_netif_ip_addr_changed+0x7c>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	60fb      	str	r3, [r7, #12]
 8007338:	e00e      	b.n	8007358 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	429a      	cmp	r2, r3
 800734a:	d103      	bne.n	8007354 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1ed      	bne.n	800733a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800735e:	bf00      	nop
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20006924 	.word	0x20006924
 800736c:	2000691c 	.word	0x2000691c
 8007370:	20006920 	.word	0x20006920

08007374 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007374:	b590      	push	{r4, r7, lr}
 8007376:	b08b      	sub	sp, #44	; 0x2c
 8007378:	af02      	add	r7, sp, #8
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 800737e:	4b96      	ldr	r3, [pc, #600]	; (80075d8 <tcp_input+0x264>)
 8007380:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8007384:	3301      	adds	r3, #1
 8007386:	b29a      	uxth	r2, r3
 8007388:	4b93      	ldr	r3, [pc, #588]	; (80075d8 <tcp_input+0x264>)
 800738a:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	4a92      	ldr	r2, [pc, #584]	; (80075dc <tcp_input+0x268>)
 8007394:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	895b      	ldrh	r3, [r3, #10]
 800739a:	2b13      	cmp	r3, #19
 800739c:	d808      	bhi.n	80073b0 <tcp_input+0x3c>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 800739e:	4b8e      	ldr	r3, [pc, #568]	; (80075d8 <tcp_input+0x264>)
 80073a0:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80073a4:	3301      	adds	r3, #1
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	4b8b      	ldr	r3, [pc, #556]	; (80075d8 <tcp_input+0x264>)
 80073aa:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 80073ae:	e3db      	b.n	8007b68 <tcp_input+0x7f4>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80073b0:	4b8b      	ldr	r3, [pc, #556]	; (80075e0 <tcp_input+0x26c>)
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	4a8a      	ldr	r2, [pc, #552]	; (80075e0 <tcp_input+0x26c>)
 80073b6:	6812      	ldr	r2, [r2, #0]
 80073b8:	4611      	mov	r1, r2
 80073ba:	4618      	mov	r0, r3
 80073bc:	f005 fb8c 	bl	800cad8 <ip4_addr_isbroadcast_u32>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d105      	bne.n	80073d2 <tcp_input+0x5e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80073c6:	4b86      	ldr	r3, [pc, #536]	; (80075e0 <tcp_input+0x26c>)
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80073ce:	2be0      	cmp	r3, #224	; 0xe0
 80073d0:	d108      	bne.n	80073e4 <tcp_input+0x70>
    TCP_STATS_INC(tcp.proterr);
 80073d2:	4b81      	ldr	r3, [pc, #516]	; (80075d8 <tcp_input+0x264>)
 80073d4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80073d8:	3301      	adds	r3, #1
 80073da:	b29a      	uxth	r2, r3
 80073dc:	4b7e      	ldr	r3, [pc, #504]	; (80075d8 <tcp_input+0x264>)
 80073de:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    goto dropped;
 80073e2:	e3c1      	b.n	8007b68 <tcp_input+0x7f4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80073e4:	4b7d      	ldr	r3, [pc, #500]	; (80075dc <tcp_input+0x268>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	899b      	ldrh	r3, [r3, #12]
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fd f8e2 	bl	80045b6 <lwip_htons>
 80073f2:	4603      	mov	r3, r0
 80073f4:	0b1b      	lsrs	r3, r3, #12
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80073fe:	7cbb      	ldrb	r3, [r7, #18]
 8007400:	2b13      	cmp	r3, #19
 8007402:	d905      	bls.n	8007410 <tcp_input+0x9c>
 8007404:	7cbb      	ldrb	r3, [r7, #18]
 8007406:	b29a      	uxth	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	891b      	ldrh	r3, [r3, #8]
 800740c:	429a      	cmp	r2, r3
 800740e:	d908      	bls.n	8007422 <tcp_input+0xae>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8007410:	4b71      	ldr	r3, [pc, #452]	; (80075d8 <tcp_input+0x264>)
 8007412:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8007416:	3301      	adds	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	4b6f      	ldr	r3, [pc, #444]	; (80075d8 <tcp_input+0x264>)
 800741c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 8007420:	e3a2      	b.n	8007b68 <tcp_input+0x7f4>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007422:	7cbb      	ldrb	r3, [r7, #18]
 8007424:	b29b      	uxth	r3, r3
 8007426:	3b14      	subs	r3, #20
 8007428:	b29a      	uxth	r2, r3
 800742a:	4b6e      	ldr	r3, [pc, #440]	; (80075e4 <tcp_input+0x270>)
 800742c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800742e:	4b6e      	ldr	r3, [pc, #440]	; (80075e8 <tcp_input+0x274>)
 8007430:	2200      	movs	r2, #0
 8007432:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	895a      	ldrh	r2, [r3, #10]
 8007438:	7cbb      	ldrb	r3, [r7, #18]
 800743a:	b29b      	uxth	r3, r3
 800743c:	429a      	cmp	r2, r3
 800743e:	d30d      	bcc.n	800745c <tcp_input+0xe8>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007440:	4b68      	ldr	r3, [pc, #416]	; (80075e4 <tcp_input+0x270>)
 8007442:	881a      	ldrh	r2, [r3, #0]
 8007444:	4b69      	ldr	r3, [pc, #420]	; (80075ec <tcp_input+0x278>)
 8007446:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8007448:	7cbb      	ldrb	r3, [r7, #18]
 800744a:	b29b      	uxth	r3, r3
 800744c:	425b      	negs	r3, r3
 800744e:	b29b      	uxth	r3, r3
 8007450:	b21b      	sxth	r3, r3
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7fe fa5b 	bl	8005910 <pbuf_header>
 800745a:	e05d      	b.n	8007518 <tcp_input+0x1a4>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d105      	bne.n	8007470 <tcp_input+0xfc>
 8007464:	4b62      	ldr	r3, [pc, #392]	; (80075f0 <tcp_input+0x27c>)
 8007466:	22b2      	movs	r2, #178	; 0xb2
 8007468:	4962      	ldr	r1, [pc, #392]	; (80075f4 <tcp_input+0x280>)
 800746a:	4863      	ldr	r0, [pc, #396]	; (80075f8 <tcp_input+0x284>)
 800746c:	f006 facc 	bl	800da08 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8007470:	f06f 0113 	mvn.w	r1, #19
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7fe fa4b 	bl	8005910 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	895a      	ldrh	r2, [r3, #10]
 800747e:	4b5b      	ldr	r3, [pc, #364]	; (80075ec <tcp_input+0x278>)
 8007480:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8007482:	4b58      	ldr	r3, [pc, #352]	; (80075e4 <tcp_input+0x270>)
 8007484:	881a      	ldrh	r2, [r3, #0]
 8007486:	4b59      	ldr	r3, [pc, #356]	; (80075ec <tcp_input+0x278>)
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800748e:	4b57      	ldr	r3, [pc, #348]	; (80075ec <tcp_input+0x278>)
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	425b      	negs	r3, r3
 8007494:	b29b      	uxth	r3, r3
 8007496:	b21b      	sxth	r3, r3
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7fe fa38 	bl	8005910 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	895b      	ldrh	r3, [r3, #10]
 80074a6:	8a3a      	ldrh	r2, [r7, #16]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d908      	bls.n	80074be <tcp_input+0x14a>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 80074ac:	4b4a      	ldr	r3, [pc, #296]	; (80075d8 <tcp_input+0x264>)
 80074ae:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80074b2:	3301      	adds	r3, #1
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	4b48      	ldr	r3, [pc, #288]	; (80075d8 <tcp_input+0x264>)
 80074b8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 80074bc:	e354      	b.n	8007b68 <tcp_input+0x7f4>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	4a48      	ldr	r2, [pc, #288]	; (80075e8 <tcp_input+0x274>)
 80074c6:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	8a3b      	ldrh	r3, [r7, #16]
 80074ce:	425b      	negs	r3, r3
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	b21b      	sxth	r3, r3
 80074d4:	4619      	mov	r1, r3
 80074d6:	4610      	mov	r0, r2
 80074d8:	f7fe fa1a 	bl	8005910 <pbuf_header>
    p->tot_len -= opt2len;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	891a      	ldrh	r2, [r3, #8]
 80074e0:	8a3b      	ldrh	r3, [r7, #16]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	895b      	ldrh	r3, [r3, #10]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d005      	beq.n	80074fe <tcp_input+0x18a>
 80074f2:	4b3f      	ldr	r3, [pc, #252]	; (80075f0 <tcp_input+0x27c>)
 80074f4:	22cf      	movs	r2, #207	; 0xcf
 80074f6:	4941      	ldr	r1, [pc, #260]	; (80075fc <tcp_input+0x288>)
 80074f8:	483f      	ldr	r0, [pc, #252]	; (80075f8 <tcp_input+0x284>)
 80074fa:	f006 fa85 	bl	800da08 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	891a      	ldrh	r2, [r3, #8]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	891b      	ldrh	r3, [r3, #8]
 8007508:	429a      	cmp	r2, r3
 800750a:	d005      	beq.n	8007518 <tcp_input+0x1a4>
 800750c:	4b38      	ldr	r3, [pc, #224]	; (80075f0 <tcp_input+0x27c>)
 800750e:	22d0      	movs	r2, #208	; 0xd0
 8007510:	493b      	ldr	r1, [pc, #236]	; (8007600 <tcp_input+0x28c>)
 8007512:	4839      	ldr	r0, [pc, #228]	; (80075f8 <tcp_input+0x284>)
 8007514:	f006 fa78 	bl	800da08 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007518:	4b30      	ldr	r3, [pc, #192]	; (80075dc <tcp_input+0x268>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	b29b      	uxth	r3, r3
 8007520:	4a2e      	ldr	r2, [pc, #184]	; (80075dc <tcp_input+0x268>)
 8007522:	6814      	ldr	r4, [r2, #0]
 8007524:	4618      	mov	r0, r3
 8007526:	f7fd f846 	bl	80045b6 <lwip_htons>
 800752a:	4603      	mov	r3, r0
 800752c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800752e:	4b2b      	ldr	r3, [pc, #172]	; (80075dc <tcp_input+0x268>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	885b      	ldrh	r3, [r3, #2]
 8007534:	b29b      	uxth	r3, r3
 8007536:	4a29      	ldr	r2, [pc, #164]	; (80075dc <tcp_input+0x268>)
 8007538:	6814      	ldr	r4, [r2, #0]
 800753a:	4618      	mov	r0, r3
 800753c:	f7fd f83b 	bl	80045b6 <lwip_htons>
 8007540:	4603      	mov	r3, r0
 8007542:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007544:	4b25      	ldr	r3, [pc, #148]	; (80075dc <tcp_input+0x268>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	4a24      	ldr	r2, [pc, #144]	; (80075dc <tcp_input+0x268>)
 800754c:	6814      	ldr	r4, [r2, #0]
 800754e:	4618      	mov	r0, r3
 8007550:	f7fd f83e 	bl	80045d0 <lwip_htonl>
 8007554:	4603      	mov	r3, r0
 8007556:	6063      	str	r3, [r4, #4]
 8007558:	6863      	ldr	r3, [r4, #4]
 800755a:	4a2a      	ldr	r2, [pc, #168]	; (8007604 <tcp_input+0x290>)
 800755c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800755e:	4b1f      	ldr	r3, [pc, #124]	; (80075dc <tcp_input+0x268>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	4a1d      	ldr	r2, [pc, #116]	; (80075dc <tcp_input+0x268>)
 8007566:	6814      	ldr	r4, [r2, #0]
 8007568:	4618      	mov	r0, r3
 800756a:	f7fd f831 	bl	80045d0 <lwip_htonl>
 800756e:	4603      	mov	r3, r0
 8007570:	60a3      	str	r3, [r4, #8]
 8007572:	68a3      	ldr	r3, [r4, #8]
 8007574:	4a24      	ldr	r2, [pc, #144]	; (8007608 <tcp_input+0x294>)
 8007576:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007578:	4b18      	ldr	r3, [pc, #96]	; (80075dc <tcp_input+0x268>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	89db      	ldrh	r3, [r3, #14]
 800757e:	b29b      	uxth	r3, r3
 8007580:	4a16      	ldr	r2, [pc, #88]	; (80075dc <tcp_input+0x268>)
 8007582:	6814      	ldr	r4, [r2, #0]
 8007584:	4618      	mov	r0, r3
 8007586:	f7fd f816 	bl	80045b6 <lwip_htons>
 800758a:	4603      	mov	r3, r0
 800758c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800758e:	4b13      	ldr	r3, [pc, #76]	; (80075dc <tcp_input+0x268>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	899b      	ldrh	r3, [r3, #12]
 8007594:	b29b      	uxth	r3, r3
 8007596:	4618      	mov	r0, r3
 8007598:	f7fd f80d 	bl	80045b6 <lwip_htons>
 800759c:	4603      	mov	r3, r0
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	4b19      	ldr	r3, [pc, #100]	; (800760c <tcp_input+0x298>)
 80075a8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	891a      	ldrh	r2, [r3, #8]
 80075ae:	4b17      	ldr	r3, [pc, #92]	; (800760c <tcp_input+0x298>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	f003 0303 	and.w	r3, r3, #3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	bf14      	ite	ne
 80075ba:	2301      	movne	r3, #1
 80075bc:	2300      	moveq	r3, #0
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	4413      	add	r3, r2
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	4b12      	ldr	r3, [pc, #72]	; (8007610 <tcp_input+0x29c>)
 80075c8:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80075ce:	4b11      	ldr	r3, [pc, #68]	; (8007614 <tcp_input+0x2a0>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	61fb      	str	r3, [r7, #28]
 80075d4:	e08d      	b.n	80076f2 <tcp_input+0x37e>
 80075d6:	bf00      	nop
 80075d8:	20006840 	.word	0x20006840
 80075dc:	20006940 	.word	0x20006940
 80075e0:	20003278 	.word	0x20003278
 80075e4:	20006944 	.word	0x20006944
 80075e8:	20006948 	.word	0x20006948
 80075ec:	20006946 	.word	0x20006946
 80075f0:	0800fa50 	.word	0x0800fa50
 80075f4:	0800fa84 	.word	0x0800fa84
 80075f8:	0800fa94 	.word	0x0800fa94
 80075fc:	0800fabc 	.word	0x0800fabc
 8007600:	0800fac8 	.word	0x0800fac8
 8007604:	20006950 	.word	0x20006950
 8007608:	20006954 	.word	0x20006954
 800760c:	2000695c 	.word	0x2000695c
 8007610:	2000695a 	.word	0x2000695a
 8007614:	20006924 	.word	0x20006924
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	7d1b      	ldrb	r3, [r3, #20]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d105      	bne.n	800762c <tcp_input+0x2b8>
 8007620:	4b77      	ldr	r3, [pc, #476]	; (8007800 <tcp_input+0x48c>)
 8007622:	22e2      	movs	r2, #226	; 0xe2
 8007624:	4977      	ldr	r1, [pc, #476]	; (8007804 <tcp_input+0x490>)
 8007626:	4878      	ldr	r0, [pc, #480]	; (8007808 <tcp_input+0x494>)
 8007628:	f006 f9ee 	bl	800da08 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	7d1b      	ldrb	r3, [r3, #20]
 8007630:	2b0a      	cmp	r3, #10
 8007632:	d105      	bne.n	8007640 <tcp_input+0x2cc>
 8007634:	4b72      	ldr	r3, [pc, #456]	; (8007800 <tcp_input+0x48c>)
 8007636:	22e3      	movs	r2, #227	; 0xe3
 8007638:	4974      	ldr	r1, [pc, #464]	; (800780c <tcp_input+0x498>)
 800763a:	4873      	ldr	r0, [pc, #460]	; (8007808 <tcp_input+0x494>)
 800763c:	f006 f9e4 	bl	800da08 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	7d1b      	ldrb	r3, [r3, #20]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d105      	bne.n	8007654 <tcp_input+0x2e0>
 8007648:	4b6d      	ldr	r3, [pc, #436]	; (8007800 <tcp_input+0x48c>)
 800764a:	22e4      	movs	r2, #228	; 0xe4
 800764c:	4970      	ldr	r1, [pc, #448]	; (8007810 <tcp_input+0x49c>)
 800764e:	486e      	ldr	r0, [pc, #440]	; (8007808 <tcp_input+0x494>)
 8007650:	f006 f9da 	bl	800da08 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	8b1a      	ldrh	r2, [r3, #24]
 8007658:	4b6e      	ldr	r3, [pc, #440]	; (8007814 <tcp_input+0x4a0>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	b29b      	uxth	r3, r3
 8007660:	429a      	cmp	r2, r3
 8007662:	d141      	bne.n	80076e8 <tcp_input+0x374>
        pcb->local_port == tcphdr->dest &&
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	8ada      	ldrh	r2, [r3, #22]
 8007668:	4b6a      	ldr	r3, [pc, #424]	; (8007814 <tcp_input+0x4a0>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	885b      	ldrh	r3, [r3, #2]
 800766e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007670:	429a      	cmp	r2, r3
 8007672:	d139      	bne.n	80076e8 <tcp_input+0x374>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	4b67      	ldr	r3, [pc, #412]	; (8007818 <tcp_input+0x4a4>)
 800767a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800767c:	429a      	cmp	r2, r3
 800767e:	d133      	bne.n	80076e8 <tcp_input+0x374>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	4b64      	ldr	r3, [pc, #400]	; (8007818 <tcp_input+0x4a4>)
 8007686:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007688:	429a      	cmp	r2, r3
 800768a:	d12d      	bne.n	80076e8 <tcp_input+0x374>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	429a      	cmp	r2, r3
 8007694:	d105      	bne.n	80076a2 <tcp_input+0x32e>
 8007696:	4b5a      	ldr	r3, [pc, #360]	; (8007800 <tcp_input+0x48c>)
 8007698:	22ec      	movs	r2, #236	; 0xec
 800769a:	4960      	ldr	r1, [pc, #384]	; (800781c <tcp_input+0x4a8>)
 800769c:	485a      	ldr	r0, [pc, #360]	; (8007808 <tcp_input+0x494>)
 800769e:	f006 f9b3 	bl	800da08 <iprintf>
      if (prev != NULL) {
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00b      	beq.n	80076c0 <tcp_input+0x34c>
        prev->next = pcb->next;
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	68da      	ldr	r2, [r3, #12]
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80076b0:	4b5b      	ldr	r3, [pc, #364]	; (8007820 <tcp_input+0x4ac>)
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80076b8:	4a59      	ldr	r2, [pc, #356]	; (8007820 <tcp_input+0x4ac>)
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	6013      	str	r3, [r2, #0]
 80076be:	e007      	b.n	80076d0 <tcp_input+0x35c>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 80076c0:	4b58      	ldr	r3, [pc, #352]	; (8007824 <tcp_input+0x4b0>)
 80076c2:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80076c6:	3301      	adds	r3, #1
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	4b56      	ldr	r3, [pc, #344]	; (8007824 <tcp_input+0x4b0>)
 80076cc:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d10f      	bne.n	80076fa <tcp_input+0x386>
 80076da:	4b49      	ldr	r3, [pc, #292]	; (8007800 <tcp_input+0x48c>)
 80076dc:	22f4      	movs	r2, #244	; 0xf4
 80076de:	4952      	ldr	r1, [pc, #328]	; (8007828 <tcp_input+0x4b4>)
 80076e0:	4849      	ldr	r0, [pc, #292]	; (8007808 <tcp_input+0x494>)
 80076e2:	f006 f991 	bl	800da08 <iprintf>
      break;
 80076e6:	e008      	b.n	80076fa <tcp_input+0x386>
    }
    prev = pcb;
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	61fb      	str	r3, [r7, #28]
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d18f      	bne.n	8007618 <tcp_input+0x2a4>
 80076f8:	e000      	b.n	80076fc <tcp_input+0x388>
      break;
 80076fa:	bf00      	nop
  }

  if (pcb == NULL) {
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f040 809a 	bne.w	8007838 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007704:	4b49      	ldr	r3, [pc, #292]	; (800782c <tcp_input+0x4b8>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	61fb      	str	r3, [r7, #28]
 800770a:	e02f      	b.n	800776c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	7d1b      	ldrb	r3, [r3, #20]
 8007710:	2b0a      	cmp	r3, #10
 8007712:	d005      	beq.n	8007720 <tcp_input+0x3ac>
 8007714:	4b3a      	ldr	r3, [pc, #232]	; (8007800 <tcp_input+0x48c>)
 8007716:	22fe      	movs	r2, #254	; 0xfe
 8007718:	4945      	ldr	r1, [pc, #276]	; (8007830 <tcp_input+0x4bc>)
 800771a:	483b      	ldr	r0, [pc, #236]	; (8007808 <tcp_input+0x494>)
 800771c:	f006 f974 	bl	800da08 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	8b1a      	ldrh	r2, [r3, #24]
 8007724:	4b3b      	ldr	r3, [pc, #236]	; (8007814 <tcp_input+0x4a0>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	b29b      	uxth	r3, r3
 800772c:	429a      	cmp	r2, r3
 800772e:	d11a      	bne.n	8007766 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	8ada      	ldrh	r2, [r3, #22]
 8007734:	4b37      	ldr	r3, [pc, #220]	; (8007814 <tcp_input+0x4a0>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	885b      	ldrh	r3, [r3, #2]
 800773a:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800773c:	429a      	cmp	r2, r3
 800773e:	d112      	bne.n	8007766 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	4b34      	ldr	r3, [pc, #208]	; (8007818 <tcp_input+0x4a4>)
 8007746:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007748:	429a      	cmp	r2, r3
 800774a:	d10c      	bne.n	8007766 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	4b31      	ldr	r3, [pc, #196]	; (8007818 <tcp_input+0x4a4>)
 8007752:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007754:	429a      	cmp	r2, r3
 8007756:	d106      	bne.n	8007766 <tcp_input+0x3f2>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8007758:	69f8      	ldr	r0, [r7, #28]
 800775a:	f000 fb45 	bl	8007de8 <tcp_timewait_input>
        pbuf_free(p);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7fe f8fa 	bl	8005958 <pbuf_free>
        return;
 8007764:	e20d      	b.n	8007b82 <tcp_input+0x80e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	61fb      	str	r3, [r7, #28]
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1cc      	bne.n	800770c <tcp_input+0x398>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007772:	2300      	movs	r3, #0
 8007774:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007776:	4b2f      	ldr	r3, [pc, #188]	; (8007834 <tcp_input+0x4c0>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	617b      	str	r3, [r7, #20]
 800777c:	e019      	b.n	80077b2 <tcp_input+0x43e>
      if (lpcb->local_port == tcphdr->dest) {
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	8ada      	ldrh	r2, [r3, #22]
 8007782:	4b24      	ldr	r3, [pc, #144]	; (8007814 <tcp_input+0x4a0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	885b      	ldrh	r3, [r3, #2]
 8007788:	b29b      	uxth	r3, r3
 800778a:	429a      	cmp	r2, r3
 800778c:	d10c      	bne.n	80077a8 <tcp_input+0x434>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	4b21      	ldr	r3, [pc, #132]	; (8007818 <tcp_input+0x4a4>)
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	429a      	cmp	r2, r3
 8007798:	d00f      	beq.n	80077ba <tcp_input+0x446>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00d      	beq.n	80077bc <tcp_input+0x448>
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d009      	beq.n	80077bc <tcp_input+0x448>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	617b      	str	r3, [r7, #20]
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e2      	bne.n	800777e <tcp_input+0x40a>
 80077b8:	e000      	b.n	80077bc <tcp_input+0x448>
            break;
 80077ba:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d03a      	beq.n	8007838 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00b      	beq.n	80077e0 <tcp_input+0x46c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	68da      	ldr	r2, [r3, #12]
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80077d0:	4b18      	ldr	r3, [pc, #96]	; (8007834 <tcp_input+0x4c0>)
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80077d8:	4a16      	ldr	r2, [pc, #88]	; (8007834 <tcp_input+0x4c0>)
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	6013      	str	r3, [r2, #0]
 80077de:	e007      	b.n	80077f0 <tcp_input+0x47c>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 80077e0:	4b10      	ldr	r3, [pc, #64]	; (8007824 <tcp_input+0x4b0>)
 80077e2:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80077e6:	3301      	adds	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	4b0e      	ldr	r3, [pc, #56]	; (8007824 <tcp_input+0x4b0>)
 80077ec:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 80077f0:	6978      	ldr	r0, [r7, #20]
 80077f2:	f000 fa0f 	bl	8007c14 <tcp_listen_input>
      pbuf_free(p);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7fe f8ae 	bl	8005958 <pbuf_free>
      return;
 80077fc:	e1c1      	b.n	8007b82 <tcp_input+0x80e>
 80077fe:	bf00      	nop
 8007800:	0800fa50 	.word	0x0800fa50
 8007804:	0800fae8 	.word	0x0800fae8
 8007808:	0800fa94 	.word	0x0800fa94
 800780c:	0800fb10 	.word	0x0800fb10
 8007810:	0800fb3c 	.word	0x0800fb3c
 8007814:	20006940 	.word	0x20006940
 8007818:	20003278 	.word	0x20003278
 800781c:	0800fb64 	.word	0x0800fb64
 8007820:	20006924 	.word	0x20006924
 8007824:	20006840 	.word	0x20006840
 8007828:	0800fb90 	.word	0x0800fb90
 800782c:	20006928 	.word	0x20006928
 8007830:	0800fbbc 	.word	0x0800fbbc
 8007834:	20006920 	.word	0x20006920
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 815e 	beq.w	8007afc <tcp_input+0x788>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007840:	4b97      	ldr	r3, [pc, #604]	; (8007aa0 <tcp_input+0x72c>)
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	891a      	ldrh	r2, [r3, #8]
 800784a:	4b95      	ldr	r3, [pc, #596]	; (8007aa0 <tcp_input+0x72c>)
 800784c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800784e:	4a94      	ldr	r2, [pc, #592]	; (8007aa0 <tcp_input+0x72c>)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007854:	4b93      	ldr	r3, [pc, #588]	; (8007aa4 <tcp_input+0x730>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a91      	ldr	r2, [pc, #580]	; (8007aa0 <tcp_input+0x72c>)
 800785a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800785c:	4b92      	ldr	r3, [pc, #584]	; (8007aa8 <tcp_input+0x734>)
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007862:	4b92      	ldr	r3, [pc, #584]	; (8007aac <tcp_input+0x738>)
 8007864:	2200      	movs	r2, #0
 8007866:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007868:	4b91      	ldr	r3, [pc, #580]	; (8007ab0 <tcp_input+0x73c>)
 800786a:	2200      	movs	r2, #0
 800786c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800786e:	4b91      	ldr	r3, [pc, #580]	; (8007ab4 <tcp_input+0x740>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	f003 0308 	and.w	r3, r3, #8
 8007876:	2b00      	cmp	r3, #0
 8007878:	d006      	beq.n	8007888 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	7b5b      	ldrb	r3, [r3, #13]
 800787e:	f043 0301 	orr.w	r3, r3, #1
 8007882:	b2da      	uxtb	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800788c:	2b00      	cmp	r3, #0
 800788e:	d01e      	beq.n	80078ce <tcp_input+0x55a>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007890:	69f8      	ldr	r0, [r7, #28]
 8007892:	f7ff f9d9 	bl	8006c48 <tcp_process_refused_data>
 8007896:	4603      	mov	r3, r0
 8007898:	f113 0f0d 	cmn.w	r3, #13
 800789c:	d007      	beq.n	80078ae <tcp_input+0x53a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d013      	beq.n	80078ce <tcp_input+0x55a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80078a6:	4b84      	ldr	r3, [pc, #528]	; (8007ab8 <tcp_input+0x744>)
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00f      	beq.n	80078ce <tcp_input+0x55a>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d102      	bne.n	80078bc <tcp_input+0x548>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80078b6:	69f8      	ldr	r0, [r7, #28]
 80078b8:	f002 fa34 	bl	8009d24 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 80078bc:	4b7f      	ldr	r3, [pc, #508]	; (8007abc <tcp_input+0x748>)
 80078be:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 80078c2:	3301      	adds	r3, #1
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	4b7d      	ldr	r3, [pc, #500]	; (8007abc <tcp_input+0x748>)
 80078c8:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80078cc:	e103      	b.n	8007ad6 <tcp_input+0x762>
      }
    }
    tcp_input_pcb = pcb;
 80078ce:	4a7c      	ldr	r2, [pc, #496]	; (8007ac0 <tcp_input+0x74c>)
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80078d4:	69f8      	ldr	r0, [r7, #28]
 80078d6:	f000 faef 	bl	8007eb8 <tcp_process>
 80078da:	4603      	mov	r3, r0
 80078dc:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80078de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80078e2:	f113 0f0d 	cmn.w	r3, #13
 80078e6:	f000 80d0 	beq.w	8007a8a <tcp_input+0x716>
      if (recv_flags & TF_RESET) {
 80078ea:	4b70      	ldr	r3, [pc, #448]	; (8007aac <tcp_input+0x738>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	f003 0308 	and.w	r3, r3, #8
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d016      	beq.n	8007924 <tcp_input+0x5b0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d008      	beq.n	8007912 <tcp_input+0x59e>
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007906:	69fa      	ldr	r2, [r7, #28]
 8007908:	6912      	ldr	r2, [r2, #16]
 800790a:	f06f 010d 	mvn.w	r1, #13
 800790e:	4610      	mov	r0, r2
 8007910:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007912:	69f9      	ldr	r1, [r7, #28]
 8007914:	486b      	ldr	r0, [pc, #428]	; (8007ac4 <tcp_input+0x750>)
 8007916:	f7ff fc15 	bl	8007144 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800791a:	69f9      	ldr	r1, [r7, #28]
 800791c:	2001      	movs	r0, #1
 800791e:	f7fd fadd 	bl	8004edc <memp_free>
 8007922:	e0d8      	b.n	8007ad6 <tcp_input+0x762>
      } else {
        err = ERR_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007928:	4b61      	ldr	r3, [pc, #388]	; (8007ab0 <tcp_input+0x73c>)
 800792a:	881b      	ldrh	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d01b      	beq.n	8007968 <tcp_input+0x5f4>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007930:	4b5f      	ldr	r3, [pc, #380]	; (8007ab0 <tcp_input+0x73c>)
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800793a:	2b00      	cmp	r3, #0
 800793c:	d009      	beq.n	8007952 <tcp_input+0x5de>
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	6910      	ldr	r0, [r2, #16]
 8007946:	89fa      	ldrh	r2, [r7, #14]
 8007948:	69f9      	ldr	r1, [r7, #28]
 800794a:	4798      	blx	r3
 800794c:	4603      	mov	r3, r0
 800794e:	74fb      	strb	r3, [r7, #19]
 8007950:	e001      	b.n	8007956 <tcp_input+0x5e2>
 8007952:	2300      	movs	r3, #0
 8007954:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007956:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800795a:	f113 0f0d 	cmn.w	r3, #13
 800795e:	f000 8096 	beq.w	8007a8e <tcp_input+0x71a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007962:	4b53      	ldr	r3, [pc, #332]	; (8007ab0 <tcp_input+0x73c>)
 8007964:	2200      	movs	r2, #0
 8007966:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007968:	69f8      	ldr	r0, [r7, #28]
 800796a:	f000 f921 	bl	8007bb0 <tcp_input_delayed_close>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	f040 808e 	bne.w	8007a92 <tcp_input+0x71e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007976:	4b4c      	ldr	r3, [pc, #304]	; (8007aa8 <tcp_input+0x734>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d041      	beq.n	8007a02 <tcp_input+0x68e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007982:	2b00      	cmp	r3, #0
 8007984:	d006      	beq.n	8007994 <tcp_input+0x620>
 8007986:	4b50      	ldr	r3, [pc, #320]	; (8007ac8 <tcp_input+0x754>)
 8007988:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800798c:	494f      	ldr	r1, [pc, #316]	; (8007acc <tcp_input+0x758>)
 800798e:	4850      	ldr	r0, [pc, #320]	; (8007ad0 <tcp_input+0x75c>)
 8007990:	f006 f83a 	bl	800da08 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	7e9b      	ldrb	r3, [r3, #26]
 8007998:	f003 0310 	and.w	r3, r3, #16
 800799c:	2b00      	cmp	r3, #0
 800799e:	d008      	beq.n	80079b2 <tcp_input+0x63e>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80079a0:	4b41      	ldr	r3, [pc, #260]	; (8007aa8 <tcp_input+0x734>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fd ffd7 	bl	8005958 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80079aa:	69f8      	ldr	r0, [r7, #28]
 80079ac:	f7fe fd72 	bl	8006494 <tcp_abort>
            goto aborted;
 80079b0:	e091      	b.n	8007ad6 <tcp_input+0x762>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00c      	beq.n	80079d6 <tcp_input+0x662>
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	6918      	ldr	r0, [r3, #16]
 80079c6:	4b38      	ldr	r3, [pc, #224]	; (8007aa8 <tcp_input+0x734>)
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	2300      	movs	r3, #0
 80079cc:	69f9      	ldr	r1, [r7, #28]
 80079ce:	47a0      	blx	r4
 80079d0:	4603      	mov	r3, r0
 80079d2:	74fb      	strb	r3, [r7, #19]
 80079d4:	e008      	b.n	80079e8 <tcp_input+0x674>
 80079d6:	4b34      	ldr	r3, [pc, #208]	; (8007aa8 <tcp_input+0x734>)
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	2300      	movs	r3, #0
 80079dc:	69f9      	ldr	r1, [r7, #28]
 80079de:	2000      	movs	r0, #0
 80079e0:	f7ff f9e4 	bl	8006dac <tcp_recv_null>
 80079e4:	4603      	mov	r3, r0
 80079e6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80079e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80079ec:	f113 0f0d 	cmn.w	r3, #13
 80079f0:	d051      	beq.n	8007a96 <tcp_input+0x722>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80079f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <tcp_input+0x68e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80079fa:	4b2b      	ldr	r3, [pc, #172]	; (8007aa8 <tcp_input+0x734>)
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007a02:	4b2a      	ldr	r3, [pc, #168]	; (8007aac <tcp_input+0x738>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d030      	beq.n	8007a70 <tcp_input+0x6fc>
          if (pcb->refused_data != NULL) {
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d009      	beq.n	8007a2a <tcp_input+0x6b6>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a1a:	7b5a      	ldrb	r2, [r3, #13]
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a20:	f042 0220 	orr.w	r2, r2, #32
 8007a24:	b2d2      	uxtb	r2, r2
 8007a26:	735a      	strb	r2, [r3, #13]
 8007a28:	e022      	b.n	8007a70 <tcp_input+0x6fc>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a2e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007a32:	d005      	beq.n	8007a40 <tcp_input+0x6cc>
              pcb->rcv_wnd++;
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a38:	3301      	adds	r3, #1
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00b      	beq.n	8007a62 <tcp_input+0x6ee>
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	6918      	ldr	r0, [r3, #16]
 8007a54:	2300      	movs	r3, #0
 8007a56:	2200      	movs	r2, #0
 8007a58:	69f9      	ldr	r1, [r7, #28]
 8007a5a:	47a0      	blx	r4
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	74fb      	strb	r3, [r7, #19]
 8007a60:	e001      	b.n	8007a66 <tcp_input+0x6f2>
 8007a62:	2300      	movs	r3, #0
 8007a64:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007a66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007a6a:	f113 0f0d 	cmn.w	r3, #13
 8007a6e:	d014      	beq.n	8007a9a <tcp_input+0x726>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007a70:	4b13      	ldr	r3, [pc, #76]	; (8007ac0 <tcp_input+0x74c>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007a76:	69f8      	ldr	r0, [r7, #28]
 8007a78:	f000 f89a 	bl	8007bb0 <tcp_input_delayed_close>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d128      	bne.n	8007ad4 <tcp_input+0x760>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007a82:	69f8      	ldr	r0, [r7, #28]
 8007a84:	f002 f9aa 	bl	8009ddc <tcp_output>
 8007a88:	e025      	b.n	8007ad6 <tcp_input+0x762>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007a8a:	bf00      	nop
 8007a8c:	e023      	b.n	8007ad6 <tcp_input+0x762>
              goto aborted;
 8007a8e:	bf00      	nop
 8007a90:	e021      	b.n	8007ad6 <tcp_input+0x762>
          goto aborted;
 8007a92:	bf00      	nop
 8007a94:	e01f      	b.n	8007ad6 <tcp_input+0x762>
            goto aborted;
 8007a96:	bf00      	nop
 8007a98:	e01d      	b.n	8007ad6 <tcp_input+0x762>
              goto aborted;
 8007a9a:	bf00      	nop
 8007a9c:	e01b      	b.n	8007ad6 <tcp_input+0x762>
 8007a9e:	bf00      	nop
 8007aa0:	20006930 	.word	0x20006930
 8007aa4:	20006940 	.word	0x20006940
 8007aa8:	20006960 	.word	0x20006960
 8007aac:	2000695d 	.word	0x2000695d
 8007ab0:	20006958 	.word	0x20006958
 8007ab4:	2000695c 	.word	0x2000695c
 8007ab8:	2000695a 	.word	0x2000695a
 8007abc:	20006840 	.word	0x20006840
 8007ac0:	20006964 	.word	0x20006964
 8007ac4:	20006924 	.word	0x20006924
 8007ac8:	0800fa50 	.word	0x0800fa50
 8007acc:	0800fbec 	.word	0x0800fbec
 8007ad0:	0800fa94 	.word	0x0800fa94
          goto aborted;
 8007ad4:	bf00      	nop
    tcp_input_pcb = NULL;
 8007ad6:	4b2c      	ldr	r3, [pc, #176]	; (8007b88 <tcp_input+0x814>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007adc:	4b2b      	ldr	r3, [pc, #172]	; (8007b8c <tcp_input+0x818>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8007ae2:	4b2b      	ldr	r3, [pc, #172]	; (8007b90 <tcp_input+0x81c>)
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d04a      	beq.n	8007b80 <tcp_input+0x80c>
    {
      pbuf_free(inseg.p);
 8007aea:	4b29      	ldr	r3, [pc, #164]	; (8007b90 <tcp_input+0x81c>)
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fd ff32 	bl	8005958 <pbuf_free>
      inseg.p = NULL;
 8007af4:	4b26      	ldr	r3, [pc, #152]	; (8007b90 <tcp_input+0x81c>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007afa:	e041      	b.n	8007b80 <tcp_input+0x80c>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007afc:	4b25      	ldr	r3, [pc, #148]	; (8007b94 <tcp_input+0x820>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	899b      	ldrh	r3, [r3, #12]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fc fd56 	bl	80045b6 <lwip_htons>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d125      	bne.n	8007b60 <tcp_input+0x7ec>
      TCP_STATS_INC(tcp.proterr);
 8007b14:	4b20      	ldr	r3, [pc, #128]	; (8007b98 <tcp_input+0x824>)
 8007b16:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	4b1e      	ldr	r3, [pc, #120]	; (8007b98 <tcp_input+0x824>)
 8007b20:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 8007b24:	4b1c      	ldr	r3, [pc, #112]	; (8007b98 <tcp_input+0x824>)
 8007b26:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	4b1a      	ldr	r3, [pc, #104]	; (8007b98 <tcp_input+0x824>)
 8007b30:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b34:	4b19      	ldr	r3, [pc, #100]	; (8007b9c <tcp_input+0x828>)
 8007b36:	6818      	ldr	r0, [r3, #0]
 8007b38:	4b19      	ldr	r3, [pc, #100]	; (8007ba0 <tcp_input+0x82c>)
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	4b19      	ldr	r3, [pc, #100]	; (8007ba4 <tcp_input+0x830>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007b44:	4b13      	ldr	r3, [pc, #76]	; (8007b94 <tcp_input+0x820>)
 8007b46:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b48:	885b      	ldrh	r3, [r3, #2]
 8007b4a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007b4c:	4a11      	ldr	r2, [pc, #68]	; (8007b94 <tcp_input+0x820>)
 8007b4e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b50:	8812      	ldrh	r2, [r2, #0]
 8007b52:	b292      	uxth	r2, r2
 8007b54:	9201      	str	r2, [sp, #4]
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	4b13      	ldr	r3, [pc, #76]	; (8007ba8 <tcp_input+0x834>)
 8007b5a:	4a14      	ldr	r2, [pc, #80]	; (8007bac <tcp_input+0x838>)
 8007b5c:	f002 fbcc 	bl	800a2f8 <tcp_rst>
    pbuf_free(p);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7fd fef9 	bl	8005958 <pbuf_free>
  return;
 8007b66:	e00b      	b.n	8007b80 <tcp_input+0x80c>
dropped:
  TCP_STATS_INC(tcp.drop);
 8007b68:	4b0b      	ldr	r3, [pc, #44]	; (8007b98 <tcp_input+0x824>)
 8007b6a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8007b6e:	3301      	adds	r3, #1
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <tcp_input+0x824>)
 8007b74:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7fd feed 	bl	8005958 <pbuf_free>
 8007b7e:	e000      	b.n	8007b82 <tcp_input+0x80e>
  return;
 8007b80:	bf00      	nop
}
 8007b82:	3724      	adds	r7, #36	; 0x24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd90      	pop	{r4, r7, pc}
 8007b88:	20006964 	.word	0x20006964
 8007b8c:	20006960 	.word	0x20006960
 8007b90:	20006930 	.word	0x20006930
 8007b94:	20006940 	.word	0x20006940
 8007b98:	20006840 	.word	0x20006840
 8007b9c:	20006954 	.word	0x20006954
 8007ba0:	2000695a 	.word	0x2000695a
 8007ba4:	20006950 	.word	0x20006950
 8007ba8:	20003288 	.word	0x20003288
 8007bac:	2000328c 	.word	0x2000328c

08007bb0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8007bb8:	4b14      	ldr	r3, [pc, #80]	; (8007c0c <tcp_input_delayed_close+0x5c>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	f003 0310 	and.w	r3, r3, #16
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d01d      	beq.n	8007c00 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	7e9b      	ldrb	r3, [r3, #26]
 8007bc8:	f003 0310 	and.w	r3, r3, #16
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10d      	bne.n	8007bec <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d008      	beq.n	8007bec <tcp_input_delayed_close+0x3c>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	6912      	ldr	r2, [r2, #16]
 8007be4:	f06f 010e 	mvn.w	r1, #14
 8007be8:	4610      	mov	r0, r2
 8007bea:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	4808      	ldr	r0, [pc, #32]	; (8007c10 <tcp_input_delayed_close+0x60>)
 8007bf0:	f7ff faa8 	bl	8007144 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007bf4:	6879      	ldr	r1, [r7, #4]
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	f7fd f970 	bl	8004edc <memp_free>
    return 1;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e000      	b.n	8007c02 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	2000695d 	.word	0x2000695d
 8007c10:	20006924 	.word	0x20006924

08007c14 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b088      	sub	sp, #32
 8007c18:	af02      	add	r7, sp, #8
 8007c1a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007c1c:	4b67      	ldr	r3, [pc, #412]	; (8007dbc <tcp_listen_input+0x1a8>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f040 80c3 	bne.w	8007db0 <tcp_listen_input+0x19c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007c2a:	4b64      	ldr	r3, [pc, #400]	; (8007dbc <tcp_listen_input+0x1a8>)
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	f003 0310 	and.w	r3, r3, #16
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d016      	beq.n	8007c64 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c36:	4b62      	ldr	r3, [pc, #392]	; (8007dc0 <tcp_listen_input+0x1ac>)
 8007c38:	6818      	ldr	r0, [r3, #0]
 8007c3a:	4b62      	ldr	r3, [pc, #392]	; (8007dc4 <tcp_listen_input+0x1b0>)
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	4b61      	ldr	r3, [pc, #388]	; (8007dc8 <tcp_listen_input+0x1b4>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c46:	4b61      	ldr	r3, [pc, #388]	; (8007dcc <tcp_listen_input+0x1b8>)
 8007c48:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c4a:	885b      	ldrh	r3, [r3, #2]
 8007c4c:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c4e:	4a5f      	ldr	r2, [pc, #380]	; (8007dcc <tcp_listen_input+0x1b8>)
 8007c50:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c52:	8812      	ldrh	r2, [r2, #0]
 8007c54:	b292      	uxth	r2, r2
 8007c56:	9201      	str	r2, [sp, #4]
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	4b5d      	ldr	r3, [pc, #372]	; (8007dd0 <tcp_listen_input+0x1bc>)
 8007c5c:	4a5d      	ldr	r2, [pc, #372]	; (8007dd4 <tcp_listen_input+0x1c0>)
 8007c5e:	f002 fb4b 	bl	800a2f8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007c62:	e0a7      	b.n	8007db4 <tcp_listen_input+0x1a0>
  } else if (flags & TCP_SYN) {
 8007c64:	4b55      	ldr	r3, [pc, #340]	; (8007dbc <tcp_listen_input+0x1a8>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 80a1 	beq.w	8007db4 <tcp_listen_input+0x1a0>
    npcb = tcp_alloc(pcb->prio);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	7d5b      	ldrb	r3, [r3, #21]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7ff f976 	bl	8006f68 <tcp_alloc>
 8007c7c:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d119      	bne.n	8007cb8 <tcp_listen_input+0xa4>
      TCP_STATS_INC(tcp.memerr);
 8007c84:	4b54      	ldr	r3, [pc, #336]	; (8007dd8 <tcp_listen_input+0x1c4>)
 8007c86:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	4b52      	ldr	r3, [pc, #328]	; (8007dd8 <tcp_listen_input+0x1c4>)
 8007c90:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <tcp_listen_input+0x9e>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	6910      	ldr	r0, [r2, #16]
 8007ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4798      	blx	r3
 8007cac:	4603      	mov	r3, r0
 8007cae:	73bb      	strb	r3, [r7, #14]
      return;
 8007cb0:	e081      	b.n	8007db6 <tcp_listen_input+0x1a2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007cb2:	23f0      	movs	r3, #240	; 0xf0
 8007cb4:	73bb      	strb	r3, [r7, #14]
      return;
 8007cb6:	e07e      	b.n	8007db6 <tcp_listen_input+0x1a2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007cb8:	4b48      	ldr	r3, [pc, #288]	; (8007ddc <tcp_listen_input+0x1c8>)
 8007cba:	695a      	ldr	r2, [r3, #20]
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007cc0:	4b46      	ldr	r3, [pc, #280]	; (8007ddc <tcp_listen_input+0x1c8>)
 8007cc2:	691a      	ldr	r2, [r3, #16]
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	8ada      	ldrh	r2, [r3, #22]
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007cd0:	4b3e      	ldr	r3, [pc, #248]	; (8007dcc <tcp_listen_input+0x1b8>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	2203      	movs	r2, #3
 8007ce0:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007ce2:	4b39      	ldr	r3, [pc, #228]	; (8007dc8 <tcp_listen_input+0x1b4>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007cf4:	6978      	ldr	r0, [r7, #20]
 8007cf6:	f7ff faa1 	bl	800723c <tcp_next_iss>
 8007cfa:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007d14:	4b2c      	ldr	r3, [pc, #176]	; (8007dc8 <tcp_listen_input+0x1b4>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	1e5a      	subs	r2, r3, #1
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691a      	ldr	r2, [r3, #16]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	7a1b      	ldrb	r3, [r3, #8]
 8007d30:	f003 030c 	and.w	r3, r3, #12
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007d3a:	4b29      	ldr	r3, [pc, #164]	; (8007de0 <tcp_listen_input+0x1cc>)
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	60da      	str	r2, [r3, #12]
 8007d42:	4a27      	ldr	r2, [pc, #156]	; (8007de0 <tcp_listen_input+0x1cc>)
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	f002 fd3c 	bl	800a7c4 <tcp_timer_needed>
 8007d4c:	4b25      	ldr	r3, [pc, #148]	; (8007de4 <tcp_listen_input+0x1d0>)
 8007d4e:	2201      	movs	r2, #1
 8007d50:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007d52:	6978      	ldr	r0, [r7, #20]
 8007d54:	f001 fd0e 	bl	8009774 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007d58:	4b1c      	ldr	r3, [pc, #112]	; (8007dcc <tcp_listen_input+0x1b8>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	89db      	ldrh	r3, [r3, #14]
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	f7ff fa73 	bl	8007268 <tcp_eff_send_mss_impl>
 8007d82:	4603      	mov	r3, r0
 8007d84:	461a      	mov	r2, r3
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007d8a:	2112      	movs	r1, #18
 8007d8c:	6978      	ldr	r0, [r7, #20]
 8007d8e:	f001 feb3 	bl	8009af8 <tcp_enqueue_flags>
 8007d92:	4603      	mov	r3, r0
 8007d94:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d004      	beq.n	8007da8 <tcp_listen_input+0x194>
      tcp_abandon(npcb, 0);
 8007d9e:	2100      	movs	r1, #0
 8007da0:	6978      	ldr	r0, [r7, #20]
 8007da2:	f7fe fac5 	bl	8006330 <tcp_abandon>
      return;
 8007da6:	e006      	b.n	8007db6 <tcp_listen_input+0x1a2>
    tcp_output(npcb);
 8007da8:	6978      	ldr	r0, [r7, #20]
 8007daa:	f002 f817 	bl	8009ddc <tcp_output>
  return;
 8007dae:	e001      	b.n	8007db4 <tcp_listen_input+0x1a0>
    return;
 8007db0:	bf00      	nop
 8007db2:	e000      	b.n	8007db6 <tcp_listen_input+0x1a2>
  return;
 8007db4:	bf00      	nop
}
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	2000695c 	.word	0x2000695c
 8007dc0:	20006954 	.word	0x20006954
 8007dc4:	2000695a 	.word	0x2000695a
 8007dc8:	20006950 	.word	0x20006950
 8007dcc:	20006940 	.word	0x20006940
 8007dd0:	20003288 	.word	0x20003288
 8007dd4:	2000328c 	.word	0x2000328c
 8007dd8:	20006840 	.word	0x20006840
 8007ddc:	20003278 	.word	0x20003278
 8007de0:	20006924 	.word	0x20006924
 8007de4:	2000692c 	.word	0x2000692c

08007de8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af02      	add	r7, sp, #8
 8007dee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007df0:	4b29      	ldr	r3, [pc, #164]	; (8007e98 <tcp_timewait_input+0xb0>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d146      	bne.n	8007e8a <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007dfc:	4b26      	ldr	r3, [pc, #152]	; (8007e98 <tcp_timewait_input+0xb0>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	f003 0302 	and.w	r3, r3, #2
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d027      	beq.n	8007e58 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007e08:	4b24      	ldr	r3, [pc, #144]	; (8007e9c <tcp_timewait_input+0xb4>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	db2a      	blt.n	8007e6c <tcp_timewait_input+0x84>
 8007e16:	4b21      	ldr	r3, [pc, #132]	; (8007e9c <tcp_timewait_input+0xb4>)
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	6879      	ldr	r1, [r7, #4]
 8007e20:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007e22:	440b      	add	r3, r1
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	dc20      	bgt.n	8007e6c <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e2a:	4b1d      	ldr	r3, [pc, #116]	; (8007ea0 <tcp_timewait_input+0xb8>)
 8007e2c:	6818      	ldr	r0, [r3, #0]
 8007e2e:	4b1d      	ldr	r3, [pc, #116]	; (8007ea4 <tcp_timewait_input+0xbc>)
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	4b19      	ldr	r3, [pc, #100]	; (8007e9c <tcp_timewait_input+0xb4>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e3a:	4b1b      	ldr	r3, [pc, #108]	; (8007ea8 <tcp_timewait_input+0xc0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e3e:	885b      	ldrh	r3, [r3, #2]
 8007e40:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e42:	4a19      	ldr	r2, [pc, #100]	; (8007ea8 <tcp_timewait_input+0xc0>)
 8007e44:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e46:	8812      	ldrh	r2, [r2, #0]
 8007e48:	b292      	uxth	r2, r2
 8007e4a:	9201      	str	r2, [sp, #4]
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	4b17      	ldr	r3, [pc, #92]	; (8007eac <tcp_timewait_input+0xc4>)
 8007e50:	4a17      	ldr	r2, [pc, #92]	; (8007eb0 <tcp_timewait_input+0xc8>)
 8007e52:	f002 fa51 	bl	800a2f8 <tcp_rst>
      return;
 8007e56:	e01b      	b.n	8007e90 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 8007e58:	4b0f      	ldr	r3, [pc, #60]	; (8007e98 <tcp_timewait_input+0xb0>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	f003 0301 	and.w	r3, r3, #1
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d003      	beq.n	8007e6c <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007e64:	4b13      	ldr	r3, [pc, #76]	; (8007eb4 <tcp_timewait_input+0xcc>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007e6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ea4 <tcp_timewait_input+0xbc>)
 8007e6e:	881b      	ldrh	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00c      	beq.n	8007e8e <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	7e9b      	ldrb	r3, [r3, #26]
 8007e78:	f043 0302 	orr.w	r3, r3, #2
 8007e7c:	b2da      	uxtb	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f001 ffaa 	bl	8009ddc <tcp_output>
  }
  return;
 8007e88:	e001      	b.n	8007e8e <tcp_timewait_input+0xa6>
    return;
 8007e8a:	bf00      	nop
 8007e8c:	e000      	b.n	8007e90 <tcp_timewait_input+0xa8>
  return;
 8007e8e:	bf00      	nop
}
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	2000695c 	.word	0x2000695c
 8007e9c:	20006950 	.word	0x20006950
 8007ea0:	20006954 	.word	0x20006954
 8007ea4:	2000695a 	.word	0x2000695a
 8007ea8:	20006940 	.word	0x20006940
 8007eac:	20003288 	.word	0x20003288
 8007eb0:	2000328c 	.word	0x2000328c
 8007eb4:	20006918 	.word	0x20006918

08007eb8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b08a      	sub	sp, #40	; 0x28
 8007ebc:	af02      	add	r7, sp, #8
 8007ebe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007ec8:	4b93      	ldr	r3, [pc, #588]	; (8008118 <tcp_process+0x260>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d04e      	beq.n	8007f72 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	7d1b      	ldrb	r3, [r3, #20]
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d108      	bne.n	8007eee <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ee0:	4b8e      	ldr	r3, [pc, #568]	; (800811c <tcp_process+0x264>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d123      	bne.n	8007f30 <tcp_process+0x78>
        acceptable = 1;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	76fb      	strb	r3, [r7, #27]
 8007eec:	e020      	b.n	8007f30 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ef2:	4b8b      	ldr	r3, [pc, #556]	; (8008120 <tcp_process+0x268>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d102      	bne.n	8007f00 <tcp_process+0x48>
        acceptable = 1;
 8007efa:	2301      	movs	r3, #1
 8007efc:	76fb      	strb	r3, [r7, #27]
 8007efe:	e017      	b.n	8007f30 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007f00:	4b87      	ldr	r3, [pc, #540]	; (8008120 <tcp_process+0x268>)
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	db10      	blt.n	8007f30 <tcp_process+0x78>
 8007f0e:	4b84      	ldr	r3, [pc, #528]	; (8008120 <tcp_process+0x268>)
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007f1a:	440b      	add	r3, r1
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	dc06      	bgt.n	8007f30 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	7e9b      	ldrb	r3, [r3, #26]
 8007f26:	f043 0302 	orr.w	r3, r3, #2
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007f30:	7efb      	ldrb	r3, [r7, #27]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d01b      	beq.n	8007f6e <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	7d1b      	ldrb	r3, [r3, #20]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d106      	bne.n	8007f4c <tcp_process+0x94>
 8007f3e:	4b79      	ldr	r3, [pc, #484]	; (8008124 <tcp_process+0x26c>)
 8007f40:	f240 22e7 	movw	r2, #743	; 0x2e7
 8007f44:	4978      	ldr	r1, [pc, #480]	; (8008128 <tcp_process+0x270>)
 8007f46:	4879      	ldr	r0, [pc, #484]	; (800812c <tcp_process+0x274>)
 8007f48:	f005 fd5e 	bl	800da08 <iprintf>
      recv_flags |= TF_RESET;
 8007f4c:	4b78      	ldr	r3, [pc, #480]	; (8008130 <tcp_process+0x278>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	f043 0308 	orr.w	r3, r3, #8
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	4b76      	ldr	r3, [pc, #472]	; (8008130 <tcp_process+0x278>)
 8007f58:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	7e9b      	ldrb	r3, [r3, #26]
 8007f5e:	f023 0301 	bic.w	r3, r3, #1
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8007f68:	f06f 030d 	mvn.w	r3, #13
 8007f6c:	e348      	b.n	8008600 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e346      	b.n	8008600 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007f72:	4b69      	ldr	r3, [pc, #420]	; (8008118 <tcp_process+0x260>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d010      	beq.n	8007fa0 <tcp_process+0xe8>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	7d1b      	ldrb	r3, [r3, #20]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d00c      	beq.n	8007fa0 <tcp_process+0xe8>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	7d1b      	ldrb	r3, [r3, #20]
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d008      	beq.n	8007fa0 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	7e9b      	ldrb	r3, [r3, #26]
 8007f92:	f043 0302 	orr.w	r3, r3, #2
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e32f      	b.n	8008600 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	7e9b      	ldrb	r3, [r3, #26]
 8007fa4:	f003 0310 	and.w	r3, r3, #16
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d103      	bne.n	8007fb4 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007fac:	4b61      	ldr	r3, [pc, #388]	; (8008134 <tcp_process+0x27c>)
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f001 fbd9 	bl	8009774 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	7d1b      	ldrb	r3, [r3, #20]
 8007fc6:	3b02      	subs	r3, #2
 8007fc8:	2b07      	cmp	r3, #7
 8007fca:	f200 8309 	bhi.w	80085e0 <tcp_process+0x728>
 8007fce:	a201      	add	r2, pc, #4	; (adr r2, 8007fd4 <tcp_process+0x11c>)
 8007fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd4:	08007ff5 	.word	0x08007ff5
 8007fd8:	080081eb 	.word	0x080081eb
 8007fdc:	08008343 	.word	0x08008343
 8007fe0:	0800836d 	.word	0x0800836d
 8007fe4:	0800848f 	.word	0x0800848f
 8007fe8:	08008343 	.word	0x08008343
 8007fec:	0800851b 	.word	0x0800851b
 8007ff0:	080085ab 	.word	0x080085ab
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007ff4:	4b48      	ldr	r3, [pc, #288]	; (8008118 <tcp_process+0x260>)
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	f003 0310 	and.w	r3, r3, #16
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 80ca 	beq.w	8008196 <tcp_process+0x2de>
 8008002:	4b45      	ldr	r3, [pc, #276]	; (8008118 <tcp_process+0x260>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	f003 0302 	and.w	r3, r3, #2
 800800a:	2b00      	cmp	r3, #0
 800800c:	f000 80c3 	beq.w	8008196 <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008014:	1c5a      	adds	r2, r3, #1
 8008016:	4b41      	ldr	r3, [pc, #260]	; (800811c <tcp_process+0x264>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	429a      	cmp	r2, r3
 800801c:	f040 80bb 	bne.w	8008196 <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 8008020:	4b3f      	ldr	r3, [pc, #252]	; (8008120 <tcp_process+0x268>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8008032:	4b3a      	ldr	r3, [pc, #232]	; (800811c <tcp_process+0x264>)
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800803a:	4b3f      	ldr	r3, [pc, #252]	; (8008138 <tcp_process+0x280>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	89db      	ldrh	r3, [r3, #14]
 8008040:	b29a      	uxth	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008054:	4b32      	ldr	r3, [pc, #200]	; (8008120 <tcp_process+0x268>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	1e5a      	subs	r2, r3, #1
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2204      	movs	r2, #4
 8008062:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3304      	adds	r3, #4
 800806c:	4619      	mov	r1, r3
 800806e:	4610      	mov	r0, r2
 8008070:	f7ff f8fa 	bl	8007268 <tcp_eff_send_mss_impl>
 8008074:	4603      	mov	r3, r0
 8008076:	461a      	mov	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008080:	005b      	lsls	r3, r3, #1
 8008082:	f241 121c 	movw	r2, #4380	; 0x111c
 8008086:	429a      	cmp	r2, r3
 8008088:	bf38      	it	cc
 800808a:	461a      	movcc	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4293      	cmp	r3, r2
 8008094:	bf28      	it	cs
 8008096:	4613      	movcs	r3, r2
 8008098:	b29a      	uxth	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d106      	bne.n	80080b8 <tcp_process+0x200>
 80080aa:	4b1e      	ldr	r3, [pc, #120]	; (8008124 <tcp_process+0x26c>)
 80080ac:	f240 321a 	movw	r2, #794	; 0x31a
 80080b0:	4922      	ldr	r1, [pc, #136]	; (800813c <tcp_process+0x284>)
 80080b2:	481e      	ldr	r0, [pc, #120]	; (800812c <tcp_process+0x274>)
 80080b4:	f005 fca8 	bl	800da08 <iprintf>
      --pcb->snd_queuelen;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080be:	3b01      	subs	r3, #1
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080cc:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d111      	bne.n	80080f8 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080d8:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d106      	bne.n	80080ee <tcp_process+0x236>
 80080e0:	4b10      	ldr	r3, [pc, #64]	; (8008124 <tcp_process+0x26c>)
 80080e2:	f240 3222 	movw	r2, #802	; 0x322
 80080e6:	4916      	ldr	r1, [pc, #88]	; (8008140 <tcp_process+0x288>)
 80080e8:	4810      	ldr	r0, [pc, #64]	; (800812c <tcp_process+0x274>)
 80080ea:	f005 fc8d 	bl	800da08 <iprintf>
        pcb->unsent = rseg->next;
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	669a      	str	r2, [r3, #104]	; 0x68
 80080f6:	e003      	b.n	8008100 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8008100:	69f8      	ldr	r0, [r7, #28]
 8008102:	f7fe fe1f 	bl	8006d44 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800810a:	2b00      	cmp	r3, #0
 800810c:	d11a      	bne.n	8008144 <tcp_process+0x28c>
        pcb->rtime = -1;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008114:	861a      	strh	r2, [r3, #48]	; 0x30
 8008116:	e01c      	b.n	8008152 <tcp_process+0x29a>
 8008118:	2000695c 	.word	0x2000695c
 800811c:	20006954 	.word	0x20006954
 8008120:	20006950 	.word	0x20006950
 8008124:	0800fa50 	.word	0x0800fa50
 8008128:	0800fc08 	.word	0x0800fc08
 800812c:	0800fa94 	.word	0x0800fa94
 8008130:	2000695d 	.word	0x2000695d
 8008134:	20006918 	.word	0x20006918
 8008138:	20006940 	.word	0x20006940
 800813c:	0800fc28 	.word	0x0800fc28
 8008140:	0800fc40 	.word	0x0800fc40
      } else {
        pcb->rtime = 0;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <tcp_process+0x2ba>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	6910      	ldr	r0, [r2, #16]
 8008166:	2200      	movs	r2, #0
 8008168:	6879      	ldr	r1, [r7, #4]
 800816a:	4798      	blx	r3
 800816c:	4603      	mov	r3, r0
 800816e:	76bb      	strb	r3, [r7, #26]
 8008170:	e001      	b.n	8008176 <tcp_process+0x2be>
 8008172:	2300      	movs	r3, #0
 8008174:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8008176:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800817a:	f113 0f0d 	cmn.w	r3, #13
 800817e:	d102      	bne.n	8008186 <tcp_process+0x2ce>
        return ERR_ABRT;
 8008180:	f06f 030c 	mvn.w	r3, #12
 8008184:	e23c      	b.n	8008600 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	7e9b      	ldrb	r3, [r3, #26]
 800818a:	f043 0302 	orr.w	r3, r3, #2
 800818e:	b2da      	uxtb	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8008194:	e226      	b.n	80085e4 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 8008196:	4b93      	ldr	r3, [pc, #588]	; (80083e4 <tcp_process+0x52c>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	f003 0310 	and.w	r3, r3, #16
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f000 8220 	beq.w	80085e4 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80081a4:	4b90      	ldr	r3, [pc, #576]	; (80083e8 <tcp_process+0x530>)
 80081a6:	6818      	ldr	r0, [r3, #0]
 80081a8:	4b90      	ldr	r3, [pc, #576]	; (80083ec <tcp_process+0x534>)
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	461a      	mov	r2, r3
 80081ae:	4b90      	ldr	r3, [pc, #576]	; (80083f0 <tcp_process+0x538>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081b4:	4b8f      	ldr	r3, [pc, #572]	; (80083f4 <tcp_process+0x53c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80081b8:	885b      	ldrh	r3, [r3, #2]
 80081ba:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081bc:	4a8d      	ldr	r2, [pc, #564]	; (80083f4 <tcp_process+0x53c>)
 80081be:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80081c0:	8812      	ldrh	r2, [r2, #0]
 80081c2:	b292      	uxth	r2, r2
 80081c4:	9201      	str	r2, [sp, #4]
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	4b8b      	ldr	r3, [pc, #556]	; (80083f8 <tcp_process+0x540>)
 80081ca:	4a8c      	ldr	r2, [pc, #560]	; (80083fc <tcp_process+0x544>)
 80081cc:	f002 f894 	bl	800a2f8 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80081d6:	2b05      	cmp	r3, #5
 80081d8:	f200 8204 	bhi.w	80085e4 <tcp_process+0x72c>
        pcb->rtime = 0;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f002 f908 	bl	800a3f8 <tcp_rexmit_rto>
    break;
 80081e8:	e1fc      	b.n	80085e4 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 80081ea:	4b7e      	ldr	r3, [pc, #504]	; (80083e4 <tcp_process+0x52c>)
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	f003 0310 	and.w	r3, r3, #16
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 8091 	beq.w	800831a <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80081f8:	4b7b      	ldr	r3, [pc, #492]	; (80083e8 <tcp_process+0x530>)
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	3b01      	subs	r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	db71      	blt.n	80082ec <tcp_process+0x434>
 8008208:	4b77      	ldr	r3, [pc, #476]	; (80083e8 <tcp_process+0x530>)
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	dc6a      	bgt.n	80082ec <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2204      	movs	r2, #4
 800821a:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00b      	beq.n	800823c <tcp_process+0x384>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d106      	bne.n	800823c <tcp_process+0x384>
 800822e:	4b74      	ldr	r3, [pc, #464]	; (8008400 <tcp_process+0x548>)
 8008230:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008234:	4973      	ldr	r1, [pc, #460]	; (8008404 <tcp_process+0x54c>)
 8008236:	4874      	ldr	r0, [pc, #464]	; (8008408 <tcp_process+0x550>)
 8008238:	f005 fbe6 	bl	800da08 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008240:	2b00      	cmp	r3, #0
 8008242:	d102      	bne.n	800824a <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8008244:	23fa      	movs	r3, #250	; 0xfa
 8008246:	76bb      	strb	r3, [r7, #26]
 8008248:	e011      	b.n	800826e <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00a      	beq.n	800826a <tcp_process+0x3b2>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	6910      	ldr	r0, [r2, #16]
 800825e:	2200      	movs	r2, #0
 8008260:	6879      	ldr	r1, [r7, #4]
 8008262:	4798      	blx	r3
 8008264:	4603      	mov	r3, r0
 8008266:	76bb      	strb	r3, [r7, #26]
 8008268:	e001      	b.n	800826e <tcp_process+0x3b6>
 800826a:	23f0      	movs	r3, #240	; 0xf0
 800826c:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800826e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00a      	beq.n	800828c <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8008276:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800827a:	f113 0f0d 	cmn.w	r3, #13
 800827e:	d002      	beq.n	8008286 <tcp_process+0x3ce>
            tcp_abort(pcb);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7fe f907 	bl	8006494 <tcp_abort>
          }
          return ERR_ABRT;
 8008286:	f06f 030c 	mvn.w	r3, #12
 800828a:	e1b9      	b.n	8008600 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fa3d 	bl	800870c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8008292:	4b5e      	ldr	r3, [pc, #376]	; (800840c <tcp_process+0x554>)
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d005      	beq.n	80082a6 <tcp_process+0x3ee>
          recv_acked--;
 800829a:	4b5c      	ldr	r3, [pc, #368]	; (800840c <tcp_process+0x554>)
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	3b01      	subs	r3, #1
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	4b5a      	ldr	r3, [pc, #360]	; (800840c <tcp_process+0x554>)
 80082a4:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	f241 121c 	movw	r2, #4380	; 0x111c
 80082b0:	429a      	cmp	r2, r3
 80082b2:	bf38      	it	cc
 80082b4:	461a      	movcc	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4293      	cmp	r3, r2
 80082be:	bf28      	it	cs
 80082c0:	4613      	movcs	r3, r2
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 80082ca:	4b51      	ldr	r3, [pc, #324]	; (8008410 <tcp_process+0x558>)
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	f003 0320 	and.w	r3, r3, #32
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d034      	beq.n	8008340 <tcp_process+0x488>
          tcp_ack_now(pcb);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	7e9b      	ldrb	r3, [r3, #26]
 80082da:	f043 0302 	orr.w	r3, r3, #2
 80082de:	b2da      	uxtb	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2207      	movs	r2, #7
 80082e8:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 80082ea:	e029      	b.n	8008340 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80082ec:	4b3e      	ldr	r3, [pc, #248]	; (80083e8 <tcp_process+0x530>)
 80082ee:	6818      	ldr	r0, [r3, #0]
 80082f0:	4b3e      	ldr	r3, [pc, #248]	; (80083ec <tcp_process+0x534>)
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	461a      	mov	r2, r3
 80082f6:	4b3e      	ldr	r3, [pc, #248]	; (80083f0 <tcp_process+0x538>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80082fc:	4b3d      	ldr	r3, [pc, #244]	; (80083f4 <tcp_process+0x53c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008300:	885b      	ldrh	r3, [r3, #2]
 8008302:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008304:	4a3b      	ldr	r2, [pc, #236]	; (80083f4 <tcp_process+0x53c>)
 8008306:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008308:	8812      	ldrh	r2, [r2, #0]
 800830a:	b292      	uxth	r2, r2
 800830c:	9201      	str	r2, [sp, #4]
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	4b39      	ldr	r3, [pc, #228]	; (80083f8 <tcp_process+0x540>)
 8008312:	4a3a      	ldr	r2, [pc, #232]	; (80083fc <tcp_process+0x544>)
 8008314:	f001 fff0 	bl	800a2f8 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8008318:	e166      	b.n	80085e8 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800831a:	4b32      	ldr	r3, [pc, #200]	; (80083e4 <tcp_process+0x52c>)
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b00      	cmp	r3, #0
 8008324:	f000 8160 	beq.w	80085e8 <tcp_process+0x730>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832c:	1e5a      	subs	r2, r3, #1
 800832e:	4b30      	ldr	r3, [pc, #192]	; (80083f0 <tcp_process+0x538>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	429a      	cmp	r2, r3
 8008334:	f040 8158 	bne.w	80085e8 <tcp_process+0x730>
      tcp_rexmit(pcb);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f002 f893 	bl	800a464 <tcp_rexmit>
    break;
 800833e:	e153      	b.n	80085e8 <tcp_process+0x730>
 8008340:	e152      	b.n	80085e8 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f9e2 	bl	800870c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008348:	4b31      	ldr	r3, [pc, #196]	; (8008410 <tcp_process+0x558>)
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	f003 0320 	and.w	r3, r3, #32
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 814b 	beq.w	80085ec <tcp_process+0x734>
      tcp_ack_now(pcb);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	7e9b      	ldrb	r3, [r3, #26]
 800835a:	f043 0302 	orr.w	r3, r3, #2
 800835e:	b2da      	uxtb	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2207      	movs	r2, #7
 8008368:	751a      	strb	r2, [r3, #20]
    }
    break;
 800836a:	e13f      	b.n	80085ec <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f9cd 	bl	800870c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008372:	4b27      	ldr	r3, [pc, #156]	; (8008410 <tcp_process+0x558>)
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b00      	cmp	r3, #0
 800837c:	d070      	beq.n	8008460 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800837e:	4b19      	ldr	r3, [pc, #100]	; (80083e4 <tcp_process+0x52c>)
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	f003 0310 	and.w	r3, r3, #16
 8008386:	2b00      	cmp	r3, #0
 8008388:	d05f      	beq.n	800844a <tcp_process+0x592>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800838e:	4b16      	ldr	r3, [pc, #88]	; (80083e8 <tcp_process+0x530>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	429a      	cmp	r2, r3
 8008394:	d159      	bne.n	800844a <tcp_process+0x592>
          pcb->unsent == NULL) {
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800839a:	2b00      	cmp	r3, #0
 800839c:	d155      	bne.n	800844a <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	7e9b      	ldrb	r3, [r3, #26]
 80083a2:	f043 0302 	orr.w	r3, r3, #2
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7fe fe87 	bl	80070c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80083b2:	4b18      	ldr	r3, [pc, #96]	; (8008414 <tcp_process+0x55c>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d105      	bne.n	80083c8 <tcp_process+0x510>
 80083bc:	4b15      	ldr	r3, [pc, #84]	; (8008414 <tcp_process+0x55c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	4a14      	ldr	r2, [pc, #80]	; (8008414 <tcp_process+0x55c>)
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	e02d      	b.n	8008424 <tcp_process+0x56c>
 80083c8:	4b12      	ldr	r3, [pc, #72]	; (8008414 <tcp_process+0x55c>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	617b      	str	r3, [r7, #20]
 80083ce:	e026      	b.n	800841e <tcp_process+0x566>
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d11e      	bne.n	8008418 <tcp_process+0x560>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68da      	ldr	r2, [r3, #12]
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	60da      	str	r2, [r3, #12]
 80083e2:	e01f      	b.n	8008424 <tcp_process+0x56c>
 80083e4:	2000695c 	.word	0x2000695c
 80083e8:	20006954 	.word	0x20006954
 80083ec:	2000695a 	.word	0x2000695a
 80083f0:	20006950 	.word	0x20006950
 80083f4:	20006940 	.word	0x20006940
 80083f8:	20003288 	.word	0x20003288
 80083fc:	2000328c 	.word	0x2000328c
 8008400:	0800fa50 	.word	0x0800fa50
 8008404:	0800fc54 	.word	0x0800fc54
 8008408:	0800fa94 	.word	0x0800fa94
 800840c:	20006958 	.word	0x20006958
 8008410:	2000695d 	.word	0x2000695d
 8008414:	20006924 	.word	0x20006924
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	617b      	str	r3, [r7, #20]
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1d5      	bne.n	80083d0 <tcp_process+0x518>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	60da      	str	r2, [r3, #12]
 800842a:	4b77      	ldr	r3, [pc, #476]	; (8008608 <tcp_process+0x750>)
 800842c:	2201      	movs	r2, #1
 800842e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	220a      	movs	r2, #10
 8008434:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008436:	4b75      	ldr	r3, [pc, #468]	; (800860c <tcp_process+0x754>)
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	60da      	str	r2, [r3, #12]
 800843e:	4a73      	ldr	r2, [pc, #460]	; (800860c <tcp_process+0x754>)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6013      	str	r3, [r2, #0]
 8008444:	f002 f9be 	bl	800a7c4 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8008448:	e0d2      	b.n	80085f0 <tcp_process+0x738>
        tcp_ack_now(pcb);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	7e9b      	ldrb	r3, [r3, #26]
 800844e:	f043 0302 	orr.w	r3, r3, #2
 8008452:	b2da      	uxtb	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2208      	movs	r2, #8
 800845c:	751a      	strb	r2, [r3, #20]
    break;
 800845e:	e0c7      	b.n	80085f0 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008460:	4b6b      	ldr	r3, [pc, #428]	; (8008610 <tcp_process+0x758>)
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	f003 0310 	and.w	r3, r3, #16
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 80c1 	beq.w	80085f0 <tcp_process+0x738>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008472:	4b68      	ldr	r3, [pc, #416]	; (8008614 <tcp_process+0x75c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	429a      	cmp	r2, r3
 8008478:	f040 80ba 	bne.w	80085f0 <tcp_process+0x738>
               pcb->unsent == NULL) {
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008480:	2b00      	cmp	r3, #0
 8008482:	f040 80b5 	bne.w	80085f0 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2206      	movs	r2, #6
 800848a:	751a      	strb	r2, [r3, #20]
    break;
 800848c:	e0b0      	b.n	80085f0 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f93c 	bl	800870c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008494:	4b60      	ldr	r3, [pc, #384]	; (8008618 <tcp_process+0x760>)
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	f003 0320 	and.w	r3, r3, #32
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 80a9 	beq.w	80085f4 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	7e9b      	ldrb	r3, [r3, #26]
 80084a6:	f043 0302 	orr.w	r3, r3, #2
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7fe fe05 	bl	80070c0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80084b6:	4b59      	ldr	r3, [pc, #356]	; (800861c <tcp_process+0x764>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d105      	bne.n	80084cc <tcp_process+0x614>
 80084c0:	4b56      	ldr	r3, [pc, #344]	; (800861c <tcp_process+0x764>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	4a55      	ldr	r2, [pc, #340]	; (800861c <tcp_process+0x764>)
 80084c8:	6013      	str	r3, [r2, #0]
 80084ca:	e013      	b.n	80084f4 <tcp_process+0x63c>
 80084cc:	4b53      	ldr	r3, [pc, #332]	; (800861c <tcp_process+0x764>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	613b      	str	r3, [r7, #16]
 80084d2:	e00c      	b.n	80084ee <tcp_process+0x636>
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d104      	bne.n	80084e8 <tcp_process+0x630>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68da      	ldr	r2, [r3, #12]
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	60da      	str	r2, [r3, #12]
 80084e6:	e005      	b.n	80084f4 <tcp_process+0x63c>
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	613b      	str	r3, [r7, #16]
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1ef      	bne.n	80084d4 <tcp_process+0x61c>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	60da      	str	r2, [r3, #12]
 80084fa:	4b43      	ldr	r3, [pc, #268]	; (8008608 <tcp_process+0x750>)
 80084fc:	2201      	movs	r2, #1
 80084fe:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	220a      	movs	r2, #10
 8008504:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8008506:	4b41      	ldr	r3, [pc, #260]	; (800860c <tcp_process+0x754>)
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	60da      	str	r2, [r3, #12]
 800850e:	4a3f      	ldr	r2, [pc, #252]	; (800860c <tcp_process+0x754>)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6013      	str	r3, [r2, #0]
 8008514:	f002 f956 	bl	800a7c4 <tcp_timer_needed>
    }
    break;
 8008518:	e06c      	b.n	80085f4 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f8f6 	bl	800870c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008520:	4b3b      	ldr	r3, [pc, #236]	; (8008610 <tcp_process+0x758>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	f003 0310 	and.w	r3, r3, #16
 8008528:	2b00      	cmp	r3, #0
 800852a:	d065      	beq.n	80085f8 <tcp_process+0x740>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008530:	4b38      	ldr	r3, [pc, #224]	; (8008614 <tcp_process+0x75c>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	429a      	cmp	r2, r3
 8008536:	d15f      	bne.n	80085f8 <tcp_process+0x740>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800853c:	2b00      	cmp	r3, #0
 800853e:	d15b      	bne.n	80085f8 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7fe fdbd 	bl	80070c0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008546:	4b35      	ldr	r3, [pc, #212]	; (800861c <tcp_process+0x764>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	429a      	cmp	r2, r3
 800854e:	d105      	bne.n	800855c <tcp_process+0x6a4>
 8008550:	4b32      	ldr	r3, [pc, #200]	; (800861c <tcp_process+0x764>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	4a31      	ldr	r2, [pc, #196]	; (800861c <tcp_process+0x764>)
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	e013      	b.n	8008584 <tcp_process+0x6cc>
 800855c:	4b2f      	ldr	r3, [pc, #188]	; (800861c <tcp_process+0x764>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	60fb      	str	r3, [r7, #12]
 8008562:	e00c      	b.n	800857e <tcp_process+0x6c6>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	429a      	cmp	r2, r3
 800856c:	d104      	bne.n	8008578 <tcp_process+0x6c0>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	60da      	str	r2, [r3, #12]
 8008576:	e005      	b.n	8008584 <tcp_process+0x6cc>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	60fb      	str	r3, [r7, #12]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1ef      	bne.n	8008564 <tcp_process+0x6ac>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	60da      	str	r2, [r3, #12]
 800858a:	4b1f      	ldr	r3, [pc, #124]	; (8008608 <tcp_process+0x750>)
 800858c:	2201      	movs	r2, #1
 800858e:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	220a      	movs	r2, #10
 8008594:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8008596:	4b1d      	ldr	r3, [pc, #116]	; (800860c <tcp_process+0x754>)
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	60da      	str	r2, [r3, #12]
 800859e:	4a1b      	ldr	r2, [pc, #108]	; (800860c <tcp_process+0x754>)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6013      	str	r3, [r2, #0]
 80085a4:	f002 f90e 	bl	800a7c4 <tcp_timer_needed>
    }
    break;
 80085a8:	e026      	b.n	80085f8 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 f8ae 	bl	800870c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80085b0:	4b17      	ldr	r3, [pc, #92]	; (8008610 <tcp_process+0x758>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	f003 0310 	and.w	r3, r3, #16
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d01f      	beq.n	80085fc <tcp_process+0x744>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085c0:	4b14      	ldr	r3, [pc, #80]	; (8008614 <tcp_process+0x75c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d119      	bne.n	80085fc <tcp_process+0x744>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d115      	bne.n	80085fc <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 80085d0:	4b11      	ldr	r3, [pc, #68]	; (8008618 <tcp_process+0x760>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	f043 0310 	orr.w	r3, r3, #16
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	4b0f      	ldr	r3, [pc, #60]	; (8008618 <tcp_process+0x760>)
 80085dc:	701a      	strb	r2, [r3, #0]
    }
    break;
 80085de:	e00d      	b.n	80085fc <tcp_process+0x744>
  default:
    break;
 80085e0:	bf00      	nop
 80085e2:	e00c      	b.n	80085fe <tcp_process+0x746>
    break;
 80085e4:	bf00      	nop
 80085e6:	e00a      	b.n	80085fe <tcp_process+0x746>
    break;
 80085e8:	bf00      	nop
 80085ea:	e008      	b.n	80085fe <tcp_process+0x746>
    break;
 80085ec:	bf00      	nop
 80085ee:	e006      	b.n	80085fe <tcp_process+0x746>
    break;
 80085f0:	bf00      	nop
 80085f2:	e004      	b.n	80085fe <tcp_process+0x746>
    break;
 80085f4:	bf00      	nop
 80085f6:	e002      	b.n	80085fe <tcp_process+0x746>
    break;
 80085f8:	bf00      	nop
 80085fa:	e000      	b.n	80085fe <tcp_process+0x746>
    break;
 80085fc:	bf00      	nop
  }
  return ERR_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3720      	adds	r7, #32
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	2000692c 	.word	0x2000692c
 800860c:	20006928 	.word	0x20006928
 8008610:	2000695c 	.word	0x2000695c
 8008614:	20006954 	.word	0x20006954
 8008618:	2000695d 	.word	0x2000695d
 800861c:	20006924 	.word	0x20006924

08008620 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008620:	b590      	push	{r4, r7, lr}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	899b      	ldrh	r3, [r3, #12]
 8008630:	b29b      	uxth	r3, r3
 8008632:	4618      	mov	r0, r3
 8008634:	f7fb ffbf 	bl	80045b6 <lwip_htons>
 8008638:	4603      	mov	r3, r0
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d027      	beq.n	8008692 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008642:	6838      	ldr	r0, [r7, #0]
 8008644:	f7fe fb69 	bl	8006d1a <tcp_segs_free>
    next = NULL;
 8008648:	2300      	movs	r3, #0
 800864a:	603b      	str	r3, [r7, #0]
 800864c:	e055      	b.n	80086fa <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	899b      	ldrh	r3, [r3, #12]
 8008654:	b29b      	uxth	r3, r3
 8008656:	4618      	mov	r0, r3
 8008658:	f7fb ffad 	bl	80045b6 <lwip_htons>
 800865c:	4603      	mov	r3, r0
 800865e:	f003 0301 	and.w	r3, r3, #1
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00d      	beq.n	8008682 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	899b      	ldrh	r3, [r3, #12]
 800866c:	b29c      	uxth	r4, r3
 800866e:	2001      	movs	r0, #1
 8008670:	f7fb ffa1 	bl	80045b6 <lwip_htons>
 8008674:	4603      	mov	r3, r0
 8008676:	461a      	mov	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	4322      	orrs	r2, r4
 800867e:	b292      	uxth	r2, r2
 8008680:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f7fe fb59 	bl	8006d44 <tcp_seg_free>
    while (next &&
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00e      	beq.n	80086b6 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	891b      	ldrh	r3, [r3, #8]
 800869c:	461a      	mov	r2, r3
 800869e:	4b1a      	ldr	r3, [pc, #104]	; (8008708 <tcp_oos_insert_segment+0xe8>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	441a      	add	r2, r3
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	8909      	ldrh	r1, [r1, #8]
 80086ae:	440b      	add	r3, r1
 80086b0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	dacb      	bge.n	800864e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01e      	beq.n	80086fa <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	891b      	ldrh	r3, [r3, #8]
 80086c0:	461a      	mov	r2, r3
 80086c2:	4b11      	ldr	r3, [pc, #68]	; (8008708 <tcp_oos_insert_segment+0xe8>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	441a      	add	r2, r3
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	1ad3      	subs	r3, r2, r3
    if (next &&
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	dd12      	ble.n	80086fa <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	b29a      	uxth	r2, r3
 80086dc:	4b0a      	ldr	r3, [pc, #40]	; (8008708 <tcp_oos_insert_segment+0xe8>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	891b      	ldrh	r3, [r3, #8]
 80086f2:	4619      	mov	r1, r3
 80086f4:	4610      	mov	r0, r2
 80086f6:	f7fc ffbb 	bl	8005670 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	601a      	str	r2, [r3, #0]
}
 8008700:	bf00      	nop
 8008702:	3714      	adds	r7, #20
 8008704:	46bd      	mov	sp, r7
 8008706:	bd90      	pop	{r4, r7, pc}
 8008708:	20006950 	.word	0x20006950

0800870c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800870c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800870e:	b08d      	sub	sp, #52	; 0x34
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	7d1b      	ldrb	r3, [r3, #20]
 800871c:	2b03      	cmp	r3, #3
 800871e:	d806      	bhi.n	800872e <tcp_receive+0x22>
 8008720:	4b98      	ldr	r3, [pc, #608]	; (8008984 <tcp_receive+0x278>)
 8008722:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8008726:	4998      	ldr	r1, [pc, #608]	; (8008988 <tcp_receive+0x27c>)
 8008728:	4898      	ldr	r0, [pc, #608]	; (800898c <tcp_receive+0x280>)
 800872a:	f005 f96d 	bl	800da08 <iprintf>

  if (flags & TCP_ACK) {
 800872e:	4b98      	ldr	r3, [pc, #608]	; (8008990 <tcp_receive+0x284>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	f003 0310 	and.w	r3, r3, #16
 8008736:	2b00      	cmp	r3, #0
 8008738:	f000 82c1 	beq.w	8008cbe <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008742:	461a      	mov	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008748:	4413      	add	r3, r2
 800874a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008750:	4b90      	ldr	r3, [pc, #576]	; (8008994 <tcp_receive+0x288>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b00      	cmp	r3, #0
 8008758:	db1b      	blt.n	8008792 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800875e:	4b8d      	ldr	r3, [pc, #564]	; (8008994 <tcp_receive+0x288>)
 8008760:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008762:	429a      	cmp	r2, r3
 8008764:	d106      	bne.n	8008774 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800876a:	4b8b      	ldr	r3, [pc, #556]	; (8008998 <tcp_receive+0x28c>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	2b00      	cmp	r3, #0
 8008772:	db0e      	blt.n	8008792 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008778:	4b87      	ldr	r3, [pc, #540]	; (8008998 <tcp_receive+0x28c>)
 800877a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800877c:	429a      	cmp	r2, r3
 800877e:	d141      	bne.n	8008804 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008780:	4b86      	ldr	r3, [pc, #536]	; (800899c <tcp_receive+0x290>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	89db      	ldrh	r3, [r3, #14]
 8008786:	b29a      	uxth	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800878e:	429a      	cmp	r2, r3
 8008790:	d938      	bls.n	8008804 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008792:	4b82      	ldr	r3, [pc, #520]	; (800899c <tcp_receive+0x290>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	89db      	ldrh	r3, [r3, #14]
 8008798:	b29a      	uxth	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d205      	bcs.n	80087bc <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 80087bc:	4b75      	ldr	r3, [pc, #468]	; (8008994 <tcp_receive+0x288>)
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 80087c4:	4b74      	ldr	r3, [pc, #464]	; (8008998 <tcp_receive+0x28c>)
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10d      	bne.n	80087f2 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d111      	bne.n	8008804 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80087f0:	e008      	b.n	8008804 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d003      	beq.n	8008804 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008804:	4b64      	ldr	r3, [pc, #400]	; (8008998 <tcp_receive+0x28c>)
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	2b00      	cmp	r3, #0
 8008810:	dc53      	bgt.n	80088ba <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8008812:	4b63      	ldr	r3, [pc, #396]	; (80089a0 <tcp_receive+0x294>)
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d146      	bne.n	80088a8 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8008824:	4413      	add	r3, r2
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	429a      	cmp	r2, r3
 800882a:	d13d      	bne.n	80088a8 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008832:	2b00      	cmp	r3, #0
 8008834:	db38      	blt.n	80088a8 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800883a:	4b57      	ldr	r3, [pc, #348]	; (8008998 <tcp_receive+0x28c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	429a      	cmp	r2, r3
 8008840:	d132      	bne.n	80088a8 <tcp_receive+0x19c>
              found_dupack = 1;
 8008842:	2301      	movs	r3, #1
 8008844:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800884c:	2bff      	cmp	r3, #255	; 0xff
 800884e:	d007      	beq.n	8008860 <tcp_receive+0x154>
                ++pcb->dupacks;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008856:	3301      	adds	r3, #1
 8008858:	b2da      	uxtb	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008866:	2b03      	cmp	r3, #3
 8008868:	d916      	bls.n	8008898 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008874:	4413      	add	r3, r2
 8008876:	b29a      	uxth	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800887e:	429a      	cmp	r2, r3
 8008880:	d912      	bls.n	80088a8 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800888c:	4413      	add	r3, r2
 800888e:	b29a      	uxth	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008896:	e007      	b.n	80088a8 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d102      	bne.n	80088a8 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f001 fe2e 	bl	800a504 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f040 816a 	bne.w	8008b84 <tcp_receive+0x478>
        pcb->dupacks = 0;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088b8:	e164      	b.n	8008b84 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80088ba:	4b37      	ldr	r3, [pc, #220]	; (8008998 <tcp_receive+0x28c>)
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	3b01      	subs	r3, #1
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f2c0 8108 	blt.w	8008adc <tcp_receive+0x3d0>
 80088cc:	4b32      	ldr	r3, [pc, #200]	; (8008998 <tcp_receive+0x28c>)
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f300 8100 	bgt.w	8008adc <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	7e9b      	ldrb	r3, [r3, #26]
 80088e0:	f003 0304 	and.w	r3, r3, #4
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00c      	beq.n	8008902 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	7e9b      	ldrb	r3, [r3, #26]
 80088ec:	f023 0304 	bic.w	r3, r3, #4
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008910:	10db      	asrs	r3, r3, #3
 8008912:	b21b      	sxth	r3, r3
 8008914:	b29a      	uxth	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800891c:	b29b      	uxth	r3, r3
 800891e:	4413      	add	r3, r2
 8008920:	b29b      	uxth	r3, r3
 8008922:	b21a      	sxth	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008932:	4b19      	ldr	r3, [pc, #100]	; (8008998 <tcp_receive+0x28c>)
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	7d1b      	ldrb	r3, [r3, #20]
 800893e:	2b03      	cmp	r3, #3
 8008940:	f240 8095 	bls.w	8008a6e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008950:	429a      	cmp	r2, r3
 8008952:	d227      	bcs.n	80089a4 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800895e:	4413      	add	r3, r2
 8008960:	b29a      	uxth	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008968:	429a      	cmp	r2, r3
 800896a:	f240 8080 	bls.w	8008a6e <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008978:	4413      	add	r3, r2
 800897a:	b29a      	uxth	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008982:	e074      	b.n	8008a6e <tcp_receive+0x362>
 8008984:	0800fa50 	.word	0x0800fa50
 8008988:	0800fc74 	.word	0x0800fc74
 800898c:	0800fa94 	.word	0x0800fa94
 8008990:	2000695c 	.word	0x2000695c
 8008994:	20006950 	.word	0x20006950
 8008998:	20006954 	.word	0x20006954
 800899c:	20006940 	.word	0x20006940
 80089a0:	2000695a 	.word	0x2000695a
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089ae:	4619      	mov	r1, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089b4:	fb01 f303 	mul.w	r3, r1, r3
 80089b8:	6879      	ldr	r1, [r7, #4]
 80089ba:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 80089be:	fb93 f3f1 	sdiv	r3, r3, r1
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	4413      	add	r3, r2
 80089c6:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80089ce:	8a7a      	ldrh	r2, [r7, #18]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d94c      	bls.n	8008a6e <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	8a7a      	ldrh	r2, [r7, #18]
 80089d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 80089dc:	e047      	b.n	8008a6e <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 80089f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7fd f841 	bl	8005a80 <pbuf_clen>
 80089fe:	4603      	mov	r3, r0
 8008a00:	429c      	cmp	r4, r3
 8008a02:	d206      	bcs.n	8008a12 <tcp_receive+0x306>
 8008a04:	4b70      	ldr	r3, [pc, #448]	; (8008bc8 <tcp_receive+0x4bc>)
 8008a06:	f240 429e 	movw	r2, #1182	; 0x49e
 8008a0a:	4970      	ldr	r1, [pc, #448]	; (8008bcc <tcp_receive+0x4c0>)
 8008a0c:	4870      	ldr	r0, [pc, #448]	; (8008bd0 <tcp_receive+0x4c4>)
 8008a0e:	f004 fffb 	bl	800da08 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fd f832 	bl	8005a80 <pbuf_clen>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	461a      	mov	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a26:	1a9b      	subs	r3, r3, r2
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8008a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a32:	891a      	ldrh	r2, [r3, #8]
 8008a34:	4b67      	ldr	r3, [pc, #412]	; (8008bd4 <tcp_receive+0x4c8>)
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	4413      	add	r3, r2
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	4b65      	ldr	r3, [pc, #404]	; (8008bd4 <tcp_receive+0x4c8>)
 8008a3e:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8008a40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a42:	f7fe f97f 	bl	8006d44 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00e      	beq.n	8008a6e <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10a      	bne.n	8008a6e <tcp_receive+0x362>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d106      	bne.n	8008a6e <tcp_receive+0x362>
 8008a60:	4b59      	ldr	r3, [pc, #356]	; (8008bc8 <tcp_receive+0x4bc>)
 8008a62:	f240 42a6 	movw	r2, #1190	; 0x4a6
 8008a66:	495c      	ldr	r1, [pc, #368]	; (8008bd8 <tcp_receive+0x4cc>)
 8008a68:	4859      	ldr	r0, [pc, #356]	; (8008bd0 <tcp_receive+0x4c4>)
 8008a6a:	f004 ffcd 	bl	800da08 <iprintf>
      while (pcb->unacked != NULL &&
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d022      	beq.n	8008abc <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fb fda6 	bl	80045d0 <lwip_htonl>
 8008a84:	4604      	mov	r4, r0
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a8a:	891b      	ldrh	r3, [r3, #8]
 8008a8c:	461d      	mov	r5, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	899b      	ldrh	r3, [r3, #12]
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fb fd8c 	bl	80045b6 <lwip_htons>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	f003 0303 	and.w	r3, r3, #3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <tcp_receive+0x3a0>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e000      	b.n	8008aae <tcp_receive+0x3a2>
 8008aac:	2300      	movs	r3, #0
 8008aae:	442b      	add	r3, r5
 8008ab0:	18e2      	adds	r2, r4, r3
 8008ab2:	4b4a      	ldr	r3, [pc, #296]	; (8008bdc <tcp_receive+0x4d0>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	dd90      	ble.n	80089de <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d104      	bne.n	8008ace <tcp_receive+0x3c2>
        pcb->rtime = -1;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008aca:	861a      	strh	r2, [r3, #48]	; 0x30
 8008acc:	e002      	b.n	8008ad4 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	76da      	strb	r2, [r3, #27]
 8008ada:	e002      	b.n	8008ae2 <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f001 f921 	bl	8009d24 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8008ae2:	e04f      	b.n	8008b84 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d103      	bne.n	8008b04 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8008b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fc ffb6 	bl	8005a80 <pbuf_clen>
 8008b14:	4603      	mov	r3, r0
 8008b16:	429c      	cmp	r4, r3
 8008b18:	d206      	bcs.n	8008b28 <tcp_receive+0x41c>
 8008b1a:	4b2b      	ldr	r3, [pc, #172]	; (8008bc8 <tcp_receive+0x4bc>)
 8008b1c:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008b20:	492a      	ldr	r1, [pc, #168]	; (8008bcc <tcp_receive+0x4c0>)
 8008b22:	482b      	ldr	r0, [pc, #172]	; (8008bd0 <tcp_receive+0x4c4>)
 8008b24:	f004 ff70 	bl	800da08 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fc ffa7 	bl	8005a80 <pbuf_clen>
 8008b32:	4603      	mov	r3, r0
 8008b34:	461a      	mov	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b3c:	1a9b      	subs	r3, r3, r2
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b48:	891a      	ldrh	r2, [r3, #8]
 8008b4a:	4b22      	ldr	r3, [pc, #136]	; (8008bd4 <tcp_receive+0x4c8>)
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	4413      	add	r3, r2
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	4b20      	ldr	r3, [pc, #128]	; (8008bd4 <tcp_receive+0x4c8>)
 8008b54:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8008b56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b58:	f7fe f8f4 	bl	8006d44 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00e      	beq.n	8008b84 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10a      	bne.n	8008b84 <tcp_receive+0x478>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d106      	bne.n	8008b84 <tcp_receive+0x478>
 8008b76:	4b14      	ldr	r3, [pc, #80]	; (8008bc8 <tcp_receive+0x4bc>)
 8008b78:	f240 42dc 	movw	r2, #1244	; 0x4dc
 8008b7c:	4916      	ldr	r1, [pc, #88]	; (8008bd8 <tcp_receive+0x4cc>)
 8008b7e:	4814      	ldr	r0, [pc, #80]	; (8008bd0 <tcp_receive+0x4c4>)
 8008b80:	f004 ff42 	bl	800da08 <iprintf>
    while (pcb->unsent != NULL &&
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d037      	beq.n	8008bfc <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008b8c:	4b13      	ldr	r3, [pc, #76]	; (8008bdc <tcp_receive+0x4d0>)
 8008b8e:	681c      	ldr	r4, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7fb fd19 	bl	80045d0 <lwip_htonl>
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ba4:	891b      	ldrh	r3, [r3, #8]
 8008ba6:	461e      	mov	r6, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	899b      	ldrh	r3, [r3, #12]
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fb fcff 	bl	80045b6 <lwip_htons>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	f003 0303 	and.w	r3, r3, #3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00e      	beq.n	8008be0 <tcp_receive+0x4d4>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e00d      	b.n	8008be2 <tcp_receive+0x4d6>
 8008bc6:	bf00      	nop
 8008bc8:	0800fa50 	.word	0x0800fa50
 8008bcc:	0800fc90 	.word	0x0800fc90
 8008bd0:	0800fa94 	.word	0x0800fa94
 8008bd4:	20006958 	.word	0x20006958
 8008bd8:	0800fcb8 	.word	0x0800fcb8
 8008bdc:	20006954 	.word	0x20006954
 8008be0:	2300      	movs	r3, #0
 8008be2:	4433      	add	r3, r6
 8008be4:	442b      	add	r3, r5
 8008be6:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	db07      	blt.n	8008bfc <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008bec:	4b8d      	ldr	r3, [pc, #564]	; (8008e24 <tcp_receive+0x718>)
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f77f af74 	ble.w	8008ae4 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008c02:	4b89      	ldr	r3, [pc, #548]	; (8008e28 <tcp_receive+0x71c>)
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	4413      	add	r3, r2
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d052      	beq.n	8008cbe <tcp_receive+0x5b2>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c1c:	4b81      	ldr	r3, [pc, #516]	; (8008e24 <tcp_receive+0x718>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	da4b      	bge.n	8008cbe <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008c26:	4b81      	ldr	r3, [pc, #516]	; (8008e2c <tcp_receive+0x720>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8008c38:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008c40:	10db      	asrs	r3, r3, #3
 8008c42:	b21b      	sxth	r3, r3
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c56:	4413      	add	r3, r2
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	b21a      	sxth	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008c60:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	da03      	bge.n	8008c70 <tcp_receive+0x564>
        m = -m;
 8008c68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c6a:	425b      	negs	r3, r3
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8008c70:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008c78:	109b      	asrs	r3, r3, #2
 8008c7a:	b21b      	sxth	r3, r3
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c8e:	4413      	add	r3, r2
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	b21a      	sxth	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008c9e:	10db      	asrs	r3, r3, #3
 8008ca0:	b21b      	sxth	r3, r3
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	4413      	add	r3, r2
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	b21a      	sxth	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008cbe:	4b5c      	ldr	r3, [pc, #368]	; (8008e30 <tcp_receive+0x724>)
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f000 84f1 	beq.w	80096aa <tcp_receive+0xf9e>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	7d1b      	ldrb	r3, [r3, #20]
 8008ccc:	2b06      	cmp	r3, #6
 8008cce:	f200 84ec 	bhi.w	80096aa <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cd6:	4b57      	ldr	r3, [pc, #348]	; (8008e34 <tcp_receive+0x728>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f2c0 80b8 	blt.w	8008e54 <tcp_receive+0x748>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ce8:	4b51      	ldr	r3, [pc, #324]	; (8008e30 <tcp_receive+0x724>)
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	4619      	mov	r1, r3
 8008cee:	4b51      	ldr	r3, [pc, #324]	; (8008e34 <tcp_receive+0x728>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	440b      	add	r3, r1
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f300 80ab 	bgt.w	8008e54 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008cfe:	4b4e      	ldr	r3, [pc, #312]	; (8008e38 <tcp_receive+0x72c>)
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d08:	4b4a      	ldr	r3, [pc, #296]	; (8008e34 <tcp_receive+0x728>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008d10:	4b49      	ldr	r3, [pc, #292]	; (8008e38 <tcp_receive+0x72c>)
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d106      	bne.n	8008d26 <tcp_receive+0x61a>
 8008d18:	4b48      	ldr	r3, [pc, #288]	; (8008e3c <tcp_receive+0x730>)
 8008d1a:	f240 523c 	movw	r2, #1340	; 0x53c
 8008d1e:	4948      	ldr	r1, [pc, #288]	; (8008e40 <tcp_receive+0x734>)
 8008d20:	4848      	ldr	r0, [pc, #288]	; (8008e44 <tcp_receive+0x738>)
 8008d22:	f004 fe71 	bl	800da08 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	dd06      	ble.n	8008d3e <tcp_receive+0x632>
 8008d30:	4b42      	ldr	r3, [pc, #264]	; (8008e3c <tcp_receive+0x730>)
 8008d32:	f240 523d 	movw	r2, #1341	; 0x53d
 8008d36:	4944      	ldr	r1, [pc, #272]	; (8008e48 <tcp_receive+0x73c>)
 8008d38:	4842      	ldr	r0, [pc, #264]	; (8008e44 <tcp_receive+0x738>)
 8008d3a:	f004 fe65 	bl	800da08 <iprintf>
      if (inseg.p->len < off) {
 8008d3e:	4b3e      	ldr	r3, [pc, #248]	; (8008e38 <tcp_receive+0x72c>)
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	895b      	ldrh	r3, [r3, #10]
 8008d44:	461a      	mov	r2, r3
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	dd3e      	ble.n	8008dca <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008d4c:	4b3a      	ldr	r3, [pc, #232]	; (8008e38 <tcp_receive+0x72c>)
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	891b      	ldrh	r3, [r3, #8]
 8008d52:	461a      	mov	r2, r3
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	4293      	cmp	r3, r2
 8008d58:	dd06      	ble.n	8008d68 <tcp_receive+0x65c>
 8008d5a:	4b38      	ldr	r3, [pc, #224]	; (8008e3c <tcp_receive+0x730>)
 8008d5c:	f240 523f 	movw	r2, #1343	; 0x53f
 8008d60:	493a      	ldr	r1, [pc, #232]	; (8008e4c <tcp_receive+0x740>)
 8008d62:	4838      	ldr	r0, [pc, #224]	; (8008e44 <tcp_receive+0x738>)
 8008d64:	f004 fe50 	bl	800da08 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008d68:	4b33      	ldr	r3, [pc, #204]	; (8008e38 <tcp_receive+0x72c>)
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	891a      	ldrh	r2, [r3, #8]
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8008d76:	e00e      	b.n	8008d96 <tcp_receive+0x68a>
          off -= p->len;
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	895b      	ldrh	r3, [r3, #10]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	1a9b      	subs	r3, r3, r2
 8008d82:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	8a3a      	ldrh	r2, [r7, #16]
 8008d88:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	895b      	ldrh	r3, [r3, #10]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	dcea      	bgt.n	8008d78 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	425b      	negs	r3, r3
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	b21b      	sxth	r3, r3
 8008dac:	4619      	mov	r1, r3
 8008dae:	69b8      	ldr	r0, [r7, #24]
 8008db0:	f7fc fdae 	bl	8005910 <pbuf_header>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d01c      	beq.n	8008df4 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008dba:	4b20      	ldr	r3, [pc, #128]	; (8008e3c <tcp_receive+0x730>)
 8008dbc:	f240 524c 	movw	r2, #1356	; 0x54c
 8008dc0:	4923      	ldr	r1, [pc, #140]	; (8008e50 <tcp_receive+0x744>)
 8008dc2:	4820      	ldr	r0, [pc, #128]	; (8008e44 <tcp_receive+0x738>)
 8008dc4:	f004 fe20 	bl	800da08 <iprintf>
 8008dc8:	e014      	b.n	8008df4 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8008dca:	4b1b      	ldr	r3, [pc, #108]	; (8008e38 <tcp_receive+0x72c>)
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd0:	b292      	uxth	r2, r2
 8008dd2:	4252      	negs	r2, r2
 8008dd4:	b292      	uxth	r2, r2
 8008dd6:	b212      	sxth	r2, r2
 8008dd8:	4611      	mov	r1, r2
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fc fd98 	bl	8005910 <pbuf_header>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d006      	beq.n	8008df4 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008de6:	4b15      	ldr	r3, [pc, #84]	; (8008e3c <tcp_receive+0x730>)
 8008de8:	f240 5251 	movw	r2, #1361	; 0x551
 8008dec:	4918      	ldr	r1, [pc, #96]	; (8008e50 <tcp_receive+0x744>)
 8008dee:	4815      	ldr	r0, [pc, #84]	; (8008e44 <tcp_receive+0x738>)
 8008df0:	f004 fe0a 	bl	800da08 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008df4:	4b10      	ldr	r3, [pc, #64]	; (8008e38 <tcp_receive+0x72c>)
 8008df6:	891a      	ldrh	r2, [r3, #8]
 8008df8:	4b0e      	ldr	r3, [pc, #56]	; (8008e34 <tcp_receive+0x728>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	b299      	uxth	r1, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	1acb      	subs	r3, r1, r3
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	4413      	add	r3, r2
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	4b0a      	ldr	r3, [pc, #40]	; (8008e38 <tcp_receive+0x72c>)
 8008e0e:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e14:	4a07      	ldr	r2, [pc, #28]	; (8008e34 <tcp_receive+0x728>)
 8008e16:	6013      	str	r3, [r2, #0]
 8008e18:	4b07      	ldr	r3, [pc, #28]	; (8008e38 <tcp_receive+0x72c>)
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	4a05      	ldr	r2, [pc, #20]	; (8008e34 <tcp_receive+0x728>)
 8008e1e:	6812      	ldr	r2, [r2, #0]
 8008e20:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008e22:	e025      	b.n	8008e70 <tcp_receive+0x764>
 8008e24:	20006954 	.word	0x20006954
 8008e28:	20006958 	.word	0x20006958
 8008e2c:	20006918 	.word	0x20006918
 8008e30:	2000695a 	.word	0x2000695a
 8008e34:	20006950 	.word	0x20006950
 8008e38:	20006930 	.word	0x20006930
 8008e3c:	0800fa50 	.word	0x0800fa50
 8008e40:	0800fcd8 	.word	0x0800fcd8
 8008e44:	0800fa94 	.word	0x0800fa94
 8008e48:	0800fce8 	.word	0x0800fce8
 8008e4c:	0800fcf8 	.word	0x0800fcf8
 8008e50:	0800fd08 	.word	0x0800fd08
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008e54:	4b87      	ldr	r3, [pc, #540]	; (8009074 <tcp_receive+0x968>)
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	da06      	bge.n	8008e70 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	7e9b      	ldrb	r3, [r3, #26]
 8008e66:	f043 0302 	orr.w	r3, r3, #2
 8008e6a:	b2da      	uxtb	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008e70:	4b80      	ldr	r3, [pc, #512]	; (8009074 <tcp_receive+0x968>)
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f2c0 8410 	blt.w	80096a0 <tcp_receive+0xf94>
 8008e80:	4b7c      	ldr	r3, [pc, #496]	; (8009074 <tcp_receive+0x968>)
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e88:	6879      	ldr	r1, [r7, #4]
 8008e8a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008e8c:	440b      	add	r3, r1
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	3301      	adds	r3, #1
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f300 8404 	bgt.w	80096a0 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e9c:	4b75      	ldr	r3, [pc, #468]	; (8009074 <tcp_receive+0x968>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	f040 8287 	bne.w	80093b4 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008ea6:	4b74      	ldr	r3, [pc, #464]	; (8009078 <tcp_receive+0x96c>)
 8008ea8:	891c      	ldrh	r4, [r3, #8]
 8008eaa:	4b73      	ldr	r3, [pc, #460]	; (8009078 <tcp_receive+0x96c>)
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	899b      	ldrh	r3, [r3, #12]
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fb fb7f 	bl	80045b6 <lwip_htons>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	f003 0303 	and.w	r3, r3, #3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <tcp_receive+0x7ba>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e000      	b.n	8008ec8 <tcp_receive+0x7bc>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	4423      	add	r3, r4
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	4b6b      	ldr	r3, [pc, #428]	; (800907c <tcp_receive+0x970>)
 8008ece:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008ed4:	4b69      	ldr	r3, [pc, #420]	; (800907c <tcp_receive+0x970>)
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d26e      	bcs.n	8008fba <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008edc:	4b66      	ldr	r3, [pc, #408]	; (8009078 <tcp_receive+0x96c>)
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	899b      	ldrh	r3, [r3, #12]
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7fb fb66 	bl	80045b6 <lwip_htons>
 8008eea:	4603      	mov	r3, r0
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d01b      	beq.n	8008f2c <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008ef4:	4b60      	ldr	r3, [pc, #384]	; (8009078 <tcp_receive+0x96c>)
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	899b      	ldrh	r3, [r3, #12]
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008f00:	b29c      	uxth	r4, r3
 8008f02:	4b5d      	ldr	r3, [pc, #372]	; (8009078 <tcp_receive+0x96c>)
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	899b      	ldrh	r3, [r3, #12]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fb fb53 	bl	80045b6 <lwip_htons>
 8008f10:	4603      	mov	r3, r0
 8008f12:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fb fb4c 	bl	80045b6 <lwip_htons>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	461a      	mov	r2, r3
 8008f22:	4b55      	ldr	r3, [pc, #340]	; (8009078 <tcp_receive+0x96c>)
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	4322      	orrs	r2, r4
 8008f28:	b292      	uxth	r2, r2
 8008f2a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008f30:	4b51      	ldr	r3, [pc, #324]	; (8009078 <tcp_receive+0x96c>)
 8008f32:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008f34:	4b50      	ldr	r3, [pc, #320]	; (8009078 <tcp_receive+0x96c>)
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	899b      	ldrh	r3, [r3, #12]
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fb fb3a 	bl	80045b6 <lwip_htons>
 8008f42:	4603      	mov	r3, r0
 8008f44:	f003 0302 	and.w	r3, r3, #2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d005      	beq.n	8008f58 <tcp_receive+0x84c>
            inseg.len -= 1;
 8008f4c:	4b4a      	ldr	r3, [pc, #296]	; (8009078 <tcp_receive+0x96c>)
 8008f4e:	891b      	ldrh	r3, [r3, #8]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	4b48      	ldr	r3, [pc, #288]	; (8009078 <tcp_receive+0x96c>)
 8008f56:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008f58:	4b47      	ldr	r3, [pc, #284]	; (8009078 <tcp_receive+0x96c>)
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	4a46      	ldr	r2, [pc, #280]	; (8009078 <tcp_receive+0x96c>)
 8008f5e:	8912      	ldrh	r2, [r2, #8]
 8008f60:	4611      	mov	r1, r2
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fc fb84 	bl	8005670 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008f68:	4b43      	ldr	r3, [pc, #268]	; (8009078 <tcp_receive+0x96c>)
 8008f6a:	891c      	ldrh	r4, [r3, #8]
 8008f6c:	4b42      	ldr	r3, [pc, #264]	; (8009078 <tcp_receive+0x96c>)
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	899b      	ldrh	r3, [r3, #12]
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7fb fb1e 	bl	80045b6 <lwip_htons>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	f003 0303 	and.w	r3, r3, #3
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d001      	beq.n	8008f88 <tcp_receive+0x87c>
 8008f84:	2301      	movs	r3, #1
 8008f86:	e000      	b.n	8008f8a <tcp_receive+0x87e>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	4423      	add	r3, r4
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	4b3b      	ldr	r3, [pc, #236]	; (800907c <tcp_receive+0x970>)
 8008f90:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008f92:	4b3a      	ldr	r3, [pc, #232]	; (800907c <tcp_receive+0x970>)
 8008f94:	881b      	ldrh	r3, [r3, #0]
 8008f96:	461a      	mov	r2, r3
 8008f98:	4b36      	ldr	r3, [pc, #216]	; (8009074 <tcp_receive+0x968>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	441a      	add	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008fa6:	440b      	add	r3, r1
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d006      	beq.n	8008fba <tcp_receive+0x8ae>
 8008fac:	4b34      	ldr	r3, [pc, #208]	; (8009080 <tcp_receive+0x974>)
 8008fae:	f240 527e 	movw	r2, #1406	; 0x57e
 8008fb2:	4934      	ldr	r1, [pc, #208]	; (8009084 <tcp_receive+0x978>)
 8008fb4:	4834      	ldr	r0, [pc, #208]	; (8009088 <tcp_receive+0x97c>)
 8008fb6:	f004 fd27 	bl	800da08 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 80e1 	beq.w	8009186 <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008fc4:	4b2c      	ldr	r3, [pc, #176]	; (8009078 <tcp_receive+0x96c>)
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	899b      	ldrh	r3, [r3, #12]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fb faf2 	bl	80045b6 <lwip_htons>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d010      	beq.n	8008ffe <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008fdc:	e00a      	b.n	8008ff4 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe2:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8008fee:	68b8      	ldr	r0, [r7, #8]
 8008ff0:	f7fd fea8 	bl	8006d44 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1f0      	bne.n	8008fde <tcp_receive+0x8d2>
 8008ffc:	e0c3      	b.n	8009186 <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009002:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009004:	e04f      	b.n	80090a6 <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	899b      	ldrh	r3, [r3, #12]
 800900c:	b29b      	uxth	r3, r3
 800900e:	4618      	mov	r0, r3
 8009010:	f7fb fad1 	bl	80045b6 <lwip_htons>
 8009014:	4603      	mov	r3, r0
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	d03b      	beq.n	8009096 <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800901e:	4b16      	ldr	r3, [pc, #88]	; (8009078 <tcp_receive+0x96c>)
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	899b      	ldrh	r3, [r3, #12]
 8009024:	b29b      	uxth	r3, r3
 8009026:	4618      	mov	r0, r3
 8009028:	f7fb fac5 	bl	80045b6 <lwip_htons>
 800902c:	4603      	mov	r3, r0
 800902e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009032:	2b00      	cmp	r3, #0
 8009034:	d12f      	bne.n	8009096 <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009036:	4b10      	ldr	r3, [pc, #64]	; (8009078 <tcp_receive+0x96c>)
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	899b      	ldrh	r3, [r3, #12]
 800903c:	b29c      	uxth	r4, r3
 800903e:	2001      	movs	r0, #1
 8009040:	f7fb fab9 	bl	80045b6 <lwip_htons>
 8009044:	4603      	mov	r3, r0
 8009046:	461a      	mov	r2, r3
 8009048:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <tcp_receive+0x96c>)
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	4322      	orrs	r2, r4
 800904e:	b292      	uxth	r2, r2
 8009050:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009052:	4b09      	ldr	r3, [pc, #36]	; (8009078 <tcp_receive+0x96c>)
 8009054:	891c      	ldrh	r4, [r3, #8]
 8009056:	4b08      	ldr	r3, [pc, #32]	; (8009078 <tcp_receive+0x96c>)
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	899b      	ldrh	r3, [r3, #12]
 800905c:	b29b      	uxth	r3, r3
 800905e:	4618      	mov	r0, r3
 8009060:	f7fb faa9 	bl	80045b6 <lwip_htons>
 8009064:	4603      	mov	r3, r0
 8009066:	f003 0303 	and.w	r3, r3, #3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00e      	beq.n	800908c <tcp_receive+0x980>
 800906e:	2301      	movs	r3, #1
 8009070:	e00d      	b.n	800908e <tcp_receive+0x982>
 8009072:	bf00      	nop
 8009074:	20006950 	.word	0x20006950
 8009078:	20006930 	.word	0x20006930
 800907c:	2000695a 	.word	0x2000695a
 8009080:	0800fa50 	.word	0x0800fa50
 8009084:	0800fd1c 	.word	0x0800fd1c
 8009088:	0800fa94 	.word	0x0800fa94
 800908c:	2300      	movs	r3, #0
 800908e:	4423      	add	r3, r4
 8009090:	b29a      	uxth	r2, r3
 8009092:	4b95      	ldr	r3, [pc, #596]	; (80092e8 <tcp_receive+0xbdc>)
 8009094:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8009096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009098:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800909a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 80090a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090a2:	f7fd fe4f 	bl	8006d44 <tcp_seg_free>
            while (next &&
 80090a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00e      	beq.n	80090ca <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80090ac:	4b8e      	ldr	r3, [pc, #568]	; (80092e8 <tcp_receive+0xbdc>)
 80090ae:	881b      	ldrh	r3, [r3, #0]
 80090b0:	461a      	mov	r2, r3
 80090b2:	4b8e      	ldr	r3, [pc, #568]	; (80092ec <tcp_receive+0xbe0>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	441a      	add	r2, r3
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090c0:	8909      	ldrh	r1, [r1, #8]
 80090c2:	440b      	add	r3, r1
 80090c4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	da9d      	bge.n	8009006 <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80090ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d057      	beq.n	8009180 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 80090d0:	4b85      	ldr	r3, [pc, #532]	; (80092e8 <tcp_receive+0xbdc>)
 80090d2:	881b      	ldrh	r3, [r3, #0]
 80090d4:	461a      	mov	r2, r3
 80090d6:	4b85      	ldr	r3, [pc, #532]	; (80092ec <tcp_receive+0xbe0>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	441a      	add	r2, r3
 80090dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	dd4b      	ble.n	8009180 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80090e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	4b7e      	ldr	r3, [pc, #504]	; (80092ec <tcp_receive+0xbe0>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	4b7d      	ldr	r3, [pc, #500]	; (80092f0 <tcp_receive+0xbe4>)
 80090fc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80090fe:	4b7c      	ldr	r3, [pc, #496]	; (80092f0 <tcp_receive+0xbe4>)
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	899b      	ldrh	r3, [r3, #12]
 8009104:	b29b      	uxth	r3, r3
 8009106:	4618      	mov	r0, r3
 8009108:	f7fb fa55 	bl	80045b6 <lwip_htons>
 800910c:	4603      	mov	r3, r0
 800910e:	f003 0302 	and.w	r3, r3, #2
 8009112:	2b00      	cmp	r3, #0
 8009114:	d005      	beq.n	8009122 <tcp_receive+0xa16>
                inseg.len -= 1;
 8009116:	4b76      	ldr	r3, [pc, #472]	; (80092f0 <tcp_receive+0xbe4>)
 8009118:	891b      	ldrh	r3, [r3, #8]
 800911a:	3b01      	subs	r3, #1
 800911c:	b29a      	uxth	r2, r3
 800911e:	4b74      	ldr	r3, [pc, #464]	; (80092f0 <tcp_receive+0xbe4>)
 8009120:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009122:	4b73      	ldr	r3, [pc, #460]	; (80092f0 <tcp_receive+0xbe4>)
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	4a72      	ldr	r2, [pc, #456]	; (80092f0 <tcp_receive+0xbe4>)
 8009128:	8912      	ldrh	r2, [r2, #8]
 800912a:	4611      	mov	r1, r2
 800912c:	4618      	mov	r0, r3
 800912e:	f7fc fa9f 	bl	8005670 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009132:	4b6f      	ldr	r3, [pc, #444]	; (80092f0 <tcp_receive+0xbe4>)
 8009134:	891c      	ldrh	r4, [r3, #8]
 8009136:	4b6e      	ldr	r3, [pc, #440]	; (80092f0 <tcp_receive+0xbe4>)
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	899b      	ldrh	r3, [r3, #12]
 800913c:	b29b      	uxth	r3, r3
 800913e:	4618      	mov	r0, r3
 8009140:	f7fb fa39 	bl	80045b6 <lwip_htons>
 8009144:	4603      	mov	r3, r0
 8009146:	f003 0303 	and.w	r3, r3, #3
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <tcp_receive+0xa46>
 800914e:	2301      	movs	r3, #1
 8009150:	e000      	b.n	8009154 <tcp_receive+0xa48>
 8009152:	2300      	movs	r3, #0
 8009154:	4423      	add	r3, r4
 8009156:	b29a      	uxth	r2, r3
 8009158:	4b63      	ldr	r3, [pc, #396]	; (80092e8 <tcp_receive+0xbdc>)
 800915a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800915c:	4b62      	ldr	r3, [pc, #392]	; (80092e8 <tcp_receive+0xbdc>)
 800915e:	881b      	ldrh	r3, [r3, #0]
 8009160:	461a      	mov	r2, r3
 8009162:	4b62      	ldr	r3, [pc, #392]	; (80092ec <tcp_receive+0xbe0>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	441a      	add	r2, r3
 8009168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	429a      	cmp	r2, r3
 8009170:	d006      	beq.n	8009180 <tcp_receive+0xa74>
 8009172:	4b60      	ldr	r3, [pc, #384]	; (80092f4 <tcp_receive+0xbe8>)
 8009174:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8009178:	495f      	ldr	r1, [pc, #380]	; (80092f8 <tcp_receive+0xbec>)
 800917a:	4860      	ldr	r0, [pc, #384]	; (80092fc <tcp_receive+0xbf0>)
 800917c:	f004 fc44 	bl	800da08 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009184:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009186:	4b58      	ldr	r3, [pc, #352]	; (80092e8 <tcp_receive+0xbdc>)
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	4b57      	ldr	r3, [pc, #348]	; (80092ec <tcp_receive+0xbe0>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	441a      	add	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800919a:	4b53      	ldr	r3, [pc, #332]	; (80092e8 <tcp_receive+0xbdc>)
 800919c:	881b      	ldrh	r3, [r3, #0]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d206      	bcs.n	80091b0 <tcp_receive+0xaa4>
 80091a2:	4b54      	ldr	r3, [pc, #336]	; (80092f4 <tcp_receive+0xbe8>)
 80091a4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80091a8:	4955      	ldr	r1, [pc, #340]	; (8009300 <tcp_receive+0xbf4>)
 80091aa:	4854      	ldr	r0, [pc, #336]	; (80092fc <tcp_receive+0xbf0>)
 80091ac:	f004 fc2c 	bl	800da08 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80091b4:	4b4c      	ldr	r3, [pc, #304]	; (80092e8 <tcp_receive+0xbdc>)
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7fd f973 	bl	80064ac <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80091c6:	4b4a      	ldr	r3, [pc, #296]	; (80092f0 <tcp_receive+0xbe4>)
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	891b      	ldrh	r3, [r3, #8]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d006      	beq.n	80091de <tcp_receive+0xad2>
          recv_data = inseg.p;
 80091d0:	4b47      	ldr	r3, [pc, #284]	; (80092f0 <tcp_receive+0xbe4>)
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	4a4b      	ldr	r2, [pc, #300]	; (8009304 <tcp_receive+0xbf8>)
 80091d6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80091d8:	4b45      	ldr	r3, [pc, #276]	; (80092f0 <tcp_receive+0xbe4>)
 80091da:	2200      	movs	r2, #0
 80091dc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80091de:	4b44      	ldr	r3, [pc, #272]	; (80092f0 <tcp_receive+0xbe4>)
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	899b      	ldrh	r3, [r3, #12]
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fb f9e5 	bl	80045b6 <lwip_htons>
 80091ec:	4603      	mov	r3, r0
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 80b4 	beq.w	8009360 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80091f8:	4b43      	ldr	r3, [pc, #268]	; (8009308 <tcp_receive+0xbfc>)
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	f043 0320 	orr.w	r3, r3, #32
 8009200:	b2da      	uxtb	r2, r3
 8009202:	4b41      	ldr	r3, [pc, #260]	; (8009308 <tcp_receive+0xbfc>)
 8009204:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009206:	e0ab      	b.n	8009360 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800920c:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	4a35      	ldr	r2, [pc, #212]	; (80092ec <tcp_receive+0xbe0>)
 8009218:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	891b      	ldrh	r3, [r3, #8]
 800921e:	461c      	mov	r4, r3
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	899b      	ldrh	r3, [r3, #12]
 8009226:	b29b      	uxth	r3, r3
 8009228:	4618      	mov	r0, r3
 800922a:	f7fb f9c4 	bl	80045b6 <lwip_htons>
 800922e:	4603      	mov	r3, r0
 8009230:	f003 0303 	and.w	r3, r3, #3
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <tcp_receive+0xb30>
 8009238:	2301      	movs	r3, #1
 800923a:	e000      	b.n	800923e <tcp_receive+0xb32>
 800923c:	2300      	movs	r3, #0
 800923e:	191a      	adds	r2, r3, r4
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009244:	441a      	add	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800924e:	461c      	mov	r4, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	891b      	ldrh	r3, [r3, #8]
 8009254:	461d      	mov	r5, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	899b      	ldrh	r3, [r3, #12]
 800925c:	b29b      	uxth	r3, r3
 800925e:	4618      	mov	r0, r3
 8009260:	f7fb f9a9 	bl	80045b6 <lwip_htons>
 8009264:	4603      	mov	r3, r0
 8009266:	f003 0303 	and.w	r3, r3, #3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <tcp_receive+0xb66>
 800926e:	2301      	movs	r3, #1
 8009270:	e000      	b.n	8009274 <tcp_receive+0xb68>
 8009272:	2300      	movs	r3, #0
 8009274:	442b      	add	r3, r5
 8009276:	429c      	cmp	r4, r3
 8009278:	d206      	bcs.n	8009288 <tcp_receive+0xb7c>
 800927a:	4b1e      	ldr	r3, [pc, #120]	; (80092f4 <tcp_receive+0xbe8>)
 800927c:	f240 52dd 	movw	r2, #1501	; 0x5dd
 8009280:	4922      	ldr	r1, [pc, #136]	; (800930c <tcp_receive+0xc00>)
 8009282:	481e      	ldr	r0, [pc, #120]	; (80092fc <tcp_receive+0xbf0>)
 8009284:	f004 fbc0 	bl	800da08 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	891b      	ldrh	r3, [r3, #8]
 800928c:	461c      	mov	r4, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	899b      	ldrh	r3, [r3, #12]
 8009294:	b29b      	uxth	r3, r3
 8009296:	4618      	mov	r0, r3
 8009298:	f7fb f98d 	bl	80045b6 <lwip_htons>
 800929c:	4603      	mov	r3, r0
 800929e:	f003 0303 	and.w	r3, r3, #3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d001      	beq.n	80092aa <tcp_receive+0xb9e>
 80092a6:	2301      	movs	r3, #1
 80092a8:	e000      	b.n	80092ac <tcp_receive+0xba0>
 80092aa:	2300      	movs	r3, #0
 80092ac:	1919      	adds	r1, r3, r4
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80092b2:	b28b      	uxth	r3, r1
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f7fd f8f5 	bl	80064ac <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	891b      	ldrh	r3, [r3, #8]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d028      	beq.n	800931e <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80092cc:	4b0d      	ldr	r3, [pc, #52]	; (8009304 <tcp_receive+0xbf8>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d01d      	beq.n	8009310 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 80092d4:	4b0b      	ldr	r3, [pc, #44]	; (8009304 <tcp_receive+0xbf8>)
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	4619      	mov	r1, r3
 80092de:	4610      	mov	r0, r2
 80092e0:	f7fc fc06 	bl	8005af0 <pbuf_cat>
 80092e4:	e018      	b.n	8009318 <tcp_receive+0xc0c>
 80092e6:	bf00      	nop
 80092e8:	2000695a 	.word	0x2000695a
 80092ec:	20006950 	.word	0x20006950
 80092f0:	20006930 	.word	0x20006930
 80092f4:	0800fa50 	.word	0x0800fa50
 80092f8:	0800fd54 	.word	0x0800fd54
 80092fc:	0800fa94 	.word	0x0800fa94
 8009300:	0800fd90 	.word	0x0800fd90
 8009304:	20006960 	.word	0x20006960
 8009308:	2000695d 	.word	0x2000695d
 800930c:	0800fdb0 	.word	0x0800fdb0
            } else {
              recv_data = cseg->p;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	4a71      	ldr	r2, [pc, #452]	; (80094dc <tcp_receive+0xdd0>)
 8009316:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	899b      	ldrh	r3, [r3, #12]
 8009324:	b29b      	uxth	r3, r3
 8009326:	4618      	mov	r0, r3
 8009328:	f7fb f945 	bl	80045b6 <lwip_htons>
 800932c:	4603      	mov	r3, r0
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00d      	beq.n	8009352 <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009336:	4b6a      	ldr	r3, [pc, #424]	; (80094e0 <tcp_receive+0xdd4>)
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	f043 0320 	orr.w	r3, r3, #32
 800933e:	b2da      	uxtb	r2, r3
 8009340:	4b67      	ldr	r3, [pc, #412]	; (80094e0 <tcp_receive+0xdd4>)
 8009342:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	7d1b      	ldrb	r3, [r3, #20]
 8009348:	2b04      	cmp	r3, #4
 800934a:	d102      	bne.n	8009352 <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2207      	movs	r2, #7
 8009350:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f7fd fcf2 	bl	8006d44 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009364:	2b00      	cmp	r3, #0
 8009366:	d008      	beq.n	800937a <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009374:	429a      	cmp	r2, r3
 8009376:	f43f af47 	beq.w	8009208 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	7e9b      	ldrb	r3, [r3, #26]
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00e      	beq.n	80093a4 <tcp_receive+0xc98>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	7e9b      	ldrb	r3, [r3, #26]
 800938a:	f023 0301 	bic.w	r3, r3, #1
 800938e:	b2da      	uxtb	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	769a      	strb	r2, [r3, #26]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	7e9b      	ldrb	r3, [r3, #26]
 8009398:	f043 0302 	orr.w	r3, r3, #2
 800939c:	b2da      	uxtb	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80093a2:	e181      	b.n	80096a8 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	7e9b      	ldrb	r3, [r3, #26]
 80093a8:	f043 0301 	orr.w	r3, r3, #1
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80093b2:	e179      	b.n	80096a8 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fcb5 	bl	8009d24 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d106      	bne.n	80093d0 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80093c2:	4848      	ldr	r0, [pc, #288]	; (80094e4 <tcp_receive+0xdd8>)
 80093c4:	f7fd fcd6 	bl	8006d74 <tcp_seg_copy>
 80093c8:	4602      	mov	r2, r0
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 80093ce:	e16b      	b.n	80096a8 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 80093d0:	2300      	movs	r3, #0
 80093d2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093da:	e150      	b.n	800967e <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 80093dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	4b41      	ldr	r3, [pc, #260]	; (80094e8 <tcp_receive+0xddc>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d11d      	bne.n	8009426 <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80093ea:	4b3e      	ldr	r3, [pc, #248]	; (80094e4 <tcp_receive+0xdd8>)
 80093ec:	891a      	ldrh	r2, [r3, #8]
 80093ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f0:	891b      	ldrh	r3, [r3, #8]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	f240 8148 	bls.w	8009688 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 80093f8:	483a      	ldr	r0, [pc, #232]	; (80094e4 <tcp_receive+0xdd8>)
 80093fa:	f7fd fcbb 	bl	8006d74 <tcp_seg_copy>
 80093fe:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2b00      	cmp	r3, #0
 8009404:	f000 8142 	beq.w	800968c <tcp_receive+0xf80>
                  if (prev != NULL) {
 8009408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <tcp_receive+0xd0a>
                    prev->next = cseg;
 800940e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	601a      	str	r2, [r3, #0]
 8009414:	e002      	b.n	800941c <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800941c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f7ff f8fe 	bl	8008620 <tcp_oos_insert_segment>
                }
                break;
 8009424:	e132      	b.n	800968c <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009428:	2b00      	cmp	r3, #0
 800942a:	d117      	bne.n	800945c <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800942c:	4b2e      	ldr	r3, [pc, #184]	; (80094e8 <tcp_receive+0xddc>)
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	2b00      	cmp	r3, #0
 800943a:	da57      	bge.n	80094ec <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800943c:	4829      	ldr	r0, [pc, #164]	; (80094e4 <tcp_receive+0xdd8>)
 800943e:	f7fd fc99 	bl	8006d74 <tcp_seg_copy>
 8009442:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 8122 	beq.w	8009690 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8009452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f7ff f8e3 	bl	8008620 <tcp_oos_insert_segment>
                  }
                  break;
 800945a:	e119      	b.n	8009690 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800945c:	4b22      	ldr	r3, [pc, #136]	; (80094e8 <tcp_receive+0xddc>)
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	3b01      	subs	r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	db3e      	blt.n	80094ec <tcp_receive+0xde0>
 800946e:	4b1e      	ldr	r3, [pc, #120]	; (80094e8 <tcp_receive+0xddc>)
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	3301      	adds	r3, #1
 800947c:	2b00      	cmp	r3, #0
 800947e:	dc35      	bgt.n	80094ec <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8009480:	4818      	ldr	r0, [pc, #96]	; (80094e4 <tcp_receive+0xdd8>)
 8009482:	f7fd fc77 	bl	8006d74 <tcp_seg_copy>
 8009486:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 8102 	beq.w	8009694 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009498:	8912      	ldrh	r2, [r2, #8]
 800949a:	441a      	add	r2, r3
 800949c:	4b12      	ldr	r3, [pc, #72]	; (80094e8 <tcp_receive+0xddc>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	dd12      	ble.n	80094cc <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80094a6:	4b10      	ldr	r3, [pc, #64]	; (80094e8 <tcp_receive+0xddc>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	1ad3      	subs	r3, r2, r3
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ba:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80094bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094be:	685a      	ldr	r2, [r3, #4]
 80094c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c2:	891b      	ldrh	r3, [r3, #8]
 80094c4:	4619      	mov	r1, r3
 80094c6:	4610      	mov	r0, r2
 80094c8:	f7fc f8d2 	bl	8005670 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80094cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80094d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f7ff f8a3 	bl	8008620 <tcp_oos_insert_segment>
                  }
                  break;
 80094da:	e0db      	b.n	8009694 <tcp_receive+0xf88>
 80094dc:	20006960 	.word	0x20006960
 80094e0:	2000695d 	.word	0x2000695d
 80094e4:	20006930 	.word	0x20006930
 80094e8:	20006950 	.word	0x20006950
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80094ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f040 80bf 	bne.w	8009674 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80094f6:	4b7c      	ldr	r3, [pc, #496]	; (80096e8 <tcp_receive+0xfdc>)
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009502:	2b00      	cmp	r3, #0
 8009504:	f340 80b6 	ble.w	8009674 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	899b      	ldrh	r3, [r3, #12]
 800950e:	b29b      	uxth	r3, r3
 8009510:	4618      	mov	r0, r3
 8009512:	f7fb f850 	bl	80045b6 <lwip_htons>
 8009516:	4603      	mov	r3, r0
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	2b00      	cmp	r3, #0
 800951e:	f040 80bb 	bne.w	8009698 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009522:	4872      	ldr	r0, [pc, #456]	; (80096ec <tcp_receive+0xfe0>)
 8009524:	f7fd fc26 	bl	8006d74 <tcp_seg_copy>
 8009528:	4602      	mov	r2, r0
 800952a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952c:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800952e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 80b2 	beq.w	800969c <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009540:	8912      	ldrh	r2, [r2, #8]
 8009542:	441a      	add	r2, r3
 8009544:	4b68      	ldr	r3, [pc, #416]	; (80096e8 <tcp_receive+0xfdc>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	1ad3      	subs	r3, r2, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	dd12      	ble.n	8009574 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800954e:	4b66      	ldr	r3, [pc, #408]	; (80096e8 <tcp_receive+0xfdc>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	b29a      	uxth	r2, r3
 8009554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	b29b      	uxth	r3, r3
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	b29a      	uxth	r2, r3
 8009560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009562:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956a:	891b      	ldrh	r3, [r3, #8]
 800956c:	4619      	mov	r1, r3
 800956e:	4610      	mov	r0, r2
 8009570:	f7fc f87e 	bl	8005670 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009574:	4b5e      	ldr	r3, [pc, #376]	; (80096f0 <tcp_receive+0xfe4>)
 8009576:	881b      	ldrh	r3, [r3, #0]
 8009578:	461a      	mov	r2, r3
 800957a:	4b5b      	ldr	r3, [pc, #364]	; (80096e8 <tcp_receive+0xfdc>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	441a      	add	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009584:	6879      	ldr	r1, [r7, #4]
 8009586:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009588:	440b      	add	r3, r1
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	f340 8085 	ble.w	800969c <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	899b      	ldrh	r3, [r3, #12]
 800959a:	b29b      	uxth	r3, r3
 800959c:	4618      	mov	r0, r3
 800959e:	f7fb f80a 	bl	80045b6 <lwip_htons>
 80095a2:	4603      	mov	r3, r0
 80095a4:	f003 0301 	and.w	r3, r3, #1
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d01e      	beq.n	80095ea <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80095ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	899b      	ldrh	r3, [r3, #12]
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80095ba:	b29c      	uxth	r4, r3
 80095bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	899b      	ldrh	r3, [r3, #12]
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fa fff5 	bl	80045b6 <lwip_htons>
 80095cc:	4603      	mov	r3, r0
 80095ce:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fa ffee 	bl	80045b6 <lwip_htons>
 80095da:	4603      	mov	r3, r0
 80095dc:	461a      	mov	r2, r3
 80095de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	4322      	orrs	r2, r4
 80095e6:	b292      	uxth	r2, r2
 80095e8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f4:	4413      	add	r3, r2
 80095f6:	b299      	uxth	r1, r3
 80095f8:	4b3b      	ldr	r3, [pc, #236]	; (80096e8 <tcp_receive+0xfdc>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	1a8a      	subs	r2, r1, r2
 8009604:	b292      	uxth	r2, r2
 8009606:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	891b      	ldrh	r3, [r3, #8]
 8009614:	4619      	mov	r1, r3
 8009616:	4610      	mov	r0, r2
 8009618:	f7fc f82a 	bl	8005670 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800961c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	891c      	ldrh	r4, [r3, #8]
 8009622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	899b      	ldrh	r3, [r3, #12]
 800962a:	b29b      	uxth	r3, r3
 800962c:	4618      	mov	r0, r3
 800962e:	f7fa ffc2 	bl	80045b6 <lwip_htons>
 8009632:	4603      	mov	r3, r0
 8009634:	f003 0303 	and.w	r3, r3, #3
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <tcp_receive+0xf34>
 800963c:	2301      	movs	r3, #1
 800963e:	e000      	b.n	8009642 <tcp_receive+0xf36>
 8009640:	2300      	movs	r3, #0
 8009642:	4423      	add	r3, r4
 8009644:	b29a      	uxth	r2, r3
 8009646:	4b2a      	ldr	r3, [pc, #168]	; (80096f0 <tcp_receive+0xfe4>)
 8009648:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800964a:	4b29      	ldr	r3, [pc, #164]	; (80096f0 <tcp_receive+0xfe4>)
 800964c:	881b      	ldrh	r3, [r3, #0]
 800964e:	461a      	mov	r2, r3
 8009650:	4b25      	ldr	r3, [pc, #148]	; (80096e8 <tcp_receive+0xfdc>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	441a      	add	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965a:	6879      	ldr	r1, [r7, #4]
 800965c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800965e:	440b      	add	r3, r1
 8009660:	429a      	cmp	r2, r3
 8009662:	d01b      	beq.n	800969c <tcp_receive+0xf90>
 8009664:	4b23      	ldr	r3, [pc, #140]	; (80096f4 <tcp_receive+0xfe8>)
 8009666:	f240 627a 	movw	r2, #1658	; 0x67a
 800966a:	4923      	ldr	r1, [pc, #140]	; (80096f8 <tcp_receive+0xfec>)
 800966c:	4823      	ldr	r0, [pc, #140]	; (80096fc <tcp_receive+0xff0>)
 800966e:	f004 f9cb 	bl	800da08 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009672:	e013      	b.n	800969c <tcp_receive+0xf90>
              }
            }
            prev = next;
 8009674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009676:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800967e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009680:	2b00      	cmp	r3, #0
 8009682:	f47f aeab 	bne.w	80093dc <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 8009686:	e00f      	b.n	80096a8 <tcp_receive+0xf9c>
                break;
 8009688:	bf00      	nop
 800968a:	e00d      	b.n	80096a8 <tcp_receive+0xf9c>
                break;
 800968c:	bf00      	nop
 800968e:	e00b      	b.n	80096a8 <tcp_receive+0xf9c>
                  break;
 8009690:	bf00      	nop
 8009692:	e009      	b.n	80096a8 <tcp_receive+0xf9c>
                  break;
 8009694:	bf00      	nop
 8009696:	e007      	b.n	80096a8 <tcp_receive+0xf9c>
                  break;
 8009698:	bf00      	nop
 800969a:	e005      	b.n	80096a8 <tcp_receive+0xf9c>
                break;
 800969c:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800969e:	e003      	b.n	80096a8 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 fb3f 	bl	8009d24 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80096a6:	e01a      	b.n	80096de <tcp_receive+0xfd2>
 80096a8:	e019      	b.n	80096de <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80096aa:	4b0f      	ldr	r3, [pc, #60]	; (80096e8 <tcp_receive+0xfdc>)
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	db0a      	blt.n	80096ce <tcp_receive+0xfc2>
 80096b8:	4b0b      	ldr	r3, [pc, #44]	; (80096e8 <tcp_receive+0xfdc>)
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c0:	6879      	ldr	r1, [r7, #4]
 80096c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80096c4:	440b      	add	r3, r1
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	3301      	adds	r3, #1
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	dd07      	ble.n	80096de <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	7e9b      	ldrb	r3, [r3, #26]
 80096d2:	f043 0302 	orr.w	r3, r3, #2
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	769a      	strb	r2, [r3, #26]
    }
  }
}
 80096dc:	e7ff      	b.n	80096de <tcp_receive+0xfd2>
 80096de:	bf00      	nop
 80096e0:	3734      	adds	r7, #52	; 0x34
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096e6:	bf00      	nop
 80096e8:	20006950 	.word	0x20006950
 80096ec:	20006930 	.word	0x20006930
 80096f0:	2000695a 	.word	0x2000695a
 80096f4:	0800fa50 	.word	0x0800fa50
 80096f8:	0800fd1c 	.word	0x0800fd1c
 80096fc:	0800fa94 	.word	0x0800fa94

08009700 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8009706:	4b17      	ldr	r3, [pc, #92]	; (8009764 <tcp_getoptbyte+0x64>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d005      	beq.n	800971a <tcp_getoptbyte+0x1a>
 800970e:	4b16      	ldr	r3, [pc, #88]	; (8009768 <tcp_getoptbyte+0x68>)
 8009710:	881a      	ldrh	r2, [r3, #0]
 8009712:	4b16      	ldr	r3, [pc, #88]	; (800976c <tcp_getoptbyte+0x6c>)
 8009714:	881b      	ldrh	r3, [r3, #0]
 8009716:	429a      	cmp	r2, r3
 8009718:	d20e      	bcs.n	8009738 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800971a:	4b15      	ldr	r3, [pc, #84]	; (8009770 <tcp_getoptbyte+0x70>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3314      	adds	r3, #20
 8009720:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8009722:	4b11      	ldr	r3, [pc, #68]	; (8009768 <tcp_getoptbyte+0x68>)
 8009724:	881b      	ldrh	r3, [r3, #0]
 8009726:	1c5a      	adds	r2, r3, #1
 8009728:	b291      	uxth	r1, r2
 800972a:	4a0f      	ldr	r2, [pc, #60]	; (8009768 <tcp_getoptbyte+0x68>)
 800972c:	8011      	strh	r1, [r2, #0]
 800972e:	461a      	mov	r2, r3
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	4413      	add	r3, r2
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	e010      	b.n	800975a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8009738:	4b0b      	ldr	r3, [pc, #44]	; (8009768 <tcp_getoptbyte+0x68>)
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	b291      	uxth	r1, r2
 8009740:	4a09      	ldr	r2, [pc, #36]	; (8009768 <tcp_getoptbyte+0x68>)
 8009742:	8011      	strh	r1, [r2, #0]
 8009744:	b2da      	uxtb	r2, r3
 8009746:	4b09      	ldr	r3, [pc, #36]	; (800976c <tcp_getoptbyte+0x6c>)
 8009748:	881b      	ldrh	r3, [r3, #0]
 800974a:	b2db      	uxtb	r3, r3
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8009750:	4b04      	ldr	r3, [pc, #16]	; (8009764 <tcp_getoptbyte+0x64>)
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	79fb      	ldrb	r3, [r7, #7]
 8009756:	4413      	add	r3, r2
 8009758:	781b      	ldrb	r3, [r3, #0]
  }
}
 800975a:	4618      	mov	r0, r3
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	bc80      	pop	{r7}
 8009762:	4770      	bx	lr
 8009764:	20006948 	.word	0x20006948
 8009768:	2000694c 	.word	0x2000694c
 800976c:	20006946 	.word	0x20006946
 8009770:	20006940 	.word	0x20006940

08009774 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800977c:	4b2e      	ldr	r3, [pc, #184]	; (8009838 <tcp_parseopt+0xc4>)
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d055      	beq.n	8009830 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009784:	4b2d      	ldr	r3, [pc, #180]	; (800983c <tcp_parseopt+0xc8>)
 8009786:	2200      	movs	r2, #0
 8009788:	801a      	strh	r2, [r3, #0]
 800978a:	e045      	b.n	8009818 <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 800978c:	f7ff ffb8 	bl	8009700 <tcp_getoptbyte>
 8009790:	4603      	mov	r3, r0
 8009792:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009794:	7bfb      	ldrb	r3, [r7, #15]
 8009796:	2b02      	cmp	r3, #2
 8009798:	d006      	beq.n	80097a8 <tcp_parseopt+0x34>
 800979a:	2b02      	cmp	r3, #2
 800979c:	dc2b      	bgt.n	80097f6 <tcp_parseopt+0x82>
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d041      	beq.n	8009826 <tcp_parseopt+0xb2>
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d127      	bne.n	80097f6 <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 80097a6:	e037      	b.n	8009818 <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80097a8:	f7ff ffaa 	bl	8009700 <tcp_getoptbyte>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b04      	cmp	r3, #4
 80097b0:	d13b      	bne.n	800982a <tcp_parseopt+0xb6>
 80097b2:	4b22      	ldr	r3, [pc, #136]	; (800983c <tcp_parseopt+0xc8>)
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	3301      	adds	r3, #1
 80097b8:	4a1f      	ldr	r2, [pc, #124]	; (8009838 <tcp_parseopt+0xc4>)
 80097ba:	8812      	ldrh	r2, [r2, #0]
 80097bc:	4293      	cmp	r3, r2
 80097be:	da34      	bge.n	800982a <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80097c0:	f7ff ff9e 	bl	8009700 <tcp_getoptbyte>
 80097c4:	4603      	mov	r3, r0
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	021b      	lsls	r3, r3, #8
 80097ca:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80097cc:	f7ff ff98 	bl	8009700 <tcp_getoptbyte>
 80097d0:	4603      	mov	r3, r0
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	89bb      	ldrh	r3, [r7, #12]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80097da:	89bb      	ldrh	r3, [r7, #12]
 80097dc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80097e0:	d804      	bhi.n	80097ec <tcp_parseopt+0x78>
 80097e2:	89bb      	ldrh	r3, [r7, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d001      	beq.n	80097ec <tcp_parseopt+0x78>
 80097e8:	89ba      	ldrh	r2, [r7, #12]
 80097ea:	e001      	b.n	80097f0 <tcp_parseopt+0x7c>
 80097ec:	f44f 7206 	mov.w	r2, #536	; 0x218
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 80097f4:	e010      	b.n	8009818 <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80097f6:	f7ff ff83 	bl	8009700 <tcp_getoptbyte>
 80097fa:	4603      	mov	r3, r0
 80097fc:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 80097fe:	7afb      	ldrb	r3, [r7, #11]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d914      	bls.n	800982e <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8009804:	7afb      	ldrb	r3, [r7, #11]
 8009806:	b29a      	uxth	r2, r3
 8009808:	4b0c      	ldr	r3, [pc, #48]	; (800983c <tcp_parseopt+0xc8>)
 800980a:	881b      	ldrh	r3, [r3, #0]
 800980c:	4413      	add	r3, r2
 800980e:	b29b      	uxth	r3, r3
 8009810:	3b02      	subs	r3, #2
 8009812:	b29a      	uxth	r2, r3
 8009814:	4b09      	ldr	r3, [pc, #36]	; (800983c <tcp_parseopt+0xc8>)
 8009816:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009818:	4b08      	ldr	r3, [pc, #32]	; (800983c <tcp_parseopt+0xc8>)
 800981a:	881a      	ldrh	r2, [r3, #0]
 800981c:	4b06      	ldr	r3, [pc, #24]	; (8009838 <tcp_parseopt+0xc4>)
 800981e:	881b      	ldrh	r3, [r3, #0]
 8009820:	429a      	cmp	r2, r3
 8009822:	d3b3      	bcc.n	800978c <tcp_parseopt+0x18>
 8009824:	e004      	b.n	8009830 <tcp_parseopt+0xbc>
        return;
 8009826:	bf00      	nop
 8009828:	e002      	b.n	8009830 <tcp_parseopt+0xbc>
          return;
 800982a:	bf00      	nop
 800982c:	e000      	b.n	8009830 <tcp_parseopt+0xbc>
          return;
 800982e:	bf00      	nop
      }
    }
  }
}
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	20006944 	.word	0x20006944
 800983c:	2000694c 	.word	0x2000694c

08009840 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009840:	b480      	push	{r7}
 8009842:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009844:	4b05      	ldr	r3, [pc, #20]	; (800985c <tcp_trigger_input_pcb_close+0x1c>)
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	f043 0310 	orr.w	r3, r3, #16
 800984c:	b2da      	uxtb	r2, r3
 800984e:	4b03      	ldr	r3, [pc, #12]	; (800985c <tcp_trigger_input_pcb_close+0x1c>)
 8009850:	701a      	strb	r2, [r3, #0]
}
 8009852:	bf00      	nop
 8009854:	46bd      	mov	sp, r7
 8009856:	bc80      	pop	{r7}
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	2000695d 	.word	0x2000695d

08009860 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	607b      	str	r3, [r7, #4]
 800986a:	460b      	mov	r3, r1
 800986c:	817b      	strh	r3, [r7, #10]
 800986e:	4613      	mov	r3, r2
 8009870:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009872:	897a      	ldrh	r2, [r7, #10]
 8009874:	893b      	ldrh	r3, [r7, #8]
 8009876:	4413      	add	r3, r2
 8009878:	b29b      	uxth	r3, r3
 800987a:	3314      	adds	r3, #20
 800987c:	b29b      	uxth	r3, r3
 800987e:	2200      	movs	r2, #0
 8009880:	4619      	mov	r1, r3
 8009882:	2001      	movs	r0, #1
 8009884:	f7fb fcf0 	bl	8005268 <pbuf_alloc>
 8009888:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d056      	beq.n	800993e <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009890:	897b      	ldrh	r3, [r7, #10]
 8009892:	3313      	adds	r3, #19
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	8952      	ldrh	r2, [r2, #10]
 8009898:	4293      	cmp	r3, r2
 800989a:	db05      	blt.n	80098a8 <tcp_output_alloc_header+0x48>
 800989c:	4b2a      	ldr	r3, [pc, #168]	; (8009948 <tcp_output_alloc_header+0xe8>)
 800989e:	2272      	movs	r2, #114	; 0x72
 80098a0:	492a      	ldr	r1, [pc, #168]	; (800994c <tcp_output_alloc_header+0xec>)
 80098a2:	482b      	ldr	r0, [pc, #172]	; (8009950 <tcp_output_alloc_header+0xf0>)
 80098a4:	f004 f8b0 	bl	800da08 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	8adb      	ldrh	r3, [r3, #22]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fa fe7f 	bl	80045b6 <lwip_htons>
 80098b8:	4603      	mov	r3, r0
 80098ba:	461a      	mov	r2, r3
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	8b1b      	ldrh	r3, [r3, #24]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fa fe76 	bl	80045b6 <lwip_htons>
 80098ca:	4603      	mov	r3, r0
 80098cc:	461a      	mov	r2, r3
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098dc:	4618      	mov	r0, r3
 80098de:	f7fa fe77 	bl	80045d0 <lwip_htonl>
 80098e2:	4602      	mov	r2, r0
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 80098e8:	897b      	ldrh	r3, [r7, #10]
 80098ea:	089b      	lsrs	r3, r3, #2
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	3305      	adds	r3, #5
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	031b      	lsls	r3, r3, #12
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	f043 0310 	orr.w	r3, r3, #16
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7fa fe5a 	bl	80045b6 <lwip_htons>
 8009902:	4603      	mov	r3, r0
 8009904:	461a      	mov	r2, r3
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800990e:	4618      	mov	r0, r3
 8009910:	f7fa fe51 	bl	80045b6 <lwip_htons>
 8009914:	4603      	mov	r3, r0
 8009916:	461a      	mov	r2, r3
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	2200      	movs	r2, #0
 8009920:	741a      	strb	r2, [r3, #16]
 8009922:	2200      	movs	r2, #0
 8009924:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	2200      	movs	r2, #0
 800992a:	749a      	strb	r2, [r3, #18]
 800992c:	2200      	movs	r2, #0
 800992e:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009938:	441a      	add	r2, r3
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800993e:	697b      	ldr	r3, [r7, #20]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3718      	adds	r7, #24
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	0800fdd8 	.word	0x0800fdd8
 800994c:	0800fe0c 	.word	0x0800fe0c
 8009950:	0800fe3c 	.word	0x0800fe3c

08009954 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009954:	b590      	push	{r4, r7, lr}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009960:	2b00      	cmp	r3, #0
 8009962:	d02d      	beq.n	80099c0 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009968:	60fb      	str	r3, [r7, #12]
 800996a:	e002      	b.n	8009972 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1f8      	bne.n	800996c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	899b      	ldrh	r3, [r3, #12]
 8009980:	b29b      	uxth	r3, r3
 8009982:	4618      	mov	r0, r3
 8009984:	f7fa fe17 	bl	80045b6 <lwip_htons>
 8009988:	4603      	mov	r3, r0
 800998a:	f003 0307 	and.w	r3, r3, #7
 800998e:	2b00      	cmp	r3, #0
 8009990:	d116      	bne.n	80099c0 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	899b      	ldrh	r3, [r3, #12]
 8009998:	b29c      	uxth	r4, r3
 800999a:	2001      	movs	r0, #1
 800999c:	f7fa fe0b 	bl	80045b6 <lwip_htons>
 80099a0:	4603      	mov	r3, r0
 80099a2:	461a      	mov	r2, r3
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	4322      	orrs	r2, r4
 80099aa:	b292      	uxth	r2, r2
 80099ac:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	7e9b      	ldrb	r3, [r3, #26]
 80099b2:	f043 0320 	orr.w	r3, r3, #32
 80099b6:	b2da      	uxtb	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	e004      	b.n	80099ca <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80099c0:	2101      	movs	r1, #1
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f898 	bl	8009af8 <tcp_enqueue_flags>
 80099c8:	4603      	mov	r3, r0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3714      	adds	r7, #20
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd90      	pop	{r4, r7, pc}
	...

080099d4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80099d4:	b590      	push	{r4, r7, lr}
 80099d6:	b087      	sub	sp, #28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	603b      	str	r3, [r7, #0]
 80099e0:	4613      	mov	r3, r2
 80099e2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80099e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	f003 0304 	and.w	r3, r3, #4
 80099f0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80099f2:	2003      	movs	r0, #3
 80099f4:	f7fb fa20 	bl	8004e38 <memp_malloc>
 80099f8:	6138      	str	r0, [r7, #16]
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d104      	bne.n	8009a0a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009a00:	68b8      	ldr	r0, [r7, #8]
 8009a02:	f7fb ffa9 	bl	8005958 <pbuf_free>
    return NULL;
 8009a06:	2300      	movs	r3, #0
 8009a08:	e069      	b.n	8009ade <tcp_create_segment+0x10a>
  }
  seg->flags = optflags;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009a10:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	2200      	movs	r2, #0
 8009a16:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	891a      	ldrh	r2, [r3, #8]
 8009a22:	7dfb      	ldrb	r3, [r7, #23]
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d205      	bcs.n	8009a36 <tcp_create_segment+0x62>
 8009a2a:	4b2f      	ldr	r3, [pc, #188]	; (8009ae8 <tcp_create_segment+0x114>)
 8009a2c:	22ba      	movs	r2, #186	; 0xba
 8009a2e:	492f      	ldr	r1, [pc, #188]	; (8009aec <tcp_create_segment+0x118>)
 8009a30:	482f      	ldr	r0, [pc, #188]	; (8009af0 <tcp_create_segment+0x11c>)
 8009a32:	f003 ffe9 	bl	800da08 <iprintf>
  seg->len = p->tot_len - optlen;
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	891a      	ldrh	r2, [r3, #8]
 8009a3a:	7dfb      	ldrb	r3, [r7, #23]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8009a46:	2114      	movs	r1, #20
 8009a48:	68b8      	ldr	r0, [r7, #8]
 8009a4a:	f7fb ff61 	bl	8005910 <pbuf_header>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00c      	beq.n	8009a6e <tcp_create_segment+0x9a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 8009a54:	4b27      	ldr	r3, [pc, #156]	; (8009af4 <tcp_create_segment+0x120>)
 8009a56:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	4b25      	ldr	r3, [pc, #148]	; (8009af4 <tcp_create_segment+0x120>)
 8009a60:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
 8009a64:	6938      	ldr	r0, [r7, #16]
 8009a66:	f7fd f96d 	bl	8006d44 <tcp_seg_free>
    return NULL;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	e037      	b.n	8009ade <tcp_create_segment+0x10a>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	685a      	ldr	r2, [r3, #4]
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	8ada      	ldrh	r2, [r3, #22]
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	68dc      	ldr	r4, [r3, #12]
 8009a80:	4610      	mov	r0, r2
 8009a82:	f7fa fd98 	bl	80045b6 <lwip_htons>
 8009a86:	4603      	mov	r3, r0
 8009a88:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	8b1a      	ldrh	r2, [r3, #24]
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	68dc      	ldr	r4, [r3, #12]
 8009a92:	4610      	mov	r0, r2
 8009a94:	f7fa fd8f 	bl	80045b6 <lwip_htons>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	68dc      	ldr	r4, [r3, #12]
 8009aa0:	6838      	ldr	r0, [r7, #0]
 8009aa2:	f7fa fd95 	bl	80045d0 <lwip_htonl>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009aaa:	7dfb      	ldrb	r3, [r7, #23]
 8009aac:	089b      	lsrs	r3, r3, #2
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	3305      	adds	r3, #5
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	031b      	lsls	r3, r3, #12
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	79fb      	ldrb	r3, [r7, #7]
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	68dc      	ldr	r4, [r3, #12]
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	f7fa fd75 	bl	80045b6 <lwip_htons>
 8009acc:	4603      	mov	r3, r0
 8009ace:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	749a      	strb	r2, [r3, #18]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	74da      	strb	r2, [r3, #19]
  return seg;
 8009adc:	693b      	ldr	r3, [r7, #16]
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	371c      	adds	r7, #28
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd90      	pop	{r4, r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	0800fdd8 	.word	0x0800fdd8
 8009aec:	0800fe64 	.word	0x0800fe64
 8009af0:	0800fe3c 	.word	0x0800fe3c
 8009af4:	20006840 	.word	0x20006840

08009af8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08a      	sub	sp, #40	; 0x28
 8009afc:	af02      	add	r7, sp, #8
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	460b      	mov	r3, r1
 8009b02:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009b04:	2300      	movs	r3, #0
 8009b06:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009b0c:	78fb      	ldrb	r3, [r7, #3]
 8009b0e:	f003 0303 	and.w	r3, r3, #3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d106      	bne.n	8009b24 <tcp_enqueue_flags+0x2c>
 8009b16:	4b7b      	ldr	r3, [pc, #492]	; (8009d04 <tcp_enqueue_flags+0x20c>)
 8009b18:	f240 321a 	movw	r2, #794	; 0x31a
 8009b1c:	497a      	ldr	r1, [pc, #488]	; (8009d08 <tcp_enqueue_flags+0x210>)
 8009b1e:	487b      	ldr	r0, [pc, #492]	; (8009d0c <tcp_enqueue_flags+0x214>)
 8009b20:	f003 ff72 	bl	800da08 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b2a:	2b08      	cmp	r3, #8
 8009b2c:	d806      	bhi.n	8009b3c <tcp_enqueue_flags+0x44>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b34:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d916      	bls.n	8009b6a <tcp_enqueue_flags+0x72>
      ((flags & TCP_FIN) == 0)) {
 8009b3c:	78fb      	ldrb	r3, [r7, #3]
 8009b3e:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d111      	bne.n	8009b6a <tcp_enqueue_flags+0x72>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 8009b46:	4b72      	ldr	r3, [pc, #456]	; (8009d10 <tcp_enqueue_flags+0x218>)
 8009b48:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	4b6f      	ldr	r3, [pc, #444]	; (8009d10 <tcp_enqueue_flags+0x218>)
 8009b52:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	7e9b      	ldrb	r3, [r3, #26]
 8009b5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8009b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b68:	e0c7      	b.n	8009cfa <tcp_enqueue_flags+0x202>
  }

  if (flags & TCP_SYN) {
 8009b6a:	78fb      	ldrb	r3, [r7, #3]
 8009b6c:	f003 0302 	and.w	r3, r3, #2
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <tcp_enqueue_flags+0x80>
    optflags = TF_SEG_OPTS_MSS;
 8009b74:	2301      	movs	r3, #1
 8009b76:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009b78:	7ffb      	ldrb	r3, [r7, #31]
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	f003 0304 	and.w	r3, r3, #4
 8009b82:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009b84:	7dfb      	ldrb	r3, [r7, #23]
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	2200      	movs	r2, #0
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	f7fb fb6b 	bl	8005268 <pbuf_alloc>
 8009b92:	6138      	str	r0, [r7, #16]
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d111      	bne.n	8009bbe <tcp_enqueue_flags+0xc6>
    pcb->flags |= TF_NAGLEMEMERR;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	7e9b      	ldrb	r3, [r3, #26]
 8009b9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 8009ba8:	4b59      	ldr	r3, [pc, #356]	; (8009d10 <tcp_enqueue_flags+0x218>)
 8009baa:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8009bae:	3301      	adds	r3, #1
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	4b57      	ldr	r3, [pc, #348]	; (8009d10 <tcp_enqueue_flags+0x218>)
 8009bb4:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 8009bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bbc:	e09d      	b.n	8009cfa <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	895a      	ldrh	r2, [r3, #10]
 8009bc2:	7dfb      	ldrb	r3, [r7, #23]
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d206      	bcs.n	8009bd8 <tcp_enqueue_flags+0xe0>
 8009bca:	4b4e      	ldr	r3, [pc, #312]	; (8009d04 <tcp_enqueue_flags+0x20c>)
 8009bcc:	f44f 7250 	mov.w	r2, #832	; 0x340
 8009bd0:	4950      	ldr	r1, [pc, #320]	; (8009d14 <tcp_enqueue_flags+0x21c>)
 8009bd2:	484e      	ldr	r0, [pc, #312]	; (8009d0c <tcp_enqueue_flags+0x214>)
 8009bd4:	f003 ff18 	bl	800da08 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8009bdc:	78fa      	ldrb	r2, [r7, #3]
 8009bde:	7ffb      	ldrb	r3, [r7, #31]
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	460b      	mov	r3, r1
 8009be4:	6939      	ldr	r1, [r7, #16]
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f7ff fef4 	bl	80099d4 <tcp_create_segment>
 8009bec:	60f8      	str	r0, [r7, #12]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d111      	bne.n	8009c18 <tcp_enqueue_flags+0x120>
    pcb->flags |= TF_NAGLEMEMERR;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	7e9b      	ldrb	r3, [r3, #26]
 8009bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009bfc:	b2da      	uxtb	r2, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 8009c02:	4b43      	ldr	r3, [pc, #268]	; (8009d10 <tcp_enqueue_flags+0x218>)
 8009c04:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8009c08:	3301      	adds	r3, #1
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	4b40      	ldr	r3, [pc, #256]	; (8009d10 <tcp_enqueue_flags+0x218>)
 8009c0e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 8009c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c16:	e070      	b.n	8009cfa <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	f003 0303 	and.w	r3, r3, #3
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d006      	beq.n	8009c32 <tcp_enqueue_flags+0x13a>
 8009c24:	4b37      	ldr	r3, [pc, #220]	; (8009d04 <tcp_enqueue_flags+0x20c>)
 8009c26:	f240 3249 	movw	r2, #841	; 0x349
 8009c2a:	493b      	ldr	r1, [pc, #236]	; (8009d18 <tcp_enqueue_flags+0x220>)
 8009c2c:	4837      	ldr	r0, [pc, #220]	; (8009d0c <tcp_enqueue_flags+0x214>)
 8009c2e:	f003 feeb 	bl	800da08 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	891b      	ldrh	r3, [r3, #8]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d006      	beq.n	8009c48 <tcp_enqueue_flags+0x150>
 8009c3a:	4b32      	ldr	r3, [pc, #200]	; (8009d04 <tcp_enqueue_flags+0x20c>)
 8009c3c:	f240 324a 	movw	r2, #842	; 0x34a
 8009c40:	4936      	ldr	r1, [pc, #216]	; (8009d1c <tcp_enqueue_flags+0x224>)
 8009c42:	4832      	ldr	r0, [pc, #200]	; (8009d0c <tcp_enqueue_flags+0x214>)
 8009c44:	f003 fee0 	bl	800da08 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d103      	bne.n	8009c58 <tcp_enqueue_flags+0x160>
    pcb->unsent = seg;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	669a      	str	r2, [r3, #104]	; 0x68
 8009c56:	e00d      	b.n	8009c74 <tcp_enqueue_flags+0x17c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c5c:	61bb      	str	r3, [r7, #24]
 8009c5e:	e002      	b.n	8009c66 <tcp_enqueue_flags+0x16e>
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	61bb      	str	r3, [r7, #24]
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1f8      	bne.n	8009c60 <tcp_enqueue_flags+0x168>
    useg->next = seg;
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009c7c:	78fb      	ldrb	r3, [r7, #3]
 8009c7e:	f003 0302 	and.w	r3, r3, #2
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d104      	bne.n	8009c90 <tcp_enqueue_flags+0x198>
 8009c86:	78fb      	ldrb	r3, [r7, #3]
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d004      	beq.n	8009c9a <tcp_enqueue_flags+0x1a2>
    pcb->snd_lbb++;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c94:	1c5a      	adds	r2, r3, #1
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009c9a:	78fb      	ldrb	r3, [r7, #3]
 8009c9c:	f003 0301 	and.w	r3, r3, #1
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d006      	beq.n	8009cb2 <tcp_enqueue_flags+0x1ba>
    pcb->flags |= TF_FIN;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	7e9b      	ldrb	r3, [r3, #26]
 8009ca8:	f043 0320 	orr.w	r3, r3, #32
 8009cac:	b2da      	uxtb	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7fb fee2 	bl	8005a80 <pbuf_clen>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009cc6:	4413      	add	r3, r2
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00e      	beq.n	8009cf8 <tcp_enqueue_flags+0x200>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10a      	bne.n	8009cf8 <tcp_enqueue_flags+0x200>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d106      	bne.n	8009cf8 <tcp_enqueue_flags+0x200>
 8009cea:	4b06      	ldr	r3, [pc, #24]	; (8009d04 <tcp_enqueue_flags+0x20c>)
 8009cec:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009cf0:	490b      	ldr	r1, [pc, #44]	; (8009d20 <tcp_enqueue_flags+0x228>)
 8009cf2:	4806      	ldr	r0, [pc, #24]	; (8009d0c <tcp_enqueue_flags+0x214>)
 8009cf4:	f003 fe88 	bl	800da08 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3720      	adds	r7, #32
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	0800fdd8 	.word	0x0800fdd8
 8009d08:	080100dc 	.word	0x080100dc
 8009d0c:	0800fe3c 	.word	0x0800fe3c
 8009d10:	20006840 	.word	0x20006840
 8009d14:	08010134 	.word	0x08010134
 8009d18:	08010170 	.word	0x08010170
 8009d1c:	08010188 	.word	0x08010188
 8009d20:	080101b4 	.word	0x080101b4

08009d24 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009d24:	b590      	push	{r4, r7, lr}
 8009d26:	b08b      	sub	sp, #44	; 0x2c
 8009d28:	af04      	add	r7, sp, #16
 8009d2a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8009d30:	7dbb      	ldrb	r3, [r7, #22]
 8009d32:	b29c      	uxth	r4, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fa fc49 	bl	80045d0 <lwip_htonl>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2200      	movs	r2, #0
 8009d42:	4621      	mov	r1, r4
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7ff fd8b 	bl	8009860 <tcp_output_alloc_header>
 8009d4a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d109      	bne.n	8009d66 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	7e9b      	ldrb	r3, [r3, #26]
 8009d56:	f043 0303 	orr.w	r3, r3, #3
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8009d60:	f06f 0301 	mvn.w	r3, #1
 8009d64:	e036      	b.n	8009dd4 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	3304      	adds	r3, #4
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f002 fbce 	bl	800c50c <ip4_route>
 8009d70:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d102      	bne.n	8009d7e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8009d78:	23fc      	movs	r3, #252	; 0xfc
 8009d7a:	75fb      	strb	r3, [r7, #23]
 8009d7c:	e012      	b.n	8009da4 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8009d7e:	6879      	ldr	r1, [r7, #4]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	1d18      	adds	r0, r3, #4
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	7a9c      	ldrb	r4, [r3, #10]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	7a5b      	ldrb	r3, [r3, #9]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	9202      	str	r2, [sp, #8]
 8009d90:	2206      	movs	r2, #6
 8009d92:	9201      	str	r2, [sp, #4]
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	4623      	mov	r3, r4
 8009d98:	4602      	mov	r2, r0
 8009d9a:	6938      	ldr	r0, [r7, #16]
 8009d9c:	f002 fdb8 	bl	800c910 <ip4_output_if>
 8009da0:	4603      	mov	r3, r0
 8009da2:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8009da4:	6938      	ldr	r0, [r7, #16]
 8009da6:	f7fb fdd7 	bl	8005958 <pbuf_free>

  if (err != ERR_OK) {
 8009daa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d007      	beq.n	8009dc2 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	7e9b      	ldrb	r3, [r3, #26]
 8009db6:	f043 0303 	orr.w	r3, r3, #3
 8009dba:	b2da      	uxtb	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	769a      	strb	r2, [r3, #26]
 8009dc0:	e006      	b.n	8009dd0 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	7e9b      	ldrb	r3, [r3, #26]
 8009dc6:	f023 0303 	bic.w	r3, r3, #3
 8009dca:	b2da      	uxtb	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8009dd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	371c      	adds	r7, #28
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd90      	pop	{r4, r7, pc}

08009ddc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009ddc:	b5b0      	push	{r4, r5, r7, lr}
 8009dde:	b08a      	sub	sp, #40	; 0x28
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	7d1b      	ldrb	r3, [r3, #20]
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d106      	bne.n	8009dfa <tcp_output+0x1e>
 8009dec:	4b99      	ldr	r3, [pc, #612]	; (800a054 <tcp_output+0x278>)
 8009dee:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8009df2:	4999      	ldr	r1, [pc, #612]	; (800a058 <tcp_output+0x27c>)
 8009df4:	4899      	ldr	r0, [pc, #612]	; (800a05c <tcp_output+0x280>)
 8009df6:	f003 fe07 	bl	800da08 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009dfa:	4b99      	ldr	r3, [pc, #612]	; (800a060 <tcp_output+0x284>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d101      	bne.n	8009e08 <tcp_output+0x2c>
    return ERR_OK;
 8009e04:	2300      	movs	r3, #0
 8009e06:	e1cb      	b.n	800a1a0 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e14:	4293      	cmp	r3, r2
 8009e16:	bf28      	it	cs
 8009e18:	4613      	movcs	r3, r2
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e22:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	7e9b      	ldrb	r3, [r3, #26]
 8009e28:	f003 0302 	and.w	r3, r3, #2
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d017      	beq.n	8009e60 <tcp_output+0x84>
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00f      	beq.n	8009e56 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7fa fbc7 	bl	80045d0 <lwip_htonl>
 8009e42:	4602      	mov	r2, r0
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e4c:	8912      	ldrh	r2, [r2, #8]
 8009e4e:	4413      	add	r3, r2
     (seg == NULL ||
 8009e50:	69ba      	ldr	r2, [r7, #24]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d204      	bcs.n	8009e60 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f7ff ff64 	bl	8009d24 <tcp_send_empty_ack>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	e19f      	b.n	800a1a0 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e64:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d007      	beq.n	8009e7c <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 8009e6c:	e002      	b.n	8009e74 <tcp_output+0x98>
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	623b      	str	r3, [r7, #32]
 8009e74:	6a3b      	ldr	r3, [r7, #32]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1f8      	bne.n	8009e6e <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	3304      	adds	r3, #4
 8009e80:	4618      	mov	r0, r3
 8009e82:	f002 fb43 	bl	800c50c <ip4_route>
 8009e86:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d102      	bne.n	8009e94 <tcp_output+0xb8>
    return ERR_RTE;
 8009e8e:	f06f 0303 	mvn.w	r3, #3
 8009e92:	e185      	b.n	800a1a0 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d003      	beq.n	8009ea2 <tcp_output+0xc6>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d111      	bne.n	8009ec6 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <tcp_output+0xd2>
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	3304      	adds	r3, #4
 8009eac:	e000      	b.n	8009eb0 <tcp_output+0xd4>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d102      	bne.n	8009ebe <tcp_output+0xe2>
      return ERR_RTE;
 8009eb8:	f06f 0303 	mvn.w	r3, #3
 8009ebc:	e170      	b.n	800a1a0 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 813f 	beq.w	800a14c <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fa fb7b 	bl	80045d0 <lwip_htonl>
 8009eda:	4602      	mov	r2, r0
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ee4:	8912      	ldrh	r2, [r2, #8]
 8009ee6:	4413      	add	r3, r2
  if (seg != NULL &&
 8009ee8:	69ba      	ldr	r2, [r7, #24]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	f080 812e 	bcs.w	800a14c <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f000 812a 	beq.w	800a14c <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009efe:	461a      	mov	r2, r3
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	4293      	cmp	r3, r2
 8009f04:	f040 8122 	bne.w	800a14c <tcp_output+0x370>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f040 811d 	bne.w	800a14c <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f040 812c 	bne.w	800a176 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8009f2e:	e122      	b.n	800a176 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	899b      	ldrh	r3, [r3, #12]
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fa fb3c 	bl	80045b6 <lwip_htons>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	f003 0304 	and.w	r3, r3, #4
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d006      	beq.n	8009f56 <tcp_output+0x17a>
 8009f48:	4b42      	ldr	r3, [pc, #264]	; (800a054 <tcp_output+0x278>)
 8009f4a:	f240 4245 	movw	r2, #1093	; 0x445
 8009f4e:	4945      	ldr	r1, [pc, #276]	; (800a064 <tcp_output+0x288>)
 8009f50:	4842      	ldr	r0, [pc, #264]	; (800a05c <tcp_output+0x280>)
 8009f52:	f003 fd59 	bl	800da08 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d01f      	beq.n	8009f9e <tcp_output+0x1c2>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	7e9b      	ldrb	r3, [r3, #26]
 8009f62:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d119      	bne.n	8009f9e <tcp_output+0x1c2>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00b      	beq.n	8009f8a <tcp_output+0x1ae>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d110      	bne.n	8009f9e <tcp_output+0x1c2>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f80:	891a      	ldrh	r2, [r3, #8]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d209      	bcs.n	8009f9e <tcp_output+0x1c2>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d004      	beq.n	8009f9e <tcp_output+0x1c2>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009f9a:	2b08      	cmp	r3, #8
 8009f9c:	d901      	bls.n	8009fa2 <tcp_output+0x1c6>
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e000      	b.n	8009fa4 <tcp_output+0x1c8>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d106      	bne.n	8009fb6 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	7e9b      	ldrb	r3, [r3, #26]
 8009fac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 80e2 	beq.w	800a17a <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	7d1b      	ldrb	r3, [r3, #20]
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d00d      	beq.n	8009fda <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	899b      	ldrh	r3, [r3, #12]
 8009fc4:	b29c      	uxth	r4, r3
 8009fc6:	2010      	movs	r0, #16
 8009fc8:	f7fa faf5 	bl	80045b6 <lwip_htons>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	461a      	mov	r2, r3
 8009fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	4322      	orrs	r2, r4
 8009fd6:	b292      	uxth	r2, r2
 8009fd8:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	6879      	ldr	r1, [r7, #4]
 8009fde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009fe0:	f000 f8e2 	bl	800a1a8 <tcp_output_segment>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d009      	beq.n	800a004 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	7e9b      	ldrb	r3, [r3, #26]
 8009ff4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ff8:	b2da      	uxtb	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	769a      	strb	r2, [r3, #26]
      return err;
 8009ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a002:	e0cd      	b.n	800a1a0 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	7d1b      	ldrb	r3, [r3, #20]
 800a010:	2b02      	cmp	r3, #2
 800a012:	d006      	beq.n	800a022 <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	7e9b      	ldrb	r3, [r3, #26]
 800a018:	f023 0303 	bic.w	r3, r3, #3
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fa fad1 	bl	80045d0 <lwip_htonl>
 800a02e:	4604      	mov	r4, r0
 800a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a032:	891b      	ldrh	r3, [r3, #8]
 800a034:	461d      	mov	r5, r3
 800a036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	899b      	ldrh	r3, [r3, #12]
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fa fab9 	bl	80045b6 <lwip_htons>
 800a044:	4603      	mov	r3, r0
 800a046:	f003 0303 	and.w	r3, r3, #3
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00c      	beq.n	800a068 <tcp_output+0x28c>
 800a04e:	2301      	movs	r3, #1
 800a050:	e00b      	b.n	800a06a <tcp_output+0x28e>
 800a052:	bf00      	nop
 800a054:	0800fdd8 	.word	0x0800fdd8
 800a058:	080101dc 	.word	0x080101dc
 800a05c:	0800fe3c 	.word	0x0800fe3c
 800a060:	20006964 	.word	0x20006964
 800a064:	08010204 	.word	0x08010204
 800a068:	2300      	movs	r3, #0
 800a06a:	442b      	add	r3, r5
 800a06c:	4423      	add	r3, r4
 800a06e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	2b00      	cmp	r3, #0
 800a07a:	da02      	bge.n	800a082 <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	891b      	ldrh	r3, [r3, #8]
 800a086:	461c      	mov	r4, r3
 800a088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	899b      	ldrh	r3, [r3, #12]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	4618      	mov	r0, r3
 800a092:	f7fa fa90 	bl	80045b6 <lwip_htons>
 800a096:	4603      	mov	r3, r0
 800a098:	f003 0303 	and.w	r3, r3, #3
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d001      	beq.n	800a0a4 <tcp_output+0x2c8>
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e000      	b.n	800a0a6 <tcp_output+0x2ca>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	4423      	add	r3, r4
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d049      	beq.n	800a140 <tcp_output+0x364>
      seg->next = NULL;
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d105      	bne.n	800a0c6 <tcp_output+0x2ea>
        pcb->unacked = seg;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0be:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c2:	623b      	str	r3, [r7, #32]
 800a0c4:	e03f      	b.n	800a146 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fa fa7f 	bl	80045d0 <lwip_htonl>
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fa fa78 	bl	80045d0 <lwip_htonl>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	1ae3      	subs	r3, r4, r3
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	da24      	bge.n	800a132 <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	336c      	adds	r3, #108	; 0x6c
 800a0ec:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a0ee:	e002      	b.n	800a0f6 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d011      	beq.n	800a122 <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	4618      	mov	r0, r3
 800a108:	f7fa fa62 	bl	80045d0 <lwip_htonl>
 800a10c:	4604      	mov	r4, r0
 800a10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	4618      	mov	r0, r3
 800a116:	f7fa fa5b 	bl	80045d0 <lwip_htonl>
 800a11a:	4603      	mov	r3, r0
 800a11c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a11e:	2b00      	cmp	r3, #0
 800a120:	dbe6      	blt.n	800a0f0 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a128:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a12e:	601a      	str	r2, [r3, #0]
 800a130:	e009      	b.n	800a146 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a132:	6a3b      	ldr	r3, [r7, #32]
 800a134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a136:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a138:	6a3b      	ldr	r3, [r7, #32]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	623b      	str	r3, [r7, #32]
 800a13e:	e002      	b.n	800a146 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a142:	f7fc fdff 	bl	8006d44 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a14a:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d015      	beq.n	800a17e <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fa fa39 	bl	80045d0 <lwip_htonl>
 800a15e:	4602      	mov	r2, r0
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a168:	8912      	ldrh	r2, [r2, #8]
 800a16a:	4413      	add	r3, r2
  while (seg != NULL &&
 800a16c:	69ba      	ldr	r2, [r7, #24]
 800a16e:	429a      	cmp	r2, r3
 800a170:	f4bf aede 	bcs.w	8009f30 <tcp_output+0x154>
  }
output_done:
 800a174:	e003      	b.n	800a17e <tcp_output+0x3a2>
    goto output_done;
 800a176:	bf00      	nop
 800a178:	e002      	b.n	800a180 <tcp_output+0x3a4>
      break;
 800a17a:	bf00      	nop
 800a17c:	e000      	b.n	800a180 <tcp_output+0x3a4>
output_done:
 800a17e:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a184:	2b00      	cmp	r3, #0
 800a186:	d103      	bne.n	800a190 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	7e9b      	ldrb	r3, [r3, #26]
 800a194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a198:	b2da      	uxtb	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3728      	adds	r7, #40	; 0x28
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bdb0      	pop	{r4, r5, r7, pc}

0800a1a8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a1a8:	b5b0      	push	{r4, r5, r7, lr}
 800a1aa:	b08c      	sub	sp, #48	; 0x30
 800a1ac:	af04      	add	r7, sp, #16
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	89db      	ldrh	r3, [r3, #14]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d001      	beq.n	800a1c2 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	e092      	b.n	800a2e8 <tcp_output_segment+0x140>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	68dc      	ldr	r4, [r3, #12]
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	f7fa fa00 	bl	80045d0 <lwip_htonl>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	68dc      	ldr	r4, [r3, #12]
 800a1dc:	4610      	mov	r0, r2
 800a1de:	f7fa f9ea 	bl	80045b6 <lwip_htons>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a1ee:	441a      	add	r2, r3
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	3314      	adds	r3, #20
 800a1fa:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	7a9b      	ldrb	r3, [r3, #10]
 800a200:	f003 0301 	and.w	r3, r3, #1
 800a204:	2b00      	cmp	r3, #0
 800a206:	d014      	beq.n	800a232 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	3304      	adds	r3, #4
 800a20c:	4619      	mov	r1, r3
 800a20e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a212:	f7fd f829 	bl	8007268 <tcp_eff_send_mss_impl>
 800a216:	4603      	mov	r3, r0
 800a218:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a21a:	8b7b      	ldrh	r3, [r7, #26]
 800a21c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a220:	4618      	mov	r0, r3
 800a222:	f7fa f9d5 	bl	80045d0 <lwip_htonl>
 800a226:	4602      	mov	r2, r0
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	3304      	adds	r3, #4
 800a230:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a238:	2b00      	cmp	r3, #0
 800a23a:	da02      	bge.n	800a242 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	2200      	movs	r2, #0
 800a240:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10c      	bne.n	800a264 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800a24a:	4b29      	ldr	r3, [pc, #164]	; (800a2f0 <tcp_output_segment+0x148>)
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	4618      	mov	r0, r3
 800a25a:	f7fa f9b9 	bl	80045d0 <lwip_htonl>
 800a25e:	4602      	mov	r2, r0
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	68da      	ldr	r2, [r3, #12]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	1ad3      	subs	r3, r2, r3
 800a270:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	8959      	ldrh	r1, [r3, #10]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	8b3a      	ldrh	r2, [r7, #24]
 800a27e:	1a8a      	subs	r2, r1, r2
 800a280:	b292      	uxth	r2, r2
 800a282:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	8919      	ldrh	r1, [r3, #8]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	8b3a      	ldrh	r2, [r7, #24]
 800a290:	1a8a      	subs	r2, r1, r2
 800a292:	b292      	uxth	r2, r2
 800a294:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	68d2      	ldr	r2, [r2, #12]
 800a29e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	741a      	strb	r2, [r3, #16]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	745a      	strb	r2, [r3, #17]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 800a2ac:	4b11      	ldr	r3, [pc, #68]	; (800a2f4 <tcp_output_segment+0x14c>)
 800a2ae:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	4b0f      	ldr	r3, [pc, #60]	; (800a2f4 <tcp_output_segment+0x14c>)
 800a2b8:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6858      	ldr	r0, [r3, #4]
 800a2c0:	68b9      	ldr	r1, [r7, #8]
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	1d1c      	adds	r4, r3, #4
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	7a9d      	ldrb	r5, [r3, #10]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	7a5b      	ldrb	r3, [r3, #9]
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	9202      	str	r2, [sp, #8]
 800a2d2:	2206      	movs	r2, #6
 800a2d4:	9201      	str	r2, [sp, #4]
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	462b      	mov	r3, r5
 800a2da:	4622      	mov	r2, r4
 800a2dc:	f002 fb18 	bl	800c910 <ip4_output_if>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800a2e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3720      	adds	r7, #32
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bdb0      	pop	{r4, r5, r7, pc}
 800a2f0:	20006918 	.word	0x20006918
 800a2f4:	20006840 	.word	0x20006840

0800a2f8 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b08c      	sub	sp, #48	; 0x30
 800a2fc:	af04      	add	r7, sp, #16
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
 800a304:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800a306:	2200      	movs	r2, #0
 800a308:	2114      	movs	r1, #20
 800a30a:	2001      	movs	r0, #1
 800a30c:	f7fa ffac 	bl	8005268 <pbuf_alloc>
 800a310:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d063      	beq.n	800a3e0 <tcp_rst+0xe8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	895b      	ldrh	r3, [r3, #10]
 800a31c:	2b13      	cmp	r3, #19
 800a31e:	d806      	bhi.n	800a32e <tcp_rst+0x36>
 800a320:	4b31      	ldr	r3, [pc, #196]	; (800a3e8 <tcp_rst+0xf0>)
 800a322:	f240 524c 	movw	r2, #1356	; 0x54c
 800a326:	4931      	ldr	r1, [pc, #196]	; (800a3ec <tcp_rst+0xf4>)
 800a328:	4831      	ldr	r0, [pc, #196]	; (800a3f0 <tcp_rst+0xf8>)
 800a32a:	f003 fb6d 	bl	800da08 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800a334:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a336:	4618      	mov	r0, r3
 800a338:	f7fa f93d 	bl	80045b6 <lwip_htons>
 800a33c:	4603      	mov	r3, r0
 800a33e:	461a      	mov	r2, r3
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800a344:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a346:	4618      	mov	r0, r3
 800a348:	f7fa f935 	bl	80045b6 <lwip_htons>
 800a34c:	4603      	mov	r3, r0
 800a34e:	461a      	mov	r2, r3
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f7fa f93b 	bl	80045d0 <lwip_htonl>
 800a35a:	4602      	mov	r2, r0
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800a360:	68b8      	ldr	r0, [r7, #8]
 800a362:	f7fa f935 	bl	80045d0 <lwip_htonl>
 800a366:	4602      	mov	r2, r0
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800a36c:	f245 0014 	movw	r0, #20500	; 0x5014
 800a370:	f7fa f921 	bl	80045b6 <lwip_htons>
 800a374:	4603      	mov	r3, r0
 800a376:	461a      	mov	r2, r3
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	2200      	movs	r2, #0
 800a380:	f042 0208 	orr.w	r2, r2, #8
 800a384:	739a      	strb	r2, [r3, #14]
 800a386:	2200      	movs	r2, #0
 800a388:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800a38c:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	2200      	movs	r2, #0
 800a392:	741a      	strb	r2, [r3, #16]
 800a394:	2200      	movs	r2, #0
 800a396:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	2200      	movs	r2, #0
 800a39c:	749a      	strb	r2, [r3, #18]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
 800a3a2:	4b14      	ldr	r3, [pc, #80]	; (800a3f4 <tcp_rst+0xfc>)
 800a3a4:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	4b11      	ldr	r3, [pc, #68]	; (800a3f4 <tcp_rst+0xfc>)
 800a3ae:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800a3b2:	6838      	ldr	r0, [r7, #0]
 800a3b4:	f002 f8aa 	bl	800c50c <ip4_route>
 800a3b8:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00b      	beq.n	800a3d8 <tcp_rst+0xe0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	9302      	str	r3, [sp, #8]
 800a3c4:	2306      	movs	r3, #6
 800a3c6:	9301      	str	r3, [sp, #4]
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	9300      	str	r3, [sp, #0]
 800a3cc:	23ff      	movs	r3, #255	; 0xff
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	6879      	ldr	r1, [r7, #4]
 800a3d2:	69f8      	ldr	r0, [r7, #28]
 800a3d4:	f002 fa9c 	bl	800c910 <ip4_output_if>
  }
  pbuf_free(p);
 800a3d8:	69f8      	ldr	r0, [r7, #28]
 800a3da:	f7fb fabd 	bl	8005958 <pbuf_free>
 800a3de:	e000      	b.n	800a3e2 <tcp_rst+0xea>
    return;
 800a3e0:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a3e2:	3720      	adds	r7, #32
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	0800fdd8 	.word	0x0800fdd8
 800a3ec:	0800fe0c 	.word	0x0800fe0c
 800a3f0:	0800fe3c 	.word	0x0800fe3c
 800a3f4:	20006840 	.word	0x20006840

0800a3f8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a404:	2b00      	cmp	r3, #0
 800a406:	d029      	beq.n	800a45c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a40c:	60fb      	str	r3, [r7, #12]
 800a40e:	e002      	b.n	800a416 <tcp_rexmit_rto+0x1e>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	60fb      	str	r3, [r7, #12]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d1f8      	bne.n	800a410 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a43a:	2bff      	cmp	r3, #255	; 0xff
 800a43c:	d007      	beq.n	800a44e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a444:	3301      	adds	r3, #1
 800a446:	b2da      	uxtb	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7ff fcc1 	bl	8009ddc <tcp_output>
 800a45a:	e000      	b.n	800a45e <tcp_rexmit_rto+0x66>
    return;
 800a45c:	bf00      	nop
}
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a464:	b590      	push	{r4, r7, lr}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a470:	2b00      	cmp	r3, #0
 800a472:	d043      	beq.n	800a4fc <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a478:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	3368      	adds	r3, #104	; 0x68
 800a486:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a488:	e002      	b.n	800a490 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d011      	beq.n	800a4bc <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7fa f895 	bl	80045d0 <lwip_htonl>
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fa f88e 	bl	80045d0 <lwip_htonl>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	dbe6      	blt.n	800a48a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d103      	bne.n	800a4da <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4e0:	2bff      	cmp	r3, #255	; 0xff
 800a4e2:	d007      	beq.n	800a4f4 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	635a      	str	r2, [r3, #52]	; 0x34
 800a4fa:	e000      	b.n	800a4fe <tcp_rexmit+0x9a>
    return;
 800a4fc:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800a4fe:	3714      	adds	r7, #20
 800a500:	46bd      	mov	sp, r7
 800a502:	bd90      	pop	{r4, r7, pc}

0800a504 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a510:	2b00      	cmp	r3, #0
 800a512:	d041      	beq.n	800a598 <tcp_rexmit_fast+0x94>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	7e9b      	ldrb	r3, [r3, #26]
 800a518:	f003 0304 	and.w	r3, r3, #4
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d13b      	bne.n	800a598 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f7ff ff9f 	bl	800a464 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a532:	4293      	cmp	r3, r2
 800a534:	bf28      	it	cs
 800a536:	4613      	movcs	r3, r2
 800a538:	b29b      	uxth	r3, r3
 800a53a:	0fda      	lsrs	r2, r3, #31
 800a53c:	4413      	add	r3, r2
 800a53e:	105b      	asrs	r3, r3, #1
 800a540:	b29a      	uxth	r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a54e:	461a      	mov	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a554:	005b      	lsls	r3, r3, #1
 800a556:	429a      	cmp	r2, r3
 800a558:	d206      	bcs.n	800a568 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a55e:	005b      	lsls	r3, r3, #1
 800a560:	b29a      	uxth	r2, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a572:	4619      	mov	r1, r3
 800a574:	0049      	lsls	r1, r1, #1
 800a576:	440b      	add	r3, r1
 800a578:	b29b      	uxth	r3, r3
 800a57a:	4413      	add	r3, r2
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	7e9b      	ldrb	r3, [r3, #26]
 800a588:	f043 0304 	orr.w	r3, r3, #4
 800a58c:	b2da      	uxtb	r2, r3
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800a598:	bf00      	nop
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08a      	sub	sp, #40	; 0x28
 800a5a4:	af04      	add	r7, sp, #16
 800a5a6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fa f80e 	bl	80045d0 <lwip_htonl>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7ff f950 	bl	8009860 <tcp_output_alloc_header>
 800a5c0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d102      	bne.n	800a5ce <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a5c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5cc:	e029      	b.n	800a622 <tcp_keepalive+0x82>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	3304      	adds	r3, #4
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f001 ff9a 	bl	800c50c <ip4_route>
 800a5d8:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d102      	bne.n	800a5e6 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800a5e0:	23fc      	movs	r3, #252	; 0xfc
 800a5e2:	75fb      	strb	r3, [r7, #23]
 800a5e4:	e018      	b.n	800a618 <tcp_keepalive+0x78>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
 800a5e6:	4b11      	ldr	r3, [pc, #68]	; (800a62c <tcp_keepalive+0x8c>)
 800a5e8:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	4b0e      	ldr	r3, [pc, #56]	; (800a62c <tcp_keepalive+0x8c>)
 800a5f2:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800a5f6:	6879      	ldr	r1, [r7, #4]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	1d1a      	adds	r2, r3, #4
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	7a98      	ldrb	r0, [r3, #10]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	9302      	str	r3, [sp, #8]
 800a604:	2306      	movs	r3, #6
 800a606:	9301      	str	r3, [sp, #4]
 800a608:	2300      	movs	r3, #0
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	4603      	mov	r3, r0
 800a60e:	6938      	ldr	r0, [r7, #16]
 800a610:	f002 f97e 	bl	800c910 <ip4_output_if>
 800a614:	4603      	mov	r3, r0
 800a616:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800a618:	6938      	ldr	r0, [r7, #16]
 800a61a:	f7fb f99d 	bl	8005958 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a61e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3718      	adds	r7, #24
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	20006840 	.word	0x20006840

0800a630 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a630:	b590      	push	{r4, r7, lr}
 800a632:	b08f      	sub	sp, #60	; 0x3c
 800a634:	af04      	add	r7, sp, #16
 800a636:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a63c:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800a63e:	6a3b      	ldr	r3, [r7, #32]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d102      	bne.n	800a64a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a648:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800a64a:	6a3b      	ldr	r3, [r7, #32]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d101      	bne.n	800a654 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800a650:	2300      	movs	r3, #0
 800a652:	e08d      	b.n	800a770 <tcp_zero_window_probe+0x140>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	899b      	ldrh	r3, [r3, #12]
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7f9 ffaa 	bl	80045b6 <lwip_htons>
 800a662:	4603      	mov	r3, r0
 800a664:	f003 0301 	and.w	r3, r3, #1
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d005      	beq.n	800a678 <tcp_zero_window_probe+0x48>
 800a66c:	6a3b      	ldr	r3, [r7, #32]
 800a66e:	891b      	ldrh	r3, [r3, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <tcp_zero_window_probe+0x48>
 800a674:	2301      	movs	r3, #1
 800a676:	e000      	b.n	800a67a <tcp_zero_window_probe+0x4a>
 800a678:	2300      	movs	r3, #0
 800a67a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a67c:	7ffb      	ldrb	r3, [r7, #31]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	bf0c      	ite	eq
 800a682:	2301      	moveq	r3, #1
 800a684:	2300      	movne	r3, #0
 800a686:	b2db      	uxtb	r3, r3
 800a688:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a68a:	6a3b      	ldr	r3, [r7, #32]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	8bba      	ldrh	r2, [r7, #28]
 800a692:	2100      	movs	r1, #0
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7ff f8e3 	bl	8009860 <tcp_output_alloc_header>
 800a69a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d102      	bne.n	800a6a8 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a6a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6a6:	e063      	b.n	800a770 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800a6ae:	7ffb      	ldrb	r3, [r7, #31]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00e      	beq.n	800a6d2 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	899b      	ldrh	r3, [r3, #12]
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a6be:	b29c      	uxth	r4, r3
 800a6c0:	2011      	movs	r0, #17
 800a6c2:	f7f9 ff78 	bl	80045b6 <lwip_htons>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	4323      	orrs	r3, r4
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	819a      	strh	r2, [r3, #12]
 800a6d0:	e010      	b.n	800a6f4 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	3314      	adds	r3, #20
 800a6d8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	6858      	ldr	r0, [r3, #4]
 800a6de:	6a3b      	ldr	r3, [r7, #32]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	891a      	ldrh	r2, [r3, #8]
 800a6e4:	6a3b      	ldr	r3, [r7, #32]
 800a6e6:	891b      	ldrh	r3, [r3, #8]
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	6939      	ldr	r1, [r7, #16]
 800a6f0:	f7fb fb30 	bl	8005d54 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a6f4:	6a3b      	ldr	r3, [r7, #32]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7f9 ff68 	bl	80045d0 <lwip_htonl>
 800a700:	4603      	mov	r3, r0
 800a702:	3301      	adds	r3, #1
 800a704:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	2b00      	cmp	r3, #0
 800a710:	da02      	bge.n	800a718 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	3304      	adds	r3, #4
 800a71c:	4618      	mov	r0, r3
 800a71e:	f001 fef5 	bl	800c50c <ip4_route>
 800a722:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d103      	bne.n	800a732 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800a72a:	23fc      	movs	r3, #252	; 0xfc
 800a72c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a730:	e019      	b.n	800a766 <tcp_zero_window_probe+0x136>
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    TCP_STATS_INC(tcp.xmit);
 800a732:	4b11      	ldr	r3, [pc, #68]	; (800a778 <tcp_zero_window_probe+0x148>)
 800a734:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800a738:	3301      	adds	r3, #1
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	4b0e      	ldr	r3, [pc, #56]	; (800a778 <tcp_zero_window_probe+0x148>)
 800a73e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a742:	6879      	ldr	r1, [r7, #4]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	1d1a      	adds	r2, r3, #4
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	7a98      	ldrb	r0, [r3, #10]
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	9302      	str	r3, [sp, #8]
 800a750:	2306      	movs	r3, #6
 800a752:	9301      	str	r3, [sp, #4]
 800a754:	2300      	movs	r3, #0
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	4603      	mov	r3, r0
 800a75a:	69b8      	ldr	r0, [r7, #24]
 800a75c:	f002 f8d8 	bl	800c910 <ip4_output_if>
 800a760:	4603      	mov	r3, r0
 800a762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800a766:	69b8      	ldr	r0, [r7, #24]
 800a768:	f7fb f8f6 	bl	8005958 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a76c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a770:	4618      	mov	r0, r3
 800a772:	372c      	adds	r7, #44	; 0x2c
 800a774:	46bd      	mov	sp, r7
 800a776:	bd90      	pop	{r4, r7, pc}
 800a778:	20006840 	.word	0x20006840

0800a77c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a784:	f7fb fbfe 	bl	8005f84 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a788:	4b0a      	ldr	r3, [pc, #40]	; (800a7b4 <tcpip_tcp_timer+0x38>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d103      	bne.n	800a798 <tcpip_tcp_timer+0x1c>
 800a790:	4b09      	ldr	r3, [pc, #36]	; (800a7b8 <tcpip_tcp_timer+0x3c>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d005      	beq.n	800a7a4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a798:	2200      	movs	r2, #0
 800a79a:	4908      	ldr	r1, [pc, #32]	; (800a7bc <tcpip_tcp_timer+0x40>)
 800a79c:	20fa      	movs	r0, #250	; 0xfa
 800a79e:	f000 f86f 	bl	800a880 <sys_timeout>
 800a7a2:	e003      	b.n	800a7ac <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a7a4:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <tcpip_tcp_timer+0x44>)
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	601a      	str	r2, [r3, #0]
  }
}
 800a7aa:	bf00      	nop
 800a7ac:	bf00      	nop
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	20006924 	.word	0x20006924
 800a7b8:	20006928 	.word	0x20006928
 800a7bc:	0800a77d 	.word	0x0800a77d
 800a7c0:	20006970 	.word	0x20006970

0800a7c4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a7c8:	4b0a      	ldr	r3, [pc, #40]	; (800a7f4 <tcp_timer_needed+0x30>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10f      	bne.n	800a7f0 <tcp_timer_needed+0x2c>
 800a7d0:	4b09      	ldr	r3, [pc, #36]	; (800a7f8 <tcp_timer_needed+0x34>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d103      	bne.n	800a7e0 <tcp_timer_needed+0x1c>
 800a7d8:	4b08      	ldr	r3, [pc, #32]	; (800a7fc <tcp_timer_needed+0x38>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d007      	beq.n	800a7f0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a7e0:	4b04      	ldr	r3, [pc, #16]	; (800a7f4 <tcp_timer_needed+0x30>)
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	4905      	ldr	r1, [pc, #20]	; (800a800 <tcp_timer_needed+0x3c>)
 800a7ea:	20fa      	movs	r0, #250	; 0xfa
 800a7ec:	f000 f848 	bl	800a880 <sys_timeout>
  }
}
 800a7f0:	bf00      	nop
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	20006970 	.word	0x20006970
 800a7f8:	20006924 	.word	0x20006924
 800a7fc:	20006928 	.word	0x20006928
 800a800:	0800a77d 	.word	0x0800a77d

0800a804 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	4903      	ldr	r1, [pc, #12]	; (800a82c <cyclic_timer+0x28>)
 800a81e:	4618      	mov	r0, r3
 800a820:	f000 f82e 	bl	800a880 <sys_timeout>
}
 800a824:	bf00      	nop
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	0800a805 	.word	0x0800a805

0800a830 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a836:	2301      	movs	r3, #1
 800a838:	607b      	str	r3, [r7, #4]
 800a83a:	e00e      	b.n	800a85a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800a83c:	4a0d      	ldr	r2, [pc, #52]	; (800a874 <sys_timeouts_init+0x44>)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	00db      	lsls	r3, r3, #3
 800a848:	4a0a      	ldr	r2, [pc, #40]	; (800a874 <sys_timeouts_init+0x44>)
 800a84a:	4413      	add	r3, r2
 800a84c:	461a      	mov	r2, r3
 800a84e:	490a      	ldr	r1, [pc, #40]	; (800a878 <sys_timeouts_init+0x48>)
 800a850:	f000 f816 	bl	800a880 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	3301      	adds	r3, #1
 800a858:	607b      	str	r3, [r7, #4]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d9ed      	bls.n	800a83c <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800a860:	f7f9 fe1c 	bl	800449c <sys_now>
 800a864:	4603      	mov	r3, r0
 800a866:	4a05      	ldr	r2, [pc, #20]	; (800a87c <sys_timeouts_init+0x4c>)
 800a868:	6013      	str	r3, [r2, #0]
}
 800a86a:	bf00      	nop
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	08010ac4 	.word	0x08010ac4
 800a878:	0800a805 	.word	0x0800a805
 800a87c:	2000696c 	.word	0x2000696c

0800a880 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b088      	sub	sp, #32
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a88c:	2006      	movs	r0, #6
 800a88e:	f7fa fad3 	bl	8004e38 <memp_malloc>
 800a892:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10a      	bne.n	800a8b0 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f040 8084 	bne.w	800a9aa <sys_timeout+0x12a>
 800a8a2:	4b44      	ldr	r3, [pc, #272]	; (800a9b4 <sys_timeout+0x134>)
 800a8a4:	22d4      	movs	r2, #212	; 0xd4
 800a8a6:	4944      	ldr	r1, [pc, #272]	; (800a9b8 <sys_timeout+0x138>)
 800a8a8:	4844      	ldr	r0, [pc, #272]	; (800a9bc <sys_timeout+0x13c>)
 800a8aa:	f003 f8ad 	bl	800da08 <iprintf>
    return;
 800a8ae:	e07c      	b.n	800a9aa <sys_timeout+0x12a>
  }

  now = sys_now();
 800a8b0:	f7f9 fdf4 	bl	800449c <sys_now>
 800a8b4:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800a8b6:	4b42      	ldr	r3, [pc, #264]	; (800a9c0 <sys_timeout+0x140>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d105      	bne.n	800a8ca <sys_timeout+0x4a>
    diff = 0;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800a8c2:	4a40      	ldr	r2, [pc, #256]	; (800a9c4 <sys_timeout+0x144>)
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	6013      	str	r3, [r2, #0]
 800a8c8:	e004      	b.n	800a8d4 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800a8ca:	4b3e      	ldr	r3, [pc, #248]	; (800a9c4 <sys_timeout+0x144>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	441a      	add	r2, r3
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a8f0:	4b33      	ldr	r3, [pc, #204]	; (800a9c0 <sys_timeout+0x140>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d103      	bne.n	800a900 <sys_timeout+0x80>
    next_timeout = timeout;
 800a8f8:	4a31      	ldr	r2, [pc, #196]	; (800a9c0 <sys_timeout+0x140>)
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	6013      	str	r3, [r2, #0]
    return;
 800a8fe:	e055      	b.n	800a9ac <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800a900:	4b2f      	ldr	r3, [pc, #188]	; (800a9c0 <sys_timeout+0x140>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d20f      	bcs.n	800a92c <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800a90c:	4b2c      	ldr	r3, [pc, #176]	; (800a9c0 <sys_timeout+0x140>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	6859      	ldr	r1, [r3, #4]
 800a912:	4b2b      	ldr	r3, [pc, #172]	; (800a9c0 <sys_timeout+0x140>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	1a8a      	subs	r2, r1, r2
 800a91a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800a91c:	4b28      	ldr	r3, [pc, #160]	; (800a9c0 <sys_timeout+0x140>)
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a924:	4a26      	ldr	r2, [pc, #152]	; (800a9c0 <sys_timeout+0x140>)
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	6013      	str	r3, [r2, #0]
 800a92a:	e03f      	b.n	800a9ac <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a92c:	4b24      	ldr	r3, [pc, #144]	; (800a9c0 <sys_timeout+0x140>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	61fb      	str	r3, [r7, #28]
 800a932:	e036      	b.n	800a9a2 <sys_timeout+0x122>
      timeout->time -= t->time;
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	685a      	ldr	r2, [r3, #4]
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	1ad2      	subs	r2, r2, r3
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d006      	beq.n	800a958 <sys_timeout+0xd8>
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	685a      	ldr	r2, [r3, #4]
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	429a      	cmp	r2, r3
 800a956:	d921      	bls.n	800a99c <sys_timeout+0x11c>
        if (t->next != NULL) {
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d009      	beq.n	800a974 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6859      	ldr	r1, [r3, #4]
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	685a      	ldr	r2, [r3, #4]
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	1a8a      	subs	r2, r1, r2
 800a970:	605a      	str	r2, [r3, #4]
 800a972:	e00b      	b.n	800a98c <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d206      	bcs.n	800a98c <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800a97e:	4b10      	ldr	r3, [pc, #64]	; (800a9c0 <sys_timeout+0x140>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	685a      	ldr	r2, [r3, #4]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	441a      	add	r2, r3
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	697a      	ldr	r2, [r7, #20]
 800a998:	601a      	str	r2, [r3, #0]
        break;
 800a99a:	e007      	b.n	800a9ac <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	61fb      	str	r3, [r7, #28]
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1c5      	bne.n	800a934 <sys_timeout+0xb4>
 800a9a8:	e000      	b.n	800a9ac <sys_timeout+0x12c>
    return;
 800a9aa:	bf00      	nop
      }
    }
  }
}
 800a9ac:	3720      	adds	r7, #32
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	0801021c 	.word	0x0801021c
 800a9b8:	08010250 	.word	0x08010250
 800a9bc:	08010290 	.word	0x08010290
 800a9c0:	20006968 	.word	0x20006968
 800a9c4:	2000696c 	.word	0x2000696c

0800a9c8 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b086      	sub	sp, #24
 800a9cc:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800a9ce:	4b24      	ldr	r3, [pc, #144]	; (800aa60 <sys_check_timeouts+0x98>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d040      	beq.n	800aa58 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800a9d6:	f7f9 fd61 	bl	800449c <sys_now>
 800a9da:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800a9dc:	4b21      	ldr	r3, [pc, #132]	; (800aa64 <sys_check_timeouts+0x9c>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800a9e6:	4b20      	ldr	r3, [pc, #128]	; (800aa68 <sys_check_timeouts+0xa0>)
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d001      	beq.n	800a9f4 <sys_check_timeouts+0x2c>
 800a9f0:	f7fa fc0a 	bl	8005208 <pbuf_free_ooseq>
      had_one = 0;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800a9f8:	4b19      	ldr	r3, [pc, #100]	; (800aa60 <sys_check_timeouts+0x98>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d026      	beq.n	800aa52 <sys_check_timeouts+0x8a>
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d321      	bcc.n	800aa52 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	685a      	ldr	r2, [r3, #4]
 800aa16:	4b13      	ldr	r3, [pc, #76]	; (800aa64 <sys_check_timeouts+0x9c>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	4a11      	ldr	r2, [pc, #68]	; (800aa64 <sys_check_timeouts+0x9c>)
 800aa1e:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a0c      	ldr	r2, [pc, #48]	; (800aa60 <sys_check_timeouts+0x98>)
 800aa30:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800aa3e:	68b9      	ldr	r1, [r7, #8]
 800aa40:	2006      	movs	r0, #6
 800aa42:	f7fa fa4b 	bl	8004edc <memp_free>
        if (handler != NULL) {
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d002      	beq.n	800aa52 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6838      	ldr	r0, [r7, #0]
 800aa50:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800aa52:	7cfb      	ldrb	r3, [r7, #19]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1c6      	bne.n	800a9e6 <sys_check_timeouts+0x1e>
  }
}
 800aa58:	bf00      	nop
 800aa5a:	3718      	adds	r7, #24
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	20006968 	.word	0x20006968
 800aa64:	2000696c 	.word	0x2000696c
 800aa68:	2000683d 	.word	0x2000683d

0800aa6c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800aa70:	bf00      	nop
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bc80      	pop	{r7}
 800aa76:	4770      	bx	lr

0800aa78 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800aa82:	4b17      	ldr	r3, [pc, #92]	; (800aae0 <udp_new_port+0x68>)
 800aa84:	881b      	ldrh	r3, [r3, #0]
 800aa86:	1c5a      	adds	r2, r3, #1
 800aa88:	b291      	uxth	r1, r2
 800aa8a:	4a15      	ldr	r2, [pc, #84]	; (800aae0 <udp_new_port+0x68>)
 800aa8c:	8011      	strh	r1, [r2, #0]
 800aa8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d103      	bne.n	800aa9e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800aa96:	4b12      	ldr	r3, [pc, #72]	; (800aae0 <udp_new_port+0x68>)
 800aa98:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800aa9c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa9e:	4b11      	ldr	r3, [pc, #68]	; (800aae4 <udp_new_port+0x6c>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	603b      	str	r3, [r7, #0]
 800aaa4:	e011      	b.n	800aaca <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	8a5a      	ldrh	r2, [r3, #18]
 800aaaa:	4b0d      	ldr	r3, [pc, #52]	; (800aae0 <udp_new_port+0x68>)
 800aaac:	881b      	ldrh	r3, [r3, #0]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d108      	bne.n	800aac4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800aab2:	88fb      	ldrh	r3, [r7, #6]
 800aab4:	3301      	adds	r3, #1
 800aab6:	80fb      	strh	r3, [r7, #6]
 800aab8:	88fb      	ldrh	r3, [r7, #6]
 800aaba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aabe:	d3e0      	bcc.n	800aa82 <udp_new_port+0xa>
        return 0;
 800aac0:	2300      	movs	r3, #0
 800aac2:	e007      	b.n	800aad4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	603b      	str	r3, [r7, #0]
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d1ea      	bne.n	800aaa6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800aad0:	4b03      	ldr	r3, [pc, #12]	; (800aae0 <udp_new_port+0x68>)
 800aad2:	881b      	ldrh	r3, [r3, #0]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	bc80      	pop	{r7}
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	20000014 	.word	0x20000014
 800aae4:	20006974 	.word	0x20006974

0800aae8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800aaf6:	79fb      	ldrb	r3, [r7, #7]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d018      	beq.n	800ab2e <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d013      	beq.n	800ab2a <udp_input_local_match+0x42>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00f      	beq.n	800ab2a <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ab0a:	4b13      	ldr	r3, [pc, #76]	; (800ab58 <udp_input_local_match+0x70>)
 800ab0c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ab0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab12:	d00a      	beq.n	800ab2a <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	4b0f      	ldr	r3, [pc, #60]	; (800ab58 <udp_input_local_match+0x70>)
 800ab1a:	695b      	ldr	r3, [r3, #20]
 800ab1c:	405a      	eors	r2, r3
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	3308      	adds	r3, #8
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d110      	bne.n	800ab4c <udp_input_local_match+0x64>
          return 1;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e00f      	b.n	800ab4e <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d009      	beq.n	800ab48 <udp_input_local_match+0x60>
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d005      	beq.n	800ab48 <udp_input_local_match+0x60>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	4b05      	ldr	r3, [pc, #20]	; (800ab58 <udp_input_local_match+0x70>)
 800ab42:	695b      	ldr	r3, [r3, #20]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d101      	bne.n	800ab4c <udp_input_local_match+0x64>
      return 1;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e000      	b.n	800ab4e <udp_input_local_match+0x66>
    }
  }

  return 0;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3714      	adds	r7, #20
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bc80      	pop	{r7}
 800ab56:	4770      	bx	lr
 800ab58:	20003278 	.word	0x20003278

0800ab5c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ab5c:	b590      	push	{r4, r7, lr}
 800ab5e:	b08d      	sub	sp, #52	; 0x34
 800ab60:	af02      	add	r7, sp, #8
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ab66:	2300      	movs	r3, #0
 800ab68:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
 800ab6a:	4b85      	ldr	r3, [pc, #532]	; (800ad80 <udp_input+0x224>)
 800ab6c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800ab70:	3301      	adds	r3, #1
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	4b82      	ldr	r3, [pc, #520]	; (800ad80 <udp_input+0x224>)
 800ab76:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	895b      	ldrh	r3, [r3, #10]
 800ab7e:	2b07      	cmp	r3, #7
 800ab80:	d813      	bhi.n	800abaa <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 800ab82:	4b7f      	ldr	r3, [pc, #508]	; (800ad80 <udp_input+0x224>)
 800ab84:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ab88:	3301      	adds	r3, #1
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	4b7c      	ldr	r3, [pc, #496]	; (800ad80 <udp_input+0x224>)
 800ab8e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 800ab92:	4b7b      	ldr	r3, [pc, #492]	; (800ad80 <udp_input+0x224>)
 800ab94:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800ab98:	3301      	adds	r3, #1
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	4b78      	ldr	r3, [pc, #480]	; (800ad80 <udp_input+0x224>)
 800ab9e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f7fa fed8 	bl	8005958 <pbuf_free>
    goto end;
 800aba8:	e0e5      	b.n	800ad76 <udp_input+0x21a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800abb0:	4b74      	ldr	r3, [pc, #464]	; (800ad84 <udp_input+0x228>)
 800abb2:	695b      	ldr	r3, [r3, #20]
 800abb4:	4a73      	ldr	r2, [pc, #460]	; (800ad84 <udp_input+0x228>)
 800abb6:	6812      	ldr	r2, [r2, #0]
 800abb8:	4611      	mov	r1, r2
 800abba:	4618      	mov	r0, r3
 800abbc:	f001 ff8c 	bl	800cad8 <ip4_addr_isbroadcast_u32>
 800abc0:	4603      	mov	r3, r0
 800abc2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	881b      	ldrh	r3, [r3, #0]
 800abc8:	b29b      	uxth	r3, r3
 800abca:	4618      	mov	r0, r3
 800abcc:	f7f9 fcf3 	bl	80045b6 <lwip_htons>
 800abd0:	4603      	mov	r3, r0
 800abd2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	885b      	ldrh	r3, [r3, #2]
 800abd8:	b29b      	uxth	r3, r3
 800abda:	4618      	mov	r0, r3
 800abdc:	f7f9 fceb 	bl	80045b6 <lwip_htons>
 800abe0:	4603      	mov	r3, r0
 800abe2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800abe4:	2300      	movs	r3, #0
 800abe6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800abe8:	2300      	movs	r3, #0
 800abea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800abec:	2300      	movs	r3, #0
 800abee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800abf0:	4b65      	ldr	r3, [pc, #404]	; (800ad88 <udp_input+0x22c>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	627b      	str	r3, [r7, #36]	; 0x24
 800abf6:	e044      	b.n	800ac82 <udp_input+0x126>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800abf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfa:	8a5b      	ldrh	r3, [r3, #18]
 800abfc:	89fa      	ldrh	r2, [r7, #14]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d13a      	bne.n	800ac78 <udp_input+0x11c>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ac02:	7cfb      	ldrb	r3, [r7, #19]
 800ac04:	461a      	mov	r2, r3
 800ac06:	6839      	ldr	r1, [r7, #0]
 800ac08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac0a:	f7ff ff6d 	bl	800aae8 <udp_input_local_match>
 800ac0e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d031      	beq.n	800ac78 <udp_input+0x11c>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac16:	7c1b      	ldrb	r3, [r3, #16]
 800ac18:	f003 0304 	and.w	r3, r3, #4
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d104      	bne.n	800ac2a <udp_input+0xce>
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <udp_input+0xce>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800ac26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac28:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2c:	8a9b      	ldrh	r3, [r3, #20]
 800ac2e:	8a3a      	ldrh	r2, [r7, #16]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d121      	bne.n	800ac78 <udp_input+0x11c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d005      	beq.n	800ac48 <udp_input+0xec>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ac3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3e:	685a      	ldr	r2, [r3, #4]
 800ac40:	4b50      	ldr	r3, [pc, #320]	; (800ad84 <udp_input+0x228>)
 800ac42:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d117      	bne.n	800ac78 <udp_input+0x11c>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ac48:	6a3b      	ldr	r3, [r7, #32]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00b      	beq.n	800ac66 <udp_input+0x10a>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac50:	68da      	ldr	r2, [r3, #12]
 800ac52:	6a3b      	ldr	r3, [r7, #32]
 800ac54:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ac56:	4b4c      	ldr	r3, [pc, #304]	; (800ad88 <udp_input+0x22c>)
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5c:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ac5e:	4a4a      	ldr	r2, [pc, #296]	; (800ad88 <udp_input+0x22c>)
 800ac60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac62:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ac64:	e010      	b.n	800ac88 <udp_input+0x12c>
          UDP_STATS_INC(udp.cachehit);
 800ac66:	4b46      	ldr	r3, [pc, #280]	; (800ad80 <udp_input+0x224>)
 800ac68:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	4b43      	ldr	r3, [pc, #268]	; (800ad80 <udp_input+0x224>)
 800ac72:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        break;
 800ac76:	e007      	b.n	800ac88 <udp_input+0x12c>
      }
    }

    prev = pcb;
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	627b      	str	r3, [r7, #36]	; 0x24
 800ac82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1b7      	bne.n	800abf8 <udp_input+0x9c>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d101      	bne.n	800ac92 <udp_input+0x136>
    pcb = uncon_pcb;
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ac92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d002      	beq.n	800ac9e <udp_input+0x142>
    for_us = 1;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	76fb      	strb	r3, [r7, #27]
 800ac9c:	e00a      	b.n	800acb4 <udp_input+0x158>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	3304      	adds	r3, #4
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	4b37      	ldr	r3, [pc, #220]	; (800ad84 <udp_input+0x228>)
 800aca6:	695b      	ldr	r3, [r3, #20]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	bf0c      	ite	eq
 800acac:	2301      	moveq	r3, #1
 800acae:	2300      	movne	r3, #0
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800acb4:	7efb      	ldrb	r3, [r7, #27]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d05a      	beq.n	800ad70 <udp_input+0x214>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800acba:	f06f 0107 	mvn.w	r1, #7
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f7fa fe26 	bl	8005910 <pbuf_header>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d012      	beq.n	800acf0 <udp_input+0x194>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800acca:	4b30      	ldr	r3, [pc, #192]	; (800ad8c <udp_input+0x230>)
 800accc:	f240 1255 	movw	r2, #341	; 0x155
 800acd0:	492f      	ldr	r1, [pc, #188]	; (800ad90 <udp_input+0x234>)
 800acd2:	4830      	ldr	r0, [pc, #192]	; (800ad94 <udp_input+0x238>)
 800acd4:	f002 fe98 	bl	800da08 <iprintf>
      UDP_STATS_INC(udp.drop);
 800acd8:	4b29      	ldr	r3, [pc, #164]	; (800ad80 <udp_input+0x224>)
 800acda:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800acde:	3301      	adds	r3, #1
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	4b27      	ldr	r3, [pc, #156]	; (800ad80 <udp_input+0x224>)
 800ace4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f7fa fe35 	bl	8005958 <pbuf_free>
      goto end;
 800acee:	e042      	b.n	800ad76 <udp_input+0x21a>
    }

    if (pcb != NULL) {
 800acf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d012      	beq.n	800ad1c <udp_input+0x1c0>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800acf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf8:	699b      	ldr	r3, [r3, #24]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00a      	beq.n	800ad14 <udp_input+0x1b8>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800acfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad00:	699c      	ldr	r4, [r3, #24]
 800ad02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad04:	69d8      	ldr	r0, [r3, #28]
 800ad06:	8a3b      	ldrh	r3, [r7, #16]
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	4b23      	ldr	r3, [pc, #140]	; (800ad98 <udp_input+0x23c>)
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad10:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ad12:	e031      	b.n	800ad78 <udp_input+0x21c>
        pbuf_free(p);
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7fa fe1f 	bl	8005958 <pbuf_free>
        goto end;
 800ad1a:	e02c      	b.n	800ad76 <udp_input+0x21a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ad1c:	7cfb      	ldrb	r3, [r7, #19]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d112      	bne.n	800ad48 <udp_input+0x1ec>
 800ad22:	4b18      	ldr	r3, [pc, #96]	; (800ad84 <udp_input+0x228>)
 800ad24:	695b      	ldr	r3, [r3, #20]
 800ad26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad2a:	2be0      	cmp	r3, #224	; 0xe0
 800ad2c:	d00c      	beq.n	800ad48 <udp_input+0x1ec>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ad2e:	4b15      	ldr	r3, [pc, #84]	; (800ad84 <udp_input+0x228>)
 800ad30:	899b      	ldrh	r3, [r3, #12]
 800ad32:	3308      	adds	r3, #8
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	b21b      	sxth	r3, r3
 800ad38:	4619      	mov	r1, r3
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7fa fdfa 	bl	8005934 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ad40:	2103      	movs	r1, #3
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f001 fb50 	bl	800c3e8 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 800ad48:	4b0d      	ldr	r3, [pc, #52]	; (800ad80 <udp_input+0x224>)
 800ad4a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800ad4e:	3301      	adds	r3, #1
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	4b0b      	ldr	r3, [pc, #44]	; (800ad80 <udp_input+0x224>)
 800ad54:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
 800ad58:	4b09      	ldr	r3, [pc, #36]	; (800ad80 <udp_input+0x224>)
 800ad5a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800ad5e:	3301      	adds	r3, #1
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	4b07      	ldr	r3, [pc, #28]	; (800ad80 <udp_input+0x224>)
 800ad64:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      pbuf_free(p);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f7fa fdf5 	bl	8005958 <pbuf_free>
  return;
 800ad6e:	e003      	b.n	800ad78 <udp_input+0x21c>
    pbuf_free(p);
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f7fa fdf1 	bl	8005958 <pbuf_free>
  return;
 800ad76:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ad78:	372c      	adds	r7, #44	; 0x2c
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd90      	pop	{r4, r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	20006840 	.word	0x20006840
 800ad84:	20003278 	.word	0x20003278
 800ad88:	20006974 	.word	0x20006974
 800ad8c:	080102b8 	.word	0x080102b8
 800ad90:	080102e8 	.word	0x080102e8
 800ad94:	080102fc 	.word	0x080102fc
 800ad98:	20003288 	.word	0x20003288

0800ad9c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d102      	bne.n	800adb2 <udp_send+0x16>
    return ERR_VAL;
 800adac:	f06f 0305 	mvn.w	r3, #5
 800adb0:	e008      	b.n	800adc4 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	1d1a      	adds	r2, r3, #4
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	8a9b      	ldrh	r3, [r3, #20]
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 f805 	bl	800adcc <udp_sendto>
 800adc2:	4603      	mov	r3, r0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3708      	adds	r7, #8
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b088      	sub	sp, #32
 800add0:	af02      	add	r7, sp, #8
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
 800add8:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d002      	beq.n	800adea <udp_sendto+0x1e>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d102      	bne.n	800adf0 <udp_sendto+0x24>
    return ERR_VAL;
 800adea:	f06f 0305 	mvn.w	r3, #5
 800adee:	e01b      	b.n	800ae28 <udp_sendto+0x5c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800adf0:	6978      	ldr	r0, [r7, #20]
 800adf2:	f001 fb8b 	bl	800c50c <ip4_route>
 800adf6:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d10a      	bne.n	800ae14 <udp_sendto+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 800adfe:	4b0c      	ldr	r3, [pc, #48]	; (800ae30 <udp_sendto+0x64>)
 800ae00:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ae04:	3301      	adds	r3, #1
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	4b09      	ldr	r3, [pc, #36]	; (800ae30 <udp_sendto+0x64>)
 800ae0a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    return ERR_RTE;
 800ae0e:	f06f 0303 	mvn.w	r3, #3
 800ae12:	e009      	b.n	800ae28 <udp_sendto+0x5c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800ae14:	887a      	ldrh	r2, [r7, #2]
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	9300      	str	r3, [sp, #0]
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	68b9      	ldr	r1, [r7, #8]
 800ae20:	68f8      	ldr	r0, [r7, #12]
 800ae22:	f000 f807 	bl	800ae34 <udp_sendto_if>
 800ae26:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3718      	adds	r7, #24
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	20006840 	.word	0x20006840

0800ae34 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b088      	sub	sp, #32
 800ae38:	af02      	add	r7, sp, #8
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	607a      	str	r2, [r7, #4]
 800ae40:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d002      	beq.n	800ae4e <udp_sendto_if+0x1a>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d102      	bne.n	800ae54 <udp_sendto_if+0x20>
    return ERR_VAL;
 800ae4e:	f06f 0305 	mvn.w	r3, #5
 800ae52:	e028      	b.n	800aea6 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d009      	beq.n	800ae6e <udp_sendto_if+0x3a>
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d005      	beq.n	800ae6e <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ae6a:	2be0      	cmp	r3, #224	; 0xe0
 800ae6c:	d103      	bne.n	800ae76 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800ae6e:	6a3b      	ldr	r3, [r7, #32]
 800ae70:	3304      	adds	r3, #4
 800ae72:	617b      	str	r3, [r7, #20]
 800ae74:	e00b      	b.n	800ae8e <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	6a3b      	ldr	r3, [r7, #32]
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d002      	beq.n	800ae8a <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800ae84:	f06f 0303 	mvn.w	r3, #3
 800ae88:	e00d      	b.n	800aea6 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800ae8e:	887a      	ldrh	r2, [r7, #2]
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	9301      	str	r3, [sp, #4]
 800ae94:	6a3b      	ldr	r3, [r7, #32]
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	68b9      	ldr	r1, [r7, #8]
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f000 f806 	bl	800aeb0 <udp_sendto_if_src>
 800aea4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3718      	adds	r7, #24
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
	...

0800aeb0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b08c      	sub	sp, #48	; 0x30
 800aeb4:	af04      	add	r7, sp, #16
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d002      	beq.n	800aeca <udp_sendto_if_src+0x1a>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d102      	bne.n	800aed0 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800aeca:	f06f 0305 	mvn.w	r3, #5
 800aece:	e086      	b.n	800afde <udp_sendto_if_src+0x12e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	8a5b      	ldrh	r3, [r3, #18]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10f      	bne.n	800aef8 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800aed8:	68f9      	ldr	r1, [r7, #12]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	8a5b      	ldrh	r3, [r3, #18]
 800aede:	461a      	mov	r2, r3
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f000 f889 	bl	800aff8 <udp_bind>
 800aee6:	4603      	mov	r3, r0
 800aee8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800aeea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d002      	beq.n	800aef8 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800aef2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800aef6:	e072      	b.n	800afde <udp_sendto_if_src+0x12e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800aef8:	2108      	movs	r1, #8
 800aefa:	68b8      	ldr	r0, [r7, #8]
 800aefc:	f7fa fd08 	bl	8005910 <pbuf_header>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d014      	beq.n	800af30 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800af06:	2200      	movs	r2, #0
 800af08:	2108      	movs	r1, #8
 800af0a:	2001      	movs	r0, #1
 800af0c:	f7fa f9ac 	bl	8005268 <pbuf_alloc>
 800af10:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d102      	bne.n	800af1e <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800af18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af1c:	e05f      	b.n	800afde <udp_sendto_if_src+0x12e>
    }
    if (p->tot_len != 0) {
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	891b      	ldrh	r3, [r3, #8]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d006      	beq.n	800af34 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800af26:	68b9      	ldr	r1, [r7, #8]
 800af28:	69f8      	ldr	r0, [r7, #28]
 800af2a:	f7fa fe37 	bl	8005b9c <pbuf_chain>
 800af2e:	e001      	b.n	800af34 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	895b      	ldrh	r3, [r3, #10]
 800af38:	2b07      	cmp	r3, #7
 800af3a:	d806      	bhi.n	800af4a <udp_sendto_if_src+0x9a>
 800af3c:	4b2a      	ldr	r3, [pc, #168]	; (800afe8 <udp_sendto_if_src+0x138>)
 800af3e:	f240 22db 	movw	r2, #731	; 0x2db
 800af42:	492a      	ldr	r1, [pc, #168]	; (800afec <udp_sendto_if_src+0x13c>)
 800af44:	482a      	ldr	r0, [pc, #168]	; (800aff0 <udp_sendto_if_src+0x140>)
 800af46:	f002 fd5f 	bl	800da08 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	8a5b      	ldrh	r3, [r3, #18]
 800af54:	4618      	mov	r0, r3
 800af56:	f7f9 fb2e 	bl	80045b6 <lwip_htons>
 800af5a:	4603      	mov	r3, r0
 800af5c:	461a      	mov	r2, r3
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800af62:	887b      	ldrh	r3, [r7, #2]
 800af64:	4618      	mov	r0, r3
 800af66:	f7f9 fb26 	bl	80045b6 <lwip_htons>
 800af6a:	4603      	mov	r3, r0
 800af6c:	461a      	mov	r2, r3
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	2200      	movs	r2, #0
 800af76:	719a      	strb	r2, [r3, #6]
 800af78:	2200      	movs	r2, #0
 800af7a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	891b      	ldrh	r3, [r3, #8]
 800af80:	4618      	mov	r0, r3
 800af82:	f7f9 fb18 	bl	80045b6 <lwip_htons>
 800af86:	4603      	mov	r3, r0
 800af88:	461a      	mov	r2, r3
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800af8e:	2311      	movs	r3, #17
 800af90:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	7a9b      	ldrb	r3, [r3, #10]
 800af96:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	7a5b      	ldrb	r3, [r3, #9]
 800af9c:	7cb9      	ldrb	r1, [r7, #18]
 800af9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afa0:	9202      	str	r2, [sp, #8]
 800afa2:	7cfa      	ldrb	r2, [r7, #19]
 800afa4:	9201      	str	r2, [sp, #4]
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	460b      	mov	r3, r1
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afae:	69f8      	ldr	r0, [r7, #28]
 800afb0:	f001 fcd8 	bl	800c964 <ip4_output_if_src>
 800afb4:	4603      	mov	r3, r0
 800afb6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800afb8:	69fa      	ldr	r2, [r7, #28]
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d004      	beq.n	800afca <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800afc0:	69f8      	ldr	r0, [r7, #28]
 800afc2:	f7fa fcc9 	bl	8005958 <pbuf_free>
    q = NULL;
 800afc6:	2300      	movs	r3, #0
 800afc8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 800afca:	4b0a      	ldr	r3, [pc, #40]	; (800aff4 <udp_sendto_if_src+0x144>)
 800afcc:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800afd0:	3301      	adds	r3, #1
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	4b07      	ldr	r3, [pc, #28]	; (800aff4 <udp_sendto_if_src+0x144>)
 800afd6:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
  return err;
 800afda:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3720      	adds	r7, #32
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	080102b8 	.word	0x080102b8
 800afec:	08010324 	.word	0x08010324
 800aff0:	080102fc 	.word	0x080102fc
 800aff4:	20006840 	.word	0x20006840

0800aff8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b086      	sub	sp, #24
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	4613      	mov	r3, r2
 800b004:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d101      	bne.n	800b010 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b00c:	4b30      	ldr	r3, [pc, #192]	; (800b0d0 <udp_bind+0xd8>)
 800b00e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d002      	beq.n	800b01c <udp_bind+0x24>
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d102      	bne.n	800b022 <udp_bind+0x2a>
    return ERR_VAL;
 800b01c:	f06f 0305 	mvn.w	r3, #5
 800b020:	e052      	b.n	800b0c8 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b022:	2300      	movs	r3, #0
 800b024:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b026:	4b2b      	ldr	r3, [pc, #172]	; (800b0d4 <udp_bind+0xdc>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	617b      	str	r3, [r7, #20]
 800b02c:	e009      	b.n	800b042 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	429a      	cmp	r2, r3
 800b034:	d102      	bne.n	800b03c <udp_bind+0x44>
      rebind = 1;
 800b036:	2301      	movs	r3, #1
 800b038:	74fb      	strb	r3, [r7, #19]
      break;
 800b03a:	e005      	b.n	800b048 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	617b      	str	r3, [r7, #20]
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d1f2      	bne.n	800b02e <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800b048:	88fb      	ldrh	r3, [r7, #6]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d109      	bne.n	800b062 <udp_bind+0x6a>
    port = udp_new_port();
 800b04e:	f7ff fd13 	bl	800aa78 <udp_new_port>
 800b052:	4603      	mov	r3, r0
 800b054:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b056:	88fb      	ldrh	r3, [r7, #6]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d11e      	bne.n	800b09a <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b05c:	f06f 0307 	mvn.w	r3, #7
 800b060:	e032      	b.n	800b0c8 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b062:	4b1c      	ldr	r3, [pc, #112]	; (800b0d4 <udp_bind+0xdc>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	617b      	str	r3, [r7, #20]
 800b068:	e014      	b.n	800b094 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d00d      	beq.n	800b08e <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	8a5b      	ldrh	r3, [r3, #18]
 800b076:	88fa      	ldrh	r2, [r7, #6]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d108      	bne.n	800b08e <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800b084:	429a      	cmp	r2, r3
 800b086:	d102      	bne.n	800b08e <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800b088:	f06f 0307 	mvn.w	r3, #7
 800b08c:	e01c      	b.n	800b0c8 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	617b      	str	r3, [r7, #20]
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1e7      	bne.n	800b06a <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d002      	beq.n	800b0a6 <udp_bind+0xae>
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	e000      	b.n	800b0a8 <udp_bind+0xb0>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	88fa      	ldrh	r2, [r7, #6]
 800b0b0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b0b2:	7cfb      	ldrb	r3, [r7, #19]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d106      	bne.n	800b0c6 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b0b8:	4b06      	ldr	r3, [pc, #24]	; (800b0d4 <udp_bind+0xdc>)
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800b0c0:	4a04      	ldr	r2, [pc, #16]	; (800b0d4 <udp_bind+0xdc>)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3718      	adds	r7, #24
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	08010adc 	.word	0x08010adc
 800b0d4:	20006974 	.word	0x20006974

0800b0d8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d002      	beq.n	800b0f2 <udp_connect+0x1a>
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d102      	bne.n	800b0f8 <udp_connect+0x20>
    return ERR_VAL;
 800b0f2:	f06f 0305 	mvn.w	r3, #5
 800b0f6:	e03e      	b.n	800b176 <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	8a5b      	ldrh	r3, [r3, #18]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10f      	bne.n	800b120 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b100:	68f9      	ldr	r1, [r7, #12]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	8a5b      	ldrh	r3, [r3, #18]
 800b106:	461a      	mov	r2, r3
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f7ff ff75 	bl	800aff8 <udp_bind>
 800b10e:	4603      	mov	r3, r0
 800b110:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b112:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d002      	beq.n	800b120 <udp_connect+0x48>
      return err;
 800b11a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b11e:	e02a      	b.n	800b176 <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d002      	beq.n	800b12c <udp_connect+0x54>
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	e000      	b.n	800b12e <udp_connect+0x56>
 800b12c:	2300      	movs	r3, #0
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	88fa      	ldrh	r2, [r7, #6]
 800b136:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	7c1b      	ldrb	r3, [r3, #16]
 800b13c:	f043 0304 	orr.w	r3, r3, #4
 800b140:	b2da      	uxtb	r2, r3
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b146:	4b0e      	ldr	r3, [pc, #56]	; (800b180 <udp_connect+0xa8>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	617b      	str	r3, [r7, #20]
 800b14c:	e008      	b.n	800b160 <udp_connect+0x88>
    if (pcb == ipcb) {
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	429a      	cmp	r2, r3
 800b154:	d101      	bne.n	800b15a <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800b156:	2300      	movs	r3, #0
 800b158:	e00d      	b.n	800b176 <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	617b      	str	r3, [r7, #20]
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d1f3      	bne.n	800b14e <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800b166:	4b06      	ldr	r3, [pc, #24]	; (800b180 <udp_connect+0xa8>)
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800b16e:	4a04      	ldr	r2, [pc, #16]	; (800b180 <udp_connect+0xa8>)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3718      	adds	r7, #24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	20006974 	.word	0x20006974

0800b184 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	829a      	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	7c1b      	ldrb	r3, [r3, #16]
 800b19c:	f023 0304 	bic.w	r3, r3, #4
 800b1a0:	b2da      	uxtb	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	741a      	strb	r2, [r3, #16]
}
 800b1a6:	bf00      	nop
 800b1a8:	370c      	adds	r7, #12
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bc80      	pop	{r7}
 800b1ae:	4770      	bx	lr

0800b1b0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	61da      	str	r2, [r3, #28]
}
 800b1c8:	bf00      	nop
 800b1ca:	3714      	adds	r7, #20
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bc80      	pop	{r7}
 800b1d0:	4770      	bx	lr
	...

0800b1d4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800b1dc:	4b15      	ldr	r3, [pc, #84]	; (800b234 <udp_remove+0x60>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d105      	bne.n	800b1f2 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800b1e6:	4b13      	ldr	r3, [pc, #76]	; (800b234 <udp_remove+0x60>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	4a11      	ldr	r2, [pc, #68]	; (800b234 <udp_remove+0x60>)
 800b1ee:	6013      	str	r3, [r2, #0]
 800b1f0:	e017      	b.n	800b222 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b1f2:	4b10      	ldr	r3, [pc, #64]	; (800b234 <udp_remove+0x60>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	60fb      	str	r3, [r7, #12]
 800b1f8:	e010      	b.n	800b21c <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d009      	beq.n	800b216 <udp_remove+0x42>
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d104      	bne.n	800b216 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	68da      	ldr	r2, [r3, #12]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	60da      	str	r2, [r3, #12]
        break;
 800b214:	e005      	b.n	800b222 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	60fb      	str	r3, [r7, #12]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1eb      	bne.n	800b1fa <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800b222:	6879      	ldr	r1, [r7, #4]
 800b224:	2000      	movs	r0, #0
 800b226:	f7f9 fe59 	bl	8004edc <memp_free>
}
 800b22a:	bf00      	nop
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	20006974 	.word	0x20006974

0800b238 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b23e:	2000      	movs	r0, #0
 800b240:	f7f9 fdfa 	bl	8004e38 <memp_malloc>
 800b244:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d007      	beq.n	800b25c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b24c:	2220      	movs	r2, #32
 800b24e:	2100      	movs	r1, #0
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f002 fbd1 	bl	800d9f8 <memset>
    pcb->ttl = UDP_TTL;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	22ff      	movs	r2, #255	; 0xff
 800b25a:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800b25c:	687b      	ldr	r3, [r7, #4]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
	...

0800b268 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d01e      	beq.n	800b2b6 <udp_netif_ip_addr_changed+0x4e>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d01a      	beq.n	800b2b6 <udp_netif_ip_addr_changed+0x4e>
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d017      	beq.n	800b2b6 <udp_netif_ip_addr_changed+0x4e>
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d013      	beq.n	800b2b6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b28e:	4b0c      	ldr	r3, [pc, #48]	; (800b2c0 <udp_netif_ip_addr_changed+0x58>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	60fb      	str	r3, [r7, #12]
 800b294:	e00c      	b.n	800b2b0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d103      	bne.n	800b2aa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	60fb      	str	r3, [r7, #12]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1ef      	bne.n	800b296 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b2b6:	bf00      	nop
 800b2b8:	3714      	adds	r7, #20
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bc80      	pop	{r7}
 800b2be:	4770      	bx	lr
 800b2c0:	20006974 	.word	0x20006974

0800b2c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b2cc:	4915      	ldr	r1, [pc, #84]	; (800b324 <etharp_free_entry+0x60>)
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	005b      	lsls	r3, r3, #1
 800b2d4:	4413      	add	r3, r2
 800b2d6:	00db      	lsls	r3, r3, #3
 800b2d8:	440b      	add	r3, r1
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d013      	beq.n	800b308 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b2e0:	4910      	ldr	r1, [pc, #64]	; (800b324 <etharp_free_entry+0x60>)
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	005b      	lsls	r3, r3, #1
 800b2e8:	4413      	add	r3, r2
 800b2ea:	00db      	lsls	r3, r3, #3
 800b2ec:	440b      	add	r3, r1
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7fa fb31 	bl	8005958 <pbuf_free>
    arp_table[i].q = NULL;
 800b2f6:	490b      	ldr	r1, [pc, #44]	; (800b324 <etharp_free_entry+0x60>)
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	005b      	lsls	r3, r3, #1
 800b2fe:	4413      	add	r3, r2
 800b300:	00db      	lsls	r3, r3, #3
 800b302:	440b      	add	r3, r1
 800b304:	2200      	movs	r2, #0
 800b306:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b308:	4906      	ldr	r1, [pc, #24]	; (800b324 <etharp_free_entry+0x60>)
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	4613      	mov	r3, r2
 800b30e:	005b      	lsls	r3, r3, #1
 800b310:	4413      	add	r3, r2
 800b312:	00db      	lsls	r3, r3, #3
 800b314:	440b      	add	r3, r1
 800b316:	3314      	adds	r3, #20
 800b318:	2200      	movs	r2, #0
 800b31a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b31c:	bf00      	nop
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	20006978 	.word	0x20006978

0800b328 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b32e:	2300      	movs	r3, #0
 800b330:	71fb      	strb	r3, [r7, #7]
 800b332:	e096      	b.n	800b462 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b334:	79fa      	ldrb	r2, [r7, #7]
 800b336:	494f      	ldr	r1, [pc, #316]	; (800b474 <etharp_tmr+0x14c>)
 800b338:	4613      	mov	r3, r2
 800b33a:	005b      	lsls	r3, r3, #1
 800b33c:	4413      	add	r3, r2
 800b33e:	00db      	lsls	r3, r3, #3
 800b340:	440b      	add	r3, r1
 800b342:	3314      	adds	r3, #20
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800b348:	79bb      	ldrb	r3, [r7, #6]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f000 8086 	beq.w	800b45c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800b350:	79fa      	ldrb	r2, [r7, #7]
 800b352:	4948      	ldr	r1, [pc, #288]	; (800b474 <etharp_tmr+0x14c>)
 800b354:	4613      	mov	r3, r2
 800b356:	005b      	lsls	r3, r3, #1
 800b358:	4413      	add	r3, r2
 800b35a:	00db      	lsls	r3, r3, #3
 800b35c:	440b      	add	r3, r1
 800b35e:	3312      	adds	r3, #18
 800b360:	881b      	ldrh	r3, [r3, #0]
 800b362:	3301      	adds	r3, #1
 800b364:	b298      	uxth	r0, r3
 800b366:	4943      	ldr	r1, [pc, #268]	; (800b474 <etharp_tmr+0x14c>)
 800b368:	4613      	mov	r3, r2
 800b36a:	005b      	lsls	r3, r3, #1
 800b36c:	4413      	add	r3, r2
 800b36e:	00db      	lsls	r3, r3, #3
 800b370:	440b      	add	r3, r1
 800b372:	3312      	adds	r3, #18
 800b374:	4602      	mov	r2, r0
 800b376:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b378:	79fa      	ldrb	r2, [r7, #7]
 800b37a:	493e      	ldr	r1, [pc, #248]	; (800b474 <etharp_tmr+0x14c>)
 800b37c:	4613      	mov	r3, r2
 800b37e:	005b      	lsls	r3, r3, #1
 800b380:	4413      	add	r3, r2
 800b382:	00db      	lsls	r3, r3, #3
 800b384:	440b      	add	r3, r1
 800b386:	3312      	adds	r3, #18
 800b388:	881b      	ldrh	r3, [r3, #0]
 800b38a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b38e:	d215      	bcs.n	800b3bc <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b390:	79fa      	ldrb	r2, [r7, #7]
 800b392:	4938      	ldr	r1, [pc, #224]	; (800b474 <etharp_tmr+0x14c>)
 800b394:	4613      	mov	r3, r2
 800b396:	005b      	lsls	r3, r3, #1
 800b398:	4413      	add	r3, r2
 800b39a:	00db      	lsls	r3, r3, #3
 800b39c:	440b      	add	r3, r1
 800b39e:	3314      	adds	r3, #20
 800b3a0:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d10f      	bne.n	800b3c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b3a6:	79fa      	ldrb	r2, [r7, #7]
 800b3a8:	4932      	ldr	r1, [pc, #200]	; (800b474 <etharp_tmr+0x14c>)
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	005b      	lsls	r3, r3, #1
 800b3ae:	4413      	add	r3, r2
 800b3b0:	00db      	lsls	r3, r3, #3
 800b3b2:	440b      	add	r3, r1
 800b3b4:	3312      	adds	r3, #18
 800b3b6:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b3b8:	2b04      	cmp	r3, #4
 800b3ba:	d904      	bls.n	800b3c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b3bc:	79fb      	ldrb	r3, [r7, #7]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7ff ff80 	bl	800b2c4 <etharp_free_entry>
 800b3c4:	e04a      	b.n	800b45c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b3c6:	79fa      	ldrb	r2, [r7, #7]
 800b3c8:	492a      	ldr	r1, [pc, #168]	; (800b474 <etharp_tmr+0x14c>)
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	005b      	lsls	r3, r3, #1
 800b3ce:	4413      	add	r3, r2
 800b3d0:	00db      	lsls	r3, r3, #3
 800b3d2:	440b      	add	r3, r1
 800b3d4:	3314      	adds	r3, #20
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	2b03      	cmp	r3, #3
 800b3da:	d10a      	bne.n	800b3f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b3dc:	79fa      	ldrb	r2, [r7, #7]
 800b3de:	4925      	ldr	r1, [pc, #148]	; (800b474 <etharp_tmr+0x14c>)
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	005b      	lsls	r3, r3, #1
 800b3e4:	4413      	add	r3, r2
 800b3e6:	00db      	lsls	r3, r3, #3
 800b3e8:	440b      	add	r3, r1
 800b3ea:	3314      	adds	r3, #20
 800b3ec:	2204      	movs	r2, #4
 800b3ee:	701a      	strb	r2, [r3, #0]
 800b3f0:	e034      	b.n	800b45c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b3f2:	79fa      	ldrb	r2, [r7, #7]
 800b3f4:	491f      	ldr	r1, [pc, #124]	; (800b474 <etharp_tmr+0x14c>)
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	005b      	lsls	r3, r3, #1
 800b3fa:	4413      	add	r3, r2
 800b3fc:	00db      	lsls	r3, r3, #3
 800b3fe:	440b      	add	r3, r1
 800b400:	3314      	adds	r3, #20
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	2b04      	cmp	r3, #4
 800b406:	d10a      	bne.n	800b41e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b408:	79fa      	ldrb	r2, [r7, #7]
 800b40a:	491a      	ldr	r1, [pc, #104]	; (800b474 <etharp_tmr+0x14c>)
 800b40c:	4613      	mov	r3, r2
 800b40e:	005b      	lsls	r3, r3, #1
 800b410:	4413      	add	r3, r2
 800b412:	00db      	lsls	r3, r3, #3
 800b414:	440b      	add	r3, r1
 800b416:	3314      	adds	r3, #20
 800b418:	2202      	movs	r2, #2
 800b41a:	701a      	strb	r2, [r3, #0]
 800b41c:	e01e      	b.n	800b45c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b41e:	79fa      	ldrb	r2, [r7, #7]
 800b420:	4914      	ldr	r1, [pc, #80]	; (800b474 <etharp_tmr+0x14c>)
 800b422:	4613      	mov	r3, r2
 800b424:	005b      	lsls	r3, r3, #1
 800b426:	4413      	add	r3, r2
 800b428:	00db      	lsls	r3, r3, #3
 800b42a:	440b      	add	r3, r1
 800b42c:	3314      	adds	r3, #20
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	2b01      	cmp	r3, #1
 800b432:	d113      	bne.n	800b45c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b434:	79fa      	ldrb	r2, [r7, #7]
 800b436:	490f      	ldr	r1, [pc, #60]	; (800b474 <etharp_tmr+0x14c>)
 800b438:	4613      	mov	r3, r2
 800b43a:	005b      	lsls	r3, r3, #1
 800b43c:	4413      	add	r3, r2
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	440b      	add	r3, r1
 800b442:	3308      	adds	r3, #8
 800b444:	6818      	ldr	r0, [r3, #0]
 800b446:	79fa      	ldrb	r2, [r7, #7]
 800b448:	4613      	mov	r3, r2
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	4413      	add	r3, r2
 800b44e:	00db      	lsls	r3, r3, #3
 800b450:	4a08      	ldr	r2, [pc, #32]	; (800b474 <etharp_tmr+0x14c>)
 800b452:	4413      	add	r3, r2
 800b454:	3304      	adds	r3, #4
 800b456:	4619      	mov	r1, r3
 800b458:	f000 fe7a 	bl	800c150 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b45c:	79fb      	ldrb	r3, [r7, #7]
 800b45e:	3301      	adds	r3, #1
 800b460:	71fb      	strb	r3, [r7, #7]
 800b462:	79fb      	ldrb	r3, [r7, #7]
 800b464:	2b09      	cmp	r3, #9
 800b466:	f67f af65 	bls.w	800b334 <etharp_tmr+0xc>
      }
    }
  }
}
 800b46a:	bf00      	nop
 800b46c:	bf00      	nop
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	20006978 	.word	0x20006978

0800b478 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b088      	sub	sp, #32
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	460b      	mov	r3, r1
 800b482:	607a      	str	r2, [r7, #4]
 800b484:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b486:	230a      	movs	r3, #10
 800b488:	77fb      	strb	r3, [r7, #31]
 800b48a:	230a      	movs	r3, #10
 800b48c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800b48e:	230a      	movs	r3, #10
 800b490:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800b492:	2300      	movs	r3, #0
 800b494:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800b496:	230a      	movs	r3, #10
 800b498:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b49a:	2300      	movs	r3, #0
 800b49c:	833b      	strh	r3, [r7, #24]
 800b49e:	2300      	movs	r3, #0
 800b4a0:	82fb      	strh	r3, [r7, #22]
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	773b      	strb	r3, [r7, #28]
 800b4aa:	e093      	b.n	800b5d4 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800b4ac:	7f3a      	ldrb	r2, [r7, #28]
 800b4ae:	4990      	ldr	r1, [pc, #576]	; (800b6f0 <etharp_find_entry+0x278>)
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	005b      	lsls	r3, r3, #1
 800b4b4:	4413      	add	r3, r2
 800b4b6:	00db      	lsls	r3, r3, #3
 800b4b8:	440b      	add	r3, r1
 800b4ba:	3314      	adds	r3, #20
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b4c0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b4c4:	2b0a      	cmp	r3, #10
 800b4c6:	d105      	bne.n	800b4d4 <etharp_find_entry+0x5c>
 800b4c8:	7cfb      	ldrb	r3, [r7, #19]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d102      	bne.n	800b4d4 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800b4ce:	7f3b      	ldrb	r3, [r7, #28]
 800b4d0:	777b      	strb	r3, [r7, #29]
 800b4d2:	e07c      	b.n	800b5ce <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b4d4:	7cfb      	ldrb	r3, [r7, #19]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d079      	beq.n	800b5ce <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b4da:	7cfb      	ldrb	r3, [r7, #19]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d009      	beq.n	800b4f4 <etharp_find_entry+0x7c>
 800b4e0:	7cfb      	ldrb	r3, [r7, #19]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d806      	bhi.n	800b4f4 <etharp_find_entry+0x7c>
 800b4e6:	4b83      	ldr	r3, [pc, #524]	; (800b6f4 <etharp_find_entry+0x27c>)
 800b4e8:	f240 1225 	movw	r2, #293	; 0x125
 800b4ec:	4982      	ldr	r1, [pc, #520]	; (800b6f8 <etharp_find_entry+0x280>)
 800b4ee:	4883      	ldr	r0, [pc, #524]	; (800b6fc <etharp_find_entry+0x284>)
 800b4f0:	f002 fa8a 	bl	800da08 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00f      	beq.n	800b51a <etharp_find_entry+0xa2>
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6819      	ldr	r1, [r3, #0]
 800b4fe:	7f3a      	ldrb	r2, [r7, #28]
 800b500:	487b      	ldr	r0, [pc, #492]	; (800b6f0 <etharp_find_entry+0x278>)
 800b502:	4613      	mov	r3, r2
 800b504:	005b      	lsls	r3, r3, #1
 800b506:	4413      	add	r3, r2
 800b508:	00db      	lsls	r3, r3, #3
 800b50a:	4403      	add	r3, r0
 800b50c:	3304      	adds	r3, #4
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4299      	cmp	r1, r3
 800b512:	d102      	bne.n	800b51a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b514:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b518:	e0e5      	b.n	800b6e6 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b51a:	7cfb      	ldrb	r3, [r7, #19]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d13b      	bne.n	800b598 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b520:	7f3a      	ldrb	r2, [r7, #28]
 800b522:	4973      	ldr	r1, [pc, #460]	; (800b6f0 <etharp_find_entry+0x278>)
 800b524:	4613      	mov	r3, r2
 800b526:	005b      	lsls	r3, r3, #1
 800b528:	4413      	add	r3, r2
 800b52a:	00db      	lsls	r3, r3, #3
 800b52c:	440b      	add	r3, r1
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d018      	beq.n	800b566 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800b534:	7f3a      	ldrb	r2, [r7, #28]
 800b536:	496e      	ldr	r1, [pc, #440]	; (800b6f0 <etharp_find_entry+0x278>)
 800b538:	4613      	mov	r3, r2
 800b53a:	005b      	lsls	r3, r3, #1
 800b53c:	4413      	add	r3, r2
 800b53e:	00db      	lsls	r3, r3, #3
 800b540:	440b      	add	r3, r1
 800b542:	3312      	adds	r3, #18
 800b544:	881b      	ldrh	r3, [r3, #0]
 800b546:	8b3a      	ldrh	r2, [r7, #24]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d840      	bhi.n	800b5ce <etharp_find_entry+0x156>
            old_queue = i;
 800b54c:	7f3b      	ldrb	r3, [r7, #28]
 800b54e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800b550:	7f3a      	ldrb	r2, [r7, #28]
 800b552:	4967      	ldr	r1, [pc, #412]	; (800b6f0 <etharp_find_entry+0x278>)
 800b554:	4613      	mov	r3, r2
 800b556:	005b      	lsls	r3, r3, #1
 800b558:	4413      	add	r3, r2
 800b55a:	00db      	lsls	r3, r3, #3
 800b55c:	440b      	add	r3, r1
 800b55e:	3312      	adds	r3, #18
 800b560:	881b      	ldrh	r3, [r3, #0]
 800b562:	833b      	strh	r3, [r7, #24]
 800b564:	e033      	b.n	800b5ce <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b566:	7f3a      	ldrb	r2, [r7, #28]
 800b568:	4961      	ldr	r1, [pc, #388]	; (800b6f0 <etharp_find_entry+0x278>)
 800b56a:	4613      	mov	r3, r2
 800b56c:	005b      	lsls	r3, r3, #1
 800b56e:	4413      	add	r3, r2
 800b570:	00db      	lsls	r3, r3, #3
 800b572:	440b      	add	r3, r1
 800b574:	3312      	adds	r3, #18
 800b576:	881b      	ldrh	r3, [r3, #0]
 800b578:	8afa      	ldrh	r2, [r7, #22]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d827      	bhi.n	800b5ce <etharp_find_entry+0x156>
            old_pending = i;
 800b57e:	7f3b      	ldrb	r3, [r7, #28]
 800b580:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800b582:	7f3a      	ldrb	r2, [r7, #28]
 800b584:	495a      	ldr	r1, [pc, #360]	; (800b6f0 <etharp_find_entry+0x278>)
 800b586:	4613      	mov	r3, r2
 800b588:	005b      	lsls	r3, r3, #1
 800b58a:	4413      	add	r3, r2
 800b58c:	00db      	lsls	r3, r3, #3
 800b58e:	440b      	add	r3, r1
 800b590:	3312      	adds	r3, #18
 800b592:	881b      	ldrh	r3, [r3, #0]
 800b594:	82fb      	strh	r3, [r7, #22]
 800b596:	e01a      	b.n	800b5ce <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b598:	7cfb      	ldrb	r3, [r7, #19]
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d917      	bls.n	800b5ce <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b59e:	7f3a      	ldrb	r2, [r7, #28]
 800b5a0:	4953      	ldr	r1, [pc, #332]	; (800b6f0 <etharp_find_entry+0x278>)
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	005b      	lsls	r3, r3, #1
 800b5a6:	4413      	add	r3, r2
 800b5a8:	00db      	lsls	r3, r3, #3
 800b5aa:	440b      	add	r3, r1
 800b5ac:	3312      	adds	r3, #18
 800b5ae:	881b      	ldrh	r3, [r3, #0]
 800b5b0:	8aba      	ldrh	r2, [r7, #20]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d80b      	bhi.n	800b5ce <etharp_find_entry+0x156>
            old_stable = i;
 800b5b6:	7f3b      	ldrb	r3, [r7, #28]
 800b5b8:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800b5ba:	7f3a      	ldrb	r2, [r7, #28]
 800b5bc:	494c      	ldr	r1, [pc, #304]	; (800b6f0 <etharp_find_entry+0x278>)
 800b5be:	4613      	mov	r3, r2
 800b5c0:	005b      	lsls	r3, r3, #1
 800b5c2:	4413      	add	r3, r2
 800b5c4:	00db      	lsls	r3, r3, #3
 800b5c6:	440b      	add	r3, r1
 800b5c8:	3312      	adds	r3, #18
 800b5ca:	881b      	ldrh	r3, [r3, #0]
 800b5cc:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b5ce:	7f3b      	ldrb	r3, [r7, #28]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	773b      	strb	r3, [r7, #28]
 800b5d4:	7f3b      	ldrb	r3, [r7, #28]
 800b5d6:	2b09      	cmp	r3, #9
 800b5d8:	f67f af68 	bls.w	800b4ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b5dc:	7afb      	ldrb	r3, [r7, #11]
 800b5de:	f003 0302 	and.w	r3, r3, #2
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d108      	bne.n	800b5f8 <etharp_find_entry+0x180>
 800b5e6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b5ea:	2b0a      	cmp	r3, #10
 800b5ec:	d107      	bne.n	800b5fe <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b5ee:	7afb      	ldrb	r3, [r7, #11]
 800b5f0:	f003 0301 	and.w	r3, r3, #1
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d102      	bne.n	800b5fe <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800b5f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5fc:	e073      	b.n	800b6e6 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b5fe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b602:	2b09      	cmp	r3, #9
 800b604:	dc02      	bgt.n	800b60c <etharp_find_entry+0x194>
    i = empty;
 800b606:	7f7b      	ldrb	r3, [r7, #29]
 800b608:	773b      	strb	r3, [r7, #28]
 800b60a:	e036      	b.n	800b67a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b60c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b610:	2b09      	cmp	r3, #9
 800b612:	dc13      	bgt.n	800b63c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800b614:	7fbb      	ldrb	r3, [r7, #30]
 800b616:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b618:	7f3a      	ldrb	r2, [r7, #28]
 800b61a:	4935      	ldr	r1, [pc, #212]	; (800b6f0 <etharp_find_entry+0x278>)
 800b61c:	4613      	mov	r3, r2
 800b61e:	005b      	lsls	r3, r3, #1
 800b620:	4413      	add	r3, r2
 800b622:	00db      	lsls	r3, r3, #3
 800b624:	440b      	add	r3, r1
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d018      	beq.n	800b65e <etharp_find_entry+0x1e6>
 800b62c:	4b31      	ldr	r3, [pc, #196]	; (800b6f4 <etharp_find_entry+0x27c>)
 800b62e:	f240 126f 	movw	r2, #367	; 0x16f
 800b632:	4933      	ldr	r1, [pc, #204]	; (800b700 <etharp_find_entry+0x288>)
 800b634:	4831      	ldr	r0, [pc, #196]	; (800b6fc <etharp_find_entry+0x284>)
 800b636:	f002 f9e7 	bl	800da08 <iprintf>
 800b63a:	e010      	b.n	800b65e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b63c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b640:	2b09      	cmp	r3, #9
 800b642:	dc02      	bgt.n	800b64a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800b644:	7ffb      	ldrb	r3, [r7, #31]
 800b646:	773b      	strb	r3, [r7, #28]
 800b648:	e009      	b.n	800b65e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b64a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b64e:	2b09      	cmp	r3, #9
 800b650:	dc02      	bgt.n	800b658 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b652:	7efb      	ldrb	r3, [r7, #27]
 800b654:	773b      	strb	r3, [r7, #28]
 800b656:	e002      	b.n	800b65e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800b658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b65c:	e043      	b.n	800b6e6 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b65e:	7f3b      	ldrb	r3, [r7, #28]
 800b660:	2b09      	cmp	r3, #9
 800b662:	d906      	bls.n	800b672 <etharp_find_entry+0x1fa>
 800b664:	4b23      	ldr	r3, [pc, #140]	; (800b6f4 <etharp_find_entry+0x27c>)
 800b666:	f240 1281 	movw	r2, #385	; 0x181
 800b66a:	4926      	ldr	r1, [pc, #152]	; (800b704 <etharp_find_entry+0x28c>)
 800b66c:	4823      	ldr	r0, [pc, #140]	; (800b6fc <etharp_find_entry+0x284>)
 800b66e:	f002 f9cb 	bl	800da08 <iprintf>
    etharp_free_entry(i);
 800b672:	7f3b      	ldrb	r3, [r7, #28]
 800b674:	4618      	mov	r0, r3
 800b676:	f7ff fe25 	bl	800b2c4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b67a:	7f3b      	ldrb	r3, [r7, #28]
 800b67c:	2b09      	cmp	r3, #9
 800b67e:	d906      	bls.n	800b68e <etharp_find_entry+0x216>
 800b680:	4b1c      	ldr	r3, [pc, #112]	; (800b6f4 <etharp_find_entry+0x27c>)
 800b682:	f240 1285 	movw	r2, #389	; 0x185
 800b686:	491f      	ldr	r1, [pc, #124]	; (800b704 <etharp_find_entry+0x28c>)
 800b688:	481c      	ldr	r0, [pc, #112]	; (800b6fc <etharp_find_entry+0x284>)
 800b68a:	f002 f9bd 	bl	800da08 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b68e:	7f3a      	ldrb	r2, [r7, #28]
 800b690:	4917      	ldr	r1, [pc, #92]	; (800b6f0 <etharp_find_entry+0x278>)
 800b692:	4613      	mov	r3, r2
 800b694:	005b      	lsls	r3, r3, #1
 800b696:	4413      	add	r3, r2
 800b698:	00db      	lsls	r3, r3, #3
 800b69a:	440b      	add	r3, r1
 800b69c:	3314      	adds	r3, #20
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d006      	beq.n	800b6b2 <etharp_find_entry+0x23a>
 800b6a4:	4b13      	ldr	r3, [pc, #76]	; (800b6f4 <etharp_find_entry+0x27c>)
 800b6a6:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800b6aa:	4917      	ldr	r1, [pc, #92]	; (800b708 <etharp_find_entry+0x290>)
 800b6ac:	4813      	ldr	r0, [pc, #76]	; (800b6fc <etharp_find_entry+0x284>)
 800b6ae:	f002 f9ab 	bl	800da08 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00a      	beq.n	800b6ce <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b6b8:	7f3a      	ldrb	r2, [r7, #28]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6819      	ldr	r1, [r3, #0]
 800b6be:	480c      	ldr	r0, [pc, #48]	; (800b6f0 <etharp_find_entry+0x278>)
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	005b      	lsls	r3, r3, #1
 800b6c4:	4413      	add	r3, r2
 800b6c6:	00db      	lsls	r3, r3, #3
 800b6c8:	4403      	add	r3, r0
 800b6ca:	3304      	adds	r3, #4
 800b6cc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b6ce:	7f3a      	ldrb	r2, [r7, #28]
 800b6d0:	4907      	ldr	r1, [pc, #28]	; (800b6f0 <etharp_find_entry+0x278>)
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	005b      	lsls	r3, r3, #1
 800b6d6:	4413      	add	r3, r2
 800b6d8:	00db      	lsls	r3, r3, #3
 800b6da:	440b      	add	r3, r1
 800b6dc:	3312      	adds	r3, #18
 800b6de:	2200      	movs	r2, #0
 800b6e0:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800b6e2:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3720      	adds	r7, #32
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20006978 	.word	0x20006978
 800b6f4:	08010354 	.word	0x08010354
 800b6f8:	0801038c 	.word	0x0801038c
 800b6fc:	080103cc 	.word	0x080103cc
 800b700:	080103f4 	.word	0x080103f4
 800b704:	0801040c 	.word	0x0801040c
 800b708:	08010420 	.word	0x08010420

0800b70c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b088      	sub	sp, #32
 800b710:	af02      	add	r7, sp, #8
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
 800b718:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b720:	2b06      	cmp	r3, #6
 800b722:	d006      	beq.n	800b732 <etharp_update_arp_entry+0x26>
 800b724:	4b48      	ldr	r3, [pc, #288]	; (800b848 <etharp_update_arp_entry+0x13c>)
 800b726:	f240 12ab 	movw	r2, #427	; 0x1ab
 800b72a:	4948      	ldr	r1, [pc, #288]	; (800b84c <etharp_update_arp_entry+0x140>)
 800b72c:	4848      	ldr	r0, [pc, #288]	; (800b850 <etharp_update_arp_entry+0x144>)
 800b72e:	f002 f96b 	bl	800da08 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d012      	beq.n	800b75e <etharp_update_arp_entry+0x52>
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d00e      	beq.n	800b75e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68f9      	ldr	r1, [r7, #12]
 800b746:	4618      	mov	r0, r3
 800b748:	f001 f9c6 	bl	800cad8 <ip4_addr_isbroadcast_u32>
 800b74c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d105      	bne.n	800b75e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b75a:	2be0      	cmp	r3, #224	; 0xe0
 800b75c:	d102      	bne.n	800b764 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b75e:	f06f 030f 	mvn.w	r3, #15
 800b762:	e06c      	b.n	800b83e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b764:	78fb      	ldrb	r3, [r7, #3]
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	4619      	mov	r1, r3
 800b76a:	68b8      	ldr	r0, [r7, #8]
 800b76c:	f7ff fe84 	bl	800b478 <etharp_find_entry>
 800b770:	4603      	mov	r3, r0
 800b772:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b774:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	da02      	bge.n	800b782 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b77c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b780:	e05d      	b.n	800b83e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b782:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b786:	4933      	ldr	r1, [pc, #204]	; (800b854 <etharp_update_arp_entry+0x148>)
 800b788:	4613      	mov	r3, r2
 800b78a:	005b      	lsls	r3, r3, #1
 800b78c:	4413      	add	r3, r2
 800b78e:	00db      	lsls	r3, r3, #3
 800b790:	440b      	add	r3, r1
 800b792:	3314      	adds	r3, #20
 800b794:	2202      	movs	r2, #2
 800b796:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b798:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b79c:	492d      	ldr	r1, [pc, #180]	; (800b854 <etharp_update_arp_entry+0x148>)
 800b79e:	4613      	mov	r3, r2
 800b7a0:	005b      	lsls	r3, r3, #1
 800b7a2:	4413      	add	r3, r2
 800b7a4:	00db      	lsls	r3, r3, #3
 800b7a6:	440b      	add	r3, r1
 800b7a8:	3308      	adds	r3, #8
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800b7ae:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	005b      	lsls	r3, r3, #1
 800b7b6:	4413      	add	r3, r2
 800b7b8:	00db      	lsls	r3, r3, #3
 800b7ba:	3308      	adds	r3, #8
 800b7bc:	4a25      	ldr	r2, [pc, #148]	; (800b854 <etharp_update_arp_entry+0x148>)
 800b7be:	4413      	add	r3, r2
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	2206      	movs	r2, #6
 800b7c4:	6879      	ldr	r1, [r7, #4]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f002 f908 	bl	800d9dc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b7cc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b7d0:	4920      	ldr	r1, [pc, #128]	; (800b854 <etharp_update_arp_entry+0x148>)
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	005b      	lsls	r3, r3, #1
 800b7d6:	4413      	add	r3, r2
 800b7d8:	00db      	lsls	r3, r3, #3
 800b7da:	440b      	add	r3, r1
 800b7dc:	3312      	adds	r3, #18
 800b7de:	2200      	movs	r2, #0
 800b7e0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b7e2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b7e6:	491b      	ldr	r1, [pc, #108]	; (800b854 <etharp_update_arp_entry+0x148>)
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	005b      	lsls	r3, r3, #1
 800b7ec:	4413      	add	r3, r2
 800b7ee:	00db      	lsls	r3, r3, #3
 800b7f0:	440b      	add	r3, r1
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d021      	beq.n	800b83c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b7f8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b7fc:	4915      	ldr	r1, [pc, #84]	; (800b854 <etharp_update_arp_entry+0x148>)
 800b7fe:	4613      	mov	r3, r2
 800b800:	005b      	lsls	r3, r3, #1
 800b802:	4413      	add	r3, r2
 800b804:	00db      	lsls	r3, r3, #3
 800b806:	440b      	add	r3, r1
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b80c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b810:	4910      	ldr	r1, [pc, #64]	; (800b854 <etharp_update_arp_entry+0x148>)
 800b812:	4613      	mov	r3, r2
 800b814:	005b      	lsls	r3, r3, #1
 800b816:	4413      	add	r3, r2
 800b818:	00db      	lsls	r3, r3, #3
 800b81a:	440b      	add	r3, r1
 800b81c:	2200      	movs	r2, #0
 800b81e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800b826:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b82a:	9300      	str	r3, [sp, #0]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6939      	ldr	r1, [r7, #16]
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f002 f84f 	bl	800d8d4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b836:	6938      	ldr	r0, [r7, #16]
 800b838:	f7fa f88e 	bl	8005958 <pbuf_free>
  }
  return ERR_OK;
 800b83c:	2300      	movs	r3, #0
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3718      	adds	r7, #24
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	08010354 	.word	0x08010354
 800b84c:	0801044c 	.word	0x0801044c
 800b850:	080103cc 	.word	0x080103cc
 800b854:	20006978 	.word	0x20006978

0800b858 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b860:	2300      	movs	r3, #0
 800b862:	73fb      	strb	r3, [r7, #15]
 800b864:	e01f      	b.n	800b8a6 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800b866:	7bfa      	ldrb	r2, [r7, #15]
 800b868:	4913      	ldr	r1, [pc, #76]	; (800b8b8 <etharp_cleanup_netif+0x60>)
 800b86a:	4613      	mov	r3, r2
 800b86c:	005b      	lsls	r3, r3, #1
 800b86e:	4413      	add	r3, r2
 800b870:	00db      	lsls	r3, r3, #3
 800b872:	440b      	add	r3, r1
 800b874:	3314      	adds	r3, #20
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b87a:	7bbb      	ldrb	r3, [r7, #14]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00f      	beq.n	800b8a0 <etharp_cleanup_netif+0x48>
 800b880:	7bfa      	ldrb	r2, [r7, #15]
 800b882:	490d      	ldr	r1, [pc, #52]	; (800b8b8 <etharp_cleanup_netif+0x60>)
 800b884:	4613      	mov	r3, r2
 800b886:	005b      	lsls	r3, r3, #1
 800b888:	4413      	add	r3, r2
 800b88a:	00db      	lsls	r3, r3, #3
 800b88c:	440b      	add	r3, r1
 800b88e:	3308      	adds	r3, #8
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	429a      	cmp	r2, r3
 800b896:	d103      	bne.n	800b8a0 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800b898:	7bfb      	ldrb	r3, [r7, #15]
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7ff fd12 	bl	800b2c4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b8a0:	7bfb      	ldrb	r3, [r7, #15]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	73fb      	strb	r3, [r7, #15]
 800b8a6:	7bfb      	ldrb	r3, [r7, #15]
 800b8a8:	2b09      	cmp	r3, #9
 800b8aa:	d9dc      	bls.n	800b866 <etharp_cleanup_netif+0xe>
    }
  }
}
 800b8ac:	bf00      	nop
 800b8ae:	bf00      	nop
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20006978 	.word	0x20006978

0800b8bc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b8bc:	b5b0      	push	{r4, r5, r7, lr}
 800b8be:	b08a      	sub	sp, #40	; 0x28
 800b8c0:	af04      	add	r7, sp, #16
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d107      	bne.n	800b8dc <etharp_input+0x20>
 800b8cc:	4b49      	ldr	r3, [pc, #292]	; (800b9f4 <etharp_input+0x138>)
 800b8ce:	f44f 7222 	mov.w	r2, #648	; 0x288
 800b8d2:	4949      	ldr	r1, [pc, #292]	; (800b9f8 <etharp_input+0x13c>)
 800b8d4:	4849      	ldr	r0, [pc, #292]	; (800b9fc <etharp_input+0x140>)
 800b8d6:	f002 f897 	bl	800da08 <iprintf>
 800b8da:	e088      	b.n	800b9ee <etharp_input+0x132>

  hdr = (struct etharp_hdr *)p->payload;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	881b      	ldrh	r3, [r3, #0]
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8ec:	d10c      	bne.n	800b908 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800b8f2:	2b06      	cmp	r3, #6
 800b8f4:	d108      	bne.n	800b908 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b8fa:	2b04      	cmp	r3, #4
 800b8fc:	d104      	bne.n	800b908 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	885b      	ldrh	r3, [r3, #2]
 800b902:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b904:	2b08      	cmp	r3, #8
 800b906:	d00f      	beq.n	800b928 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 800b908:	4b3d      	ldr	r3, [pc, #244]	; (800ba00 <etharp_input+0x144>)
 800b90a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b90c:	3301      	adds	r3, #1
 800b90e:	b29a      	uxth	r2, r3
 800b910:	4b3b      	ldr	r3, [pc, #236]	; (800ba00 <etharp_input+0x144>)
 800b912:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 800b914:	4b3a      	ldr	r3, [pc, #232]	; (800ba00 <etharp_input+0x144>)
 800b916:	8bdb      	ldrh	r3, [r3, #30]
 800b918:	3301      	adds	r3, #1
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	4b38      	ldr	r3, [pc, #224]	; (800ba00 <etharp_input+0x144>)
 800b91e:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f7fa f819 	bl	8005958 <pbuf_free>
    return;
 800b926:	e062      	b.n	800b9ee <etharp_input+0x132>
  }
  ETHARP_STATS_INC(etharp.recv);
 800b928:	4b35      	ldr	r3, [pc, #212]	; (800ba00 <etharp_input+0x144>)
 800b92a:	8b5b      	ldrh	r3, [r3, #26]
 800b92c:	3301      	adds	r3, #1
 800b92e:	b29a      	uxth	r2, r3
 800b930:	4b33      	ldr	r3, [pc, #204]	; (800ba00 <etharp_input+0x144>)
 800b932:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	330e      	adds	r3, #14
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	3318      	adds	r3, #24
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	3304      	adds	r3, #4
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d102      	bne.n	800b954 <etharp_input+0x98>
    for_us = 0;
 800b94e:	2300      	movs	r3, #0
 800b950:	75fb      	strb	r3, [r7, #23]
 800b952:	e009      	b.n	800b968 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b954:	68ba      	ldr	r2, [r7, #8]
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	3304      	adds	r3, #4
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	bf0c      	ite	eq
 800b960:	2301      	moveq	r3, #1
 800b962:	2300      	movne	r3, #0
 800b964:	b2db      	uxtb	r3, r3
 800b966:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	f103 0208 	add.w	r2, r3, #8
 800b96e:	7dfb      	ldrb	r3, [r7, #23]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d001      	beq.n	800b978 <etharp_input+0xbc>
 800b974:	2301      	movs	r3, #1
 800b976:	e000      	b.n	800b97a <etharp_input+0xbe>
 800b978:	2302      	movs	r3, #2
 800b97a:	f107 010c 	add.w	r1, r7, #12
 800b97e:	6838      	ldr	r0, [r7, #0]
 800b980:	f7ff fec4 	bl	800b70c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	88db      	ldrh	r3, [r3, #6]
 800b988:	b29b      	uxth	r3, r3
 800b98a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b98e:	d003      	beq.n	800b998 <etharp_input+0xdc>
 800b990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b994:	d025      	beq.n	800b9e2 <etharp_input+0x126>
 800b996:	e01d      	b.n	800b9d4 <etharp_input+0x118>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 800b998:	7dfb      	ldrb	r3, [r7, #23]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d023      	beq.n	800b9e6 <etharp_input+0x12a>
      /* send ARP response */
      etharp_raw(netif,
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800b9b4:	693a      	ldr	r2, [r7, #16]
 800b9b6:	3208      	adds	r2, #8
      etharp_raw(netif,
 800b9b8:	2102      	movs	r1, #2
 800b9ba:	9103      	str	r1, [sp, #12]
 800b9bc:	f107 010c 	add.w	r1, r7, #12
 800b9c0:	9102      	str	r1, [sp, #8]
 800b9c2:	9201      	str	r2, [sp, #4]
 800b9c4:	9300      	str	r3, [sp, #0]
 800b9c6:	462b      	mov	r3, r5
 800b9c8:	4622      	mov	r2, r4
 800b9ca:	4601      	mov	r1, r0
 800b9cc:	6838      	ldr	r0, [r7, #0]
 800b9ce:	f000 fb03 	bl	800bfd8 <etharp_raw>
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
    }
    break;
 800b9d2:	e008      	b.n	800b9e6 <etharp_input+0x12a>
    dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
 800b9d4:	4b0a      	ldr	r3, [pc, #40]	; (800ba00 <etharp_input+0x144>)
 800b9d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b9d8:	3301      	adds	r3, #1
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	4b08      	ldr	r3, [pc, #32]	; (800ba00 <etharp_input+0x144>)
 800b9de:	859a      	strh	r2, [r3, #44]	; 0x2c
    break;
 800b9e0:	e002      	b.n	800b9e8 <etharp_input+0x12c>
    break;
 800b9e2:	bf00      	nop
 800b9e4:	e000      	b.n	800b9e8 <etharp_input+0x12c>
    break;
 800b9e6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f7f9 ffb5 	bl	8005958 <pbuf_free>
}
 800b9ee:	3718      	adds	r7, #24
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bdb0      	pop	{r4, r5, r7, pc}
 800b9f4:	08010354 	.word	0x08010354
 800b9f8:	080104a4 	.word	0x080104a4
 800b9fc:	080103cc 	.word	0x080103cc
 800ba00:	20006840 	.word	0x20006840

0800ba04 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b086      	sub	sp, #24
 800ba08:	af02      	add	r7, sp, #8
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	4613      	mov	r3, r2
 800ba10:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ba12:	79fa      	ldrb	r2, [r7, #7]
 800ba14:	4944      	ldr	r1, [pc, #272]	; (800bb28 <etharp_output_to_arp_index+0x124>)
 800ba16:	4613      	mov	r3, r2
 800ba18:	005b      	lsls	r3, r3, #1
 800ba1a:	4413      	add	r3, r2
 800ba1c:	00db      	lsls	r3, r3, #3
 800ba1e:	440b      	add	r3, r1
 800ba20:	3314      	adds	r3, #20
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d806      	bhi.n	800ba36 <etharp_output_to_arp_index+0x32>
 800ba28:	4b40      	ldr	r3, [pc, #256]	; (800bb2c <etharp_output_to_arp_index+0x128>)
 800ba2a:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800ba2e:	4940      	ldr	r1, [pc, #256]	; (800bb30 <etharp_output_to_arp_index+0x12c>)
 800ba30:	4840      	ldr	r0, [pc, #256]	; (800bb34 <etharp_output_to_arp_index+0x130>)
 800ba32:	f001 ffe9 	bl	800da08 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ba36:	79fa      	ldrb	r2, [r7, #7]
 800ba38:	493b      	ldr	r1, [pc, #236]	; (800bb28 <etharp_output_to_arp_index+0x124>)
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	005b      	lsls	r3, r3, #1
 800ba3e:	4413      	add	r3, r2
 800ba40:	00db      	lsls	r3, r3, #3
 800ba42:	440b      	add	r3, r1
 800ba44:	3314      	adds	r3, #20
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	d153      	bne.n	800baf4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ba4c:	79fa      	ldrb	r2, [r7, #7]
 800ba4e:	4936      	ldr	r1, [pc, #216]	; (800bb28 <etharp_output_to_arp_index+0x124>)
 800ba50:	4613      	mov	r3, r2
 800ba52:	005b      	lsls	r3, r3, #1
 800ba54:	4413      	add	r3, r2
 800ba56:	00db      	lsls	r3, r3, #3
 800ba58:	440b      	add	r3, r1
 800ba5a:	3312      	adds	r3, #18
 800ba5c:	881b      	ldrh	r3, [r3, #0]
 800ba5e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800ba62:	d919      	bls.n	800ba98 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ba64:	79fa      	ldrb	r2, [r7, #7]
 800ba66:	4613      	mov	r3, r2
 800ba68:	005b      	lsls	r3, r3, #1
 800ba6a:	4413      	add	r3, r2
 800ba6c:	00db      	lsls	r3, r3, #3
 800ba6e:	4a2e      	ldr	r2, [pc, #184]	; (800bb28 <etharp_output_to_arp_index+0x124>)
 800ba70:	4413      	add	r3, r2
 800ba72:	3304      	adds	r3, #4
 800ba74:	4619      	mov	r1, r3
 800ba76:	68f8      	ldr	r0, [r7, #12]
 800ba78:	f000 fb6a 	bl	800c150 <etharp_request>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d138      	bne.n	800baf4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ba82:	79fa      	ldrb	r2, [r7, #7]
 800ba84:	4928      	ldr	r1, [pc, #160]	; (800bb28 <etharp_output_to_arp_index+0x124>)
 800ba86:	4613      	mov	r3, r2
 800ba88:	005b      	lsls	r3, r3, #1
 800ba8a:	4413      	add	r3, r2
 800ba8c:	00db      	lsls	r3, r3, #3
 800ba8e:	440b      	add	r3, r1
 800ba90:	3314      	adds	r3, #20
 800ba92:	2203      	movs	r2, #3
 800ba94:	701a      	strb	r2, [r3, #0]
 800ba96:	e02d      	b.n	800baf4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ba98:	79fa      	ldrb	r2, [r7, #7]
 800ba9a:	4923      	ldr	r1, [pc, #140]	; (800bb28 <etharp_output_to_arp_index+0x124>)
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	005b      	lsls	r3, r3, #1
 800baa0:	4413      	add	r3, r2
 800baa2:	00db      	lsls	r3, r3, #3
 800baa4:	440b      	add	r3, r1
 800baa6:	3312      	adds	r3, #18
 800baa8:	881b      	ldrh	r3, [r3, #0]
 800baaa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800baae:	d321      	bcc.n	800baf4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800bab0:	79fa      	ldrb	r2, [r7, #7]
 800bab2:	4613      	mov	r3, r2
 800bab4:	005b      	lsls	r3, r3, #1
 800bab6:	4413      	add	r3, r2
 800bab8:	00db      	lsls	r3, r3, #3
 800baba:	4a1b      	ldr	r2, [pc, #108]	; (800bb28 <etharp_output_to_arp_index+0x124>)
 800babc:	4413      	add	r3, r2
 800babe:	1d19      	adds	r1, r3, #4
 800bac0:	79fa      	ldrb	r2, [r7, #7]
 800bac2:	4613      	mov	r3, r2
 800bac4:	005b      	lsls	r3, r3, #1
 800bac6:	4413      	add	r3, r2
 800bac8:	00db      	lsls	r3, r3, #3
 800baca:	3308      	adds	r3, #8
 800bacc:	4a16      	ldr	r2, [pc, #88]	; (800bb28 <etharp_output_to_arp_index+0x124>)
 800bace:	4413      	add	r3, r2
 800bad0:	3304      	adds	r3, #4
 800bad2:	461a      	mov	r2, r3
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f000 fb19 	bl	800c10c <etharp_request_dst>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d109      	bne.n	800baf4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800bae0:	79fa      	ldrb	r2, [r7, #7]
 800bae2:	4911      	ldr	r1, [pc, #68]	; (800bb28 <etharp_output_to_arp_index+0x124>)
 800bae4:	4613      	mov	r3, r2
 800bae6:	005b      	lsls	r3, r3, #1
 800bae8:	4413      	add	r3, r2
 800baea:	00db      	lsls	r3, r3, #3
 800baec:	440b      	add	r3, r1
 800baee:	3314      	adds	r3, #20
 800baf0:	2203      	movs	r2, #3
 800baf2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800bafa:	79fa      	ldrb	r2, [r7, #7]
 800bafc:	4613      	mov	r3, r2
 800bafe:	005b      	lsls	r3, r3, #1
 800bb00:	4413      	add	r3, r2
 800bb02:	00db      	lsls	r3, r3, #3
 800bb04:	3308      	adds	r3, #8
 800bb06:	4a08      	ldr	r2, [pc, #32]	; (800bb28 <etharp_output_to_arp_index+0x124>)
 800bb08:	4413      	add	r3, r2
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb10:	9200      	str	r2, [sp, #0]
 800bb12:	460a      	mov	r2, r1
 800bb14:	68b9      	ldr	r1, [r7, #8]
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	f001 fedc 	bl	800d8d4 <ethernet_output>
 800bb1c:	4603      	mov	r3, r0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	20006978 	.word	0x20006978
 800bb2c:	08010354 	.word	0x08010354
 800bb30:	080104c4 	.word	0x080104c4
 800bb34:	080103cc 	.word	0x080103cc

0800bb38 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b08a      	sub	sp, #40	; 0x28
 800bb3c:	af02      	add	r7, sp, #8
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d106      	bne.n	800bb5c <etharp_output+0x24>
 800bb4e:	4b6c      	ldr	r3, [pc, #432]	; (800bd00 <etharp_output+0x1c8>)
 800bb50:	f240 321b 	movw	r2, #795	; 0x31b
 800bb54:	496b      	ldr	r1, [pc, #428]	; (800bd04 <etharp_output+0x1cc>)
 800bb56:	486c      	ldr	r0, [pc, #432]	; (800bd08 <etharp_output+0x1d0>)
 800bb58:	f001 ff56 	bl	800da08 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d106      	bne.n	800bb70 <etharp_output+0x38>
 800bb62:	4b67      	ldr	r3, [pc, #412]	; (800bd00 <etharp_output+0x1c8>)
 800bb64:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bb68:	4968      	ldr	r1, [pc, #416]	; (800bd0c <etharp_output+0x1d4>)
 800bb6a:	4867      	ldr	r0, [pc, #412]	; (800bd08 <etharp_output+0x1d0>)
 800bb6c:	f001 ff4c 	bl	800da08 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d106      	bne.n	800bb84 <etharp_output+0x4c>
 800bb76:	4b62      	ldr	r3, [pc, #392]	; (800bd00 <etharp_output+0x1c8>)
 800bb78:	f240 321d 	movw	r2, #797	; 0x31d
 800bb7c:	4964      	ldr	r1, [pc, #400]	; (800bd10 <etharp_output+0x1d8>)
 800bb7e:	4862      	ldr	r0, [pc, #392]	; (800bd08 <etharp_output+0x1d0>)
 800bb80:	f001 ff42 	bl	800da08 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	68f9      	ldr	r1, [r7, #12]
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f000 ffa4 	bl	800cad8 <ip4_addr_isbroadcast_u32>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d002      	beq.n	800bb9c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800bb96:	4b5f      	ldr	r3, [pc, #380]	; (800bd14 <etharp_output+0x1dc>)
 800bb98:	61fb      	str	r3, [r7, #28]
 800bb9a:	e0a1      	b.n	800bce0 <etharp_output+0x1a8>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bba4:	2be0      	cmp	r3, #224	; 0xe0
 800bba6:	d118      	bne.n	800bbda <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800bbac:	2300      	movs	r3, #0
 800bbae:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800bbb0:	235e      	movs	r3, #94	; 0x5e
 800bbb2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	3302      	adds	r3, #2
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	3303      	adds	r3, #3
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800bbd2:	f107 0310 	add.w	r3, r7, #16
 800bbd6:	61fb      	str	r3, [r7, #28]
 800bbd8:	e082      	b.n	800bce0 <etharp_output+0x1a8>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	3304      	adds	r3, #4
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	405a      	eors	r2, r3
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	3308      	adds	r3, #8
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4013      	ands	r3, r2
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d012      	beq.n	800bc18 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bbf8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d00b      	beq.n	800bc18 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	330c      	adds	r3, #12
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d003      	beq.n	800bc12 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	330c      	adds	r3, #12
 800bc0e:	61bb      	str	r3, [r7, #24]
 800bc10:	e002      	b.n	800bc18 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800bc12:	f06f 0303 	mvn.w	r3, #3
 800bc16:	e06f      	b.n	800bcf8 <etharp_output+0x1c0>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bc18:	4b3f      	ldr	r3, [pc, #252]	; (800bd18 <etharp_output+0x1e0>)
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	4a3f      	ldr	r2, [pc, #252]	; (800bd1c <etharp_output+0x1e4>)
 800bc20:	460b      	mov	r3, r1
 800bc22:	005b      	lsls	r3, r3, #1
 800bc24:	440b      	add	r3, r1
 800bc26:	00db      	lsls	r3, r3, #3
 800bc28:	4413      	add	r3, r2
 800bc2a:	3314      	adds	r3, #20
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d91d      	bls.n	800bc6e <etharp_output+0x136>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800bc32:	69bb      	ldr	r3, [r7, #24]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	4b38      	ldr	r3, [pc, #224]	; (800bd18 <etharp_output+0x1e0>)
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	4937      	ldr	r1, [pc, #220]	; (800bd1c <etharp_output+0x1e4>)
 800bc3e:	4603      	mov	r3, r0
 800bc40:	005b      	lsls	r3, r3, #1
 800bc42:	4403      	add	r3, r0
 800bc44:	00db      	lsls	r3, r3, #3
 800bc46:	440b      	add	r3, r1
 800bc48:	3304      	adds	r3, #4
 800bc4a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d10e      	bne.n	800bc6e <etharp_output+0x136>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 800bc50:	4b33      	ldr	r3, [pc, #204]	; (800bd20 <etharp_output+0x1e8>)
 800bc52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc54:	3301      	adds	r3, #1
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	4b31      	ldr	r3, [pc, #196]	; (800bd20 <etharp_output+0x1e8>)
 800bc5a:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800bc5c:	4b2e      	ldr	r3, [pc, #184]	; (800bd18 <etharp_output+0x1e0>)
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	461a      	mov	r2, r3
 800bc62:	68b9      	ldr	r1, [r7, #8]
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f7ff fecd 	bl	800ba04 <etharp_output_to_arp_index>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	e044      	b.n	800bcf8 <etharp_output+0x1c0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bc6e:	2300      	movs	r3, #0
 800bc70:	75fb      	strb	r3, [r7, #23]
 800bc72:	e02a      	b.n	800bcca <etharp_output+0x192>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bc74:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bc78:	4928      	ldr	r1, [pc, #160]	; (800bd1c <etharp_output+0x1e4>)
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	005b      	lsls	r3, r3, #1
 800bc7e:	4413      	add	r3, r2
 800bc80:	00db      	lsls	r3, r3, #3
 800bc82:	440b      	add	r3, r1
 800bc84:	3314      	adds	r3, #20
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d918      	bls.n	800bcbe <etharp_output+0x186>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	6819      	ldr	r1, [r3, #0]
 800bc90:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bc94:	4821      	ldr	r0, [pc, #132]	; (800bd1c <etharp_output+0x1e4>)
 800bc96:	4613      	mov	r3, r2
 800bc98:	005b      	lsls	r3, r3, #1
 800bc9a:	4413      	add	r3, r2
 800bc9c:	00db      	lsls	r3, r3, #3
 800bc9e:	4403      	add	r3, r0
 800bca0:	3304      	adds	r3, #4
 800bca2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bca4:	4299      	cmp	r1, r3
 800bca6:	d10a      	bne.n	800bcbe <etharp_output+0x186>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800bca8:	7dfa      	ldrb	r2, [r7, #23]
 800bcaa:	4b1b      	ldr	r3, [pc, #108]	; (800bd18 <etharp_output+0x1e0>)
 800bcac:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800bcae:	7dfb      	ldrb	r3, [r7, #23]
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	68b9      	ldr	r1, [r7, #8]
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f7ff fea5 	bl	800ba04 <etharp_output_to_arp_index>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	e01c      	b.n	800bcf8 <etharp_output+0x1c0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bcbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	75fb      	strb	r3, [r7, #23]
 800bcca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bcce:	2b09      	cmp	r3, #9
 800bcd0:	ddd0      	ble.n	800bc74 <etharp_output+0x13c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800bcd2:	68ba      	ldr	r2, [r7, #8]
 800bcd4:	69b9      	ldr	r1, [r7, #24]
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f000 f824 	bl	800bd24 <etharp_query>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	e00b      	b.n	800bcf8 <etharp_output+0x1c0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800bce6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	68b9      	ldr	r1, [r7, #8]
 800bcf0:	68f8      	ldr	r0, [r7, #12]
 800bcf2:	f001 fdef 	bl	800d8d4 <ethernet_output>
 800bcf6:	4603      	mov	r3, r0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3720      	adds	r7, #32
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	08010354 	.word	0x08010354
 800bd04:	080104a4 	.word	0x080104a4
 800bd08:	080103cc 	.word	0x080103cc
 800bd0c:	080104f4 	.word	0x080104f4
 800bd10:	08010494 	.word	0x08010494
 800bd14:	08010ae0 	.word	0x08010ae0
 800bd18:	20006a68 	.word	0x20006a68
 800bd1c:	20006978 	.word	0x20006978
 800bd20:	20006840 	.word	0x20006840

0800bd24 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b08c      	sub	sp, #48	; 0x30
 800bd28:	af02      	add	r7, sp, #8
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	3329      	adds	r3, #41	; 0x29
 800bd34:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800bd36:	23ff      	movs	r3, #255	; 0xff
 800bd38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	68f9      	ldr	r1, [r7, #12]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f000 fec6 	bl	800cad8 <ip4_addr_isbroadcast_u32>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d10c      	bne.n	800bd6c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bd5a:	2be0      	cmp	r3, #224	; 0xe0
 800bd5c:	d006      	beq.n	800bd6c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d003      	beq.n	800bd6c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d102      	bne.n	800bd72 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bd6c:	f06f 030f 	mvn.w	r3, #15
 800bd70:	e11d      	b.n	800bfae <etharp_query+0x28a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	2101      	movs	r1, #1
 800bd76:	68b8      	ldr	r0, [r7, #8]
 800bd78:	f7ff fb7e 	bl	800b478 <etharp_find_entry>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800bd80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	da0b      	bge.n	800bda0 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d005      	beq.n	800bd9a <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 800bd8e:	4b8a      	ldr	r3, [pc, #552]	; (800bfb8 <etharp_query+0x294>)
 800bd90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bd92:	3301      	adds	r3, #1
 800bd94:	b29a      	uxth	r2, r3
 800bd96:	4b88      	ldr	r3, [pc, #544]	; (800bfb8 <etharp_query+0x294>)
 800bd98:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i;
 800bd9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd9e:	e106      	b.n	800bfae <etharp_query+0x28a>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800bda0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bda4:	4985      	ldr	r1, [pc, #532]	; (800bfbc <etharp_query+0x298>)
 800bda6:	4613      	mov	r3, r2
 800bda8:	005b      	lsls	r3, r3, #1
 800bdaa:	4413      	add	r3, r2
 800bdac:	00db      	lsls	r3, r3, #3
 800bdae:	440b      	add	r3, r1
 800bdb0:	3314      	adds	r3, #20
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d117      	bne.n	800bde8 <etharp_query+0xc4>
    is_new_entry = 1;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800bdbc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bdc0:	497e      	ldr	r1, [pc, #504]	; (800bfbc <etharp_query+0x298>)
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	005b      	lsls	r3, r3, #1
 800bdc6:	4413      	add	r3, r2
 800bdc8:	00db      	lsls	r3, r3, #3
 800bdca:	440b      	add	r3, r1
 800bdcc:	3314      	adds	r3, #20
 800bdce:	2201      	movs	r2, #1
 800bdd0:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800bdd2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bdd6:	4979      	ldr	r1, [pc, #484]	; (800bfbc <etharp_query+0x298>)
 800bdd8:	4613      	mov	r3, r2
 800bdda:	005b      	lsls	r3, r3, #1
 800bddc:	4413      	add	r3, r2
 800bdde:	00db      	lsls	r3, r3, #3
 800bde0:	440b      	add	r3, r1
 800bde2:	3308      	adds	r3, #8
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800bde8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bdec:	4973      	ldr	r1, [pc, #460]	; (800bfbc <etharp_query+0x298>)
 800bdee:	4613      	mov	r3, r2
 800bdf0:	005b      	lsls	r3, r3, #1
 800bdf2:	4413      	add	r3, r2
 800bdf4:	00db      	lsls	r3, r3, #3
 800bdf6:	440b      	add	r3, r1
 800bdf8:	3314      	adds	r3, #20
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d012      	beq.n	800be26 <etharp_query+0x102>
 800be00:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800be04:	496d      	ldr	r1, [pc, #436]	; (800bfbc <etharp_query+0x298>)
 800be06:	4613      	mov	r3, r2
 800be08:	005b      	lsls	r3, r3, #1
 800be0a:	4413      	add	r3, r2
 800be0c:	00db      	lsls	r3, r3, #3
 800be0e:	440b      	add	r3, r1
 800be10:	3314      	adds	r3, #20
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	2b01      	cmp	r3, #1
 800be16:	d806      	bhi.n	800be26 <etharp_query+0x102>
 800be18:	4b69      	ldr	r3, [pc, #420]	; (800bfc0 <etharp_query+0x29c>)
 800be1a:	f240 32c7 	movw	r2, #967	; 0x3c7
 800be1e:	4969      	ldr	r1, [pc, #420]	; (800bfc4 <etharp_query+0x2a0>)
 800be20:	4869      	ldr	r0, [pc, #420]	; (800bfc8 <etharp_query+0x2a4>)
 800be22:	f001 fdf1 	bl	800da08 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800be26:	6a3b      	ldr	r3, [r7, #32]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d102      	bne.n	800be32 <etharp_query+0x10e>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d10c      	bne.n	800be4c <etharp_query+0x128>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800be32:	68b9      	ldr	r1, [r7, #8]
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f000 f98b 	bl	800c150 <etharp_request>
 800be3a:	4603      	mov	r3, r0
 800be3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d102      	bne.n	800be4c <etharp_query+0x128>
      return result;
 800be46:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800be4a:	e0b0      	b.n	800bfae <etharp_query+0x28a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d106      	bne.n	800be60 <etharp_query+0x13c>
 800be52:	4b5b      	ldr	r3, [pc, #364]	; (800bfc0 <etharp_query+0x29c>)
 800be54:	f240 32db 	movw	r2, #987	; 0x3db
 800be58:	495c      	ldr	r1, [pc, #368]	; (800bfcc <etharp_query+0x2a8>)
 800be5a:	485b      	ldr	r0, [pc, #364]	; (800bfc8 <etharp_query+0x2a4>)
 800be5c:	f001 fdd4 	bl	800da08 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800be60:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800be64:	4955      	ldr	r1, [pc, #340]	; (800bfbc <etharp_query+0x298>)
 800be66:	4613      	mov	r3, r2
 800be68:	005b      	lsls	r3, r3, #1
 800be6a:	4413      	add	r3, r2
 800be6c:	00db      	lsls	r3, r3, #3
 800be6e:	440b      	add	r3, r1
 800be70:	3314      	adds	r3, #20
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	2b01      	cmp	r3, #1
 800be76:	d918      	bls.n	800beaa <etharp_query+0x186>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800be78:	7cfa      	ldrb	r2, [r7, #19]
 800be7a:	4b55      	ldr	r3, [pc, #340]	; (800bfd0 <etharp_query+0x2ac>)
 800be7c:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800be7e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800be82:	4613      	mov	r3, r2
 800be84:	005b      	lsls	r3, r3, #1
 800be86:	4413      	add	r3, r2
 800be88:	00db      	lsls	r3, r3, #3
 800be8a:	3308      	adds	r3, #8
 800be8c:	4a4b      	ldr	r2, [pc, #300]	; (800bfbc <etharp_query+0x298>)
 800be8e:	4413      	add	r3, r2
 800be90:	3304      	adds	r3, #4
 800be92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be96:	9200      	str	r2, [sp, #0]
 800be98:	697a      	ldr	r2, [r7, #20]
 800be9a:	6879      	ldr	r1, [r7, #4]
 800be9c:	68f8      	ldr	r0, [r7, #12]
 800be9e:	f001 fd19 	bl	800d8d4 <ethernet_output>
 800bea2:	4603      	mov	r3, r0
 800bea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bea8:	e07f      	b.n	800bfaa <etharp_query+0x286>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800beaa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800beae:	4943      	ldr	r1, [pc, #268]	; (800bfbc <etharp_query+0x298>)
 800beb0:	4613      	mov	r3, r2
 800beb2:	005b      	lsls	r3, r3, #1
 800beb4:	4413      	add	r3, r2
 800beb6:	00db      	lsls	r3, r3, #3
 800beb8:	440b      	add	r3, r1
 800beba:	3314      	adds	r3, #20
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d173      	bne.n	800bfaa <etharp_query+0x286>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800bec2:	2300      	movs	r3, #0
 800bec4:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	61fb      	str	r3, [r7, #28]
    while (p) {
 800beca:	e01a      	b.n	800bf02 <etharp_query+0x1de>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	895a      	ldrh	r2, [r3, #10]
 800bed0:	69fb      	ldr	r3, [r7, #28]
 800bed2:	891b      	ldrh	r3, [r3, #8]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d10a      	bne.n	800beee <etharp_query+0x1ca>
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d006      	beq.n	800beee <etharp_query+0x1ca>
 800bee0:	4b37      	ldr	r3, [pc, #220]	; (800bfc0 <etharp_query+0x29c>)
 800bee2:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800bee6:	493b      	ldr	r1, [pc, #236]	; (800bfd4 <etharp_query+0x2b0>)
 800bee8:	4837      	ldr	r0, [pc, #220]	; (800bfc8 <etharp_query+0x2a4>)
 800beea:	f001 fd8d 	bl	800da08 <iprintf>
      if (p->type != PBUF_ROM) {
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	7b1b      	ldrb	r3, [r3, #12]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d002      	beq.n	800befc <etharp_query+0x1d8>
        copy_needed = 1;
 800bef6:	2301      	movs	r3, #1
 800bef8:	61bb      	str	r3, [r7, #24]
        break;
 800befa:	e005      	b.n	800bf08 <etharp_query+0x1e4>
      }
      p = p->next;
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	61fb      	str	r3, [r7, #28]
    while (p) {
 800bf02:	69fb      	ldr	r3, [r7, #28]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d1e1      	bne.n	800becc <etharp_query+0x1a8>
    }
    if (copy_needed) {
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d017      	beq.n	800bf3e <etharp_query+0x21a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	891b      	ldrh	r3, [r3, #8]
 800bf12:	2200      	movs	r2, #0
 800bf14:	4619      	mov	r1, r3
 800bf16:	2002      	movs	r0, #2
 800bf18:	f7f9 f9a6 	bl	8005268 <pbuf_alloc>
 800bf1c:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d011      	beq.n	800bf48 <etharp_query+0x224>
        if (pbuf_copy(p, q) != ERR_OK) {
 800bf24:	6879      	ldr	r1, [r7, #4]
 800bf26:	69f8      	ldr	r0, [r7, #28]
 800bf28:	f7f9 fe48 	bl	8005bbc <pbuf_copy>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00a      	beq.n	800bf48 <etharp_query+0x224>
          pbuf_free(p);
 800bf32:	69f8      	ldr	r0, [r7, #28]
 800bf34:	f7f9 fd10 	bl	8005958 <pbuf_free>
          p = NULL;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	61fb      	str	r3, [r7, #28]
 800bf3c:	e004      	b.n	800bf48 <etharp_query+0x224>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800bf42:	69f8      	ldr	r0, [r7, #28]
 800bf44:	f7f9 fdb2 	bl	8005aac <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d024      	beq.n	800bf98 <etharp_query+0x274>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800bf4e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bf52:	491a      	ldr	r1, [pc, #104]	; (800bfbc <etharp_query+0x298>)
 800bf54:	4613      	mov	r3, r2
 800bf56:	005b      	lsls	r3, r3, #1
 800bf58:	4413      	add	r3, r2
 800bf5a:	00db      	lsls	r3, r3, #3
 800bf5c:	440b      	add	r3, r1
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00b      	beq.n	800bf7c <etharp_query+0x258>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800bf64:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bf68:	4914      	ldr	r1, [pc, #80]	; (800bfbc <etharp_query+0x298>)
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	005b      	lsls	r3, r3, #1
 800bf6e:	4413      	add	r3, r2
 800bf70:	00db      	lsls	r3, r3, #3
 800bf72:	440b      	add	r3, r1
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7f9 fcee 	bl	8005958 <pbuf_free>
      }
      arp_table[i].q = p;
 800bf7c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bf80:	490e      	ldr	r1, [pc, #56]	; (800bfbc <etharp_query+0x298>)
 800bf82:	4613      	mov	r3, r2
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	4413      	add	r3, r2
 800bf88:	00db      	lsls	r3, r3, #3
 800bf8a:	440b      	add	r3, r1
 800bf8c:	69fa      	ldr	r2, [r7, #28]
 800bf8e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf96:	e008      	b.n	800bfaa <etharp_query+0x286>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 800bf98:	4b07      	ldr	r3, [pc, #28]	; (800bfb8 <etharp_query+0x294>)
 800bf9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	b29a      	uxth	r2, r3
 800bfa0:	4b05      	ldr	r3, [pc, #20]	; (800bfb8 <etharp_query+0x294>)
 800bfa2:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800bfa4:	23ff      	movs	r3, #255	; 0xff
 800bfa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800bfaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3728      	adds	r7, #40	; 0x28
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	20006840 	.word	0x20006840
 800bfbc:	20006978 	.word	0x20006978
 800bfc0:	08010354 	.word	0x08010354
 800bfc4:	08010500 	.word	0x08010500
 800bfc8:	080103cc 	.word	0x080103cc
 800bfcc:	080104f4 	.word	0x080104f4
 800bfd0:	20006a68 	.word	0x20006a68
 800bfd4:	08010528 	.word	0x08010528

0800bfd8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b08a      	sub	sp, #40	; 0x28
 800bfdc:	af02      	add	r7, sp, #8
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
 800bfe4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d106      	bne.n	800bffe <etharp_raw+0x26>
 800bff0:	4b40      	ldr	r3, [pc, #256]	; (800c0f4 <etharp_raw+0x11c>)
 800bff2:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800bff6:	4940      	ldr	r1, [pc, #256]	; (800c0f8 <etharp_raw+0x120>)
 800bff8:	4840      	ldr	r0, [pc, #256]	; (800c0fc <etharp_raw+0x124>)
 800bffa:	f001 fd05 	bl	800da08 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800bffe:	2200      	movs	r2, #0
 800c000:	211c      	movs	r1, #28
 800c002:	2002      	movs	r0, #2
 800c004:	f7f9 f930 	bl	8005268 <pbuf_alloc>
 800c008:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d108      	bne.n	800c022 <etharp_raw+0x4a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 800c010:	4b3b      	ldr	r3, [pc, #236]	; (800c100 <etharp_raw+0x128>)
 800c012:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c014:	3301      	adds	r3, #1
 800c016:	b29a      	uxth	r2, r3
 800c018:	4b39      	ldr	r3, [pc, #228]	; (800c100 <etharp_raw+0x128>)
 800c01a:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 800c01c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c020:	e063      	b.n	800c0ea <etharp_raw+0x112>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	895b      	ldrh	r3, [r3, #10]
 800c026:	2b1b      	cmp	r3, #27
 800c028:	d806      	bhi.n	800c038 <etharp_raw+0x60>
 800c02a:	4b32      	ldr	r3, [pc, #200]	; (800c0f4 <etharp_raw+0x11c>)
 800c02c:	f240 4263 	movw	r2, #1123	; 0x463
 800c030:	4934      	ldr	r1, [pc, #208]	; (800c104 <etharp_raw+0x12c>)
 800c032:	4832      	ldr	r0, [pc, #200]	; (800c0fc <etharp_raw+0x124>)
 800c034:	f001 fce8 	bl	800da08 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c03e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c040:	4618      	mov	r0, r3
 800c042:	f7f8 fab8 	bl	80045b6 <lwip_htons>
 800c046:	4603      	mov	r3, r0
 800c048:	461a      	mov	r2, r3
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c054:	2b06      	cmp	r3, #6
 800c056:	d006      	beq.n	800c066 <etharp_raw+0x8e>
 800c058:	4b26      	ldr	r3, [pc, #152]	; (800c0f4 <etharp_raw+0x11c>)
 800c05a:	f240 426a 	movw	r2, #1130	; 0x46a
 800c05e:	492a      	ldr	r1, [pc, #168]	; (800c108 <etharp_raw+0x130>)
 800c060:	4826      	ldr	r0, [pc, #152]	; (800c0fc <etharp_raw+0x124>)
 800c062:	f001 fcd1 	bl	800da08 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	3308      	adds	r3, #8
 800c06a:	2206      	movs	r2, #6
 800c06c:	6839      	ldr	r1, [r7, #0]
 800c06e:	4618      	mov	r0, r3
 800c070:	f001 fcb4 	bl	800d9dc <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	3312      	adds	r3, #18
 800c078:	2206      	movs	r2, #6
 800c07a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c07c:	4618      	mov	r0, r3
 800c07e:	f001 fcad 	bl	800d9dc <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	330e      	adds	r3, #14
 800c086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c088:	6812      	ldr	r2, [r2, #0]
 800c08a:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	3318      	adds	r3, #24
 800c090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c092:	6812      	ldr	r2, [r2, #0]
 800c094:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	2200      	movs	r2, #0
 800c09a:	701a      	strb	r2, [r3, #0]
 800c09c:	2200      	movs	r2, #0
 800c09e:	f042 0201 	orr.w	r2, r2, #1
 800c0a2:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f042 0208 	orr.w	r2, r2, #8
 800c0ac:	709a      	strb	r2, [r3, #2]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	2206      	movs	r2, #6
 800c0b6:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	2204      	movs	r2, #4
 800c0bc:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c0be:	f640 0306 	movw	r3, #2054	; 0x806
 800c0c2:	9300      	str	r3, [sp, #0]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	68ba      	ldr	r2, [r7, #8]
 800c0c8:	69b9      	ldr	r1, [r7, #24]
 800c0ca:	68f8      	ldr	r0, [r7, #12]
 800c0cc:	f001 fc02 	bl	800d8d4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 800c0d0:	4b0b      	ldr	r3, [pc, #44]	; (800c100 <etharp_raw+0x128>)
 800c0d2:	8b1b      	ldrh	r3, [r3, #24]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	b29a      	uxth	r2, r3
 800c0d8:	4b09      	ldr	r3, [pc, #36]	; (800c100 <etharp_raw+0x128>)
 800c0da:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 800c0dc:	69b8      	ldr	r0, [r7, #24]
 800c0de:	f7f9 fc3b 	bl	8005958 <pbuf_free>
  p = NULL;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c0e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3720      	adds	r7, #32
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	08010354 	.word	0x08010354
 800c0f8:	080104a4 	.word	0x080104a4
 800c0fc:	080103cc 	.word	0x080103cc
 800c100:	20006840 	.word	0x20006840
 800c104:	08010544 	.word	0x08010544
 800c108:	08010578 	.word	0x08010578

0800c10c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b088      	sub	sp, #32
 800c110:	af04      	add	r7, sp, #16
 800c112:	60f8      	str	r0, [r7, #12]
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c128:	2201      	movs	r2, #1
 800c12a:	9203      	str	r2, [sp, #12]
 800c12c:	68ba      	ldr	r2, [r7, #8]
 800c12e:	9202      	str	r2, [sp, #8]
 800c130:	4a06      	ldr	r2, [pc, #24]	; (800c14c <etharp_request_dst+0x40>)
 800c132:	9201      	str	r2, [sp, #4]
 800c134:	9300      	str	r3, [sp, #0]
 800c136:	4603      	mov	r3, r0
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f7ff ff4c 	bl	800bfd8 <etharp_raw>
 800c140:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c142:	4618      	mov	r0, r3
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	08010ae8 	.word	0x08010ae8

0800c150 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c15a:	4a05      	ldr	r2, [pc, #20]	; (800c170 <etharp_request+0x20>)
 800c15c:	6839      	ldr	r1, [r7, #0]
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f7ff ffd4 	bl	800c10c <etharp_request_dst>
 800c164:	4603      	mov	r3, r0
}
 800c166:	4618      	mov	r0, r3
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	08010ae0 	.word	0x08010ae0

0800c174 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b08e      	sub	sp, #56	; 0x38
 800c178:	af04      	add	r7, sp, #16
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
 800c17e:	4b93      	ldr	r3, [pc, #588]	; (800c3cc <icmp_input+0x258>)
 800c180:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c184:	3301      	adds	r3, #1
 800c186:	b29a      	uxth	r2, r3
 800c188:	4b90      	ldr	r3, [pc, #576]	; (800c3cc <icmp_input+0x258>)
 800c18a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c18e:	4b90      	ldr	r3, [pc, #576]	; (800c3d0 <icmp_input+0x25c>)
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800c194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	b29b      	uxth	r3, r3
 800c19a:	f003 030f 	and.w	r3, r3, #15
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800c1a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c1a6:	2b13      	cmp	r3, #19
 800c1a8:	f240 80ea 	bls.w	800c380 <icmp_input+0x20c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	895b      	ldrh	r3, [r3, #10]
 800c1b0:	2b03      	cmp	r3, #3
 800c1b2:	f240 80e7 	bls.w	800c384 <icmp_input+0x210>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c1c0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f000 80d4 	beq.w	800c372 <icmp_input+0x1fe>
 800c1ca:	2b08      	cmp	r3, #8
 800c1cc:	f040 80c0 	bne.w	800c350 <icmp_input+0x1dc>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800c1d0:	4b80      	ldr	r3, [pc, #512]	; (800c3d4 <icmp_input+0x260>)
 800c1d2:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c1d4:	4b7e      	ldr	r3, [pc, #504]	; (800c3d0 <icmp_input+0x25c>)
 800c1d6:	695b      	ldr	r3, [r3, #20]
 800c1d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c1dc:	2be0      	cmp	r3, #224	; 0xe0
 800c1de:	f000 80e0 	beq.w	800c3a2 <icmp_input+0x22e>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c1e2:	4b7b      	ldr	r3, [pc, #492]	; (800c3d0 <icmp_input+0x25c>)
 800c1e4:	695b      	ldr	r3, [r3, #20]
 800c1e6:	4a7a      	ldr	r2, [pc, #488]	; (800c3d0 <icmp_input+0x25c>)
 800c1e8:	6812      	ldr	r2, [r2, #0]
 800c1ea:	4611      	mov	r1, r2
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f000 fc73 	bl	800cad8 <ip4_addr_isbroadcast_u32>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f040 80d6 	bne.w	800c3a6 <icmp_input+0x232>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	891b      	ldrh	r3, [r3, #8]
 800c1fe:	2b07      	cmp	r3, #7
 800c200:	f240 80c2 	bls.w	800c388 <icmp_input+0x214>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c204:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c206:	330e      	adds	r3, #14
 800c208:	b29b      	uxth	r3, r3
 800c20a:	b21b      	sxth	r3, r3
 800c20c:	4619      	mov	r1, r3
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f7f9 fb7e 	bl	8005910 <pbuf_header>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d046      	beq.n	800c2a8 <icmp_input+0x134>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	891a      	ldrh	r2, [r3, #8]
 800c21e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c220:	4413      	add	r3, r2
 800c222:	b29b      	uxth	r3, r3
 800c224:	2200      	movs	r2, #0
 800c226:	4619      	mov	r1, r3
 800c228:	2002      	movs	r0, #2
 800c22a:	f7f9 f81d 	bl	8005268 <pbuf_alloc>
 800c22e:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800c230:	69bb      	ldr	r3, [r7, #24]
 800c232:	2b00      	cmp	r3, #0
 800c234:	f000 80b9 	beq.w	800c3aa <icmp_input+0x236>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	895b      	ldrh	r3, [r3, #10]
 800c23c:	461a      	mov	r2, r3
 800c23e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c240:	3308      	adds	r3, #8
 800c242:	429a      	cmp	r2, r3
 800c244:	d203      	bcs.n	800c24e <icmp_input+0xda>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800c246:	69b8      	ldr	r0, [r7, #24]
 800c248:	f7f9 fb86 	bl	8005958 <pbuf_free>
        goto icmperr;
 800c24c:	e0ae      	b.n	800c3ac <icmp_input+0x238>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c254:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c256:	4618      	mov	r0, r3
 800c258:	f001 fbc0 	bl	800d9dc <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800c25c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c25e:	425b      	negs	r3, r3
 800c260:	b29b      	uxth	r3, r3
 800c262:	b21b      	sxth	r3, r3
 800c264:	4619      	mov	r1, r3
 800c266:	69b8      	ldr	r0, [r7, #24]
 800c268:	f7f9 fb52 	bl	8005910 <pbuf_header>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d009      	beq.n	800c286 <icmp_input+0x112>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c272:	4b59      	ldr	r3, [pc, #356]	; (800c3d8 <icmp_input+0x264>)
 800c274:	22af      	movs	r2, #175	; 0xaf
 800c276:	4959      	ldr	r1, [pc, #356]	; (800c3dc <icmp_input+0x268>)
 800c278:	4859      	ldr	r0, [pc, #356]	; (800c3e0 <icmp_input+0x26c>)
 800c27a:	f001 fbc5 	bl	800da08 <iprintf>
        pbuf_free(r);
 800c27e:	69b8      	ldr	r0, [r7, #24]
 800c280:	f7f9 fb6a 	bl	8005958 <pbuf_free>
        goto icmperr;
 800c284:	e092      	b.n	800c3ac <icmp_input+0x238>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800c286:	6879      	ldr	r1, [r7, #4]
 800c288:	69b8      	ldr	r0, [r7, #24]
 800c28a:	f7f9 fc97 	bl	8005bbc <pbuf_copy>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d003      	beq.n	800c29c <icmp_input+0x128>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800c294:	69b8      	ldr	r0, [r7, #24]
 800c296:	f7f9 fb5f 	bl	8005958 <pbuf_free>
        goto icmperr;
 800c29a:	e087      	b.n	800c3ac <icmp_input+0x238>
      }
      /* free the original p */
      pbuf_free(p);
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f7f9 fb5b 	bl	8005958 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	607b      	str	r3, [r7, #4]
 800c2a6:	e015      	b.n	800c2d4 <icmp_input+0x160>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c2a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c2aa:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800c2ae:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c2b2:	33f2      	adds	r3, #242	; 0xf2
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	b21b      	sxth	r3, r3
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f7f9 fb28 	bl	8005910 <pbuf_header>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d006      	beq.n	800c2d4 <icmp_input+0x160>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c2c6:	4b44      	ldr	r3, [pc, #272]	; (800c3d8 <icmp_input+0x264>)
 800c2c8:	22c0      	movs	r2, #192	; 0xc0
 800c2ca:	4946      	ldr	r1, [pc, #280]	; (800c3e4 <icmp_input+0x270>)
 800c2cc:	4844      	ldr	r0, [pc, #272]	; (800c3e0 <icmp_input+0x26c>)
 800c2ce:	f001 fb9b 	bl	800da08 <iprintf>
        goto icmperr;
 800c2d2:	e06b      	b.n	800c3ac <icmp_input+0x238>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800c2da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c2de:	4619      	mov	r1, r3
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f7f9 fb15 	bl	8005910 <pbuf_header>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d144      	bne.n	800c376 <icmp_input+0x202>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c2fa:	4b35      	ldr	r3, [pc, #212]	; (800c3d0 <icmp_input+0x25c>)
 800c2fc:	691a      	ldr	r2, [r3, #16]
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	2200      	movs	r2, #0
 800c306:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	2200      	movs	r2, #0
 800c30c:	709a      	strb	r2, [r3, #2]
 800c30e:	2200      	movs	r2, #0
 800c310:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	22ff      	movs	r2, #255	; 0xff
 800c316:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	2200      	movs	r2, #0
 800c31c:	729a      	strb	r2, [r3, #10]
 800c31e:	2200      	movs	r2, #0
 800c320:	72da      	strb	r2, [r3, #11]
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
      }
#endif /* CHECKSUM_GEN_IP */

      ICMP_STATS_INC(icmp.xmit);
 800c322:	4b2a      	ldr	r3, [pc, #168]	; (800c3cc <icmp_input+0x258>)
 800c324:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c328:	3301      	adds	r3, #1
 800c32a:	b29a      	uxth	r2, r3
 800c32c:	4b27      	ldr	r3, [pc, #156]	; (800c3cc <icmp_input+0x258>)
 800c32e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	9302      	str	r3, [sp, #8]
 800c336:	2301      	movs	r3, #1
 800c338:	9301      	str	r3, [sp, #4]
 800c33a:	2300      	movs	r3, #0
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	23ff      	movs	r3, #255	; 0xff
 800c340:	2200      	movs	r2, #0
 800c342:	69f9      	ldr	r1, [r7, #28]
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 fae3 	bl	800c910 <ip4_output_if>
 800c34a:	4603      	mov	r3, r0
 800c34c:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800c34e:	e012      	b.n	800c376 <icmp_input+0x202>
    } else if (type == ICMP_AMR) {
      MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
 800c350:	4b1e      	ldr	r3, [pc, #120]	; (800c3cc <icmp_input+0x258>)
 800c352:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800c356:	3301      	adds	r3, #1
 800c358:	b29a      	uxth	r2, r3
 800c35a:	4b1c      	ldr	r3, [pc, #112]	; (800c3cc <icmp_input+0x258>)
 800c35c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
    ICMP_STATS_INC(icmp.drop);
 800c360:	4b1a      	ldr	r3, [pc, #104]	; (800c3cc <icmp_input+0x258>)
 800c362:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c366:	3301      	adds	r3, #1
 800c368:	b29a      	uxth	r2, r3
 800c36a:	4b18      	ldr	r3, [pc, #96]	; (800c3cc <icmp_input+0x258>)
 800c36c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 800c370:	e002      	b.n	800c378 <icmp_input+0x204>
    break;
 800c372:	bf00      	nop
 800c374:	e000      	b.n	800c378 <icmp_input+0x204>
    break;
 800c376:	bf00      	nop
  }
  pbuf_free(p);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f7f9 faed 	bl	8005958 <pbuf_free>
  return;
 800c37e:	e021      	b.n	800c3c4 <icmp_input+0x250>
    goto lenerr;
 800c380:	bf00      	nop
 800c382:	e002      	b.n	800c38a <icmp_input+0x216>
    goto lenerr;
 800c384:	bf00      	nop
 800c386:	e000      	b.n	800c38a <icmp_input+0x216>
      goto lenerr;
 800c388:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f7f9 fae4 	bl	8005958 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 800c390:	4b0e      	ldr	r3, [pc, #56]	; (800c3cc <icmp_input+0x258>)
 800c392:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c396:	3301      	adds	r3, #1
 800c398:	b29a      	uxth	r2, r3
 800c39a:	4b0c      	ldr	r3, [pc, #48]	; (800c3cc <icmp_input+0x258>)
 800c39c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c3a0:	e010      	b.n	800c3c4 <icmp_input+0x250>
      goto icmperr;
 800c3a2:	bf00      	nop
 800c3a4:	e002      	b.n	800c3ac <icmp_input+0x238>
      goto icmperr;
 800c3a6:	bf00      	nop
 800c3a8:	e000      	b.n	800c3ac <icmp_input+0x238>
        goto icmperr;
 800c3aa:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f7f9 fad3 	bl	8005958 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 800c3b2:	4b06      	ldr	r3, [pc, #24]	; (800c3cc <icmp_input+0x258>)
 800c3b4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	b29a      	uxth	r2, r3
 800c3bc:	4b03      	ldr	r3, [pc, #12]	; (800c3cc <icmp_input+0x258>)
 800c3be:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c3c2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c3c4:	3728      	adds	r7, #40	; 0x28
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	20006840 	.word	0x20006840
 800c3d0:	20003278 	.word	0x20003278
 800c3d4:	2000328c 	.word	0x2000328c
 800c3d8:	080105bc 	.word	0x080105bc
 800c3dc:	080105f4 	.word	0x080105f4
 800c3e0:	0801062c 	.word	0x0801062c
 800c3e4:	08010654 	.word	0x08010654

0800c3e8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c3f4:	78fb      	ldrb	r3, [r7, #3]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	2103      	movs	r1, #3
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 f814 	bl	800c428 <icmp_send_response>
}
 800c400:	bf00      	nop
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	460b      	mov	r3, r1
 800c412:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c414:	78fb      	ldrb	r3, [r7, #3]
 800c416:	461a      	mov	r2, r3
 800c418:	210b      	movs	r1, #11
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 f804 	bl	800c428 <icmp_send_response>
}
 800c420:	bf00      	nop
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b08c      	sub	sp, #48	; 0x30
 800c42c:	af04      	add	r7, sp, #16
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	460b      	mov	r3, r1
 800c432:	70fb      	strb	r3, [r7, #3]
 800c434:	4613      	mov	r3, r2
 800c436:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c438:	2200      	movs	r2, #0
 800c43a:	2124      	movs	r1, #36	; 0x24
 800c43c:	2001      	movs	r0, #1
 800c43e:	f7f8 ff13 	bl	8005268 <pbuf_alloc>
 800c442:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c444:	69fb      	ldr	r3, [r7, #28]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d054      	beq.n	800c4f4 <icmp_send_response+0xcc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	895b      	ldrh	r3, [r3, #10]
 800c44e:	2b23      	cmp	r3, #35	; 0x23
 800c450:	d806      	bhi.n	800c460 <icmp_send_response+0x38>
 800c452:	4b2a      	ldr	r3, [pc, #168]	; (800c4fc <icmp_send_response+0xd4>)
 800c454:	f240 1261 	movw	r2, #353	; 0x161
 800c458:	4929      	ldr	r1, [pc, #164]	; (800c500 <icmp_send_response+0xd8>)
 800c45a:	482a      	ldr	r0, [pc, #168]	; (800c504 <icmp_send_response+0xdc>)
 800c45c:	f001 fad4 	bl	800da08 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c466:	69fb      	ldr	r3, [r7, #28]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	78fa      	ldrb	r2, [r7, #3]
 800c470:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	78ba      	ldrb	r2, [r7, #2]
 800c476:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	2200      	movs	r2, #0
 800c47c:	711a      	strb	r2, [r3, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	2200      	movs	r2, #0
 800c486:	719a      	strb	r2, [r3, #6]
 800c488:	2200      	movs	r2, #0
 800c48a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c48c:	69fb      	ldr	r3, [r7, #28]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	f103 0008 	add.w	r0, r3, #8
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	221c      	movs	r2, #28
 800c49a:	4619      	mov	r1, r3
 800c49c:	f001 fa9e 	bl	800d9dc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c4a6:	f107 030c 	add.w	r3, r7, #12
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f000 f82e 	bl	800c50c <ip4_route>
 800c4b0:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d019      	beq.n	800c4ec <icmp_send_response+0xc4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	709a      	strb	r2, [r3, #2]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 800c4c2:	4b11      	ldr	r3, [pc, #68]	; (800c508 <icmp_send_response+0xe0>)
 800c4c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	b29a      	uxth	r2, r3
 800c4cc:	4b0e      	ldr	r3, [pc, #56]	; (800c508 <icmp_send_response+0xe0>)
 800c4ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c4d2:	f107 020c 	add.w	r2, r7, #12
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	9302      	str	r3, [sp, #8]
 800c4da:	2301      	movs	r3, #1
 800c4dc:	9301      	str	r3, [sp, #4]
 800c4de:	2300      	movs	r3, #0
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	23ff      	movs	r3, #255	; 0xff
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	69f8      	ldr	r0, [r7, #28]
 800c4e8:	f000 fa12 	bl	800c910 <ip4_output_if>
  }
  pbuf_free(q);
 800c4ec:	69f8      	ldr	r0, [r7, #28]
 800c4ee:	f7f9 fa33 	bl	8005958 <pbuf_free>
 800c4f2:	e000      	b.n	800c4f6 <icmp_send_response+0xce>
    return;
 800c4f4:	bf00      	nop
}
 800c4f6:	3720      	adds	r7, #32
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	080105bc 	.word	0x080105bc
 800c500:	08010688 	.word	0x08010688
 800c504:	0801062c 	.word	0x0801062c
 800c508:	20006840 	.word	0x20006840

0800c50c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b085      	sub	sp, #20
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800c514:	4b34      	ldr	r3, [pc, #208]	; (800c5e8 <ip4_route+0xdc>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	60fb      	str	r3, [r7, #12]
 800c51a:	e036      	b.n	800c58a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c522:	f003 0301 	and.w	r3, r3, #1
 800c526:	b2db      	uxtb	r3, r3
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d02b      	beq.n	800c584 <ip4_route+0x78>
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c532:	089b      	lsrs	r3, r3, #2
 800c534:	f003 0301 	and.w	r3, r3, #1
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d022      	beq.n	800c584 <ip4_route+0x78>
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	3304      	adds	r3, #4
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d01d      	beq.n	800c584 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681a      	ldr	r2, [r3, #0]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	3304      	adds	r3, #4
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	405a      	eors	r2, r3
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	3308      	adds	r3, #8
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4013      	ands	r3, r2
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d101      	bne.n	800c564 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	e03b      	b.n	800c5dc <ip4_route+0xd0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c56a:	f003 0302 	and.w	r3, r3, #2
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d108      	bne.n	800c584 <ip4_route+0x78>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	330c      	adds	r3, #12
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d101      	bne.n	800c584 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	e02b      	b.n	800c5dc <ip4_route+0xd0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	60fb      	str	r3, [r7, #12]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d1c5      	bne.n	800c51c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c590:	4b16      	ldr	r3, [pc, #88]	; (800c5ec <ip4_route+0xe0>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d015      	beq.n	800c5c4 <ip4_route+0xb8>
 800c598:	4b14      	ldr	r3, [pc, #80]	; (800c5ec <ip4_route+0xe0>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c5a0:	f003 0301 	and.w	r3, r3, #1
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d00d      	beq.n	800c5c4 <ip4_route+0xb8>
 800c5a8:	4b10      	ldr	r3, [pc, #64]	; (800c5ec <ip4_route+0xe0>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c5b0:	f003 0304 	and.w	r3, r3, #4
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d005      	beq.n	800c5c4 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800c5b8:	4b0c      	ldr	r3, [pc, #48]	; (800c5ec <ip4_route+0xe0>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3304      	adds	r3, #4
 800c5be:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d109      	bne.n	800c5d8 <ip4_route+0xcc>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 800c5c4:	4b0a      	ldr	r3, [pc, #40]	; (800c5f0 <ip4_route+0xe4>)
 800c5c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	b29a      	uxth	r2, r3
 800c5ce:	4b08      	ldr	r3, [pc, #32]	; (800c5f0 <ip4_route+0xe4>)
 800c5d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	e001      	b.n	800c5dc <ip4_route+0xd0>
  }

  return netif_default;
 800c5d8:	4b04      	ldr	r3, [pc, #16]	; (800c5ec <ip4_route+0xe0>)
 800c5da:	681b      	ldr	r3, [r3, #0]
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3714      	adds	r7, #20
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bc80      	pop	{r7}
 800c5e4:	4770      	bx	lr
 800c5e6:	bf00      	nop
 800c5e8:	20006834 	.word	0x20006834
 800c5ec:	20006838 	.word	0x20006838
 800c5f0:	20006840 	.word	0x20006840

0800c5f4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
 800c5fe:	4b97      	ldr	r3, [pc, #604]	; (800c85c <ip4_input+0x268>)
 800c600:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c604:	3301      	adds	r3, #1
 800c606:	b29a      	uxth	r2, r3
 800c608:	4b94      	ldr	r3, [pc, #592]	; (800c85c <ip4_input+0x268>)
 800c60a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	091b      	lsrs	r3, r3, #4
 800c61a:	b2db      	uxtb	r3, r3
 800c61c:	2b04      	cmp	r3, #4
 800c61e:	d014      	beq.n	800c64a <ip4_input+0x56>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7f9 f999 	bl	8005958 <pbuf_free>
    IP_STATS_INC(ip.err);
 800c626:	4b8d      	ldr	r3, [pc, #564]	; (800c85c <ip4_input+0x268>)
 800c628:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c62c:	3301      	adds	r3, #1
 800c62e:	b29a      	uxth	r2, r3
 800c630:	4b8a      	ldr	r3, [pc, #552]	; (800c85c <ip4_input+0x268>)
 800c632:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 800c636:	4b89      	ldr	r3, [pc, #548]	; (800c85c <ip4_input+0x268>)
 800c638:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800c63c:	3301      	adds	r3, #1
 800c63e:	b29a      	uxth	r2, r3
 800c640:	4b86      	ldr	r3, [pc, #536]	; (800c85c <ip4_input+0x268>)
 800c642:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c646:	2300      	movs	r3, #0
 800c648:	e15a      	b.n	800c900 <ip4_input+0x30c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	b29b      	uxth	r3, r3
 800c650:	f003 030f 	and.w	r3, r3, #15
 800c654:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800c656:	897b      	ldrh	r3, [r7, #10]
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	885b      	ldrh	r3, [r3, #2]
 800c660:	b29b      	uxth	r3, r3
 800c662:	4618      	mov	r0, r3
 800c664:	f7f7 ffa7 	bl	80045b6 <lwip_htons>
 800c668:	4603      	mov	r3, r0
 800c66a:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	891b      	ldrh	r3, [r3, #8]
 800c670:	893a      	ldrh	r2, [r7, #8]
 800c672:	429a      	cmp	r2, r3
 800c674:	d204      	bcs.n	800c680 <ip4_input+0x8c>
    pbuf_realloc(p, iphdr_len);
 800c676:	893b      	ldrh	r3, [r7, #8]
 800c678:	4619      	mov	r1, r3
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f7f8 fff8 	bl	8005670 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	895b      	ldrh	r3, [r3, #10]
 800c684:	897a      	ldrh	r2, [r7, #10]
 800c686:	429a      	cmp	r2, r3
 800c688:	d807      	bhi.n	800c69a <ip4_input+0xa6>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	891b      	ldrh	r3, [r3, #8]
 800c68e:	893a      	ldrh	r2, [r7, #8]
 800c690:	429a      	cmp	r2, r3
 800c692:	d802      	bhi.n	800c69a <ip4_input+0xa6>
 800c694:	897b      	ldrh	r3, [r7, #10]
 800c696:	2b13      	cmp	r3, #19
 800c698:	d814      	bhi.n	800c6c4 <ip4_input+0xd0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7f9 f95c 	bl	8005958 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 800c6a0:	4b6e      	ldr	r3, [pc, #440]	; (800c85c <ip4_input+0x268>)
 800c6a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	b29a      	uxth	r2, r3
 800c6aa:	4b6c      	ldr	r3, [pc, #432]	; (800c85c <ip4_input+0x268>)
 800c6ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 800c6b0:	4b6a      	ldr	r3, [pc, #424]	; (800c85c <ip4_input+0x268>)
 800c6b2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	b29a      	uxth	r2, r3
 800c6ba:	4b68      	ldr	r3, [pc, #416]	; (800c85c <ip4_input+0x268>)
 800c6bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	e11d      	b.n	800c900 <ip4_input+0x30c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	691b      	ldr	r3, [r3, #16]
 800c6c8:	4a65      	ldr	r2, [pc, #404]	; (800c860 <ip4_input+0x26c>)
 800c6ca:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	4a63      	ldr	r2, [pc, #396]	; (800c860 <ip4_input+0x26c>)
 800c6d2:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c6d4:	4b62      	ldr	r3, [pc, #392]	; (800c860 <ip4_input+0x26c>)
 800c6d6:	695b      	ldr	r3, [r3, #20]
 800c6d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6dc:	2be0      	cmp	r3, #224	; 0xe0
 800c6de:	d112      	bne.n	800c706 <ip4_input+0x112>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c6e6:	f003 0301 	and.w	r3, r3, #1
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d007      	beq.n	800c700 <ip4_input+0x10c>
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	3304      	adds	r3, #4
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d002      	beq.n	800c700 <ip4_input+0x10c>
      netif = inp;
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	613b      	str	r3, [r7, #16]
 800c6fe:	e041      	b.n	800c784 <ip4_input+0x190>
    } else {
      netif = NULL;
 800c700:	2300      	movs	r3, #0
 800c702:	613b      	str	r3, [r7, #16]
 800c704:	e03e      	b.n	800c784 <ip4_input+0x190>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800c706:	2301      	movs	r3, #1
 800c708:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c714:	f003 0301 	and.w	r3, r3, #1
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d014      	beq.n	800c748 <ip4_input+0x154>
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	3304      	adds	r3, #4
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00f      	beq.n	800c748 <ip4_input+0x154>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c728:	4b4d      	ldr	r3, [pc, #308]	; (800c860 <ip4_input+0x26c>)
 800c72a:	695a      	ldr	r2, [r3, #20]
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	3304      	adds	r3, #4
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	429a      	cmp	r2, r3
 800c734:	d026      	beq.n	800c784 <ip4_input+0x190>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c736:	4b4a      	ldr	r3, [pc, #296]	; (800c860 <ip4_input+0x26c>)
 800c738:	695b      	ldr	r3, [r3, #20]
 800c73a:	6939      	ldr	r1, [r7, #16]
 800c73c:	4618      	mov	r0, r3
 800c73e:	f000 f9cb 	bl	800cad8 <ip4_addr_isbroadcast_u32>
 800c742:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c744:	2b00      	cmp	r3, #0
 800c746:	d11d      	bne.n	800c784 <ip4_input+0x190>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00d      	beq.n	800c76a <ip4_input+0x176>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800c74e:	4b44      	ldr	r3, [pc, #272]	; (800c860 <ip4_input+0x26c>)
 800c750:	695b      	ldr	r3, [r3, #20]
 800c752:	b2db      	uxtb	r3, r3
 800c754:	2b7f      	cmp	r3, #127	; 0x7f
 800c756:	d102      	bne.n	800c75e <ip4_input+0x16a>
          netif = NULL;
 800c758:	2300      	movs	r3, #0
 800c75a:	613b      	str	r3, [r7, #16]
          break;
 800c75c:	e012      	b.n	800c784 <ip4_input+0x190>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800c75e:	2300      	movs	r3, #0
 800c760:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800c762:	4b40      	ldr	r3, [pc, #256]	; (800c864 <ip4_input+0x270>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	613b      	str	r3, [r7, #16]
 800c768:	e002      	b.n	800c770 <ip4_input+0x17c>
      } else {
        netif = netif->next;
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800c770:	693a      	ldr	r2, [r7, #16]
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	429a      	cmp	r2, r3
 800c776:	d102      	bne.n	800c77e <ip4_input+0x18a>
        netif = netif->next;
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d1c4      	bne.n	800c70e <ip4_input+0x11a>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c784:	4b36      	ldr	r3, [pc, #216]	; (800c860 <ip4_input+0x26c>)
 800c786:	691b      	ldr	r3, [r3, #16]
 800c788:	6839      	ldr	r1, [r7, #0]
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 f9a4 	bl	800cad8 <ip4_addr_isbroadcast_u32>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d105      	bne.n	800c7a2 <ip4_input+0x1ae>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c796:	4b32      	ldr	r3, [pc, #200]	; (800c860 <ip4_input+0x26c>)
 800c798:	691b      	ldr	r3, [r3, #16]
 800c79a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c79e:	2be0      	cmp	r3, #224	; 0xe0
 800c7a0:	d10c      	bne.n	800c7bc <ip4_input+0x1c8>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f7f9 f8d8 	bl	8005958 <pbuf_free>
      IP_STATS_INC(ip.drop);
 800c7a8:	4b2c      	ldr	r3, [pc, #176]	; (800c85c <ip4_input+0x268>)
 800c7aa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	b29a      	uxth	r2, r3
 800c7b2:	4b2a      	ldr	r3, [pc, #168]	; (800c85c <ip4_input+0x268>)
 800c7b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	e0a1      	b.n	800c900 <ip4_input+0x30c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d10c      	bne.n	800c7dc <ip4_input+0x1e8>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, iphdr, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 800c7c2:	4b26      	ldr	r3, [pc, #152]	; (800c85c <ip4_input+0x268>)
 800c7c4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	b29a      	uxth	r2, r3
 800c7cc:	4b23      	ldr	r3, [pc, #140]	; (800c85c <ip4_input+0x268>)
 800c7ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7f9 f8c0 	bl	8005958 <pbuf_free>
    return ERR_OK;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	e091      	b.n	800c900 <ip4_input+0x30c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	88db      	ldrh	r3, [r3, #6]
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d00b      	beq.n	800c806 <ip4_input+0x212>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 fcbe 	bl	800d170 <ip4_reass>
 800c7f4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d101      	bne.n	800c800 <ip4_input+0x20c>
      return ERR_OK;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	e07f      	b.n	800c900 <ip4_input+0x30c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c806:	4a16      	ldr	r2, [pc, #88]	; (800c860 <ip4_input+0x26c>)
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c80c:	4a14      	ldr	r2, [pc, #80]	; (800c860 <ip4_input+0x26c>)
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c812:	4a13      	ldr	r2, [pc, #76]	; (800c860 <ip4_input+0x26c>)
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	f003 030f 	and.w	r3, r3, #15
 800c822:	b29b      	uxth	r3, r3
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	b29a      	uxth	r2, r3
 800c828:	4b0d      	ldr	r3, [pc, #52]	; (800c860 <ip4_input+0x26c>)
 800c82a:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800c82c:	897b      	ldrh	r3, [r7, #10]
 800c82e:	425b      	negs	r3, r3
 800c830:	b29b      	uxth	r3, r3
 800c832:	b21b      	sxth	r3, r3
 800c834:	4619      	mov	r1, r3
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f7f9 f86a 	bl	8005910 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	7a5b      	ldrb	r3, [r3, #9]
 800c840:	2b11      	cmp	r3, #17
 800c842:	d006      	beq.n	800c852 <ip4_input+0x25e>
 800c844:	2b11      	cmp	r3, #17
 800c846:	dc19      	bgt.n	800c87c <ip4_input+0x288>
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d012      	beq.n	800c872 <ip4_input+0x27e>
 800c84c:	2b06      	cmp	r3, #6
 800c84e:	d00b      	beq.n	800c868 <ip4_input+0x274>
 800c850:	e014      	b.n	800c87c <ip4_input+0x288>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800c852:	6839      	ldr	r1, [r7, #0]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f7fe f981 	bl	800ab5c <udp_input>
      break;
 800c85a:	e03e      	b.n	800c8da <ip4_input+0x2e6>
 800c85c:	20006840 	.word	0x20006840
 800c860:	20003278 	.word	0x20003278
 800c864:	20006834 	.word	0x20006834
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800c868:	6839      	ldr	r1, [r7, #0]
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f7fa fd82 	bl	8007374 <tcp_input>
      break;
 800c870:	e033      	b.n	800c8da <ip4_input+0x2e6>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800c872:	6839      	ldr	r1, [r7, #0]
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f7ff fc7d 	bl	800c174 <icmp_input>
      break;
 800c87a:	e02e      	b.n	800c8da <ip4_input+0x2e6>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c87c:	4b22      	ldr	r3, [pc, #136]	; (800c908 <ip4_input+0x314>)
 800c87e:	695b      	ldr	r3, [r3, #20]
 800c880:	6939      	ldr	r1, [r7, #16]
 800c882:	4618      	mov	r0, r3
 800c884:	f000 f928 	bl	800cad8 <ip4_addr_isbroadcast_u32>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d112      	bne.n	800c8b4 <ip4_input+0x2c0>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c88e:	4b1e      	ldr	r3, [pc, #120]	; (800c908 <ip4_input+0x314>)
 800c890:	695b      	ldr	r3, [r3, #20]
 800c892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c896:	2be0      	cmp	r3, #224	; 0xe0
 800c898:	d00c      	beq.n	800c8b4 <ip4_input+0x2c0>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800c89a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c89e:	4619      	mov	r1, r3
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f7f9 f847 	bl	8005934 <pbuf_header_force>
        p->payload = iphdr;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	697a      	ldr	r2, [r7, #20]
 800c8aa:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c8ac:	2102      	movs	r1, #2
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7ff fd9a 	bl	800c3e8 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f7f9 f84f 	bl	8005958 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
 800c8ba:	4b14      	ldr	r3, [pc, #80]	; (800c90c <ip4_input+0x318>)
 800c8bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	4b11      	ldr	r3, [pc, #68]	; (800c90c <ip4_input+0x318>)
 800c8c6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
      IP_STATS_INC(ip.drop);
 800c8ca:	4b10      	ldr	r3, [pc, #64]	; (800c90c <ip4_input+0x318>)
 800c8cc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	b29a      	uxth	r2, r3
 800c8d4:	4b0d      	ldr	r3, [pc, #52]	; (800c90c <ip4_input+0x318>)
 800c8d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c8da:	4b0b      	ldr	r3, [pc, #44]	; (800c908 <ip4_input+0x314>)
 800c8dc:	2200      	movs	r2, #0
 800c8de:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c8e0:	4b09      	ldr	r3, [pc, #36]	; (800c908 <ip4_input+0x314>)
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c8e6:	4b08      	ldr	r3, [pc, #32]	; (800c908 <ip4_input+0x314>)
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c8ec:	4b06      	ldr	r3, [pc, #24]	; (800c908 <ip4_input+0x314>)
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c8f2:	4b05      	ldr	r3, [pc, #20]	; (800c908 <ip4_input+0x314>)
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c8f8:	4b03      	ldr	r3, [pc, #12]	; (800c908 <ip4_input+0x314>)
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	4618      	mov	r0, r3
 800c902:	3718      	adds	r7, #24
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	20003278 	.word	0x20003278
 800c90c:	20006840 	.word	0x20006840

0800c910 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b08a      	sub	sp, #40	; 0x28
 800c914:	af04      	add	r7, sp, #16
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	607a      	str	r2, [r7, #4]
 800c91c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d009      	beq.n	800c93c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d003      	beq.n	800c936 <ip4_output_if+0x26>
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d102      	bne.n	800c93c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c938:	3304      	adds	r3, #4
 800c93a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c93c:	78fa      	ldrb	r2, [r7, #3]
 800c93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c940:	9302      	str	r3, [sp, #8]
 800c942:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c946:	9301      	str	r3, [sp, #4]
 800c948:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c94c:	9300      	str	r3, [sp, #0]
 800c94e:	4613      	mov	r3, r2
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	6979      	ldr	r1, [r7, #20]
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f000 f805 	bl	800c964 <ip4_output_if_src>
 800c95a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3718      	adds	r7, #24
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b088      	sub	sp, #32
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
 800c970:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	89db      	ldrh	r3, [r3, #14]
 800c976:	2b01      	cmp	r3, #1
 800c978:	d006      	beq.n	800c988 <ip4_output_if_src+0x24>
 800c97a:	4b50      	ldr	r3, [pc, #320]	; (800cabc <ip4_output_if_src+0x158>)
 800c97c:	f240 3233 	movw	r2, #819	; 0x333
 800c980:	494f      	ldr	r1, [pc, #316]	; (800cac0 <ip4_output_if_src+0x15c>)
 800c982:	4850      	ldr	r0, [pc, #320]	; (800cac4 <ip4_output_if_src+0x160>)
 800c984:	f001 f840 	bl	800da08 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d068      	beq.n	800ca60 <ip4_output_if_src+0xfc>
    u16_t ip_hlen = IP_HLEN;
 800c98e:	2314      	movs	r3, #20
 800c990:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800c992:	2114      	movs	r1, #20
 800c994:	68f8      	ldr	r0, [r7, #12]
 800c996:	f7f8 ffbb 	bl	8005910 <pbuf_header>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00a      	beq.n	800c9b6 <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 800c9a0:	4b49      	ldr	r3, [pc, #292]	; (800cac8 <ip4_output_if_src+0x164>)
 800c9a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	b29a      	uxth	r2, r3
 800c9aa:	4b47      	ldr	r3, [pc, #284]	; (800cac8 <ip4_output_if_src+0x164>)
 800c9ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c9b0:	f06f 0301 	mvn.w	r3, #1
 800c9b4:	e07d      	b.n	800cab2 <ip4_output_if_src+0x14e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	895b      	ldrh	r3, [r3, #10]
 800c9c0:	2b13      	cmp	r3, #19
 800c9c2:	d806      	bhi.n	800c9d2 <ip4_output_if_src+0x6e>
 800c9c4:	4b3d      	ldr	r3, [pc, #244]	; (800cabc <ip4_output_if_src+0x158>)
 800c9c6:	f44f 7258 	mov.w	r2, #864	; 0x360
 800c9ca:	4940      	ldr	r1, [pc, #256]	; (800cacc <ip4_output_if_src+0x168>)
 800c9cc:	483d      	ldr	r0, [pc, #244]	; (800cac4 <ip4_output_if_src+0x160>)
 800c9ce:	f001 f81b 	bl	800da08 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	78fa      	ldrb	r2, [r7, #3]
 800c9d6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c9de:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c9e8:	8b7b      	ldrh	r3, [r7, #26]
 800c9ea:	089b      	lsrs	r3, r3, #2
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9f4:	b2da      	uxtb	r2, r3
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ca00:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	891b      	ldrh	r3, [r3, #8]
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7f7 fdd5 	bl	80045b6 <lwip_htons>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	461a      	mov	r2, r3
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	2200      	movs	r2, #0
 800ca18:	719a      	strb	r2, [r3, #6]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ca1e:	4b2c      	ldr	r3, [pc, #176]	; (800cad0 <ip4_output_if_src+0x16c>)
 800ca20:	881b      	ldrh	r3, [r3, #0]
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7f7 fdc7 	bl	80045b6 <lwip_htons>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ca30:	4b27      	ldr	r3, [pc, #156]	; (800cad0 <ip4_output_if_src+0x16c>)
 800ca32:	881b      	ldrh	r3, [r3, #0]
 800ca34:	3301      	adds	r3, #1
 800ca36:	b29a      	uxth	r2, r3
 800ca38:	4b25      	ldr	r3, [pc, #148]	; (800cad0 <ip4_output_if_src+0x16c>)
 800ca3a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d104      	bne.n	800ca4c <ip4_output_if_src+0xe8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ca42:	4b24      	ldr	r3, [pc, #144]	; (800cad4 <ip4_output_if_src+0x170>)
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	69fb      	ldr	r3, [r7, #28]
 800ca48:	60da      	str	r2, [r3, #12]
 800ca4a:	e003      	b.n	800ca54 <ip4_output_if_src+0xf0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	2200      	movs	r2, #0
 800ca58:	729a      	strb	r2, [r3, #10]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	72da      	strb	r2, [r3, #11]
 800ca5e:	e008      	b.n	800ca72 <ip4_output_if_src+0x10e>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ca66:	69fb      	ldr	r3, [r7, #28]
 800ca68:	691b      	ldr	r3, [r3, #16]
 800ca6a:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ca6c:	f107 0314 	add.w	r3, r7, #20
 800ca70:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 800ca72:	4b15      	ldr	r3, [pc, #84]	; (800cac8 <ip4_output_if_src+0x164>)
 800ca74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ca78:	3301      	adds	r3, #1
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	4b12      	ldr	r3, [pc, #72]	; (800cac8 <ip4_output_if_src+0x164>)
 800ca7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ca82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00c      	beq.n	800caa4 <ip4_output_if_src+0x140>
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	891a      	ldrh	r2, [r3, #8]
 800ca8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d906      	bls.n	800caa4 <ip4_output_if_src+0x140>
    return ip4_frag(p, netif, dest);
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ca9a:	68f8      	ldr	r0, [r7, #12]
 800ca9c:	f000 fd36 	bl	800d50c <ip4_frag>
 800caa0:	4603      	mov	r3, r0
 800caa2:	e006      	b.n	800cab2 <ip4_output_if_src+0x14e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800caa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa6:	695b      	ldr	r3, [r3, #20]
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	68f9      	ldr	r1, [r7, #12]
 800caac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800caae:	4798      	blx	r3
 800cab0:	4603      	mov	r3, r0
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3720      	adds	r7, #32
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop
 800cabc:	080106b4 	.word	0x080106b4
 800cac0:	080106e8 	.word	0x080106e8
 800cac4:	080106f4 	.word	0x080106f4
 800cac8:	20006840 	.word	0x20006840
 800cacc:	0801071c 	.word	0x0801071c
 800cad0:	20006a6a 	.word	0x20006a6a
 800cad4:	08010adc 	.word	0x08010adc

0800cad8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800cad8:	b480      	push	{r7}
 800cada:	b085      	sub	sp, #20
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800caec:	d002      	beq.n	800caf4 <ip4_addr_isbroadcast_u32+0x1c>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d101      	bne.n	800caf8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800caf4:	2301      	movs	r3, #1
 800caf6:	e02a      	b.n	800cb4e <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cafe:	f003 0302 	and.w	r3, r3, #2
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d101      	bne.n	800cb0a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800cb06:	2300      	movs	r3, #0
 800cb08:	e021      	b.n	800cb4e <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	3304      	adds	r3, #4
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d101      	bne.n	800cb1a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	e019      	b.n	800cb4e <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800cb1a:	68fa      	ldr	r2, [r7, #12]
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	3304      	adds	r3, #4
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	405a      	eors	r2, r3
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	3308      	adds	r3, #8
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4013      	ands	r3, r2
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d10d      	bne.n	800cb4c <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	3308      	adds	r3, #8
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	43da      	mvns	r2, r3
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	3308      	adds	r3, #8
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d101      	bne.n	800cb4c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	e000      	b.n	800cb4e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800cb4c:	2300      	movs	r3, #0
  }
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3714      	adds	r7, #20
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bc80      	pop	{r7}
 800cb56:	4770      	bx	lr

0800cb58 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800cb62:	4b12      	ldr	r3, [pc, #72]	; (800cbac <ip_reass_tmr+0x54>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800cb68:	e018      	b.n	800cb9c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	7fdb      	ldrb	r3, [r3, #31]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d00b      	beq.n	800cb8a <ip_reass_tmr+0x32>
      r->timer--;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	7fdb      	ldrb	r3, [r3, #31]
 800cb76:	3b01      	subs	r3, #1
 800cb78:	b2da      	uxtb	r2, r3
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	60fb      	str	r3, [r7, #12]
 800cb88:	e008      	b.n	800cb9c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800cb94:	68b9      	ldr	r1, [r7, #8]
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 f80a 	bl	800cbb0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d1e3      	bne.n	800cb6a <ip_reass_tmr+0x12>
     }
   }
}
 800cba2:	bf00      	nop
 800cba4:	bf00      	nop
 800cba6:	3710      	adds	r7, #16
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	20006a6c 	.word	0x20006a6c

0800cbb0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b088      	sub	sp, #32
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800cbbe:	683a      	ldr	r2, [r7, #0]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d105      	bne.n	800cbd2 <ip_reass_free_complete_datagram+0x22>
 800cbc6:	4b45      	ldr	r3, [pc, #276]	; (800ccdc <ip_reass_free_complete_datagram+0x12c>)
 800cbc8:	22ab      	movs	r2, #171	; 0xab
 800cbca:	4945      	ldr	r1, [pc, #276]	; (800cce0 <ip_reass_free_complete_datagram+0x130>)
 800cbcc:	4845      	ldr	r0, [pc, #276]	; (800cce4 <ip_reass_free_complete_datagram+0x134>)
 800cbce:	f000 ff1b 	bl	800da08 <iprintf>
  if (prev != NULL) {
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d00a      	beq.n	800cbee <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d005      	beq.n	800cbee <ip_reass_free_complete_datagram+0x3e>
 800cbe2:	4b3e      	ldr	r3, [pc, #248]	; (800ccdc <ip_reass_free_complete_datagram+0x12c>)
 800cbe4:	22ad      	movs	r2, #173	; 0xad
 800cbe6:	4940      	ldr	r1, [pc, #256]	; (800cce8 <ip_reass_free_complete_datagram+0x138>)
 800cbe8:	483e      	ldr	r0, [pc, #248]	; (800cce4 <ip_reass_free_complete_datagram+0x134>)
 800cbea:	f000 ff0d 	bl	800da08 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	889b      	ldrh	r3, [r3, #4]
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d12a      	bne.n	800cc56 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	6858      	ldr	r0, [r3, #4]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	3308      	adds	r3, #8
 800cc16:	2214      	movs	r2, #20
 800cc18:	4619      	mov	r1, r3
 800cc1a:	f000 fedf 	bl	800d9dc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800cc1e:	2101      	movs	r1, #1
 800cc20:	69b8      	ldr	r0, [r7, #24]
 800cc22:	f7ff fbf1 	bl	800c408 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800cc26:	69b8      	ldr	r0, [r7, #24]
 800cc28:	f7f8 ff2a 	bl	8005a80 <pbuf_clen>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cc30:	8bfa      	ldrh	r2, [r7, #30]
 800cc32:	8a7b      	ldrh	r3, [r7, #18]
 800cc34:	4413      	add	r3, r2
 800cc36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc3a:	db05      	blt.n	800cc48 <ip_reass_free_complete_datagram+0x98>
 800cc3c:	4b27      	ldr	r3, [pc, #156]	; (800ccdc <ip_reass_free_complete_datagram+0x12c>)
 800cc3e:	22bc      	movs	r2, #188	; 0xbc
 800cc40:	492a      	ldr	r1, [pc, #168]	; (800ccec <ip_reass_free_complete_datagram+0x13c>)
 800cc42:	4828      	ldr	r0, [pc, #160]	; (800cce4 <ip_reass_free_complete_datagram+0x134>)
 800cc44:	f000 fee0 	bl	800da08 <iprintf>
    pbufs_freed += clen;
 800cc48:	8bfa      	ldrh	r2, [r7, #30]
 800cc4a:	8a7b      	ldrh	r3, [r7, #18]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800cc50:	69b8      	ldr	r0, [r7, #24]
 800cc52:	f7f8 fe81 	bl	8005958 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800cc5c:	e01f      	b.n	800cc9e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800cc5e:	69bb      	ldr	r3, [r7, #24]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	617b      	str	r3, [r7, #20]
    pcur = p;
 800cc64:	69bb      	ldr	r3, [r7, #24]
 800cc66:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800cc6e:	68f8      	ldr	r0, [r7, #12]
 800cc70:	f7f8 ff06 	bl	8005a80 <pbuf_clen>
 800cc74:	4603      	mov	r3, r0
 800cc76:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cc78:	8bfa      	ldrh	r2, [r7, #30]
 800cc7a:	8a7b      	ldrh	r3, [r7, #18]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc82:	db05      	blt.n	800cc90 <ip_reass_free_complete_datagram+0xe0>
 800cc84:	4b15      	ldr	r3, [pc, #84]	; (800ccdc <ip_reass_free_complete_datagram+0x12c>)
 800cc86:	22cc      	movs	r2, #204	; 0xcc
 800cc88:	4918      	ldr	r1, [pc, #96]	; (800ccec <ip_reass_free_complete_datagram+0x13c>)
 800cc8a:	4816      	ldr	r0, [pc, #88]	; (800cce4 <ip_reass_free_complete_datagram+0x134>)
 800cc8c:	f000 febc 	bl	800da08 <iprintf>
    pbufs_freed += clen;
 800cc90:	8bfa      	ldrh	r2, [r7, #30]
 800cc92:	8a7b      	ldrh	r3, [r7, #18]
 800cc94:	4413      	add	r3, r2
 800cc96:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800cc98:	68f8      	ldr	r0, [r7, #12]
 800cc9a:	f7f8 fe5d 	bl	8005958 <pbuf_free>
  while (p != NULL) {
 800cc9e:	69bb      	ldr	r3, [r7, #24]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d1dc      	bne.n	800cc5e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800cca4:	6839      	ldr	r1, [r7, #0]
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 f8ca 	bl	800ce40 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800ccac:	4b10      	ldr	r3, [pc, #64]	; (800ccf0 <ip_reass_free_complete_datagram+0x140>)
 800ccae:	881b      	ldrh	r3, [r3, #0]
 800ccb0:	8bfa      	ldrh	r2, [r7, #30]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d905      	bls.n	800ccc2 <ip_reass_free_complete_datagram+0x112>
 800ccb6:	4b09      	ldr	r3, [pc, #36]	; (800ccdc <ip_reass_free_complete_datagram+0x12c>)
 800ccb8:	22d2      	movs	r2, #210	; 0xd2
 800ccba:	490e      	ldr	r1, [pc, #56]	; (800ccf4 <ip_reass_free_complete_datagram+0x144>)
 800ccbc:	4809      	ldr	r0, [pc, #36]	; (800cce4 <ip_reass_free_complete_datagram+0x134>)
 800ccbe:	f000 fea3 	bl	800da08 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800ccc2:	4b0b      	ldr	r3, [pc, #44]	; (800ccf0 <ip_reass_free_complete_datagram+0x140>)
 800ccc4:	881a      	ldrh	r2, [r3, #0]
 800ccc6:	8bfb      	ldrh	r3, [r7, #30]
 800ccc8:	1ad3      	subs	r3, r2, r3
 800ccca:	b29a      	uxth	r2, r3
 800cccc:	4b08      	ldr	r3, [pc, #32]	; (800ccf0 <ip_reass_free_complete_datagram+0x140>)
 800ccce:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ccd0:	8bfb      	ldrh	r3, [r7, #30]
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3720      	adds	r7, #32
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	0801074c 	.word	0x0801074c
 800cce0:	08010788 	.word	0x08010788
 800cce4:	08010794 	.word	0x08010794
 800cce8:	080107bc 	.word	0x080107bc
 800ccec:	080107d0 	.word	0x080107d0
 800ccf0:	20006a70 	.word	0x20006a70
 800ccf4:	080107f0 	.word	0x080107f0

0800ccf8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b08a      	sub	sp, #40	; 0x28
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800cd02:	2300      	movs	r3, #0
 800cd04:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800cd06:	2300      	movs	r3, #0
 800cd08:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800cd12:	2300      	movs	r3, #0
 800cd14:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800cd16:	4b28      	ldr	r3, [pc, #160]	; (800cdb8 <ip_reass_remove_oldest_datagram+0xc0>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800cd1c:	e030      	b.n	800cd80 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800cd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd20:	695a      	ldr	r2, [r3, #20]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d10c      	bne.n	800cd44 <ip_reass_remove_oldest_datagram+0x4c>
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2c:	699a      	ldr	r2, [r3, #24]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	691b      	ldr	r3, [r3, #16]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d106      	bne.n	800cd44 <ip_reass_remove_oldest_datagram+0x4c>
 800cd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd38:	899a      	ldrh	r2, [r3, #12]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	889b      	ldrh	r3, [r3, #4]
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d014      	beq.n	800cd6e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	3301      	adds	r3, #1
 800cd48:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800cd4a:	6a3b      	ldr	r3, [r7, #32]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d104      	bne.n	800cd5a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800cd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd52:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	61bb      	str	r3, [r7, #24]
 800cd58:	e009      	b.n	800cd6e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800cd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5c:	7fda      	ldrb	r2, [r3, #31]
 800cd5e:	6a3b      	ldr	r3, [r7, #32]
 800cd60:	7fdb      	ldrb	r3, [r3, #31]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d803      	bhi.n	800cd6e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800cd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd68:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cd6a:	69fb      	ldr	r3, [r7, #28]
 800cd6c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800cd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d001      	beq.n	800cd7a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800cd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd78:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800cd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d1cb      	bne.n	800cd1e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800cd86:	6a3b      	ldr	r3, [r7, #32]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d008      	beq.n	800cd9e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800cd8c:	69b9      	ldr	r1, [r7, #24]
 800cd8e:	6a38      	ldr	r0, [r7, #32]
 800cd90:	f7ff ff0e 	bl	800cbb0 <ip_reass_free_complete_datagram>
 800cd94:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800cd96:	697a      	ldr	r2, [r7, #20]
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	4413      	add	r3, r2
 800cd9c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800cd9e:	697a      	ldr	r2, [r7, #20]
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	da02      	bge.n	800cdac <ip_reass_remove_oldest_datagram+0xb4>
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	dcac      	bgt.n	800cd06 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800cdac:	697b      	ldr	r3, [r7, #20]
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3728      	adds	r7, #40	; 0x28
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	20006a6c 	.word	0x20006a6c

0800cdbc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cdc6:	2004      	movs	r0, #4
 800cdc8:	f7f8 f836 	bl	8004e38 <memp_malloc>
 800cdcc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d116      	bne.n	800ce02 <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800cdd4:	6839      	ldr	r1, [r7, #0]
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f7ff ff8e 	bl	800ccf8 <ip_reass_remove_oldest_datagram>
 800cddc:	4602      	mov	r2, r0
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	4293      	cmp	r3, r2
 800cde2:	dc03      	bgt.n	800cdec <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cde4:	2004      	movs	r0, #4
 800cde6:	f7f8 f827 	bl	8004e38 <memp_malloc>
 800cdea:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d107      	bne.n	800ce02 <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 800cdf2:	4b11      	ldr	r3, [pc, #68]	; (800ce38 <ip_reass_enqueue_new_datagram+0x7c>)
 800cdf4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	4b0f      	ldr	r3, [pc, #60]	; (800ce38 <ip_reass_enqueue_new_datagram+0x7c>)
 800cdfc:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	e016      	b.n	800ce30 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800ce02:	2220      	movs	r2, #32
 800ce04:	2100      	movs	r1, #0
 800ce06:	68f8      	ldr	r0, [r7, #12]
 800ce08:	f000 fdf6 	bl	800d9f8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2203      	movs	r2, #3
 800ce10:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ce12:	4b0a      	ldr	r3, [pc, #40]	; (800ce3c <ip_reass_enqueue_new_datagram+0x80>)
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ce1a:	4a08      	ldr	r2, [pc, #32]	; (800ce3c <ip_reass_enqueue_new_datagram+0x80>)
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	3308      	adds	r3, #8
 800ce24:	2214      	movs	r2, #20
 800ce26:	6879      	ldr	r1, [r7, #4]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f000 fdd7 	bl	800d9dc <memcpy>
  return ipr;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	20006840 	.word	0x20006840
 800ce3c:	20006a6c 	.word	0x20006a6c

0800ce40 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800ce4a:	4b10      	ldr	r3, [pc, #64]	; (800ce8c <ip_reass_dequeue_datagram+0x4c>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d104      	bne.n	800ce5e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a0c      	ldr	r2, [pc, #48]	; (800ce8c <ip_reass_dequeue_datagram+0x4c>)
 800ce5a:	6013      	str	r3, [r2, #0]
 800ce5c:	e00d      	b.n	800ce7a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d106      	bne.n	800ce72 <ip_reass_dequeue_datagram+0x32>
 800ce64:	4b0a      	ldr	r3, [pc, #40]	; (800ce90 <ip_reass_dequeue_datagram+0x50>)
 800ce66:	f240 1245 	movw	r2, #325	; 0x145
 800ce6a:	490a      	ldr	r1, [pc, #40]	; (800ce94 <ip_reass_dequeue_datagram+0x54>)
 800ce6c:	480a      	ldr	r0, [pc, #40]	; (800ce98 <ip_reass_dequeue_datagram+0x58>)
 800ce6e:	f000 fdcb 	bl	800da08 <iprintf>
    prev->next = ipr->next;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800ce7a:	6879      	ldr	r1, [r7, #4]
 800ce7c:	2004      	movs	r0, #4
 800ce7e:	f7f8 f82d 	bl	8004edc <memp_free>
}
 800ce82:	bf00      	nop
 800ce84:	3708      	adds	r7, #8
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	20006a6c 	.word	0x20006a6c
 800ce90:	0801074c 	.word	0x0801074c
 800ce94:	0801080c 	.word	0x0801080c
 800ce98:	08010794 	.word	0x08010794

0800ce9c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b08c      	sub	sp, #48	; 0x30
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800ceac:	2301      	movs	r3, #1
 800ceae:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ceb6:	69fb      	ldr	r3, [r7, #28]
 800ceb8:	885b      	ldrh	r3, [r3, #2]
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7f7 fb7a 	bl	80045b6 <lwip_htons>
 800cec2:	4603      	mov	r3, r0
 800cec4:	461a      	mov	r2, r3
 800cec6:	69fb      	ldr	r3, [r7, #28]
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	f003 030f 	and.w	r3, r3, #15
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	009b      	lsls	r3, r3, #2
 800ced4:	b29b      	uxth	r3, r3
 800ced6:	1ad3      	subs	r3, r2, r3
 800ced8:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	88db      	ldrh	r3, [r3, #6]
 800cede:	b29b      	uxth	r3, r3
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7f7 fb68 	bl	80045b6 <lwip_htons>
 800cee6:	4603      	mov	r3, r0
 800cee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	00db      	lsls	r3, r3, #3
 800cef0:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800cef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefa:	2200      	movs	r2, #0
 800cefc:	701a      	strb	r2, [r3, #0]
 800cefe:	2200      	movs	r2, #0
 800cf00:	705a      	strb	r2, [r3, #1]
 800cf02:	2200      	movs	r2, #0
 800cf04:	709a      	strb	r2, [r3, #2]
 800cf06:	2200      	movs	r2, #0
 800cf08:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800cf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0c:	8b3a      	ldrh	r2, [r7, #24]
 800cf0e:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800cf10:	8b3a      	ldrh	r2, [r7, #24]
 800cf12:	8b7b      	ldrh	r3, [r7, #26]
 800cf14:	4413      	add	r3, r2
 800cf16:	b29a      	uxth	r2, r3
 800cf18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf1a:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	627b      	str	r3, [r7, #36]	; 0x24
 800cf22:	e061      	b.n	800cfe8 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800cf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800cf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2c:	889b      	ldrh	r3, [r3, #4]
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	889b      	ldrh	r3, [r3, #4]
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d232      	bcs.n	800cfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800cf3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf3e:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800cf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d01f      	beq.n	800cf86 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800cf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf48:	889b      	ldrh	r3, [r3, #4]
 800cf4a:	b29a      	uxth	r2, r3
 800cf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4e:	88db      	ldrh	r3, [r3, #6]
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	429a      	cmp	r2, r3
 800cf54:	f0c0 80e3 	bcc.w	800d11e <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800cf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5a:	88db      	ldrh	r3, [r3, #6]
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	889b      	ldrh	r3, [r3, #4]
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	429a      	cmp	r2, r3
 800cf66:	f200 80da 	bhi.w	800d11e <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800cf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800cf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf72:	88db      	ldrh	r3, [r3, #6]
 800cf74:	b29a      	uxth	r2, r3
 800cf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf78:	889b      	ldrh	r3, [r3, #4]
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d037      	beq.n	800cff0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800cf80:	2300      	movs	r3, #0
 800cf82:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800cf84:	e034      	b.n	800cff0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800cf86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf88:	88db      	ldrh	r3, [r3, #6]
 800cf8a:	b29a      	uxth	r2, r3
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	889b      	ldrh	r3, [r3, #4]
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	429a      	cmp	r2, r3
 800cf94:	f200 80c5 	bhi.w	800d122 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	68ba      	ldr	r2, [r7, #8]
 800cf9c:	605a      	str	r2, [r3, #4]
      break;
 800cf9e:	e027      	b.n	800cff0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800cfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa2:	889b      	ldrh	r3, [r3, #4]
 800cfa4:	b29a      	uxth	r2, r3
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	889b      	ldrh	r3, [r3, #4]
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	429a      	cmp	r2, r3
 800cfae:	f000 80ba 	beq.w	800d126 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800cfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb4:	889b      	ldrh	r3, [r3, #4]
 800cfb6:	b29a      	uxth	r2, r3
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	88db      	ldrh	r3, [r3, #6]
 800cfbc:	b29b      	uxth	r3, r3
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	f0c0 80b3 	bcc.w	800d12a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800cfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d009      	beq.n	800cfde <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800cfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfcc:	88db      	ldrh	r3, [r3, #6]
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	889b      	ldrh	r3, [r3, #4]
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d001      	beq.n	800cfde <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800cfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d19a      	bne.n	800cf24 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800cfee:	e000      	b.n	800cff2 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800cff0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800cff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d12d      	bne.n	800d054 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800cff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d01c      	beq.n	800d038 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800cffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d000:	88db      	ldrh	r3, [r3, #6]
 800d002:	b29a      	uxth	r2, r3
 800d004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d006:	889b      	ldrh	r3, [r3, #4]
 800d008:	b29b      	uxth	r3, r3
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d906      	bls.n	800d01c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800d00e:	4b51      	ldr	r3, [pc, #324]	; (800d154 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d010:	f240 12ab 	movw	r2, #427	; 0x1ab
 800d014:	4950      	ldr	r1, [pc, #320]	; (800d158 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d016:	4851      	ldr	r0, [pc, #324]	; (800d15c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d018:	f000 fcf6 	bl	800da08 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d024:	88db      	ldrh	r3, [r3, #6]
 800d026:	b29a      	uxth	r2, r3
 800d028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02a:	889b      	ldrh	r3, [r3, #4]
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	429a      	cmp	r2, r3
 800d030:	d010      	beq.n	800d054 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800d032:	2300      	movs	r3, #0
 800d034:	623b      	str	r3, [r7, #32]
 800d036:	e00d      	b.n	800d054 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d006      	beq.n	800d04e <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800d040:	4b44      	ldr	r3, [pc, #272]	; (800d154 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d042:	f240 12b3 	movw	r2, #435	; 0x1b3
 800d046:	4946      	ldr	r1, [pc, #280]	; (800d160 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d048:	4844      	ldr	r0, [pc, #272]	; (800d15c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d04a:	f000 fcdd 	bl	800da08 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	68ba      	ldr	r2, [r7, #8]
 800d052:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d105      	bne.n	800d066 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	7f9b      	ldrb	r3, [r3, #30]
 800d05e:	f003 0301 	and.w	r3, r3, #1
 800d062:	2b00      	cmp	r3, #0
 800d064:	d059      	beq.n	800d11a <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800d066:	6a3b      	ldr	r3, [r7, #32]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d04f      	beq.n	800d10c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d006      	beq.n	800d082 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	889b      	ldrh	r3, [r3, #4]
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d002      	beq.n	800d088 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d082:	2300      	movs	r3, #0
 800d084:	623b      	str	r3, [r7, #32]
 800d086:	e041      	b.n	800d10c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d092:	e012      	b.n	800d0ba <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09c:	88db      	ldrh	r3, [r3, #6]
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a2:	889b      	ldrh	r3, [r3, #4]
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d002      	beq.n	800d0b0 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	623b      	str	r3, [r7, #32]
            break;
 800d0ae:	e007      	b.n	800d0c0 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800d0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d1e9      	bne.n	800d094 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d0c0:	6a3b      	ldr	r3, [r7, #32]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d022      	beq.n	800d10c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d106      	bne.n	800d0dc <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800d0ce:	4b21      	ldr	r3, [pc, #132]	; (800d154 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d0d0:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800d0d4:	4923      	ldr	r1, [pc, #140]	; (800d164 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d0d6:	4821      	ldr	r0, [pc, #132]	; (800d15c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d0d8:	f000 fc96 	bl	800da08 <iprintf>
          LWIP_ASSERT("sanity check",
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d106      	bne.n	800d0f6 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800d0e8:	4b1a      	ldr	r3, [pc, #104]	; (800d154 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d0ea:	f240 12d5 	movw	r2, #469	; 0x1d5
 800d0ee:	491d      	ldr	r1, [pc, #116]	; (800d164 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d0f0:	481a      	ldr	r0, [pc, #104]	; (800d15c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d0f2:	f000 fc89 	bl	800da08 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d006      	beq.n	800d10c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800d0fe:	4b15      	ldr	r3, [pc, #84]	; (800d154 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d100:	f240 12d7 	movw	r2, #471	; 0x1d7
 800d104:	4918      	ldr	r1, [pc, #96]	; (800d168 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d106:	4815      	ldr	r0, [pc, #84]	; (800d15c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d108:	f000 fc7e 	bl	800da08 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d10c:	6a3b      	ldr	r3, [r7, #32]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	bf14      	ite	ne
 800d112:	2301      	movne	r3, #1
 800d114:	2300      	moveq	r3, #0
 800d116:	b2db      	uxtb	r3, r3
 800d118:	e018      	b.n	800d14c <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d11a:	2300      	movs	r3, #0
 800d11c:	e016      	b.n	800d14c <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 800d11e:	bf00      	nop
 800d120:	e004      	b.n	800d12c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800d122:	bf00      	nop
 800d124:	e002      	b.n	800d12c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800d126:	bf00      	nop
 800d128:	e000      	b.n	800d12c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800d12a:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800d12c:	68b8      	ldr	r0, [r7, #8]
 800d12e:	f7f8 fca7 	bl	8005a80 <pbuf_clen>
 800d132:	4603      	mov	r3, r0
 800d134:	461a      	mov	r2, r3
 800d136:	4b0d      	ldr	r3, [pc, #52]	; (800d16c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d138:	881b      	ldrh	r3, [r3, #0]
 800d13a:	1a9b      	subs	r3, r3, r2
 800d13c:	b29a      	uxth	r2, r3
 800d13e:	4b0b      	ldr	r3, [pc, #44]	; (800d16c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d140:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800d142:	68b8      	ldr	r0, [r7, #8]
 800d144:	f7f8 fc08 	bl	8005958 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3730      	adds	r7, #48	; 0x30
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	0801074c 	.word	0x0801074c
 800d158:	08010828 	.word	0x08010828
 800d15c:	08010794 	.word	0x08010794
 800d160:	08010848 	.word	0x08010848
 800d164:	08010880 	.word	0x08010880
 800d168:	08010890 	.word	0x08010890
 800d16c:	20006a70 	.word	0x20006a70

0800d170 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b08e      	sub	sp, #56	; 0x38
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  struct ip_reass_helper *iprh;
  u16_t offset, len, clen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 800d178:	4b9a      	ldr	r3, [pc, #616]	; (800d3e4 <ip4_reass+0x274>)
 800d17a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d17c:	3301      	adds	r3, #1
 800d17e:	b29a      	uxth	r2, r3
 800d180:	4b98      	ldr	r3, [pc, #608]	; (800d3e4 <ip4_reass+0x274>)
 800d182:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800d18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	f003 030f 	and.w	r3, r3, #15
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	2b14      	cmp	r3, #20
 800d196:	d008      	beq.n	800d1aa <ip4_reass+0x3a>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 800d198:	4b92      	ldr	r3, [pc, #584]	; (800d3e4 <ip4_reass+0x274>)
 800d19a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d19e:	3301      	adds	r3, #1
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	4b90      	ldr	r3, [pc, #576]	; (800d3e4 <ip4_reass+0x274>)
 800d1a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 800d1a8:	e145      	b.n	800d436 <ip4_reass+0x2c6>
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ac:	88db      	ldrh	r3, [r3, #6]
 800d1ae:	b29b      	uxth	r3, r3
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7f7 fa00 	bl	80045b6 <lwip_htons>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	00db      	lsls	r3, r3, #3
 800d1c0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c4:	885b      	ldrh	r3, [r3, #2]
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7f7 f9f4 	bl	80045b6 <lwip_htons>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	f003 030f 	and.w	r3, r3, #15
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	1ad3      	subs	r3, r2, r3
 800d1e4:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7f8 fc4a 	bl	8005a80 <pbuf_clen>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d1f0:	4b7d      	ldr	r3, [pc, #500]	; (800d3e8 <ip4_reass+0x278>)
 800d1f2:	881b      	ldrh	r3, [r3, #0]
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1f8:	4413      	add	r3, r2
 800d1fa:	2b0a      	cmp	r3, #10
 800d1fc:	dd15      	ble.n	800d22a <ip4_reass+0xba>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d1fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d200:	4619      	mov	r1, r3
 800d202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d204:	f7ff fd78 	bl	800ccf8 <ip_reass_remove_oldest_datagram>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d006      	beq.n	800d21c <ip4_reass+0xac>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d20e:	4b76      	ldr	r3, [pc, #472]	; (800d3e8 <ip4_reass+0x278>)
 800d210:	881b      	ldrh	r3, [r3, #0]
 800d212:	461a      	mov	r2, r3
 800d214:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d216:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d218:	2b0a      	cmp	r3, #10
 800d21a:	dd06      	ble.n	800d22a <ip4_reass+0xba>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 800d21c:	4b71      	ldr	r3, [pc, #452]	; (800d3e4 <ip4_reass+0x274>)
 800d21e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d220:	3301      	adds	r3, #1
 800d222:	b29a      	uxth	r2, r3
 800d224:	4b6f      	ldr	r3, [pc, #444]	; (800d3e4 <ip4_reass+0x274>)
 800d226:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 800d228:	e105      	b.n	800d436 <ip4_reass+0x2c6>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d22a:	4b70      	ldr	r3, [pc, #448]	; (800d3ec <ip4_reass+0x27c>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	633b      	str	r3, [r7, #48]	; 0x30
 800d230:	e01e      	b.n	800d270 <ip4_reass+0x100>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d234:	695a      	ldr	r2, [r3, #20]
 800d236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d115      	bne.n	800d26a <ip4_reass+0xfa>
 800d23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d240:	699a      	ldr	r2, [r3, #24]
 800d242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d244:	691b      	ldr	r3, [r3, #16]
 800d246:	429a      	cmp	r2, r3
 800d248:	d10f      	bne.n	800d26a <ip4_reass+0xfa>
 800d24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24c:	899a      	ldrh	r2, [r3, #12]
 800d24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d250:	889b      	ldrh	r3, [r3, #4]
 800d252:	b29b      	uxth	r3, r3
 800d254:	429a      	cmp	r2, r3
 800d256:	d108      	bne.n	800d26a <ip4_reass+0xfa>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 800d258:	4b62      	ldr	r3, [pc, #392]	; (800d3e4 <ip4_reass+0x274>)
 800d25a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d25e:	3301      	adds	r3, #1
 800d260:	b29a      	uxth	r2, r3
 800d262:	4b60      	ldr	r3, [pc, #384]	; (800d3e4 <ip4_reass+0x274>)
 800d264:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 800d268:	e005      	b.n	800d276 <ip4_reass+0x106>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	633b      	str	r3, [r7, #48]	; 0x30
 800d270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d272:	2b00      	cmp	r3, #0
 800d274:	d1dd      	bne.n	800d232 <ip4_reass+0xc2>
    }
  }

  if (ipr == NULL) {
 800d276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d109      	bne.n	800d290 <ip4_reass+0x120>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d27c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d27e:	4619      	mov	r1, r3
 800d280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d282:	f7ff fd9b 	bl	800cdbc <ip_reass_enqueue_new_datagram>
 800d286:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d11c      	bne.n	800d2c8 <ip4_reass+0x158>
      goto nullreturn;
 800d28e:	e0d2      	b.n	800d436 <ip4_reass+0x2c6>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d292:	88db      	ldrh	r3, [r3, #6]
 800d294:	b29b      	uxth	r3, r3
 800d296:	4618      	mov	r0, r3
 800d298:	f7f7 f98d 	bl	80045b6 <lwip_htons>
 800d29c:	4603      	mov	r3, r0
 800d29e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d110      	bne.n	800d2c8 <ip4_reass+0x158>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a8:	89db      	ldrh	r3, [r3, #14]
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7f7 f983 	bl	80045b6 <lwip_htons>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d006      	beq.n	800d2c8 <ip4_reass+0x158>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2bc:	3308      	adds	r3, #8
 800d2be:	2214      	movs	r2, #20
 800d2c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f000 fb8a 	bl	800d9dc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ca:	88db      	ldrh	r3, [r3, #6]
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	f003 0320 	and.w	r3, r3, #32
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	bf0c      	ite	eq
 800d2d6:	2301      	moveq	r3, #1
 800d2d8:	2300      	movne	r3, #0
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d2de:	69fb      	ldr	r3, [r7, #28]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d00e      	beq.n	800d302 <ip4_reass+0x192>
    u16_t datagram_len = (u16_t)(offset + len);
 800d2e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d2e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2e8:	4413      	add	r3, r2
 800d2ea:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d2ec:	8b7a      	ldrh	r2, [r7, #26]
 800d2ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	f0c0 809d 	bcc.w	800d430 <ip4_reass+0x2c0>
 800d2f6:	8b7b      	ldrh	r3, [r7, #26]
 800d2f8:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	f200 8097 	bhi.w	800d430 <ip4_reass+0x2c0>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d302:	69fa      	ldr	r2, [r7, #28]
 800d304:	6879      	ldr	r1, [r7, #4]
 800d306:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d308:	f7ff fdc8 	bl	800ce9c <ip_reass_chain_frag_into_datagram_and_validate>
 800d30c:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d314:	f000 808e 	beq.w	800d434 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d318:	4b33      	ldr	r3, [pc, #204]	; (800d3e8 <ip4_reass+0x278>)
 800d31a:	881a      	ldrh	r2, [r3, #0]
 800d31c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d31e:	4413      	add	r3, r2
 800d320:	b29a      	uxth	r2, r3
 800d322:	4b31      	ldr	r3, [pc, #196]	; (800d3e8 <ip4_reass+0x278>)
 800d324:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d326:	69fb      	ldr	r3, [r7, #28]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d00d      	beq.n	800d348 <ip4_reass+0x1d8>
    u16_t datagram_len = (u16_t)(offset + len);
 800d32c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d32e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d330:	4413      	add	r3, r2
 800d332:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d336:	8a7a      	ldrh	r2, [r7, #18]
 800d338:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33c:	7f9b      	ldrb	r3, [r3, #30]
 800d33e:	f043 0301 	orr.w	r3, r3, #1
 800d342:	b2da      	uxtb	r2, r3
 800d344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d346:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d16e      	bne.n	800d42c <ip4_reass+0x2bc>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800d34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d350:	8b9b      	ldrh	r3, [r3, #28]
 800d352:	3314      	adds	r3, #20
 800d354:	b29a      	uxth	r2, r3
 800d356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d358:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800d35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800d364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36e:	3308      	adds	r3, #8
 800d370:	2214      	movs	r2, #20
 800d372:	4619      	mov	r1, r3
 800d374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d376:	f000 fb31 	bl	800d9dc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800d37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37c:	8b9b      	ldrh	r3, [r3, #28]
 800d37e:	4618      	mov	r0, r3
 800d380:	f7f7 f919 	bl	80045b6 <lwip_htons>
 800d384:	4603      	mov	r3, r0
 800d386:	461a      	mov	r2, r3
 800d388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38e:	2200      	movs	r2, #0
 800d390:	719a      	strb	r2, [r3, #6]
 800d392:	2200      	movs	r2, #0
 800d394:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d398:	2200      	movs	r2, #0
 800d39a:	729a      	strb	r2, [r3, #10]
 800d39c:	2200      	movs	r2, #0
 800d39e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d3a6:	e00e      	b.n	800d3c6 <ip4_reass+0x256>
      iprh = (struct ip_reass_helper*)r->payload;
 800d3a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800d3ae:	f06f 0113 	mvn.w	r1, #19
 800d3b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d3b4:	f7f8 faac 	bl	8005910 <pbuf_header>
      pbuf_cat(p, r);
 800d3b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f7f8 fb98 	bl	8005af0 <pbuf_cat>
      r = iprh->next_pbuf;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800d3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d1ed      	bne.n	800d3a8 <ip4_reass+0x238>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d3cc:	4b07      	ldr	r3, [pc, #28]	; (800d3ec <ip4_reass+0x27c>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d102      	bne.n	800d3dc <ip4_reass+0x26c>
      ipr_prev = NULL;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3da:	e016      	b.n	800d40a <ip4_reass+0x29a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d3dc:	4b03      	ldr	r3, [pc, #12]	; (800d3ec <ip4_reass+0x27c>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3e2:	e00d      	b.n	800d400 <ip4_reass+0x290>
 800d3e4:	20006840 	.word	0x20006840
 800d3e8:	20006a70 	.word	0x20006a70
 800d3ec:	20006a6c 	.word	0x20006a6c
        if (ipr_prev->next == ipr) {
 800d3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d006      	beq.n	800d408 <ip4_reass+0x298>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1f4      	bne.n	800d3f0 <ip4_reass+0x280>
 800d406:	e000      	b.n	800d40a <ip4_reass+0x29a>
          break;
 800d408:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d40a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d40c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d40e:	f7ff fd17 	bl	800ce40 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f7f8 fb34 	bl	8005a80 <pbuf_clen>
 800d418:	4603      	mov	r3, r0
 800d41a:	461a      	mov	r2, r3
 800d41c:	4b0d      	ldr	r3, [pc, #52]	; (800d454 <ip4_reass+0x2e4>)
 800d41e:	881b      	ldrh	r3, [r3, #0]
 800d420:	1a9b      	subs	r3, r3, r2
 800d422:	b29a      	uxth	r2, r3
 800d424:	4b0b      	ldr	r3, [pc, #44]	; (800d454 <ip4_reass+0x2e4>)
 800d426:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	e00e      	b.n	800d44a <ip4_reass+0x2da>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d42c:	2300      	movs	r3, #0
 800d42e:	e00c      	b.n	800d44a <ip4_reass+0x2da>
      goto nullreturn;
 800d430:	bf00      	nop
 800d432:	e000      	b.n	800d436 <ip4_reass+0x2c6>
    goto nullreturn;
 800d434:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 800d436:	4b08      	ldr	r3, [pc, #32]	; (800d458 <ip4_reass+0x2e8>)
 800d438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d43a:	3301      	adds	r3, #1
 800d43c:	b29a      	uxth	r2, r3
 800d43e:	4b06      	ldr	r3, [pc, #24]	; (800d458 <ip4_reass+0x2e8>)
 800d440:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f7f8 fa88 	bl	8005958 <pbuf_free>
  return NULL;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3738      	adds	r7, #56	; 0x38
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	20006a70 	.word	0x20006a70
 800d458:	20006840 	.word	0x20006840

0800d45c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800d460:	2005      	movs	r0, #5
 800d462:	f7f7 fce9 	bl	8004e38 <memp_malloc>
 800d466:	4603      	mov	r3, r0
}
 800d468:	4618      	mov	r0, r3
 800d46a:	bd80      	pop	{r7, pc}

0800d46c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d106      	bne.n	800d488 <ip_frag_free_pbuf_custom_ref+0x1c>
 800d47a:	4b07      	ldr	r3, [pc, #28]	; (800d498 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d47c:	f240 22ae 	movw	r2, #686	; 0x2ae
 800d480:	4906      	ldr	r1, [pc, #24]	; (800d49c <ip_frag_free_pbuf_custom_ref+0x30>)
 800d482:	4807      	ldr	r0, [pc, #28]	; (800d4a0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800d484:	f000 fac0 	bl	800da08 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d488:	6879      	ldr	r1, [r7, #4]
 800d48a:	2005      	movs	r0, #5
 800d48c:	f7f7 fd26 	bl	8004edc <memp_free>
}
 800d490:	bf00      	nop
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	0801074c 	.word	0x0801074c
 800d49c:	080108b4 	.word	0x080108b4
 800d4a0:	08010794 	.word	0x08010794

0800d4a4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d106      	bne.n	800d4c4 <ipfrag_free_pbuf_custom+0x20>
 800d4b6:	4b11      	ldr	r3, [pc, #68]	; (800d4fc <ipfrag_free_pbuf_custom+0x58>)
 800d4b8:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800d4bc:	4910      	ldr	r1, [pc, #64]	; (800d500 <ipfrag_free_pbuf_custom+0x5c>)
 800d4be:	4811      	ldr	r0, [pc, #68]	; (800d504 <ipfrag_free_pbuf_custom+0x60>)
 800d4c0:	f000 faa2 	bl	800da08 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800d4c4:	68fa      	ldr	r2, [r7, #12]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d006      	beq.n	800d4da <ipfrag_free_pbuf_custom+0x36>
 800d4cc:	4b0b      	ldr	r3, [pc, #44]	; (800d4fc <ipfrag_free_pbuf_custom+0x58>)
 800d4ce:	f240 22b9 	movw	r2, #697	; 0x2b9
 800d4d2:	490d      	ldr	r1, [pc, #52]	; (800d508 <ipfrag_free_pbuf_custom+0x64>)
 800d4d4:	480b      	ldr	r0, [pc, #44]	; (800d504 <ipfrag_free_pbuf_custom+0x60>)
 800d4d6:	f000 fa97 	bl	800da08 <iprintf>
  if (pcr->original != NULL) {
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	695b      	ldr	r3, [r3, #20]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d004      	beq.n	800d4ec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	695b      	ldr	r3, [r3, #20]
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7f8 fa36 	bl	8005958 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d4ec:	68f8      	ldr	r0, [r7, #12]
 800d4ee:	f7ff ffbd 	bl	800d46c <ip_frag_free_pbuf_custom_ref>
}
 800d4f2:	bf00      	nop
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	0801074c 	.word	0x0801074c
 800d500:	080108c0 	.word	0x080108c0
 800d504:	08010794 	.word	0x08010794
 800d508:	080108cc 	.word	0x080108cc

0800d50c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b092      	sub	sp, #72	; 0x48
 800d510:	af02      	add	r7, sp, #8
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d518:	2300      	movs	r3, #0
 800d51a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d520:	3b14      	subs	r3, #20
 800d522:	2b00      	cmp	r3, #0
 800d524:	da00      	bge.n	800d528 <ip4_frag+0x1c>
 800d526:	3307      	adds	r3, #7
 800d528:	10db      	asrs	r3, r3, #3
 800d52a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d52c:	2314      	movs	r3, #20
 800d52e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	685b      	ldr	r3, [r3, #4]
 800d534:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800d536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d538:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800d53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	f003 030f 	and.w	r3, r3, #15
 800d542:	009b      	lsls	r3, r3, #2
 800d544:	2b14      	cmp	r3, #20
 800d546:	d009      	beq.n	800d55c <ip4_frag+0x50>
 800d548:	4b7d      	ldr	r3, [pc, #500]	; (800d740 <ip4_frag+0x234>)
 800d54a:	f240 22e1 	movw	r2, #737	; 0x2e1
 800d54e:	497d      	ldr	r1, [pc, #500]	; (800d744 <ip4_frag+0x238>)
 800d550:	487d      	ldr	r0, [pc, #500]	; (800d748 <ip4_frag+0x23c>)
 800d552:	f000 fa59 	bl	800da08 <iprintf>
 800d556:	f06f 0305 	mvn.w	r3, #5
 800d55a:	e0ec      	b.n	800d736 <ip4_frag+0x22a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55e:	88db      	ldrh	r3, [r3, #6]
 800d560:	b29b      	uxth	r3, r3
 800d562:	4618      	mov	r0, r3
 800d564:	f7f7 f827 	bl	80045b6 <lwip_htons>
 800d568:	4603      	mov	r3, r0
 800d56a:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800d56c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d56e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d572:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800d574:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d009      	beq.n	800d592 <ip4_frag+0x86>
 800d57e:	4b70      	ldr	r3, [pc, #448]	; (800d740 <ip4_frag+0x234>)
 800d580:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d584:	4971      	ldr	r1, [pc, #452]	; (800d74c <ip4_frag+0x240>)
 800d586:	4870      	ldr	r0, [pc, #448]	; (800d748 <ip4_frag+0x23c>)
 800d588:	f000 fa3e 	bl	800da08 <iprintf>
 800d58c:	f06f 0305 	mvn.w	r3, #5
 800d590:	e0d1      	b.n	800d736 <ip4_frag+0x22a>

  left = p->tot_len - IP_HLEN;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	891b      	ldrh	r3, [r3, #8]
 800d596:	3b14      	subs	r3, #20
 800d598:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800d59a:	e0c3      	b.n	800d724 <ip4_frag+0x218>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800d59c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d59e:	00da      	lsls	r2, r3, #3
 800d5a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	bfa8      	it	ge
 800d5a6:	4613      	movge	r3, r2
 800d5a8:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	2114      	movs	r1, #20
 800d5ae:	2002      	movs	r0, #2
 800d5b0:	f7f7 fe5a 	bl	8005268 <pbuf_alloc>
 800d5b4:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800d5b6:	6a3b      	ldr	r3, [r7, #32]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	f000 80b9 	beq.w	800d730 <ip4_frag+0x224>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	895b      	ldrh	r3, [r3, #10]
 800d5c2:	2b13      	cmp	r3, #19
 800d5c4:	d806      	bhi.n	800d5d4 <ip4_frag+0xc8>
 800d5c6:	4b5e      	ldr	r3, [pc, #376]	; (800d740 <ip4_frag+0x234>)
 800d5c8:	f44f 7242 	mov.w	r2, #776	; 0x308
 800d5cc:	4960      	ldr	r1, [pc, #384]	; (800d750 <ip4_frag+0x244>)
 800d5ce:	485e      	ldr	r0, [pc, #376]	; (800d748 <ip4_frag+0x23c>)
 800d5d0:	f000 fa1a 	bl	800da08 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d5d4:	6a3b      	ldr	r3, [r7, #32]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	2214      	movs	r2, #20
 800d5da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f000 f9fd 	bl	800d9dc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d5e2:	6a3b      	ldr	r3, [r7, #32]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800d5e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d5ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800d5ec:	e04f      	b.n	800d68e <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	895a      	ldrh	r2, [r3, #10]
 800d5f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d5f4:	1ad3      	subs	r3, r2, r3
 800d5f6:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d5f8:	8b7a      	ldrh	r2, [r7, #26]
 800d5fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	bf28      	it	cs
 800d600:	4613      	movcs	r3, r2
 800d602:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d604:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d606:	2b00      	cmp	r3, #0
 800d608:	d105      	bne.n	800d616 <ip4_frag+0x10a>
        poff = 0;
 800d60a:	2300      	movs	r3, #0
 800d60c:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	60fb      	str	r3, [r7, #12]
        continue;
 800d614:	e03b      	b.n	800d68e <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d616:	f7ff ff21 	bl	800d45c <ip_frag_alloc_pbuf_custom_ref>
 800d61a:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d103      	bne.n	800d62a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800d622:	6a38      	ldr	r0, [r7, #32]
 800d624:	f7f8 f998 	bl	8005958 <pbuf_free>
        goto memerr;
 800d628:	e083      	b.n	800d732 <ip4_frag+0x226>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d62a:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d630:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d632:	4413      	add	r3, r2
 800d634:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d636:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d638:	9201      	str	r2, [sp, #4]
 800d63a:	9300      	str	r3, [sp, #0]
 800d63c:	4603      	mov	r3, r0
 800d63e:	2202      	movs	r2, #2
 800d640:	2004      	movs	r0, #4
 800d642:	f7f7 ffab 	bl	800559c <pbuf_alloced_custom>
 800d646:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d106      	bne.n	800d65c <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d64e:	6978      	ldr	r0, [r7, #20]
 800d650:	f7ff ff0c 	bl	800d46c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d654:	6a38      	ldr	r0, [r7, #32]
 800d656:	f7f8 f97f 	bl	8005958 <pbuf_free>
        goto memerr;
 800d65a:	e06a      	b.n	800d732 <ip4_frag+0x226>
      }
      pbuf_ref(p);
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	f7f8 fa25 	bl	8005aac <pbuf_ref>
      pcr->original = p;
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	68fa      	ldr	r2, [r7, #12]
 800d666:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	4a3a      	ldr	r2, [pc, #232]	; (800d754 <ip4_frag+0x248>)
 800d66c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d66e:	6939      	ldr	r1, [r7, #16]
 800d670:	6a38      	ldr	r0, [r7, #32]
 800d672:	f7f8 fa3d 	bl	8005af0 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800d676:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800d678:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d67a:	1ad3      	subs	r3, r2, r3
 800d67c:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800d67e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d680:	2b00      	cmp	r3, #0
 800d682:	d004      	beq.n	800d68e <ip4_frag+0x182>
        poff = 0;
 800d684:	2300      	movs	r3, #0
 800d686:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d68e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d690:	2b00      	cmp	r3, #0
 800d692:	d1ac      	bne.n	800d5ee <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800d694:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d696:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d698:	4413      	add	r3, r2
 800d69a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d6a0:	f1a3 0213 	sub.w	r2, r3, #19
 800d6a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	bfcc      	ite	gt
 800d6aa:	2301      	movgt	r3, #1
 800d6ac:	2300      	movle	r3, #0
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d6b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d6b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6b8:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800d6ba:	69fb      	ldr	r3, [r7, #28]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d103      	bne.n	800d6c8 <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 800d6c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d6c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d6c6:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d6c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7f6 ff73 	bl	80045b6 <lwip_htons>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d6:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800d6d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d6da:	3314      	adds	r3, #20
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7f6 ff69 	bl	80045b6 <lwip_htons>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ea:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	729a      	strb	r2, [r3, #10]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	695b      	ldr	r3, [r3, #20]
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	6a39      	ldr	r1, [r7, #32]
 800d6fe:	68b8      	ldr	r0, [r7, #8]
 800d700:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 800d702:	4b15      	ldr	r3, [pc, #84]	; (800d758 <ip4_frag+0x24c>)
 800d704:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d706:	3301      	adds	r3, #1
 800d708:	b29a      	uxth	r2, r3
 800d70a:	4b13      	ldr	r3, [pc, #76]	; (800d758 <ip4_frag+0x24c>)
 800d70c:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d70e:	6a38      	ldr	r0, [r7, #32]
 800d710:	f7f8 f922 	bl	8005958 <pbuf_free>
    left -= fragsize;
 800d714:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d716:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d718:	1ad3      	subs	r3, r2, r3
 800d71a:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800d71c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800d71e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d720:	4413      	add	r3, r2
 800d722:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800d724:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d726:	2b00      	cmp	r3, #0
 800d728:	f47f af38 	bne.w	800d59c <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d72c:	2300      	movs	r3, #0
 800d72e:	e002      	b.n	800d736 <ip4_frag+0x22a>
      goto memerr;
 800d730:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d736:	4618      	mov	r0, r3
 800d738:	3740      	adds	r7, #64	; 0x40
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	0801074c 	.word	0x0801074c
 800d744:	080108d8 	.word	0x080108d8
 800d748:	08010794 	.word	0x08010794
 800d74c:	08010900 	.word	0x08010900
 800d750:	0801091c 	.word	0x0801091c
 800d754:	0800d4a5 	.word	0x0800d4a5
 800d758:	20006840 	.word	0x20006840

0800d75c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b086      	sub	sp, #24
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800d766:	230e      	movs	r3, #14
 800d768:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	895b      	ldrh	r3, [r3, #10]
 800d76e:	2b0e      	cmp	r3, #14
 800d770:	d80c      	bhi.n	800d78c <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 800d772:	4b56      	ldr	r3, [pc, #344]	; (800d8cc <ethernet_input+0x170>)
 800d774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d776:	3301      	adds	r3, #1
 800d778:	b29a      	uxth	r2, r3
 800d77a:	4b54      	ldr	r3, [pc, #336]	; (800d8cc <ethernet_input+0x170>)
 800d77c:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 800d77e:	4b53      	ldr	r3, [pc, #332]	; (800d8cc <ethernet_input+0x170>)
 800d780:	8bdb      	ldrh	r3, [r3, #30]
 800d782:	3301      	adds	r3, #1
 800d784:	b29a      	uxth	r2, r3
 800d786:	4b51      	ldr	r3, [pc, #324]	; (800d8cc <ethernet_input+0x170>)
 800d788:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 800d78a:	e096      	b.n	800d8ba <ethernet_input+0x15e>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	7b1a      	ldrb	r2, [r3, #12]
 800d796:	7b5b      	ldrb	r3, [r3, #13]
 800d798:	021b      	lsls	r3, r3, #8
 800d79a:	4313      	orrs	r3, r2
 800d79c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	f003 0301 	and.w	r3, r3, #1
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d023      	beq.n	800d7f2 <ethernet_input+0x96>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d10f      	bne.n	800d7d2 <ethernet_input+0x76>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	785b      	ldrb	r3, [r3, #1]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d11b      	bne.n	800d7f2 <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d7be:	2b5e      	cmp	r3, #94	; 0x5e
 800d7c0:	d117      	bne.n	800d7f2 <ethernet_input+0x96>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	7b5b      	ldrb	r3, [r3, #13]
 800d7c6:	f043 0310 	orr.w	r3, r3, #16
 800d7ca:	b2da      	uxtb	r2, r3
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	735a      	strb	r2, [r3, #13]
 800d7d0:	e00f      	b.n	800d7f2 <ethernet_input+0x96>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	2206      	movs	r2, #6
 800d7d6:	493e      	ldr	r1, [pc, #248]	; (800d8d0 <ethernet_input+0x174>)
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f000 f8ef 	bl	800d9bc <memcmp>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d106      	bne.n	800d7f2 <ethernet_input+0x96>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	7b5b      	ldrb	r3, [r3, #13]
 800d7e8:	f043 0308 	orr.w	r3, r3, #8
 800d7ec:	b2da      	uxtb	r2, r3
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d7f2:	89fb      	ldrh	r3, [r7, #14]
 800d7f4:	2b08      	cmp	r3, #8
 800d7f6:	d003      	beq.n	800d800 <ethernet_input+0xa4>
 800d7f8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800d7fc:	d01e      	beq.n	800d83c <ethernet_input+0xe0>
 800d7fe:	e048      	b.n	800d892 <ethernet_input+0x136>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d806:	f003 0308 	and.w	r3, r3, #8
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d050      	beq.n	800d8b0 <ethernet_input+0x154>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	895b      	ldrh	r3, [r3, #10]
 800d812:	461a      	mov	r2, r3
 800d814:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d818:	429a      	cmp	r2, r3
 800d81a:	db4b      	blt.n	800d8b4 <ethernet_input+0x158>
 800d81c:	8afb      	ldrh	r3, [r7, #22]
 800d81e:	425b      	negs	r3, r3
 800d820:	b29b      	uxth	r3, r3
 800d822:	b21b      	sxth	r3, r3
 800d824:	4619      	mov	r1, r3
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f7f8 f872 	bl	8005910 <pbuf_header>
 800d82c:	4603      	mov	r3, r0
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d140      	bne.n	800d8b4 <ethernet_input+0x158>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 800d832:	6839      	ldr	r1, [r7, #0]
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f7fe fedd 	bl	800c5f4 <ip4_input>
      }
      break;
 800d83a:	e037      	b.n	800d8ac <ethernet_input+0x150>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d842:	f003 0308 	and.w	r3, r3, #8
 800d846:	2b00      	cmp	r3, #0
 800d848:	d036      	beq.n	800d8b8 <ethernet_input+0x15c>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	895b      	ldrh	r3, [r3, #10]
 800d84e:	461a      	mov	r2, r3
 800d850:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d854:	429a      	cmp	r2, r3
 800d856:	db0a      	blt.n	800d86e <ethernet_input+0x112>
 800d858:	8afb      	ldrh	r3, [r7, #22]
 800d85a:	425b      	negs	r3, r3
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	b21b      	sxth	r3, r3
 800d860:	4619      	mov	r1, r3
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f7f8 f854 	bl	8005910 <pbuf_header>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d00c      	beq.n	800d888 <ethernet_input+0x12c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
          ("ethernet_input: ARP response packet dropped, too short (%"S16_F"/%"S16_F")\n",
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 800d86e:	4b17      	ldr	r3, [pc, #92]	; (800d8cc <ethernet_input+0x170>)
 800d870:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d872:	3301      	adds	r3, #1
 800d874:	b29a      	uxth	r2, r3
 800d876:	4b15      	ldr	r3, [pc, #84]	; (800d8cc <ethernet_input+0x170>)
 800d878:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 800d87a:	4b14      	ldr	r3, [pc, #80]	; (800d8cc <ethernet_input+0x170>)
 800d87c:	8bdb      	ldrh	r3, [r3, #30]
 800d87e:	3301      	adds	r3, #1
 800d880:	b29a      	uxth	r2, r3
 800d882:	4b12      	ldr	r3, [pc, #72]	; (800d8cc <ethernet_input+0x170>)
 800d884:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 800d886:	e018      	b.n	800d8ba <ethernet_input+0x15e>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 800d888:	6839      	ldr	r1, [r7, #0]
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f7fe f816 	bl	800b8bc <etharp_input>
      }
      break;
 800d890:	e00c      	b.n	800d8ac <ethernet_input+0x150>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 800d892:	4b0e      	ldr	r3, [pc, #56]	; (800d8cc <ethernet_input+0x170>)
 800d894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d896:	3301      	adds	r3, #1
 800d898:	b29a      	uxth	r2, r3
 800d89a:	4b0c      	ldr	r3, [pc, #48]	; (800d8cc <ethernet_input+0x170>)
 800d89c:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 800d89e:	4b0b      	ldr	r3, [pc, #44]	; (800d8cc <ethernet_input+0x170>)
 800d8a0:	8bdb      	ldrh	r3, [r3, #30]
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	b29a      	uxth	r2, r3
 800d8a6:	4b09      	ldr	r3, [pc, #36]	; (800d8cc <ethernet_input+0x170>)
 800d8a8:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d8aa:	e006      	b.n	800d8ba <ethernet_input+0x15e>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	e008      	b.n	800d8c2 <ethernet_input+0x166>
        goto free_and_return;
 800d8b0:	bf00      	nop
 800d8b2:	e002      	b.n	800d8ba <ethernet_input+0x15e>
        goto free_and_return;
 800d8b4:	bf00      	nop
 800d8b6:	e000      	b.n	800d8ba <ethernet_input+0x15e>
        goto free_and_return;
 800d8b8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f7f8 f84c 	bl	8005958 <pbuf_free>
  return ERR_OK;
 800d8c0:	2300      	movs	r3, #0
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3718      	adds	r7, #24
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	20006840 	.word	0x20006840
 800d8d0:	08010ae0 	.word	0x08010ae0

0800d8d4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b086      	sub	sp, #24
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	607a      	str	r2, [r7, #4]
 800d8e0:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d8e2:	8c3b      	ldrh	r3, [r7, #32]
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f7f6 fe66 	bl	80045b6 <lwip_htons>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800d8ee:	210e      	movs	r1, #14
 800d8f0:	68b8      	ldr	r0, [r7, #8]
 800d8f2:	f7f8 f80d 	bl	8005910 <pbuf_header>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d125      	bne.n	800d948 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	8afa      	ldrh	r2, [r7, #22]
 800d906:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	2206      	movs	r2, #6
 800d90c:	6839      	ldr	r1, [r7, #0]
 800d90e:	4618      	mov	r0, r3
 800d910:	f000 f864 	bl	800d9dc <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	3306      	adds	r3, #6
 800d918:	2206      	movs	r2, #6
 800d91a:	6879      	ldr	r1, [r7, #4]
 800d91c:	4618      	mov	r0, r3
 800d91e:	f000 f85d 	bl	800d9dc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d928:	2b06      	cmp	r3, #6
 800d92a:	d006      	beq.n	800d93a <ethernet_output+0x66>
 800d92c:	4b0d      	ldr	r3, [pc, #52]	; (800d964 <ethernet_output+0x90>)
 800d92e:	f240 122b 	movw	r2, #299	; 0x12b
 800d932:	490d      	ldr	r1, [pc, #52]	; (800d968 <ethernet_output+0x94>)
 800d934:	480d      	ldr	r0, [pc, #52]	; (800d96c <ethernet_output+0x98>)
 800d936:	f000 f867 	bl	800da08 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	699b      	ldr	r3, [r3, #24]
 800d93e:	68b9      	ldr	r1, [r7, #8]
 800d940:	68f8      	ldr	r0, [r7, #12]
 800d942:	4798      	blx	r3
 800d944:	4603      	mov	r3, r0
 800d946:	e008      	b.n	800d95a <ethernet_output+0x86>
      goto pbuf_header_failed;
 800d948:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 800d94a:	4b09      	ldr	r3, [pc, #36]	; (800d970 <ethernet_output+0x9c>)
 800d94c:	895b      	ldrh	r3, [r3, #10]
 800d94e:	3301      	adds	r3, #1
 800d950:	b29a      	uxth	r2, r3
 800d952:	4b07      	ldr	r3, [pc, #28]	; (800d970 <ethernet_output+0x9c>)
 800d954:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 800d956:	f06f 0301 	mvn.w	r3, #1
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	3718      	adds	r7, #24
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop
 800d964:	0801093c 	.word	0x0801093c
 800d968:	08010974 	.word	0x08010974
 800d96c:	080109a8 	.word	0x080109a8
 800d970:	20006840 	.word	0x20006840

0800d974 <__libc_init_array>:
 800d974:	b570      	push	{r4, r5, r6, lr}
 800d976:	2600      	movs	r6, #0
 800d978:	4d0c      	ldr	r5, [pc, #48]	; (800d9ac <__libc_init_array+0x38>)
 800d97a:	4c0d      	ldr	r4, [pc, #52]	; (800d9b0 <__libc_init_array+0x3c>)
 800d97c:	1b64      	subs	r4, r4, r5
 800d97e:	10a4      	asrs	r4, r4, #2
 800d980:	42a6      	cmp	r6, r4
 800d982:	d109      	bne.n	800d998 <__libc_init_array+0x24>
 800d984:	f001 f9a2 	bl	800eccc <_init>
 800d988:	2600      	movs	r6, #0
 800d98a:	4d0a      	ldr	r5, [pc, #40]	; (800d9b4 <__libc_init_array+0x40>)
 800d98c:	4c0a      	ldr	r4, [pc, #40]	; (800d9b8 <__libc_init_array+0x44>)
 800d98e:	1b64      	subs	r4, r4, r5
 800d990:	10a4      	asrs	r4, r4, #2
 800d992:	42a6      	cmp	r6, r4
 800d994:	d105      	bne.n	800d9a2 <__libc_init_array+0x2e>
 800d996:	bd70      	pop	{r4, r5, r6, pc}
 800d998:	f855 3b04 	ldr.w	r3, [r5], #4
 800d99c:	4798      	blx	r3
 800d99e:	3601      	adds	r6, #1
 800d9a0:	e7ee      	b.n	800d980 <__libc_init_array+0xc>
 800d9a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9a6:	4798      	blx	r3
 800d9a8:	3601      	adds	r6, #1
 800d9aa:	e7f2      	b.n	800d992 <__libc_init_array+0x1e>
 800d9ac:	08010b90 	.word	0x08010b90
 800d9b0:	08010b90 	.word	0x08010b90
 800d9b4:	08010b90 	.word	0x08010b90
 800d9b8:	08010b94 	.word	0x08010b94

0800d9bc <memcmp>:
 800d9bc:	b510      	push	{r4, lr}
 800d9be:	3901      	subs	r1, #1
 800d9c0:	4402      	add	r2, r0
 800d9c2:	4290      	cmp	r0, r2
 800d9c4:	d101      	bne.n	800d9ca <memcmp+0xe>
 800d9c6:	2000      	movs	r0, #0
 800d9c8:	e005      	b.n	800d9d6 <memcmp+0x1a>
 800d9ca:	7803      	ldrb	r3, [r0, #0]
 800d9cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d9d0:	42a3      	cmp	r3, r4
 800d9d2:	d001      	beq.n	800d9d8 <memcmp+0x1c>
 800d9d4:	1b18      	subs	r0, r3, r4
 800d9d6:	bd10      	pop	{r4, pc}
 800d9d8:	3001      	adds	r0, #1
 800d9da:	e7f2      	b.n	800d9c2 <memcmp+0x6>

0800d9dc <memcpy>:
 800d9dc:	440a      	add	r2, r1
 800d9de:	4291      	cmp	r1, r2
 800d9e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d9e4:	d100      	bne.n	800d9e8 <memcpy+0xc>
 800d9e6:	4770      	bx	lr
 800d9e8:	b510      	push	{r4, lr}
 800d9ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9ee:	4291      	cmp	r1, r2
 800d9f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9f4:	d1f9      	bne.n	800d9ea <memcpy+0xe>
 800d9f6:	bd10      	pop	{r4, pc}

0800d9f8 <memset>:
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	4402      	add	r2, r0
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d100      	bne.n	800da02 <memset+0xa>
 800da00:	4770      	bx	lr
 800da02:	f803 1b01 	strb.w	r1, [r3], #1
 800da06:	e7f9      	b.n	800d9fc <memset+0x4>

0800da08 <iprintf>:
 800da08:	b40f      	push	{r0, r1, r2, r3}
 800da0a:	4b0a      	ldr	r3, [pc, #40]	; (800da34 <iprintf+0x2c>)
 800da0c:	b513      	push	{r0, r1, r4, lr}
 800da0e:	681c      	ldr	r4, [r3, #0]
 800da10:	b124      	cbz	r4, 800da1c <iprintf+0x14>
 800da12:	69a3      	ldr	r3, [r4, #24]
 800da14:	b913      	cbnz	r3, 800da1c <iprintf+0x14>
 800da16:	4620      	mov	r0, r4
 800da18:	f000 f886 	bl	800db28 <__sinit>
 800da1c:	ab05      	add	r3, sp, #20
 800da1e:	4620      	mov	r0, r4
 800da20:	9a04      	ldr	r2, [sp, #16]
 800da22:	68a1      	ldr	r1, [r4, #8]
 800da24:	9301      	str	r3, [sp, #4]
 800da26:	f000 fb7f 	bl	800e128 <_vfiprintf_r>
 800da2a:	b002      	add	sp, #8
 800da2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da30:	b004      	add	sp, #16
 800da32:	4770      	bx	lr
 800da34:	20000018 	.word	0x20000018

0800da38 <siprintf>:
 800da38:	b40e      	push	{r1, r2, r3}
 800da3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800da3e:	b500      	push	{lr}
 800da40:	b09c      	sub	sp, #112	; 0x70
 800da42:	ab1d      	add	r3, sp, #116	; 0x74
 800da44:	9002      	str	r0, [sp, #8]
 800da46:	9006      	str	r0, [sp, #24]
 800da48:	9107      	str	r1, [sp, #28]
 800da4a:	9104      	str	r1, [sp, #16]
 800da4c:	4808      	ldr	r0, [pc, #32]	; (800da70 <siprintf+0x38>)
 800da4e:	4909      	ldr	r1, [pc, #36]	; (800da74 <siprintf+0x3c>)
 800da50:	f853 2b04 	ldr.w	r2, [r3], #4
 800da54:	9105      	str	r1, [sp, #20]
 800da56:	6800      	ldr	r0, [r0, #0]
 800da58:	a902      	add	r1, sp, #8
 800da5a:	9301      	str	r3, [sp, #4]
 800da5c:	f000 fa3c 	bl	800ded8 <_svfiprintf_r>
 800da60:	2200      	movs	r2, #0
 800da62:	9b02      	ldr	r3, [sp, #8]
 800da64:	701a      	strb	r2, [r3, #0]
 800da66:	b01c      	add	sp, #112	; 0x70
 800da68:	f85d eb04 	ldr.w	lr, [sp], #4
 800da6c:	b003      	add	sp, #12
 800da6e:	4770      	bx	lr
 800da70:	20000018 	.word	0x20000018
 800da74:	ffff0208 	.word	0xffff0208

0800da78 <std>:
 800da78:	2300      	movs	r3, #0
 800da7a:	b510      	push	{r4, lr}
 800da7c:	4604      	mov	r4, r0
 800da7e:	e9c0 3300 	strd	r3, r3, [r0]
 800da82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da86:	6083      	str	r3, [r0, #8]
 800da88:	8181      	strh	r1, [r0, #12]
 800da8a:	6643      	str	r3, [r0, #100]	; 0x64
 800da8c:	81c2      	strh	r2, [r0, #14]
 800da8e:	6183      	str	r3, [r0, #24]
 800da90:	4619      	mov	r1, r3
 800da92:	2208      	movs	r2, #8
 800da94:	305c      	adds	r0, #92	; 0x5c
 800da96:	f7ff ffaf 	bl	800d9f8 <memset>
 800da9a:	4b05      	ldr	r3, [pc, #20]	; (800dab0 <std+0x38>)
 800da9c:	6224      	str	r4, [r4, #32]
 800da9e:	6263      	str	r3, [r4, #36]	; 0x24
 800daa0:	4b04      	ldr	r3, [pc, #16]	; (800dab4 <std+0x3c>)
 800daa2:	62a3      	str	r3, [r4, #40]	; 0x28
 800daa4:	4b04      	ldr	r3, [pc, #16]	; (800dab8 <std+0x40>)
 800daa6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800daa8:	4b04      	ldr	r3, [pc, #16]	; (800dabc <std+0x44>)
 800daaa:	6323      	str	r3, [r4, #48]	; 0x30
 800daac:	bd10      	pop	{r4, pc}
 800daae:	bf00      	nop
 800dab0:	0800e6d5 	.word	0x0800e6d5
 800dab4:	0800e6f7 	.word	0x0800e6f7
 800dab8:	0800e72f 	.word	0x0800e72f
 800dabc:	0800e753 	.word	0x0800e753

0800dac0 <_cleanup_r>:
 800dac0:	4901      	ldr	r1, [pc, #4]	; (800dac8 <_cleanup_r+0x8>)
 800dac2:	f000 b8af 	b.w	800dc24 <_fwalk_reent>
 800dac6:	bf00      	nop
 800dac8:	0800ea25 	.word	0x0800ea25

0800dacc <__sfmoreglue>:
 800dacc:	2268      	movs	r2, #104	; 0x68
 800dace:	b570      	push	{r4, r5, r6, lr}
 800dad0:	1e4d      	subs	r5, r1, #1
 800dad2:	4355      	muls	r5, r2
 800dad4:	460e      	mov	r6, r1
 800dad6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dada:	f000 f92d 	bl	800dd38 <_malloc_r>
 800dade:	4604      	mov	r4, r0
 800dae0:	b140      	cbz	r0, 800daf4 <__sfmoreglue+0x28>
 800dae2:	2100      	movs	r1, #0
 800dae4:	e9c0 1600 	strd	r1, r6, [r0]
 800dae8:	300c      	adds	r0, #12
 800daea:	60a0      	str	r0, [r4, #8]
 800daec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800daf0:	f7ff ff82 	bl	800d9f8 <memset>
 800daf4:	4620      	mov	r0, r4
 800daf6:	bd70      	pop	{r4, r5, r6, pc}

0800daf8 <__sfp_lock_acquire>:
 800daf8:	4801      	ldr	r0, [pc, #4]	; (800db00 <__sfp_lock_acquire+0x8>)
 800dafa:	f000 b8b3 	b.w	800dc64 <__retarget_lock_acquire_recursive>
 800dafe:	bf00      	nop
 800db00:	20006a79 	.word	0x20006a79

0800db04 <__sfp_lock_release>:
 800db04:	4801      	ldr	r0, [pc, #4]	; (800db0c <__sfp_lock_release+0x8>)
 800db06:	f000 b8ae 	b.w	800dc66 <__retarget_lock_release_recursive>
 800db0a:	bf00      	nop
 800db0c:	20006a79 	.word	0x20006a79

0800db10 <__sinit_lock_acquire>:
 800db10:	4801      	ldr	r0, [pc, #4]	; (800db18 <__sinit_lock_acquire+0x8>)
 800db12:	f000 b8a7 	b.w	800dc64 <__retarget_lock_acquire_recursive>
 800db16:	bf00      	nop
 800db18:	20006a7a 	.word	0x20006a7a

0800db1c <__sinit_lock_release>:
 800db1c:	4801      	ldr	r0, [pc, #4]	; (800db24 <__sinit_lock_release+0x8>)
 800db1e:	f000 b8a2 	b.w	800dc66 <__retarget_lock_release_recursive>
 800db22:	bf00      	nop
 800db24:	20006a7a 	.word	0x20006a7a

0800db28 <__sinit>:
 800db28:	b510      	push	{r4, lr}
 800db2a:	4604      	mov	r4, r0
 800db2c:	f7ff fff0 	bl	800db10 <__sinit_lock_acquire>
 800db30:	69a3      	ldr	r3, [r4, #24]
 800db32:	b11b      	cbz	r3, 800db3c <__sinit+0x14>
 800db34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db38:	f7ff bff0 	b.w	800db1c <__sinit_lock_release>
 800db3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800db40:	6523      	str	r3, [r4, #80]	; 0x50
 800db42:	4b13      	ldr	r3, [pc, #76]	; (800db90 <__sinit+0x68>)
 800db44:	4a13      	ldr	r2, [pc, #76]	; (800db94 <__sinit+0x6c>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	62a2      	str	r2, [r4, #40]	; 0x28
 800db4a:	42a3      	cmp	r3, r4
 800db4c:	bf08      	it	eq
 800db4e:	2301      	moveq	r3, #1
 800db50:	4620      	mov	r0, r4
 800db52:	bf08      	it	eq
 800db54:	61a3      	streq	r3, [r4, #24]
 800db56:	f000 f81f 	bl	800db98 <__sfp>
 800db5a:	6060      	str	r0, [r4, #4]
 800db5c:	4620      	mov	r0, r4
 800db5e:	f000 f81b 	bl	800db98 <__sfp>
 800db62:	60a0      	str	r0, [r4, #8]
 800db64:	4620      	mov	r0, r4
 800db66:	f000 f817 	bl	800db98 <__sfp>
 800db6a:	2200      	movs	r2, #0
 800db6c:	2104      	movs	r1, #4
 800db6e:	60e0      	str	r0, [r4, #12]
 800db70:	6860      	ldr	r0, [r4, #4]
 800db72:	f7ff ff81 	bl	800da78 <std>
 800db76:	2201      	movs	r2, #1
 800db78:	2109      	movs	r1, #9
 800db7a:	68a0      	ldr	r0, [r4, #8]
 800db7c:	f7ff ff7c 	bl	800da78 <std>
 800db80:	2202      	movs	r2, #2
 800db82:	2112      	movs	r1, #18
 800db84:	68e0      	ldr	r0, [r4, #12]
 800db86:	f7ff ff77 	bl	800da78 <std>
 800db8a:	2301      	movs	r3, #1
 800db8c:	61a3      	str	r3, [r4, #24]
 800db8e:	e7d1      	b.n	800db34 <__sinit+0xc>
 800db90:	08010af0 	.word	0x08010af0
 800db94:	0800dac1 	.word	0x0800dac1

0800db98 <__sfp>:
 800db98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db9a:	4607      	mov	r7, r0
 800db9c:	f7ff ffac 	bl	800daf8 <__sfp_lock_acquire>
 800dba0:	4b1e      	ldr	r3, [pc, #120]	; (800dc1c <__sfp+0x84>)
 800dba2:	681e      	ldr	r6, [r3, #0]
 800dba4:	69b3      	ldr	r3, [r6, #24]
 800dba6:	b913      	cbnz	r3, 800dbae <__sfp+0x16>
 800dba8:	4630      	mov	r0, r6
 800dbaa:	f7ff ffbd 	bl	800db28 <__sinit>
 800dbae:	3648      	adds	r6, #72	; 0x48
 800dbb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dbb4:	3b01      	subs	r3, #1
 800dbb6:	d503      	bpl.n	800dbc0 <__sfp+0x28>
 800dbb8:	6833      	ldr	r3, [r6, #0]
 800dbba:	b30b      	cbz	r3, 800dc00 <__sfp+0x68>
 800dbbc:	6836      	ldr	r6, [r6, #0]
 800dbbe:	e7f7      	b.n	800dbb0 <__sfp+0x18>
 800dbc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dbc4:	b9d5      	cbnz	r5, 800dbfc <__sfp+0x64>
 800dbc6:	4b16      	ldr	r3, [pc, #88]	; (800dc20 <__sfp+0x88>)
 800dbc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dbcc:	60e3      	str	r3, [r4, #12]
 800dbce:	6665      	str	r5, [r4, #100]	; 0x64
 800dbd0:	f000 f847 	bl	800dc62 <__retarget_lock_init_recursive>
 800dbd4:	f7ff ff96 	bl	800db04 <__sfp_lock_release>
 800dbd8:	2208      	movs	r2, #8
 800dbda:	4629      	mov	r1, r5
 800dbdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dbe0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dbe4:	6025      	str	r5, [r4, #0]
 800dbe6:	61a5      	str	r5, [r4, #24]
 800dbe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dbec:	f7ff ff04 	bl	800d9f8 <memset>
 800dbf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dbf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbfc:	3468      	adds	r4, #104	; 0x68
 800dbfe:	e7d9      	b.n	800dbb4 <__sfp+0x1c>
 800dc00:	2104      	movs	r1, #4
 800dc02:	4638      	mov	r0, r7
 800dc04:	f7ff ff62 	bl	800dacc <__sfmoreglue>
 800dc08:	4604      	mov	r4, r0
 800dc0a:	6030      	str	r0, [r6, #0]
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	d1d5      	bne.n	800dbbc <__sfp+0x24>
 800dc10:	f7ff ff78 	bl	800db04 <__sfp_lock_release>
 800dc14:	230c      	movs	r3, #12
 800dc16:	603b      	str	r3, [r7, #0]
 800dc18:	e7ee      	b.n	800dbf8 <__sfp+0x60>
 800dc1a:	bf00      	nop
 800dc1c:	08010af0 	.word	0x08010af0
 800dc20:	ffff0001 	.word	0xffff0001

0800dc24 <_fwalk_reent>:
 800dc24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc28:	4606      	mov	r6, r0
 800dc2a:	4688      	mov	r8, r1
 800dc2c:	2700      	movs	r7, #0
 800dc2e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dc32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc36:	f1b9 0901 	subs.w	r9, r9, #1
 800dc3a:	d505      	bpl.n	800dc48 <_fwalk_reent+0x24>
 800dc3c:	6824      	ldr	r4, [r4, #0]
 800dc3e:	2c00      	cmp	r4, #0
 800dc40:	d1f7      	bne.n	800dc32 <_fwalk_reent+0xe>
 800dc42:	4638      	mov	r0, r7
 800dc44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc48:	89ab      	ldrh	r3, [r5, #12]
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d907      	bls.n	800dc5e <_fwalk_reent+0x3a>
 800dc4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc52:	3301      	adds	r3, #1
 800dc54:	d003      	beq.n	800dc5e <_fwalk_reent+0x3a>
 800dc56:	4629      	mov	r1, r5
 800dc58:	4630      	mov	r0, r6
 800dc5a:	47c0      	blx	r8
 800dc5c:	4307      	orrs	r7, r0
 800dc5e:	3568      	adds	r5, #104	; 0x68
 800dc60:	e7e9      	b.n	800dc36 <_fwalk_reent+0x12>

0800dc62 <__retarget_lock_init_recursive>:
 800dc62:	4770      	bx	lr

0800dc64 <__retarget_lock_acquire_recursive>:
 800dc64:	4770      	bx	lr

0800dc66 <__retarget_lock_release_recursive>:
 800dc66:	4770      	bx	lr

0800dc68 <_free_r>:
 800dc68:	b538      	push	{r3, r4, r5, lr}
 800dc6a:	4605      	mov	r5, r0
 800dc6c:	2900      	cmp	r1, #0
 800dc6e:	d040      	beq.n	800dcf2 <_free_r+0x8a>
 800dc70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc74:	1f0c      	subs	r4, r1, #4
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	bfb8      	it	lt
 800dc7a:	18e4      	addlt	r4, r4, r3
 800dc7c:	f000 ffae 	bl	800ebdc <__malloc_lock>
 800dc80:	4a1c      	ldr	r2, [pc, #112]	; (800dcf4 <_free_r+0x8c>)
 800dc82:	6813      	ldr	r3, [r2, #0]
 800dc84:	b933      	cbnz	r3, 800dc94 <_free_r+0x2c>
 800dc86:	6063      	str	r3, [r4, #4]
 800dc88:	6014      	str	r4, [r2, #0]
 800dc8a:	4628      	mov	r0, r5
 800dc8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc90:	f000 bfaa 	b.w	800ebe8 <__malloc_unlock>
 800dc94:	42a3      	cmp	r3, r4
 800dc96:	d908      	bls.n	800dcaa <_free_r+0x42>
 800dc98:	6820      	ldr	r0, [r4, #0]
 800dc9a:	1821      	adds	r1, r4, r0
 800dc9c:	428b      	cmp	r3, r1
 800dc9e:	bf01      	itttt	eq
 800dca0:	6819      	ldreq	r1, [r3, #0]
 800dca2:	685b      	ldreq	r3, [r3, #4]
 800dca4:	1809      	addeq	r1, r1, r0
 800dca6:	6021      	streq	r1, [r4, #0]
 800dca8:	e7ed      	b.n	800dc86 <_free_r+0x1e>
 800dcaa:	461a      	mov	r2, r3
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	b10b      	cbz	r3, 800dcb4 <_free_r+0x4c>
 800dcb0:	42a3      	cmp	r3, r4
 800dcb2:	d9fa      	bls.n	800dcaa <_free_r+0x42>
 800dcb4:	6811      	ldr	r1, [r2, #0]
 800dcb6:	1850      	adds	r0, r2, r1
 800dcb8:	42a0      	cmp	r0, r4
 800dcba:	d10b      	bne.n	800dcd4 <_free_r+0x6c>
 800dcbc:	6820      	ldr	r0, [r4, #0]
 800dcbe:	4401      	add	r1, r0
 800dcc0:	1850      	adds	r0, r2, r1
 800dcc2:	4283      	cmp	r3, r0
 800dcc4:	6011      	str	r1, [r2, #0]
 800dcc6:	d1e0      	bne.n	800dc8a <_free_r+0x22>
 800dcc8:	6818      	ldr	r0, [r3, #0]
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	4401      	add	r1, r0
 800dcce:	6011      	str	r1, [r2, #0]
 800dcd0:	6053      	str	r3, [r2, #4]
 800dcd2:	e7da      	b.n	800dc8a <_free_r+0x22>
 800dcd4:	d902      	bls.n	800dcdc <_free_r+0x74>
 800dcd6:	230c      	movs	r3, #12
 800dcd8:	602b      	str	r3, [r5, #0]
 800dcda:	e7d6      	b.n	800dc8a <_free_r+0x22>
 800dcdc:	6820      	ldr	r0, [r4, #0]
 800dcde:	1821      	adds	r1, r4, r0
 800dce0:	428b      	cmp	r3, r1
 800dce2:	bf01      	itttt	eq
 800dce4:	6819      	ldreq	r1, [r3, #0]
 800dce6:	685b      	ldreq	r3, [r3, #4]
 800dce8:	1809      	addeq	r1, r1, r0
 800dcea:	6021      	streq	r1, [r4, #0]
 800dcec:	6063      	str	r3, [r4, #4]
 800dcee:	6054      	str	r4, [r2, #4]
 800dcf0:	e7cb      	b.n	800dc8a <_free_r+0x22>
 800dcf2:	bd38      	pop	{r3, r4, r5, pc}
 800dcf4:	20006a7c 	.word	0x20006a7c

0800dcf8 <sbrk_aligned>:
 800dcf8:	b570      	push	{r4, r5, r6, lr}
 800dcfa:	4e0e      	ldr	r6, [pc, #56]	; (800dd34 <sbrk_aligned+0x3c>)
 800dcfc:	460c      	mov	r4, r1
 800dcfe:	6831      	ldr	r1, [r6, #0]
 800dd00:	4605      	mov	r5, r0
 800dd02:	b911      	cbnz	r1, 800dd0a <sbrk_aligned+0x12>
 800dd04:	f000 fcd6 	bl	800e6b4 <_sbrk_r>
 800dd08:	6030      	str	r0, [r6, #0]
 800dd0a:	4621      	mov	r1, r4
 800dd0c:	4628      	mov	r0, r5
 800dd0e:	f000 fcd1 	bl	800e6b4 <_sbrk_r>
 800dd12:	1c43      	adds	r3, r0, #1
 800dd14:	d00a      	beq.n	800dd2c <sbrk_aligned+0x34>
 800dd16:	1cc4      	adds	r4, r0, #3
 800dd18:	f024 0403 	bic.w	r4, r4, #3
 800dd1c:	42a0      	cmp	r0, r4
 800dd1e:	d007      	beq.n	800dd30 <sbrk_aligned+0x38>
 800dd20:	1a21      	subs	r1, r4, r0
 800dd22:	4628      	mov	r0, r5
 800dd24:	f000 fcc6 	bl	800e6b4 <_sbrk_r>
 800dd28:	3001      	adds	r0, #1
 800dd2a:	d101      	bne.n	800dd30 <sbrk_aligned+0x38>
 800dd2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800dd30:	4620      	mov	r0, r4
 800dd32:	bd70      	pop	{r4, r5, r6, pc}
 800dd34:	20006a80 	.word	0x20006a80

0800dd38 <_malloc_r>:
 800dd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd3c:	1ccd      	adds	r5, r1, #3
 800dd3e:	f025 0503 	bic.w	r5, r5, #3
 800dd42:	3508      	adds	r5, #8
 800dd44:	2d0c      	cmp	r5, #12
 800dd46:	bf38      	it	cc
 800dd48:	250c      	movcc	r5, #12
 800dd4a:	2d00      	cmp	r5, #0
 800dd4c:	4607      	mov	r7, r0
 800dd4e:	db01      	blt.n	800dd54 <_malloc_r+0x1c>
 800dd50:	42a9      	cmp	r1, r5
 800dd52:	d905      	bls.n	800dd60 <_malloc_r+0x28>
 800dd54:	230c      	movs	r3, #12
 800dd56:	2600      	movs	r6, #0
 800dd58:	603b      	str	r3, [r7, #0]
 800dd5a:	4630      	mov	r0, r6
 800dd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd60:	4e2e      	ldr	r6, [pc, #184]	; (800de1c <_malloc_r+0xe4>)
 800dd62:	f000 ff3b 	bl	800ebdc <__malloc_lock>
 800dd66:	6833      	ldr	r3, [r6, #0]
 800dd68:	461c      	mov	r4, r3
 800dd6a:	bb34      	cbnz	r4, 800ddba <_malloc_r+0x82>
 800dd6c:	4629      	mov	r1, r5
 800dd6e:	4638      	mov	r0, r7
 800dd70:	f7ff ffc2 	bl	800dcf8 <sbrk_aligned>
 800dd74:	1c43      	adds	r3, r0, #1
 800dd76:	4604      	mov	r4, r0
 800dd78:	d14d      	bne.n	800de16 <_malloc_r+0xde>
 800dd7a:	6834      	ldr	r4, [r6, #0]
 800dd7c:	4626      	mov	r6, r4
 800dd7e:	2e00      	cmp	r6, #0
 800dd80:	d140      	bne.n	800de04 <_malloc_r+0xcc>
 800dd82:	6823      	ldr	r3, [r4, #0]
 800dd84:	4631      	mov	r1, r6
 800dd86:	4638      	mov	r0, r7
 800dd88:	eb04 0803 	add.w	r8, r4, r3
 800dd8c:	f000 fc92 	bl	800e6b4 <_sbrk_r>
 800dd90:	4580      	cmp	r8, r0
 800dd92:	d13a      	bne.n	800de0a <_malloc_r+0xd2>
 800dd94:	6821      	ldr	r1, [r4, #0]
 800dd96:	3503      	adds	r5, #3
 800dd98:	1a6d      	subs	r5, r5, r1
 800dd9a:	f025 0503 	bic.w	r5, r5, #3
 800dd9e:	3508      	adds	r5, #8
 800dda0:	2d0c      	cmp	r5, #12
 800dda2:	bf38      	it	cc
 800dda4:	250c      	movcc	r5, #12
 800dda6:	4638      	mov	r0, r7
 800dda8:	4629      	mov	r1, r5
 800ddaa:	f7ff ffa5 	bl	800dcf8 <sbrk_aligned>
 800ddae:	3001      	adds	r0, #1
 800ddb0:	d02b      	beq.n	800de0a <_malloc_r+0xd2>
 800ddb2:	6823      	ldr	r3, [r4, #0]
 800ddb4:	442b      	add	r3, r5
 800ddb6:	6023      	str	r3, [r4, #0]
 800ddb8:	e00e      	b.n	800ddd8 <_malloc_r+0xa0>
 800ddba:	6822      	ldr	r2, [r4, #0]
 800ddbc:	1b52      	subs	r2, r2, r5
 800ddbe:	d41e      	bmi.n	800ddfe <_malloc_r+0xc6>
 800ddc0:	2a0b      	cmp	r2, #11
 800ddc2:	d916      	bls.n	800ddf2 <_malloc_r+0xba>
 800ddc4:	1961      	adds	r1, r4, r5
 800ddc6:	42a3      	cmp	r3, r4
 800ddc8:	6025      	str	r5, [r4, #0]
 800ddca:	bf18      	it	ne
 800ddcc:	6059      	strne	r1, [r3, #4]
 800ddce:	6863      	ldr	r3, [r4, #4]
 800ddd0:	bf08      	it	eq
 800ddd2:	6031      	streq	r1, [r6, #0]
 800ddd4:	5162      	str	r2, [r4, r5]
 800ddd6:	604b      	str	r3, [r1, #4]
 800ddd8:	4638      	mov	r0, r7
 800ddda:	f104 060b 	add.w	r6, r4, #11
 800ddde:	f000 ff03 	bl	800ebe8 <__malloc_unlock>
 800dde2:	f026 0607 	bic.w	r6, r6, #7
 800dde6:	1d23      	adds	r3, r4, #4
 800dde8:	1af2      	subs	r2, r6, r3
 800ddea:	d0b6      	beq.n	800dd5a <_malloc_r+0x22>
 800ddec:	1b9b      	subs	r3, r3, r6
 800ddee:	50a3      	str	r3, [r4, r2]
 800ddf0:	e7b3      	b.n	800dd5a <_malloc_r+0x22>
 800ddf2:	6862      	ldr	r2, [r4, #4]
 800ddf4:	42a3      	cmp	r3, r4
 800ddf6:	bf0c      	ite	eq
 800ddf8:	6032      	streq	r2, [r6, #0]
 800ddfa:	605a      	strne	r2, [r3, #4]
 800ddfc:	e7ec      	b.n	800ddd8 <_malloc_r+0xa0>
 800ddfe:	4623      	mov	r3, r4
 800de00:	6864      	ldr	r4, [r4, #4]
 800de02:	e7b2      	b.n	800dd6a <_malloc_r+0x32>
 800de04:	4634      	mov	r4, r6
 800de06:	6876      	ldr	r6, [r6, #4]
 800de08:	e7b9      	b.n	800dd7e <_malloc_r+0x46>
 800de0a:	230c      	movs	r3, #12
 800de0c:	4638      	mov	r0, r7
 800de0e:	603b      	str	r3, [r7, #0]
 800de10:	f000 feea 	bl	800ebe8 <__malloc_unlock>
 800de14:	e7a1      	b.n	800dd5a <_malloc_r+0x22>
 800de16:	6025      	str	r5, [r4, #0]
 800de18:	e7de      	b.n	800ddd8 <_malloc_r+0xa0>
 800de1a:	bf00      	nop
 800de1c:	20006a7c 	.word	0x20006a7c

0800de20 <__ssputs_r>:
 800de20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de24:	688e      	ldr	r6, [r1, #8]
 800de26:	4682      	mov	sl, r0
 800de28:	429e      	cmp	r6, r3
 800de2a:	460c      	mov	r4, r1
 800de2c:	4690      	mov	r8, r2
 800de2e:	461f      	mov	r7, r3
 800de30:	d838      	bhi.n	800dea4 <__ssputs_r+0x84>
 800de32:	898a      	ldrh	r2, [r1, #12]
 800de34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800de38:	d032      	beq.n	800dea0 <__ssputs_r+0x80>
 800de3a:	6825      	ldr	r5, [r4, #0]
 800de3c:	6909      	ldr	r1, [r1, #16]
 800de3e:	3301      	adds	r3, #1
 800de40:	eba5 0901 	sub.w	r9, r5, r1
 800de44:	6965      	ldr	r5, [r4, #20]
 800de46:	444b      	add	r3, r9
 800de48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de50:	106d      	asrs	r5, r5, #1
 800de52:	429d      	cmp	r5, r3
 800de54:	bf38      	it	cc
 800de56:	461d      	movcc	r5, r3
 800de58:	0553      	lsls	r3, r2, #21
 800de5a:	d531      	bpl.n	800dec0 <__ssputs_r+0xa0>
 800de5c:	4629      	mov	r1, r5
 800de5e:	f7ff ff6b 	bl	800dd38 <_malloc_r>
 800de62:	4606      	mov	r6, r0
 800de64:	b950      	cbnz	r0, 800de7c <__ssputs_r+0x5c>
 800de66:	230c      	movs	r3, #12
 800de68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de6c:	f8ca 3000 	str.w	r3, [sl]
 800de70:	89a3      	ldrh	r3, [r4, #12]
 800de72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de76:	81a3      	strh	r3, [r4, #12]
 800de78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de7c:	464a      	mov	r2, r9
 800de7e:	6921      	ldr	r1, [r4, #16]
 800de80:	f7ff fdac 	bl	800d9dc <memcpy>
 800de84:	89a3      	ldrh	r3, [r4, #12]
 800de86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800de8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de8e:	81a3      	strh	r3, [r4, #12]
 800de90:	6126      	str	r6, [r4, #16]
 800de92:	444e      	add	r6, r9
 800de94:	6026      	str	r6, [r4, #0]
 800de96:	463e      	mov	r6, r7
 800de98:	6165      	str	r5, [r4, #20]
 800de9a:	eba5 0509 	sub.w	r5, r5, r9
 800de9e:	60a5      	str	r5, [r4, #8]
 800dea0:	42be      	cmp	r6, r7
 800dea2:	d900      	bls.n	800dea6 <__ssputs_r+0x86>
 800dea4:	463e      	mov	r6, r7
 800dea6:	4632      	mov	r2, r6
 800dea8:	4641      	mov	r1, r8
 800deaa:	6820      	ldr	r0, [r4, #0]
 800deac:	f000 fe7c 	bl	800eba8 <memmove>
 800deb0:	68a3      	ldr	r3, [r4, #8]
 800deb2:	2000      	movs	r0, #0
 800deb4:	1b9b      	subs	r3, r3, r6
 800deb6:	60a3      	str	r3, [r4, #8]
 800deb8:	6823      	ldr	r3, [r4, #0]
 800deba:	4433      	add	r3, r6
 800debc:	6023      	str	r3, [r4, #0]
 800debe:	e7db      	b.n	800de78 <__ssputs_r+0x58>
 800dec0:	462a      	mov	r2, r5
 800dec2:	f000 fe97 	bl	800ebf4 <_realloc_r>
 800dec6:	4606      	mov	r6, r0
 800dec8:	2800      	cmp	r0, #0
 800deca:	d1e1      	bne.n	800de90 <__ssputs_r+0x70>
 800decc:	4650      	mov	r0, sl
 800dece:	6921      	ldr	r1, [r4, #16]
 800ded0:	f7ff feca 	bl	800dc68 <_free_r>
 800ded4:	e7c7      	b.n	800de66 <__ssputs_r+0x46>
	...

0800ded8 <_svfiprintf_r>:
 800ded8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dedc:	4698      	mov	r8, r3
 800dede:	898b      	ldrh	r3, [r1, #12]
 800dee0:	4607      	mov	r7, r0
 800dee2:	061b      	lsls	r3, r3, #24
 800dee4:	460d      	mov	r5, r1
 800dee6:	4614      	mov	r4, r2
 800dee8:	b09d      	sub	sp, #116	; 0x74
 800deea:	d50e      	bpl.n	800df0a <_svfiprintf_r+0x32>
 800deec:	690b      	ldr	r3, [r1, #16]
 800deee:	b963      	cbnz	r3, 800df0a <_svfiprintf_r+0x32>
 800def0:	2140      	movs	r1, #64	; 0x40
 800def2:	f7ff ff21 	bl	800dd38 <_malloc_r>
 800def6:	6028      	str	r0, [r5, #0]
 800def8:	6128      	str	r0, [r5, #16]
 800defa:	b920      	cbnz	r0, 800df06 <_svfiprintf_r+0x2e>
 800defc:	230c      	movs	r3, #12
 800defe:	603b      	str	r3, [r7, #0]
 800df00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df04:	e0d1      	b.n	800e0aa <_svfiprintf_r+0x1d2>
 800df06:	2340      	movs	r3, #64	; 0x40
 800df08:	616b      	str	r3, [r5, #20]
 800df0a:	2300      	movs	r3, #0
 800df0c:	9309      	str	r3, [sp, #36]	; 0x24
 800df0e:	2320      	movs	r3, #32
 800df10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df14:	2330      	movs	r3, #48	; 0x30
 800df16:	f04f 0901 	mov.w	r9, #1
 800df1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800df1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e0c4 <_svfiprintf_r+0x1ec>
 800df22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df26:	4623      	mov	r3, r4
 800df28:	469a      	mov	sl, r3
 800df2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df2e:	b10a      	cbz	r2, 800df34 <_svfiprintf_r+0x5c>
 800df30:	2a25      	cmp	r2, #37	; 0x25
 800df32:	d1f9      	bne.n	800df28 <_svfiprintf_r+0x50>
 800df34:	ebba 0b04 	subs.w	fp, sl, r4
 800df38:	d00b      	beq.n	800df52 <_svfiprintf_r+0x7a>
 800df3a:	465b      	mov	r3, fp
 800df3c:	4622      	mov	r2, r4
 800df3e:	4629      	mov	r1, r5
 800df40:	4638      	mov	r0, r7
 800df42:	f7ff ff6d 	bl	800de20 <__ssputs_r>
 800df46:	3001      	adds	r0, #1
 800df48:	f000 80aa 	beq.w	800e0a0 <_svfiprintf_r+0x1c8>
 800df4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df4e:	445a      	add	r2, fp
 800df50:	9209      	str	r2, [sp, #36]	; 0x24
 800df52:	f89a 3000 	ldrb.w	r3, [sl]
 800df56:	2b00      	cmp	r3, #0
 800df58:	f000 80a2 	beq.w	800e0a0 <_svfiprintf_r+0x1c8>
 800df5c:	2300      	movs	r3, #0
 800df5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df66:	f10a 0a01 	add.w	sl, sl, #1
 800df6a:	9304      	str	r3, [sp, #16]
 800df6c:	9307      	str	r3, [sp, #28]
 800df6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df72:	931a      	str	r3, [sp, #104]	; 0x68
 800df74:	4654      	mov	r4, sl
 800df76:	2205      	movs	r2, #5
 800df78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df7c:	4851      	ldr	r0, [pc, #324]	; (800e0c4 <_svfiprintf_r+0x1ec>)
 800df7e:	f000 fe05 	bl	800eb8c <memchr>
 800df82:	9a04      	ldr	r2, [sp, #16]
 800df84:	b9d8      	cbnz	r0, 800dfbe <_svfiprintf_r+0xe6>
 800df86:	06d0      	lsls	r0, r2, #27
 800df88:	bf44      	itt	mi
 800df8a:	2320      	movmi	r3, #32
 800df8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df90:	0711      	lsls	r1, r2, #28
 800df92:	bf44      	itt	mi
 800df94:	232b      	movmi	r3, #43	; 0x2b
 800df96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df9a:	f89a 3000 	ldrb.w	r3, [sl]
 800df9e:	2b2a      	cmp	r3, #42	; 0x2a
 800dfa0:	d015      	beq.n	800dfce <_svfiprintf_r+0xf6>
 800dfa2:	4654      	mov	r4, sl
 800dfa4:	2000      	movs	r0, #0
 800dfa6:	f04f 0c0a 	mov.w	ip, #10
 800dfaa:	9a07      	ldr	r2, [sp, #28]
 800dfac:	4621      	mov	r1, r4
 800dfae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfb2:	3b30      	subs	r3, #48	; 0x30
 800dfb4:	2b09      	cmp	r3, #9
 800dfb6:	d94e      	bls.n	800e056 <_svfiprintf_r+0x17e>
 800dfb8:	b1b0      	cbz	r0, 800dfe8 <_svfiprintf_r+0x110>
 800dfba:	9207      	str	r2, [sp, #28]
 800dfbc:	e014      	b.n	800dfe8 <_svfiprintf_r+0x110>
 800dfbe:	eba0 0308 	sub.w	r3, r0, r8
 800dfc2:	fa09 f303 	lsl.w	r3, r9, r3
 800dfc6:	4313      	orrs	r3, r2
 800dfc8:	46a2      	mov	sl, r4
 800dfca:	9304      	str	r3, [sp, #16]
 800dfcc:	e7d2      	b.n	800df74 <_svfiprintf_r+0x9c>
 800dfce:	9b03      	ldr	r3, [sp, #12]
 800dfd0:	1d19      	adds	r1, r3, #4
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	9103      	str	r1, [sp, #12]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	bfbb      	ittet	lt
 800dfda:	425b      	neglt	r3, r3
 800dfdc:	f042 0202 	orrlt.w	r2, r2, #2
 800dfe0:	9307      	strge	r3, [sp, #28]
 800dfe2:	9307      	strlt	r3, [sp, #28]
 800dfe4:	bfb8      	it	lt
 800dfe6:	9204      	strlt	r2, [sp, #16]
 800dfe8:	7823      	ldrb	r3, [r4, #0]
 800dfea:	2b2e      	cmp	r3, #46	; 0x2e
 800dfec:	d10c      	bne.n	800e008 <_svfiprintf_r+0x130>
 800dfee:	7863      	ldrb	r3, [r4, #1]
 800dff0:	2b2a      	cmp	r3, #42	; 0x2a
 800dff2:	d135      	bne.n	800e060 <_svfiprintf_r+0x188>
 800dff4:	9b03      	ldr	r3, [sp, #12]
 800dff6:	3402      	adds	r4, #2
 800dff8:	1d1a      	adds	r2, r3, #4
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	9203      	str	r2, [sp, #12]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	bfb8      	it	lt
 800e002:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e006:	9305      	str	r3, [sp, #20]
 800e008:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800e0c8 <_svfiprintf_r+0x1f0>
 800e00c:	2203      	movs	r2, #3
 800e00e:	4650      	mov	r0, sl
 800e010:	7821      	ldrb	r1, [r4, #0]
 800e012:	f000 fdbb 	bl	800eb8c <memchr>
 800e016:	b140      	cbz	r0, 800e02a <_svfiprintf_r+0x152>
 800e018:	2340      	movs	r3, #64	; 0x40
 800e01a:	eba0 000a 	sub.w	r0, r0, sl
 800e01e:	fa03 f000 	lsl.w	r0, r3, r0
 800e022:	9b04      	ldr	r3, [sp, #16]
 800e024:	3401      	adds	r4, #1
 800e026:	4303      	orrs	r3, r0
 800e028:	9304      	str	r3, [sp, #16]
 800e02a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e02e:	2206      	movs	r2, #6
 800e030:	4826      	ldr	r0, [pc, #152]	; (800e0cc <_svfiprintf_r+0x1f4>)
 800e032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e036:	f000 fda9 	bl	800eb8c <memchr>
 800e03a:	2800      	cmp	r0, #0
 800e03c:	d038      	beq.n	800e0b0 <_svfiprintf_r+0x1d8>
 800e03e:	4b24      	ldr	r3, [pc, #144]	; (800e0d0 <_svfiprintf_r+0x1f8>)
 800e040:	bb1b      	cbnz	r3, 800e08a <_svfiprintf_r+0x1b2>
 800e042:	9b03      	ldr	r3, [sp, #12]
 800e044:	3307      	adds	r3, #7
 800e046:	f023 0307 	bic.w	r3, r3, #7
 800e04a:	3308      	adds	r3, #8
 800e04c:	9303      	str	r3, [sp, #12]
 800e04e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e050:	4433      	add	r3, r6
 800e052:	9309      	str	r3, [sp, #36]	; 0x24
 800e054:	e767      	b.n	800df26 <_svfiprintf_r+0x4e>
 800e056:	460c      	mov	r4, r1
 800e058:	2001      	movs	r0, #1
 800e05a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e05e:	e7a5      	b.n	800dfac <_svfiprintf_r+0xd4>
 800e060:	2300      	movs	r3, #0
 800e062:	f04f 0c0a 	mov.w	ip, #10
 800e066:	4619      	mov	r1, r3
 800e068:	3401      	adds	r4, #1
 800e06a:	9305      	str	r3, [sp, #20]
 800e06c:	4620      	mov	r0, r4
 800e06e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e072:	3a30      	subs	r2, #48	; 0x30
 800e074:	2a09      	cmp	r2, #9
 800e076:	d903      	bls.n	800e080 <_svfiprintf_r+0x1a8>
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d0c5      	beq.n	800e008 <_svfiprintf_r+0x130>
 800e07c:	9105      	str	r1, [sp, #20]
 800e07e:	e7c3      	b.n	800e008 <_svfiprintf_r+0x130>
 800e080:	4604      	mov	r4, r0
 800e082:	2301      	movs	r3, #1
 800e084:	fb0c 2101 	mla	r1, ip, r1, r2
 800e088:	e7f0      	b.n	800e06c <_svfiprintf_r+0x194>
 800e08a:	ab03      	add	r3, sp, #12
 800e08c:	9300      	str	r3, [sp, #0]
 800e08e:	462a      	mov	r2, r5
 800e090:	4638      	mov	r0, r7
 800e092:	4b10      	ldr	r3, [pc, #64]	; (800e0d4 <_svfiprintf_r+0x1fc>)
 800e094:	a904      	add	r1, sp, #16
 800e096:	f3af 8000 	nop.w
 800e09a:	1c42      	adds	r2, r0, #1
 800e09c:	4606      	mov	r6, r0
 800e09e:	d1d6      	bne.n	800e04e <_svfiprintf_r+0x176>
 800e0a0:	89ab      	ldrh	r3, [r5, #12]
 800e0a2:	065b      	lsls	r3, r3, #25
 800e0a4:	f53f af2c 	bmi.w	800df00 <_svfiprintf_r+0x28>
 800e0a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0aa:	b01d      	add	sp, #116	; 0x74
 800e0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0b0:	ab03      	add	r3, sp, #12
 800e0b2:	9300      	str	r3, [sp, #0]
 800e0b4:	462a      	mov	r2, r5
 800e0b6:	4638      	mov	r0, r7
 800e0b8:	4b06      	ldr	r3, [pc, #24]	; (800e0d4 <_svfiprintf_r+0x1fc>)
 800e0ba:	a904      	add	r1, sp, #16
 800e0bc:	f000 f9d4 	bl	800e468 <_printf_i>
 800e0c0:	e7eb      	b.n	800e09a <_svfiprintf_r+0x1c2>
 800e0c2:	bf00      	nop
 800e0c4:	08010b54 	.word	0x08010b54
 800e0c8:	08010b5a 	.word	0x08010b5a
 800e0cc:	08010b5e 	.word	0x08010b5e
 800e0d0:	00000000 	.word	0x00000000
 800e0d4:	0800de21 	.word	0x0800de21

0800e0d8 <__sfputc_r>:
 800e0d8:	6893      	ldr	r3, [r2, #8]
 800e0da:	b410      	push	{r4}
 800e0dc:	3b01      	subs	r3, #1
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	6093      	str	r3, [r2, #8]
 800e0e2:	da07      	bge.n	800e0f4 <__sfputc_r+0x1c>
 800e0e4:	6994      	ldr	r4, [r2, #24]
 800e0e6:	42a3      	cmp	r3, r4
 800e0e8:	db01      	blt.n	800e0ee <__sfputc_r+0x16>
 800e0ea:	290a      	cmp	r1, #10
 800e0ec:	d102      	bne.n	800e0f4 <__sfputc_r+0x1c>
 800e0ee:	bc10      	pop	{r4}
 800e0f0:	f000 bb34 	b.w	800e75c <__swbuf_r>
 800e0f4:	6813      	ldr	r3, [r2, #0]
 800e0f6:	1c58      	adds	r0, r3, #1
 800e0f8:	6010      	str	r0, [r2, #0]
 800e0fa:	7019      	strb	r1, [r3, #0]
 800e0fc:	4608      	mov	r0, r1
 800e0fe:	bc10      	pop	{r4}
 800e100:	4770      	bx	lr

0800e102 <__sfputs_r>:
 800e102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e104:	4606      	mov	r6, r0
 800e106:	460f      	mov	r7, r1
 800e108:	4614      	mov	r4, r2
 800e10a:	18d5      	adds	r5, r2, r3
 800e10c:	42ac      	cmp	r4, r5
 800e10e:	d101      	bne.n	800e114 <__sfputs_r+0x12>
 800e110:	2000      	movs	r0, #0
 800e112:	e007      	b.n	800e124 <__sfputs_r+0x22>
 800e114:	463a      	mov	r2, r7
 800e116:	4630      	mov	r0, r6
 800e118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e11c:	f7ff ffdc 	bl	800e0d8 <__sfputc_r>
 800e120:	1c43      	adds	r3, r0, #1
 800e122:	d1f3      	bne.n	800e10c <__sfputs_r+0xa>
 800e124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e128 <_vfiprintf_r>:
 800e128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e12c:	460d      	mov	r5, r1
 800e12e:	4614      	mov	r4, r2
 800e130:	4698      	mov	r8, r3
 800e132:	4606      	mov	r6, r0
 800e134:	b09d      	sub	sp, #116	; 0x74
 800e136:	b118      	cbz	r0, 800e140 <_vfiprintf_r+0x18>
 800e138:	6983      	ldr	r3, [r0, #24]
 800e13a:	b90b      	cbnz	r3, 800e140 <_vfiprintf_r+0x18>
 800e13c:	f7ff fcf4 	bl	800db28 <__sinit>
 800e140:	4b89      	ldr	r3, [pc, #548]	; (800e368 <_vfiprintf_r+0x240>)
 800e142:	429d      	cmp	r5, r3
 800e144:	d11b      	bne.n	800e17e <_vfiprintf_r+0x56>
 800e146:	6875      	ldr	r5, [r6, #4]
 800e148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e14a:	07d9      	lsls	r1, r3, #31
 800e14c:	d405      	bmi.n	800e15a <_vfiprintf_r+0x32>
 800e14e:	89ab      	ldrh	r3, [r5, #12]
 800e150:	059a      	lsls	r2, r3, #22
 800e152:	d402      	bmi.n	800e15a <_vfiprintf_r+0x32>
 800e154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e156:	f7ff fd85 	bl	800dc64 <__retarget_lock_acquire_recursive>
 800e15a:	89ab      	ldrh	r3, [r5, #12]
 800e15c:	071b      	lsls	r3, r3, #28
 800e15e:	d501      	bpl.n	800e164 <_vfiprintf_r+0x3c>
 800e160:	692b      	ldr	r3, [r5, #16]
 800e162:	b9eb      	cbnz	r3, 800e1a0 <_vfiprintf_r+0x78>
 800e164:	4629      	mov	r1, r5
 800e166:	4630      	mov	r0, r6
 800e168:	f000 fb5c 	bl	800e824 <__swsetup_r>
 800e16c:	b1c0      	cbz	r0, 800e1a0 <_vfiprintf_r+0x78>
 800e16e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e170:	07dc      	lsls	r4, r3, #31
 800e172:	d50e      	bpl.n	800e192 <_vfiprintf_r+0x6a>
 800e174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e178:	b01d      	add	sp, #116	; 0x74
 800e17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e17e:	4b7b      	ldr	r3, [pc, #492]	; (800e36c <_vfiprintf_r+0x244>)
 800e180:	429d      	cmp	r5, r3
 800e182:	d101      	bne.n	800e188 <_vfiprintf_r+0x60>
 800e184:	68b5      	ldr	r5, [r6, #8]
 800e186:	e7df      	b.n	800e148 <_vfiprintf_r+0x20>
 800e188:	4b79      	ldr	r3, [pc, #484]	; (800e370 <_vfiprintf_r+0x248>)
 800e18a:	429d      	cmp	r5, r3
 800e18c:	bf08      	it	eq
 800e18e:	68f5      	ldreq	r5, [r6, #12]
 800e190:	e7da      	b.n	800e148 <_vfiprintf_r+0x20>
 800e192:	89ab      	ldrh	r3, [r5, #12]
 800e194:	0598      	lsls	r0, r3, #22
 800e196:	d4ed      	bmi.n	800e174 <_vfiprintf_r+0x4c>
 800e198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e19a:	f7ff fd64 	bl	800dc66 <__retarget_lock_release_recursive>
 800e19e:	e7e9      	b.n	800e174 <_vfiprintf_r+0x4c>
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	9309      	str	r3, [sp, #36]	; 0x24
 800e1a4:	2320      	movs	r3, #32
 800e1a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1aa:	2330      	movs	r3, #48	; 0x30
 800e1ac:	f04f 0901 	mov.w	r9, #1
 800e1b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1b4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e374 <_vfiprintf_r+0x24c>
 800e1b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1bc:	4623      	mov	r3, r4
 800e1be:	469a      	mov	sl, r3
 800e1c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1c4:	b10a      	cbz	r2, 800e1ca <_vfiprintf_r+0xa2>
 800e1c6:	2a25      	cmp	r2, #37	; 0x25
 800e1c8:	d1f9      	bne.n	800e1be <_vfiprintf_r+0x96>
 800e1ca:	ebba 0b04 	subs.w	fp, sl, r4
 800e1ce:	d00b      	beq.n	800e1e8 <_vfiprintf_r+0xc0>
 800e1d0:	465b      	mov	r3, fp
 800e1d2:	4622      	mov	r2, r4
 800e1d4:	4629      	mov	r1, r5
 800e1d6:	4630      	mov	r0, r6
 800e1d8:	f7ff ff93 	bl	800e102 <__sfputs_r>
 800e1dc:	3001      	adds	r0, #1
 800e1de:	f000 80aa 	beq.w	800e336 <_vfiprintf_r+0x20e>
 800e1e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1e4:	445a      	add	r2, fp
 800e1e6:	9209      	str	r2, [sp, #36]	; 0x24
 800e1e8:	f89a 3000 	ldrb.w	r3, [sl]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	f000 80a2 	beq.w	800e336 <_vfiprintf_r+0x20e>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1fc:	f10a 0a01 	add.w	sl, sl, #1
 800e200:	9304      	str	r3, [sp, #16]
 800e202:	9307      	str	r3, [sp, #28]
 800e204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e208:	931a      	str	r3, [sp, #104]	; 0x68
 800e20a:	4654      	mov	r4, sl
 800e20c:	2205      	movs	r2, #5
 800e20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e212:	4858      	ldr	r0, [pc, #352]	; (800e374 <_vfiprintf_r+0x24c>)
 800e214:	f000 fcba 	bl	800eb8c <memchr>
 800e218:	9a04      	ldr	r2, [sp, #16]
 800e21a:	b9d8      	cbnz	r0, 800e254 <_vfiprintf_r+0x12c>
 800e21c:	06d1      	lsls	r1, r2, #27
 800e21e:	bf44      	itt	mi
 800e220:	2320      	movmi	r3, #32
 800e222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e226:	0713      	lsls	r3, r2, #28
 800e228:	bf44      	itt	mi
 800e22a:	232b      	movmi	r3, #43	; 0x2b
 800e22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e230:	f89a 3000 	ldrb.w	r3, [sl]
 800e234:	2b2a      	cmp	r3, #42	; 0x2a
 800e236:	d015      	beq.n	800e264 <_vfiprintf_r+0x13c>
 800e238:	4654      	mov	r4, sl
 800e23a:	2000      	movs	r0, #0
 800e23c:	f04f 0c0a 	mov.w	ip, #10
 800e240:	9a07      	ldr	r2, [sp, #28]
 800e242:	4621      	mov	r1, r4
 800e244:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e248:	3b30      	subs	r3, #48	; 0x30
 800e24a:	2b09      	cmp	r3, #9
 800e24c:	d94e      	bls.n	800e2ec <_vfiprintf_r+0x1c4>
 800e24e:	b1b0      	cbz	r0, 800e27e <_vfiprintf_r+0x156>
 800e250:	9207      	str	r2, [sp, #28]
 800e252:	e014      	b.n	800e27e <_vfiprintf_r+0x156>
 800e254:	eba0 0308 	sub.w	r3, r0, r8
 800e258:	fa09 f303 	lsl.w	r3, r9, r3
 800e25c:	4313      	orrs	r3, r2
 800e25e:	46a2      	mov	sl, r4
 800e260:	9304      	str	r3, [sp, #16]
 800e262:	e7d2      	b.n	800e20a <_vfiprintf_r+0xe2>
 800e264:	9b03      	ldr	r3, [sp, #12]
 800e266:	1d19      	adds	r1, r3, #4
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	9103      	str	r1, [sp, #12]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	bfbb      	ittet	lt
 800e270:	425b      	neglt	r3, r3
 800e272:	f042 0202 	orrlt.w	r2, r2, #2
 800e276:	9307      	strge	r3, [sp, #28]
 800e278:	9307      	strlt	r3, [sp, #28]
 800e27a:	bfb8      	it	lt
 800e27c:	9204      	strlt	r2, [sp, #16]
 800e27e:	7823      	ldrb	r3, [r4, #0]
 800e280:	2b2e      	cmp	r3, #46	; 0x2e
 800e282:	d10c      	bne.n	800e29e <_vfiprintf_r+0x176>
 800e284:	7863      	ldrb	r3, [r4, #1]
 800e286:	2b2a      	cmp	r3, #42	; 0x2a
 800e288:	d135      	bne.n	800e2f6 <_vfiprintf_r+0x1ce>
 800e28a:	9b03      	ldr	r3, [sp, #12]
 800e28c:	3402      	adds	r4, #2
 800e28e:	1d1a      	adds	r2, r3, #4
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	9203      	str	r2, [sp, #12]
 800e294:	2b00      	cmp	r3, #0
 800e296:	bfb8      	it	lt
 800e298:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e29c:	9305      	str	r3, [sp, #20]
 800e29e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800e378 <_vfiprintf_r+0x250>
 800e2a2:	2203      	movs	r2, #3
 800e2a4:	4650      	mov	r0, sl
 800e2a6:	7821      	ldrb	r1, [r4, #0]
 800e2a8:	f000 fc70 	bl	800eb8c <memchr>
 800e2ac:	b140      	cbz	r0, 800e2c0 <_vfiprintf_r+0x198>
 800e2ae:	2340      	movs	r3, #64	; 0x40
 800e2b0:	eba0 000a 	sub.w	r0, r0, sl
 800e2b4:	fa03 f000 	lsl.w	r0, r3, r0
 800e2b8:	9b04      	ldr	r3, [sp, #16]
 800e2ba:	3401      	adds	r4, #1
 800e2bc:	4303      	orrs	r3, r0
 800e2be:	9304      	str	r3, [sp, #16]
 800e2c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2c4:	2206      	movs	r2, #6
 800e2c6:	482d      	ldr	r0, [pc, #180]	; (800e37c <_vfiprintf_r+0x254>)
 800e2c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2cc:	f000 fc5e 	bl	800eb8c <memchr>
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	d03f      	beq.n	800e354 <_vfiprintf_r+0x22c>
 800e2d4:	4b2a      	ldr	r3, [pc, #168]	; (800e380 <_vfiprintf_r+0x258>)
 800e2d6:	bb1b      	cbnz	r3, 800e320 <_vfiprintf_r+0x1f8>
 800e2d8:	9b03      	ldr	r3, [sp, #12]
 800e2da:	3307      	adds	r3, #7
 800e2dc:	f023 0307 	bic.w	r3, r3, #7
 800e2e0:	3308      	adds	r3, #8
 800e2e2:	9303      	str	r3, [sp, #12]
 800e2e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2e6:	443b      	add	r3, r7
 800e2e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e2ea:	e767      	b.n	800e1bc <_vfiprintf_r+0x94>
 800e2ec:	460c      	mov	r4, r1
 800e2ee:	2001      	movs	r0, #1
 800e2f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2f4:	e7a5      	b.n	800e242 <_vfiprintf_r+0x11a>
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	f04f 0c0a 	mov.w	ip, #10
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	3401      	adds	r4, #1
 800e300:	9305      	str	r3, [sp, #20]
 800e302:	4620      	mov	r0, r4
 800e304:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e308:	3a30      	subs	r2, #48	; 0x30
 800e30a:	2a09      	cmp	r2, #9
 800e30c:	d903      	bls.n	800e316 <_vfiprintf_r+0x1ee>
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d0c5      	beq.n	800e29e <_vfiprintf_r+0x176>
 800e312:	9105      	str	r1, [sp, #20]
 800e314:	e7c3      	b.n	800e29e <_vfiprintf_r+0x176>
 800e316:	4604      	mov	r4, r0
 800e318:	2301      	movs	r3, #1
 800e31a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e31e:	e7f0      	b.n	800e302 <_vfiprintf_r+0x1da>
 800e320:	ab03      	add	r3, sp, #12
 800e322:	9300      	str	r3, [sp, #0]
 800e324:	462a      	mov	r2, r5
 800e326:	4630      	mov	r0, r6
 800e328:	4b16      	ldr	r3, [pc, #88]	; (800e384 <_vfiprintf_r+0x25c>)
 800e32a:	a904      	add	r1, sp, #16
 800e32c:	f3af 8000 	nop.w
 800e330:	4607      	mov	r7, r0
 800e332:	1c78      	adds	r0, r7, #1
 800e334:	d1d6      	bne.n	800e2e4 <_vfiprintf_r+0x1bc>
 800e336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e338:	07d9      	lsls	r1, r3, #31
 800e33a:	d405      	bmi.n	800e348 <_vfiprintf_r+0x220>
 800e33c:	89ab      	ldrh	r3, [r5, #12]
 800e33e:	059a      	lsls	r2, r3, #22
 800e340:	d402      	bmi.n	800e348 <_vfiprintf_r+0x220>
 800e342:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e344:	f7ff fc8f 	bl	800dc66 <__retarget_lock_release_recursive>
 800e348:	89ab      	ldrh	r3, [r5, #12]
 800e34a:	065b      	lsls	r3, r3, #25
 800e34c:	f53f af12 	bmi.w	800e174 <_vfiprintf_r+0x4c>
 800e350:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e352:	e711      	b.n	800e178 <_vfiprintf_r+0x50>
 800e354:	ab03      	add	r3, sp, #12
 800e356:	9300      	str	r3, [sp, #0]
 800e358:	462a      	mov	r2, r5
 800e35a:	4630      	mov	r0, r6
 800e35c:	4b09      	ldr	r3, [pc, #36]	; (800e384 <_vfiprintf_r+0x25c>)
 800e35e:	a904      	add	r1, sp, #16
 800e360:	f000 f882 	bl	800e468 <_printf_i>
 800e364:	e7e4      	b.n	800e330 <_vfiprintf_r+0x208>
 800e366:	bf00      	nop
 800e368:	08010b14 	.word	0x08010b14
 800e36c:	08010b34 	.word	0x08010b34
 800e370:	08010af4 	.word	0x08010af4
 800e374:	08010b54 	.word	0x08010b54
 800e378:	08010b5a 	.word	0x08010b5a
 800e37c:	08010b5e 	.word	0x08010b5e
 800e380:	00000000 	.word	0x00000000
 800e384:	0800e103 	.word	0x0800e103

0800e388 <_printf_common>:
 800e388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e38c:	4616      	mov	r6, r2
 800e38e:	4699      	mov	r9, r3
 800e390:	688a      	ldr	r2, [r1, #8]
 800e392:	690b      	ldr	r3, [r1, #16]
 800e394:	4607      	mov	r7, r0
 800e396:	4293      	cmp	r3, r2
 800e398:	bfb8      	it	lt
 800e39a:	4613      	movlt	r3, r2
 800e39c:	6033      	str	r3, [r6, #0]
 800e39e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e3a2:	460c      	mov	r4, r1
 800e3a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e3a8:	b10a      	cbz	r2, 800e3ae <_printf_common+0x26>
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	6033      	str	r3, [r6, #0]
 800e3ae:	6823      	ldr	r3, [r4, #0]
 800e3b0:	0699      	lsls	r1, r3, #26
 800e3b2:	bf42      	ittt	mi
 800e3b4:	6833      	ldrmi	r3, [r6, #0]
 800e3b6:	3302      	addmi	r3, #2
 800e3b8:	6033      	strmi	r3, [r6, #0]
 800e3ba:	6825      	ldr	r5, [r4, #0]
 800e3bc:	f015 0506 	ands.w	r5, r5, #6
 800e3c0:	d106      	bne.n	800e3d0 <_printf_common+0x48>
 800e3c2:	f104 0a19 	add.w	sl, r4, #25
 800e3c6:	68e3      	ldr	r3, [r4, #12]
 800e3c8:	6832      	ldr	r2, [r6, #0]
 800e3ca:	1a9b      	subs	r3, r3, r2
 800e3cc:	42ab      	cmp	r3, r5
 800e3ce:	dc28      	bgt.n	800e422 <_printf_common+0x9a>
 800e3d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e3d4:	1e13      	subs	r3, r2, #0
 800e3d6:	6822      	ldr	r2, [r4, #0]
 800e3d8:	bf18      	it	ne
 800e3da:	2301      	movne	r3, #1
 800e3dc:	0692      	lsls	r2, r2, #26
 800e3de:	d42d      	bmi.n	800e43c <_printf_common+0xb4>
 800e3e0:	4649      	mov	r1, r9
 800e3e2:	4638      	mov	r0, r7
 800e3e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e3e8:	47c0      	blx	r8
 800e3ea:	3001      	adds	r0, #1
 800e3ec:	d020      	beq.n	800e430 <_printf_common+0xa8>
 800e3ee:	6823      	ldr	r3, [r4, #0]
 800e3f0:	68e5      	ldr	r5, [r4, #12]
 800e3f2:	f003 0306 	and.w	r3, r3, #6
 800e3f6:	2b04      	cmp	r3, #4
 800e3f8:	bf18      	it	ne
 800e3fa:	2500      	movne	r5, #0
 800e3fc:	6832      	ldr	r2, [r6, #0]
 800e3fe:	f04f 0600 	mov.w	r6, #0
 800e402:	68a3      	ldr	r3, [r4, #8]
 800e404:	bf08      	it	eq
 800e406:	1aad      	subeq	r5, r5, r2
 800e408:	6922      	ldr	r2, [r4, #16]
 800e40a:	bf08      	it	eq
 800e40c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e410:	4293      	cmp	r3, r2
 800e412:	bfc4      	itt	gt
 800e414:	1a9b      	subgt	r3, r3, r2
 800e416:	18ed      	addgt	r5, r5, r3
 800e418:	341a      	adds	r4, #26
 800e41a:	42b5      	cmp	r5, r6
 800e41c:	d11a      	bne.n	800e454 <_printf_common+0xcc>
 800e41e:	2000      	movs	r0, #0
 800e420:	e008      	b.n	800e434 <_printf_common+0xac>
 800e422:	2301      	movs	r3, #1
 800e424:	4652      	mov	r2, sl
 800e426:	4649      	mov	r1, r9
 800e428:	4638      	mov	r0, r7
 800e42a:	47c0      	blx	r8
 800e42c:	3001      	adds	r0, #1
 800e42e:	d103      	bne.n	800e438 <_printf_common+0xb0>
 800e430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e438:	3501      	adds	r5, #1
 800e43a:	e7c4      	b.n	800e3c6 <_printf_common+0x3e>
 800e43c:	2030      	movs	r0, #48	; 0x30
 800e43e:	18e1      	adds	r1, r4, r3
 800e440:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e444:	1c5a      	adds	r2, r3, #1
 800e446:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e44a:	4422      	add	r2, r4
 800e44c:	3302      	adds	r3, #2
 800e44e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e452:	e7c5      	b.n	800e3e0 <_printf_common+0x58>
 800e454:	2301      	movs	r3, #1
 800e456:	4622      	mov	r2, r4
 800e458:	4649      	mov	r1, r9
 800e45a:	4638      	mov	r0, r7
 800e45c:	47c0      	blx	r8
 800e45e:	3001      	adds	r0, #1
 800e460:	d0e6      	beq.n	800e430 <_printf_common+0xa8>
 800e462:	3601      	adds	r6, #1
 800e464:	e7d9      	b.n	800e41a <_printf_common+0x92>
	...

0800e468 <_printf_i>:
 800e468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e46c:	7e0f      	ldrb	r7, [r1, #24]
 800e46e:	4691      	mov	r9, r2
 800e470:	2f78      	cmp	r7, #120	; 0x78
 800e472:	4680      	mov	r8, r0
 800e474:	460c      	mov	r4, r1
 800e476:	469a      	mov	sl, r3
 800e478:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e47a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e47e:	d807      	bhi.n	800e490 <_printf_i+0x28>
 800e480:	2f62      	cmp	r7, #98	; 0x62
 800e482:	d80a      	bhi.n	800e49a <_printf_i+0x32>
 800e484:	2f00      	cmp	r7, #0
 800e486:	f000 80d9 	beq.w	800e63c <_printf_i+0x1d4>
 800e48a:	2f58      	cmp	r7, #88	; 0x58
 800e48c:	f000 80a4 	beq.w	800e5d8 <_printf_i+0x170>
 800e490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e494:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e498:	e03a      	b.n	800e510 <_printf_i+0xa8>
 800e49a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e49e:	2b15      	cmp	r3, #21
 800e4a0:	d8f6      	bhi.n	800e490 <_printf_i+0x28>
 800e4a2:	a101      	add	r1, pc, #4	; (adr r1, 800e4a8 <_printf_i+0x40>)
 800e4a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e4a8:	0800e501 	.word	0x0800e501
 800e4ac:	0800e515 	.word	0x0800e515
 800e4b0:	0800e491 	.word	0x0800e491
 800e4b4:	0800e491 	.word	0x0800e491
 800e4b8:	0800e491 	.word	0x0800e491
 800e4bc:	0800e491 	.word	0x0800e491
 800e4c0:	0800e515 	.word	0x0800e515
 800e4c4:	0800e491 	.word	0x0800e491
 800e4c8:	0800e491 	.word	0x0800e491
 800e4cc:	0800e491 	.word	0x0800e491
 800e4d0:	0800e491 	.word	0x0800e491
 800e4d4:	0800e623 	.word	0x0800e623
 800e4d8:	0800e545 	.word	0x0800e545
 800e4dc:	0800e605 	.word	0x0800e605
 800e4e0:	0800e491 	.word	0x0800e491
 800e4e4:	0800e491 	.word	0x0800e491
 800e4e8:	0800e645 	.word	0x0800e645
 800e4ec:	0800e491 	.word	0x0800e491
 800e4f0:	0800e545 	.word	0x0800e545
 800e4f4:	0800e491 	.word	0x0800e491
 800e4f8:	0800e491 	.word	0x0800e491
 800e4fc:	0800e60d 	.word	0x0800e60d
 800e500:	682b      	ldr	r3, [r5, #0]
 800e502:	1d1a      	adds	r2, r3, #4
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	602a      	str	r2, [r5, #0]
 800e508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e50c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e510:	2301      	movs	r3, #1
 800e512:	e0a4      	b.n	800e65e <_printf_i+0x1f6>
 800e514:	6820      	ldr	r0, [r4, #0]
 800e516:	6829      	ldr	r1, [r5, #0]
 800e518:	0606      	lsls	r6, r0, #24
 800e51a:	f101 0304 	add.w	r3, r1, #4
 800e51e:	d50a      	bpl.n	800e536 <_printf_i+0xce>
 800e520:	680e      	ldr	r6, [r1, #0]
 800e522:	602b      	str	r3, [r5, #0]
 800e524:	2e00      	cmp	r6, #0
 800e526:	da03      	bge.n	800e530 <_printf_i+0xc8>
 800e528:	232d      	movs	r3, #45	; 0x2d
 800e52a:	4276      	negs	r6, r6
 800e52c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e530:	230a      	movs	r3, #10
 800e532:	485e      	ldr	r0, [pc, #376]	; (800e6ac <_printf_i+0x244>)
 800e534:	e019      	b.n	800e56a <_printf_i+0x102>
 800e536:	680e      	ldr	r6, [r1, #0]
 800e538:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e53c:	602b      	str	r3, [r5, #0]
 800e53e:	bf18      	it	ne
 800e540:	b236      	sxthne	r6, r6
 800e542:	e7ef      	b.n	800e524 <_printf_i+0xbc>
 800e544:	682b      	ldr	r3, [r5, #0]
 800e546:	6820      	ldr	r0, [r4, #0]
 800e548:	1d19      	adds	r1, r3, #4
 800e54a:	6029      	str	r1, [r5, #0]
 800e54c:	0601      	lsls	r1, r0, #24
 800e54e:	d501      	bpl.n	800e554 <_printf_i+0xec>
 800e550:	681e      	ldr	r6, [r3, #0]
 800e552:	e002      	b.n	800e55a <_printf_i+0xf2>
 800e554:	0646      	lsls	r6, r0, #25
 800e556:	d5fb      	bpl.n	800e550 <_printf_i+0xe8>
 800e558:	881e      	ldrh	r6, [r3, #0]
 800e55a:	2f6f      	cmp	r7, #111	; 0x6f
 800e55c:	bf0c      	ite	eq
 800e55e:	2308      	moveq	r3, #8
 800e560:	230a      	movne	r3, #10
 800e562:	4852      	ldr	r0, [pc, #328]	; (800e6ac <_printf_i+0x244>)
 800e564:	2100      	movs	r1, #0
 800e566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e56a:	6865      	ldr	r5, [r4, #4]
 800e56c:	2d00      	cmp	r5, #0
 800e56e:	bfa8      	it	ge
 800e570:	6821      	ldrge	r1, [r4, #0]
 800e572:	60a5      	str	r5, [r4, #8]
 800e574:	bfa4      	itt	ge
 800e576:	f021 0104 	bicge.w	r1, r1, #4
 800e57a:	6021      	strge	r1, [r4, #0]
 800e57c:	b90e      	cbnz	r6, 800e582 <_printf_i+0x11a>
 800e57e:	2d00      	cmp	r5, #0
 800e580:	d04d      	beq.n	800e61e <_printf_i+0x1b6>
 800e582:	4615      	mov	r5, r2
 800e584:	fbb6 f1f3 	udiv	r1, r6, r3
 800e588:	fb03 6711 	mls	r7, r3, r1, r6
 800e58c:	5dc7      	ldrb	r7, [r0, r7]
 800e58e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e592:	4637      	mov	r7, r6
 800e594:	42bb      	cmp	r3, r7
 800e596:	460e      	mov	r6, r1
 800e598:	d9f4      	bls.n	800e584 <_printf_i+0x11c>
 800e59a:	2b08      	cmp	r3, #8
 800e59c:	d10b      	bne.n	800e5b6 <_printf_i+0x14e>
 800e59e:	6823      	ldr	r3, [r4, #0]
 800e5a0:	07de      	lsls	r6, r3, #31
 800e5a2:	d508      	bpl.n	800e5b6 <_printf_i+0x14e>
 800e5a4:	6923      	ldr	r3, [r4, #16]
 800e5a6:	6861      	ldr	r1, [r4, #4]
 800e5a8:	4299      	cmp	r1, r3
 800e5aa:	bfde      	ittt	le
 800e5ac:	2330      	movle	r3, #48	; 0x30
 800e5ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e5b2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e5b6:	1b52      	subs	r2, r2, r5
 800e5b8:	6122      	str	r2, [r4, #16]
 800e5ba:	464b      	mov	r3, r9
 800e5bc:	4621      	mov	r1, r4
 800e5be:	4640      	mov	r0, r8
 800e5c0:	f8cd a000 	str.w	sl, [sp]
 800e5c4:	aa03      	add	r2, sp, #12
 800e5c6:	f7ff fedf 	bl	800e388 <_printf_common>
 800e5ca:	3001      	adds	r0, #1
 800e5cc:	d14c      	bne.n	800e668 <_printf_i+0x200>
 800e5ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e5d2:	b004      	add	sp, #16
 800e5d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5d8:	4834      	ldr	r0, [pc, #208]	; (800e6ac <_printf_i+0x244>)
 800e5da:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e5de:	6829      	ldr	r1, [r5, #0]
 800e5e0:	6823      	ldr	r3, [r4, #0]
 800e5e2:	f851 6b04 	ldr.w	r6, [r1], #4
 800e5e6:	6029      	str	r1, [r5, #0]
 800e5e8:	061d      	lsls	r5, r3, #24
 800e5ea:	d514      	bpl.n	800e616 <_printf_i+0x1ae>
 800e5ec:	07df      	lsls	r7, r3, #31
 800e5ee:	bf44      	itt	mi
 800e5f0:	f043 0320 	orrmi.w	r3, r3, #32
 800e5f4:	6023      	strmi	r3, [r4, #0]
 800e5f6:	b91e      	cbnz	r6, 800e600 <_printf_i+0x198>
 800e5f8:	6823      	ldr	r3, [r4, #0]
 800e5fa:	f023 0320 	bic.w	r3, r3, #32
 800e5fe:	6023      	str	r3, [r4, #0]
 800e600:	2310      	movs	r3, #16
 800e602:	e7af      	b.n	800e564 <_printf_i+0xfc>
 800e604:	6823      	ldr	r3, [r4, #0]
 800e606:	f043 0320 	orr.w	r3, r3, #32
 800e60a:	6023      	str	r3, [r4, #0]
 800e60c:	2378      	movs	r3, #120	; 0x78
 800e60e:	4828      	ldr	r0, [pc, #160]	; (800e6b0 <_printf_i+0x248>)
 800e610:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e614:	e7e3      	b.n	800e5de <_printf_i+0x176>
 800e616:	0659      	lsls	r1, r3, #25
 800e618:	bf48      	it	mi
 800e61a:	b2b6      	uxthmi	r6, r6
 800e61c:	e7e6      	b.n	800e5ec <_printf_i+0x184>
 800e61e:	4615      	mov	r5, r2
 800e620:	e7bb      	b.n	800e59a <_printf_i+0x132>
 800e622:	682b      	ldr	r3, [r5, #0]
 800e624:	6826      	ldr	r6, [r4, #0]
 800e626:	1d18      	adds	r0, r3, #4
 800e628:	6961      	ldr	r1, [r4, #20]
 800e62a:	6028      	str	r0, [r5, #0]
 800e62c:	0635      	lsls	r5, r6, #24
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	d501      	bpl.n	800e636 <_printf_i+0x1ce>
 800e632:	6019      	str	r1, [r3, #0]
 800e634:	e002      	b.n	800e63c <_printf_i+0x1d4>
 800e636:	0670      	lsls	r0, r6, #25
 800e638:	d5fb      	bpl.n	800e632 <_printf_i+0x1ca>
 800e63a:	8019      	strh	r1, [r3, #0]
 800e63c:	2300      	movs	r3, #0
 800e63e:	4615      	mov	r5, r2
 800e640:	6123      	str	r3, [r4, #16]
 800e642:	e7ba      	b.n	800e5ba <_printf_i+0x152>
 800e644:	682b      	ldr	r3, [r5, #0]
 800e646:	2100      	movs	r1, #0
 800e648:	1d1a      	adds	r2, r3, #4
 800e64a:	602a      	str	r2, [r5, #0]
 800e64c:	681d      	ldr	r5, [r3, #0]
 800e64e:	6862      	ldr	r2, [r4, #4]
 800e650:	4628      	mov	r0, r5
 800e652:	f000 fa9b 	bl	800eb8c <memchr>
 800e656:	b108      	cbz	r0, 800e65c <_printf_i+0x1f4>
 800e658:	1b40      	subs	r0, r0, r5
 800e65a:	6060      	str	r0, [r4, #4]
 800e65c:	6863      	ldr	r3, [r4, #4]
 800e65e:	6123      	str	r3, [r4, #16]
 800e660:	2300      	movs	r3, #0
 800e662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e666:	e7a8      	b.n	800e5ba <_printf_i+0x152>
 800e668:	462a      	mov	r2, r5
 800e66a:	4649      	mov	r1, r9
 800e66c:	4640      	mov	r0, r8
 800e66e:	6923      	ldr	r3, [r4, #16]
 800e670:	47d0      	blx	sl
 800e672:	3001      	adds	r0, #1
 800e674:	d0ab      	beq.n	800e5ce <_printf_i+0x166>
 800e676:	6823      	ldr	r3, [r4, #0]
 800e678:	079b      	lsls	r3, r3, #30
 800e67a:	d413      	bmi.n	800e6a4 <_printf_i+0x23c>
 800e67c:	68e0      	ldr	r0, [r4, #12]
 800e67e:	9b03      	ldr	r3, [sp, #12]
 800e680:	4298      	cmp	r0, r3
 800e682:	bfb8      	it	lt
 800e684:	4618      	movlt	r0, r3
 800e686:	e7a4      	b.n	800e5d2 <_printf_i+0x16a>
 800e688:	2301      	movs	r3, #1
 800e68a:	4632      	mov	r2, r6
 800e68c:	4649      	mov	r1, r9
 800e68e:	4640      	mov	r0, r8
 800e690:	47d0      	blx	sl
 800e692:	3001      	adds	r0, #1
 800e694:	d09b      	beq.n	800e5ce <_printf_i+0x166>
 800e696:	3501      	adds	r5, #1
 800e698:	68e3      	ldr	r3, [r4, #12]
 800e69a:	9903      	ldr	r1, [sp, #12]
 800e69c:	1a5b      	subs	r3, r3, r1
 800e69e:	42ab      	cmp	r3, r5
 800e6a0:	dcf2      	bgt.n	800e688 <_printf_i+0x220>
 800e6a2:	e7eb      	b.n	800e67c <_printf_i+0x214>
 800e6a4:	2500      	movs	r5, #0
 800e6a6:	f104 0619 	add.w	r6, r4, #25
 800e6aa:	e7f5      	b.n	800e698 <_printf_i+0x230>
 800e6ac:	08010b65 	.word	0x08010b65
 800e6b0:	08010b76 	.word	0x08010b76

0800e6b4 <_sbrk_r>:
 800e6b4:	b538      	push	{r3, r4, r5, lr}
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	4d05      	ldr	r5, [pc, #20]	; (800e6d0 <_sbrk_r+0x1c>)
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	4608      	mov	r0, r1
 800e6be:	602b      	str	r3, [r5, #0]
 800e6c0:	f7f2 fb0a 	bl	8000cd8 <_sbrk>
 800e6c4:	1c43      	adds	r3, r0, #1
 800e6c6:	d102      	bne.n	800e6ce <_sbrk_r+0x1a>
 800e6c8:	682b      	ldr	r3, [r5, #0]
 800e6ca:	b103      	cbz	r3, 800e6ce <_sbrk_r+0x1a>
 800e6cc:	6023      	str	r3, [r4, #0]
 800e6ce:	bd38      	pop	{r3, r4, r5, pc}
 800e6d0:	20006a74 	.word	0x20006a74

0800e6d4 <__sread>:
 800e6d4:	b510      	push	{r4, lr}
 800e6d6:	460c      	mov	r4, r1
 800e6d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6dc:	f000 faba 	bl	800ec54 <_read_r>
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	bfab      	itete	ge
 800e6e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e6e6:	89a3      	ldrhlt	r3, [r4, #12]
 800e6e8:	181b      	addge	r3, r3, r0
 800e6ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e6ee:	bfac      	ite	ge
 800e6f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e6f2:	81a3      	strhlt	r3, [r4, #12]
 800e6f4:	bd10      	pop	{r4, pc}

0800e6f6 <__swrite>:
 800e6f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6fa:	461f      	mov	r7, r3
 800e6fc:	898b      	ldrh	r3, [r1, #12]
 800e6fe:	4605      	mov	r5, r0
 800e700:	05db      	lsls	r3, r3, #23
 800e702:	460c      	mov	r4, r1
 800e704:	4616      	mov	r6, r2
 800e706:	d505      	bpl.n	800e714 <__swrite+0x1e>
 800e708:	2302      	movs	r3, #2
 800e70a:	2200      	movs	r2, #0
 800e70c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e710:	f000 f9c4 	bl	800ea9c <_lseek_r>
 800e714:	89a3      	ldrh	r3, [r4, #12]
 800e716:	4632      	mov	r2, r6
 800e718:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e71c:	81a3      	strh	r3, [r4, #12]
 800e71e:	4628      	mov	r0, r5
 800e720:	463b      	mov	r3, r7
 800e722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e72a:	f000 b869 	b.w	800e800 <_write_r>

0800e72e <__sseek>:
 800e72e:	b510      	push	{r4, lr}
 800e730:	460c      	mov	r4, r1
 800e732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e736:	f000 f9b1 	bl	800ea9c <_lseek_r>
 800e73a:	1c43      	adds	r3, r0, #1
 800e73c:	89a3      	ldrh	r3, [r4, #12]
 800e73e:	bf15      	itete	ne
 800e740:	6560      	strne	r0, [r4, #84]	; 0x54
 800e742:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e746:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e74a:	81a3      	strheq	r3, [r4, #12]
 800e74c:	bf18      	it	ne
 800e74e:	81a3      	strhne	r3, [r4, #12]
 800e750:	bd10      	pop	{r4, pc}

0800e752 <__sclose>:
 800e752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e756:	f000 b8d3 	b.w	800e900 <_close_r>
	...

0800e75c <__swbuf_r>:
 800e75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75e:	460e      	mov	r6, r1
 800e760:	4614      	mov	r4, r2
 800e762:	4605      	mov	r5, r0
 800e764:	b118      	cbz	r0, 800e76e <__swbuf_r+0x12>
 800e766:	6983      	ldr	r3, [r0, #24]
 800e768:	b90b      	cbnz	r3, 800e76e <__swbuf_r+0x12>
 800e76a:	f7ff f9dd 	bl	800db28 <__sinit>
 800e76e:	4b21      	ldr	r3, [pc, #132]	; (800e7f4 <__swbuf_r+0x98>)
 800e770:	429c      	cmp	r4, r3
 800e772:	d12b      	bne.n	800e7cc <__swbuf_r+0x70>
 800e774:	686c      	ldr	r4, [r5, #4]
 800e776:	69a3      	ldr	r3, [r4, #24]
 800e778:	60a3      	str	r3, [r4, #8]
 800e77a:	89a3      	ldrh	r3, [r4, #12]
 800e77c:	071a      	lsls	r2, r3, #28
 800e77e:	d52f      	bpl.n	800e7e0 <__swbuf_r+0x84>
 800e780:	6923      	ldr	r3, [r4, #16]
 800e782:	b36b      	cbz	r3, 800e7e0 <__swbuf_r+0x84>
 800e784:	6923      	ldr	r3, [r4, #16]
 800e786:	6820      	ldr	r0, [r4, #0]
 800e788:	b2f6      	uxtb	r6, r6
 800e78a:	1ac0      	subs	r0, r0, r3
 800e78c:	6963      	ldr	r3, [r4, #20]
 800e78e:	4637      	mov	r7, r6
 800e790:	4283      	cmp	r3, r0
 800e792:	dc04      	bgt.n	800e79e <__swbuf_r+0x42>
 800e794:	4621      	mov	r1, r4
 800e796:	4628      	mov	r0, r5
 800e798:	f000 f944 	bl	800ea24 <_fflush_r>
 800e79c:	bb30      	cbnz	r0, 800e7ec <__swbuf_r+0x90>
 800e79e:	68a3      	ldr	r3, [r4, #8]
 800e7a0:	3001      	adds	r0, #1
 800e7a2:	3b01      	subs	r3, #1
 800e7a4:	60a3      	str	r3, [r4, #8]
 800e7a6:	6823      	ldr	r3, [r4, #0]
 800e7a8:	1c5a      	adds	r2, r3, #1
 800e7aa:	6022      	str	r2, [r4, #0]
 800e7ac:	701e      	strb	r6, [r3, #0]
 800e7ae:	6963      	ldr	r3, [r4, #20]
 800e7b0:	4283      	cmp	r3, r0
 800e7b2:	d004      	beq.n	800e7be <__swbuf_r+0x62>
 800e7b4:	89a3      	ldrh	r3, [r4, #12]
 800e7b6:	07db      	lsls	r3, r3, #31
 800e7b8:	d506      	bpl.n	800e7c8 <__swbuf_r+0x6c>
 800e7ba:	2e0a      	cmp	r6, #10
 800e7bc:	d104      	bne.n	800e7c8 <__swbuf_r+0x6c>
 800e7be:	4621      	mov	r1, r4
 800e7c0:	4628      	mov	r0, r5
 800e7c2:	f000 f92f 	bl	800ea24 <_fflush_r>
 800e7c6:	b988      	cbnz	r0, 800e7ec <__swbuf_r+0x90>
 800e7c8:	4638      	mov	r0, r7
 800e7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7cc:	4b0a      	ldr	r3, [pc, #40]	; (800e7f8 <__swbuf_r+0x9c>)
 800e7ce:	429c      	cmp	r4, r3
 800e7d0:	d101      	bne.n	800e7d6 <__swbuf_r+0x7a>
 800e7d2:	68ac      	ldr	r4, [r5, #8]
 800e7d4:	e7cf      	b.n	800e776 <__swbuf_r+0x1a>
 800e7d6:	4b09      	ldr	r3, [pc, #36]	; (800e7fc <__swbuf_r+0xa0>)
 800e7d8:	429c      	cmp	r4, r3
 800e7da:	bf08      	it	eq
 800e7dc:	68ec      	ldreq	r4, [r5, #12]
 800e7de:	e7ca      	b.n	800e776 <__swbuf_r+0x1a>
 800e7e0:	4621      	mov	r1, r4
 800e7e2:	4628      	mov	r0, r5
 800e7e4:	f000 f81e 	bl	800e824 <__swsetup_r>
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	d0cb      	beq.n	800e784 <__swbuf_r+0x28>
 800e7ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e7f0:	e7ea      	b.n	800e7c8 <__swbuf_r+0x6c>
 800e7f2:	bf00      	nop
 800e7f4:	08010b14 	.word	0x08010b14
 800e7f8:	08010b34 	.word	0x08010b34
 800e7fc:	08010af4 	.word	0x08010af4

0800e800 <_write_r>:
 800e800:	b538      	push	{r3, r4, r5, lr}
 800e802:	4604      	mov	r4, r0
 800e804:	4608      	mov	r0, r1
 800e806:	4611      	mov	r1, r2
 800e808:	2200      	movs	r2, #0
 800e80a:	4d05      	ldr	r5, [pc, #20]	; (800e820 <_write_r+0x20>)
 800e80c:	602a      	str	r2, [r5, #0]
 800e80e:	461a      	mov	r2, r3
 800e810:	f7f2 fa15 	bl	8000c3e <_write>
 800e814:	1c43      	adds	r3, r0, #1
 800e816:	d102      	bne.n	800e81e <_write_r+0x1e>
 800e818:	682b      	ldr	r3, [r5, #0]
 800e81a:	b103      	cbz	r3, 800e81e <_write_r+0x1e>
 800e81c:	6023      	str	r3, [r4, #0]
 800e81e:	bd38      	pop	{r3, r4, r5, pc}
 800e820:	20006a74 	.word	0x20006a74

0800e824 <__swsetup_r>:
 800e824:	4b32      	ldr	r3, [pc, #200]	; (800e8f0 <__swsetup_r+0xcc>)
 800e826:	b570      	push	{r4, r5, r6, lr}
 800e828:	681d      	ldr	r5, [r3, #0]
 800e82a:	4606      	mov	r6, r0
 800e82c:	460c      	mov	r4, r1
 800e82e:	b125      	cbz	r5, 800e83a <__swsetup_r+0x16>
 800e830:	69ab      	ldr	r3, [r5, #24]
 800e832:	b913      	cbnz	r3, 800e83a <__swsetup_r+0x16>
 800e834:	4628      	mov	r0, r5
 800e836:	f7ff f977 	bl	800db28 <__sinit>
 800e83a:	4b2e      	ldr	r3, [pc, #184]	; (800e8f4 <__swsetup_r+0xd0>)
 800e83c:	429c      	cmp	r4, r3
 800e83e:	d10f      	bne.n	800e860 <__swsetup_r+0x3c>
 800e840:	686c      	ldr	r4, [r5, #4]
 800e842:	89a3      	ldrh	r3, [r4, #12]
 800e844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e848:	0719      	lsls	r1, r3, #28
 800e84a:	d42c      	bmi.n	800e8a6 <__swsetup_r+0x82>
 800e84c:	06dd      	lsls	r5, r3, #27
 800e84e:	d411      	bmi.n	800e874 <__swsetup_r+0x50>
 800e850:	2309      	movs	r3, #9
 800e852:	6033      	str	r3, [r6, #0]
 800e854:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e85c:	81a3      	strh	r3, [r4, #12]
 800e85e:	e03e      	b.n	800e8de <__swsetup_r+0xba>
 800e860:	4b25      	ldr	r3, [pc, #148]	; (800e8f8 <__swsetup_r+0xd4>)
 800e862:	429c      	cmp	r4, r3
 800e864:	d101      	bne.n	800e86a <__swsetup_r+0x46>
 800e866:	68ac      	ldr	r4, [r5, #8]
 800e868:	e7eb      	b.n	800e842 <__swsetup_r+0x1e>
 800e86a:	4b24      	ldr	r3, [pc, #144]	; (800e8fc <__swsetup_r+0xd8>)
 800e86c:	429c      	cmp	r4, r3
 800e86e:	bf08      	it	eq
 800e870:	68ec      	ldreq	r4, [r5, #12]
 800e872:	e7e6      	b.n	800e842 <__swsetup_r+0x1e>
 800e874:	0758      	lsls	r0, r3, #29
 800e876:	d512      	bpl.n	800e89e <__swsetup_r+0x7a>
 800e878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e87a:	b141      	cbz	r1, 800e88e <__swsetup_r+0x6a>
 800e87c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e880:	4299      	cmp	r1, r3
 800e882:	d002      	beq.n	800e88a <__swsetup_r+0x66>
 800e884:	4630      	mov	r0, r6
 800e886:	f7ff f9ef 	bl	800dc68 <_free_r>
 800e88a:	2300      	movs	r3, #0
 800e88c:	6363      	str	r3, [r4, #52]	; 0x34
 800e88e:	89a3      	ldrh	r3, [r4, #12]
 800e890:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e894:	81a3      	strh	r3, [r4, #12]
 800e896:	2300      	movs	r3, #0
 800e898:	6063      	str	r3, [r4, #4]
 800e89a:	6923      	ldr	r3, [r4, #16]
 800e89c:	6023      	str	r3, [r4, #0]
 800e89e:	89a3      	ldrh	r3, [r4, #12]
 800e8a0:	f043 0308 	orr.w	r3, r3, #8
 800e8a4:	81a3      	strh	r3, [r4, #12]
 800e8a6:	6923      	ldr	r3, [r4, #16]
 800e8a8:	b94b      	cbnz	r3, 800e8be <__swsetup_r+0x9a>
 800e8aa:	89a3      	ldrh	r3, [r4, #12]
 800e8ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e8b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8b4:	d003      	beq.n	800e8be <__swsetup_r+0x9a>
 800e8b6:	4621      	mov	r1, r4
 800e8b8:	4630      	mov	r0, r6
 800e8ba:	f000 f927 	bl	800eb0c <__smakebuf_r>
 800e8be:	89a0      	ldrh	r0, [r4, #12]
 800e8c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8c4:	f010 0301 	ands.w	r3, r0, #1
 800e8c8:	d00a      	beq.n	800e8e0 <__swsetup_r+0xbc>
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	60a3      	str	r3, [r4, #8]
 800e8ce:	6963      	ldr	r3, [r4, #20]
 800e8d0:	425b      	negs	r3, r3
 800e8d2:	61a3      	str	r3, [r4, #24]
 800e8d4:	6923      	ldr	r3, [r4, #16]
 800e8d6:	b943      	cbnz	r3, 800e8ea <__swsetup_r+0xc6>
 800e8d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e8dc:	d1ba      	bne.n	800e854 <__swsetup_r+0x30>
 800e8de:	bd70      	pop	{r4, r5, r6, pc}
 800e8e0:	0781      	lsls	r1, r0, #30
 800e8e2:	bf58      	it	pl
 800e8e4:	6963      	ldrpl	r3, [r4, #20]
 800e8e6:	60a3      	str	r3, [r4, #8]
 800e8e8:	e7f4      	b.n	800e8d4 <__swsetup_r+0xb0>
 800e8ea:	2000      	movs	r0, #0
 800e8ec:	e7f7      	b.n	800e8de <__swsetup_r+0xba>
 800e8ee:	bf00      	nop
 800e8f0:	20000018 	.word	0x20000018
 800e8f4:	08010b14 	.word	0x08010b14
 800e8f8:	08010b34 	.word	0x08010b34
 800e8fc:	08010af4 	.word	0x08010af4

0800e900 <_close_r>:
 800e900:	b538      	push	{r3, r4, r5, lr}
 800e902:	2300      	movs	r3, #0
 800e904:	4d05      	ldr	r5, [pc, #20]	; (800e91c <_close_r+0x1c>)
 800e906:	4604      	mov	r4, r0
 800e908:	4608      	mov	r0, r1
 800e90a:	602b      	str	r3, [r5, #0]
 800e90c:	f7f2 f9b3 	bl	8000c76 <_close>
 800e910:	1c43      	adds	r3, r0, #1
 800e912:	d102      	bne.n	800e91a <_close_r+0x1a>
 800e914:	682b      	ldr	r3, [r5, #0]
 800e916:	b103      	cbz	r3, 800e91a <_close_r+0x1a>
 800e918:	6023      	str	r3, [r4, #0]
 800e91a:	bd38      	pop	{r3, r4, r5, pc}
 800e91c:	20006a74 	.word	0x20006a74

0800e920 <__sflush_r>:
 800e920:	898a      	ldrh	r2, [r1, #12]
 800e922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e924:	4605      	mov	r5, r0
 800e926:	0710      	lsls	r0, r2, #28
 800e928:	460c      	mov	r4, r1
 800e92a:	d457      	bmi.n	800e9dc <__sflush_r+0xbc>
 800e92c:	684b      	ldr	r3, [r1, #4]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	dc04      	bgt.n	800e93c <__sflush_r+0x1c>
 800e932:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e934:	2b00      	cmp	r3, #0
 800e936:	dc01      	bgt.n	800e93c <__sflush_r+0x1c>
 800e938:	2000      	movs	r0, #0
 800e93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e93c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e93e:	2e00      	cmp	r6, #0
 800e940:	d0fa      	beq.n	800e938 <__sflush_r+0x18>
 800e942:	2300      	movs	r3, #0
 800e944:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e948:	682f      	ldr	r7, [r5, #0]
 800e94a:	602b      	str	r3, [r5, #0]
 800e94c:	d032      	beq.n	800e9b4 <__sflush_r+0x94>
 800e94e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e950:	89a3      	ldrh	r3, [r4, #12]
 800e952:	075a      	lsls	r2, r3, #29
 800e954:	d505      	bpl.n	800e962 <__sflush_r+0x42>
 800e956:	6863      	ldr	r3, [r4, #4]
 800e958:	1ac0      	subs	r0, r0, r3
 800e95a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e95c:	b10b      	cbz	r3, 800e962 <__sflush_r+0x42>
 800e95e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e960:	1ac0      	subs	r0, r0, r3
 800e962:	2300      	movs	r3, #0
 800e964:	4602      	mov	r2, r0
 800e966:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e968:	4628      	mov	r0, r5
 800e96a:	6a21      	ldr	r1, [r4, #32]
 800e96c:	47b0      	blx	r6
 800e96e:	1c43      	adds	r3, r0, #1
 800e970:	89a3      	ldrh	r3, [r4, #12]
 800e972:	d106      	bne.n	800e982 <__sflush_r+0x62>
 800e974:	6829      	ldr	r1, [r5, #0]
 800e976:	291d      	cmp	r1, #29
 800e978:	d82c      	bhi.n	800e9d4 <__sflush_r+0xb4>
 800e97a:	4a29      	ldr	r2, [pc, #164]	; (800ea20 <__sflush_r+0x100>)
 800e97c:	40ca      	lsrs	r2, r1
 800e97e:	07d6      	lsls	r6, r2, #31
 800e980:	d528      	bpl.n	800e9d4 <__sflush_r+0xb4>
 800e982:	2200      	movs	r2, #0
 800e984:	6062      	str	r2, [r4, #4]
 800e986:	6922      	ldr	r2, [r4, #16]
 800e988:	04d9      	lsls	r1, r3, #19
 800e98a:	6022      	str	r2, [r4, #0]
 800e98c:	d504      	bpl.n	800e998 <__sflush_r+0x78>
 800e98e:	1c42      	adds	r2, r0, #1
 800e990:	d101      	bne.n	800e996 <__sflush_r+0x76>
 800e992:	682b      	ldr	r3, [r5, #0]
 800e994:	b903      	cbnz	r3, 800e998 <__sflush_r+0x78>
 800e996:	6560      	str	r0, [r4, #84]	; 0x54
 800e998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e99a:	602f      	str	r7, [r5, #0]
 800e99c:	2900      	cmp	r1, #0
 800e99e:	d0cb      	beq.n	800e938 <__sflush_r+0x18>
 800e9a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9a4:	4299      	cmp	r1, r3
 800e9a6:	d002      	beq.n	800e9ae <__sflush_r+0x8e>
 800e9a8:	4628      	mov	r0, r5
 800e9aa:	f7ff f95d 	bl	800dc68 <_free_r>
 800e9ae:	2000      	movs	r0, #0
 800e9b0:	6360      	str	r0, [r4, #52]	; 0x34
 800e9b2:	e7c2      	b.n	800e93a <__sflush_r+0x1a>
 800e9b4:	6a21      	ldr	r1, [r4, #32]
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	47b0      	blx	r6
 800e9bc:	1c41      	adds	r1, r0, #1
 800e9be:	d1c7      	bne.n	800e950 <__sflush_r+0x30>
 800e9c0:	682b      	ldr	r3, [r5, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d0c4      	beq.n	800e950 <__sflush_r+0x30>
 800e9c6:	2b1d      	cmp	r3, #29
 800e9c8:	d001      	beq.n	800e9ce <__sflush_r+0xae>
 800e9ca:	2b16      	cmp	r3, #22
 800e9cc:	d101      	bne.n	800e9d2 <__sflush_r+0xb2>
 800e9ce:	602f      	str	r7, [r5, #0]
 800e9d0:	e7b2      	b.n	800e938 <__sflush_r+0x18>
 800e9d2:	89a3      	ldrh	r3, [r4, #12]
 800e9d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9d8:	81a3      	strh	r3, [r4, #12]
 800e9da:	e7ae      	b.n	800e93a <__sflush_r+0x1a>
 800e9dc:	690f      	ldr	r7, [r1, #16]
 800e9de:	2f00      	cmp	r7, #0
 800e9e0:	d0aa      	beq.n	800e938 <__sflush_r+0x18>
 800e9e2:	0793      	lsls	r3, r2, #30
 800e9e4:	bf18      	it	ne
 800e9e6:	2300      	movne	r3, #0
 800e9e8:	680e      	ldr	r6, [r1, #0]
 800e9ea:	bf08      	it	eq
 800e9ec:	694b      	ldreq	r3, [r1, #20]
 800e9ee:	1bf6      	subs	r6, r6, r7
 800e9f0:	600f      	str	r7, [r1, #0]
 800e9f2:	608b      	str	r3, [r1, #8]
 800e9f4:	2e00      	cmp	r6, #0
 800e9f6:	dd9f      	ble.n	800e938 <__sflush_r+0x18>
 800e9f8:	4633      	mov	r3, r6
 800e9fa:	463a      	mov	r2, r7
 800e9fc:	4628      	mov	r0, r5
 800e9fe:	6a21      	ldr	r1, [r4, #32]
 800ea00:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ea04:	47e0      	blx	ip
 800ea06:	2800      	cmp	r0, #0
 800ea08:	dc06      	bgt.n	800ea18 <__sflush_r+0xf8>
 800ea0a:	89a3      	ldrh	r3, [r4, #12]
 800ea0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea14:	81a3      	strh	r3, [r4, #12]
 800ea16:	e790      	b.n	800e93a <__sflush_r+0x1a>
 800ea18:	4407      	add	r7, r0
 800ea1a:	1a36      	subs	r6, r6, r0
 800ea1c:	e7ea      	b.n	800e9f4 <__sflush_r+0xd4>
 800ea1e:	bf00      	nop
 800ea20:	20400001 	.word	0x20400001

0800ea24 <_fflush_r>:
 800ea24:	b538      	push	{r3, r4, r5, lr}
 800ea26:	690b      	ldr	r3, [r1, #16]
 800ea28:	4605      	mov	r5, r0
 800ea2a:	460c      	mov	r4, r1
 800ea2c:	b913      	cbnz	r3, 800ea34 <_fflush_r+0x10>
 800ea2e:	2500      	movs	r5, #0
 800ea30:	4628      	mov	r0, r5
 800ea32:	bd38      	pop	{r3, r4, r5, pc}
 800ea34:	b118      	cbz	r0, 800ea3e <_fflush_r+0x1a>
 800ea36:	6983      	ldr	r3, [r0, #24]
 800ea38:	b90b      	cbnz	r3, 800ea3e <_fflush_r+0x1a>
 800ea3a:	f7ff f875 	bl	800db28 <__sinit>
 800ea3e:	4b14      	ldr	r3, [pc, #80]	; (800ea90 <_fflush_r+0x6c>)
 800ea40:	429c      	cmp	r4, r3
 800ea42:	d11b      	bne.n	800ea7c <_fflush_r+0x58>
 800ea44:	686c      	ldr	r4, [r5, #4]
 800ea46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d0ef      	beq.n	800ea2e <_fflush_r+0xa>
 800ea4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ea50:	07d0      	lsls	r0, r2, #31
 800ea52:	d404      	bmi.n	800ea5e <_fflush_r+0x3a>
 800ea54:	0599      	lsls	r1, r3, #22
 800ea56:	d402      	bmi.n	800ea5e <_fflush_r+0x3a>
 800ea58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea5a:	f7ff f903 	bl	800dc64 <__retarget_lock_acquire_recursive>
 800ea5e:	4628      	mov	r0, r5
 800ea60:	4621      	mov	r1, r4
 800ea62:	f7ff ff5d 	bl	800e920 <__sflush_r>
 800ea66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea68:	4605      	mov	r5, r0
 800ea6a:	07da      	lsls	r2, r3, #31
 800ea6c:	d4e0      	bmi.n	800ea30 <_fflush_r+0xc>
 800ea6e:	89a3      	ldrh	r3, [r4, #12]
 800ea70:	059b      	lsls	r3, r3, #22
 800ea72:	d4dd      	bmi.n	800ea30 <_fflush_r+0xc>
 800ea74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea76:	f7ff f8f6 	bl	800dc66 <__retarget_lock_release_recursive>
 800ea7a:	e7d9      	b.n	800ea30 <_fflush_r+0xc>
 800ea7c:	4b05      	ldr	r3, [pc, #20]	; (800ea94 <_fflush_r+0x70>)
 800ea7e:	429c      	cmp	r4, r3
 800ea80:	d101      	bne.n	800ea86 <_fflush_r+0x62>
 800ea82:	68ac      	ldr	r4, [r5, #8]
 800ea84:	e7df      	b.n	800ea46 <_fflush_r+0x22>
 800ea86:	4b04      	ldr	r3, [pc, #16]	; (800ea98 <_fflush_r+0x74>)
 800ea88:	429c      	cmp	r4, r3
 800ea8a:	bf08      	it	eq
 800ea8c:	68ec      	ldreq	r4, [r5, #12]
 800ea8e:	e7da      	b.n	800ea46 <_fflush_r+0x22>
 800ea90:	08010b14 	.word	0x08010b14
 800ea94:	08010b34 	.word	0x08010b34
 800ea98:	08010af4 	.word	0x08010af4

0800ea9c <_lseek_r>:
 800ea9c:	b538      	push	{r3, r4, r5, lr}
 800ea9e:	4604      	mov	r4, r0
 800eaa0:	4608      	mov	r0, r1
 800eaa2:	4611      	mov	r1, r2
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	4d05      	ldr	r5, [pc, #20]	; (800eabc <_lseek_r+0x20>)
 800eaa8:	602a      	str	r2, [r5, #0]
 800eaaa:	461a      	mov	r2, r3
 800eaac:	f7f2 f907 	bl	8000cbe <_lseek>
 800eab0:	1c43      	adds	r3, r0, #1
 800eab2:	d102      	bne.n	800eaba <_lseek_r+0x1e>
 800eab4:	682b      	ldr	r3, [r5, #0]
 800eab6:	b103      	cbz	r3, 800eaba <_lseek_r+0x1e>
 800eab8:	6023      	str	r3, [r4, #0]
 800eaba:	bd38      	pop	{r3, r4, r5, pc}
 800eabc:	20006a74 	.word	0x20006a74

0800eac0 <__swhatbuf_r>:
 800eac0:	b570      	push	{r4, r5, r6, lr}
 800eac2:	460e      	mov	r6, r1
 800eac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eac8:	4614      	mov	r4, r2
 800eaca:	2900      	cmp	r1, #0
 800eacc:	461d      	mov	r5, r3
 800eace:	b096      	sub	sp, #88	; 0x58
 800ead0:	da08      	bge.n	800eae4 <__swhatbuf_r+0x24>
 800ead2:	2200      	movs	r2, #0
 800ead4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ead8:	602a      	str	r2, [r5, #0]
 800eada:	061a      	lsls	r2, r3, #24
 800eadc:	d410      	bmi.n	800eb00 <__swhatbuf_r+0x40>
 800eade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eae2:	e00e      	b.n	800eb02 <__swhatbuf_r+0x42>
 800eae4:	466a      	mov	r2, sp
 800eae6:	f000 f8c7 	bl	800ec78 <_fstat_r>
 800eaea:	2800      	cmp	r0, #0
 800eaec:	dbf1      	blt.n	800ead2 <__swhatbuf_r+0x12>
 800eaee:	9a01      	ldr	r2, [sp, #4]
 800eaf0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eaf4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eaf8:	425a      	negs	r2, r3
 800eafa:	415a      	adcs	r2, r3
 800eafc:	602a      	str	r2, [r5, #0]
 800eafe:	e7ee      	b.n	800eade <__swhatbuf_r+0x1e>
 800eb00:	2340      	movs	r3, #64	; 0x40
 800eb02:	2000      	movs	r0, #0
 800eb04:	6023      	str	r3, [r4, #0]
 800eb06:	b016      	add	sp, #88	; 0x58
 800eb08:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eb0c <__smakebuf_r>:
 800eb0c:	898b      	ldrh	r3, [r1, #12]
 800eb0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb10:	079d      	lsls	r5, r3, #30
 800eb12:	4606      	mov	r6, r0
 800eb14:	460c      	mov	r4, r1
 800eb16:	d507      	bpl.n	800eb28 <__smakebuf_r+0x1c>
 800eb18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb1c:	6023      	str	r3, [r4, #0]
 800eb1e:	6123      	str	r3, [r4, #16]
 800eb20:	2301      	movs	r3, #1
 800eb22:	6163      	str	r3, [r4, #20]
 800eb24:	b002      	add	sp, #8
 800eb26:	bd70      	pop	{r4, r5, r6, pc}
 800eb28:	466a      	mov	r2, sp
 800eb2a:	ab01      	add	r3, sp, #4
 800eb2c:	f7ff ffc8 	bl	800eac0 <__swhatbuf_r>
 800eb30:	9900      	ldr	r1, [sp, #0]
 800eb32:	4605      	mov	r5, r0
 800eb34:	4630      	mov	r0, r6
 800eb36:	f7ff f8ff 	bl	800dd38 <_malloc_r>
 800eb3a:	b948      	cbnz	r0, 800eb50 <__smakebuf_r+0x44>
 800eb3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb40:	059a      	lsls	r2, r3, #22
 800eb42:	d4ef      	bmi.n	800eb24 <__smakebuf_r+0x18>
 800eb44:	f023 0303 	bic.w	r3, r3, #3
 800eb48:	f043 0302 	orr.w	r3, r3, #2
 800eb4c:	81a3      	strh	r3, [r4, #12]
 800eb4e:	e7e3      	b.n	800eb18 <__smakebuf_r+0xc>
 800eb50:	4b0d      	ldr	r3, [pc, #52]	; (800eb88 <__smakebuf_r+0x7c>)
 800eb52:	62b3      	str	r3, [r6, #40]	; 0x28
 800eb54:	89a3      	ldrh	r3, [r4, #12]
 800eb56:	6020      	str	r0, [r4, #0]
 800eb58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb5c:	81a3      	strh	r3, [r4, #12]
 800eb5e:	9b00      	ldr	r3, [sp, #0]
 800eb60:	6120      	str	r0, [r4, #16]
 800eb62:	6163      	str	r3, [r4, #20]
 800eb64:	9b01      	ldr	r3, [sp, #4]
 800eb66:	b15b      	cbz	r3, 800eb80 <__smakebuf_r+0x74>
 800eb68:	4630      	mov	r0, r6
 800eb6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb6e:	f000 f895 	bl	800ec9c <_isatty_r>
 800eb72:	b128      	cbz	r0, 800eb80 <__smakebuf_r+0x74>
 800eb74:	89a3      	ldrh	r3, [r4, #12]
 800eb76:	f023 0303 	bic.w	r3, r3, #3
 800eb7a:	f043 0301 	orr.w	r3, r3, #1
 800eb7e:	81a3      	strh	r3, [r4, #12]
 800eb80:	89a0      	ldrh	r0, [r4, #12]
 800eb82:	4305      	orrs	r5, r0
 800eb84:	81a5      	strh	r5, [r4, #12]
 800eb86:	e7cd      	b.n	800eb24 <__smakebuf_r+0x18>
 800eb88:	0800dac1 	.word	0x0800dac1

0800eb8c <memchr>:
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	b510      	push	{r4, lr}
 800eb90:	b2c9      	uxtb	r1, r1
 800eb92:	4402      	add	r2, r0
 800eb94:	4293      	cmp	r3, r2
 800eb96:	4618      	mov	r0, r3
 800eb98:	d101      	bne.n	800eb9e <memchr+0x12>
 800eb9a:	2000      	movs	r0, #0
 800eb9c:	e003      	b.n	800eba6 <memchr+0x1a>
 800eb9e:	7804      	ldrb	r4, [r0, #0]
 800eba0:	3301      	adds	r3, #1
 800eba2:	428c      	cmp	r4, r1
 800eba4:	d1f6      	bne.n	800eb94 <memchr+0x8>
 800eba6:	bd10      	pop	{r4, pc}

0800eba8 <memmove>:
 800eba8:	4288      	cmp	r0, r1
 800ebaa:	b510      	push	{r4, lr}
 800ebac:	eb01 0402 	add.w	r4, r1, r2
 800ebb0:	d902      	bls.n	800ebb8 <memmove+0x10>
 800ebb2:	4284      	cmp	r4, r0
 800ebb4:	4623      	mov	r3, r4
 800ebb6:	d807      	bhi.n	800ebc8 <memmove+0x20>
 800ebb8:	1e43      	subs	r3, r0, #1
 800ebba:	42a1      	cmp	r1, r4
 800ebbc:	d008      	beq.n	800ebd0 <memmove+0x28>
 800ebbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebc6:	e7f8      	b.n	800ebba <memmove+0x12>
 800ebc8:	4601      	mov	r1, r0
 800ebca:	4402      	add	r2, r0
 800ebcc:	428a      	cmp	r2, r1
 800ebce:	d100      	bne.n	800ebd2 <memmove+0x2a>
 800ebd0:	bd10      	pop	{r4, pc}
 800ebd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ebd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ebda:	e7f7      	b.n	800ebcc <memmove+0x24>

0800ebdc <__malloc_lock>:
 800ebdc:	4801      	ldr	r0, [pc, #4]	; (800ebe4 <__malloc_lock+0x8>)
 800ebde:	f7ff b841 	b.w	800dc64 <__retarget_lock_acquire_recursive>
 800ebe2:	bf00      	nop
 800ebe4:	20006a78 	.word	0x20006a78

0800ebe8 <__malloc_unlock>:
 800ebe8:	4801      	ldr	r0, [pc, #4]	; (800ebf0 <__malloc_unlock+0x8>)
 800ebea:	f7ff b83c 	b.w	800dc66 <__retarget_lock_release_recursive>
 800ebee:	bf00      	nop
 800ebf0:	20006a78 	.word	0x20006a78

0800ebf4 <_realloc_r>:
 800ebf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebf8:	4680      	mov	r8, r0
 800ebfa:	4614      	mov	r4, r2
 800ebfc:	460e      	mov	r6, r1
 800ebfe:	b921      	cbnz	r1, 800ec0a <_realloc_r+0x16>
 800ec00:	4611      	mov	r1, r2
 800ec02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec06:	f7ff b897 	b.w	800dd38 <_malloc_r>
 800ec0a:	b92a      	cbnz	r2, 800ec18 <_realloc_r+0x24>
 800ec0c:	f7ff f82c 	bl	800dc68 <_free_r>
 800ec10:	4625      	mov	r5, r4
 800ec12:	4628      	mov	r0, r5
 800ec14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec18:	f000 f850 	bl	800ecbc <_malloc_usable_size_r>
 800ec1c:	4284      	cmp	r4, r0
 800ec1e:	4607      	mov	r7, r0
 800ec20:	d802      	bhi.n	800ec28 <_realloc_r+0x34>
 800ec22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec26:	d812      	bhi.n	800ec4e <_realloc_r+0x5a>
 800ec28:	4621      	mov	r1, r4
 800ec2a:	4640      	mov	r0, r8
 800ec2c:	f7ff f884 	bl	800dd38 <_malloc_r>
 800ec30:	4605      	mov	r5, r0
 800ec32:	2800      	cmp	r0, #0
 800ec34:	d0ed      	beq.n	800ec12 <_realloc_r+0x1e>
 800ec36:	42bc      	cmp	r4, r7
 800ec38:	4622      	mov	r2, r4
 800ec3a:	4631      	mov	r1, r6
 800ec3c:	bf28      	it	cs
 800ec3e:	463a      	movcs	r2, r7
 800ec40:	f7fe fecc 	bl	800d9dc <memcpy>
 800ec44:	4631      	mov	r1, r6
 800ec46:	4640      	mov	r0, r8
 800ec48:	f7ff f80e 	bl	800dc68 <_free_r>
 800ec4c:	e7e1      	b.n	800ec12 <_realloc_r+0x1e>
 800ec4e:	4635      	mov	r5, r6
 800ec50:	e7df      	b.n	800ec12 <_realloc_r+0x1e>
	...

0800ec54 <_read_r>:
 800ec54:	b538      	push	{r3, r4, r5, lr}
 800ec56:	4604      	mov	r4, r0
 800ec58:	4608      	mov	r0, r1
 800ec5a:	4611      	mov	r1, r2
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	4d05      	ldr	r5, [pc, #20]	; (800ec74 <_read_r+0x20>)
 800ec60:	602a      	str	r2, [r5, #0]
 800ec62:	461a      	mov	r2, r3
 800ec64:	f7f1 ffce 	bl	8000c04 <_read>
 800ec68:	1c43      	adds	r3, r0, #1
 800ec6a:	d102      	bne.n	800ec72 <_read_r+0x1e>
 800ec6c:	682b      	ldr	r3, [r5, #0]
 800ec6e:	b103      	cbz	r3, 800ec72 <_read_r+0x1e>
 800ec70:	6023      	str	r3, [r4, #0]
 800ec72:	bd38      	pop	{r3, r4, r5, pc}
 800ec74:	20006a74 	.word	0x20006a74

0800ec78 <_fstat_r>:
 800ec78:	b538      	push	{r3, r4, r5, lr}
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	4d06      	ldr	r5, [pc, #24]	; (800ec98 <_fstat_r+0x20>)
 800ec7e:	4604      	mov	r4, r0
 800ec80:	4608      	mov	r0, r1
 800ec82:	4611      	mov	r1, r2
 800ec84:	602b      	str	r3, [r5, #0]
 800ec86:	f7f2 f801 	bl	8000c8c <_fstat>
 800ec8a:	1c43      	adds	r3, r0, #1
 800ec8c:	d102      	bne.n	800ec94 <_fstat_r+0x1c>
 800ec8e:	682b      	ldr	r3, [r5, #0]
 800ec90:	b103      	cbz	r3, 800ec94 <_fstat_r+0x1c>
 800ec92:	6023      	str	r3, [r4, #0]
 800ec94:	bd38      	pop	{r3, r4, r5, pc}
 800ec96:	bf00      	nop
 800ec98:	20006a74 	.word	0x20006a74

0800ec9c <_isatty_r>:
 800ec9c:	b538      	push	{r3, r4, r5, lr}
 800ec9e:	2300      	movs	r3, #0
 800eca0:	4d05      	ldr	r5, [pc, #20]	; (800ecb8 <_isatty_r+0x1c>)
 800eca2:	4604      	mov	r4, r0
 800eca4:	4608      	mov	r0, r1
 800eca6:	602b      	str	r3, [r5, #0]
 800eca8:	f7f1 ffff 	bl	8000caa <_isatty>
 800ecac:	1c43      	adds	r3, r0, #1
 800ecae:	d102      	bne.n	800ecb6 <_isatty_r+0x1a>
 800ecb0:	682b      	ldr	r3, [r5, #0]
 800ecb2:	b103      	cbz	r3, 800ecb6 <_isatty_r+0x1a>
 800ecb4:	6023      	str	r3, [r4, #0]
 800ecb6:	bd38      	pop	{r3, r4, r5, pc}
 800ecb8:	20006a74 	.word	0x20006a74

0800ecbc <_malloc_usable_size_r>:
 800ecbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecc0:	1f18      	subs	r0, r3, #4
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	bfbc      	itt	lt
 800ecc6:	580b      	ldrlt	r3, [r1, r0]
 800ecc8:	18c0      	addlt	r0, r0, r3
 800ecca:	4770      	bx	lr

0800eccc <_init>:
 800eccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecce:	bf00      	nop
 800ecd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecd2:	bc08      	pop	{r3}
 800ecd4:	469e      	mov	lr, r3
 800ecd6:	4770      	bx	lr

0800ecd8 <_fini>:
 800ecd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecda:	bf00      	nop
 800ecdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecde:	bc08      	pop	{r3}
 800ece0:	469e      	mov	lr, r3
 800ece2:	4770      	bx	lr
